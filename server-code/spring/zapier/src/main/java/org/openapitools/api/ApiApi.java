/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ErrorResponse;
import org.openapitools.model.ExecuteRequest;
import org.openapitools.model.ExecuteResponse;
import org.openapitools.model.ExposedActionResponseSchema;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:55:55.879556-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/check/ : Check
     * Test that the API and auth are working.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "check",
        summary = "Check",
        description = "Test that the API and auth are working.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        },
        security = {
            @SecurityRequirement(name = "AccessPointApiKeyQuery"),
            @SecurityRequirement(name = "SessionAuth"),
            @SecurityRequirement(name = "AccessPointApiKeyHeader"),
            @SecurityRequirement(name = "AccessPointOAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/check/"
    )
    
    default ResponseEntity<Void> check(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/exposed/{exposed_app_action_id}/execute/ : Execute App Action Endpoint
     * Give us a plain english description of exact action you want to do. There should be dynamically generated documentation for this endpoint for each action that is exposed.
     *
     * @param exposedAppActionId  (required)
     * @param executeRequest  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "executeAppActionEndpoint",
        summary = "Execute App Action Endpoint",
        description = "Give us a plain english description of exact action you want to do. There should be dynamically generated documentation for this endpoint for each action that is exposed.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExecuteResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "AccessPointApiKeyQuery"),
            @SecurityRequirement(name = "SessionAuth"),
            @SecurityRequirement(name = "AccessPointApiKeyHeader"),
            @SecurityRequirement(name = "AccessPointOAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/exposed/{exposed_app_action_id}/execute/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ExecuteResponse> executeAppActionEndpoint(
        @Pattern(regexp = "^[A-Z0-9]{26}$") @Parameter(name = "exposed_app_action_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("exposed_app_action_id") String exposedAppActionId,
        @Parameter(name = "ExecuteRequest", description = "", required = true) @Valid @RequestBody ExecuteRequest executeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"action_used\" : \"action_used\", \"result\" : \"{}\", \"assistant_hint\" : \"assistant_hint\", \"input_params\" : \"{}\", \"review_url\" : \"review_url\", \"id\" : \"id\", \"error\" : \"error\", \"result_field_labels\" : \"{}\", \"additional_results\" : [ \"{}\", \"{}\" ], \"status\" : \"success\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/configuration-link/ : Get Configuration Link
     * Provides a link to configure more actions. Alternatively, searching through apps and actions will provide more specific configuration links.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getConfigurationLink",
        summary = "Get Configuration Link",
        description = "Provides a link to configure more actions. Alternatively, searching through apps and actions will provide more specific configuration links.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        },
        security = {
            @SecurityRequirement(name = "AccessPointApiKeyQuery"),
            @SecurityRequirement(name = "SessionAuth"),
            @SecurityRequirement(name = "AccessPointApiKeyHeader"),
            @SecurityRequirement(name = "AccessPointOAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/configuration-link/"
    )
    
    default ResponseEntity<Void> getConfigurationLink(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/execution-log/{execution_log_id}/ : Get Execution Log Endpoint
     * Get the execution log for a given execution log id.
     *
     * @param executionLogId  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "getExecutionLogEndpoint",
        summary = "Get Execution Log Endpoint",
        description = "Get the execution log for a given execution log id.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExecuteResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "AccessPointApiKeyQuery"),
            @SecurityRequirement(name = "SessionAuth"),
            @SecurityRequirement(name = "AccessPointApiKeyHeader"),
            @SecurityRequirement(name = "AccessPointOAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/execution-log/{execution_log_id}/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ExecuteResponse> getExecutionLogEndpoint(
        @Pattern(regexp = "^[A-Z0-9]{26}$") @Parameter(name = "execution_log_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("execution_log_id") String executionLogId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"action_used\" : \"action_used\", \"result\" : \"{}\", \"assistant_hint\" : \"assistant_hint\", \"input_params\" : \"{}\", \"review_url\" : \"review_url\", \"id\" : \"id\", \"error\" : \"error\", \"result_field_labels\" : \"{}\", \"additional_results\" : [ \"{}\", \"{}\" ], \"status\" : \"success\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/exposed/ : List Exposed Actions
     * List all the currently exposed actions for the given account.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listExposedActions",
        summary = "List Exposed Actions",
        description = "List all the currently exposed actions for the given account.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExposedActionResponseSchema.class))
            })
        },
        security = {
            @SecurityRequirement(name = "AccessPointApiKeyQuery"),
            @SecurityRequirement(name = "SessionAuth"),
            @SecurityRequirement(name = "AccessPointApiKeyHeader"),
            @SecurityRequirement(name = "AccessPointOAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/exposed/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ExposedActionResponseSchema> listExposedActions(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"configuration_link\" : \"configuration_link\", \"results\" : [ { \"description\" : \"description\", \"operation_id\" : \"operation_id\", \"id\" : \"id\", \"params\" : \"{}\" }, { \"description\" : \"description\", \"operation_id\" : \"operation_id\", \"id\" : \"id\", \"params\" : \"{}\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
