/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:50:54.165948-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "vendor", description = "the vendor API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/vendor/{duns} : This endpoint returns a single vendor by their 9 digit DUNS number
     * &lt;p&gt;This endpoint returns a single vendor by their 9 digit DUNS number. DUNS numbers can be looked up in the &lt;a href&#x3D;\&quot;https://www.sam.gov\&quot;&gt;System for Award Management&lt;/a&gt; by vendor name.&lt;/p&gt;
     *
     * @param duns a nine digit DUNS number that uniquely identifies the vendor (required) (required)
     * @return No response was specified (status code 200)
     */
    @Operation(
        operationId = "getVendorGET",
        summary = "This endpoint returns a single vendor by their 9 digit DUNS number",
        description = "<p>This endpoint returns a single vendor by their 9 digit DUNS number. DUNS numbers can be looked up in the <a href=\"https://www.sam.gov\">System for Award Management</a> by vendor name.</p>",
        tags = { "vendor" },
        responses = {
            @ApiResponse(responseCode = "200", description = "No response was specified", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/vendor/{duns}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<Object> getVendorGET(
        @Parameter(name = "duns", description = "a nine digit DUNS number that uniquely identifies the vendor (required)", required = true, in = ParameterIn.PATH) @PathVariable("duns") String duns
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/contracts/ : This endpoint returns contract history from FPDS for a specific vendor
     * &lt;p&gt;This endpoint returns contract history from FPDS for a specific vendor. The vendor&#39;s DUNS number is a required parameter. You can also filter contracts by their NAICS code to find contracts relevant to a particular category.&lt;/p&gt;
     *
     * @param duns A 9-digit DUNS number that uniquely identifies a vendor (required). (required)
     * @param naics a six digit NAICS code used to filter by contracts with a certain NAICS (optional)
     * @param sort a field to sort on. Choices are date, status, agency, and amount (optional)
     * @param direction The sort direction of the results. Choices are asc or desc. (optional)
     * @param page the page to start on. Results are paginated in increments of 100. Begins at page&#x3D;1. (optional)
     * @return No response was specified (status code 200)
     */
    @Operation(
        operationId = "listContractsGET",
        summary = "This endpoint returns contract history from FPDS for a specific vendor",
        description = "<p>This endpoint returns contract history from FPDS for a specific vendor. The vendor's DUNS number is a required parameter. You can also filter contracts by their NAICS code to find contracts relevant to a particular category.</p>",
        tags = { "contracts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "No response was specified", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/contracts/",
        produces = { "*/*" }
    )
    
    default ResponseEntity<Object> listContractsGET(
        @NotNull @Parameter(name = "duns", description = "A 9-digit DUNS number that uniquely identifies a vendor (required).", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "duns", required = true) String duns,
        @Parameter(name = "naics", description = "a six digit NAICS code used to filter by contracts with a certain NAICS", in = ParameterIn.QUERY) @Valid @RequestParam(value = "naics", required = false) String naics,
        @Parameter(name = "sort", description = "a field to sort on. Choices are date, status, agency, and amount", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "direction", description = "The sort direction of the results. Choices are asc or desc.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "direction", required = false) String direction,
        @Parameter(name = "page", description = "the page to start on. Results are paginated in increments of 100. Begins at page=1.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) String page
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/naics/ : This endpoint lists all of the NAICS codes that are relevant to the OASIS family of vehicles
     * &lt;p&gt;This endpoint lists all of the NAICS codes that are relevant to the OASIS family of vehicles. It takes no parameters.&lt;/p&gt;
     *
     * @return No response was specified (status code 200)
     */
    @Operation(
        operationId = "listNaicsGET",
        summary = "This endpoint lists all of the NAICS codes that are relevant to the OASIS family of vehicles",
        description = "<p>This endpoint lists all of the NAICS codes that are relevant to the OASIS family of vehicles. It takes no parameters.</p>",
        tags = { "naics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "No response was specified", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/naics/",
        produces = { "*/*" }
    )
    
    default ResponseEntity<Object> listNaicsGET(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/vendors/ : This endpoint returns a list of vendors filtered by a NAICS code
     * &lt;p&gt;This endpoint returns a list of vendors filtered by a NAICS code. The NAICS code maps to an OASIS pool and is used to retrieve vendors in that pool only.&lt;/p&gt; &lt;p&gt;OASIS pools are groupings of NAICS codes that have the same small business size standard. Because contracts solicited to OASIS vendors can only be issued to one pool, much of the data is presented as part of a pool grouping. Using the NAICS code is a shortcut, so that you don&#39;t have to explicitly map the NAICS code to a pool in OASIS yourself.&lt;/p&gt; &lt;p&gt;Vendors can also be filtered by a particular setaside. Valid values for the setasides are two-character codes which include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A6 (8(a))&lt;/li&gt; &lt;li&gt;XX (Hubzone)&lt;/li&gt; &lt;li&gt;QF (service disabled veteran owned)&lt;/li&gt; &lt;li&gt;A2 (women owned)&lt;/li&gt; &lt;li&gt;A5 (veteran owned)&lt;/li&gt; &lt;li&gt;27 (small disadvantaged business).&lt;/li&gt; &lt;/ul&gt;
     *
     * @param naics a six digit NAICS code (required) (required)
     * @param setasides a comma delimited list of two character setaside codes to filter by.  Ex. setasides&#x3D;A6,A5  will filter by 8a and veteran owned business. (optional)
     * @param vehicle Choices are either oasis or oasissb. Will filter vendors by their presence in either the OASIS unrestricted vehicle or the OASIS Small Business vehicle. (optional)
     * @return No response was specified (status code 200)
     */
    @Operation(
        operationId = "listVendorsGET",
        summary = "This endpoint returns a list of vendors filtered by a NAICS code",
        description = "<p>This endpoint returns a list of vendors filtered by a NAICS code. The NAICS code maps to an OASIS pool and is used to retrieve vendors in that pool only.</p> <p>OASIS pools are groupings of NAICS codes that have the same small business size standard. Because contracts solicited to OASIS vendors can only be issued to one pool, much of the data is presented as part of a pool grouping. Using the NAICS code is a shortcut, so that you don't have to explicitly map the NAICS code to a pool in OASIS yourself.</p> <p>Vendors can also be filtered by a particular setaside. Valid values for the setasides are two-character codes which include:</p> <ul> <li>A6 (8(a))</li> <li>XX (Hubzone)</li> <li>QF (service disabled veteran owned)</li> <li>A2 (women owned)</li> <li>A5 (veteran owned)</li> <li>27 (small disadvantaged business).</li> </ul>",
        tags = { "vendors" },
        responses = {
            @ApiResponse(responseCode = "200", description = "No response was specified", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/vendors/",
        produces = { "*/*" }
    )
    
    default ResponseEntity<Object> listVendorsGET(
        @NotNull @Parameter(name = "naics", description = "a six digit NAICS code (required)", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "naics", required = true) String naics,
        @Parameter(name = "setasides", description = "a comma delimited list of two character setaside codes to filter by.  Ex. setasides=A6,A5  will filter by 8a and veteran owned business.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "setasides", required = false) List<String> setasides,
        @Parameter(name = "vehicle", description = "Choices are either oasis or oasissb. Will filter vendors by their presence in either the OASIS unrestricted vehicle or the OASIS Small Business vehicle.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vehicle", required = false) String vehicle
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/metadata/ : This endpoint returns metadata for the most recent data loads of SAM and FPDS data
     * &lt;p&gt;This endpoint returns metadata for the most recent data loads of SAM and FPDS data. It takes no parameters.&lt;/p&gt;
     *
     * @return No response was specified (status code 200)
     */
    @Operation(
        operationId = "metadataGET",
        summary = "This endpoint returns metadata for the most recent data loads of SAM and FPDS data",
        description = "<p>This endpoint returns metadata for the most recent data loads of SAM and FPDS data. It takes no parameters.</p>",
        tags = { "metadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "No response was specified", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/metadata/",
        produces = { "*/*" }
    )
    
    default ResponseEntity<Object> metadataGET(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
