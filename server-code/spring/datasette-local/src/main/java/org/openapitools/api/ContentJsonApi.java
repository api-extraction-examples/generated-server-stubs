/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:36.020139-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "content.json", description = "the content.json API")
public interface ContentJsonApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /content.json : Execute a SQLite SQL query against the content database
     * Accepts SQLite SQL query, returns JSON. Does not allow PRAGMA statements.
     *
     * @param sql The SQL query to be executed (required)
     * @param shape The shape of the response data. Must be \&quot;array\&quot; (required)
     * @return Successful SQL results (status code 200)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "query",
        summary = "Execute a SQLite SQL query against the content database",
        description = "Accepts SQLite SQL query, returns JSON. Does not allow PRAGMA statements.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful SQL results", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Object.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content.json",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Object>> query(
        @NotNull @Parameter(name = "sql", description = "The SQL query to be executed", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "sql", required = true) String sql,
        @NotNull @Parameter(name = "_shape", description = "The shape of the response data. Must be \"array\"", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "_shape", required = true) String shape
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"{}\", \"{}\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
