/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Body;
import org.openapitools.model.Body1;
import org.openapitools.model.Body2;
import org.openapitools.model.Body3;
import org.openapitools.model.Body4;
import org.openapitools.model.ErrorResponse;
import org.openapitools.model.MusicExportErrorResponse;
import org.openapitools.model.MusicExportJob;
import org.openapitools.model.MusicExportPreferences;
import org.openapitools.model.MusicExportPreferencesResponse;
import org.openapitools.model.MusicExportSuccess;
import org.openapitools.model.PersonalisedCategoriesResponse;
import org.openapitools.model.PersonalisedMusicBatchRequest;
import org.openapitools.model.PersonalisedMusicErrorResponse;
import org.openapitools.model.PersonalisedMusicRequest;
import org.openapitools.model.PersonalisedMusicResponse;
import org.openapitools.model.PersonalisedMusicSuccess;
import org.openapitools.model.PersonalisedNetworksResponse;
import org.openapitools.model.PersonalisedRadioBatchRequest;
import org.openapitools.model.PersonalisedRadioErrorResponse;
import org.openapitools.model.PersonalisedRadioRequest;
import org.openapitools.model.PersonalisedRadioResponse;
import org.openapitools.model.PersonalisedRadioSuccessResponse;
import org.openapitools.model.PlayspaceContainer;
import org.openapitools.model.ProgrammesResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:06.732824-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Music Export", description = "the Music Export API")
public interface MyApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /my/music/preferences/export : Music Export Preferences
     * Remove export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteMusicPreferencesExport",
        summary = "Music Export Preferences",
        description = "Remove export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user. ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/my/music/preferences/export",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicExportSuccess> deleteMusicPreferencesExport(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /my/music/preferences/export/{vendor} : Music Export Vendor Preferences
     * Remove Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteMusicPreferencesExportVendor",
        summary = "Music Export Vendor Preferences",
        description = "Remove Vendor specific export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user. ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/my/music/preferences/export/{vendor}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteMusicPreferencesExportVendor(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "vendor", description = "Supported 3rd Party Vendor", required = true, in = ParameterIn.PATH) @PathVariable("vendor") String vendor
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /my/music/favourites/{type}/{id} : Favourite Track or Clip
     * Delete track or clip from a BBC Music user favourites. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deletePersonalisedMusicFavouritesByTypeById",
        summary = "Favourite Track or Clip",
        description = "Delete track or clip from a BBC Music user favourites. ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/my/music/favourites/{type}/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicSuccess> deletePersonalisedMusicFavouritesByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Music favourite types: Clips or Tracks", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "id", description = "Clip PID or Track ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /my/music/follows/{type}/{id} : Followed Network, Category, Artist, Playlist and Genre
     * Remove a single network, category, artist, playlist, network, genre or service entity is in a users follows 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deletePersonalisedMusicFollowsByTypeById",
        summary = "Followed Network, Category, Artist, Playlist and Genre",
        description = "Remove a single network, category, artist, playlist, network, genre or service entity is in a users follows ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/my/music/follows/{type}/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicSuccess> deletePersonalisedMusicFollowsByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Music follows types: Playlists, Services, Genres & Artists", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "id", description = "Playlists, Services, Networks, Genres, Categories or Artists ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "music-data", description = "Omits music data from the response, defaults to true", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music-data", required = false) Boolean musicData,
        @Parameter(name = "music_context", description = "Specify context to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_context", required = false) String musicContext,
        @Parameter(name = "music_within_uk", description = "Specify location to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_within_uk", required = false) Boolean musicWithinUk
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /my/radio/favourites/{type}/{pid} : Favourite Episode or Clip
     * Remove User favourite 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deletePersonalisedRadioByActivityTypeById",
        summary = "Favourite Episode or Clip",
        description = "Remove User favourite ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/my/radio/favourites/{type}/{pid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioSuccessResponse> deletePersonalisedRadioByActivityTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Radio favourite types: Clips or Episodes", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "pid", description = "pid", required = true, in = ParameterIn.PATH) @PathVariable("pid") String pid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /my/radio/follows/{type}/{pid} : Followed Brand or Series
     * Remove &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deletePersonalisedRadioFollowsByTypeById",
        summary = "Followed Brand or Series",
        description = "Remove 'brand' or 'series' items from a users iPlayer Radio follows ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/my/radio/follows/{type}/{pid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioSuccessResponse> deletePersonalisedRadioFollowsByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Radio follows types: Brands or Series", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "pid", description = "pid", required = true, in = ParameterIn.PATH) @PathVariable("pid") String pid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/playspace/containers/{id} : Playspace Container by ID
     * Playspace Container by ID 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param id Playspace Container ID (required)
     * @return OK (status code 200)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     *         or No Playspace container with given ID could be found. (status code 404)
     */
    @Operation(
        operationId = "getContainer",
        summary = "Playspace Container by ID",
        description = "Playspace Container by ID ",
        tags = { "Playspace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PlayspaceContainer.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "No Playspace container with given ID could be found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/playspace/containers/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PlayspaceContainer> getContainer(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "id", description = "Playspace Container ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"members\" : [ { \"version_pid\" : \"version_pid\", \"image_url\" : \"image_url\", \"description\" : \"description\", \"pid\" : \"pid\", \"title\" : \"title\", \"type\" : \"type\" }, { \"version_pid\" : \"version_pid\", \"image_url\" : \"image_url\", \"description\" : \"description\", \"pid\" : \"pid\", \"title\" : \"title\", \"type\" : \"type\" } ], \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/export : Music Exports
     * Returns status of all previous third party export actions for a given BBC Music user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicExport",
        summary = "Music Exports",
        description = "Returns status of all previous third party export actions for a given BBC Music user. ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportJob.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/export",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicExportJob> getMusicExport(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"job_id\" : \"job_id\", \"vendor\" : \"vendor\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/exports/jobs : Music Export Jobs
     * All items associated to a users export request 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param vendor Specify Vendor Jobs (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicExportJobs",
        summary = "Music Export Jobs",
        description = "All items associated to a users export request ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportJob.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/exports/jobs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicExportJob> getMusicExportJobs(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @NotNull @Parameter(name = "over16", description = "Boolean age check", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "over16", required = true) Boolean over16,
        @Parameter(name = "vendor", description = "Specify Vendor Jobs", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vendor", required = false) String vendor
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"job_id\" : \"job_id\", \"vendor\" : \"vendor\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/exports/tracks : Music Export Tracks
     * Retrieves vendor and status specific tracks 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param vendor Specify Vendor Tracks (optional)
     * @param status Specify Track status (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicExportTracks",
        summary = "Music Export Tracks",
        description = "Retrieves vendor and status specific tracks ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportJob.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/exports/tracks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicExportJob> getMusicExportTracks(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @NotNull @Parameter(name = "over16", description = "Boolean age check", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "over16", required = true) Boolean over16,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "vendor", description = "Specify Vendor Tracks", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vendor", required = false) String vendor,
        @Parameter(name = "status", description = "Specify Track status", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"job_id\" : \"job_id\", \"vendor\" : \"vendor\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/preferences/export : Music Export Preferences
     * Returns export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicPreferencesExport",
        summary = "Music Export Preferences",
        description = "Returns export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user. ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportPreferencesResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/preferences/export",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicExportPreferencesResponse> getMusicPreferencesExport(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"total\" : 0, \"method\" : \"method\", \"replied_at\" : \"replied_at\", \"results\" : [ { \"access_token\" : \"access_token\", \"refresh_token\" : \"refresh_token\", \"last_export\" : \"last_export\", \"partner_id\" : \"partner_id\", \"terms\" : true, \"authorization_code\" : \"authorization_code\", \"vendor\" : \"vendor\", \"add_plus_export\" : true, \"access_expires_at\" : \"access_expires_at\", \"legacy_state\" : \"legacy_state\" }, { \"access_token\" : \"access_token\", \"refresh_token\" : \"refresh_token\", \"last_export\" : \"last_export\", \"partner_id\" : \"partner_id\", \"terms\" : true, \"authorization_code\" : \"authorization_code\", \"vendor\" : \"vendor\", \"add_plus_export\" : true, \"access_expires_at\" : \"access_expires_at\", \"legacy_state\" : \"legacy_state\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/preferences/export/{vendor} : Music Export Vendor Preferences
     * Returns vendor specific export preferences for a given BBC Music user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicPreferencesExportVendor",
        summary = "Music Export Vendor Preferences",
        description = "Returns vendor specific export preferences for a given BBC Music user. ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportPreferencesResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/preferences/export/{vendor}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicExportPreferencesResponse> getMusicPreferencesExportVendor(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "vendor", description = "Supported 3rd Party Vendor", required = true, in = ParameterIn.PATH) @PathVariable("vendor") String vendor
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"total\" : 0, \"method\" : \"method\", \"replied_at\" : \"replied_at\", \"results\" : [ { \"access_token\" : \"access_token\", \"refresh_token\" : \"refresh_token\", \"last_export\" : \"last_export\", \"partner_id\" : \"partner_id\", \"terms\" : true, \"authorization_code\" : \"authorization_code\", \"vendor\" : \"vendor\", \"add_plus_export\" : true, \"access_expires_at\" : \"access_expires_at\", \"legacy_state\" : \"legacy_state\" }, { \"access_token\" : \"access_token\", \"refresh_token\" : \"refresh_token\", \"last_export\" : \"last_export\", \"partner_id\" : \"partner_id\", \"terms\" : true, \"authorization_code\" : \"authorization_code\", \"vendor\" : \"vendor\", \"add_plus_export\" : true, \"access_expires_at\" : \"access_expires_at\", \"legacy_state\" : \"legacy_state\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/favourites : Favourite Tracks or Clips
     * List of favourited tracks and clips for a given user for BBC Music. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedMusicFavourites",
        summary = "Favourite Tracks or Clips",
        description = "List of favourited tracks and clips for a given user for BBC Music. ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/favourites",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicResponse> getPersonalisedMusicFavourites(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "action", description = "Filters activities based on the type of action", in = ParameterIn.QUERY) @Valid @RequestParam(value = "action", required = false) String action,
        @Parameter(name = "music-data", description = "Omits music data from the response, defaults to true", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music-data", required = false) Boolean musicData
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/favourites/{type} : Favourite Tracks or Clips by Type
     * List of favourited tracks or clips for a given user for BBC Music. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param action Filters activities based on the type of action (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedMusicFavouritesByType",
        summary = "Favourite Tracks or Clips by Type",
        description = "List of favourited tracks or clips for a given user for BBC Music. ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/favourites/{type}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicResponse> getPersonalisedMusicFavouritesByType(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Music favourite types: Clips or Tracks", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "action", description = "Filters activities based on the type of action", in = ParameterIn.QUERY) @Valid @RequestParam(value = "action", required = false) String action,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/favourites/{type}/{id} : Favourite Track or Clip
     * Check to see if a single track or clip entity is in a users favourites - determines UX of add button. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedMusicFavouritesByTypeById",
        summary = "Favourite Track or Clip",
        description = "Check to see if a single track or clip entity is in a users favourites - determines UX of add button. ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/favourites/{type}/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicResponse> getPersonalisedMusicFavouritesByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Music favourite types: Clips or Tracks", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "id", description = "Clip PID or Track ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/follows : Followed Networks, Categories, Artists, Playlists and Genres
     * List of followed networks, categories, artists, playlists and genres for a given user for BBC Music. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedMusicFollows",
        summary = "Followed Networks, Categories, Artists, Playlists and Genres",
        description = "List of followed networks, categories, artists, playlists and genres for a given user for BBC Music. ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/follows",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicResponse> getPersonalisedMusicFollows(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "action", description = "Filters activities based on the type of action", in = ParameterIn.QUERY) @Valid @RequestParam(value = "action", required = false) String action,
        @Parameter(name = "music-data", description = "Omits music data from the response, defaults to true", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music-data", required = false) Boolean musicData,
        @Parameter(name = "music_context", description = "Specify context to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_context", required = false) String musicContext,
        @Parameter(name = "music_within_uk", description = "Specify location to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_within_uk", required = false) Boolean musicWithinUk,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/follows/{type} : Followed Networks, Categories, Artists, Playlists and Genres by Type
     * List of followed networks, categories, artists, playlists, networks, genres, categories or services for a given BBC Music user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedMusicFollowsByType",
        summary = "Followed Networks, Categories, Artists, Playlists and Genres by Type",
        description = "List of followed networks, categories, artists, playlists, networks, genres, categories or services for a given BBC Music user. ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/follows/{type}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicResponse> getPersonalisedMusicFollowsByType(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Music follows types: Playlists, Services, Genres & Artists", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "action", description = "Filters activities based on the type of action", in = ParameterIn.QUERY) @Valid @RequestParam(value = "action", required = false) String action,
        @Parameter(name = "music-data", description = "Omits music data from the response, defaults to true", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music-data", required = false) Boolean musicData,
        @Parameter(name = "music_context", description = "Specify context to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_context", required = false) String musicContext,
        @Parameter(name = "music_within_uk", description = "Specify location to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_within_uk", required = false) Boolean musicWithinUk,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/music/follows/{type}/{id} : Followed Network, Category, Artist, Playlist and Genre
     * Check to see if a single network, category, artist, playlist, network, genre or service entity is in a users follows - determines UX of add button. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedMusicFollowsByTypeById",
        summary = "Followed Network, Category, Artist, Playlist and Genre",
        description = "Check to see if a single network, category, artist, playlist, network, genre or service entity is in a users follows - determines UX of add button. ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/music/follows/{type}/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicResponse> getPersonalisedMusicFollowsByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Music follows types: Playlists, Services, Genres & Artists", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "id", description = "Playlists, Services, Networks, Genres, Categories or Artists ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "music-data", description = "Omits music data from the response, defaults to true", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music-data", required = false) Boolean musicData,
        @Parameter(name = "music_context", description = "Specify context to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_context", required = false) String musicContext,
        @Parameter(name = "music_within_uk", description = "Specify location to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_within_uk", required = false) Boolean musicWithinUk
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/radio/favourites/{type}/{pid} : Favourite Episode or Clip
     * Check to see if a single clip or episode entity is in a users favourites - determines UX of add button.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedRadioByActivityTypeById",
        summary = "Favourite Episode or Clip",
        description = "Check to see if a single clip or episode entity is in a users favourites - determines UX of add button.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/radio/favourites/{type}/{pid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioResponse> getPersonalisedRadioByActivityTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Radio favourite types: Clips or Episodes", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "pid", description = "pid", required = true, in = ParameterIn.PATH) @PathVariable("pid") String pid,
        @Parameter(name = "show_all_activity", description = "Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "show_all_activity", required = false) Boolean showAllActivity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/radio/favourites : Favourite Episodes and Clips
     * List of favourited episodes and clips for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedRadioFavourites",
        summary = "Favourite Episodes and Clips",
        description = "List of favourited episodes and clips for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/radio/favourites",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioResponse> getPersonalisedRadioFavourites(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "sort", description = "Sort order for Personalised Radio results", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "show_all_activity", description = "Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "show_all_activity", required = false) Boolean showAllActivity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/radio/favourites/{type} : Favourite Episodes and Clips by Type
     * List of followed &#39;clips&#39; or &#39;episode&#39; items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedRadioFavouritesByType",
        summary = "Favourite Episodes and Clips by Type",
        description = "List of followed 'clips' or 'episode' items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/radio/favourites/{type}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioResponse> getPersonalisedRadioFavouritesByType(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Radio favourite types: Clips or Episodes", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "sort", description = "Sort order for Personalised Radio results", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "show_all_activity", description = "Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "show_all_activity", required = false) Boolean showAllActivity,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/radio/follows : Followed Brands and Series
     * List of favourited brands and series for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39; (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedRadioFollows",
        summary = "Followed Brands and Series",
        description = "List of favourited brands and series for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/radio/follows",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioResponse> getPersonalisedRadioFollows(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "sort", description = "Sort order for Personalised Radio results", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "show_all_activity", description = "Include items which have been 'soft' unfollowed in response. I.e items with UAS type of 'unfollowed'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "show_all_activity", required = false) Boolean showAllActivity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/radio/follows/{type} : Followed Brands or Series by Type
     * List of followed &#39;brand&#39; or &#39;series&#39; items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39; (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedRadioFollowsByType",
        summary = "Followed Brands or Series by Type",
        description = "List of followed 'brand' or 'series' items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/radio/follows/{type}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioResponse> getPersonalisedRadioFollowsByType(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Radio follows types: Brands or Series", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "sort", description = "Sort order for Personalised Radio results", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "show_all_activity", description = "Include items which have been 'soft' unfollowed in response. I.e items with UAS type of 'unfollowed'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "show_all_activity", required = false) Boolean showAllActivity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/radio/follows/{type}/{pid} : Followed Brand or Series
     * Check to see if a single brand or series entity is in a users follows - determines UX of add button. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedRadioFollowsByTypeById",
        summary = "Followed Brand or Series",
        description = "Check to see if a single brand or series entity is in a users follows - determines UX of add button. ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/radio/follows/{type}/{pid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioResponse> getPersonalisedRadioFollowsByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Radio follows types: Brands or Series", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "pid", description = "pid", required = true, in = ParameterIn.PATH) @PathVariable("pid") String pid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/radio/plays : Played Episode or Clip
     * Returns mixed episode and clip plays for a given BBC iPlayer radio user.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include expired/unavailable items (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPersonalisedRadioPlays",
        summary = "Played Episode or Clip",
        description = "Returns mixed episode and clip plays for a given BBC iPlayer radio user.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/radio/plays",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioResponse> getPersonalisedRadioPlays(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "sort", description = "Sort order for Personalised Radio results", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "show_all_activity", description = "Include expired/unavailable items", in = ParameterIn.QUERY) @Valid @RequestParam(value = "show_all_activity", required = false) Boolean showAllActivity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"metadata\" : { \"miscellaneous\" : { \"title\" : \"title\" }, \"origin\" : { \"type\" : \"type\" }, \"type\" : \"type\", \"programme_type\" : \"programme_type\" }, \"activity\" : \"activity\", \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"uas_type\" : \"uas_type\", \"domain\" : \"domain\", \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/programmes/recommendations : Recommended Programmes
     * Recommended Programmes from the Audience Platforms&#39; Recomendations Service 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param rights Only return available results for the web/mobile. (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getRecommendations",
        summary = "Recommended Programmes",
        description = "Recommended Programmes from the Audience Platforms' Recomendations Service ",
        tags = { "Programmes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProgrammesResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/programmes/recommendations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProgrammesResponse> getRecommendations(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @NotNull @Parameter(name = "rights", description = "Only return available results for the web/mobile.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "rights", required = true) String rights,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, { \"pid\" : \"pid\", \"type\" : \"brand_summary\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /my/categories/follows : Unfollow category
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param body  (required)
     * @return Request successfully sent to UAS. (status code 202)
     *         or The request was malformed. (status code 400)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     */
    @Operation(
        operationId = "myCategoriesFollowsDelete",
        summary = "Unfollow category",
        tags = { "Personalised Categories" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Request successfully sent to UAS."),
            @ApiResponse(responseCode = "400", description = "The request was malformed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/my/categories/follows",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> myCategoriesFollowsDelete(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "Body", description = "", required = true) @Valid @RequestBody Body1 body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/categories/follows : List of followed categories
     * List of followed categories for a given user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "myCategoriesFollowsGet",
        summary = "List of followed categories",
        description = "List of followed categories for a given user. ",
        tags = { "Personalised Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedCategoriesResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/categories/follows",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedCategoriesResponse> myCategoriesFollowsGet(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"offset\" : 6, \"limit\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/categories/follows : Follow category
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param body  (required)
     * @return Request successfully sent to UAS. (status code 202)
     *         or The request was malformed. (status code 400)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     */
    @Operation(
        operationId = "myCategoriesFollowsPost",
        summary = "Follow category",
        tags = { "Personalised Categories" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Request successfully sent to UAS."),
            @ApiResponse(responseCode = "400", description = "The request was malformed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/categories/follows",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> myCategoriesFollowsPost(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "Body", description = "", required = true) @Valid @RequestBody Body body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /my/networks/follows : Unfollow network
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param body  (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return Request successfully sent to UAS. (status code 202)
     *         or The request was malformed. (status code 400)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     */
    @Operation(
        operationId = "myNetworksFollowsDelete",
        summary = "Unfollow network",
        tags = { "Personalised Networks" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Request successfully sent to UAS."),
            @ApiResponse(responseCode = "400", description = "The request was malformed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/my/networks/follows",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> myNetworksFollowsDelete(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "Body", description = "", required = true) @Valid @RequestBody Body3 body,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/networks/follows : List of followed networks
     * List of followed networks for a given user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "myNetworksFollowsGet",
        summary = "List of followed networks",
        description = "List of followed networks for a given user. ",
        tags = { "Personalised Networks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedNetworksResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/networks/follows",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedNetworksResponse> myNetworksFollowsGet(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"created\" : \"created\", \"type\" : \"type\" }, { \"created\" : \"created\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/networks/follows : Follow network
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param body  (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return Request successfully sent to UAS. (status code 202)
     *         or The request was malformed. (status code 400)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     */
    @Operation(
        operationId = "myNetworksFollowsPost",
        summary = "Follow network",
        tags = { "Personalised Networks" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Request successfully sent to UAS."),
            @ApiResponse(responseCode = "400", description = "The request was malformed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/networks/follows",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> myNetworksFollowsPost(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "Body", description = "", required = true) @Valid @RequestBody Body2 body,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/plays : Write Play Event
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param body  (required)
     * @return Request successfully sent to UAS. (status code 202)
     *         or The request was malformed. (status code 400)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     */
    @Operation(
        operationId = "myPlaysPost",
        summary = "Write Play Event",
        tags = { "Personalised Plays" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Request successfully sent to UAS."),
            @ApiResponse(responseCode = "400", description = "The request was malformed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/plays",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> myPlaysPost(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "Body", description = "", required = true) @Valid @RequestBody Body4 body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/music/exports/jobs : Music Export Jobs
     * Create Export Job for a user 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param body  (required)
     * @param vendor Specify Vendor Jobs (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postMusicExportJob",
        summary = "Music Export Jobs",
        description = "Create Export Job for a user ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/music/exports/jobs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MusicExportSuccess> postMusicExportJob(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @NotNull @Parameter(name = "over16", description = "Boolean age check", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "over16", required = true) Boolean over16,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody List<@Valid MusicExportJob> body,
        @Parameter(name = "vendor", description = "Specify Vendor Jobs", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vendor", required = false) String vendor
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/music/preferences/export : Music Export Preferences
     * Create export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body  (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postMusicPreferencesExport",
        summary = "Music Export Preferences",
        description = "Create export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user. ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/music/preferences/export",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MusicExportSuccess> postMusicPreferencesExport(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody MusicExportPreferences body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/music/preferences/export/{vendor} : Music Export Vendor Preferences
     * Create Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param body  (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postMusicPreferencesExportVendor",
        summary = "Music Export Vendor Preferences",
        description = "Create Vendor specific export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user. ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/music/preferences/export/{vendor}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> postMusicPreferencesExportVendor(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "vendor", description = "Supported 3rd Party Vendor", required = true, in = ParameterIn.PATH) @PathVariable("vendor") String vendor,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody MusicExportPreferences body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/music/favourites : Favourite Tracks or Clips
     * Add multiple tracks and/or clips to a BBC Music user&#39;s favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postPersonalisedMusicFavouritesBatch",
        summary = "Favourite Tracks or Clips",
        description = "Add multiple tracks and/or clips to a BBC Music user's favourites.  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/music/favourites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicResponse> postPersonalisedMusicFavouritesBatch(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "body", description = "Action favourited or unfavourited", required = true) @Valid @RequestBody List<@Valid PersonalisedMusicBatchRequest> body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/music/favourites/{type}/{id} : Favourite Track or Clip
     * Add track or clip to a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param body Action favourited or unfavourited (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postPersonalisedMusicFavouritesByTypeById",
        summary = "Favourite Track or Clip",
        description = "Add track or clip to a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/music/favourites/{type}/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicResponse> postPersonalisedMusicFavouritesByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Music favourite types: Clips or Tracks", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "id", description = "Clip PID or Track ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "body", description = "Action favourited or unfavourited", required = true) @Valid @RequestBody PersonalisedMusicRequest body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"replied_at\" : \"replied_at\", \"results\" : [ { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" }, { \"urn\" : \"urn\", \"added_at\" : \"added_at\", \"activity\" : \"activity\", \"data\" : [ { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } }, { \"playlist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"updated_at\" : \"updated_at\", \"playback_type\" : \"playback_type\", \"service_id\" : \"service_id\", \"description\" : \"description\", \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"starts_at\" : \"starts_at\", \"expires_at\" : \"expires_at\", \"warnings\" : [ \"warnings\", \"warnings\" ], \"id\" : \"id\" }, \"tracks\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } } }, \"artist\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, \"service\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"genre\" : { \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, \"track\" : { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"contributions\" : [ { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" }, { \"images\" : [ { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" }, { \"format\" : \"format\", \"id\" : \"id\", \"type\" : \"type\" } ], \"role\" : \"role\", \"name\" : \"name\", \"id\" : \"id\" } ], \"id\" : \"id\", \"media\" : [ { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" }, { \"duration\" : 1, \"scope\" : \"scope\", \"format\" : \"format\", \"id\" : \"id\", \"source\" : \"source\", \"type\" : \"type\" } ], \"title\" : \"title\", \"type\" : \"type\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true } }, \"clip\" : { \"masterbrandMid\" : \"masterbrandMid\", \"parentProgramme\" : { \"entityType\" : \"entityType\", \"pid\" : \"pid\", \"title\" : \"title\" }, \"endDate\" : \"endDate\", \"entityType\" : \"entityType\", \"imageUrl\" : \"imageUrl\", \"mediaType\" : \"mediaType\", \"pid\" : \"pid\", \"contributors\" : [ \"contributors\", \"contributors\" ], \"synopsis\" : \"synopsis\", \"title\" : \"title\", \"version\" : { \"duration\" : \"duration\", \"vpid\" : \"vpid\", \"classical\" : true, \"radio\" : true }, \"startDate\" : \"startDate\" } } ], \"domain\" : \"domain\", \"meta_data\" : { \"key\" : \"key\" }, \"action\" : \"action\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/music/follows : Followed Networks, Categories, Artists, Playlists and Genres
     * Add networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postPersonalisedMusicFollowsBatch",
        summary = "Followed Networks, Categories, Artists, Playlists and Genres",
        description = "Add networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/music/follows",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicSuccess> postPersonalisedMusicFollowsBatch(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "body", description = "Action followed or unfollowed", required = true) @Valid @RequestBody List<@Valid PersonalisedMusicBatchRequest> body,
        @Parameter(name = "action", description = "Filters activities based on the type of action", in = ParameterIn.QUERY) @Valid @RequestParam(value = "action", required = false) String action,
        @Parameter(name = "music-data", description = "Omits music data from the response, defaults to true", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music-data", required = false) Boolean musicData,
        @Parameter(name = "music_context", description = "Specify context to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_context", required = false) String musicContext,
        @Parameter(name = "music_within_uk", description = "Specify location to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_within_uk", required = false) Boolean musicWithinUk
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/music/follows/{type}/{id} : Followed Network, Category, Artist, Playlist and Genre
     * Add a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param body Action followed or unfollowed (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postPersonalisedMusicFollowsByTypeById",
        summary = "Followed Network, Category, Artist, Playlist and Genre",
        description = "Add a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/music/follows/{type}/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicSuccess> postPersonalisedMusicFollowsByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Music follows types: Playlists, Services, Genres & Artists", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "id", description = "Playlists, Services, Networks, Genres, Categories or Artists ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "body", description = "Action followed or unfollowed", required = true) @Valid @RequestBody PersonalisedMusicRequest body,
        @Parameter(name = "music-data", description = "Omits music data from the response, defaults to true", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music-data", required = false) Boolean musicData,
        @Parameter(name = "music_context", description = "Specify context to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_context", required = false) String musicContext,
        @Parameter(name = "music_within_uk", description = "Specify location to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_within_uk", required = false) Boolean musicWithinUk
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/radio/favourites : Favourite Episodes and Clips
     * Add User favourites  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postPersonalisedRadioBatch",
        summary = "Favourite Episodes and Clips",
        description = "Add User favourites  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/radio/favourites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioSuccessResponse> postPersonalisedRadioBatch(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "body", description = "Action favourited or unfavourited", required = true) @Valid @RequestBody List<@Valid PersonalisedRadioBatchRequest> body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/radio/favourites/{type}/{pid} : Favourite Episode or Clip
     * Add User favourite  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param body Action favourited or unfavourited (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postPersonalisedRadioByActivityTypeById",
        summary = "Favourite Episode or Clip",
        description = "Add User favourite  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/radio/favourites/{type}/{pid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioSuccessResponse> postPersonalisedRadioByActivityTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Radio favourite types: Clips or Episodes", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "pid", description = "pid", required = true, in = ParameterIn.PATH) @PathVariable("pid") String pid,
        @Parameter(name = "body", description = "Action favourited or unfavourited", required = true) @Valid @RequestBody PersonalisedRadioRequest body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/radio/follows : Followed Brands and Series
     * Add &#39;brand&#39; or &#39;series&#39; items to a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postPersonalisedRadioFollowsBatch",
        summary = "Followed Brands and Series",
        description = "Add 'brand' or 'series' items to a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/radio/follows",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioSuccessResponse> postPersonalisedRadioFollowsBatch(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "body", description = "Action followed or unfollowed", required = true) @Valid @RequestBody List<@Valid PersonalisedRadioBatchRequest> body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /my/radio/follows/{type}/{pid} : Followed Brand or Series
     * Add &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param body Action followed or unfollowed (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postPersonalisedRadioFollowsByTypeById",
        summary = "Followed Brand or Series",
        description = "Add 'brand' or 'series' items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/my/radio/follows/{type}/{pid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioSuccessResponse> postPersonalisedRadioFollowsByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Radio follows types: Brands or Series", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "pid", description = "pid", required = true, in = ParameterIn.PATH) @PathVariable("pid") String pid,
        @Parameter(name = "body", description = "Action followed or unfollowed", required = true) @Valid @RequestBody PersonalisedRadioRequest body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /my/music/preferences/export/{vendor} : Music Export Vendor Preferences
     * Update vendor specific export preferences for a given BBC Music user. 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param body  (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "putMusicPreferencesExportVendor",
        summary = "Music Export Vendor Preferences",
        description = "Update vendor specific export preferences for a given BBC Music user. ",
        tags = { "Music Export" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicExportErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/my/music/preferences/export/{vendor}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> putMusicPreferencesExportVendor(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "vendor", description = "Supported 3rd Party Vendor", required = true, in = ParameterIn.PATH) @PathVariable("vendor") String vendor,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody MusicExportPreferences body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /my/music/favourites : Favourite Tracks or Clips
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "putPersonalisedMusicFavouritesBatch",
        summary = "Favourite Tracks or Clips",
        description = "Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/my/music/favourites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicSuccess> putPersonalisedMusicFavouritesBatch(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "body", description = "Action favourited or unfavourited", required = true) @Valid @RequestBody List<@Valid PersonalisedMusicBatchRequest> body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /my/music/favourites/{type}/{id} : Favourite Track or Clip
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param body Action favourited or unfavourited (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "putPersonalisedMusicFavouritesByTypeById",
        summary = "Favourite Track or Clip",
        description = "Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/my/music/favourites/{type}/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicSuccess> putPersonalisedMusicFavouritesByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Music favourite types: Clips or Tracks", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "id", description = "Clip PID or Track ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "body", description = "Action favourited or unfavourited", required = true) @Valid @RequestBody PersonalisedMusicRequest body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /my/music/follows : Followed Networks, Categories, Artists, Playlists and Genres
     * Update networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "putPersonalisedMusicFollowsBatch",
        summary = "Followed Networks, Categories, Artists, Playlists and Genres",
        description = "Update networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/my/music/follows",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicSuccess> putPersonalisedMusicFollowsBatch(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "body", description = "Action followed or unfollowed", required = true) @Valid @RequestBody List<@Valid PersonalisedMusicBatchRequest> body,
        @Parameter(name = "action", description = "Filters activities based on the type of action", in = ParameterIn.QUERY) @Valid @RequestParam(value = "action", required = false) String action,
        @Parameter(name = "music-data", description = "Omits music data from the response, defaults to true", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music-data", required = false) Boolean musicData,
        @Parameter(name = "music_context", description = "Specify context to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_context", required = false) String musicContext,
        @Parameter(name = "music_within_uk", description = "Specify location to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_within_uk", required = false) Boolean musicWithinUk
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /my/music/follows/{type}/{id} : Followed Network, Category, Artist, Playlist and Genre
     * Update a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param body Action followed or unfollowed (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "putPersonalisedMusicFollowsByTypeById",
        summary = "Followed Network, Category, Artist, Playlist and Genre",
        description = "Update a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicSuccess.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedMusicErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/my/music/follows/{type}/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedMusicSuccess> putPersonalisedMusicFollowsByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Music follows types: Playlists, Services, Genres & Artists", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "id", description = "Playlists, Services, Networks, Genres, Categories or Artists ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "body", description = "Action followed or unfollowed", required = true) @Valid @RequestBody PersonalisedMusicRequest body,
        @Parameter(name = "music-data", description = "Omits music data from the response, defaults to true", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music-data", required = false) Boolean musicData,
        @Parameter(name = "music_context", description = "Specify context to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_context", required = false) String musicContext,
        @Parameter(name = "music_within_uk", description = "Specify location to be passed to Music API", in = ParameterIn.QUERY) @Valid @RequestParam(value = "music_within_uk", required = false) Boolean musicWithinUk
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /my/radio/favourites : Favourite Episodes and Clips
     * Update user favourites  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "putPersonalisedRadioBatch",
        summary = "Favourite Episodes and Clips",
        description = "Update user favourites  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/my/radio/favourites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioSuccessResponse> putPersonalisedRadioBatch(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "body", description = "Action favourited or unfavourited", required = true) @Valid @RequestBody List<@Valid PersonalisedRadioBatchRequest> body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /my/radio/favourites/{type}/{pid} : Favourite Episode or Clip
     * Update user favourite  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param body Action favourited or unfavourited (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "putPersonalisedRadioByActivityTypeById",
        summary = "Favourite Episode or Clip",
        description = "Update user favourite  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/my/radio/favourites/{type}/{pid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioSuccessResponse> putPersonalisedRadioByActivityTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Radio favourite types: Clips or Episodes", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "pid", description = "pid", required = true, in = ParameterIn.PATH) @PathVariable("pid") String pid,
        @Parameter(name = "body", description = "Action favourited or unfavourited", required = true) @Valid @RequestBody PersonalisedRadioRequest body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /my/radio/follows : Followed Brands and Series
     * Update &#39;brands&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "putPersonalisedRadioFollowsBatch",
        summary = "Followed Brands and Series",
        description = "Update 'brands' or 'series' items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/my/radio/follows",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioSuccessResponse> putPersonalisedRadioFollowsBatch(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "body", description = "Action followed or unfollowed", required = true) @Valid @RequestBody List<@Valid PersonalisedRadioBatchRequest> body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /my/radio/follows/{type}/{pid} : Followed Brand or Series
     * Update &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param body Action followed or unfollowed (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "putPersonalisedRadioFollowsByTypeById",
        summary = "Followed Brand or Series",
        description = "Update 'brand' or 'series' items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed ",
        tags = { "Radio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonalisedRadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/my/radio/follows/{type}/{pid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PersonalisedRadioSuccessResponse> putPersonalisedRadioFollowsByTypeById(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-Authentication-Provider", description = "Authentication type", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-Authentication-Provider", required = true, defaultValue = "idv5") String xAuthenticationProvider,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Supported Radio follows types: Brands or Series", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "pid", description = "pid", required = true, in = ParameterIn.PATH) @PathVariable("pid") String pid,
        @Parameter(name = "body", description = "Action followed or unfollowed", required = true) @Valid @RequestBody PersonalisedRadioRequest body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"$schema\" : \"$schema\", \"method\" : \"method\", \"replied_at\" : \"replied_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /my/playspace/containers/suggested : Suggested Playspace Container
     * Suggested Playspace Container 
     *
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param previousPid Clip or Episode PID of the previous or first content item in the Playspace stream. (required)
     * @param previousContainer Container ID of the previous container in the Playspace stream. (optional)
     * @return OK (status code 200)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     */
    @Operation(
        operationId = "suggestContainer",
        summary = "Suggested Playspace Container",
        description = "Suggested Playspace Container ",
        tags = { "Playspace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PlayspaceContainer.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/my/playspace/containers/suggested",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PlayspaceContainer> suggestContainer(
        @NotNull @Parameter(name = "Authorization", description = "Bearer OAUTH_TOKEN", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true, defaultValue = "Bearer OAUTH_TOKEN") String authorization,
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @NotNull @Parameter(name = "previous_pid", description = "Clip or Episode PID of the previous or first content item in the Playspace stream.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "previous_pid", required = true) String previousPid,
        @Parameter(name = "previous_container", description = "Container ID of the previous container in the Playspace stream.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "previous_container", required = false) String previousContainer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"members\" : [ { \"version_pid\" : \"version_pid\", \"image_url\" : \"image_url\", \"description\" : \"description\", \"pid\" : \"pid\", \"title\" : \"title\", \"type\" : \"type\" }, { \"version_pid\" : \"version_pid\", \"image_url\" : \"image_url\", \"description\" : \"description\", \"pid\" : \"pid\", \"title\" : \"title\", \"type\" : \"type\" } ], \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
