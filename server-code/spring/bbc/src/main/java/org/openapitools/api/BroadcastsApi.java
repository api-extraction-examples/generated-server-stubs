/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.BroadcastsResponse;
import org.openapitools.model.ErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:06.732824-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Broadcasts", description = "the Broadcasts API")
public interface BroadcastsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /broadcasts : Broadcasts
     * All broadcasts 
     *
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param serviceId Filter by Service ID. E.g. bbc_radio_fourfm (optional)
     * @param date Filter by date. E.g. 2016-06-17 (optional)
     * @param sort Sort by provided query. E.g. &#39;start_at&#39; sorts in ascending order, and &#39;-start_at&#39; sorts in descending order (optional)
     * @return OK (status code 200)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "broadcastsGet",
        summary = "Broadcasts",
        description = "All broadcasts ",
        tags = { "Broadcasts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BroadcastsResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/broadcasts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BroadcastsResponse> broadcastsGet(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "service_id", description = "Filter by Service ID. E.g. bbc_radio_fourfm", in = ParameterIn.QUERY) @Valid @RequestParam(value = "service_id", required = false) String serviceId,
        @Parameter(name = "date", description = "Filter by date. E.g. 2016-06-17", in = ParameterIn.QUERY) @Valid @RequestParam(value = "date", required = false) String date,
        @Parameter(name = "sort", description = "Sort by provided query. E.g. 'start_at' sorts in ascending order, and '-start_at' sorts in descending order", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 5, \"$schema\" : \"$schema\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"is_webcast\" : true, \"is_repeat\" : true, \"start\" : \"start\", \"pid\" : \"pid\", \"type\" : \"type\", \"duration\" : 1, \"version_pid\" : \"version_pid\", \"service_id\" : \"service_id\", \"is_live\" : true, \"is_audio_described\" : true, \"end\" : \"end\", \"is_blanked\" : true, \"programme\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"is_critical\" : true }, { \"is_webcast\" : true, \"is_repeat\" : true, \"start\" : \"start\", \"pid\" : \"pid\", \"type\" : \"type\", \"duration\" : 1, \"version_pid\" : \"version_pid\", \"service_id\" : \"service_id\", \"is_live\" : true, \"is_audio_described\" : true, \"end\" : \"end\", \"is_blanked\" : true, \"programme\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"is_critical\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /broadcasts/latest : Latest Broadcasts
     * Broadcasts for the current day 
     *
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param serviceId Filter by Service ID. E.g. bbc_radio_fourfm (optional)
     * @param onAir Filter what is on air. E.g. &#39;now&#39; returns current programme being broadcasted. (optional)
     * @param next Filter what will be on air next in minutes. E.g. &#39;240&#39; returns programmes broadcasted in the next four hurs (optional)
     * @param previous Filter what was on air previously in minutes. E.g. &#39;240&#39; returns programmes broadcasted in the previous four hurs (optional)
     * @param sort Sort by provided query. E.g. &#39;start_at&#39; sorts in ascending order, and &#39;-start_at&#39; sorts in descending order (optional)
     * @return OK (status code 200)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "broadcastsLatestGet",
        summary = "Latest Broadcasts",
        description = "Broadcasts for the current day ",
        tags = { "Broadcasts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BroadcastsResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/broadcasts/latest",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BroadcastsResponse> broadcastsLatestGet(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "service_id", description = "Filter by Service ID. E.g. bbc_radio_fourfm", in = ParameterIn.QUERY) @Valid @RequestParam(value = "service_id", required = false) String serviceId,
        @Parameter(name = "on_air", description = "Filter what is on air. E.g. 'now' returns current programme being broadcasted.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "on_air", required = false) String onAir,
        @Parameter(name = "next", description = "Filter what will be on air next in minutes. E.g. '240' returns programmes broadcasted in the next four hurs", in = ParameterIn.QUERY) @Valid @RequestParam(value = "next", required = false) String next,
        @Parameter(name = "previous", description = "Filter what was on air previously in minutes. E.g. '240' returns programmes broadcasted in the previous four hurs", in = ParameterIn.QUERY) @Valid @RequestParam(value = "previous", required = false) String previous,
        @Parameter(name = "sort", description = "Sort by provided query. E.g. 'start_at' sorts in ascending order, and '-start_at' sorts in descending order", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 5, \"$schema\" : \"$schema\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"is_webcast\" : true, \"is_repeat\" : true, \"start\" : \"start\", \"pid\" : \"pid\", \"type\" : \"type\", \"duration\" : 1, \"version_pid\" : \"version_pid\", \"service_id\" : \"service_id\", \"is_live\" : true, \"is_audio_described\" : true, \"end\" : \"end\", \"is_blanked\" : true, \"programme\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"is_critical\" : true }, { \"is_webcast\" : true, \"is_repeat\" : true, \"start\" : \"start\", \"pid\" : \"pid\", \"type\" : \"type\", \"duration\" : 1, \"version_pid\" : \"version_pid\", \"service_id\" : \"service_id\", \"is_live\" : true, \"is_audio_described\" : true, \"end\" : \"end\", \"is_blanked\" : true, \"programme\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"is_critical\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /broadcasts/{pid} : Broadcasts by PID
     * Find broadcast by PID 
     *
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @return OK (status code 200)
     *         or There was an error with the supplied &#x60;Authorization&#x60; header. (status code 401)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getBroadcastByPid",
        summary = "Broadcasts by PID",
        description = "Find broadcast by PID ",
        tags = { "Broadcasts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BroadcastsResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "There was an error with the supplied `Authorization` header.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/broadcasts/{pid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BroadcastsResponse> getBroadcastByPid(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "pid", description = "pid", required = true, in = ParameterIn.PATH) @PathVariable("pid") String pid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 5, \"$schema\" : \"$schema\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"is_webcast\" : true, \"is_repeat\" : true, \"start\" : \"start\", \"pid\" : \"pid\", \"type\" : \"type\", \"duration\" : 1, \"version_pid\" : \"version_pid\", \"service_id\" : \"service_id\", \"is_live\" : true, \"is_audio_described\" : true, \"end\" : \"end\", \"is_blanked\" : true, \"programme\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"is_critical\" : true }, { \"is_webcast\" : true, \"is_repeat\" : true, \"start\" : \"start\", \"pid\" : \"pid\", \"type\" : \"type\", \"duration\" : 1, \"version_pid\" : \"version_pid\", \"service_id\" : \"service_id\", \"is_live\" : true, \"is_audio_described\" : true, \"end\" : \"end\", \"is_blanked\" : true, \"programme\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"is_critical\" : true } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
