/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.MusicPopularityArtists;
import org.openapitools.model.MusicPopularityError;
import org.openapitools.model.MusicPopularityPlaylists;
import org.openapitools.model.MusicPopularityTracks;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:06.732824-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Music", description = "the Music API")
public interface MusicApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /music/popular/artists/{id} : Single Artist Popularity
     * Popularity Artist By Id 
     *
     * @param xAPIKey API_KEY (required)
     * @param id MusicBrainz Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicPopularArtistById",
        summary = "Single Artist Popularity",
        description = "Popularity Artist By Id ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityArtists.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/music/popular/artists/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicPopularityArtists> getMusicPopularArtistById(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "id", description = "MusicBrainz Id - Used to get single resource score", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "since", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) String since,
        @Parameter(name = "until", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params", in = ParameterIn.QUERY) @Valid @RequestParam(value = "until", required = false) String until,
        @Parameter(name = "decomposed", description = "In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decomposed", required = false) Boolean decomposed
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"repliedAt\" : \"repliedAt\", \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"score\" : 1, \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"sortName\" : \"sortName\", \"name\" : \"name\", \"id\" : \"id\" }, { \"score\" : 1, \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"sortName\" : \"sortName\", \"name\" : \"name\", \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /music/popular/artists : Popular Artists
     * List of Most Popular artists from BBC Music. 
     *
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicPopularArtists",
        summary = "Popular Artists",
        description = "List of Most Popular artists from BBC Music. ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityArtists.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/music/popular/artists",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicPopularityArtists> getMusicPopularArtists(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "since", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) String since,
        @Parameter(name = "until", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params", in = ParameterIn.QUERY) @Valid @RequestParam(value = "until", required = false) String until,
        @Parameter(name = "decomposed", description = "In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decomposed", required = false) Boolean decomposed,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"repliedAt\" : \"repliedAt\", \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"score\" : 1, \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"sortName\" : \"sortName\", \"name\" : \"name\", \"id\" : \"id\" }, { \"score\" : 1, \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"sortName\" : \"sortName\", \"name\" : \"name\", \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /music/popular/playlists/{id} : Single Playlist Popularity
     * Popular playlist by Id 
     *
     * @param xAPIKey API_KEY (required)
     * @param id BBC Music Playlist Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicPopularPlaylistById",
        summary = "Single Playlist Popularity",
        description = "Popular playlist by Id ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityPlaylists.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/music/popular/playlists/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicPopularityPlaylists> getMusicPopularPlaylistById(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "id", description = "BBC Music Playlist Id - Used to get single resource score", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "since", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) String since,
        @Parameter(name = "until", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params", in = ParameterIn.QUERY) @Valid @RequestParam(value = "until", required = false) String until,
        @Parameter(name = "decomposed", description = "In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decomposed", required = false) Boolean decomposed
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"repliedAt\" : \"repliedAt\", \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"commentsEnabled\" : true, \"mood\" : \"mood\", \"visibility\" : \"visibility\", \"kind\" : \"kind\", \"description\" : \"description\", \"wideImageUrl\" : \"wideImageUrl\", \"title\" : \"title\", \"wideImagePid\" : \"wideImagePid\", \"oneOff\" : true, \"score\" : 1, \"imagePid\" : \"imagePid\", \"externalPartners\" : [ { \"type\" : \"type\", \"value\" : \"value\" }, { \"type\" : \"type\", \"value\" : \"value\" } ], \"imageUrl\" : \"imageUrl\", \"genre\" : \"genre\", \"playlistPlaybackType\" : \"playlistPlaybackType\", \"categories\" : [ \"categories\", \"categories\" ], \"id\" : \"id\", \"serviceId\" : \"serviceId\", \"updatedAt\" : \"updatedAt\" }, { \"commentsEnabled\" : true, \"mood\" : \"mood\", \"visibility\" : \"visibility\", \"kind\" : \"kind\", \"description\" : \"description\", \"wideImageUrl\" : \"wideImageUrl\", \"title\" : \"title\", \"wideImagePid\" : \"wideImagePid\", \"oneOff\" : true, \"score\" : 1, \"imagePid\" : \"imagePid\", \"externalPartners\" : [ { \"type\" : \"type\", \"value\" : \"value\" }, { \"type\" : \"type\", \"value\" : \"value\" } ], \"imageUrl\" : \"imageUrl\", \"genre\" : \"genre\", \"playlistPlaybackType\" : \"playlistPlaybackType\", \"categories\" : [ \"categories\", \"categories\" ], \"id\" : \"id\", \"serviceId\" : \"serviceId\", \"updatedAt\" : \"updatedAt\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /music/popular/playlists : Popular Playlists
     * List of Most Popular playlists from BBC Music. 
     *
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicPopularPlaylists",
        summary = "Popular Playlists",
        description = "List of Most Popular playlists from BBC Music. ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityPlaylists.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/music/popular/playlists",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicPopularityPlaylists> getMusicPopularPlaylists(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "since", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) String since,
        @Parameter(name = "until", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params", in = ParameterIn.QUERY) @Valid @RequestParam(value = "until", required = false) String until,
        @Parameter(name = "decomposed", description = "In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decomposed", required = false) Boolean decomposed,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"repliedAt\" : \"repliedAt\", \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"commentsEnabled\" : true, \"mood\" : \"mood\", \"visibility\" : \"visibility\", \"kind\" : \"kind\", \"description\" : \"description\", \"wideImageUrl\" : \"wideImageUrl\", \"title\" : \"title\", \"wideImagePid\" : \"wideImagePid\", \"oneOff\" : true, \"score\" : 1, \"imagePid\" : \"imagePid\", \"externalPartners\" : [ { \"type\" : \"type\", \"value\" : \"value\" }, { \"type\" : \"type\", \"value\" : \"value\" } ], \"imageUrl\" : \"imageUrl\", \"genre\" : \"genre\", \"playlistPlaybackType\" : \"playlistPlaybackType\", \"categories\" : [ \"categories\", \"categories\" ], \"id\" : \"id\", \"serviceId\" : \"serviceId\", \"updatedAt\" : \"updatedAt\" }, { \"commentsEnabled\" : true, \"mood\" : \"mood\", \"visibility\" : \"visibility\", \"kind\" : \"kind\", \"description\" : \"description\", \"wideImageUrl\" : \"wideImageUrl\", \"title\" : \"title\", \"wideImagePid\" : \"wideImagePid\", \"oneOff\" : true, \"score\" : 1, \"imagePid\" : \"imagePid\", \"externalPartners\" : [ { \"type\" : \"type\", \"value\" : \"value\" }, { \"type\" : \"type\", \"value\" : \"value\" } ], \"imageUrl\" : \"imageUrl\", \"genre\" : \"genre\", \"playlistPlaybackType\" : \"playlistPlaybackType\", \"categories\" : [ \"categories\", \"categories\" ], \"id\" : \"id\", \"serviceId\" : \"serviceId\", \"updatedAt\" : \"updatedAt\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /music/popular/tracks/{id} : Single Track Popularity
     * Popular Track for BBC Music 
     *
     * @param xAPIKey API_KEY (required)
     * @param id BBC Music Track Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param network Return items with given Network ID (optional)
     * @param programme Items with given Programme Pid (optional)
     * @param artist MusicBrainz artist ID (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicPopularTrackById",
        summary = "Single Track Popularity",
        description = "Popular Track for BBC Music ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityTracks.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/music/popular/tracks/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicPopularityTracks> getMusicPopularTrackById(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "id", description = "BBC Music Track Id - Used to get single resource score", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "since", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) String since,
        @Parameter(name = "until", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params", in = ParameterIn.QUERY) @Valid @RequestParam(value = "until", required = false) String until,
        @Parameter(name = "network", description = "Return items with given Network ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "network", required = false) String network,
        @Parameter(name = "programme", description = "Items with given Programme Pid", in = ParameterIn.QUERY) @Valid @RequestParam(value = "programme", required = false) String programme,
        @Parameter(name = "artist", description = "MusicBrainz artist ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "artist", required = false) String artist,
        @Parameter(name = "decomposed", description = "In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decomposed", required = false) Boolean decomposed
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"repliedAt\" : \"repliedAt\", \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"radioEdit\" : true, \"artistGid\" : \"artistGid\", \"recordAudio\" : [ { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" } ], \"album\" : \"album\", \"classical\" : true, \"preferredRecordAudio\" : { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, \"title\" : \"title\", \"type\" : \"type\", \"mergedIds\" : [ \"mergedIds\", \"mergedIds\" ], \"recordImageHref\" : \"recordImageHref\", \"score\" : 5, \"artists\" : [ { \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"role\" : \"role\", \"sortName\" : \"sortName\", \"name\" : \"name\" }, { \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"role\" : \"role\", \"sortName\" : \"sortName\", \"name\" : \"name\" } ], \"preferredMultiplayRecordAudio\" : { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, \"artistName\" : \"artistName\", \"id\" : \"id\", \"baseTitle\" : \"baseTitle\", \"recordImagePid\" : \"recordImagePid\" }, { \"radioEdit\" : true, \"artistGid\" : \"artistGid\", \"recordAudio\" : [ { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" } ], \"album\" : \"album\", \"classical\" : true, \"preferredRecordAudio\" : { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, \"title\" : \"title\", \"type\" : \"type\", \"mergedIds\" : [ \"mergedIds\", \"mergedIds\" ], \"recordImageHref\" : \"recordImageHref\", \"score\" : 5, \"artists\" : [ { \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"role\" : \"role\", \"sortName\" : \"sortName\", \"name\" : \"name\" }, { \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"role\" : \"role\", \"sortName\" : \"sortName\", \"name\" : \"name\" } ], \"preferredMultiplayRecordAudio\" : { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, \"artistName\" : \"artistName\", \"id\" : \"id\", \"baseTitle\" : \"baseTitle\", \"recordImagePid\" : \"recordImagePid\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /music/popular/tracks : Popular Tracks
     * List of popular tracks for BBC Music. Filter by time, network, artist, playlist or programme. 
     *
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param network Return items with given Network ID (optional)
     * @param programme Items with given Programme Pid (optional)
     * @param artist MusicBrainz artist ID (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getMusicPopularTracks",
        summary = "Popular Tracks",
        description = "List of popular tracks for BBC Music. Filter by time, network, artist, playlist or programme. ",
        tags = { "Music" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityTracks.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MusicPopularityError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/music/popular/tracks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MusicPopularityTracks> getMusicPopularTracks(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "since", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) String since,
        @Parameter(name = "until", description = "ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params", in = ParameterIn.QUERY) @Valid @RequestParam(value = "until", required = false) String until,
        @Parameter(name = "network", description = "Return items with given Network ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "network", required = false) String network,
        @Parameter(name = "programme", description = "Items with given Programme Pid", in = ParameterIn.QUERY) @Valid @RequestParam(value = "programme", required = false) String programme,
        @Parameter(name = "artist", description = "MusicBrainz artist ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "artist", required = false) String artist,
        @Parameter(name = "decomposed", description = "In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days", in = ParameterIn.QUERY) @Valid @RequestParam(value = "decomposed", required = false) Boolean decomposed,
        @Parameter(name = "offset", description = "Paginated results offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Paginated results limit", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"repliedAt\" : \"repliedAt\", \"schema\" : \"schema\", \"total\" : 5, \"method\" : \"method\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"radioEdit\" : true, \"artistGid\" : \"artistGid\", \"recordAudio\" : [ { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" } ], \"album\" : \"album\", \"classical\" : true, \"preferredRecordAudio\" : { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, \"title\" : \"title\", \"type\" : \"type\", \"mergedIds\" : [ \"mergedIds\", \"mergedIds\" ], \"recordImageHref\" : \"recordImageHref\", \"score\" : 5, \"artists\" : [ { \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"role\" : \"role\", \"sortName\" : \"sortName\", \"name\" : \"name\" }, { \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"role\" : \"role\", \"sortName\" : \"sortName\", \"name\" : \"name\" } ], \"preferredMultiplayRecordAudio\" : { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, \"artistName\" : \"artistName\", \"id\" : \"id\", \"baseTitle\" : \"baseTitle\", \"recordImagePid\" : \"recordImagePid\" }, { \"radioEdit\" : true, \"artistGid\" : \"artistGid\", \"recordAudio\" : [ { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" } ], \"album\" : \"album\", \"classical\" : true, \"preferredRecordAudio\" : { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, \"title\" : \"title\", \"type\" : \"type\", \"mergedIds\" : [ \"mergedIds\", \"mergedIds\" ], \"recordImageHref\" : \"recordImageHref\", \"score\" : 5, \"artists\" : [ { \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"role\" : \"role\", \"sortName\" : \"sortName\", \"name\" : \"name\" }, { \"gid\" : \"gid\", \"imagePid\" : \"imagePid\", \"role\" : \"role\", \"sortName\" : \"sortName\", \"name\" : \"name\" } ], \"preferredMultiplayRecordAudio\" : { \"duration\" : 1, \"identifier\" : \"identifier\", \"audioType\" : \"audioType\", \"resourceType\" : \"resourceType\" }, \"artistName\" : \"artistName\", \"id\" : \"id\", \"baseTitle\" : \"baseTitle\", \"recordImagePid\" : \"recordImagePid\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
