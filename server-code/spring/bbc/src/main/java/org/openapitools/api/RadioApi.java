/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.NetworksResponse;
import org.openapitools.model.PopularErrorResponse;
import org.openapitools.model.PopularResponse;
import org.openapitools.model.ProgrammesResponse;
import org.openapitools.model.RadioErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:06.732824-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Programmes", description = "the Programmes API")
public interface RadioApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /radio/popular : Popular Episodes &amp; Clips
     * Retrieve Popular Episodes &amp; Clips 
     *
     * @param xAPIKey API_KEY (required)
     * @param type Programme type required. Accepts comma separated values (optional)
     * @param distinct Filter by deduplication rule. E.g. &#39;tleo&#39; returns programmes with distinct top level episode objects (optional)
     * @param network Filter by network master brand ID (mid). Accepts comma separated values (optional)
     * @param networkUrlKey Filter by network URL key. Accepts comma separated values (optional)
     * @param category Filter by category. Accepts comma separated values (optional)
     * @param format Filter by format. Accepts comma separated values (optional)
     * @param group Filter by group. Accepts comma separated values (optional)
     * @param mediaType Filter by programme media type. Accepts comma separated values (optional)
     * @param container Filter by container. Accepts any pid e.g. brand,series,episode (optional)
     * @param mediaSet Filter by media set name. Accepts comma separated combinations of the following: pc,mobile-download,android-download-high,apple-ios-download-high,mobile-cellular-main,mobile-phone-main,iptv-all (optional)
     * @param q Search query String (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getPopularEpisodesClips",
        summary = "Popular Episodes & Clips",
        description = "Retrieve Popular Episodes & Clips ",
        tags = { "Programmes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PopularResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PopularErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/radio/popular",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PopularResponse> getPopularEpisodesClips(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "type", description = "Programme type required. Accepts comma separated values", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) String type,
        @Parameter(name = "distinct", description = "Filter by deduplication rule. E.g. 'tleo' returns programmes with distinct top level episode objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distinct", required = false) String distinct,
        @Parameter(name = "network", description = "Filter by network master brand ID (mid). Accepts comma separated values", in = ParameterIn.QUERY) @Valid @RequestParam(value = "network", required = false) String network,
        @Parameter(name = "network_url_key", description = "Filter by network URL key. Accepts comma separated values", in = ParameterIn.QUERY) @Valid @RequestParam(value = "network_url_key", required = false) String networkUrlKey,
        @Parameter(name = "category", description = "Filter by category. Accepts comma separated values", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "format", description = "Filter by format. Accepts comma separated values", in = ParameterIn.QUERY) @Valid @RequestParam(value = "format", required = false) String format,
        @Parameter(name = "group", description = "Filter by group. Accepts comma separated values", in = ParameterIn.QUERY) @Valid @RequestParam(value = "group", required = false) String group,
        @Parameter(name = "media_type", description = "Filter by programme media type. Accepts comma separated values", in = ParameterIn.QUERY) @Valid @RequestParam(value = "media_type", required = false) String mediaType,
        @Parameter(name = "container", description = "Filter by container. Accepts any pid e.g. brand,series,episode", in = ParameterIn.QUERY) @Valid @RequestParam(value = "container", required = false) String container,
        @Parameter(name = "media_set", description = "Filter by media set name. Accepts comma separated combinations of the following: pc,mobile-download,android-download-high,apple-ios-download-high,mobile-cellular-main,mobile-phone-main,iptv-all", in = ParameterIn.QUERY) @Valid @RequestParam(value = "media_set", required = false) List<Object> mediaSet,
        @Parameter(name = "q", description = "Search query String", in = ParameterIn.QUERY) @Valid @RequestParam(value = "q", required = false) String q
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 5, \"$schema\" : \"$schema\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"score\" : 1, \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"id\" : \"id\", \"type\" : \"type\" }, { \"score\" : 1, \"data\" : { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /radio/networks.json : Networks
     * All iPlayer Radio networks - contains business logic for masterbrand and service relationships 
     *
     * @param xAPIKey API_KEY (required)
     * @param preset Returns all networks needed for iPlayer Radio responsive web navigation (optional)
     * @param international Returns all networks available internationally (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getRadioNetworks",
        summary = "Networks",
        description = "All iPlayer Radio networks - contains business logic for masterbrand and service relationships ",
        tags = { "Networks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NetworksResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/radio/networks.json",
        produces = { "application/json" }
    )
    
    default ResponseEntity<NetworksResponse> getRadioNetworks(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "preset", description = "Returns all networks needed for iPlayer Radio responsive web navigation", in = ParameterIn.QUERY) @Valid @RequestParam(value = "preset", required = false) Boolean preset,
        @Parameter(name = "international", description = "Returns all networks available internationally", in = ParameterIn.QUERY) @Valid @RequestParam(value = "international", required = false) Boolean international
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 5, \"$schema\" : \"$schema\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"date_ranges\" : [ { \"start\" : \"start\", \"end\" : \"end\" }, { \"start\" : \"start\", \"end\" : \"end\" } ], \"active\" : true, \"preset\" : true, \"services\" : [ { \"coverage\" : \"coverage\", \"date_ranges\" : [ { \"start\" : \"start\", \"end\" : \"end\" }, { \"start\" : \"start\", \"end\" : \"end\" } ], \"default\" : true, \"short_title\" : \"short_title\", \"active\" : true, \"id\" : \"id\", \"default_language\" : \"default_language\", \"region\" : \"region\", \"title\" : \"title\", \"type\" : \"type\" }, { \"coverage\" : \"coverage\", \"date_ranges\" : [ { \"start\" : \"start\", \"end\" : \"end\" }, { \"start\" : \"start\", \"end\" : \"end\" } ], \"default\" : true, \"short_title\" : \"short_title\", \"active\" : true, \"id\" : \"id\", \"default_language\" : \"default_language\", \"region\" : \"region\", \"title\" : \"title\", \"type\" : \"type\" } ], \"sort\" : 1, \"title\" : \"title\", \"type\" : \"type\", \"short_title\" : \"short_title\", \"promoted_category_summaries\" : [ { \"category_type\" : \"category_type\", \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, { \"category_type\" : \"category_type\", \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" } ], \"id\" : \"id\", \"international\" : true, \"contacts\" : [ { \"service\" : \"service\", \"name\" : \"name\", \"handle\" : \"handle\", \"url\" : \"url\" }, { \"service\" : \"service\", \"name\" : \"name\", \"handle\" : \"handle\", \"url\" : \"url\" } ], \"key\" : \"key\", \"group\" : \"group\" }, { \"date_ranges\" : [ { \"start\" : \"start\", \"end\" : \"end\" }, { \"start\" : \"start\", \"end\" : \"end\" } ], \"active\" : true, \"preset\" : true, \"services\" : [ { \"coverage\" : \"coverage\", \"date_ranges\" : [ { \"start\" : \"start\", \"end\" : \"end\" }, { \"start\" : \"start\", \"end\" : \"end\" } ], \"default\" : true, \"short_title\" : \"short_title\", \"active\" : true, \"id\" : \"id\", \"default_language\" : \"default_language\", \"region\" : \"region\", \"title\" : \"title\", \"type\" : \"type\" }, { \"coverage\" : \"coverage\", \"date_ranges\" : [ { \"start\" : \"start\", \"end\" : \"end\" }, { \"start\" : \"start\", \"end\" : \"end\" } ], \"default\" : true, \"short_title\" : \"short_title\", \"active\" : true, \"id\" : \"id\", \"default_language\" : \"default_language\", \"region\" : \"region\", \"title\" : \"title\", \"type\" : \"type\" } ], \"sort\" : 1, \"title\" : \"title\", \"type\" : \"type\", \"short_title\" : \"short_title\", \"promoted_category_summaries\" : [ { \"category_type\" : \"category_type\", \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" }, { \"category_type\" : \"category_type\", \"id\" : \"id\", \"title\" : \"title\", \"type\" : \"type\", \"key\" : \"key\" } ], \"id\" : \"id\", \"international\" : true, \"contacts\" : [ { \"service\" : \"service\", \"name\" : \"name\", \"handle\" : \"handle\", \"url\" : \"url\" }, { \"service\" : \"service\", \"name\" : \"name\", \"handle\" : \"handle\", \"url\" : \"url\" } ], \"key\" : \"key\", \"group\" : \"group\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /radio/programmes : Radio programmes
     * Provides a paginated list of programmes by PID (brand, series, episode and clip). Accepts various filters and sorting methods.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     *
     * @param xAPIKey API_KEY (required)
     * @param kind Filter by provided query. E.g. &#39;tleo&#39; returns top level objects, ie. brands, orphaned series, and orphaned episodes (optional)
     * @param network Filter by network master brand ID (mid). Accepts comma separated values (optional)
     * @param networkUrlKey Filter by network URL key. Accepts comma separated values (optional)
     * @param category Filter by category id. Accepts comma separated values. See /category endpoint below for the type of response provided (optional)
     * @param sort Sort by provided query. E.g. &#39;title&#39; sorts in ascending order, and -title sorts in descending order (optional)
     * @param container Filter by container. Accepts any brand or series pid (optional)
     * @param type Filter by programme type. Accepts comma separated values (optional)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getRadioProgrammes",
        summary = "Radio programmes",
        description = "Provides a paginated list of programmes by PID (brand, series, episode and clip). Accepts various filters and sorting methods.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification ",
        tags = { "Programmes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProgrammesResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/radio/programmes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProgrammesResponse> getRadioProgrammes(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "kind", description = "Filter by provided query. E.g. 'tleo' returns top level objects, ie. brands, orphaned series, and orphaned episodes", in = ParameterIn.QUERY) @Valid @RequestParam(value = "kind", required = false) String kind,
        @Parameter(name = "network", description = "Filter by network master brand ID (mid). Accepts comma separated values", in = ParameterIn.QUERY) @Valid @RequestParam(value = "network", required = false) String network,
        @Parameter(name = "network_url_key", description = "Filter by network URL key. Accepts comma separated values", in = ParameterIn.QUERY) @Valid @RequestParam(value = "network_url_key", required = false) String networkUrlKey,
        @Parameter(name = "category", description = "Filter by category id. Accepts comma separated values. See /category endpoint below for the type of response provided", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "sort", description = "Sort by provided query. E.g. 'title' sorts in ascending order, and -title sorts in descending order", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "container", description = "Filter by container. Accepts any brand or series pid", in = ParameterIn.QUERY) @Valid @RequestParam(value = "container", required = false) String container,
        @Parameter(name = "type", description = "Filter by programme type. Accepts comma separated values", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) String type
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, { \"pid\" : \"pid\", \"type\" : \"brand_summary\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /radio/programmes/{pid} : Available radio programme by Pid
     * Find programmes by PID (brand, series, episode and clip)  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     *
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @return OK (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getRadioProgrammesByPid",
        summary = "Available radio programme by Pid",
        description = "Find programmes by PID (brand, series, episode and clip)  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification ",
        tags = { "Programmes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProgrammesResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RadioErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/radio/programmes/{pid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProgrammesResponse> getRadioProgrammesByPid(
        @NotNull @Parameter(name = "X-API-Key", description = "API_KEY", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "X-API-Key", required = true) String xAPIKey,
        @Parameter(name = "pid", description = "pid", required = true, in = ParameterIn.PATH) @PathVariable("pid") String pid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"$schema\" : \"$schema\", \"offset\" : 6, \"limit\" : 0, \"results\" : [ { \"pid\" : \"pid\", \"type\" : \"brand_summary\" }, { \"pid\" : \"pid\", \"type\" : \"brand_summary\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
