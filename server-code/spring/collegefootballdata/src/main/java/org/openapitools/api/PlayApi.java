/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.PlayStat;
import org.openapitools.model.PlayStatType;
import org.openapitools.model.PlayType;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:23.773477-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "plays", description = "Play by play data")
public interface PlayApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /play/stat/types : Types of player play stats
     * Type of play stats
     *
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getPlayStatTypes",
        summary = "Types of player play stats",
        description = "Type of play stats",
        tags = { "plays" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PlayStatType.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/play/stat/types",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PlayStatType>> getPlayStatTypes(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"id\" : 0 }, { \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /play/stats : Play stats by play
     * Gets player stats associated by play (limit 1000)
     *
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param gameId gameId filter (from /games endpoint) (optional)
     * @param athleteId athleteId filter (from /roster endpoint) (optional)
     * @param statTypeId statTypeId filter (from /play/stat/types endpoint) (optional)
     * @param seasonType regular, postseason, or both (optional)
     * @param conference conference abbreviation filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getPlayStats",
        summary = "Play stats by play",
        description = "Gets player stats associated by play (limit 1000)",
        tags = { "plays" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PlayStat.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/play/stats",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PlayStat>> getPlayStats(
        @Min(2013) @Parameter(name = "year", description = "Year filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Min(1) @Max(16) @Parameter(name = "week", description = "Week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "week", required = false) Integer week,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "gameId", description = "gameId filter (from /games endpoint)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gameId", required = false) Integer gameId,
        @Parameter(name = "athleteId", description = "athleteId filter (from /roster endpoint)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "athleteId", required = false) Integer athleteId,
        @Parameter(name = "statTypeId", description = "statTypeId filter (from /play/stat/types endpoint)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "statTypeId", required = false) Integer statTypeId,
        @Parameter(name = "seasonType", description = "regular, postseason, or both", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seasonType", required = false) String seasonType,
        @Parameter(name = "conference", description = "conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"gameId\" : 5, \"teamScore\" : 4, \"period\" : 7, \"stat\" : 2, \"conference\" : \"conference\", \"week\" : 7, \"distance\" : 6, \"statType\" : \"statType\", \"clock\" : { \"seconds\" : 2, \"minutes\" : 5 }, \"team\" : \"team\", \"down\" : 1, \"playId\" : 9, \"driveId\" : 5, \"athleteId\" : 0, \"opponent\" : \"opponent\", \"opponentScore\" : 2, \"season\" : 3, \"yardsToGoal\" : 1, \"athleteName\" : \"athleteName\" }, { \"gameId\" : 5, \"teamScore\" : 4, \"period\" : 7, \"stat\" : 2, \"conference\" : \"conference\", \"week\" : 7, \"distance\" : 6, \"statType\" : \"statType\", \"clock\" : { \"seconds\" : 2, \"minutes\" : 5 }, \"team\" : \"team\", \"down\" : 1, \"playId\" : 9, \"driveId\" : 5, \"athleteId\" : 0, \"opponent\" : \"opponent\", \"opponentScore\" : 2, \"season\" : 3, \"yardsToGoal\" : 1, \"athleteName\" : \"athleteName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /play/types : Play types
     * Types of plays
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getPlayTypes",
        summary = "Play types",
        description = "Types of plays",
        tags = { "plays" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PlayType.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/play/types",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PlayType>> getPlayTypes(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : 0, \"text\" : \"text\", \"abbreviation\" : \"abbreviation\" }, { \"id\" : 0, \"text\" : \"text\", \"abbreviation\" : \"abbreviation\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
