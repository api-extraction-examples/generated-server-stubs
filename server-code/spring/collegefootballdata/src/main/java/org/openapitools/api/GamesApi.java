/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Game;
import org.openapitools.model.GameMedia;
import org.openapitools.model.GameWeather;
import org.openapitools.model.PlayerGame;
import org.openapitools.model.TeamGame;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:23.773477-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "games", description = "Games scores and statistics")
public interface GamesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /games/media : Game media information and schedules
     * Game media information (TV, radio, etc)
     *
     * @param year Year filter (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param mediaType Media type filter (tv, radio, web, ppv, or mobile) (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getGameMedia",
        summary = "Game media information and schedules",
        description = "Game media information (TV, radio, etc)",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GameMedia.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/games/media",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GameMedia>> getGameMedia(
        @NotNull @Min(2001) @Parameter(name = "year", description = "Year filter", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = true) Integer year,
        @Min(1) @Max(16) @Parameter(name = "week", description = "Week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "week", required = false) Integer week,
        @Parameter(name = "seasonType", description = "Season type filter (regular, postseason, or both)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seasonType", required = false) String seasonType,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "mediaType", description = "Media type filter (tv, radio, web, ppv, or mobile)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaType", required = false) String mediaType,
        @Parameter(name = "classification", description = "Division classification filter (fbs/fcs/ii/iii)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "classification", required = false) String classification
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"awayConference\" : \"awayConference\", \"seasonType\" : \"seasonType\", \"homeConference\" : \"homeConference\", \"week\" : 1, \"awayTeam\" : \"awayTeam\", \"homeTeam\" : \"homeTeam\", \"season\" : 6, \"mediaType\" : \"mediaType\", \"startTime\" : \"startTime\", \"id\" : 0, \"isStartTimeTBD\" : true, \"outlet\" : \"outlet\" }, { \"awayConference\" : \"awayConference\", \"seasonType\" : \"seasonType\", \"homeConference\" : \"homeConference\", \"week\" : 1, \"awayTeam\" : \"awayTeam\", \"homeTeam\" : \"homeTeam\", \"season\" : 6, \"mediaType\" : \"mediaType\", \"startTime\" : \"startTime\", \"id\" : 0, \"isStartTimeTBD\" : true, \"outlet\" : \"outlet\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /games/weather : Game weather information (Patreon only)
     * Weather information for the hour of kickoff
     *
     * @param gameId Game id filter (required if no year) (optional)
     * @param year Year filter (required if no game id) (optional)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getGameWeather",
        summary = "Game weather information (Patreon only)",
        description = "Weather information for the hour of kickoff",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GameWeather.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/games/weather",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GameWeather>> getGameWeather(
        @Parameter(name = "gameId", description = "Game id filter (required if no year)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gameId", required = false) Integer gameId,
        @Min(2001) @Parameter(name = "year", description = "Year filter (required if no game id)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Min(1) @Max(16) @Parameter(name = "week", description = "Week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "week", required = false) Integer week,
        @Parameter(name = "seasonType", description = "Season type filter (regular, postseason, or both)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seasonType", required = false) String seasonType,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "classification", description = "Division classification filter (fbs/fcs/ii/iii)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "classification", required = false) String classification
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"awayConference\" : \"awayConference\", \"seasonType\" : \"seasonType\", \"venue\" : \"venue\", \"homeConference\" : \"homeConference\", \"week\" : 4, \"weatherConditionCode\" : 2, \"awayTeam\" : \"awayTeam\", \"snowfall\" : 7.061401241503109, \"pressure\" : 5.637376656633329, \"dewPoint\" : 0.8008281904610115, \"gameIndoors\" : true, \"precipitation\" : 5.962133916683182, \"venueId\" : 3, \"temperature\" : 9.301444243932576, \"homeTeam\" : \"homeTeam\", \"humidity\" : 6.027456183070403, \"season\" : 2, \"startTime\" : \"startTime\", \"weatherCondition\" : \"weatherCondition\", \"id\" : 1, \"windDirection\" : 7.386281948385884, \"windSpeed\" : 1.2315135367772556 }, { \"awayConference\" : \"awayConference\", \"seasonType\" : \"seasonType\", \"venue\" : \"venue\", \"homeConference\" : \"homeConference\", \"week\" : 4, \"weatherConditionCode\" : 2, \"awayTeam\" : \"awayTeam\", \"snowfall\" : 7.061401241503109, \"pressure\" : 5.637376656633329, \"dewPoint\" : 0.8008281904610115, \"gameIndoors\" : true, \"precipitation\" : 5.962133916683182, \"venueId\" : 3, \"temperature\" : 9.301444243932576, \"homeTeam\" : \"homeTeam\", \"humidity\" : 6.027456183070403, \"season\" : 2, \"startTime\" : \"startTime\", \"weatherCondition\" : \"weatherCondition\", \"id\" : 1, \"windDirection\" : 7.386281948385884, \"windSpeed\" : 1.2315135367772556 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /games : Games and results
     * Get game results
     *
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team (optional)
     * @param home Home team filter (optional)
     * @param away Away team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param division Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param id id filter for querying a single game (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getGames",
        summary = "Games and results",
        description = "Get game results",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Game.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/games",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Game>> getGames(
        @NotNull @Min(1869) @Parameter(name = "year", description = "Year/season filter for games", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = true) Integer year,
        @Min(1) @Max(16) @Parameter(name = "week", description = "Week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "week", required = false) Integer week,
        @Parameter(name = "seasonType", description = "Season type filter (regular or postseason)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seasonType", required = false, defaultValue = "regular") String seasonType,
        @Parameter(name = "team", description = "Team", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "home", description = "Home team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "home", required = false) String home,
        @Parameter(name = "away", description = "Away team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "away", required = false) String away,
        @Parameter(name = "conference", description = "Conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "division", description = "Division classification filter (fbs/fcs/ii/iii)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "division", required = false) String division,
        @Parameter(name = "id", description = "id filter for querying a single game", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"venue\" : \"venue\", \"away_post_win_prob\" : 5.637376656633329, \"notes\" : \"notes\", \"week\" : 1, \"start_time_tbd\" : true, \"away_team\" : \"away_team\", \"away_id\" : 6, \"home_post_win_prob\" : 7.386281948385884, \"season_type\" : \"season_type\", \"home_points\" : 4, \"away_pregame_elo\" : 7, \"away_points\" : 5, \"home_conference\" : \"home_conference\", \"home_pregame_elo\" : 1, \"away_postgame_elo\" : 2, \"season\" : 6, \"home_id\" : 3, \"home_postgame_elo\" : 1, \"away_conference\" : \"away_conference\", \"id\" : 1, \"venue_id\" : 7, \"neutral_site\" : true, \"start_date\" : \"start_date\", \"conference_game\" : true, \"away_division\" : \"away_division\", \"excitement_index\" : 9.301444243932576, \"completed\" : true, \"away_line_scores\" : [ 1, 1 ], \"home_division\" : \"home_division\", \"highlights\" : \"highlights\", \"home_line_scores\" : [ 2, 2 ], \"home_team\" : \"home_team\", \"attendance\" : 0 }, { \"venue\" : \"venue\", \"away_post_win_prob\" : 5.637376656633329, \"notes\" : \"notes\", \"week\" : 1, \"start_time_tbd\" : true, \"away_team\" : \"away_team\", \"away_id\" : 6, \"home_post_win_prob\" : 7.386281948385884, \"season_type\" : \"season_type\", \"home_points\" : 4, \"away_pregame_elo\" : 7, \"away_points\" : 5, \"home_conference\" : \"home_conference\", \"home_pregame_elo\" : 1, \"away_postgame_elo\" : 2, \"season\" : 6, \"home_id\" : 3, \"home_postgame_elo\" : 1, \"away_conference\" : \"away_conference\", \"id\" : 1, \"venue_id\" : 7, \"neutral_site\" : true, \"start_date\" : \"start_date\", \"conference_game\" : true, \"away_division\" : \"away_division\", \"excitement_index\" : 9.301444243932576, \"completed\" : true, \"away_line_scores\" : [ 1, 1 ], \"home_division\" : \"home_division\", \"highlights\" : \"highlights\", \"home_line_scores\" : [ 2, 2 ], \"home_team\" : \"home_team\", \"attendance\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /games/players : Player game stats
     * Player stats broken down by game
     *
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param category Category filter (e.g defensive) (optional)
     * @param gameId Game id filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getPlayerGameStats",
        summary = "Player game stats",
        description = "Player stats broken down by game",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PlayerGame.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/games/players",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PlayerGame>> getPlayerGameStats(
        @NotNull @Min(2001) @Parameter(name = "year", description = "Year/season filter for games", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = true) Integer year,
        @Min(1) @Max(16) @Parameter(name = "week", description = "Week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "week", required = false) Integer week,
        @Parameter(name = "seasonType", description = "Season type filter (regular or postseason)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seasonType", required = false, defaultValue = "regular") String seasonType,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "category", description = "Category filter (e.g defensive)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category,
        @Parameter(name = "gameId", description = "Game id filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gameId", required = false) Integer gameId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"teams\" : [ { \"homeAway\" : true, \"school\" : { \"conference\" : \"conference\", \"name\" : \"name\" }, \"categories\" : [ { \"types\" : [ { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] }, { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] } ], \"name\" : \"name\" }, { \"types\" : [ { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] }, { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] } ], \"name\" : \"name\" } ], \"points\" : 1 }, { \"homeAway\" : true, \"school\" : { \"conference\" : \"conference\", \"name\" : \"name\" }, \"categories\" : [ { \"types\" : [ { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] }, { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] } ], \"name\" : \"name\" }, { \"types\" : [ { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] }, { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] } ], \"name\" : \"name\" } ], \"points\" : 1 } ], \"id\" : 0 }, { \"teams\" : [ { \"homeAway\" : true, \"school\" : { \"conference\" : \"conference\", \"name\" : \"name\" }, \"categories\" : [ { \"types\" : [ { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] }, { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] } ], \"name\" : \"name\" }, { \"types\" : [ { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] }, { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] } ], \"name\" : \"name\" } ], \"points\" : 1 }, { \"homeAway\" : true, \"school\" : { \"conference\" : \"conference\", \"name\" : \"name\" }, \"categories\" : [ { \"types\" : [ { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] }, { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] } ], \"name\" : \"name\" }, { \"types\" : [ { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] }, { \"name\" : \"name\", \"athletes\" : [ { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 }, { \"stat\" : \"stat\", \"name\" : \"name\", \"id\" : 6 } ] } ], \"name\" : \"name\" } ], \"points\" : 1 } ], \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /games/teams : Team game stats
     * Team stats broken down by game
     *
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param gameId Game id filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getTeamGameStats",
        summary = "Team game stats",
        description = "Team stats broken down by game",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamGame.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/games/teams",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TeamGame>> getTeamGameStats(
        @NotNull @Min(2001) @Parameter(name = "year", description = "Year/season filter for games", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = true) Integer year,
        @Min(1) @Max(16) @Parameter(name = "week", description = "Week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "week", required = false) Integer week,
        @Parameter(name = "seasonType", description = "Season type filter (regular or postseason)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seasonType", required = false, defaultValue = "regular") String seasonType,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "gameId", description = "Game id filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gameId", required = false) Integer gameId,
        @Parameter(name = "classification", description = "Division classification filter (fbs/fcs/ii/iii)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "classification", required = false) String classification
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"teams\" : [ { \"homeAway\" : \"homeAway\", \"conference\" : \"conference\", \"school\" : \"school\", \"stats\" : [ { \"stat\" : \"stat\", \"category\" : \"category\" }, { \"stat\" : \"stat\", \"category\" : \"category\" } ], \"points\" : 6 }, { \"homeAway\" : \"homeAway\", \"conference\" : \"conference\", \"school\" : \"school\", \"stats\" : [ { \"stat\" : \"stat\", \"category\" : \"category\" }, { \"stat\" : \"stat\", \"category\" : \"category\" } ], \"points\" : 6 } ], \"id\" : 0 }, { \"teams\" : [ { \"homeAway\" : \"homeAway\", \"conference\" : \"conference\", \"school\" : \"school\", \"stats\" : [ { \"stat\" : \"stat\", \"category\" : \"category\" }, { \"stat\" : \"stat\", \"category\" : \"category\" } ], \"points\" : 6 }, { \"homeAway\" : \"homeAway\", \"conference\" : \"conference\", \"school\" : \"school\", \"stats\" : [ { \"stat\" : \"stat\", \"category\" : \"category\" }, { \"stat\" : \"stat\", \"category\" : \"category\" } ], \"points\" : 6 } ], \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
