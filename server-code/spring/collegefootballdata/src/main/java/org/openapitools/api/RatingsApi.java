/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ConferenceSPRating;
import org.openapitools.model.TeamEloRating;
import org.openapitools.model.TeamSPRating;
import org.openapitools.model.TeamSRSRating;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:23.773477-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "ratings", description = "Team rating data")
public interface RatingsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /ratings/sp/conferences : Historical SP+ ratings by conference
     * Get average SP+ historical rating data by conference
     *
     * @param year Season filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getConferenceSPRatings",
        summary = "Historical SP+ ratings by conference",
        description = "Get average SP+ historical rating data by conference",
        tags = { "ratings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ConferenceSPRating.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ratings/sp/conferences",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ConferenceSPRating>> getConferenceSPRatings(
        @Min(1970) @Parameter(name = "year", description = "Season filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "conference", description = "Conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"specialTeams\" : { \"rating\" : 6.438423552598547 }, \"offense\" : { \"success\" : 6.84685269835264, \"pace\" : 3.616076749251911, \"rating\" : 7.386281948385884, \"rushing\" : 1.0246457001441578, \"standardDowns\" : 1.4894159098541704, \"runRate\" : 1.2315135367772556, \"passingDowns\" : 4.145608029883936, \"passing\" : 2.027123023002322, \"explosiveness\" : 9.301444243932576 }, \"defense\" : { \"havoc\" : { \"total\" : 5.962133916683182, \"frontSeven\" : 1.4658129805029452, \"db\" : 6.027456183070403 }, \"success\" : 7.061401241503109, \"rating\" : 5.962133916683182, \"rushing\" : 5.637376656633329, \"standardDowns\" : 2.3021358869347655, \"passingDowns\" : 1.4658129805029452, \"pasing\" : 6.027456183070403, \"explosiveness\" : 0.8008281904610115 }, \"secondOrderWins\" : 1.1730742509559433, \"year\" : 5, \"sos\" : 4.965218492984954, \"rating\" : 7.457744773683766 }, { \"conference\" : \"conference\", \"specialTeams\" : { \"rating\" : 6.438423552598547 }, \"offense\" : { \"success\" : 6.84685269835264, \"pace\" : 3.616076749251911, \"rating\" : 7.386281948385884, \"rushing\" : 1.0246457001441578, \"standardDowns\" : 1.4894159098541704, \"runRate\" : 1.2315135367772556, \"passingDowns\" : 4.145608029883936, \"passing\" : 2.027123023002322, \"explosiveness\" : 9.301444243932576 }, \"defense\" : { \"havoc\" : { \"total\" : 5.962133916683182, \"frontSeven\" : 1.4658129805029452, \"db\" : 6.027456183070403 }, \"success\" : 7.061401241503109, \"rating\" : 5.962133916683182, \"rushing\" : 5.637376656633329, \"standardDowns\" : 2.3021358869347655, \"passingDowns\" : 1.4658129805029452, \"pasing\" : 6.027456183070403, \"explosiveness\" : 0.8008281904610115 }, \"secondOrderWins\" : 1.1730742509559433, \"year\" : 5, \"sos\" : 4.965218492984954, \"rating\" : 7.457744773683766 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ratings/elo : Historical Elo ratings
     * Elo rating data
     *
     * @param year Season filter (optional)
     * @param week Maximum week filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getEloRatings",
        summary = "Historical Elo ratings",
        description = "Elo rating data",
        tags = { "ratings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamEloRating.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ratings/elo",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TeamEloRating>> getEloRatings(
        @Parameter(name = "year", description = "Season filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "week", description = "Maximum week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "week", required = false) Integer week,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"year\" : 6, \"elo\" : 0.8008281904610115, \"team\" : \"team\" }, { \"conference\" : \"conference\", \"year\" : 6, \"elo\" : 0.8008281904610115, \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ratings/sp : Historical SP+ ratings
     * SP+ rating data
     *
     * @param year Season filter (required if team not specified) (optional)
     * @param team Team filter (required if year not specified) (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getSPRatings",
        summary = "Historical SP+ ratings",
        description = "SP+ rating data",
        tags = { "ratings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamSPRating.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ratings/sp",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TeamSPRating>> getSPRatings(
        @Min(1970) @Parameter(name = "year", description = "Season filter (required if team not specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "team", description = "Team filter (required if year not specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"specialTeams\" : { \"rating\" : 6.438423552598547 }, \"offense\" : { \"success\" : 9.965781217890562, \"pace\" : 1.2315135367772556, \"rating\" : 7.457744773683766, \"rushing\" : 4.965218492984954, \"standardDowns\" : 5.025004791520295, \"runRate\" : 1.1730742509559433, \"passingDowns\" : 1.4894159098541704, \"ranking\" : 6.84685269835264, \"passing\" : 1.0246457001441578, \"explosiveness\" : 7.386281948385884 }, \"defense\" : { \"havoc\" : { \"total\" : 5.962133916683182, \"frontSeven\" : 1.4658129805029452, \"db\" : 6.027456183070403 }, \"success\" : 4.145608029883936, \"rating\" : 9.301444243932576, \"rushing\" : 3.616076749251911, \"standardDowns\" : 2.027123023002322, \"passingDowns\" : 2.3021358869347655, \"ranking\" : 7.061401241503109, \"pasing\" : 5.637376656633329, \"explosiveness\" : 0.8008281904610115 }, \"secondOrderWins\" : 8.762042012749001, \"year\" : 3, \"sos\" : 9.018348186070783, \"rating\" : 6.683562403749608, \"ranking\" : 9.369310271410669, \"team\" : \"team\" }, { \"conference\" : \"conference\", \"specialTeams\" : { \"rating\" : 6.438423552598547 }, \"offense\" : { \"success\" : 9.965781217890562, \"pace\" : 1.2315135367772556, \"rating\" : 7.457744773683766, \"rushing\" : 4.965218492984954, \"standardDowns\" : 5.025004791520295, \"runRate\" : 1.1730742509559433, \"passingDowns\" : 1.4894159098541704, \"ranking\" : 6.84685269835264, \"passing\" : 1.0246457001441578, \"explosiveness\" : 7.386281948385884 }, \"defense\" : { \"havoc\" : { \"total\" : 5.962133916683182, \"frontSeven\" : 1.4658129805029452, \"db\" : 6.027456183070403 }, \"success\" : 4.145608029883936, \"rating\" : 9.301444243932576, \"rushing\" : 3.616076749251911, \"standardDowns\" : 2.027123023002322, \"passingDowns\" : 2.3021358869347655, \"ranking\" : 7.061401241503109, \"pasing\" : 5.637376656633329, \"explosiveness\" : 0.8008281904610115 }, \"secondOrderWins\" : 8.762042012749001, \"year\" : 3, \"sos\" : 9.018348186070783, \"rating\" : 6.683562403749608, \"ranking\" : 9.369310271410669, \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ratings/srs : Historical SRS ratings
     * SRS rating data (requires either a year or team specified)
     *
     * @param year Season filter (required if team not specified) (optional)
     * @param team Team filter (required if year not specified) (optional)
     * @param conference Conference filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getSRSRatings",
        summary = "Historical SRS ratings",
        description = "SRS rating data (requires either a year or team specified)",
        tags = { "ratings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamSRSRating.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ratings/srs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TeamSRSRating>> getSRSRatings(
        @Min(1897) @Parameter(name = "year", description = "Season filter (required if team not specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "team", description = "Team filter (required if year not specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"division\" : \"division\", \"conference\" : \"conference\", \"year\" : 1, \"rating\" : 6.027456183070403, \"ranking\" : 0.8008281904610115, \"team\" : \"team\" }, { \"division\" : \"division\", \"conference\" : \"conference\", \"year\" : 1, \"rating\" : 6.027456183070403, \"ranking\" : 0.8008281904610115, \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
