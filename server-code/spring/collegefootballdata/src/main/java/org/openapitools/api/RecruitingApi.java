/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.PositionGroupRecruitingRating;
import org.openapitools.model.Recruit;
import org.openapitools.model.TeamRecruitingRank;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:23.773477-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "recruiting", description = "Recruiting rankings and data")
public interface RecruitingApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /recruiting/groups : Recruit position group ratings
     * Gets a list of aggregated statistics by team and position grouping
     *
     * @param startYear Starting year (optional)
     * @param endYear Ending year (optional)
     * @param team Team filter (optional)
     * @param conference conference filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getRecruitingGroups",
        summary = "Recruit position group ratings",
        description = "Gets a list of aggregated statistics by team and position grouping",
        tags = { "recruiting" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PositionGroupRecruitingRating.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/recruiting/groups",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PositionGroupRecruitingRating>> getRecruitingGroups(
        @Min(2000) @Parameter(name = "startYear", description = "Starting year", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startYear", required = false) Integer startYear,
        @Min(2000) @Parameter(name = "endYear", description = "Ending year", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endYear", required = false) Integer endYear,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "conference filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"averageStars\" : 6.027456183070403, \"averageRating\" : 0.8008281904610115, \"commits\" : 1.4658129805029452, \"totalRating\" : 5.962133916683182, \"team\" : \"team\", \"positionGroup\" : \"positionGroup\" }, { \"conference\" : \"conference\", \"averageStars\" : 6.027456183070403, \"averageRating\" : 0.8008281904610115, \"commits\" : 1.4658129805029452, \"totalRating\" : 5.962133916683182, \"team\" : \"team\", \"positionGroup\" : \"positionGroup\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /recruiting/players : Player recruiting ratings and rankings
     * Get player recruiting rankings and data. Requires either a year or team to be specified.
     *
     * @param year Recruiting class year (required if team no specified) (optional)
     * @param classification Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)
     * @param position Position abbreviation filter (optional)
     * @param state State or province abbreviation filter (optional)
     * @param team Committed team filter (required if year not specified) (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getRecruitingPlayers",
        summary = "Player recruiting ratings and rankings",
        description = "Get player recruiting rankings and data. Requires either a year or team to be specified.",
        tags = { "recruiting" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Recruit.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/recruiting/players",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Recruit>> getRecruitingPlayers(
        @Min(2000) @Parameter(name = "year", description = "Recruiting class year (required if team no specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "classification", description = "Type of recruit (HighSchool, JUCO, PrepSchool)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "classification", required = false, defaultValue = "HighSchool") String classification,
        @Parameter(name = "position", description = "Position abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "position", required = false) String position,
        @Parameter(name = "state", description = "State or province abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) String state,
        @Parameter(name = "team", description = "Committed team filter (required if year not specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"country\" : \"country\", \"city\" : \"city\", \"year\" : 2, \"recruitType\" : \"recruitType\", \"committedTo\" : \"committedTo\", \"hometownInfo\" : { \"countyFips\" : \"countyFips\", \"latitude\" : 1.4658129805029452, \"longitude\" : 5.962133916683182 }, \"rating\" : 7.061401241503109, \"stateProvince\" : \"stateProvince\", \"weight\" : 3, \"stars\" : 9, \"athleteId\" : 0, \"school\" : \"school\", \"name\" : \"name\", \"ranking\" : 2, \"id\" : 5, \"position\" : \"position\", \"height\" : 6.027456183070403 }, { \"country\" : \"country\", \"city\" : \"city\", \"year\" : 2, \"recruitType\" : \"recruitType\", \"committedTo\" : \"committedTo\", \"hometownInfo\" : { \"countyFips\" : \"countyFips\", \"latitude\" : 1.4658129805029452, \"longitude\" : 5.962133916683182 }, \"rating\" : 7.061401241503109, \"stateProvince\" : \"stateProvince\", \"weight\" : 3, \"stars\" : 9, \"athleteId\" : 0, \"school\" : \"school\", \"name\" : \"name\", \"ranking\" : 2, \"id\" : 5, \"position\" : \"position\", \"height\" : 6.027456183070403 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /recruiting/teams : Team recruiting rankings and ratings
     * Team recruiting rankings
     *
     * @param year Recruiting class year (optional)
     * @param team Team filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getRecruitingTeams",
        summary = "Team recruiting rankings and ratings",
        description = "Team recruiting rankings",
        tags = { "recruiting" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamRecruitingRank.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/recruiting/teams",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TeamRecruitingRank>> getRecruitingTeams(
        @Min(2000) @Parameter(name = "year", description = "Recruiting class year", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"year\" : 1, \"rank\" : 6, \"team\" : \"team\", \"points\" : 0.8008281904610115 }, { \"year\" : 1, \"rank\" : 6, \"team\" : \"team\", \"points\" : 0.8008281904610115 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
