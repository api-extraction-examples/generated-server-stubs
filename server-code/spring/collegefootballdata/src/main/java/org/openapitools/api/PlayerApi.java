/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.PlayerSearchResult;
import org.openapitools.model.PlayerUsage;
import org.openapitools.model.PortalPlayer;
import org.openapitools.model.ReturningProduction;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:23.773477-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "players", description = "Player information and data")
public interface PlayerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /player/usage : Player usage metrics broken down by season
     * Player usage metrics by season
     *
     * @param year Year filter (required)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getPlayerUsage",
        summary = "Player usage metrics broken down by season",
        description = "Player usage metrics by season",
        tags = { "players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PlayerUsage.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/player/usage",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PlayerUsage>> getPlayerUsage(
        @NotNull @Min(2013) @Parameter(name = "year", description = "Year filter", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = true, defaultValue = "2022") Integer year,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "position", description = "Position abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "position", required = false) String position,
        @Parameter(name = "playerId", description = "Player id filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playerId", required = false) Integer playerId,
        @Parameter(name = "excludeGarbageTime", description = "Filter to remove garbage time plays from calculations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeGarbageTime", required = false) Boolean excludeGarbageTime
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"usage\" : { \"firstDown\" : 1.4658129805029452, \"pass\" : 5.637376656633329, \"standardDowns\" : 3.616076749251911, \"overall\" : 5.962133916683182, \"passingDowns\" : 2.3021358869347655, \"secondDown\" : 9.301444243932576, \"thirdDown\" : 2.027123023002322, \"rush\" : 7.061401241503109 }, \"name\" : \"name\", \"season\" : 6, \"id\" : 0, \"position\" : \"position\", \"team\" : \"team\" }, { \"conference\" : \"conference\", \"usage\" : { \"firstDown\" : 1.4658129805029452, \"pass\" : 5.637376656633329, \"standardDowns\" : 3.616076749251911, \"overall\" : 5.962133916683182, \"passingDowns\" : 2.3021358869347655, \"secondDown\" : 9.301444243932576, \"thirdDown\" : 2.027123023002322, \"rush\" : 7.061401241503109 }, \"name\" : \"name\", \"season\" : 6, \"id\" : 0, \"position\" : \"position\", \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /player/returning : Team returning production metrics
     * Returning production metrics
     *
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getReturningProduction",
        summary = "Team returning production metrics",
        description = "Returning production metrics",
        tags = { "players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ReturningProduction.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/player/returning",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ReturningProduction>> getReturningProduction(
        @Min(2014) @Parameter(name = "year", description = "Year filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"totalReceivingPPA\" : 4.145608029883936, \"usage\" : 1.2315135367772556, \"percentPassingPPA\" : 1.4658129805029452, \"totalPPA\" : 3.616076749251911, \"team\" : \"team\", \"rushingUsage\" : 7.061401241503109, \"percentPPA\" : 6.027456183070403, \"totalPassingPPA\" : 2.027123023002322, \"percentReceivingPPA\" : 5.962133916683182, \"season\" : 9, \"percentRushingPPA\" : 5.637376656633329, \"passingUsage\" : 0.8008281904610115, \"totalRushingPPA\" : 7.386281948385884, \"receivingUsage\" : 2.3021358869347655 }, { \"conference\" : \"conference\", \"totalReceivingPPA\" : 4.145608029883936, \"usage\" : 1.2315135367772556, \"percentPassingPPA\" : 1.4658129805029452, \"totalPPA\" : 3.616076749251911, \"team\" : \"team\", \"rushingUsage\" : 7.061401241503109, \"percentPPA\" : 6.027456183070403, \"totalPassingPPA\" : 2.027123023002322, \"percentReceivingPPA\" : 5.962133916683182, \"season\" : 9, \"percentRushingPPA\" : 5.637376656633329, \"passingUsage\" : 0.8008281904610115, \"totalRushingPPA\" : 7.386281948385884, \"receivingUsage\" : 2.3021358869347655 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /player/portal : Transfer portal by season
     * Transfer portal by season
     *
     * @param year Year filter (required)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getTransferPortal",
        summary = "Transfer portal by season",
        description = "Transfer portal by season",
        tags = { "players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PortalPlayer.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/player/portal",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PortalPlayer>> getTransferPortal(
        @NotNull @Parameter(name = "year", description = "Year filter", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = true) Integer year
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"origin\" : \"origin\", \"destination\" : \"destination\", \"rating\" : 0.8008281904610115, \"eligibility\" : \"eligibility\", \"season\" : 6, \"position\" : \"position\", \"stars\" : 1, \"transferDate\" : \"transferDate\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"origin\" : \"origin\", \"destination\" : \"destination\", \"rating\" : 0.8008281904610115, \"eligibility\" : \"eligibility\", \"season\" : 6, \"position\" : \"position\", \"stars\" : 1, \"transferDate\" : \"transferDate\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /player/search : Search for player information
     * Search for players
     *
     * @param searchTerm Term to search on (required)
     * @param position Position abbreviation filter (optional)
     * @param team Team filter (optional)
     * @param year Year filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "playerSearch",
        summary = "Search for player information",
        description = "Search for players",
        tags = { "players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PlayerSearchResult.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/player/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PlayerSearchResult>> playerSearch(
        @NotNull @Parameter(name = "searchTerm", description = "Term to search on", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchTerm", required = true) String searchTerm,
        @Parameter(name = "position", description = "Position abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "position", required = false) String position,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Min(2001) @Parameter(name = "year", description = "Year filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"hometown\" : \"hometown\", \"jersey\" : 1, \"name\" : \"name\", \"weight\" : 5, \"id\" : 6, \"position\" : \"position\", \"team\" : \"team\", \"teamColorSecondary\" : \"teamColorSecondary\", \"height\" : 0, \"teamColor\" : \"teamColor\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"hometown\" : \"hometown\", \"jersey\" : 1, \"name\" : \"name\", \"weight\" : 5, \"id\" : 6, \"position\" : \"position\", \"team\" : \"team\", \"teamColorSecondary\" : \"teamColorSecondary\", \"height\" : 0, \"teamColor\" : \"teamColor\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
