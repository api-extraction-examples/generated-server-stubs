/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Team;
import org.openapitools.model.TeamMatchup;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:23.773477-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "teams", description = "Team information")
public interface TeamsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /teams/fbs : FBS team list
     * Information on major division teams
     *
     * @param year Year filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getFbsTeams",
        summary = "FBS team list",
        description = "Information on major division teams",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Team.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/teams/fbs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Team>> getFbsTeams(
        @Min(1869) @Parameter(name = "year", description = "Year filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"color\" : \"color\", \"mascot\" : \"mascot\", \"abbreviation\" : \"abbreviation\", \"classification\" : \"classification\", \"logos\" : [ \"logos\", \"logos\" ], \"alt_color\" : \"alt_color\", \"division\" : \"division\", \"twitter\" : \"twitter\", \"school\" : \"school\", \"alt_name_1\" : \"alt_name_1\", \"location\" : { \"elevation\" : 1.4658129805029452, \"zip\" : \"zip\", \"city\" : \"city\", \"timezone\" : \"timezone\", \"latitude\" : 5.962133916683182, \"dome\" : true, \"capacity\" : 6.027456183070403, \"year_constructed\" : 7.061401241503109, \"country_code\" : \"country_code\", \"grass\" : true, \"name\" : \"name\", \"state\" : \"state\", \"venue_id\" : 2, \"longitude\" : 5.637376656633329 }, \"id\" : 0, \"alt_name_2\" : \"alt_name_2\", \"alt_name_3\" : \"alt_name_3\" }, { \"conference\" : \"conference\", \"color\" : \"color\", \"mascot\" : \"mascot\", \"abbreviation\" : \"abbreviation\", \"classification\" : \"classification\", \"logos\" : [ \"logos\", \"logos\" ], \"alt_color\" : \"alt_color\", \"division\" : \"division\", \"twitter\" : \"twitter\", \"school\" : \"school\", \"alt_name_1\" : \"alt_name_1\", \"location\" : { \"elevation\" : 1.4658129805029452, \"zip\" : \"zip\", \"city\" : \"city\", \"timezone\" : \"timezone\", \"latitude\" : 5.962133916683182, \"dome\" : true, \"capacity\" : 6.027456183070403, \"year_constructed\" : 7.061401241503109, \"country_code\" : \"country_code\", \"grass\" : true, \"name\" : \"name\", \"state\" : \"state\", \"venue_id\" : 2, \"longitude\" : 5.637376656633329 }, \"id\" : 0, \"alt_name_2\" : \"alt_name_2\", \"alt_name_3\" : \"alt_name_3\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /teams/matchup : Team matchup history
     * Matchup history
     *
     * @param team1 First team (required)
     * @param team2 Second team (required)
     * @param minYear Minimum year (optional)
     * @param maxYear Maximum year (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getTeamMatchup",
        summary = "Team matchup history",
        description = "Matchup history",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeamMatchup.class))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/teams/matchup",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TeamMatchup> getTeamMatchup(
        @NotNull @Parameter(name = "team1", description = "First team", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "team1", required = true) String team1,
        @NotNull @Parameter(name = "team2", description = "Second team", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "team2", required = true) String team2,
        @Min(1869) @Parameter(name = "minYear", description = "Minimum year", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minYear", required = false) Integer minYear,
        @Min(1869) @Parameter(name = "maxYear", description = "Maximum year", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxYear", required = false) Integer maxYear
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"team2Wins\" : 9, \"ties\" : 3, \"team1\" : \"team1\", \"team2\" : \"team2\", \"games\" : [ { \"date\" : \"date\", \"venue\" : \"venue\", \"homeScore\" : 1, \"season_type\" : \"season_type\", \"week\" : 5, \"winner\" : \"winner\", \"awayScore\" : 6, \"awayTeam\" : \"awayTeam\", \"homeTeam\" : \"homeTeam\", \"season\" : 5, \"neutralSite\" : true }, { \"date\" : \"date\", \"venue\" : \"venue\", \"homeScore\" : 1, \"season_type\" : \"season_type\", \"week\" : 5, \"winner\" : \"winner\", \"awayScore\" : 6, \"awayTeam\" : \"awayTeam\", \"homeTeam\" : \"homeTeam\", \"season\" : 5, \"neutralSite\" : true } ], \"startYear\" : 2, \"team1Wins\" : 7, \"endYear\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /teams : Team information
     * Get team information
     *
     * @param conference Conference abbreviation filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getTeams",
        summary = "Team information",
        description = "Get team information",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Team.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/teams",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Team>> getTeams(
        @Parameter(name = "conference", description = "Conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"color\" : \"color\", \"mascot\" : \"mascot\", \"abbreviation\" : \"abbreviation\", \"classification\" : \"classification\", \"logos\" : [ \"logos\", \"logos\" ], \"alt_color\" : \"alt_color\", \"division\" : \"division\", \"twitter\" : \"twitter\", \"school\" : \"school\", \"alt_name_1\" : \"alt_name_1\", \"location\" : { \"elevation\" : 1.4658129805029452, \"zip\" : \"zip\", \"city\" : \"city\", \"timezone\" : \"timezone\", \"latitude\" : 5.962133916683182, \"dome\" : true, \"capacity\" : 6.027456183070403, \"year_constructed\" : 7.061401241503109, \"country_code\" : \"country_code\", \"grass\" : true, \"name\" : \"name\", \"state\" : \"state\", \"venue_id\" : 2, \"longitude\" : 5.637376656633329 }, \"id\" : 0, \"alt_name_2\" : \"alt_name_2\", \"alt_name_3\" : \"alt_name_3\" }, { \"conference\" : \"conference\", \"color\" : \"color\", \"mascot\" : \"mascot\", \"abbreviation\" : \"abbreviation\", \"classification\" : \"classification\", \"logos\" : [ \"logos\", \"logos\" ], \"alt_color\" : \"alt_color\", \"division\" : \"division\", \"twitter\" : \"twitter\", \"school\" : \"school\", \"alt_name_1\" : \"alt_name_1\", \"location\" : { \"elevation\" : 1.4658129805029452, \"zip\" : \"zip\", \"city\" : \"city\", \"timezone\" : \"timezone\", \"latitude\" : 5.962133916683182, \"dome\" : true, \"capacity\" : 6.027456183070403, \"year_constructed\" : 7.061401241503109, \"country_code\" : \"country_code\", \"grass\" : true, \"name\" : \"name\", \"state\" : \"state\", \"venue_id\" : 2, \"longitude\" : 5.637376656633329 }, \"id\" : 0, \"alt_name_2\" : \"alt_name_2\", \"alt_name_3\" : \"alt_name_3\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
