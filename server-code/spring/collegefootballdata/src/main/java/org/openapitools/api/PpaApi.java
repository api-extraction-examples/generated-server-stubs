/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.GamePPA;
import org.openapitools.model.PlayerGamePPA;
import org.openapitools.model.PlayerSeasonPPA;
import org.openapitools.model.PredictedPoints;
import org.openapitools.model.TeamPPA;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:23.773477-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "metrics", description = "Data relating to Predicted Points and other metrics")
public interface PpaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /ppa/games : Team Predicated Points Added (PPA/EPA) by game
     * Predicted Points Added (PPA) by game
     *
     * @param year Year filter (required)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getGamePPA",
        summary = "Team Predicated Points Added (PPA/EPA) by game",
        description = "Predicted Points Added (PPA) by game",
        tags = { "metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GamePPA.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ppa/games",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GamePPA>> getGamePPA(
        @NotNull @Min(2001) @Parameter(name = "year", description = "Year filter", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = true) Integer year,
        @Min(1) @Max(16) @Parameter(name = "week", description = "Week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "week", required = false) Integer week,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "excludeGarbageTime", description = "Filter to remove garbage time plays from calculations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeGarbageTime", required = false) Boolean excludeGarbageTime,
        @Parameter(name = "seasonType", description = "Season type filter (regular or postseason)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seasonType", required = false, defaultValue = "regular") String seasonType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"gameId\" : 7, \"conference\" : \"conference\", \"week\" : 3, \"offense\" : { \"firstDown\" : 0.8008281904610115, \"rushing\" : 5.962133916683182, \"overall\" : 6.027456183070403, \"secondDown\" : 5.637376656633329, \"passing\" : 1.4658129805029452, \"thirdDown\" : 2.3021358869347655 }, \"defense\" : { \"firstDown\" : 0.8008281904610115, \"rushing\" : 5.962133916683182, \"overall\" : 6.027456183070403, \"secondDown\" : 5.637376656633329, \"passing\" : 1.4658129805029452, \"thirdDown\" : 2.3021358869347655 }, \"opponent\" : \"opponent\", \"season\" : 9, \"team\" : \"team\" }, { \"gameId\" : 7, \"conference\" : \"conference\", \"week\" : 3, \"offense\" : { \"firstDown\" : 0.8008281904610115, \"rushing\" : 5.962133916683182, \"overall\" : 6.027456183070403, \"secondDown\" : 5.637376656633329, \"passing\" : 1.4658129805029452, \"thirdDown\" : 2.3021358869347655 }, \"defense\" : { \"firstDown\" : 0.8008281904610115, \"rushing\" : 5.962133916683182, \"overall\" : 6.027456183070403, \"secondDown\" : 5.637376656633329, \"passing\" : 1.4658129805029452, \"thirdDown\" : 2.3021358869347655 }, \"opponent\" : \"opponent\", \"season\" : 9, \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ppa/players/games : Player Predicated Points Added (PPA/EPA) broken down by game
     * Predicted Points Added (PPA) by player game
     *
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param threshold Minimum play threshold filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getPlayerGamePPA",
        summary = "Player Predicated Points Added (PPA/EPA) broken down by game",
        description = "Predicted Points Added (PPA) by player game",
        tags = { "metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PlayerGamePPA.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ppa/players/games",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PlayerGamePPA>> getPlayerGamePPA(
        @Min(2013) @Parameter(name = "year", description = "Year filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Min(1) @Max(16) @Parameter(name = "week", description = "Week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "week", required = false) Integer week,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "position", description = "Position abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "position", required = false) String position,
        @Parameter(name = "playerId", description = "Player id filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playerId", required = false) Integer playerId,
        @Parameter(name = "threshold", description = "Minimum play threshold filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "threshold", required = false) String threshold,
        @Parameter(name = "excludeGarbageTime", description = "Filter to remove garbage time plays from calculations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeGarbageTime", required = false) Boolean excludeGarbageTime,
        @Parameter(name = "seasonType", description = "Season type filter (regular or postseason)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seasonType", required = false, defaultValue = "regular") String seasonType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"week\" : 5, \"opponent\" : \"opponent\", \"averagePPA\" : { \"all\" : 0.8008281904610115, \"pass\" : 6.027456183070403, \"rush\" : 1.4658129805029452 }, \"name\" : \"name\", \"season\" : 5, \"position\" : \"position\", \"team\" : \"team\" }, { \"week\" : 5, \"opponent\" : \"opponent\", \"averagePPA\" : { \"all\" : 0.8008281904610115, \"pass\" : 6.027456183070403, \"rush\" : 1.4658129805029452 }, \"name\" : \"name\", \"season\" : 5, \"position\" : \"position\", \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ppa/players/season : Player Predicated Points Added (PPA/EPA) broken down by season
     * Predicted Points Added (PPA) by player season
     *
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param threshold Minimum play threshold filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getPlayerSeasonPPA",
        summary = "Player Predicated Points Added (PPA/EPA) broken down by season",
        description = "Predicted Points Added (PPA) by player season",
        tags = { "metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PlayerSeasonPPA.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ppa/players/season",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PlayerSeasonPPA>> getPlayerSeasonPPA(
        @Min(2013) @Parameter(name = "year", description = "Year filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "position", description = "Position abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "position", required = false) String position,
        @Parameter(name = "playerId", description = "Player id filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playerId", required = false) Integer playerId,
        @Parameter(name = "threshold", description = "Minimum play threshold filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "threshold", required = false) String threshold,
        @Parameter(name = "excludeGarbageTime", description = "Filter to remove garbage time plays from calculations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeGarbageTime", required = false) Boolean excludeGarbageTime
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"averagePPA\" : { \"all\" : 0.8008281904610115, \"firstDown\" : 6.027456183070403, \"pass\" : 1.4658129805029452, \"standardDowns\" : 7.061401241503109, \"passingDowns\" : 5.962133916683182, \"secondDown\" : 2.3021358869347655, \"thirdDown\" : 9.301444243932576, \"rush\" : 5.637376656633329 }, \"name\" : \"name\", \"season\" : 2, \"totalPPA\" : { \"all\" : 0.8008281904610115, \"firstDown\" : 6.027456183070403, \"pass\" : 1.4658129805029452, \"standardDowns\" : 7.061401241503109, \"passingDowns\" : 5.962133916683182, \"secondDown\" : 2.3021358869347655, \"thirdDown\" : 9.301444243932576, \"rush\" : 5.637376656633329 }, \"id\" : 3, \"position\" : \"position\", \"team\" : \"team\" }, { \"conference\" : \"conference\", \"averagePPA\" : { \"all\" : 0.8008281904610115, \"firstDown\" : 6.027456183070403, \"pass\" : 1.4658129805029452, \"standardDowns\" : 7.061401241503109, \"passingDowns\" : 5.962133916683182, \"secondDown\" : 2.3021358869347655, \"thirdDown\" : 9.301444243932576, \"rush\" : 5.637376656633329 }, \"name\" : \"name\", \"season\" : 2, \"totalPPA\" : { \"all\" : 0.8008281904610115, \"firstDown\" : 6.027456183070403, \"pass\" : 1.4658129805029452, \"standardDowns\" : 7.061401241503109, \"passingDowns\" : 5.962133916683182, \"secondDown\" : 2.3021358869347655, \"thirdDown\" : 9.301444243932576, \"rush\" : 5.637376656633329 }, \"id\" : 3, \"position\" : \"position\", \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ppa/predicted : Predicted Points (i.e. Expected Points or EP)
     * Predicted Points
     *
     * @param down Down filter (required)
     * @param distance Distance filter (required)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getPredictedPoints",
        summary = "Predicted Points (i.e. Expected Points or EP)",
        description = "Predicted Points",
        tags = { "metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PredictedPoints.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ppa/predicted",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PredictedPoints>> getPredictedPoints(
        @NotNull @Min(1) @Max(4) @Parameter(name = "down", description = "Down filter", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "down", required = true) Integer down,
        @NotNull @Min(1) @Max(99) @Parameter(name = "distance", description = "Distance filter", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance", required = true) Integer distance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"yardLine\" : 6, \"predictedPoints\" : 0.8008281904610115 }, { \"yardLine\" : 6, \"predictedPoints\" : 0.8008281904610115 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ppa/teams : Predicted Points Added (PPA/EPA) data by team
     * Predicted Points Added (PPA)
     *
     * @param year Year filter (required if team not specified) (optional)
     * @param team Team filter (required if year not specified) (optional)
     * @param conference Conference filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getTeamPPA",
        summary = "Predicted Points Added (PPA/EPA) data by team",
        description = "Predicted Points Added (PPA)",
        tags = { "metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamPPA.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ppa/teams",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TeamPPA>> getTeamPPA(
        @Min(2001) @Parameter(name = "year", description = "Year filter (required if team not specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "team", description = "Team filter (required if year not specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "excludeGarbageTime", description = "Filter to remove garbage time plays from calculations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeGarbageTime", required = false) Boolean excludeGarbageTime
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"offense\" : { \"firstDown\" : 5.962133916683182, \"rushing\" : 7.061401241503109, \"overall\" : 5.637376656633329, \"secondDown\" : 9.301444243932576, \"passing\" : 2.3021358869347655, \"cumulative\" : { \"total\" : 1.4658129805029452, \"rushing\" : 6.027456183070403, \"passing\" : 0.8008281904610115 }, \"thirdDown\" : 3.616076749251911 }, \"defense\" : { \"firstDown\" : 5.962133916683182, \"rushing\" : 7.061401241503109, \"overall\" : 5.637376656633329, \"secondDown\" : 9.301444243932576, \"passing\" : 2.3021358869347655, \"cumulative\" : { \"total\" : 1.4658129805029452, \"rushing\" : 6.027456183070403, \"passing\" : 0.8008281904610115 }, \"thirdDown\" : 3.616076749251911 }, \"season\" : 2, \"team\" : \"team\" }, { \"conference\" : \"conference\", \"offense\" : { \"firstDown\" : 5.962133916683182, \"rushing\" : 7.061401241503109, \"overall\" : 5.637376656633329, \"secondDown\" : 9.301444243932576, \"passing\" : 2.3021358869347655, \"cumulative\" : { \"total\" : 1.4658129805029452, \"rushing\" : 6.027456183070403, \"passing\" : 0.8008281904610115 }, \"thirdDown\" : 3.616076749251911 }, \"defense\" : { \"firstDown\" : 5.962133916683182, \"rushing\" : 7.061401241503109, \"overall\" : 5.637376656633329, \"secondDown\" : 9.301444243932576, \"passing\" : 2.3021358869347655, \"cumulative\" : { \"total\" : 1.4658129805029452, \"rushing\" : 6.027456183070403, \"passing\" : 0.8008281904610115 }, \"thirdDown\" : 3.616076749251911 }, \"season\" : 2, \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
