/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AdvancedGameStat;
import org.openapitools.model.AdvancedSeasonStat;
import org.openapitools.model.PlayerSeasonStat;
import org.openapitools.model.TeamSeasonStat;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:23.773477-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "stats", description = "Statistical data")
public interface StatsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /stats/game/advanced : Advanced team metrics by game
     * Advanced team game stats
     *
     * @param year Year filter (required if no team specified) (optional)
     * @param week Week filter (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param opponent Opponent filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getAdvancedTeamGameStats",
        summary = "Advanced team metrics by game",
        description = "Advanced team game stats",
        tags = { "stats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AdvancedGameStat.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stats/game/advanced",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AdvancedGameStat>> getAdvancedTeamGameStats(
        @Min(2001) @Parameter(name = "year", description = "Year filter (required if no team specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Min(1) @Max(16) @Parameter(name = "week", description = "Week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "week", required = false) Integer week,
        @Parameter(name = "team", description = "Team filter (required if no year specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "opponent", description = "Opponent filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "opponent", required = false) String opponent,
        @Parameter(name = "excludeGarbageTime", description = "Filter to remove garbage time plays from calculations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeGarbageTime", required = false) Boolean excludeGarbageTime,
        @Parameter(name = "seasonType", description = "Season type filter (regular, postseason, or both)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seasonType", required = false) String seasonType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"gameId\" : 9, \"week\" : 8, \"offense\" : { \"ppa\" : 6.84685269835264, \"plays\" : 1, \"lineYardsTotal\" : 5.962133916683182, \"stuffRate\" : 4.965218492984954, \"successRate\" : 5.025004791520295, \"openFieldYards\" : 5.637376656633329, \"powerSuccess\" : 1.4894159098541704, \"rushingPlays\" : { \"ppa\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"totalPPA\" : 1.2315135367772556, \"explosiveness\" : 2.027123023002322 }, \"standardDowns\" : { \"ppa\" : 9.301444243932576, \"successRate\" : 3.616076749251911, \"explosiveness\" : 7.061401241503109 }, \"openFieldYardsTotal\" : 2, \"totalPPA\" : 9.965781217890562, \"secondLevelYards\" : 7.457744773683766, \"passingPlays\" : { \"ppa\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"totalPPA\" : 1.2315135367772556, \"explosiveness\" : 2.027123023002322 }, \"lineYards\" : 1.4658129805029452, \"drives\" : 0, \"passingDowns\" : { \"ppa\" : 9.301444243932576, \"successRate\" : 3.616076749251911, \"explosiveness\" : 7.061401241503109 }, \"explosiveness\" : 6.027456183070403, \"secondLevelYardsTotal\" : 1 }, \"defense\" : { \"ppa\" : 6.84685269835264, \"plays\" : 1, \"lineYardsTotal\" : 5.962133916683182, \"stuffRate\" : 4.965218492984954, \"successRate\" : 5.025004791520295, \"openFieldYards\" : 5.637376656633329, \"powerSuccess\" : 1.4894159098541704, \"rushingPlays\" : { \"ppa\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"totalPPA\" : 1.2315135367772556, \"explosiveness\" : 2.027123023002322 }, \"standardDowns\" : { \"ppa\" : 9.301444243932576, \"successRate\" : 3.616076749251911, \"explosiveness\" : 7.061401241503109 }, \"openFieldYardsTotal\" : 2, \"totalPPA\" : 9.965781217890562, \"secondLevelYards\" : 7.457744773683766, \"passingPlays\" : { \"ppa\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"totalPPA\" : 1.2315135367772556, \"explosiveness\" : 2.027123023002322 }, \"lineYards\" : 1.4658129805029452, \"drives\" : 0, \"passingDowns\" : { \"ppa\" : 9.301444243932576, \"successRate\" : 3.616076749251911, \"explosiveness\" : 7.061401241503109 }, \"explosiveness\" : 6.027456183070403, \"secondLevelYardsTotal\" : 1 }, \"opponent\" : \"opponent\", \"season\" : 6, \"team\" : \"team\" }, { \"gameId\" : 9, \"week\" : 8, \"offense\" : { \"ppa\" : 6.84685269835264, \"plays\" : 1, \"lineYardsTotal\" : 5.962133916683182, \"stuffRate\" : 4.965218492984954, \"successRate\" : 5.025004791520295, \"openFieldYards\" : 5.637376656633329, \"powerSuccess\" : 1.4894159098541704, \"rushingPlays\" : { \"ppa\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"totalPPA\" : 1.2315135367772556, \"explosiveness\" : 2.027123023002322 }, \"standardDowns\" : { \"ppa\" : 9.301444243932576, \"successRate\" : 3.616076749251911, \"explosiveness\" : 7.061401241503109 }, \"openFieldYardsTotal\" : 2, \"totalPPA\" : 9.965781217890562, \"secondLevelYards\" : 7.457744773683766, \"passingPlays\" : { \"ppa\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"totalPPA\" : 1.2315135367772556, \"explosiveness\" : 2.027123023002322 }, \"lineYards\" : 1.4658129805029452, \"drives\" : 0, \"passingDowns\" : { \"ppa\" : 9.301444243932576, \"successRate\" : 3.616076749251911, \"explosiveness\" : 7.061401241503109 }, \"explosiveness\" : 6.027456183070403, \"secondLevelYardsTotal\" : 1 }, \"defense\" : { \"ppa\" : 6.84685269835264, \"plays\" : 1, \"lineYardsTotal\" : 5.962133916683182, \"stuffRate\" : 4.965218492984954, \"successRate\" : 5.025004791520295, \"openFieldYards\" : 5.637376656633329, \"powerSuccess\" : 1.4894159098541704, \"rushingPlays\" : { \"ppa\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"totalPPA\" : 1.2315135367772556, \"explosiveness\" : 2.027123023002322 }, \"standardDowns\" : { \"ppa\" : 9.301444243932576, \"successRate\" : 3.616076749251911, \"explosiveness\" : 7.061401241503109 }, \"openFieldYardsTotal\" : 2, \"totalPPA\" : 9.965781217890562, \"secondLevelYards\" : 7.457744773683766, \"passingPlays\" : { \"ppa\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"totalPPA\" : 1.2315135367772556, \"explosiveness\" : 2.027123023002322 }, \"lineYards\" : 1.4658129805029452, \"drives\" : 0, \"passingDowns\" : { \"ppa\" : 9.301444243932576, \"successRate\" : 3.616076749251911, \"explosiveness\" : 7.061401241503109 }, \"explosiveness\" : 6.027456183070403, \"secondLevelYardsTotal\" : 1 }, \"opponent\" : \"opponent\", \"season\" : 6, \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /stats/season/advanced : Advanced team metrics by season
     * Advanced team season stats
     *
     * @param year Year filter (required if no team specified) (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param startWeek Starting week filter (optional)
     * @param endWeek Starting week filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getAdvancedTeamSeasonStats",
        summary = "Advanced team metrics by season",
        description = "Advanced team season stats",
        tags = { "stats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AdvancedSeasonStat.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stats/season/advanced",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AdvancedSeasonStat>> getAdvancedTeamSeasonStats(
        @Min(2001) @Parameter(name = "year", description = "Year filter (required if no team specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "team", description = "Team filter (required if no year specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "excludeGarbageTime", description = "Filter to remove garbage time plays from calculations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeGarbageTime", required = false) Boolean excludeGarbageTime,
        @Min(1) @Max(16) @Parameter(name = "startWeek", description = "Starting week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startWeek", required = false) Integer startWeek,
        @Min(1) @Max(16) @Parameter(name = "endWeek", description = "Starting week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endWeek", required = false) Integer endWeek
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"offense\" : { \"ppa\" : 9.965781217890562, \"plays\" : 1, \"lineYardsTotal\" : 2.3021358869347655, \"stuffRate\" : 8.762042012749001, \"successRate\" : 9.018348186070783, \"openFieldYards\" : 7.061401241503109, \"powerSuccess\" : 5.025004791520295, \"rushingPlays\" : { \"ppa\" : 1.0246457001441578, \"rate\" : 1.4894159098541704, \"successRate\" : 6.84685269835264, \"totalPPA\" : 7.457744773683766, \"explosiveness\" : 1.2315135367772556 }, \"standardDowns\" : { \"ppa\" : 2.027123023002322, \"rate\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"explosiveness\" : 3.616076749251911 }, \"openFieldYardsTotal\" : 9, \"totalPPA\" : 3.5571952270680973, \"secondLevelYards\" : 9.369310271410669, \"totalOpportunies\" : 6, \"passingPlays\" : { \"ppa\" : 1.0246457001441578, \"rate\" : 1.4894159098541704, \"successRate\" : 6.84685269835264, \"totalPPA\" : 7.457744773683766, \"explosiveness\" : 1.2315135367772556 }, \"lineYards\" : 5.637376656633329, \"pointsPerOpportunity\" : 4.965218492984954, \"fieldPosition\" : { \"averagePredictedPoints\" : 1.4658129805029452, \"averageStart\" : 5.962133916683182 }, \"drives\" : 0, \"havoc\" : { \"total\" : 5.962133916683182, \"frontSeven\" : 1.4658129805029452, \"db\" : 6.027456183070403 }, \"passingDowns\" : { \"ppa\" : 2.027123023002322, \"rate\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"explosiveness\" : 3.616076749251911 }, \"explosiveness\" : 6.027456183070403, \"secondLevelYardsTotal\" : 6 }, \"defense\" : { \"ppa\" : 9.965781217890562, \"plays\" : 1, \"lineYardsTotal\" : 2.3021358869347655, \"stuffRate\" : 8.762042012749001, \"successRate\" : 9.018348186070783, \"openFieldYards\" : 7.061401241503109, \"powerSuccess\" : 5.025004791520295, \"rushingPlays\" : { \"ppa\" : 1.0246457001441578, \"rate\" : 1.4894159098541704, \"successRate\" : 6.84685269835264, \"totalPPA\" : 7.457744773683766, \"explosiveness\" : 1.2315135367772556 }, \"standardDowns\" : { \"ppa\" : 2.027123023002322, \"rate\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"explosiveness\" : 3.616076749251911 }, \"openFieldYardsTotal\" : 9, \"totalPPA\" : 3.5571952270680973, \"secondLevelYards\" : 9.369310271410669, \"totalOpportunies\" : 6, \"passingPlays\" : { \"ppa\" : 1.0246457001441578, \"rate\" : 1.4894159098541704, \"successRate\" : 6.84685269835264, \"totalPPA\" : 7.457744773683766, \"explosiveness\" : 1.2315135367772556 }, \"lineYards\" : 5.637376656633329, \"pointsPerOpportunity\" : 4.965218492984954, \"fieldPosition\" : { \"averagePredictedPoints\" : 1.4658129805029452, \"averageStart\" : 5.962133916683182 }, \"drives\" : 0, \"havoc\" : { \"total\" : 5.962133916683182, \"frontSeven\" : 1.4658129805029452, \"db\" : 6.027456183070403 }, \"passingDowns\" : { \"ppa\" : 2.027123023002322, \"rate\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"explosiveness\" : 3.616076749251911 }, \"explosiveness\" : 6.027456183070403, \"secondLevelYardsTotal\" : 6 }, \"season\" : 6, \"team\" : \"team\" }, { \"conference\" : \"conference\", \"offense\" : { \"ppa\" : 9.965781217890562, \"plays\" : 1, \"lineYardsTotal\" : 2.3021358869347655, \"stuffRate\" : 8.762042012749001, \"successRate\" : 9.018348186070783, \"openFieldYards\" : 7.061401241503109, \"powerSuccess\" : 5.025004791520295, \"rushingPlays\" : { \"ppa\" : 1.0246457001441578, \"rate\" : 1.4894159098541704, \"successRate\" : 6.84685269835264, \"totalPPA\" : 7.457744773683766, \"explosiveness\" : 1.2315135367772556 }, \"standardDowns\" : { \"ppa\" : 2.027123023002322, \"rate\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"explosiveness\" : 3.616076749251911 }, \"openFieldYardsTotal\" : 9, \"totalPPA\" : 3.5571952270680973, \"secondLevelYards\" : 9.369310271410669, \"totalOpportunies\" : 6, \"passingPlays\" : { \"ppa\" : 1.0246457001441578, \"rate\" : 1.4894159098541704, \"successRate\" : 6.84685269835264, \"totalPPA\" : 7.457744773683766, \"explosiveness\" : 1.2315135367772556 }, \"lineYards\" : 5.637376656633329, \"pointsPerOpportunity\" : 4.965218492984954, \"fieldPosition\" : { \"averagePredictedPoints\" : 1.4658129805029452, \"averageStart\" : 5.962133916683182 }, \"drives\" : 0, \"havoc\" : { \"total\" : 5.962133916683182, \"frontSeven\" : 1.4658129805029452, \"db\" : 6.027456183070403 }, \"passingDowns\" : { \"ppa\" : 2.027123023002322, \"rate\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"explosiveness\" : 3.616076749251911 }, \"explosiveness\" : 6.027456183070403, \"secondLevelYardsTotal\" : 6 }, \"defense\" : { \"ppa\" : 9.965781217890562, \"plays\" : 1, \"lineYardsTotal\" : 2.3021358869347655, \"stuffRate\" : 8.762042012749001, \"successRate\" : 9.018348186070783, \"openFieldYards\" : 7.061401241503109, \"powerSuccess\" : 5.025004791520295, \"rushingPlays\" : { \"ppa\" : 1.0246457001441578, \"rate\" : 1.4894159098541704, \"successRate\" : 6.84685269835264, \"totalPPA\" : 7.457744773683766, \"explosiveness\" : 1.2315135367772556 }, \"standardDowns\" : { \"ppa\" : 2.027123023002322, \"rate\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"explosiveness\" : 3.616076749251911 }, \"openFieldYardsTotal\" : 9, \"totalPPA\" : 3.5571952270680973, \"secondLevelYards\" : 9.369310271410669, \"totalOpportunies\" : 6, \"passingPlays\" : { \"ppa\" : 1.0246457001441578, \"rate\" : 1.4894159098541704, \"successRate\" : 6.84685269835264, \"totalPPA\" : 7.457744773683766, \"explosiveness\" : 1.2315135367772556 }, \"lineYards\" : 5.637376656633329, \"pointsPerOpportunity\" : 4.965218492984954, \"fieldPosition\" : { \"averagePredictedPoints\" : 1.4658129805029452, \"averageStart\" : 5.962133916683182 }, \"drives\" : 0, \"havoc\" : { \"total\" : 5.962133916683182, \"frontSeven\" : 1.4658129805029452, \"db\" : 6.027456183070403 }, \"passingDowns\" : { \"ppa\" : 2.027123023002322, \"rate\" : 4.145608029883936, \"successRate\" : 7.386281948385884, \"explosiveness\" : 3.616076749251911 }, \"explosiveness\" : 6.027456183070403, \"secondLevelYardsTotal\" : 6 }, \"season\" : 6, \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /stats/player/season : Player stats by season
     * Season player stats
     *
     * @param year Year filter (required)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param startWeek Start week filter (optional)
     * @param endWeek Start week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param category Stat category filter (e.g. passing) (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getPlayerSeasonStats",
        summary = "Player stats by season",
        description = "Season player stats",
        tags = { "players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PlayerSeasonStat.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stats/player/season",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PlayerSeasonStat>> getPlayerSeasonStats(
        @NotNull @Parameter(name = "year", description = "Year filter", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = true) Integer year,
        @Parameter(name = "team", description = "Team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "startWeek", description = "Start week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startWeek", required = false) Integer startWeek,
        @Parameter(name = "endWeek", description = "Start week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endWeek", required = false) Integer endWeek,
        @Parameter(name = "seasonType", description = "Season type filter (regular, postseason, or both)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "seasonType", required = false) String seasonType,
        @Parameter(name = "category", description = "Stat category filter (e.g. passing)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) String category
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"stat\" : 1.4658129805029452, \"conference\" : \"conference\", \"statType\" : \"statType\", \"season\" : 6, \"team\" : \"team\", \"category\" : \"category\", \"player\" : \"player\", \"playerId\" : 0 }, { \"stat\" : 1.4658129805029452, \"conference\" : \"conference\", \"statType\" : \"statType\", \"season\" : 6, \"team\" : \"team\", \"category\" : \"category\", \"player\" : \"player\", \"playerId\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /stats/categories : Team stat categories
     * Stat category list
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getStatCategories",
        summary = "Team stat categories",
        description = "Stat category list",
        tags = { "stats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stats/categories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<String>> getStatCategories(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /stats/season : Team statistics by season
     * Team season stats
     *
     * @param year Year filter (required if no team specified) (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param startWeek Starting week filter (optional)
     * @param endWeek Starting week filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getTeamSeasonStats",
        summary = "Team statistics by season",
        description = "Team season stats",
        tags = { "stats" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamSeasonStat.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stats/season",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TeamSeasonStat>> getTeamSeasonStats(
        @Min(2001) @Parameter(name = "year", description = "Year filter (required if no team specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "team", description = "Team filter (required if no year specified)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team", required = false) String team,
        @Parameter(name = "conference", description = "Conference abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Min(1) @Max(16) @Parameter(name = "startWeek", description = "Starting week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startWeek", required = false) Integer startWeek,
        @Min(1) @Max(16) @Parameter(name = "endWeek", description = "Starting week filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endWeek", required = false) Integer endWeek
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"conference\" : \"conference\", \"statValue\" : 6, \"statName\" : \"statName\", \"season\" : 0, \"team\" : \"team\" }, { \"conference\" : \"conference\", \"statValue\" : 6, \"statName\" : \"statName\", \"season\" : 0, \"team\" : \"team\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
