/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.DraftPick;
import org.openapitools.model.DraftPosition;
import org.openapitools.model.DraftTeam;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:23.773477-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "draft", description = "NFL Draft data")
public interface DraftApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /draft/picks : List of NFL Draft picks
     * List of NFL Draft picks
     *
     * @param year Year filter (optional)
     * @param nflTeam NFL team filter (optional)
     * @param college Player college filter (optional)
     * @param conference College confrence abbreviation filter (optional)
     * @param position NFL position filter (optional)
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getDraftPicks",
        summary = "List of NFL Draft picks",
        description = "List of NFL Draft picks",
        tags = { "draft" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DraftPick.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/draft/picks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DraftPick>> getDraftPicks(
        @Parameter(name = "year", description = "Year filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
        @Parameter(name = "nflTeam", description = "NFL team filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nflTeam", required = false) String nflTeam,
        @Parameter(name = "college", description = "Player college filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "college", required = false) String college,
        @Parameter(name = "conference", description = "College confrence abbreviation filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "conference", required = false) String conference,
        @Parameter(name = "position", description = "NFL position filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "position", required = false) String position
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"collegeTeam\" : \"collegeTeam\", \"nflTeam\" : \"nflTeam\", \"preDraftPositionRanking\" : 4, \"year\" : 1, \"hometownInfo\" : { \"country\" : \"country\", \"city\" : \"city\", \"latitude\" : 5.637376656633329, \"countryFips\" : 5, \"state\" : \"state\", \"longitude\" : 2.3021358869347655 }, \"weight\" : 1, \"round\" : 1, \"pick\" : 3, \"collegeId\" : 6, \"nflAthleteId\" : 7, \"name\" : \"name\", \"overall\" : 9, \"preDraftRanking\" : 7, \"collegeAthleteId\" : 0, \"collegeConference\" : \"collegeConference\", \"position\" : \"position\", \"preDraftGrade\" : 2, \"height\" : 1 }, { \"collegeTeam\" : \"collegeTeam\", \"nflTeam\" : \"nflTeam\", \"preDraftPositionRanking\" : 4, \"year\" : 1, \"hometownInfo\" : { \"country\" : \"country\", \"city\" : \"city\", \"latitude\" : 5.637376656633329, \"countryFips\" : 5, \"state\" : \"state\", \"longitude\" : 2.3021358869347655 }, \"weight\" : 1, \"round\" : 1, \"pick\" : 3, \"collegeId\" : 6, \"nflAthleteId\" : 7, \"name\" : \"name\", \"overall\" : 9, \"preDraftRanking\" : 7, \"collegeAthleteId\" : 0, \"collegeConference\" : \"collegeConference\", \"position\" : \"position\", \"preDraftGrade\" : 2, \"height\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /draft/positions : List of NFL positions
     * List of NFL positions
     *
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getNFLPositions",
        summary = "List of NFL positions",
        description = "List of NFL positions",
        tags = { "draft" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DraftPosition.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/draft/positions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DraftPosition>> getNFLPositions(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"abbreviation\" : \"abbreviation\" }, { \"name\" : \"name\", \"abbreviation\" : \"abbreviation\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /draft/teams : List of NFL teams
     * List of NFL teams
     *
     * @return successful operation (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "getNFLTeams",
        summary = "List of NFL teams",
        description = "List of NFL teams",
        tags = { "draft" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DraftTeam.class)))
            }),
            @ApiResponse(responseCode = "400", description = "error")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/draft/teams",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DraftTeam>> getNFLTeams(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"displayName\" : \"displayName\", \"nickname\" : \"nickname\", \"logo\" : \"logo\", \"location\" : \"location\" }, { \"displayName\" : \"displayName\", \"nickname\" : \"nickname\", \"logo\" : \"logo\", \"location\" : \"location\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
