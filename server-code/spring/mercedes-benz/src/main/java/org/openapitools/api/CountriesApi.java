/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.HalifiedCountries;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:25.642267-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "References", description = "Reference data that is required for the Dealer API.")
public interface CountriesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /countries
     * This request returns the countries supported by the Dealer API
     *
     * @param page The index of the page to be returned. If this parameter is omitted, the first page will be returned.  (optional)
     * @param pageSize The index of the page to be returned. If this parameter is omitted, the first page will be returned.  (optional)
     * @return OK (status code 200)
     *         or Invalid parameter was specified:  * Page is not valid  * Page size is not valid (status code 400)
     *         or Unauthorized:   * Failed to resolve API Key query parameter   * Invalid API Key (status code 401)
     *         or Quota limit is exceeded (status code 429)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "countriesGET",
        description = "This request returns the countries supported by the Dealer API",
        tags = { "References" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HalifiedCountries.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameter was specified:  * Page is not valid  * Page size is not valid"),
            @ApiResponse(responseCode = "401", description = "Unauthorized:   * Failed to resolve API Key query parameter   * Invalid API Key"),
            @ApiResponse(responseCode = "429", description = "Quota limit is exceeded"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/countries",
        produces = { "application/json" }
    )
    
    default ResponseEntity<HalifiedCountries> countriesGET(
        @Parameter(name = "page", description = "The index of the page to be returned. If this parameter is omitted, the first page will be returned. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "pageSize", description = "The index of the page to be returned. If this parameter is omitted, the first page will be returned. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"href\" }, \"previous\" : { \"href\" : \"href\" }, \"self\" : { \"href\" : \"href\" } }, \"countries\" : [ { \"isoCode\" : \"isoCode\", \"name\" : \"name\", \"countryId\" : \"countryId\" }, { \"isoCode\" : \"isoCode\", \"name\" : \"name\", \"countryId\" : \"countryId\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
