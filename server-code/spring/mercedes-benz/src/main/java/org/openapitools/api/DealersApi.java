/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import org.openapitools.model.Dealer;
import org.openapitools.model.HalifiedDealers;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:25.642267-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Dealer search", description = "Resources that provide search functions for dealers (dealer, garage, retailer, etc.) based on given attributes.")
public interface DealersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /dealers/{dealerId}
     * This request returns dealers for given parameters
     *
     * @param dealerId The dealer id is dealer’s business key, also known as GS Id. e.g. GS0000857 (required)
     * @param fields Specifies which fields should be included in the result. If this filter is not used, per default all fields are returned. e.g. fields&#x3D;dealerId,address(street,city) (optional)
     * @return OK (status code 200)
     *         or Invalid format for parameter dealerId was specified (status code 400)
     *         or Unauthorized:   * Failed to resolve API Key query parameter   * Invalid API Key (status code 401)
     *         or Dealer not found (status code 404)
     *         or Quota limit is exceeded (status code 429)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "dealerGET",
        description = "This request returns dealers for given parameters",
        tags = { "Dealer search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Dealer.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid format for parameter dealerId was specified"),
            @ApiResponse(responseCode = "401", description = "Unauthorized:   * Failed to resolve API Key query parameter   * Invalid API Key"),
            @ApiResponse(responseCode = "404", description = "Dealer not found"),
            @ApiResponse(responseCode = "429", description = "Quota limit is exceeded"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dealers/{dealerId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Dealer> dealerGET(
        @Parameter(name = "dealerId", description = "The dealer id is dealer’s business key, also known as GS Id. e.g. GS0000857", required = true, in = ParameterIn.PATH) @PathVariable("dealerId") String dealerId,
        @Parameter(name = "fields", description = "Specifies which fields should be included in the result. If this filter is not used, per default all fields are returned. e.g. fields=dealerId,address(street,city)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields", required = false) String fields
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"legalName\" : \"legalName\", \"brandCodes\" : [ { \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } }, { \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } ], \"address\" : { \"zipCode\" : \"zipCode\", \"addressAddition\" : \"addressAddition\", \"city\" : \"city\", \"countryIsoCode\" : \"countryIsoCode\", \"street\" : \"street\", \"district\" : \"district\" }, \"distance\" : { \"unit\" : \"M\", \"value\" : 0.8008281904610115 }, \"functions\" : [ { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } }, { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } ], \"_links\" : { \"self\" : { \"href\" : \"href\" } }, \"dealerId\" : \"dealerId\", \"nameAddition\" : \"nameAddition\", \"openingHours\" : [ { \"weekdays\" : { \"WEDNESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"MONDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"THURSDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SUNDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"FRIDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"TUESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SATURDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" } }, \"function\" : { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } }, { \"weekdays\" : { \"WEDNESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"MONDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"THURSDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SUNDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"FRIDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"TUESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SATURDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" } }, \"function\" : { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } } ], \"geoCoordinates\" : { \"latitude\" : 6.027456183070403, \"longitude\" : 1.4658129805029452 }, \"communication\" : { \"general\" : { \"twitter\" : \"twitter\", \"website\" : \"website\", \"phone\" : \"phone\", \"facebook\" : \"facebook\", \"mobile\" : \"mobile\", \"fax\" : \"fax\", \"email\" : \"email\", \"googlePlus\" : \"googlePlus\" } }, \"region\" : { \"subRegion\" : \"subRegion\", \"region\" : \"region\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dealers
     * This request returns dealers (dealer, garage, retailer, etc.) for given parameters
     *
     * @param dealerIds Array of dealer ids. The dealer id is dealer’s business key, also known as GS Id. e.g. GS0000857,GS0017621  (optional)
     * @param latitude The latitude geo coordinate. (optional)
     * @param longitude The longitude geo coordinate. (optional)
     * @param radiusValue The radius value of the search area. The center of the search area is defined by geo coordinates. (latitude, longitude properties) If radiusValue and radiusUnit parameters are missing, then the default radius is 10 km. (optional, default to 10)
     * @param radiusUnit The radius unit of the search area. The center of the search area is defined by geo coordinates. (latitude, longitude properties) If radiusValue and radiusUnit parameters are missing, then the default radius is 10 km. (optional, default to KM)
     * @param countryIsoCode The country of the dealer address defined as ISO two letter ID (e.g. DE, CH, CN, etc.) (optional)
     * @param city The city of the dealer address. (optional)
     * @param name A name of the dealer, the name filter will be applied to all Dealer names (e.g. legalName, nameAddition). You can also search for parts of Dealer names, e.g. the search term &#39;Niederlassung&#39; will also match &#39;Niederlassung Stuttgart&#39;. (optional)
     * @param brand Filter by brand, valid values are:   * MB: Mercedes-Benz   * SMT: Smart (optional)
     * @param productGroup Filter by a product group (optional)
     * @param activity Filter by activity, valid actitvity values are:   * PARTS: Spare Parts Sales   * SALES: Sales of new vehicles   * SERVICE: Maintaining and repair   * USED-VEHICLES-TRADE: Sales of used vehicles (optional)
     * @param fields Specifies which fields should be included in the result. If this filter is not used, per default all fields are returned. e.g. fields&#x3D;dealers(dealerId,address(street,city)) (optional)
     * @param page The index of the page to be returned. If this parameter is omitted, the first page will be returned.  (optional)
     * @param pageSize The index of the page to be returned. If this parameter is omitted, the first page will be returned.  (optional)
     * @return OK (status code 200)
     *         or The search did not match any dealers. (status code 204)
     *         or Invalid parameter was specified:  * DealerId is not valid  * Area search is not valid (latitude or longitude missing or invalid)  * Country ISO code is not valid  * Brand code is not valid  * Product group is not valid  * Activity is not valid  * Page is not valid  * Page size is not valid (status code 400)
     *         or Unauthorized:   * Failed to resolve API Key query parameter   * Invalid API Key (status code 401)
     *         or Quota limit is exceeded (status code 429)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "dealersGET",
        description = "This request returns dealers (dealer, garage, retailer, etc.) for given parameters",
        tags = { "Dealer search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HalifiedDealers.class))
            }),
            @ApiResponse(responseCode = "204", description = "The search did not match any dealers."),
            @ApiResponse(responseCode = "400", description = "Invalid parameter was specified:  * DealerId is not valid  * Area search is not valid (latitude or longitude missing or invalid)  * Country ISO code is not valid  * Brand code is not valid  * Product group is not valid  * Activity is not valid  * Page is not valid  * Page size is not valid"),
            @ApiResponse(responseCode = "401", description = "Unauthorized:   * Failed to resolve API Key query parameter   * Invalid API Key"),
            @ApiResponse(responseCode = "429", description = "Quota limit is exceeded"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dealers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<HalifiedDealers> dealersGET(
        @Parameter(name = "dealerIds", description = "Array of dealer ids. The dealer id is dealer’s business key, also known as GS Id. e.g. GS0000857,GS0017621 ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dealerIds", required = false) List<String> dealerIds,
        @Parameter(name = "latitude", description = "The latitude geo coordinate.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latitude", required = false) BigDecimal latitude,
        @Parameter(name = "longitude", description = "The longitude geo coordinate.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "longitude", required = false) BigDecimal longitude,
        @Parameter(name = "radiusValue", description = "The radius value of the search area. The center of the search area is defined by geo coordinates. (latitude, longitude properties) If radiusValue and radiusUnit parameters are missing, then the default radius is 10 km.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "radiusValue", required = false, defaultValue = "10") Integer radiusValue,
        @Parameter(name = "radiusUnit", description = "The radius unit of the search area. The center of the search area is defined by geo coordinates. (latitude, longitude properties) If radiusValue and radiusUnit parameters are missing, then the default radius is 10 km.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "radiusUnit", required = false, defaultValue = "KM") String radiusUnit,
        @Parameter(name = "countryIsoCode", description = "The country of the dealer address defined as ISO two letter ID (e.g. DE, CH, CN, etc.)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "countryIsoCode", required = false) String countryIsoCode,
        @Parameter(name = "city", description = "The city of the dealer address.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "city", required = false) String city,
        @Parameter(name = "name", description = "A name of the dealer, the name filter will be applied to all Dealer names (e.g. legalName, nameAddition). You can also search for parts of Dealer names, e.g. the search term 'Niederlassung' will also match 'Niederlassung Stuttgart'.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "brand", description = "Filter by brand, valid values are:   * MB: Mercedes-Benz   * SMT: Smart", in = ParameterIn.QUERY) @Valid @RequestParam(value = "brand", required = false) String brand,
        @Parameter(name = "productGroup", description = "Filter by a product group", in = ParameterIn.QUERY) @Valid @RequestParam(value = "productGroup", required = false) String productGroup,
        @Parameter(name = "activity", description = "Filter by activity, valid actitvity values are:   * PARTS: Spare Parts Sales   * SALES: Sales of new vehicles   * SERVICE: Maintaining and repair   * USED-VEHICLES-TRADE: Sales of used vehicles", in = ParameterIn.QUERY) @Valid @RequestParam(value = "activity", required = false) String activity,
        @Parameter(name = "fields", description = "Specifies which fields should be included in the result. If this filter is not used, per default all fields are returned. e.g. fields=dealers(dealerId,address(street,city))", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields", required = false) String fields,
        @Parameter(name = "page", description = "The index of the page to be returned. If this parameter is omitted, the first page will be returned. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "pageSize", description = "The index of the page to be returned. If this parameter is omitted, the first page will be returned. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"href\" }, \"previous\" : { \"href\" : \"href\" }, \"self\" : { \"href\" : \"href\" } }, \"dealers\" : [ { \"legalName\" : \"legalName\", \"brandCodes\" : [ { \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } }, { \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } ], \"address\" : { \"zipCode\" : \"zipCode\", \"addressAddition\" : \"addressAddition\", \"city\" : \"city\", \"countryIsoCode\" : \"countryIsoCode\", \"street\" : \"street\", \"district\" : \"district\" }, \"distance\" : { \"unit\" : \"M\", \"value\" : 0.8008281904610115 }, \"functions\" : [ { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } }, { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } ], \"_links\" : { \"self\" : { \"href\" : \"href\" } }, \"dealerId\" : \"dealerId\", \"nameAddition\" : \"nameAddition\", \"openingHours\" : [ { \"weekdays\" : { \"WEDNESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"MONDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"THURSDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SUNDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"FRIDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"TUESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SATURDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" } }, \"function\" : { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } }, { \"weekdays\" : { \"WEDNESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"MONDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"THURSDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SUNDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"FRIDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"TUESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SATURDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" } }, \"function\" : { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } } ], \"geoCoordinates\" : { \"latitude\" : 6.027456183070403, \"longitude\" : 1.4658129805029452 }, \"communication\" : { \"general\" : { \"twitter\" : \"twitter\", \"website\" : \"website\", \"phone\" : \"phone\", \"facebook\" : \"facebook\", \"mobile\" : \"mobile\", \"fax\" : \"fax\", \"email\" : \"email\", \"googlePlus\" : \"googlePlus\" } }, \"region\" : { \"subRegion\" : \"subRegion\", \"region\" : \"region\" } }, { \"legalName\" : \"legalName\", \"brandCodes\" : [ { \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } }, { \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } ], \"address\" : { \"zipCode\" : \"zipCode\", \"addressAddition\" : \"addressAddition\", \"city\" : \"city\", \"countryIsoCode\" : \"countryIsoCode\", \"street\" : \"street\", \"district\" : \"district\" }, \"distance\" : { \"unit\" : \"M\", \"value\" : 0.8008281904610115 }, \"functions\" : [ { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } }, { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } ], \"_links\" : { \"self\" : { \"href\" : \"href\" } }, \"dealerId\" : \"dealerId\", \"nameAddition\" : \"nameAddition\", \"openingHours\" : [ { \"weekdays\" : { \"WEDNESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"MONDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"THURSDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SUNDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"FRIDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"TUESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SATURDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" } }, \"function\" : { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } }, { \"weekdays\" : { \"WEDNESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"MONDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"THURSDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SUNDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"FRIDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"TUESDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" }, \"SATURDAY\" : { \"periods\" : [ { \"from\" : \"from\", \"until\" : \"until\" }, { \"from\" : \"from\", \"until\" : \"until\" } ], \"status\" : \"OPEN\" } }, \"function\" : { \"activity\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"productGroup\" : { \"code\" : \"code\", \"name\" : \"name\" }, \"brand\" : { \"code\" : \"code\", \"name\" : \"name\" } } } ], \"geoCoordinates\" : { \"latitude\" : 6.027456183070403, \"longitude\" : 1.4658129805029452 }, \"communication\" : { \"general\" : { \"twitter\" : \"twitter\", \"website\" : \"website\", \"phone\" : \"phone\", \"facebook\" : \"facebook\", \"mobile\" : \"mobile\", \"fax\" : \"fax\", \"email\" : \"email\", \"googlePlus\" : \"googlePlus\" } }, \"region\" : { \"subRegion\" : \"subRegion\", \"region\" : \"region\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
