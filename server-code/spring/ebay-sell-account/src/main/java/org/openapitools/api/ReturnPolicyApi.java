/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ReturnPolicy;
import org.openapitools.model.ReturnPolicyRequest;
import org.openapitools.model.ReturnPolicyResponse;
import org.openapitools.model.SetReturnPolicyResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:50:38.845776-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "return_policy", description = "the return_policy API")
public interface ReturnPolicyApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /return_policy
     * This method creates a new return policy where the policy encapsulates seller&#39;s terms for returning items.  &lt;br/&gt;&lt;br/&gt;Each policy targets a specific marketplace, and you can create multiple policies for each marketplace. Return policies are not applicable to motor-vehicle listings.&lt;br/&gt;&lt;br/&gt;A successful request returns the &lt;b&gt;getReturnPolicy&lt;/b&gt; URI to the new policy in the &lt;b&gt;Location&lt;/b&gt; response header and the ID for the new policy is returned in the response payload.  &lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Tip:&lt;/b&gt; For details on creating and using the business policies supported by the Account API, see &lt;a href&#x3D;\&quot;/api-docs/sell/static/seller-accounts/business-policies.html\&quot;&gt;eBay business policies&lt;/a&gt;.&lt;/p&gt;
     *
     * @param returnPolicyRequest Return policy request (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createReturnPolicy",
        description = "This method creates a new return policy where the policy encapsulates seller's terms for returning items.  <br/><br/>Each policy targets a specific marketplace, and you can create multiple policies for each marketplace. Return policies are not applicable to motor-vehicle listings.<br/><br/>A successful request returns the <b>getReturnPolicy</b> URI to the new policy in the <b>Location</b> response header and the ID for the new policy is returned in the response payload.  <p class=\"tablenote\"><b>Tip:</b> For details on creating and using the business policies supported by the Account API, see <a href=\"/api-docs/sell/static/seller-accounts/business-policies.html\">eBay business policies</a>.</p>",
        tags = { "return_policy" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SetReturnPolicyResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "api_auth", scopes={ "https://api.ebay.com/oauth/api_scope/sell.account" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/return_policy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SetReturnPolicyResponse> createReturnPolicy(
        @Parameter(name = "ReturnPolicyRequest", description = "Return policy request", required = true) @Valid @RequestBody ReturnPolicyRequest returnPolicyRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"categoryTypes\" : [ { \"default\" : true, \"name\" : \"name\" }, { \"default\" : true, \"name\" : \"name\" } ], \"refundMethod\" : \"refundMethod\", \"warnings\" : [ { \"domain\" : \"domain\", \"subdomain\" : \"subdomain\", \"outputRefIds\" : [ \"outputRefIds\", \"outputRefIds\" ], \"errorId\" : 0, \"inputRefIds\" : [ \"inputRefIds\", \"inputRefIds\" ], \"category\" : \"category\", \"longMessage\" : \"longMessage\", \"message\" : \"message\", \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] }, { \"domain\" : \"domain\", \"subdomain\" : \"subdomain\", \"outputRefIds\" : [ \"outputRefIds\", \"outputRefIds\" ], \"errorId\" : 0, \"inputRefIds\" : [ \"inputRefIds\", \"inputRefIds\" ], \"category\" : \"category\", \"longMessage\" : \"longMessage\", \"message\" : \"message\", \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] } ], \"description\" : \"description\", \"restockingFeePercentage\" : \"restockingFeePercentage\", \"returnInstructions\" : \"returnInstructions\", \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 }, \"marketplaceId\" : \"marketplaceId\", \"internationalOverride\" : { \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"returnMethod\" : \"returnMethod\", \"returnsAccepted\" : true, \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 } }, \"returnMethod\" : \"returnMethod\", \"returnPolicyId\" : \"returnPolicyId\", \"name\" : \"name\", \"returnsAccepted\" : true, \"extendedHolidayReturnsOffered\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /return_policy/{return_policy_id}
     * This method deletes a return policy. Supply the ID of the policy you want to delete in the &lt;b&gt;returnPolicyId&lt;/b&gt; path parameter.
     *
     * @param returnPolicyId This path parameter specifies the ID of the return policy you want to delete. (required)
     * @return No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteReturnPolicy",
        description = "This method deletes a return policy. Supply the ID of the policy you want to delete in the <b>returnPolicyId</b> path parameter.",
        tags = { "return_policy" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "409", description = "Conflict"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "api_auth", scopes={ "https://api.ebay.com/oauth/api_scope/sell.account" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/return_policy/{return_policy_id}"
    )
    
    default ResponseEntity<Void> deleteReturnPolicy(
        @Parameter(name = "return_policy_id", description = "This path parameter specifies the ID of the return policy you want to delete.", required = true, in = ParameterIn.PATH) @PathVariable("return_policy_id") String returnPolicyId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /return_policy
     * This method retrieves all the return policies configured for the marketplace you specify using the &lt;code&gt;marketplace_id&lt;/code&gt; query parameter.  &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Marketplaces and locales&lt;/b&gt;  &lt;br/&gt;&lt;br/&gt;Get the correct policies for a marketplace that supports multiple locales using the &lt;code&gt;Content-Language&lt;/code&gt; request header. For example, get the policies for the French locale of the Canadian marketplace by specifying &lt;code&gt;fr-CA&lt;/code&gt; for the &lt;code&gt;Content-Language&lt;/code&gt; header. Likewise, target the Dutch locale of the Belgium marketplace by setting &lt;code&gt;Content-Language: nl-BE&lt;/code&gt;. For details on header values, see &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank\&quot;&gt;HTTP request headers&lt;/a&gt;.
     *
     * @param marketplaceId This query parameter specifies the ID of the eBay marketplace of the policy you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getReturnPolicies",
        description = "This method retrieves all the return policies configured for the marketplace you specify using the <code>marketplace_id</code> query parameter.  <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policies for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get the policies for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\"/api-docs/static/rest-request-components.html#HTTP\" target=\"_blank\">HTTP request headers</a>.",
        tags = { "return_policy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReturnPolicyResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "api_auth", scopes={ "https://api.ebay.com/oauth/api_scope/sell.account", "https://api.ebay.com/oauth/api_scope/sell.account.readonly" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/return_policy",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ReturnPolicyResponse> getReturnPolicies(
        @NotNull @Parameter(name = "marketplace_id", description = "This query parameter specifies the ID of the eBay marketplace of the policy you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "marketplace_id", required = true) String marketplaceId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"next\" : \"next\", \"total\" : 1, \"offset\" : 6, \"prev\" : \"prev\", \"limit\" : 0, \"returnPolicies\" : [ { \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"categoryTypes\" : [ { \"default\" : true, \"name\" : \"name\" }, { \"default\" : true, \"name\" : \"name\" } ], \"refundMethod\" : \"refundMethod\", \"description\" : \"description\", \"restockingFeePercentage\" : \"restockingFeePercentage\", \"returnInstructions\" : \"returnInstructions\", \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 }, \"marketplaceId\" : \"marketplaceId\", \"internationalOverride\" : { \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"returnMethod\" : \"returnMethod\", \"returnsAccepted\" : true, \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 } }, \"returnMethod\" : \"returnMethod\", \"returnPolicyId\" : \"returnPolicyId\", \"name\" : \"name\", \"returnsAccepted\" : true, \"extendedHolidayReturnsOffered\" : true }, { \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"categoryTypes\" : [ { \"default\" : true, \"name\" : \"name\" }, { \"default\" : true, \"name\" : \"name\" } ], \"refundMethod\" : \"refundMethod\", \"description\" : \"description\", \"restockingFeePercentage\" : \"restockingFeePercentage\", \"returnInstructions\" : \"returnInstructions\", \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 }, \"marketplaceId\" : \"marketplaceId\", \"internationalOverride\" : { \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"returnMethod\" : \"returnMethod\", \"returnsAccepted\" : true, \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 } }, \"returnMethod\" : \"returnMethod\", \"returnPolicyId\" : \"returnPolicyId\", \"name\" : \"name\", \"returnsAccepted\" : true, \"extendedHolidayReturnsOffered\" : true } ], \"href\" : \"href\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /return_policy/{return_policy_id}
     * This method retrieves the complete details of the return policy specified by the &lt;b&gt;returnPolicyId&lt;/b&gt; path parameter.
     *
     * @param returnPolicyId This path parameter specifies the of the return policy you want to retrieve. (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getReturnPolicy",
        description = "This method retrieves the complete details of the return policy specified by the <b>returnPolicyId</b> path parameter.",
        tags = { "return_policy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReturnPolicy.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "api_auth", scopes={ "https://api.ebay.com/oauth/api_scope/sell.account", "https://api.ebay.com/oauth/api_scope/sell.account.readonly" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/return_policy/{return_policy_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ReturnPolicy> getReturnPolicy(
        @Parameter(name = "return_policy_id", description = "This path parameter specifies the of the return policy you want to retrieve.", required = true, in = ParameterIn.PATH) @PathVariable("return_policy_id") String returnPolicyId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"categoryTypes\" : [ { \"default\" : true, \"name\" : \"name\" }, { \"default\" : true, \"name\" : \"name\" } ], \"refundMethod\" : \"refundMethod\", \"description\" : \"description\", \"restockingFeePercentage\" : \"restockingFeePercentage\", \"returnInstructions\" : \"returnInstructions\", \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 }, \"marketplaceId\" : \"marketplaceId\", \"internationalOverride\" : { \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"returnMethod\" : \"returnMethod\", \"returnsAccepted\" : true, \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 } }, \"returnMethod\" : \"returnMethod\", \"returnPolicyId\" : \"returnPolicyId\", \"name\" : \"name\", \"returnsAccepted\" : true, \"extendedHolidayReturnsOffered\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /return_policy/get_by_policy_name
     * This method retrieves the details of a specific return policy. Supply both the policy &lt;code&gt;name&lt;/code&gt; and its associated &lt;code&gt;marketplace_id&lt;/code&gt; in the request query parameters.   &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Marketplaces and locales&lt;/b&gt;  &lt;br/&gt;&lt;br/&gt;Get the correct policy for a marketplace that supports multiple locales using the &lt;code&gt;Content-Language&lt;/code&gt; request header. For example, get a policy for the French locale of the Canadian marketplace by specifying &lt;code&gt;fr-CA&lt;/code&gt; for the &lt;code&gt;Content-Language&lt;/code&gt; header. Likewise, target the Dutch locale of the Belgium marketplace by setting &lt;code&gt;Content-Language: nl-BE&lt;/code&gt;. For details on header values, see &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot;&gt;HTTP request headers&lt;/a&gt;.
     *
     * @param marketplaceId This query parameter specifies the ID of the eBay marketplace of the policy you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum (required)
     * @param name This query parameter specifies the seller-defined name of the return policy you want to retrieve. (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getReturnPolicyByName",
        description = "This method retrieves the details of a specific return policy. Supply both the policy <code>name</code> and its associated <code>marketplace_id</code> in the request query parameters.   <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policy for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get a policy for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\"/api-docs/static/rest-request-components.html#HTTP\">HTTP request headers</a>.",
        tags = { "return_policy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReturnPolicy.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "api_auth", scopes={ "https://api.ebay.com/oauth/api_scope/sell.account", "https://api.ebay.com/oauth/api_scope/sell.account.readonly" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/return_policy/get_by_policy_name",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ReturnPolicy> getReturnPolicyByName(
        @NotNull @Parameter(name = "marketplace_id", description = "This query parameter specifies the ID of the eBay marketplace of the policy you want to retrieve. For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "marketplace_id", required = true) String marketplaceId,
        @NotNull @Parameter(name = "name", description = "This query parameter specifies the seller-defined name of the return policy you want to retrieve.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"categoryTypes\" : [ { \"default\" : true, \"name\" : \"name\" }, { \"default\" : true, \"name\" : \"name\" } ], \"refundMethod\" : \"refundMethod\", \"description\" : \"description\", \"restockingFeePercentage\" : \"restockingFeePercentage\", \"returnInstructions\" : \"returnInstructions\", \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 }, \"marketplaceId\" : \"marketplaceId\", \"internationalOverride\" : { \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"returnMethod\" : \"returnMethod\", \"returnsAccepted\" : true, \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 } }, \"returnMethod\" : \"returnMethod\", \"returnPolicyId\" : \"returnPolicyId\", \"name\" : \"name\", \"returnsAccepted\" : true, \"extendedHolidayReturnsOffered\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /return_policy/{return_policy_id}
     * This method updates an existing return policy. Specify the policy you want to update using the &lt;b&gt;return_policy_id&lt;/b&gt; path parameter. Supply a complete policy payload with the updates you want to make; this call overwrites the existing policy with the new details specified in the payload.
     *
     * @param returnPolicyId This path parameter specifies the ID of the return policy you want to update. (required)
     * @param returnPolicyRequest Container for a return policy request. (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "updateReturnPolicy",
        description = "This method updates an existing return policy. Specify the policy you want to update using the <b>return_policy_id</b> path parameter. Supply a complete policy payload with the updates you want to make; this call overwrites the existing policy with the new details specified in the payload.",
        tags = { "return_policy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SetReturnPolicyResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "api_auth", scopes={ "https://api.ebay.com/oauth/api_scope/sell.account" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/return_policy/{return_policy_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SetReturnPolicyResponse> updateReturnPolicy(
        @Parameter(name = "return_policy_id", description = "This path parameter specifies the ID of the return policy you want to update.", required = true, in = ParameterIn.PATH) @PathVariable("return_policy_id") String returnPolicyId,
        @Parameter(name = "ReturnPolicyRequest", description = "Container for a return policy request.", required = true) @Valid @RequestBody ReturnPolicyRequest returnPolicyRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"categoryTypes\" : [ { \"default\" : true, \"name\" : \"name\" }, { \"default\" : true, \"name\" : \"name\" } ], \"refundMethod\" : \"refundMethod\", \"warnings\" : [ { \"domain\" : \"domain\", \"subdomain\" : \"subdomain\", \"outputRefIds\" : [ \"outputRefIds\", \"outputRefIds\" ], \"errorId\" : 0, \"inputRefIds\" : [ \"inputRefIds\", \"inputRefIds\" ], \"category\" : \"category\", \"longMessage\" : \"longMessage\", \"message\" : \"message\", \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] }, { \"domain\" : \"domain\", \"subdomain\" : \"subdomain\", \"outputRefIds\" : [ \"outputRefIds\", \"outputRefIds\" ], \"errorId\" : 0, \"inputRefIds\" : [ \"inputRefIds\", \"inputRefIds\" ], \"category\" : \"category\", \"longMessage\" : \"longMessage\", \"message\" : \"message\", \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] } ], \"description\" : \"description\", \"restockingFeePercentage\" : \"restockingFeePercentage\", \"returnInstructions\" : \"returnInstructions\", \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 }, \"marketplaceId\" : \"marketplaceId\", \"internationalOverride\" : { \"returnShippingCostPayer\" : \"returnShippingCostPayer\", \"returnMethod\" : \"returnMethod\", \"returnsAccepted\" : true, \"returnPeriod\" : { \"unit\" : \"unit\", \"value\" : 0 } }, \"returnMethod\" : \"returnMethod\", \"returnPolicyId\" : \"returnPolicyId\", \"name\" : \"name\", \"returnsAccepted\" : true, \"extendedHolidayReturnsOffered\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
