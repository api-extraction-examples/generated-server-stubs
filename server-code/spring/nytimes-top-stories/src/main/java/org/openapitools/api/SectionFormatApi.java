/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.SectionFormatGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:48.532857-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Stories", description = "the Stories API")
public interface SectionFormatApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /{section}.{format} : Top Stories
     * The Top Stories API returns a list of articles and associated images currently on the specified section.  Support JSON and JSONP. 
     *
     * @param section The section the story appears in. (required)
     * @param format if this is JSONP or JSON (required)
     * @param paramCallback The name of the function the API call results will be passed to. Required when using JSONP. This parameter has only one valid value per section. The format is {section_name}TopStoriesCallback.  (optional)
     * @return An array of articles (status code 200)
     */
    @Operation(
        operationId = "sectionFormatGet",
        summary = "Top Stories",
        description = "The Top Stories API returns a list of articles and associated images currently on the specified section.  Support JSON and JSONP. ",
        tags = { "Stories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An array of articles", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SectionFormatGet200Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{section}.{format}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SectionFormatGet200Response> sectionFormatGet(
        @Parameter(name = "section", description = "The section the story appears in.", required = true, in = ParameterIn.PATH) @PathVariable("section") String section,
        @Parameter(name = "format", description = "if this is JSONP or JSON", required = true, in = ParameterIn.PATH) @PathVariable("format") String format,
        @Parameter(name = "callback", description = "The name of the function the API call results will be passed to. Required when using JSONP. This parameter has only one valid value per section. The format is {section_name}TopStoriesCallback. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "callback", required = false) String paramCallback
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"per_facet\" : [ \"per_facet\", \"per_facet\" ], \"subsection\" : \"subsection\", \"item_type\" : \"item_type\", \"org_facet\" : [ \"org_facet\", \"org_facet\" ], \"section\" : \"section\", \"abstract\" : \"abstract\", \"related_urls\" : [ { \"suggested_link_text\" : \"suggested_link_text\", \"url\" : \"url\" }, { \"suggested_link_text\" : \"suggested_link_text\", \"url\" : \"url\" } ], \"des_facet\" : [ \"des_facet\", \"des_facet\" ], \"title\" : \"title\", \"url\" : \"url\", \"short_url\" : \"short_url\", \"material_type_facet\" : \"material_type_facet\", \"multimedia\" : [ { \"copyright\" : \"copyright\", \"subtype\" : \"subtype\", \"format\" : \"format\", \"width\" : 6, \"caption\" : \"caption\", \"type\" : \"type\", \"url\" : \"url\", \"height\" : 0 }, { \"copyright\" : \"copyright\", \"subtype\" : \"subtype\", \"format\" : \"format\", \"width\" : 6, \"caption\" : \"caption\", \"type\" : \"type\", \"url\" : \"url\", \"height\" : 0 } ], \"thumbnail_standard\" : \"thumbnail_standard\", \"geo_facet\" : [ \"geo_facet\", \"geo_facet\" ], \"created_date\" : \"created_date\", \"updated_date\" : \"updated_date\", \"byline\" : \"byline\", \"published_date\" : \"published_date\", \"kicker\" : \"kicker\" }, { \"per_facet\" : [ \"per_facet\", \"per_facet\" ], \"subsection\" : \"subsection\", \"item_type\" : \"item_type\", \"org_facet\" : [ \"org_facet\", \"org_facet\" ], \"section\" : \"section\", \"abstract\" : \"abstract\", \"related_urls\" : [ { \"suggested_link_text\" : \"suggested_link_text\", \"url\" : \"url\" }, { \"suggested_link_text\" : \"suggested_link_text\", \"url\" : \"url\" } ], \"des_facet\" : [ \"des_facet\", \"des_facet\" ], \"title\" : \"title\", \"url\" : \"url\", \"short_url\" : \"short_url\", \"material_type_facet\" : \"material_type_facet\", \"multimedia\" : [ { \"copyright\" : \"copyright\", \"subtype\" : \"subtype\", \"format\" : \"format\", \"width\" : 6, \"caption\" : \"caption\", \"type\" : \"type\", \"url\" : \"url\", \"height\" : 0 }, { \"copyright\" : \"copyright\", \"subtype\" : \"subtype\", \"format\" : \"format\", \"width\" : 6, \"caption\" : \"caption\", \"type\" : \"type\", \"url\" : \"url\", \"height\" : 0 } ], \"thumbnail_standard\" : \"thumbnail_standard\", \"geo_facet\" : [ \"geo_facet\", \"geo_facet\" ], \"created_date\" : \"created_date\", \"updated_date\" : \"updated_date\", \"byline\" : \"byline\", \"published_date\" : \"published_date\", \"kicker\" : \"kicker\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
