/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Artifact;
import org.openapitools.model.Build;
import org.openapitools.model.BuildDetail;
import org.openapitools.model.BuildSummary;
import org.openapitools.model.Envvar;
import org.openapitools.model.Key;
import org.openapitools.model.ProjectUsernameProjectBuildCacheDelete200Response;
import org.openapitools.model.ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response;
import org.openapitools.model.ProjectUsernameProjectPostRequest;
import org.openapitools.model.ProjectUsernameProjectSshKeyPostDefaultResponse;
import org.openapitools.model.ProjectUsernameProjectSshKeyPostRequest;
import org.openapitools.model.ProjectUsernameProjectTreeBranchPostRequest;
import org.openapitools.model.Tests;
import java.net.URI;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:13.970205-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "project", description = "the project API")
public interface ProjectApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /project/{username}/{project}/build-cache
     * Clears the cache for a project. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return status message (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectBuildCacheDelete",
        description = "Clears the cache for a project. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "status message", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectUsernameProjectBuildCacheDelete200Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/project/{username}/{project}/build-cache",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectUsernameProjectBuildCacheDelete200Response> projectUsernameProjectBuildCacheDelete(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /project/{username}/{project}/{build_num}/artifacts
     * List the artifacts produced by a given build. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return List the artifacts produced by a given build (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectBuildNumArtifactsGet",
        description = "List the artifacts produced by a given build. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "List the artifacts produced by a given build", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Artifact.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/project/{username}/{project}/{build_num}/artifacts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Artifact>> projectUsernameProjectBuildNumArtifactsGet(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "build_num", description = "XXXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("build_num") Integer buildNum
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"path\" : \"path\", \"node_index\" : 0, \"pretty_path\" : \"pretty_path\", \"url\" : \"url\" }, { \"path\" : \"path\", \"node_index\" : 0, \"pretty_path\" : \"pretty_path\", \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /project/{username}/{project}/{build_num}/cancel
     * Cancels the build, returns a summary of the build. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return returns a summary of the build (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectBuildNumCancelPost",
        description = "Cancels the build, returns a summary of the build. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "returns a summary of the build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Build.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/project/{username}/{project}/{build_num}/cancel",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Build> projectUsernameProjectBuildNumCancelPost(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "build_num", description = "XXXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("build_num") Integer buildNum
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retry_of\" : 5, \"committer_email\" : \"committer_email\", \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\", \"previous\" : { \"build_num\" : 6, \"build_time_millis\" : 1 }, \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\", \"subject\" : \"subject\", \"vcs_url\" : \"https://openapi-generator.tech\", \"build_time_millis\" : 0, \"dont_build\" : \"dont_build\", \"why\" : \"why\", \"body\" : \"body\", \"branch\" : \"branch\", \"committer_name\" : \"committer_name\", \"start_time\" : \"2000-01-23T04:56:07.000+00:00\", \"reponame\" : \"reponame\", \"build_url\" : \"https://openapi-generator.tech\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /project/{username}/{project}/{build_num}
     * Full details for a single build. The response includes all of the fields from the build summary. This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named &#39;payload&#39;. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return Full details for a single build (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectBuildNumGet",
        description = "Full details for a single build. The response includes all of the fields from the build summary. This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named 'payload'. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Full details for a single build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildDetail.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/project/{username}/{project}/{build_num}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildDetail> projectUsernameProjectBuildNumGet(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "build_num", description = "XXXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("build_num") Integer buildNum
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"all_commit_details\" : [ { \"author_name\" : \"author_name\", \"author_login\" : \"author_login\", \"commit_url\" : \"https://openapi-generator.tech\", \"committer_email\" : \"committer_email\", \"committer_login\" : \"committer_login\", \"subject\" : \"subject\", \"author_date\" : \"2000-01-23T04:56:07.000+00:00\", \"commit\" : \"commit\", \"author_email\" : \"author_email\", \"committer_date\" : \"2000-01-23T04:56:07.000+00:00\", \"body\" : \"body\", \"committer_name\" : \"committer_name\" }, { \"author_name\" : \"author_name\", \"author_login\" : \"author_login\", \"commit_url\" : \"https://openapi-generator.tech\", \"committer_email\" : \"committer_email\", \"committer_login\" : \"committer_login\", \"subject\" : \"subject\", \"author_date\" : \"2000-01-23T04:56:07.000+00:00\", \"commit\" : \"commit\", \"author_email\" : \"author_email\", \"committer_date\" : \"2000-01-23T04:56:07.000+00:00\", \"body\" : \"body\", \"committer_name\" : \"committer_name\" } ], \"node\" : \"\", \"retries\" : true, \"compare\" : \"https://openapi-generator.tech\", \"timedout\" : true, \"job_name\" : \"job_name\", \"previous_successful_build\" : { \"build_num\" : 6, \"build_time_millis\" : 1 }, \"ssh_enabled\" : true, \"usage_queued_at\" : \"2000-01-23T04:56:07.000+00:00\", \"user\" : { \"days_left_in_trial\" : 1, \"projects\" : \"{}\", \"parallelism\" : 2, \"admin\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"sign_in_count\" : 7, \"bitbucket\" : 0, \"login\" : \"login\", \"pusher_id\" : \"pusher_id\", \"all_emails\" : [ \"all_emails\", \"all_emails\" ], \"gravatar_id\" : 5, \"organization_prefs\" : \"{}\", \"plan\" : \"plan\", \"github_oauth_scopes\" : [ \"github_oauth_scopes\", \"github_oauth_scopes\" ], \"bitbucket_authorized\" : true, \"analytics_id\" : \"analytics_id\", \"trial_end\" : \"2000-01-23T04:56:07.000+00:00\", \"enrolled_betas\" : [ \"enrolled_betas\", \"enrolled_betas\" ], \"basic_email_prefs\" : \"basic_email_prefs\", \"avatar_url\" : \"https://openapi-generator.tech\", \"in_beta_program\" : true, \"selected_email\" : \"selected_email\", \"dev_admin\" : true, \"heroku_api_key\" : \"heroku_api_key\", \"name\" : \"name\", \"containers\" : 6, \"github_id\" : 5 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /project/{username}/{project}/{build_num}/retry
     * Retries the build, returns a summary of the new build. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return returns a summary of the new build (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectBuildNumRetryPost",
        description = "Retries the build, returns a summary of the new build. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "returns a summary of the new build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Build.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/project/{username}/{project}/{build_num}/retry",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Build> projectUsernameProjectBuildNumRetryPost(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "build_num", description = "XXXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("build_num") Integer buildNum
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retry_of\" : 5, \"committer_email\" : \"committer_email\", \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\", \"previous\" : { \"build_num\" : 6, \"build_time_millis\" : 1 }, \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\", \"subject\" : \"subject\", \"vcs_url\" : \"https://openapi-generator.tech\", \"build_time_millis\" : 0, \"dont_build\" : \"dont_build\", \"why\" : \"why\", \"body\" : \"body\", \"branch\" : \"branch\", \"committer_name\" : \"committer_name\", \"start_time\" : \"2000-01-23T04:56:07.000+00:00\", \"reponame\" : \"reponame\", \"build_url\" : \"https://openapi-generator.tech\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /project/{username}/{project}/{build_num}/tests
     * Provides test metadata for a build Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/) 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param buildNum XXXXXXXXXX  (required)
     * @return test metadata for a build  (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectBuildNumTestsGet",
        description = "Provides test metadata for a build Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/) ",
        responses = {
            @ApiResponse(responseCode = "200", description = "test metadata for a build ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tests.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/project/{username}/{project}/{build_num}/tests",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Tests> projectUsernameProjectBuildNumTestsGet(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "build_num", description = "XXXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("build_num") Integer buildNum
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tests\" : [ { \"file\" : \"file\", \"classname\" : \"classname\", \"run_time\" : 0.8008281904610115, \"name\" : \"name\", \"source\" : \"source\", \"message\" : \"message\" }, { \"file\" : \"file\", \"classname\" : \"classname\", \"run_time\" : 0.8008281904610115, \"name\" : \"name\", \"source\" : \"source\", \"message\" : \"message\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /project/{username}/{project}/checkout-key/{fingerprint}
     * Delete a checkout key. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param fingerprint XXXXXXXXXX  (required)
     * @return status message (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectCheckoutKeyFingerprintDelete",
        description = "Delete a checkout key. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "status message", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/project/{username}/{project}/checkout-key/{fingerprint}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response> projectUsernameProjectCheckoutKeyFingerprintDelete(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "fingerprint", description = "XXXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("fingerprint") String fingerprint
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /project/{username}/{project}/checkout-key/{fingerprint}
     * Get a checkout key. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param fingerprint XXXXXXXXXX  (required)
     * @return checkout key (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectCheckoutKeyFingerprintGet",
        description = "Get a checkout key. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "checkout key", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Key.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/project/{username}/{project}/checkout-key/{fingerprint}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Key> projectUsernameProjectCheckoutKeyFingerprintGet(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "fingerprint", description = "XXXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("fingerprint") String fingerprint
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"public_key\" : \"public_key\", \"fingerprint\" : \"fingerprint\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"type\" : \"deploy-key\", \"preferred\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /project/{username}/{project}/checkout-key
     * Lists checkout keys. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return checkout keys (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectCheckoutKeyGet",
        description = "Lists checkout keys. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "checkout keys", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Key.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/project/{username}/{project}/checkout-key",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Key>> projectUsernameProjectCheckoutKeyGet(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"public_key\" : \"public_key\", \"fingerprint\" : \"fingerprint\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"type\" : \"deploy-key\", \"preferred\" : true }, { \"public_key\" : \"public_key\", \"fingerprint\" : \"fingerprint\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"type\" : \"deploy-key\", \"preferred\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /project/{username}/{project}/checkout-key
     * Creates a new checkout key. Only usable with a user API token. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param body The type of key to create. Can be &#39;deploy-key&#39; or &#39;github-user-key&#39;.  (optional)
     * @return checkout key (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectCheckoutKeyPost",
        description = "Creates a new checkout key. Only usable with a user API token. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "checkout key", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Key.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/project/{username}/{project}/checkout-key",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Key> projectUsernameProjectCheckoutKeyPost(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "body", description = "The type of key to create. Can be 'deploy-key' or 'github-user-key'. ") @Valid @RequestBody(required = false) String body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"public_key\" : \"public_key\", \"fingerprint\" : \"fingerprint\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"type\" : \"deploy-key\", \"preferred\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /project/{username}/{project}/envvar
     * Lists the environment variables for :project 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return XXX (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectEnvvarGet",
        description = "Lists the environment variables for :project ",
        responses = {
            @ApiResponse(responseCode = "200", description = "XXX", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Envvar.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/project/{username}/{project}/envvar",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Envvar>> projectUsernameProjectEnvvarGet(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /project/{username}/{project}/envvar/{name}
     * Deletes the environment variable named &#39;:name&#39; 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param name XXXXXXXXXX  (required)
     * @return Deletes the environment variable named &#39;:name&#39;  (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectEnvvarNameDelete",
        description = "Deletes the environment variable named ':name' ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Deletes the environment variable named ':name' ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/project/{username}/{project}/envvar/{name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response> projectUsernameProjectEnvvarNameDelete(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "name", description = "XXXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /project/{username}/{project}/envvar/{name}
     * Gets the hidden value of environment variable :name 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param name XXXXXXXXXX  (required)
     * @return XXX (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectEnvvarNameGet",
        description = "Gets the hidden value of environment variable :name ",
        responses = {
            @ApiResponse(responseCode = "200", description = "XXX", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Envvar.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/project/{username}/{project}/envvar/{name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Envvar> projectUsernameProjectEnvvarNameGet(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "name", description = "XXXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"value\" : \"value\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /project/{username}/{project}/envvar
     * Creates a new environment variable 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @return XXX (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectEnvvarPost",
        description = "Creates a new environment variable ",
        responses = {
            @ApiResponse(responseCode = "200", description = "XXX", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Envvar.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/project/{username}/{project}/envvar",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Envvar> projectUsernameProjectEnvvarPost(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"value\" : \"value\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /project/{username}/{project}
     * Build summary for each of the last 30 builds for a single git repo. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param limit The number of builds to return. Maximum 100, defaults to 30.  (optional, default to 30)
     * @param offset The API returns builds starting from this offset, defaults to 0.  (optional, default to 0)
     * @param filter Restricts which builds are returned. Set to \&quot;completed\&quot;, \&quot;successful\&quot;, \&quot;failed\&quot;, \&quot;running\&quot;, or defaults to no filter.  (optional)
     * @return Build summary for each of the last 30 builds (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectGet",
        description = "Build summary for each of the last 30 builds for a single git repo. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Build summary for each of the last 30 builds", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Build.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/project/{username}/{project}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Build>> projectUsernameProjectGet(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Max(100) @Parameter(name = "limit", description = "The number of builds to return. Maximum 100, defaults to 30. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "30") Integer limit,
        @Parameter(name = "offset", description = "The API returns builds starting from this offset, defaults to 0. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "filter", description = "Restricts which builds are returned. Set to \"completed\", \"successful\", \"failed\", \"running\", or defaults to no filter. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"retry_of\" : 5, \"committer_email\" : \"committer_email\", \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\", \"previous\" : { \"build_num\" : 6, \"build_time_millis\" : 1 }, \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\", \"subject\" : \"subject\", \"vcs_url\" : \"https://openapi-generator.tech\", \"build_time_millis\" : 0, \"dont_build\" : \"dont_build\", \"why\" : \"why\", \"body\" : \"body\", \"branch\" : \"branch\", \"committer_name\" : \"committer_name\", \"start_time\" : \"2000-01-23T04:56:07.000+00:00\", \"reponame\" : \"reponame\", \"build_url\" : \"https://openapi-generator.tech\", \"username\" : \"username\" }, { \"retry_of\" : 5, \"committer_email\" : \"committer_email\", \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\", \"previous\" : { \"build_num\" : 6, \"build_time_millis\" : 1 }, \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\", \"subject\" : \"subject\", \"vcs_url\" : \"https://openapi-generator.tech\", \"build_time_millis\" : 0, \"dont_build\" : \"dont_build\", \"why\" : \"why\", \"body\" : \"body\", \"branch\" : \"branch\", \"committer_name\" : \"committer_name\", \"start_time\" : \"2000-01-23T04:56:07.000+00:00\", \"reponame\" : \"reponame\", \"build_url\" : \"https://openapi-generator.tech\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /project/{username}/{project}
     * Triggers a new build, returns a summary of the build. 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param projectUsernameProjectPostRequest  (optional)
     * @return returns a summary of the build (status code 201)
     */
    @Operation(
        operationId = "projectUsernameProjectPost",
        description = "Triggers a new build, returns a summary of the build. ",
        responses = {
            @ApiResponse(responseCode = "201", description = "returns a summary of the build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildSummary.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/project/{username}/{project}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BuildSummary> projectUsernameProjectPost(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "ProjectUsernameProjectPostRequest", description = "") @Valid @RequestBody(required = false) ProjectUsernameProjectPostRequest projectUsernameProjectPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"added_at\" : \"2000-01-23T04:56:07.000+00:00\", \"pushed_at\" : \"2000-01-23T04:56:07.000+00:00\", \"build_num\" : 0, \"vcs_revision\" : \"vcs_revision\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /project/{username}/{project}/ssh-key
     * Create an ssh key used to access external systems that require SSH key-based authentication 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param contentType  (required)
     * @param projectUsernameProjectSshKeyPostRequest  (required)
     * @return no response expected (status code 200)
     */
    @Operation(
        operationId = "projectUsernameProjectSshKeyPost",
        description = "Create an ssh key used to access external systems that require SSH key-based authentication ",
        responses = {
            @ApiResponse(responseCode = "default", description = "no response expected", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectUsernameProjectSshKeyPostDefaultResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/project/{username}/{project}/ssh-key",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectUsernameProjectSshKeyPostDefaultResponse> projectUsernameProjectSshKeyPost(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @NotNull @Parameter(name = "Content-Type", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Content-Type", required = true) String contentType,
        @Parameter(name = "ProjectUsernameProjectSshKeyPostRequest", description = "", required = true) @Valid @RequestBody ProjectUsernameProjectSshKeyPostRequest projectUsernameProjectSshKeyPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /project/{username}/{project}/tree/{branch}
     * Triggers a new build, returns a summary of the build. Optional build parameters can be set using an experimental API.  Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/) 
     *
     * @param username XXXXXXXXX  (required)
     * @param project XXXXXXXXX  (required)
     * @param branch The branch name should be url-encoded.  (required)
     * @param projectUsernameProjectTreeBranchPostRequest  (optional)
     * @return returns a summary of the build (status code 201)
     */
    @Operation(
        operationId = "projectUsernameProjectTreeBranchPost",
        description = "Triggers a new build, returns a summary of the build. Optional build parameters can be set using an experimental API.  Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/) ",
        responses = {
            @ApiResponse(responseCode = "201", description = "returns a summary of the build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Build.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/project/{username}/{project}/tree/{branch}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Build> projectUsernameProjectTreeBranchPost(
        @Parameter(name = "username", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "project", description = "XXXXXXXXX ", required = true, in = ParameterIn.PATH) @PathVariable("project") String project,
        @Parameter(name = "branch", description = "The branch name should be url-encoded. ", required = true, in = ParameterIn.PATH) @PathVariable("branch") String branch,
        @Parameter(name = "ProjectUsernameProjectTreeBranchPostRequest", description = "") @Valid @RequestBody(required = false) ProjectUsernameProjectTreeBranchPostRequest projectUsernameProjectTreeBranchPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"retry_of\" : 5, \"committer_email\" : \"committer_email\", \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\", \"previous\" : { \"build_num\" : 6, \"build_time_millis\" : 1 }, \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\", \"subject\" : \"subject\", \"vcs_url\" : \"https://openapi-generator.tech\", \"build_time_millis\" : 0, \"dont_build\" : \"dont_build\", \"why\" : \"why\", \"body\" : \"body\", \"branch\" : \"branch\", \"committer_name\" : \"committer_name\", \"start_time\" : \"2000-01-23T04:56:07.000+00:00\", \"reponame\" : \"reponame\", \"build_url\" : \"https://openapi-generator.tech\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
