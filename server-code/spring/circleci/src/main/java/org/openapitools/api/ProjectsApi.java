/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Project;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:44:13.970205-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "projects", description = "the projects API")
public interface ProjectsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /projects
     * List of all the projects you&#39;re following on CircleCI, with build information organized by branch. 
     *
     * @return List of all the projects you&#39;re following on CircleCI  (status code 200)
     */
    @Operation(
        operationId = "projectsGet",
        description = "List of all the projects you're following on CircleCI, with build information organized by branch. ",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of all the projects you're following on CircleCI ", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Project.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "apikey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Project>> projectsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"slack_api_token\" : \"slack_api_token\", \"slack_channel\" : \"slack_channel\", \"vcs_url\" : \"https://openapi-generator.tech\", \"slack_notify_prefs\" : \"slack_notify_prefs\", \"language\" : \"language\", \"slack_webhook_url\" : \"https://openapi-generator.tech\", \"irc_channel\" : \"irc_channel\", \"campfire_notify_prefs\" : \"campfire_notify_prefs\", \"campfire_token\" : \"campfire_token\", \"oss\" : true, \"campfire_room\" : \"campfire_room\", \"compile\" : \"compile\", \"hipchat_notify_prefs\" : \"hipchat_notify_prefs\", \"parallel\" : 0, \"extra\" : \"extra\", \"irc_server\" : \"irc_server\", \"hipchat_room\" : \"hipchat_room\", \"slack_subdomain\" : \"slack_subdomain\", \"flowdock_api_token\" : \"flowdock_api_token\", \"test\" : \"test\", \"hipchat_api_token\" : \"hipchat_api_token\", \"hipchat_notify\" : \"hipchat_notify\", \"has_usable_key\" : true, \"heroku_deploy_user\" : \"heroku_deploy_user\", \"irc_password\" : \"irc_password\", \"slack_channel_override\" : \"slack_channel_override\", \"branches\" : \"{}\", \"followed\" : true, \"campfire_subdomain\" : \"campfire_subdomain\", \"dependencies\" : \"dependencies\", \"vcs_type\" : \"vcs_type\", \"irc_username\" : \"irc_username\", \"ssh_keys\" : [ \"ssh_keys\", \"ssh_keys\" ], \"reponame\" : \"reponame\", \"irc_notify_prefs\" : \"irc_notify_prefs\", \"feature_flags\" : { \"fleet\" : true, \"build-fork-prs\" : true, \"junit\" : true, \"trusty-beta\" : true, \"osx\" : true, \"oss\" : true, \"set-github-status\" : true }, \"irc_keyword\" : \"irc_keyword\", \"setup\" : \"setup\", \"default_branch\" : \"default_branch\", \"scopes\" : [ null, null ], \"aws\" : { \"keypair\" : \"keypair\" }, \"username\" : \"username\" }, { \"slack_api_token\" : \"slack_api_token\", \"slack_channel\" : \"slack_channel\", \"vcs_url\" : \"https://openapi-generator.tech\", \"slack_notify_prefs\" : \"slack_notify_prefs\", \"language\" : \"language\", \"slack_webhook_url\" : \"https://openapi-generator.tech\", \"irc_channel\" : \"irc_channel\", \"campfire_notify_prefs\" : \"campfire_notify_prefs\", \"campfire_token\" : \"campfire_token\", \"oss\" : true, \"campfire_room\" : \"campfire_room\", \"compile\" : \"compile\", \"hipchat_notify_prefs\" : \"hipchat_notify_prefs\", \"parallel\" : 0, \"extra\" : \"extra\", \"irc_server\" : \"irc_server\", \"hipchat_room\" : \"hipchat_room\", \"slack_subdomain\" : \"slack_subdomain\", \"flowdock_api_token\" : \"flowdock_api_token\", \"test\" : \"test\", \"hipchat_api_token\" : \"hipchat_api_token\", \"hipchat_notify\" : \"hipchat_notify\", \"has_usable_key\" : true, \"heroku_deploy_user\" : \"heroku_deploy_user\", \"irc_password\" : \"irc_password\", \"slack_channel_override\" : \"slack_channel_override\", \"branches\" : \"{}\", \"followed\" : true, \"campfire_subdomain\" : \"campfire_subdomain\", \"dependencies\" : \"dependencies\", \"vcs_type\" : \"vcs_type\", \"irc_username\" : \"irc_username\", \"ssh_keys\" : [ \"ssh_keys\", \"ssh_keys\" ], \"reponame\" : \"reponame\", \"irc_notify_prefs\" : \"irc_notify_prefs\", \"feature_flags\" : { \"fleet\" : true, \"build-fork-prs\" : true, \"junit\" : true, \"trusty-beta\" : true, \"osx\" : true, \"oss\" : true, \"set-github-status\" : true }, \"irc_keyword\" : \"irc_keyword\", \"setup\" : \"setup\", \"default_branch\" : \"default_branch\", \"scopes\" : [ null, null ], \"aws\" : { \"keypair\" : \"keypair\" }, \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
