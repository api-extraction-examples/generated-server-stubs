/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.LocationInfoResponse;
import org.openapitools.model.LocationSearchResponse;
import org.openapitools.model.MediaListResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:07.987869-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "locations", description = "Get information about locations")
public interface LocationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /locations/{location-id} : Get information about a location.
     * Get information about a location.
     *
     * @param locationId The location ID. (required)
     * @return Location information response. (status code 200)
     */
    @Operation(
        operationId = "locationsLocationIdGet",
        summary = "Get information about a location.",
        description = "Get information about a location.",
        tags = { "locations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Location information response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LocationInfoResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/locations/{location-id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<LocationInfoResponse> locationsLocationIdGet(
        @Parameter(name = "location-id", description = "The location ID.", required = true, in = ParameterIn.PATH) @PathVariable("location-id") String locationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /locations/{location-id}/media/recent : Get a list of recent media objects from a given location.
     * Get a list of recent media objects from a given location.
     *
     * @param locationId The location ID. (required)
     * @param minTimestamp Return media after this UNIX timestamp. (optional)
     * @param maxTimestamp Return media before this UNIX timestamp. (optional)
     * @param minId Return media before this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media after this &#x60;max_id&#x60;. (optional)
     * @return List of media entries from this location. (status code 200)
     */
    @Operation(
        operationId = "locationsLocationIdMediaRecentGet",
        summary = "Get a list of recent media objects from a given location.",
        description = "Get a list of recent media objects from a given location.",
        tags = { "locations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of media entries from this location.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaListResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/locations/{location-id}/media/recent",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MediaListResponse> locationsLocationIdMediaRecentGet(
        @Parameter(name = "location-id", description = "The location ID.", required = true, in = ParameterIn.PATH) @PathVariable("location-id") String locationId,
        @Parameter(name = "min_timestamp", description = "Return media after this UNIX timestamp.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_timestamp", required = false) Long minTimestamp,
        @Parameter(name = "max_timestamp", description = "Return media before this UNIX timestamp.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_timestamp", required = false) Long maxTimestamp,
        @Parameter(name = "min_id", description = "Return media before this `min_id`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId,
        @Parameter(name = "max_id", description = "Return media after this `max_id`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pagination\" : { \"next_url\" : \"next_url\", \"next_max_id\" : \"next_max_id\" }, \"data\" : [ { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } }, { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /locations/search : Search for a location by geographic coordinate.
     * Search for a location by geographic coordinate.
     *
     * @param distance Default is 1000m (distance&#x3D;1000), max distance is 5000. (optional)
     * @param facebookPlacesId Returns a location mapped off of a Facebook places id. If used, a Foursquare id and &#x60;lat&#x60;, &#x60;lng&#x60; are not required. (optional)
     * @param foursquareId Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API.  (optional)
     * @param lat Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (optional)
     * @param lng Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (optional)
     * @param foursquareV2Id Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use &#x60;lat&#x60; and &#x60;lng&#x60;.  (optional)
     * @return List of found locations. (status code 200)
     */
    @Operation(
        operationId = "locationsSearchGet",
        summary = "Search for a location by geographic coordinate.",
        description = "Search for a location by geographic coordinate.",
        tags = { "locations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of found locations.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LocationSearchResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/locations/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<LocationSearchResponse> locationsSearchGet(
        @Parameter(name = "distance", description = "Default is 1000m (distance=1000), max distance is 5000.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance", required = false) Integer distance,
        @Parameter(name = "facebook_places_id", description = "Returns a location mapped off of a Facebook places id. If used, a Foursquare id and `lat`, `lng` are not required.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "facebook_places_id", required = false) String facebookPlacesId,
        @Parameter(name = "foursquare_id", description = "Returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use `lat` and `lng`. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "foursquare_id", required = false) String foursquareId,
        @Parameter(name = "lat", description = "Latitude of the center search coordinate. If used, `lng` is required.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lat", required = false) Double lat,
        @Parameter(name = "lng", description = "Longitude of the center search coordinate. If used, `lat` is required.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lng", required = false) Double lng,
        @Parameter(name = "foursquare_v2_id", description = "Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use `lat` and `lng`. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "foursquare_v2_id", required = false) String foursquareV2Id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
