/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.TagInfoResponse;
import org.openapitools.model.TagMediaListResponse;
import org.openapitools.model.TagSearchResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:07.987869-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "tags", description = "Get information about tags")
public interface TagsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /tags/search : Search for tags by name.
     * Search for tags by name.
     *
     * @param q A valid tag name without a leading \\#. (eg. snowy, nofilter) (required)
     * @return List of found tags and their statistics. (status code 200)
     */
    @Operation(
        operationId = "tagsSearchGet",
        summary = "Search for tags by name.",
        description = "Search for tags by name.",
        tags = { "tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of found tags and their statistics.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TagSearchResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tags/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TagSearchResponse> tagsSearchGet(
        @NotNull @Parameter(name = "q", description = "A valid tag name without a leading \\#. (eg. snowy, nofilter)", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "q", required = true) String q
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"media_count\" : 0, \"name\" : \"name\" }, { \"media_count\" : 0, \"name\" : \"name\" } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tags/{tag-name} : Get information about a tag object.
     * Get information about a tag object.
     *
     * @param tagName The tag name. (required)
     * @return Tag information response. (status code 200)
     */
    @Operation(
        operationId = "tagsTagNameGet",
        summary = "Get information about a tag object.",
        description = "Get information about a tag object.",
        tags = { "tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tag information response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TagInfoResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tags/{tag-name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TagInfoResponse> tagsTagNameGet(
        @Parameter(name = "tag-name", description = "The tag name.", required = true, in = ParameterIn.PATH) @PathVariable("tag-name") String tagName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"media_count\" : 0, \"name\" : \"name\" }, \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tags/{tag-name}/media/recent : Get a list of recently tagged media.
     * Get a list of recently tagged media. Use the &#x60;max_tag_id&#x60; and &#x60;min_tag_id&#x60; parameters in the pagination response to paginate through these objects. 
     *
     * @param tagName The tag name. (required)
     * @param count Count of tagged media to return. (optional)
     * @param minTagId Return media before this &#x60;min_tag_id&#x60;. (optional)
     * @param maxTagId Return media after this &#x60;max_tag_id&#x60;. (optional)
     * @return List of media entries with this tag. (status code 200)
     */
    @Operation(
        operationId = "tagsTagNameMediaRecentGet",
        summary = "Get a list of recently tagged media.",
        description = "Get a list of recently tagged media. Use the `max_tag_id` and `min_tag_id` parameters in the pagination response to paginate through these objects. ",
        tags = { "tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of media entries with this tag.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TagMediaListResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tags/{tag-name}/media/recent",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TagMediaListResponse> tagsTagNameMediaRecentGet(
        @Parameter(name = "tag-name", description = "The tag name.", required = true, in = ParameterIn.PATH) @PathVariable("tag-name") String tagName,
        @Parameter(name = "count", description = "Count of tagged media to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count,
        @Parameter(name = "min_tag_id", description = "Return media before this `min_tag_id`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_tag_id", required = false) String minTagId,
        @Parameter(name = "max_tag_id", description = "Return media after this `max_tag_id`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_tag_id", required = false) String maxTagId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pagination\" : { \"next_min_id\" : \"next_min_id\", \"next_url\" : \"next_url\", \"next_max_id\" : \"next_max_id\", \"min_tag_id\" : \"min_tag_id\", \"next_max_tag_id\" : \"next_max_tag_id\", \"deprecation_warning\" : \"deprecation_warning\" }, \"data\" : [ { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } }, { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
