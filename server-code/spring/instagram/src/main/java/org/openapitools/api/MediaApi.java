/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CommentsResponse;
import org.openapitools.model.MediaEntryResponse;
import org.openapitools.model.MediaSearchResponse;
import org.openapitools.model.StatusResponse;
import org.openapitools.model.UsersInfoResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:07.987869-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "comments", description = "Manage comments")
public interface MediaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /media/{media-id}/comments/{comment-id} : Remove a comment.
     * Remove a comment either on the authenticated user&#39;s media object or authored by the authenticated user. 
     *
     * @param mediaId The ID of the media resource. (required)
     * @param commentId The ID of the comment entry. (required)
     * @return Result of deleting a comment. (status code 200)
     */
    @Operation(
        operationId = "mediaMediaIdCommentsCommentIdDelete",
        summary = "Remove a comment.",
        description = "Remove a comment either on the authenticated user's media object or authored by the authenticated user. ",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Result of deleting a comment.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "comments" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/media/{media-id}/comments/{comment-id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StatusResponse> mediaMediaIdCommentsCommentIdDelete(
        @Parameter(name = "media-id", description = "The ID of the media resource.", required = true, in = ParameterIn.PATH) @PathVariable("media-id") String mediaId,
        @Parameter(name = "comment-id", description = "The ID of the comment entry.", required = true, in = ParameterIn.PATH) @PathVariable("comment-id") String commentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"data\", \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /media/{media-id}/comments : Get a list of recent comments on a media object.
     * Get a list of recent comments on a media object.
     *
     * @param mediaId The ID of the media resource. (required)
     * @return List of comments of the media resource. (status code 200)
     */
    @Operation(
        operationId = "mediaMediaIdCommentsGet",
        summary = "Get a list of recent comments on a media object.",
        description = "Get a list of recent comments on a media object.",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of comments of the media resource.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CommentsResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "basic", "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/media/{media-id}/comments",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CommentsResponse> mediaMediaIdCommentsGet(
        @Parameter(name = "media-id", description = "The ID of the media resource.", required = true, in = ParameterIn.PATH) @PathVariable("media-id") String mediaId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /media/{media-id}/comments : Create a comment on a media object.
     * Create a comment on a media object with the following rules:    * The total length of the comment cannot exceed 300 characters.   * The comment cannot contain more than 4 hashtags.   * The comment cannot contain more than 1 URL.   * The comment cannot consist of all capital letters. 
     *
     * @param mediaId The ID of the media resource. (required)
     * @param text Text to post as a comment on the media object as specified in &#x60;media-id&#x60;. (required)
     * @return Result of posting a comment. (status code 200)
     */
    @Operation(
        operationId = "mediaMediaIdCommentsPost",
        summary = "Create a comment on a media object.",
        description = "Create a comment on a media object with the following rules:    * The total length of the comment cannot exceed 300 characters.   * The comment cannot contain more than 4 hashtags.   * The comment cannot contain more than 1 URL.   * The comment cannot consist of all capital letters. ",
        tags = { "comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Result of posting a comment.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "comments" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/media/{media-id}/comments",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StatusResponse> mediaMediaIdCommentsPost(
        @Parameter(name = "media-id", description = "The ID of the media resource.", required = true, in = ParameterIn.PATH) @PathVariable("media-id") String mediaId,
        @NotNull @Parameter(name = "text", description = "Text to post as a comment on the media object as specified in `media-id`.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "text", required = true) String text
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"data\", \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /media/{media-id} : Get information about a media object.
     * Get information about a media object. The returned type key will allow you to differentiate between image and video media.  **Note:** if you authenticate with an OAuth Token, you will receive the user_has_liked key which quickly tells you whether the current user has liked this media item. 
     *
     * @param mediaId The ID of the media resource. (required)
     * @return Media resource information. (status code 200)
     */
    @Operation(
        operationId = "mediaMediaIdGet",
        summary = "Get information about a media object.",
        description = "Get information about a media object. The returned type key will allow you to differentiate between image and video media.  **Note:** if you authenticate with an OAuth Token, you will receive the user_has_liked key which quickly tells you whether the current user has liked this media item. ",
        tags = { "media" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Media resource information.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaEntryResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "basic", "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/media/{media-id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MediaEntryResponse> mediaMediaIdGet(
        @Parameter(name = "media-id", description = "The ID of the media resource.", required = true, in = ParameterIn.PATH) @PathVariable("media-id") String mediaId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } }, \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /media/{media-id}/likes : Remove a like on this media by the current user.
     * Remove a like on this media by the currently authenticated user.
     *
     * @param mediaId The ID of the media resource. (required)
     * @return Result of removing a like. (status code 200)
     */
    @Operation(
        operationId = "mediaMediaIdLikesDelete",
        summary = "Remove a like on this media by the current user.",
        description = "Remove a like on this media by the currently authenticated user.",
        tags = { "likes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Result of removing a like.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "likes" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/media/{media-id}/likes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StatusResponse> mediaMediaIdLikesDelete(
        @Parameter(name = "media-id", description = "The ID of the media resource.", required = true, in = ParameterIn.PATH) @PathVariable("media-id") String mediaId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"data\", \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /media/{media-id}/likes : Get a list of users who have liked this media.
     * Get a list of users who have liked this media.
     *
     * @param mediaId The ID of the media resource. (required)
     * @return List of users who liked the media resource. (status code 200)
     */
    @Operation(
        operationId = "mediaMediaIdLikesGet",
        summary = "Get a list of users who have liked this media.",
        description = "Get a list of users who have liked this media.",
        tags = { "likes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of users who liked the media resource.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsersInfoResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "basic", "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/media/{media-id}/likes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UsersInfoResponse> mediaMediaIdLikesGet(
        @Parameter(name = "media-id", description = "The ID of the media resource.", required = true, in = ParameterIn.PATH) @PathVariable("media-id") String mediaId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /media/{media-id}/likes : Set a like on this media by the current user.
     * Set a like on this media by the currently authenticated user.
     *
     * @param mediaId The ID of the media resource. (required)
     * @return Result of setting a like. (status code 200)
     */
    @Operation(
        operationId = "mediaMediaIdLikesPost",
        summary = "Set a like on this media by the current user.",
        description = "Set a like on this media by the currently authenticated user.",
        tags = { "likes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Result of setting a like.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "likes" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/media/{media-id}/likes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StatusResponse> mediaMediaIdLikesPost(
        @Parameter(name = "media-id", description = "The ID of the media resource.", required = true, in = ParameterIn.PATH) @PathVariable("media-id") String mediaId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"data\", \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /media/popular : Get a list of currently popular media.
     * Get a list of what media is most popular at the moment. Can return mix of &#x60;image&#x60; and &#x60;video&#x60; types.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     *
     * @return Found media resources (without likes information). (status code 200)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "mediaPopularGet",
        summary = "Get a list of currently popular media.",
        description = "Get a list of what media is most popular at the moment. Can return mix of `image` and `video` types.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 ",
        deprecated = true,
        tags = { "media" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Found media resources (without likes information).", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaSearchResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "basic" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/media/popular",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MediaSearchResponse> mediaPopularGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } }, { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /media/search : Search for media in a given area.
     * Search for media in a given area. The default time span is set to 5 days. The time span must not exceed 7 days. Defaults time stamps cover the last 5 days. Can return mix of &#x60;image&#x60; and &#x60;video&#x60; types. 
     *
     * @param lat Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required. (required)
     * @param lng Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required. (required)
     * @param minTimestamp A unix timestamp. All media returned will be taken later than this timestamp. (optional)
     * @param maxTimestamp A unix timestamp. All media returned will be taken earlier than this timestamp. (optional)
     * @param distance Default is 1km (distance&#x3D;1000), max distance is 5km. (optional)
     * @return Found media resources (without likes information) in a given area. (status code 200)
     */
    @Operation(
        operationId = "mediaSearchGet",
        summary = "Search for media in a given area.",
        description = "Search for media in a given area. The default time span is set to 5 days. The time span must not exceed 7 days. Defaults time stamps cover the last 5 days. Can return mix of `image` and `video` types. ",
        tags = { "media" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Found media resources (without likes information) in a given area.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaSearchResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/media/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MediaSearchResponse> mediaSearchGet(
        @NotNull @Parameter(name = "lat", description = "Latitude of the center search coordinate. If used, `lng` is required.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lat", required = true) Double lat,
        @NotNull @Parameter(name = "lng", description = "Longitude of the center search coordinate. If used, `lat` is required.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lng", required = true) Double lng,
        @Parameter(name = "min_timestamp", description = "A unix timestamp. All media returned will be taken later than this timestamp.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_timestamp", required = false) Long minTimestamp,
        @Parameter(name = "max_timestamp", description = "A unix timestamp. All media returned will be taken earlier than this timestamp.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_timestamp", required = false) Long maxTimestamp,
        @Parameter(name = "distance", description = "Default is 1km (distance=1000), max distance is 5km.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "distance", required = false) Integer distance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } }, { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /media/shortcode/{shortcode} : Get information about a media object.
     * This endpoint returns the same response as &#x60;GET /media/{media-id}&#x60;.  A media object&#39;s shortcode can be found in its shortlink URL. An example shortlink is &#x60;http://instagram.com/p/D/&#x60;, its corresponding shortcode is &#x60;D&#x60;. 
     *
     * @param shortcode The short code of the media resource. (required)
     * @return Media resource information. (status code 200)
     */
    @Operation(
        operationId = "mediaShortcodeShortcodeGet",
        summary = "Get information about a media object.",
        description = "This endpoint returns the same response as `GET /media/{media-id}`.  A media object's shortcode can be found in its shortlink URL. An example shortlink is `http://instagram.com/p/D/`, its corresponding shortcode is `D`. ",
        tags = { "media" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Media resource information.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaEntryResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "basic", "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/media/shortcode/{shortcode}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MediaEntryResponse> mediaShortcodeShortcodeGet(
        @Parameter(name = "shortcode", description = "The short code of the media resource.", required = true, in = ParameterIn.PATH) @PathVariable("shortcode") String shortcode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } }, \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
