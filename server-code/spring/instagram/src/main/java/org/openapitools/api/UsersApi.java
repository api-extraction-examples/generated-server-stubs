/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.MediaListResponse;
import org.openapitools.model.RelationshipPostResponse;
import org.openapitools.model.RelationshipResponse;
import org.openapitools.model.UserResponse;
import org.openapitools.model.UsersInfoResponse;
import org.openapitools.model.UsersPagingResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:07.987869-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "users", description = "Get information about users")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users/search : Search for a user by name.
     * Search for a user by name.
     *
     * @param q A query string. (required)
     * @param count Number of users to return. (optional)
     * @return List of found users. (status code 200)
     */
    @Operation(
        operationId = "usersSearchGet",
        summary = "Search for a user by name.",
        description = "Search for a user by name.",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of found users.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsersInfoResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "basic" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UsersInfoResponse> usersSearchGet(
        @NotNull @Parameter(name = "q", description = "A query string.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "q", required = true) String q,
        @Parameter(name = "count", description = "Number of users to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/self/feed : See the authenticated user&#39;s feed.
     * See the authenticated user&#39;s feed.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 
     *
     * @param count Count of media to return. (optional)
     * @param minId Return media later than this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media earlier than this &#x60;max_id&#x60;. (optional)
     * @return Users feed entries. (status code 200)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "usersSelfFeedGet",
        summary = "See the authenticated user's feed.",
        description = "See the authenticated user's feed.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 ",
        deprecated = true,
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users feed entries.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaListResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "basic" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/self/feed",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MediaListResponse> usersSelfFeedGet(
        @Parameter(name = "count", description = "Count of media to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count,
        @Parameter(name = "min_id", description = "Return media later than this `min_id`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId,
        @Parameter(name = "max_id", description = "Return media earlier than this `max_id`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pagination\" : { \"next_url\" : \"next_url\", \"next_max_id\" : \"next_max_id\" }, \"data\" : [ { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } }, { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/self/media/liked : See the list of media liked by the authenticated user.
     * See the list of media liked by the authenticated user. Private media is returned as long as the authenticated user has permission to view that media. Liked media lists are only available for the currently authenticated user. 
     *
     * @param count Count of media to return. (optional)
     * @param maxLikeId Return media liked before this id. (optional)
     * @return Users media entries. (status code 200)
     */
    @Operation(
        operationId = "usersSelfMediaLikedGet",
        summary = "See the list of media liked by the authenticated user.",
        description = "See the list of media liked by the authenticated user. Private media is returned as long as the authenticated user has permission to view that media. Liked media lists are only available for the currently authenticated user. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users media entries.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaListResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "basic" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/self/media/liked",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MediaListResponse> usersSelfMediaLikedGet(
        @Parameter(name = "count", description = "Count of media to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count,
        @Parameter(name = "max_like_id", description = "Return media liked before this id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_like_id", required = false) String maxLikeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pagination\" : { \"next_url\" : \"next_url\", \"next_max_id\" : \"next_max_id\" }, \"data\" : [ { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } }, { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/self/requested-by : List the users who have requested this user&#39;s permission to follow.
     * List the users who have requested this user&#39;s permission to follow.
     *
     * @return List of users who have requested this user&#39;s permission to follow. (status code 200)
     */
    @Operation(
        operationId = "usersSelfRequestedByGet",
        summary = "List the users who have requested this user's permission to follow.",
        description = "List the users who have requested this user's permission to follow.",
        tags = { "relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of users who have requested this user's permission to follow.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsersInfoResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "follower_list" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/self/requested-by",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UsersInfoResponse> usersSelfRequestedByGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{user-id}/followed-by : Get the list of users this user is followed by.
     * Get the list of users this user is followed by. To get users followed by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. 
     *
     * @param userId The ID of a user, or **self** to retrieve information about authenticated user. (required)
     * @return List of users this user is followed by. (status code 200)
     */
    @Operation(
        operationId = "usersUserIdFollowedByGet",
        summary = "Get the list of users this user is followed by.",
        description = "Get the list of users this user is followed by. To get users followed by the owner of the access token, you can use **self** instead of the `user-id`. ",
        tags = { "relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of users this user is followed by.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsersPagingResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "follower_list" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{user-id}/followed-by",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UsersPagingResponse> usersUserIdFollowedByGet(
        @Parameter(name = "user-id", description = "The ID of a user, or **self** to retrieve information about authenticated user.", required = true, in = ParameterIn.PATH) @PathVariable("user-id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pagination\" : { \"next_cursor\" : \"next_cursor\", \"next_url\" : \"next_url\" }, \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{user-id}/follows : Get the list of users this user follows.
     * Get the list of users this user follows. To get follows of the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. 
     *
     * @param userId The ID of a user, or **self** to retrieve information about authenticated user. (required)
     * @return List of users this user follows. (status code 200)
     */
    @Operation(
        operationId = "usersUserIdFollowsGet",
        summary = "Get the list of users this user follows.",
        description = "Get the list of users this user follows. To get follows of the owner of the access token, you can use **self** instead of the `user-id`. ",
        tags = { "relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of users this user follows.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsersPagingResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "follower_list" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{user-id}/follows",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UsersPagingResponse> usersUserIdFollowsGet(
        @Parameter(name = "user-id", description = "The ID of a user, or **self** to retrieve information about authenticated user.", required = true, in = ParameterIn.PATH) @PathVariable("user-id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pagination\" : { \"next_cursor\" : \"next_cursor\", \"next_url\" : \"next_url\" }, \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{user-id} : Get basic information about a user.
     * Get basic information about a user. To get information about the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. 
     *
     * @param userId The ID of a user to get information about, or **self** to retrieve information about authenticated user. (required)
     * @return User basic information. (status code 200)
     *         or Not Found, user with such ID does not exist. (status code 404)
     */
    @Operation(
        operationId = "usersUserIdGet",
        summary = "Get basic information about a user.",
        description = "Get basic information about a user. To get information about the owner of the access token, you can use **self** instead of the `user-id`.  Security scope `public_content` is required to read information about other users. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User basic information.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found, user with such ID does not exist.")
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "basic", "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{user-id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserResponse> usersUserIdGet(
        @Parameter(name = "user-id", description = "The ID of a user to get information about, or **self** to retrieve information about authenticated user.", required = true, in = ParameterIn.PATH) @PathVariable("user-id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"website\" : \"website\", \"full_name\" : \"full_name\", \"counts\" : { \"followed_by\" : 0, \"follows\" : 6, \"media\" : 1 }, \"bio\" : \"bio\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{user-id}/media/recent : Get the most recent media published by a user.
     * Get the most recent media published by a user. To get the most recent media published by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. 
     *
     * @param userId The ID of a user to get recent media of, or **self** to retrieve media of authenticated user. (required)
     * @param count Count of media to return. (optional)
     * @param maxTimestamp Return media before this UNIX timestamp. (optional)
     * @param minTimestamp Return media after this UNIX timestamp. (optional)
     * @param minId Return media later than this &#x60;min_id&#x60;. (optional)
     * @param maxId Return media earlier than this &#x60;max_id&#x60;. (optional)
     * @return Users media entries. (status code 200)
     */
    @Operation(
        operationId = "usersUserIdMediaRecentGet",
        summary = "Get the most recent media published by a user.",
        description = "Get the most recent media published by a user. To get the most recent media published by the owner of the access token, you can use **self** instead of the `user-id`.  Security scope `public_content` is required to read information about other users. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users media entries.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MediaListResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "basic", "public_content" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{user-id}/media/recent",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MediaListResponse> usersUserIdMediaRecentGet(
        @Parameter(name = "user-id", description = "The ID of a user to get recent media of, or **self** to retrieve media of authenticated user.", required = true, in = ParameterIn.PATH) @PathVariable("user-id") String userId,
        @Parameter(name = "count", description = "Count of media to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count,
        @Parameter(name = "max_timestamp", description = "Return media before this UNIX timestamp.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_timestamp", required = false) Long maxTimestamp,
        @Parameter(name = "min_timestamp", description = "Return media after this UNIX timestamp.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_timestamp", required = false) Long minTimestamp,
        @Parameter(name = "min_id", description = "Return media later than this `min_id`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId,
        @Parameter(name = "max_id", description = "Return media earlier than this `max_id`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pagination\" : { \"next_url\" : \"next_url\", \"next_max_id\" : \"next_max_id\" }, \"data\" : [ { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } }, { \"created_time\" : \"created_time\", \"images\" : { \"thumbnail\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"comments\" : { \"data\" : [ { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" } ], \"count\" : 0 }, \"users_in_photo\" : [ { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } }, { \"position\" : { \"x\" : 7.0614014, \"y\" : 9.301444 }, \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } } ], \"user_has_liked\" : true, \"link\" : \"link\", \"caption\" : { \"created_time\" : \"created_time\", \"from\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"id\" : \"id\", \"text\" : \"text\" }, \"videos\" : { \"low_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 }, \"standard_resolution\" : { \"width\" : 1, \"url\" : \"url\", \"height\" : 6 } }, \"type\" : \"image\", \"tags\" : [ \"tags\", \"tags\" ], \"filter\" : \"filter\", \"attribution\" : \"attribution\", \"location\" : { \"latitude\" : 5.637376656633329, \"name\" : \"name\", \"id\" : \"id\", \"longitude\" : 2.3021358869347655 }, \"id\" : \"id\", \"user\" : { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, \"likes\" : { \"data\" : [ { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" }, { \"full_name\" : \"full_name\", \"profile_picture\" : \"profile_picture\", \"id\" : \"id\", \"username\" : \"username\" } ], \"count\" : 5 } } ], \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{user-id}/relationship : Get information about a relationship to another user.
     * Get information about a relationship to another user.
     *
     * @param userId The ID of a user to get information about. (required)
     * @return Relationship information. (status code 200)
     */
    @Operation(
        operationId = "usersUserIdRelationshipGet",
        summary = "Get information about a relationship to another user.",
        description = "Get information about a relationship to another user.",
        tags = { "relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Relationship information.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RelationshipResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "follower_list" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{user-id}/relationship",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RelationshipResponse> usersUserIdRelationshipGet(
        @Parameter(name = "user-id", description = "The ID of a user to get information about.", required = true, in = ParameterIn.PATH) @PathVariable("user-id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"incoming_status\" : \"none\", \"target_user_is_private\" : true, \"outgoing_status\" : \"none\" }, \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users/{user-id}/relationship : Modify the relationship between the current user and the target user.
     * Modify the relationship between the current user and the target user.
     *
     * @param userId The ID of the target user. (required)
     * @param action Type of action to apply for relationship with the user. (required)
     * @return Relationship information. (status code 200)
     */
    @Operation(
        operationId = "usersUserIdRelationshipPost",
        summary = "Modify the relationship between the current user and the target user.",
        description = "Modify the relationship between the current user and the target user.",
        tags = { "relationships" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Relationship information.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RelationshipPostResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "instagram_auth", scopes={ "relationships" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{user-id}/relationship",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RelationshipPostResponse> usersUserIdRelationshipPost(
        @Parameter(name = "user-id", description = "The ID of the target user.", required = true, in = ParameterIn.PATH) @PathVariable("user-id") String userId,
        @NotNull @Parameter(name = "action", description = "Type of action to apply for relationship with the user.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "action", required = true) String action
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"outgoing_status\" : \"none\" }, \"meta\" : { \"code\" : 3 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
