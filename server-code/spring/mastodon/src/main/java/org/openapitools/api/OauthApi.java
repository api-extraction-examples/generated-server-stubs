/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.OauthRevokePostRequest;
import org.openapitools.model.OauthTokenPost200Response;
import org.openapitools.model.OauthTokenPostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:10.316579-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "oauth", description = "the oauth API")
public interface OauthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /oauth/authorize
     * Displays an authorization form to the user. If approved, it will create and return an authorization code, then redirect to the desired redirect_uri, or show the authorization code if urn:ietf:wg:oauth:2.0:oob was requested. The authorization code can be used while requesting a token to obtain access to user-level methods.
     *
     * @param responseType Should be set equal to code. (required)
     * @param clientId Client ID, obtained during app registration. (required)
     * @param redirectUri Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the authorization code will be shown instead. Must match one of the redirect URIs declared during app registration. (required)
     * @param scope List of requested OAuth scopes, separated by spaces (or by pluses, if using query parameters). Must be a subset of scopes declared during app registration. If not provided, defaults to read. (optional)
     * @param forceLogin Added in 2.6.0. Forces the user to re-login, which is necessary for authorizing with multiple accounts from the same instance. (optional)
     * @return The authorization code will be returned as a query parameter named code. (status code 200)
     *         or If the authorization code is incorrect or has been used already, the request will fail. (status code 400)
     */
    @Operation(
        operationId = "oauthAuthorizeGet",
        description = "Displays an authorization form to the user. If approved, it will create and return an authorization code, then redirect to the desired redirect_uri, or show the authorization code if urn:ietf:wg:oauth:2.0:oob was requested. The authorization code can be used while requesting a token to obtain access to user-level methods.",
        tags = { "oauth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The authorization code will be returned as a query parameter named code."),
            @ApiResponse(responseCode = "400", description = "If the authorization code is incorrect or has been used already, the request will fail.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/oauth/authorize",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> oauthAuthorizeGet(
        @NotNull @Parameter(name = "response_type", description = "Should be set equal to code.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "response_type", required = true) String responseType,
        @NotNull @Parameter(name = "client_id", description = "Client ID, obtained during app registration.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "client_id", required = true) String clientId,
        @NotNull @Parameter(name = "redirect_uri", description = "Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the authorization code will be shown instead. Must match one of the redirect URIs declared during app registration.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "redirect_uri", required = true) String redirectUri,
        @Parameter(name = "scope", description = "List of requested OAuth scopes, separated by spaces (or by pluses, if using query parameters). Must be a subset of scopes declared during app registration. If not provided, defaults to read.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "scope", required = false) String scope,
        @Parameter(name = "force_login", description = "Added in 2.6.0. Forces the user to re-login, which is necessary for authorizing with multiple accounts from the same instance.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "force_login", required = false) Boolean forceLogin
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /oauth/revoke
     * Revoke an access token to make it no longer valid for use.
     *
     * @param oauthRevokePostRequest  (optional)
     * @return If you own the provided token, the API call will provide an empty response. This operation is idempotent, so calling this API multiple times will still return OK. (status code 200)
     *         or If you provide a token you do not own, or no token at all, the API call will return a 403 error. (status code 403)
     */
    @Operation(
        operationId = "oauthRevokePost",
        description = "Revoke an access token to make it no longer valid for use.",
        tags = { "oauth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "If you own the provided token, the API call will provide an empty response. This operation is idempotent, so calling this API multiple times will still return OK."),
            @ApiResponse(responseCode = "403", description = "If you provide a token you do not own, or no token at all, the API call will return a 403 error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/oauth/revoke",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Void> oauthRevokePost(
        @Parameter(name = "OauthRevokePostRequest", description = "") @Valid @RequestBody(required = false) OauthRevokePostRequest oauthRevokePostRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /oauth/token
     * Returns an access token, to be used during API calls that are not public.
     *
     * @param oauthTokenPostRequest  (optional)
     * @return Store this access_token for later use with auth-required methods. The token should be passed as an HTTP Authorization header when making API calls, with the value Bearer access_token (status code 200)
     *         or If you try to request a scope that was not included when registering the app, the request will fail. (status code 400)
     *         or If client_id and client_secret do not match or are invalid, the request will fail. (status code 401)
     */
    @Operation(
        operationId = "oauthTokenPost",
        description = "Returns an access token, to be used during API calls that are not public.",
        tags = { "oauth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Store this access_token for later use with auth-required methods. The token should be passed as an HTTP Authorization header when making API calls, with the value Bearer access_token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OauthTokenPost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "If you try to request a scope that was not included when registering the app, the request will fail.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "If client_id and client_secret do not match or are invalid, the request will fail.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/oauth/token",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<OauthTokenPost200Response> oauthTokenPost(
        @Parameter(name = "OauthTokenPostRequest", description = "") @Valid @RequestBody(required = false) OauthTokenPostRequest oauthTokenPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"access_token\" : \"ZA-Yj3aBD8U8Cm7lKUp-lm9O9BmDgdhHzDeqsY8tlL0\", \"scope\" : \"read write follow push\", \"created_at\" : 1573979017, \"token_type\" : \"Bearer\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
