/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Account;
import org.openapitools.model.Activity;
import org.openapitools.model.AdminAccount;
import org.openapitools.model.AdminReport;
import org.openapitools.model.Announcement;
import org.openapitools.model.ApiV1AccountsIdFollowPostRequest;
import org.openapitools.model.ApiV1AccountsIdMutePostRequest;
import org.openapitools.model.ApiV1AccountsIdNotePostRequest;
import org.openapitools.model.ApiV1AccountsPostRequest;
import org.openapitools.model.ApiV1AccountsUpdateCredentialsPatchRequest;
import org.openapitools.model.ApiV1AdminAccountsIdActionPostRequest;
import org.openapitools.model.ApiV1AppsPost200Response;
import org.openapitools.model.ApiV1AppsPostRequest;
import org.openapitools.model.ApiV1DomainBlocksPostRequest;
import org.openapitools.model.ApiV1FeaturedTagsPostRequest;
import org.openapitools.model.ApiV1FiltersPostRequest;
import org.openapitools.model.ApiV1ListsIdAccountsPostRequest;
import org.openapitools.model.ApiV1ListsPostRequest;
import org.openapitools.model.ApiV1ListsPutRequest;
import org.openapitools.model.ApiV1MediaPostRequest;
import org.openapitools.model.ApiV1PollsIdPostRequest;
import org.openapitools.model.ApiV1PushSubscriptionPostRequest;
import org.openapitools.model.ApiV1PushSubscriptionPutRequest;
import org.openapitools.model.ApiV1ReportsPostRequest;
import org.openapitools.model.ApiV1ScheduledStatusesIdPutRequest;
import org.openapitools.model.ApiV1StatusesIdReblogPostRequest;
import org.openapitools.model.ApiV1StatusesPost200Response;
import org.openapitools.model.ApiV1StatusesPostRequestInner;
import org.openapitools.model.ApiV2SearchGet200Response;
import org.openapitools.model.Application;
import org.openapitools.model.Attachment;
import org.openapitools.model.Card;
import org.openapitools.model.Context;
import org.openapitools.model.Conversation;
import org.openapitools.model.Emoji;
import org.openapitools.model.Error;
import org.openapitools.model.FeaturedTag;
import org.openapitools.model.Filter;
import org.openapitools.model.IdentityProof;
import org.openapitools.model.Instance;
import org.openapitools.model.ModelList;
import org.openapitools.model.Notification;
import org.openapitools.model.Poll;
import org.openapitools.model.Preferences;
import org.openapitools.model.PushSubscription;
import org.openapitools.model.Relationship;
import org.openapitools.model.Report;
import org.openapitools.model.ScheduledStatus;
import org.openapitools.model.Status;
import org.openapitools.model.Tag;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:10.316579-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/oembed
     * OEmbed as JSON
     *
     * @param url URL of a status (optional)
     * @param maxwidth width of the iframe. Defaults to 400 (optional, default to 400)
     * @param maxheight height of the iframe. Defaults to null (optional)
     * @return Success (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiOembedGet",
        description = "OEmbed as JSON",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Card.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/oembed",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Card> apiOembedGet(
        @Parameter(name = "url", description = "URL of a status", in = ParameterIn.QUERY) @Valid @RequestParam(value = "url", required = false) String url,
        @Parameter(name = "maxwidth", description = "width of the iframe. Defaults to 400", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxwidth", required = false, defaultValue = "400") Integer maxwidth,
        @Parameter(name = "maxheight", description = "height of the iframe. Defaults to null", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxheight", required = false) Integer maxheight
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/proofs
     * View identity proof
     *
     * @param provider The identity provider to be looked up. Currently only supports keybase (case-sensitive) (optional)
     * @param username The username on the selected identity provider (optional)
     * @return Success (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiProofsGet",
        description = "View identity proof",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IdentityProof.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/proofs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IdentityProof> apiProofsGet(
        @Parameter(name = "provider", description = "The identity provider to be looked up. Currently only supports keybase (case-sensitive)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "provider", required = false) String provider,
        @Parameter(name = "username", description = "The username on the selected identity provider", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : \"updated_at\", \"profile_url\" : \"profile_url\", \"provider\" : \"provider\", \"provider_username\" : \"provider_username\", \"proof_url\" : \"proof_url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/accounts/{id}/block
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     *
     * @param id The id of the account in the database (required)
     * @return Successfully blocked, or account was already blocked (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1AccountsIdBlockPost",
        description = "Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully blocked, or account was already blocked", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/accounts/{id}/block",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Relationship> apiV1AccountsIdBlockPost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/accounts/{id}/featured_tags
     * Tags featured by this account.
     *
     * @param id The id of the account in the database (required)
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user (status code 401)
     */
    @Operation(
        operationId = "apiV1AccountsIdFeaturedTagsGet",
        description = "Tags featured by this account.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FeaturedTag.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/{id}/featured_tags",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FeaturedTag>> apiV1AccountsIdFeaturedTagsGet(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"url\" : \"url\" }, { \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/accounts/{id}/follow
     * Follow the given account. Can also be used to update whether to show reblogs or enable notifications.
     *
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdFollowPostRequest  (optional)
     * @return Successfully followed, or account was already followed (status code 200)
     *         or Trying to follow someone that you block or that blocks you (status code 403)
     */
    @Operation(
        operationId = "apiV1AccountsIdFollowPost",
        description = "Follow the given account. Can also be used to update whether to show reblogs or enable notifications.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully followed, or account was already followed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "403", description = "Trying to follow someone that you block or that blocks you", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/accounts/{id}/follow",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Relationship> apiV1AccountsIdFollowPost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApiV1AccountsIdFollowPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1AccountsIdFollowPostRequest apiV1AccountsIdFollowPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/accounts/{id}/followers
     * Accounts which follow the given account, if network is not hidden by the account owner.
     *
     * @param id The id of the account in the database (required)
     * @param maxId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param sinceId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user (status code 401)
     *         or Account is deleted or does not exist (status code 404)
     *         or Account is suspended (status code 410)
     */
    @Operation(
        operationId = "apiV1AccountsIdFollowersGet",
        description = "Accounts which follow the given account, if network is not hidden by the account owner.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Account is deleted or does not exist", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "410", description = "Account is suspended")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/{id}/followers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> apiV1AccountsIdFollowersGet(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "max_id", description = "Internal parameter. Use HTTP `Link` header for pagination.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Internal parameter. Use HTTP `Link` header for pagination.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId,
        @Parameter(name = "limit", description = "Maximum number of results to return. Defaults to 40.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "40") Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/accounts/{id}/following
     * Accounts which the given account is following, if network is not hidden by the account owner.
     *
     * @param id The id of the account in the database (required)
     * @param maxId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param sinceId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user (status code 401)
     *         or Account is deleted or does not exist (status code 404)
     *         or Account is suspended (status code 410)
     */
    @Operation(
        operationId = "apiV1AccountsIdFollowingGet",
        description = "Accounts which the given account is following, if network is not hidden by the account owner.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Account is deleted or does not exist", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "410", description = "Account is suspended")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/{id}/following",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> apiV1AccountsIdFollowingGet(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "max_id", description = "Internal parameter. Use HTTP `Link` header for pagination.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Internal parameter. Use HTTP `Link` header for pagination.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId,
        @Parameter(name = "limit", description = "Maximum number of results to return. Defaults to 40.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "40") Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/accounts/{id}
     *
     * @param id The id of the account in the database (required)
     * @return Account record will be returned. Note that &#x60;acct&#x60; of local users does not include the domain name. (status code 200)
     *         or If the instance is in whitelist mode and the Authorization header is missing or invalid (status code 401)
     *         or Account does not exist (status code 404)
     *         or Account is suspended (status code 410)
     */
    @Operation(
        operationId = "apiV1AccountsIdGet",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Account record will be returned. Note that `acct` of local users does not include the domain name.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            }),
            @ApiResponse(responseCode = "401", description = "If the instance is in whitelist mode and the Authorization header is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Account does not exist", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "410", description = "Account is suspended")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Account> apiV1AccountsIdGet(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/accounts/{id}/identity_proofs
     * Array of IdentityProof
     *
     * @param id The id of the account in the database (required)
     * @return Success (status code 200)
     *         or Account is deleted or does not exist (status code 404)
     *         or Account with given id is suspended (status code 410)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "apiV1AccountsIdIdentityProofsGet",
        description = "Array of IdentityProof",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IdentityProof.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Account is deleted or does not exist", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "410", description = "Account with given id is suspended"),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/{id}/identity_proofs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<IdentityProof>> apiV1AccountsIdIdentityProofsGet(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"updated_at\" : \"updated_at\", \"profile_url\" : \"profile_url\", \"provider\" : \"provider\", \"provider_username\" : \"provider_username\", \"proof_url\" : \"proof_url\" }, { \"updated_at\" : \"updated_at\", \"profile_url\" : \"profile_url\", \"provider\" : \"provider\", \"provider_username\" : \"provider_username\", \"proof_url\" : \"proof_url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/accounts/{id}/lists
     * User lists that you have added this account to.
     *
     * @param id The id of the account in the database (required)
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user (status code 401)
     *         or Account is deleted or does not exist (status code 404)
     *         or Account is suspended (status code 410)
     */
    @Operation(
        operationId = "apiV1AccountsIdListsGet",
        description = "User lists that you have added this account to.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ModelList.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Account is deleted or does not exist", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "410", description = "Account is suspended")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/{id}/lists",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ModelList>> apiV1AccountsIdListsGet(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"replies_policy\" : \"followed\", \"id\" : \"id\", \"title\" : \"title\" }, { \"replies_policy\" : \"followed\", \"id\" : \"id\", \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/accounts/{id}/mute
     * Mute the given account. Clients should filter statuses and notifications from this account, if received (e.g. due to a boost in the Home timeline).
     *
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdMutePostRequest  (optional)
     * @return Successfully muted, or account was already muted. Note that you can call this API method again with notifications&#x3D;false to update the relationship so that only statuses are muted. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1AccountsIdMutePost",
        description = "Mute the given account. Clients should filter statuses and notifications from this account, if received (e.g. due to a boost in the Home timeline).",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully muted, or account was already muted. Note that you can call this API method again with notifications=false to update the relationship so that only statuses are muted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/accounts/{id}/mute",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Relationship> apiV1AccountsIdMutePost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApiV1AccountsIdMutePostRequest", description = "") @Valid @RequestBody(required = false) ApiV1AccountsIdMutePostRequest apiV1AccountsIdMutePostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/accounts/{id}/note
     * Sets a private note on a user.
     *
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdNotePostRequest  (optional)
     * @return Successfully unmuted, or account was already unmuted. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "apiV1AccountsIdNotePost",
        description = "Sets a private note on a user.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully unmuted, or account was already unmuted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/accounts/{id}/note",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Relationship> apiV1AccountsIdNotePost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApiV1AccountsIdNotePostRequest", description = "") @Valid @RequestBody(required = false) ApiV1AccountsIdNotePostRequest apiV1AccountsIdNotePostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/accounts/{id}/pin
     * Add the given account to the user&#39;s featured profiles. (Featured profiles are currently shown on the user&#39;s own public profile.)
     *
     * @param id The id of the account in the database (required)
     * @return Successfully unmuted, or account was already unmuted. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Token is not authorized with a valid user or is missing a required scope (status code 403)
     *         or You are not following this account (status code 422)
     *         or Account already endorsed (status code 500)
     */
    @Operation(
        operationId = "apiV1AccountsIdPinPost",
        description = "Add the given account to the user's featured profiles. (Featured profiles are currently shown on the user's own public profile.)",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully unmuted, or account was already unmuted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Token is not authorized with a valid user or is missing a required scope", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "You are not following this account", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Account already endorsed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/accounts/{id}/pin",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Relationship> apiV1AccountsIdPinPost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/accounts/{id}/statuses
     * Statuses posted to the given account.
     *
     * @param id The id of the account in the database (required)
     * @return Statuses posted to the given account. Public (for public statuses only), or user token + read:statuses (for private statuses the user is authorized to see) (status code 200)
     *         or Instance is in whitelist mode or running a version of Mastodon older than 2.7.0, and the Authorization header is invalid or missing (status code 401)
     *         or Account is deleted or does not exist (status code 404)
     *         or Account is suspended (status code 410)
     */
    @Operation(
        operationId = "apiV1AccountsIdStatusesGet",
        description = "Statuses posted to the given account.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Statuses posted to the given account. Public (for public statuses only), or user token + read:statuses (for private statuses the user is authorized to see)", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Status.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Instance is in whitelist mode or running a version of Mastodon older than 2.7.0, and the Authorization header is invalid or missing", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Account is deleted or does not exist", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "410", description = "Account is suspended")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/{id}/statuses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Status>> apiV1AccountsIdStatusesGet(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/accounts/{id}/unblock
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     *
     * @param id The id of the account in the database (required)
     * @return Successfully unblocked, or account was already not blocked (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1AccountsIdUnblockPost",
        description = "Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully unblocked, or account was already not blocked", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/accounts/{id}/unblock",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Relationship> apiV1AccountsIdUnblockPost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/accounts/{id}/unfollow
     * Unfollow the given account.
     *
     * @param id The id of the account in the database (required)
     * @return Successfully unfollowed, or account was already not followed (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1AccountsIdUnfollowPost",
        description = "Unfollow the given account.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully unfollowed, or account was already not followed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/accounts/{id}/unfollow",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Relationship> apiV1AccountsIdUnfollowPost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/accounts/{id}/unmute
     * Unmute the given account.
     *
     * @param id The id of the account in the database (required)
     * @return Successfully unmuted, or account was already unmuted. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1AccountsIdUnmutePost",
        description = "Unmute the given account.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully unmuted, or account was already unmuted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/accounts/{id}/unmute",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Relationship> apiV1AccountsIdUnmutePost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/accounts/{id}/unpin
     * Remove the given account from the user&#39;s featured profiles.
     *
     * @param id The id of the account in the database (required)
     * @return Successfully unmuted, or account was already unmuted. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "apiV1AccountsIdUnpinPost",
        description = "Remove the given account from the user's featured profiles.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully unmuted, or account was already unmuted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/accounts/{id}/unpin",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Relationship> apiV1AccountsIdUnpinPost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/accounts
     * Creates a user and account records. Returns an account access token for the app that initiated the request. The app should save this token for later, and should wait for the user to confirm their account by clicking a link in their email inbox.
     *
     * @param apiV1AccountsPostRequest  (optional)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "apiV1AccountsPost",
        description = "Creates a user and account records. Returns an account access token for the app that initiated the request. The app should save this token for later, and should wait for the user to confirm their account by clicking a link in their email inbox.",
        tags = { "TODOSecurity", "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/accounts",
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Void> apiV1AccountsPost(
        @Parameter(name = "ApiV1AccountsPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1AccountsPostRequest apiV1AccountsPostRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/accounts/relationships
     * Sets a private note on a user.
     *
     * @param id Array of account IDs to check (required)
     * @return Success. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "apiV1AccountsRelationshipsGet",
        description = "Sets a private note on a user.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Relationship.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/relationships",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Relationship>> apiV1AccountsRelationshipsGet(
        @NotNull @Parameter(name = "id", description = "Array of account IDs to check", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = true) List<String> id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }, { \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/accounts/search
     * Search for matching accounts by username or display name.
     *
     * @param q What to search for (required)
     * @param limit Maximum number of results. Defaults to 40. (optional, default to 40)
     * @param resolve Attempt WebFinger lookup. Defaults to false. Use this when &#x60;q&#x60; is an exact address. (optional)
     * @param following Only who the user is following. Defaults to false. (optional)
     * @return Accounts matching &#x60;q&#x60; in username or display name (status code 200)
     *         or resolve&#x3D;true, but the domain part of the user@domain address is not a currently live website (status code 503)
     */
    @Operation(
        operationId = "apiV1AccountsSearchGet",
        description = "Search for matching accounts by username or display name.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Accounts matching `q` in username or display name", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            }),
            @ApiResponse(responseCode = "503", description = "resolve=true, but the domain part of the user@domain address is not a currently live website", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> apiV1AccountsSearchGet(
        @NotNull @Parameter(name = "q", description = "What to search for", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "q", required = true) String q,
        @Parameter(name = "limit", description = "Maximum number of results. Defaults to 40.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "40") Integer limit,
        @Parameter(name = "resolve", description = "Attempt WebFinger lookup. Defaults to false. Use this when `q` is an exact address.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resolve", required = false) String resolve,
        @Parameter(name = "following", description = "Only who the user is following. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "following", required = false) Boolean following
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/accounts/update_credentials
     * Update the user&#39;s display and preferences.
     *
     * @param apiV1AccountsUpdateCredentialsPatchRequest  (optional)
     * @return You should use &#x60;accounts/verify_credentials&#x60; to first obtain plaintext representations from within the &#x60;source&#x60; parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML. (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "apiV1AccountsUpdateCredentialsPatch",
        description = "Update the user's display and preferences.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "You should use `accounts/verify_credentials` to first obtain plaintext representations from within the `source` parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/accounts/update_credentials",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Account> apiV1AccountsUpdateCredentialsPatch(
        @Parameter(name = "ApiV1AccountsUpdateCredentialsPatchRequest", description = "") @Valid @RequestBody(required = false) ApiV1AccountsUpdateCredentialsPatchRequest apiV1AccountsUpdateCredentialsPatchRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/accounts/verify_credentials
     * Test to make sure that the user token works.
     *
     * @return Note the extra &#x60;source&#x60; property, which is not visible on accounts other than your own. Also note that plain-text is used within &#x60;source&#x60; and HTML is used for their corresponding properties such as &#x60;note&#x60; and &#x60;fields&#x60;. (status code 200)
     *         or Your credential verification will fail if the token is invalid or incorrect. (status code 401)
     *         or Your user account is currently disabled, missing a confirmed email address, or pending approval. (status code 403)
     */
    @Operation(
        operationId = "apiV1AccountsVerifyCredentialsGet",
        description = "Test to make sure that the user token works.",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Note the extra `source` property, which is not visible on accounts other than your own. Also note that plain-text is used within `source` and HTML is used for their corresponding properties such as `note` and `fields`.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            }),
            @ApiResponse(responseCode = "401", description = "Your credential verification will fail if the token is invalid or incorrect.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Your user account is currently disabled, missing a confirmed email address, or pending approval.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/verify_credentials",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Account> apiV1AccountsVerifyCredentialsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/admin/accounts
     * View accounts matching certain criteria for filtering, up to 100 at a time. Pagination may be done with the HTTP Link header in the response.
     *
     * @param local Filter for local accounts? (optional)
     * @param remote Filter for remote accounts? (optional)
     * @param byDomain Filter by the given domain (optional)
     * @param active Filter for currently active accounts? (optional)
     * @param pending Filter for currently pending accounts? (optional)
     * @param disabled Filter for currently disabled accounts? (optional)
     * @param silenced Filter for currently silenced accounts? (optional)
     * @param suspended Filter for currently suspended accounts? (optional)
     * @param staff Filter for staff accounts? (optional)
     * @param username Username to search for (optional)
     * @param displayName Display name to search for (optional)
     * @param email Lookup a user with this email (optional)
     * @param ip Lookup a user with this IP (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminAccountsGet",
        description = "View accounts matching certain criteria for filtering, up to 100 at a time. Pagination may be done with the HTTP Link header in the response.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AdminAccount.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/admin/accounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AdminAccount>> apiV1AdminAccountsGet(
        @Parameter(name = "local", description = "Filter for local accounts?", in = ParameterIn.QUERY) @Valid @RequestParam(value = "local", required = false) Boolean local,
        @Parameter(name = "remote", description = "Filter for remote accounts?", in = ParameterIn.QUERY) @Valid @RequestParam(value = "remote", required = false) Boolean remote,
        @Parameter(name = "by_domain", description = "Filter by the given domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "by_domain", required = false) String byDomain,
        @Parameter(name = "active", description = "Filter for currently active accounts?", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "pending", description = "Filter for currently pending accounts?", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pending", required = false) Boolean pending,
        @Parameter(name = "disabled", description = "Filter for currently disabled accounts?", in = ParameterIn.QUERY) @Valid @RequestParam(value = "disabled", required = false) Boolean disabled,
        @Parameter(name = "silenced", description = "Filter for currently silenced accounts?", in = ParameterIn.QUERY) @Valid @RequestParam(value = "silenced", required = false) Boolean silenced,
        @Parameter(name = "suspended", description = "Filter for currently suspended accounts?", in = ParameterIn.QUERY) @Valid @RequestParam(value = "suspended", required = false) Boolean suspended,
        @Parameter(name = "staff", description = "Filter for staff accounts?", in = ParameterIn.QUERY) @Valid @RequestParam(value = "staff", required = false) Boolean staff,
        @Parameter(name = "username", description = "Username to search for", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username,
        @Parameter(name = "display_name", description = "Display name to search for", in = ParameterIn.QUERY) @Valid @RequestParam(value = "display_name", required = false) String displayName,
        @Parameter(name = "email", description = "Lookup a user with this email", in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = false) String email,
        @Parameter(name = "ip", description = "Lookup a user with this IP", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ip", required = false) String ip
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"invite_request\" : \"invite_request\", \"silenced\" : true, \"role\" : \"role\", \"ip\" : \"ip\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"locale\" : \"locale\", \"confirmed\" : true, \"suspended\" : true, \"approved\" : true, \"created_by_application_id\" : \"created_by_application_id\", \"disabled\" : true, \"id\" : \"id\", \"invited_by_account_id\" : \"invited_by_account_id\", \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"email\" : \"email\", \"username\" : \"username\" }, { \"invite_request\" : \"invite_request\", \"silenced\" : true, \"role\" : \"role\", \"ip\" : \"ip\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"locale\" : \"locale\", \"confirmed\" : true, \"suspended\" : true, \"approved\" : true, \"created_by_application_id\" : \"created_by_application_id\", \"disabled\" : true, \"id\" : \"id\", \"invited_by_account_id\" : \"invited_by_account_id\", \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"email\" : \"email\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/admin/accounts/{id}/action
     * Perform an action against an account and log this action in the moderation history.
     *
     * @param id ID of the account (required)
     * @param apiV1AdminAccountsIdActionPostRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminAccountsIdActionPost",
        description = "Perform an action against an account and log this action in the moderation history.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/admin/accounts/{id}/action",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> apiV1AdminAccountsIdActionPost(
        @Parameter(name = "id", description = "ID of the account", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApiV1AdminAccountsIdActionPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1AdminAccountsIdActionPostRequest apiV1AdminAccountsIdActionPostRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/admin/accounts/{id}/approve
     * Approve the given local account if it is currently pending approval.
     *
     * @param id ID of the account (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminAccountsIdApprovePost",
        description = "Approve the given local account if it is currently pending approval.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/admin/accounts/{id}/approve"
    )
    
    default ResponseEntity<Void> apiV1AdminAccountsIdApprovePost(
        @Parameter(name = "id", description = "ID of the account", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/admin/accounts/{id}/enable
     * Re-enable a local account whose login is currently disabled.
     *
     * @param id ID of the account (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminAccountsIdEnablePost",
        description = "Re-enable a local account whose login is currently disabled.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/admin/accounts/{id}/enable"
    )
    
    default ResponseEntity<Void> apiV1AdminAccountsIdEnablePost(
        @Parameter(name = "id", description = "ID of the account", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/admin/accounts/{id}
     * View admin-level information about the given account.
     *
     * @param id ID of the account (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminAccountsIdGet",
        description = "View admin-level information about the given account.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminAccount.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/admin/accounts/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AdminAccount> apiV1AdminAccountsIdGet(
        @Parameter(name = "id", description = "ID of the account", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invite_request\" : \"invite_request\", \"silenced\" : true, \"role\" : \"role\", \"ip\" : \"ip\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"locale\" : \"locale\", \"confirmed\" : true, \"suspended\" : true, \"approved\" : true, \"created_by_application_id\" : \"created_by_application_id\", \"disabled\" : true, \"id\" : \"id\", \"invited_by_account_id\" : \"invited_by_account_id\", \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/admin/accounts/{id}/reject
     * Reject the given local account if it is currently pending approval.
     *
     * @param id ID of the account (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminAccountsIdRejectPost",
        description = "Reject the given local account if it is currently pending approval.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/admin/accounts/{id}/reject"
    )
    
    default ResponseEntity<Void> apiV1AdminAccountsIdRejectPost(
        @Parameter(name = "id", description = "ID of the account", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/admin/accounts/{id}/unsilence
     * Unsilence a currently silenced account.
     *
     * @param id ID of the account (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminAccountsIdUnsilencePost",
        description = "Unsilence a currently silenced account.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/admin/accounts/{id}/unsilence"
    )
    
    default ResponseEntity<Void> apiV1AdminAccountsIdUnsilencePost(
        @Parameter(name = "id", description = "ID of the account", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/admin/accounts/{id}/unsuspend
     * Unsuspend a currently suspended account.
     *
     * @param id ID of the account (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminAccountsIdUnsuspendPost",
        description = "Unsuspend a currently suspended account.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/admin/accounts/{id}/unsuspend"
    )
    
    default ResponseEntity<Void> apiV1AdminAccountsIdUnsuspendPost(
        @Parameter(name = "id", description = "ID of the account", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/admin/reports
     * View all reports. Pagination may be done with HTTP Link header in the response.
     *
     * @param resolved  (optional)
     * @param accountId  (optional)
     * @param targetAccountId  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminReportsGet",
        description = "View all reports. Pagination may be done with HTTP Link header in the response.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AdminReport.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/admin/reports",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AdminReport>> apiV1AdminReportsGet(
        @Parameter(name = "resolved", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resolved", required = false) Boolean resolved,
        @Parameter(name = "account_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "account_id", required = false) String accountId,
        @Parameter(name = "target_account_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "target_account_id", required = false) String targetAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"assigned_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"action_taken\" : \"action_taken\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses\" : [ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ], \"comment\" : \"comment\", \"id\" : \"id\", \"target_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } }, { \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"assigned_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"action_taken\" : \"action_taken\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses\" : [ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ], \"comment\" : \"comment\", \"id\" : \"id\", \"target_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/admin/reports/{id}/assign_to_self
     * Claim the handling of this report to yourself.
     *
     * @param id ID of the report (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminReportsIdAssignToSelfPost",
        description = "Claim the handling of this report to yourself.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminReport.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/admin/reports/{id}/assign_to_self",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AdminReport> apiV1AdminReportsIdAssignToSelfPost(
        @Parameter(name = "id", description = "ID of the report", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"assigned_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"action_taken\" : \"action_taken\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses\" : [ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ], \"comment\" : \"comment\", \"id\" : \"id\", \"target_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/admin/reports/{id}
     * View information about the report with the given ID.
     *
     * @param id ID of the report (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminReportsIdGet",
        description = "View information about the report with the given ID.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminReport.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/admin/reports/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AdminReport> apiV1AdminReportsIdGet(
        @Parameter(name = "id", description = "ID of the report", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"assigned_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"action_taken\" : \"action_taken\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses\" : [ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ], \"comment\" : \"comment\", \"id\" : \"id\", \"target_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/admin/reports/{id}/reopen
     * Mark a report as resolved with no further action taken.
     *
     * @param id ID of the report (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminReportsIdReopenPost",
        description = "Mark a report as resolved with no further action taken.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminReport.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/admin/reports/{id}/reopen",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AdminReport> apiV1AdminReportsIdReopenPost(
        @Parameter(name = "id", description = "ID of the report", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"assigned_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"action_taken\" : \"action_taken\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses\" : [ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ], \"comment\" : \"comment\", \"id\" : \"id\", \"target_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/admin/reports/{id}/resolve
     * Mark a report as resolved with no further action taken.
     *
     * @param id ID of the report (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminReportsIdResolvePost",
        description = "Mark a report as resolved with no further action taken.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminReport.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/admin/reports/{id}/resolve",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AdminReport> apiV1AdminReportsIdResolvePost(
        @Parameter(name = "id", description = "ID of the report", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"assigned_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"action_taken\" : \"action_taken\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses\" : [ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ], \"comment\" : \"comment\", \"id\" : \"id\", \"target_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/admin/reports/{id}/unassign
     * Unassign a report so that someone else can claim it.
     *
     * @param id ID of the report (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AdminReportsIdUnassignPost",
        description = "Unassign a report so that someone else can claim it.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminReport.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/admin/reports/{id}/unassign",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AdminReport> apiV1AdminReportsIdUnassignPost(
        @Parameter(name = "id", description = "ID of the report", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"assigned_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"action_taken\" : \"action_taken\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses\" : [ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ], \"comment\" : \"comment\", \"id\" : \"id\", \"target_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/announcements
     * See all currently active announcements set by admins.
     *
     * @param withDismissed If true, response will include announcements dismissed by the user. Defaults to false. (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AnnouncementsGet",
        description = "See all currently active announcements set by admins.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Announcement.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/announcements",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Announcement>> apiV1AnnouncementsGet(
        @Parameter(name = "with_dismissed", description = "If true, response will include announcements dismissed by the user. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "with_dismissed", required = false) Boolean withDismissed
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"starts_at\" : \"starts_at\", \"read\" : true, \"updated_at\" : \"updated_at\", \"all_day\" : true, \"created_at\" : \"created_at\", \"scheduled_at\" : \"scheduled_at\", \"ends_at\" : \"ends_at\", \"id\" : \"id\", \"published\" : true, \"text\" : \"text\" }, { \"starts_at\" : \"starts_at\", \"read\" : true, \"updated_at\" : \"updated_at\", \"all_day\" : true, \"created_at\" : \"created_at\", \"scheduled_at\" : \"scheduled_at\", \"ends_at\" : \"ends_at\", \"id\" : \"id\", \"published\" : true, \"text\" : \"text\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/announcements/{id}/dismiss
     * Allows a user to mark the announcement as read.
     *
     * @param id Local ID of an announcement in the database. (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1AnnouncementsIdDismissPost",
        description = "Allows a user to mark the announcement as read.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/announcements/{id}/dismiss",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1AnnouncementsIdDismissPost(
        @Parameter(name = "id", description = "Local ID of an announcement in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/announcements/{id}/reactions/{name}
     * Undo a react emoji to an announcement.
     *
     * @param id Local ID of an announcement in the database. (required)
     * @param name Unicode emoji, or shortcode of custom emoji (required)
     * @return Success (status code 200)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "apiV1AnnouncementsIdReactionsNameDelete",
        description = "Undo a react emoji to an announcement.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/announcements/{id}/reactions/{name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1AnnouncementsIdReactionsNameDelete(
        @Parameter(name = "id", description = "Local ID of an announcement in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "name", description = "Unicode emoji, or shortcode of custom emoji", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/announcements/{id}/reactions/{name}
     * Allows a user to mark the announcement as read.
     *
     * @param id Local ID of an announcement in the database. (required)
     * @param name Unicode emoji, or shortcode of custom emoji (required)
     * @return Success (status code 200)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "apiV1AnnouncementsIdReactionsNamePut",
        description = "Allows a user to mark the announcement as read.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/announcements/{id}/reactions/{name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1AnnouncementsIdReactionsNamePut(
        @Parameter(name = "id", description = "Local ID of an announcement in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "name", description = "Unicode emoji, or shortcode of custom emoji", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/apps
     * Create a new application to obtain OAuth2 credentials.
     *
     * @param apiV1AppsPostRequest  (optional)
     * @return Success (status code 200)
     *         or If a required parameter is missing or improperly formatted, the request will fail. (status code 422)
     */
    @Operation(
        operationId = "apiV1AppsPost",
        description = "Create a new application to obtain OAuth2 credentials.",
        tags = { "apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiV1AppsPost200Response.class))
            }),
            @ApiResponse(responseCode = "422", description = "If a required parameter is missing or improperly formatted, the request will fail.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/apps",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<ApiV1AppsPost200Response> apiV1AppsPost(
        @Parameter(name = "ApiV1AppsPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1AppsPostRequest apiV1AppsPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"id\" : \"id\", \"redirect_uri\" : \"redirect_uri\", \"client_id\" : \"client_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/apps/verify_credentials
     * Confirm that the app&#39;s OAuth2 credentials work.
     *
     * @return If the Authorization header was provided with a valid token, you should see your app returned as an Application entity. (status code 200)
     *         or If the Authorization header contains an invalid token, is malformed, or is not present, an error will be returned indicating an authorization failure. (status code 401)
     */
    @Operation(
        operationId = "apiV1AppsVerifyCredentialsGet",
        description = "Confirm that the app's OAuth2 credentials work.",
        tags = { "apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "If the Authorization header was provided with a valid token, you should see your app returned as an Application entity.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Application.class))
            }),
            @ApiResponse(responseCode = "401", description = "If the Authorization header contains an invalid token, is malformed, or is not present, an error will be returned indicating an authorization failure.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/apps/verify_credentials",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Application> apiV1AppsVerifyCredentialsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/blocks
     * Get blocked users.
     *
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @return success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1BlocksGet",
        description = "Get blocked users.",
        responses = {
            @ApiResponse(responseCode = "200", description = "success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/blocks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> apiV1BlocksGet(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "max_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/bookmarks
     * Statuses the user has bookmarked.
     *
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param minId  (optional)
     * @return success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1BookmarksGet",
        description = "Statuses the user has bookmarked.",
        responses = {
            @ApiResponse(responseCode = "200", description = "success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Status.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/bookmarks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Status>> apiV1BookmarksGet(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "max_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId,
        @Parameter(name = "min_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/conversations
     * Show conversation.
     *
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return Success. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1ConversationsGet",
        description = "Show conversation.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Conversation.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/conversations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Conversation>> apiV1ConversationsGet(
        @Parameter(name = "limit", description = "Max number of results to return. Defaults to 20.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "max_id", description = "Return results older than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Return results newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId,
        @Parameter(name = "min_id", description = "Return results immediately newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"unread\" : true, \"last_status\" : { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, \"accounts\" : [ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ], \"id\" : \"id\" }, { \"unread\" : true, \"last_status\" : { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, \"accounts\" : [ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ], \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/conversations/{id}
     * Remove converstation
     *
     * @param id ID of the conversation in the database (required)
     * @return Success. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1ConversationsIdDelete",
        description = "Remove converstation",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/conversations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1ConversationsIdDelete(
        @Parameter(name = "id", description = "ID of the conversation in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/conversations/{id}/read
     * Remove converstation
     *
     * @param id ID of the conversation in the database (required)
     * @return The value of unread has been changed to false.. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1ConversationsIdReadPost",
        description = "Remove converstation",
        responses = {
            @ApiResponse(responseCode = "200", description = "The value of unread has been changed to false..", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Conversation.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/conversations/{id}/read",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Conversation> apiV1ConversationsIdReadPost(
        @Parameter(name = "id", description = "ID of the conversation in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unread\" : true, \"last_status\" : { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, \"accounts\" : [ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ], \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/custom_emojis
     * Returns custom emojis that are available on the server.
     *
     * @return List of Emojis (status code 200)
     */
    @Operation(
        operationId = "apiV1CustomEmojisGet",
        description = "Returns custom emojis that are available on the server.",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Emojis", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Emoji.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/custom_emojis",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Emoji>> apiV1CustomEmojisGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/directory
     * List accounts visible in the directory.
     *
     * @param limit How many accounts to load. Default 40. (optional, default to 40)
     * @param offset How many accounts to skip before returning results. Default 0. (optional, default to 0)
     * @param order the &#x60;active&#x60; to sort by most recently posted statuses (default) or &#x60;new&#x60; to sort by most recently created profiles. (optional, default to active)
     * @param local Only return local accounts. (optional)
     * @return List of accounts (status code 200)
     */
    @Operation(
        operationId = "apiV1DirectoryGet",
        description = "List accounts visible in the directory.",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of accounts", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/directory",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> apiV1DirectoryGet(
        @Parameter(name = "limit", description = "How many accounts to load. Default 40.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "40") Integer limit,
        @Parameter(name = "offset", description = "How many accounts to skip before returning results. Default 0.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "order", description = "the `active` to sort by most recently posted statuses (default) or `new` to sort by most recently created profiles.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order", required = false, defaultValue = "active") String order,
        @Parameter(name = "local", description = "Only return local accounts.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "local", required = false) Boolean local
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/domain_blocks
     * Remove a domain block, if it exists in the user&#39;s array of blocked domains.
     *
     * @param domain Domain to unblock. (required)
     * @return success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or If &#x60;domain&#x60; is not provided or contains spaces, the request will fail. (status code 422)
     */
    @Operation(
        operationId = "apiV1DomainBlocksDelete",
        description = "Remove a domain block, if it exists in the user's array of blocked domains.",
        responses = {
            @ApiResponse(responseCode = "200", description = "success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "If `domain` is not provided or contains spaces, the request will fail.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/domain_blocks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1DomainBlocksDelete(
        @NotNull @Parameter(name = "domain", description = "Domain to unblock.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "domain", required = true) String domain
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/domain_blocks
     * View domains the user has blocked.
     *
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @return success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1DomainBlocksGet",
        description = "View domains the user has blocked.",
        responses = {
            @ApiResponse(responseCode = "200", description = "success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/domain_blocks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<String>> apiV1DomainBlocksGet(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "max_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/domain_blocks
     * \&quot;Block a domain to: - hide all public posts from it - hide all notifications from it - remove all followers from it - prevent following new users from it (but does not remove existing follows)\&quot; 
     *
     * @param apiV1DomainBlocksPostRequest  (optional)
     * @return success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or If &#x60;domain&#x60; is not provided or contains spaces, the request will fail. (status code 422)
     */
    @Operation(
        operationId = "apiV1DomainBlocksPost",
        description = "\"Block a domain to: - hide all public posts from it - hide all notifications from it - remove all followers from it - prevent following new users from it (but does not remove existing follows)\" ",
        responses = {
            @ApiResponse(responseCode = "200", description = "success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "If `domain` is not provided or contains spaces, the request will fail.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/domain_blocks",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Object> apiV1DomainBlocksPost(
        @Parameter(name = "ApiV1DomainBlocksPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1DomainBlocksPostRequest apiV1DomainBlocksPostRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/endorsements
     * Accounts that the user is currently featuring on their profile.
     *
     * @param limit Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header. (optional, default to 40)
     * @param maxId Internal parameter. Use HTTP Link header from response for pagination (optional)
     * @param sinceId Internal parameter. Use HTTP Link header from response for pagination. (optional)
     * @return Success. Because endorsement ids are private, you must parse the HTTP Link header to find next and previous pages. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1EndorsementsGet",
        description = "Accounts that the user is currently featuring on their profile.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success. Because endorsement ids are private, you must parse the HTTP Link header to find next and previous pages.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/endorsements",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> apiV1EndorsementsGet(
        @Parameter(name = "limit", description = "Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "40") Integer limit,
        @Parameter(name = "max_id", description = "Internal parameter. Use HTTP Link header from response for pagination", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Internal parameter. Use HTTP Link header from response for pagination.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/favourites
     * Statuses the user has favourited.
     *
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param minId  (optional)
     * @return success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1FavouritesGet",
        description = "Statuses the user has favourited.",
        responses = {
            @ApiResponse(responseCode = "200", description = "success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Status.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/favourites",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Status>> apiV1FavouritesGet(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) String limit,
        @Parameter(name = "max_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "min_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/featured_tags
     * View your featured tags.
     *
     * @return Success. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1FeaturedTagsGet",
        description = "View your featured tags.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FeaturedTag.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/featured_tags",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FeaturedTag>> apiV1FeaturedTagsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"url\" : \"url\" }, { \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/featured_tags/{id}
     * Unfeature a tag
     *
     * @param id The id of the FeaturedTag to be unfeatured. (required)
     * @return An empty object will be returned if the featured tag was successfully deleted. (status code 200)
     *         or If the ID does not exist or is not owned by you (status code 404)
     */
    @Operation(
        operationId = "apiV1FeaturedTagsIdDelete",
        description = "Unfeature a tag",
        responses = {
            @ApiResponse(responseCode = "200", description = "An empty object will be returned if the featured tag was successfully deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "If the ID does not exist or is not owned by you", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/featured_tags/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1FeaturedTagsIdDelete(
        @Parameter(name = "id", description = "The id of the FeaturedTag to be unfeatured.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/featured_tags
     * Create a feature a tag.
     *
     * @param apiV1FeaturedTagsPostRequest  (optional)
     * @return Success. (status code 200)
     *         or If name is not a valid hashtag, e.g. contains illegal characters or only numbers (status code 422)
     */
    @Operation(
        operationId = "apiV1FeaturedTagsPost",
        description = "Create a feature a tag.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeaturedTag.class))
            }),
            @ApiResponse(responseCode = "422", description = "If name is not a valid hashtag, e.g. contains illegal characters or only numbers", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/featured_tags",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FeaturedTag> apiV1FeaturedTagsPost(
        @Parameter(name = "ApiV1FeaturedTagsPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1FeaturedTagsPostRequest apiV1FeaturedTagsPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/featured_tags/suggestions
     * Shows your 10 most-used tags, with usage history for the past week.
     *
     * @return Success. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1FeaturedTagsSuggestionsGet",
        description = "Shows your 10 most-used tags, with usage history for the past week.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FeaturedTag.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/featured_tags/suggestions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FeaturedTag>> apiV1FeaturedTagsSuggestionsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"url\" : \"url\" }, { \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/filters
     *
     * @return Excerpts of various filters in different contexts. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1FiltersGet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Excerpts of various filters in different contexts.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Filter.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/filters",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Filter>> apiV1FiltersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"whole_word\" : true, \"expires_at\" : \"expires_at\", \"phrase\" : \"phrase\", \"context\" : [ \"home\", \"home\" ], \"irreversible\" : true, \"id\" : \"id\" }, { \"whole_word\" : true, \"expires_at\" : \"expires_at\", \"phrase\" : \"phrase\", \"context\" : [ \"home\", \"home\" ], \"irreversible\" : true, \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/filters/{id}
     * Delete a filter.
     *
     * @param id The id of the account in the database (required)
     * @return The filter has been deleted successfully, so an empty object will be returned. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Filter ID does not exist, or is not owned by you (status code 404)
     */
    @Operation(
        operationId = "apiV1FiltersIdDelete",
        description = "Delete a filter.",
        responses = {
            @ApiResponse(responseCode = "200", description = "The filter has been deleted successfully, so an empty object will be returned."),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Filter ID does not exist, or is not owned by you", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/filters/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> apiV1FiltersIdDelete(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/filters/{id}
     * Get one filter.
     *
     * @param id The id of the account in the database (required)
     * @return Filter returned successfully. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Filter ID does not exist, or is not owned by you (status code 404)
     */
    @Operation(
        operationId = "apiV1FiltersIdGet",
        description = "Get one filter.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Filter returned successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Filter.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Filter ID does not exist, or is not owned by you", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/filters/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Filter> apiV1FiltersIdGet(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"whole_word\" : true, \"expires_at\" : \"expires_at\", \"phrase\" : \"phrase\", \"context\" : [ \"home\", \"home\" ], \"irreversible\" : true, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/filters/{id}
     * Update a filter.
     *
     * @param id The id of the account in the database (required)
     * @param apiV1FiltersPostRequest  (optional)
     * @return Filter updated successfully. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Filter ID does not exist, or is not owned by you (status code 404)
     *         or If phrase or context are not provided properly (status code 422)
     */
    @Operation(
        operationId = "apiV1FiltersIdPut",
        description = "Update a filter.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Filter updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Filter.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Filter ID does not exist, or is not owned by you", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "If phrase or context are not provided properly", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/filters/{id}",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Filter> apiV1FiltersIdPut(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApiV1FiltersPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1FiltersPostRequest apiV1FiltersPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"whole_word\" : true, \"expires_at\" : \"expires_at\", \"phrase\" : \"phrase\", \"context\" : [ \"home\", \"home\" ], \"irreversible\" : true, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/filters
     *
     * @param apiV1FiltersPostRequest  (optional)
     * @return The newly-created filter will be returned. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or If phrase or context are not provided properly (status code 422)
     */
    @Operation(
        operationId = "apiV1FiltersPost",
        responses = {
            @ApiResponse(responseCode = "200", description = "The newly-created filter will be returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Filter.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "If phrase or context are not provided properly", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/filters",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Filter> apiV1FiltersPost(
        @Parameter(name = "ApiV1FiltersPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1FiltersPostRequest apiV1FiltersPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"whole_word\" : true, \"expires_at\" : \"expires_at\", \"phrase\" : \"phrase\", \"context\" : [ \"home\", \"home\" ], \"irreversible\" : true, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/follow_requests
     * Pending Follows
     *
     * @param limit Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header. (optional, default to 40)
     * @return Accounts that are requesting a follow. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1FollowRequestsGet",
        description = "Pending Follows",
        responses = {
            @ApiResponse(responseCode = "200", description = "Accounts that are requesting a follow.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/follow_requests",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> apiV1FollowRequestsGet(
        @Parameter(name = "limit", description = "Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "40") Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/follow_requests/{id}/authorize
     * Accept Follow
     *
     * @param id The id of the account in the database (required)
     * @return Your Relationship with this account should be updated so that you are followed_by this account. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or No pending follow request from that user ID (status code 404)
     */
    @Operation(
        operationId = "apiV1FollowRequestsIdAuthorizePost",
        description = "Accept Follow",
        responses = {
            @ApiResponse(responseCode = "200", description = "Your Relationship with this account should be updated so that you are followed_by this account.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "No pending follow request from that user ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/follow_requests/{id}/authorize",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Relationship> apiV1FollowRequestsIdAuthorizePost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/follow_requests/{id}/reject
     * Accept Follow
     *
     * @param id The id of the account in the database (required)
     * @return Your Relationship with this Account should be unchanged. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or No pending follow request from that user ID (status code 404)
     */
    @Operation(
        operationId = "apiV1FollowRequestsIdRejectPost",
        description = "Accept Follow",
        responses = {
            @ApiResponse(responseCode = "200", description = "Your Relationship with this Account should be unchanged.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Relationship.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "No pending follow request from that user ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/follow_requests/{id}/reject",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Relationship> apiV1FollowRequestsIdRejectPost(
        @Parameter(name = "id", description = "The id of the account in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"note\", \"notifying\" : true, \"domain_blocking\" : true, \"endorsed\" : true, \"followed_by\" : true, \"muting\" : true, \"requested\" : true, \"blocked_by\" : true, \"blocking\" : true, \"following\" : true, \"muting_notifications\" : true, \"id\" : \"id\", \"showing_reblogs\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/instance/activity
     * Instance activity over the last 3 months, binned weekly.
     *
     * @return Domains that this instance is aware of. (status code 200)
     */
    @Operation(
        operationId = "apiV1InstanceActivityGet",
        description = "Instance activity over the last 3 months, binned weekly.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Domains that this instance is aware of.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Activity.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/instance/activity",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Activity>> apiV1InstanceActivityGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"registrations\" : \"registrations\", \"week\" : \"week\", \"statuses\" : \"statuses\", \"logins\" : \"logins\" }, { \"registrations\" : \"registrations\", \"week\" : \"week\", \"statuses\" : \"statuses\", \"logins\" : \"logins\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/instance
     * Information about the server.
     *
     * @return Result (status code 200)
     */
    @Operation(
        operationId = "apiV1InstanceGet",
        description = "Information about the server.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Instance.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/instance",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Instance> apiV1InstanceGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"short_description\" : \"short_description\", \"thumbnail\" : \"thumbnail\", \"registrations\" : true, \"languages\" : [ \"languages\", \"languages\" ], \"approval_required\" : true, \"invites_enabled\" : true, \"description\" : \"description\", \"contact_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"title\" : \"title\", \"uri\" : \"uri\", \"version\" : \"version\", \"urls\" : \"{}\", \"stats\" : \"{}\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/instance/peers
     * Information about the server.
     *
     * @return Domains that this instance is aware of. (status code 200)
     */
    @Operation(
        operationId = "apiV1InstancePeersGet",
        description = "Information about the server.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Domains that this instance is aware of.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/instance/peers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<String>> apiV1InstancePeersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/lists
     * Delete a list
     *
     * @return A list was deleted successfully (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "apiV1ListsDelete",
        description = "Delete a list",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list was deleted successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/lists",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1ListsDelete(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/lists
     * Fetch all lists that the user owns.
     *
     * @return Use id as a parameter for related API calls. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1ListsGet",
        description = "Fetch all lists that the user owns.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Use id as a parameter for related API calls.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ModelList.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/lists",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ModelList>> apiV1ListsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"replies_policy\" : \"followed\", \"id\" : \"id\", \"title\" : \"title\" }, { \"replies_policy\" : \"followed\", \"id\" : \"id\", \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/lists/{id}/accounts
     * Remove accounts from the given list.
     *
     * @param id ID of the list in the database (required)
     * @param accountIds Array of account IDs to add to the list. (required)
     * @return Account was successfully removed from the list, or it was already not in the list. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Not Found (status code 404)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "apiV1ListsIdAccountsDelete",
        description = "Remove accounts from the given list.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Account was successfully removed from the list, or it was already not in the list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/lists/{id}/accounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1ListsIdAccountsDelete(
        @Parameter(name = "id", description = "ID of the list in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @NotNull @Parameter(name = "account_ids", description = "Array of account IDs to add to the list.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "account_ids", required = true) List<String> accountIds
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/lists/{id}/accounts
     * View accounts in List
     *
     * @param id ID of the list in the database (required)
     * @param limit Maximum number of results. Defaults to 40. Max 40. Set to 0 in order to get all accounts without pagination. Pagination is done with the HTTP Link header. (optional, default to 40)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1ListsIdAccountsGet",
        description = "View accounts in List",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/lists/{id}/accounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> apiV1ListsIdAccountsGet(
        @Parameter(name = "id", description = "ID of the list in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "limit", description = "Maximum number of results. Defaults to 40. Max 40. Set to 0 in order to get all accounts without pagination. Pagination is done with the HTTP Link header.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "40") Integer limit,
        @Parameter(name = "max_id", description = "Return results older than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Return results newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/lists/{id}/accounts
     * Add accounts to the given list. Note that the user must be following these accounts.
     *
     * @param id ID of the list in the database (required)
     * @param apiV1ListsIdAccountsPostRequest  (optional)
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Not Found (status code 404)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "apiV1ListsIdAccountsPost",
        description = "Add accounts to the given list. Note that the user must be following these accounts.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/lists/{id}/accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1ListsIdAccountsPost(
        @Parameter(name = "id", description = "ID of the list in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApiV1ListsIdAccountsPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1ListsIdAccountsPostRequest apiV1ListsIdAccountsPostRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/lists/{id}
     * Remove converstation
     *
     * @param id ID of the list in the database (required)
     * @return The value of unread has been changed to false.. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1ListsIdGet",
        description = "Remove converstation",
        responses = {
            @ApiResponse(responseCode = "200", description = "The value of unread has been changed to false..", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/lists/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ModelList> apiV1ListsIdGet(
        @Parameter(name = "id", description = "ID of the list in the database", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"replies_policy\" : \"followed\", \"id\" : \"id\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/lists
     * Create a new list.
     *
     * @param apiV1ListsPostRequest  (optional)
     * @return A list was created successfully (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1ListsPost",
        description = "Create a new list.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list was created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/lists",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ModelList> apiV1ListsPost(
        @Parameter(name = "ApiV1ListsPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1ListsPostRequest apiV1ListsPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"replies_policy\" : \"followed\", \"id\" : \"id\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/lists
     * Change the title of a list, or which replies to show.
     *
     * @param apiV1ListsPutRequest  (optional)
     * @return A list was updated successfully (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "apiV1ListsPut",
        description = "Change the title of a list, or which replies to show.",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list was updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelList.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/lists",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ModelList> apiV1ListsPut(
        @Parameter(name = "ApiV1ListsPutRequest", description = "") @Valid @RequestBody(required = false) ApiV1ListsPutRequest apiV1ListsPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"replies_policy\" : \"followed\", \"id\" : \"id\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/markers
     * Get saved timeline position
     *
     * @param timeline Array of markers to fetch. String enum anyOf home, notifications. If not provided, an empty object will be returned. (required)
     * @return Account was successfully removed from the list, or it was already not in the list. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1MarkersGet",
        description = "Get saved timeline position",
        responses = {
            @ApiResponse(responseCode = "200", description = "Account was successfully removed from the list, or it was already not in the list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/markers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1MarkersGet(
        @NotNull @Parameter(name = "timeline", description = "Array of markers to fetch. String enum anyOf home, notifications. If not provided, an empty object will be returned.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "timeline", required = true) List<Object> timeline
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/markers
     * Get saved timeline position
     *
     * @param body  (optional)
     * @return Account was successfully removed from the list, or it was already not in the list. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Conflict, If object is stale while being updated, an error will occur. (status code 409)
     */
    @Operation(
        operationId = "apiV1MarkersPost",
        description = "Get saved timeline position",
        responses = {
            @ApiResponse(responseCode = "200", description = "Account was successfully removed from the list, or it was already not in the list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict, If object is stale while being updated, an error will occur.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/markers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1MarkersPost(
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/media/{id}
     * Get an attachement.
     *
     * @param id The id of the Attachment entity to be updated. (required)
     * @return Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly. (status code 200)
     *         or Attachment is not yet ready. (status code 206)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Attachment does not exist, is deleted, or was not created by you (status code 404)
     *         or File or file type is unsupported or invalid (status code 422)
     */
    @Operation(
        operationId = "apiV1MediaIdGet",
        description = "Get an attachement.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "206", description = "Attachment is not yet ready.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Attachment does not exist, is deleted, or was not created by you", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "File or file type is unsupported or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/media/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Attachment> apiV1MediaIdGet(
        @Parameter(name = "id", description = "The id of the Attachment entity to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/media/{id}
     * Update an Attachment, before it is attached to a status and posted.
     *
     * @param id The id of the Attachment entity to be updated. (required)
     * @param apiV1MediaPostRequest  (optional)
     * @return Attachment updated successfully. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Attachment does not exist, is deleted, or was not created by you (status code 404)
     *         or File or file type is unsupported or invalid (status code 422)
     */
    @Operation(
        operationId = "apiV1MediaIdPost",
        description = "Update an Attachment, before it is attached to a status and posted.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Attachment updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Attachment does not exist, is deleted, or was not created by you", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "File or file type is unsupported or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/media/{id}",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Attachment> apiV1MediaIdPost(
        @Parameter(name = "id", description = "The id of the Attachment entity to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApiV1MediaPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1MediaPostRequest apiV1MediaPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/media
     * Creates an attachment to be used with a new status.
     *
     * @param apiV1MediaPostRequest  (optional)
     * @return Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or File or file type is unsupported or invalid (status code 422)
     */
    @Operation(
        operationId = "apiV1MediaPost",
        description = "Creates an attachment to be used with a new status.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Attachment.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "File or file type is unsupported or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/media",
        produces = { "application/json" },
        consumes = { "application/form-data" }
    )
    
    default ResponseEntity<Attachment> apiV1MediaPost(
        @Parameter(name = "ApiV1MediaPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1MediaPostRequest apiV1MediaPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/mutes
     * Accounts the user has muted.
     *
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @return success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1MutesGet",
        description = "Accounts the user has muted.",
        responses = {
            @ApiResponse(responseCode = "200", description = "success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/mutes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> apiV1MutesGet(
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) String limit,
        @Parameter(name = "max_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/notifications/clear
     * Clear all notifications from the server.
     *
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1NotificationsClearPost",
        description = "Clear all notifications from the server.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/notifications/clear",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1NotificationsClearPost(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/notifications
     * Notifications concerning the user. This API returns Link headers containing links to the next/previous page. However, the links can also be constructed dynamically using query params and id values.
     *
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param excludeTypes Array of types to exclude (follow, favourite, reblog, mention, poll, follow_request) (optional)
     * @param accountId Return only notifications received from this account (optional)
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1NotificationsGet",
        description = "Notifications concerning the user. This API returns Link headers containing links to the next/previous page. However, the links can also be constructed dynamically using query params and id values.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Notification.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/notifications",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Notification>> apiV1NotificationsGet(
        @Parameter(name = "limit", description = "Max number of results to return. Defaults to 20.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "max_id", description = "Return results older than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Return results newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId,
        @Parameter(name = "min_id", description = "Return results immediately newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId,
        @Parameter(name = "exclude_types", description = "Array of types to exclude (follow, favourite, reblog, mention, poll, follow_request)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "exclude_types", required = false) List<String> excludeTypes,
        @Parameter(name = "account_id", description = "Return only notifications received from this account", in = ParameterIn.QUERY) @Valid @RequestParam(value = "account_id", required = false) String accountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"type\" : \"follow\", \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"status\" : { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } }, { \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"type\" : \"follow\", \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"status\" : { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/notifications/{id}/dismiss
     * Clear a single notification from the server.
     *
     * @param id ID of the notification in the database. (required)
     * @return Notification with given ID successfully dismissed (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1NotificationsIdDismissPost",
        description = "Clear a single notification from the server.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Notification with given ID successfully dismissed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Notification.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/notifications/{id}/dismiss",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Notification> apiV1NotificationsIdDismissPost(
        @Parameter(name = "id", description = "ID of the notification in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"type\" : \"follow\", \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"status\" : { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/notifications/{id}
     * View information about a notification with a given ID.
     *
     * @param id ID of the notification in the database. (required)
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1NotificationsIdGet",
        description = "View information about a notification with a given ID.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Notification.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/notifications/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Notification> apiV1NotificationsIdGet(
        @Parameter(name = "id", description = "ID of the notification in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"type\" : \"follow\", \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"status\" : { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/polls/{id}
     * View a poll.
     *
     * @param id ID of the poll in the database. (required)
     * @return Get one poll. (status code 200)
     *         or Poll does not exist, or poll&#39;s parent status is private (status code 404)
     */
    @Operation(
        operationId = "apiV1PollsIdGet",
        description = "View a poll.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get one poll.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Poll.class))
            }),
            @ApiResponse(responseCode = "404", description = "Poll does not exist, or poll's parent status is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/polls/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Poll> apiV1PollsIdGet(
        @Parameter(name = "id", description = "ID of the poll in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/polls/{id}
     * Vote on a poll.
     *
     * @param id ID of the poll in the database. (required)
     * @param apiV1PollsIdPostRequest  (optional)
     * @return Get one poll. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Poll does not exist, or poll&#39;s parent status is private. (status code 404)
     *         or Already voted or poll is expired. (status code 422)
     */
    @Operation(
        operationId = "apiV1PollsIdPost",
        description = "Vote on a poll.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get one poll.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Poll.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Poll does not exist, or poll's parent status is private.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Already voted or poll is expired.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/polls/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Poll> apiV1PollsIdPost(
        @Parameter(name = "id", description = "ID of the poll in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApiV1PollsIdPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1PollsIdPostRequest apiV1PollsIdPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/preferences
     * Shows your 10 most-used tags, with usage history for the past week.
     *
     * @return Success. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1PreferencesGet",
        description = "Shows your 10 most-used tags, with usage history for the past week.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Preferences.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/preferences",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Preferences> apiV1PreferencesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reading:expand:spoilers\" : true, \"posting:default:language\" : \"posting:default:language\", \"posting:default:sensitive\" : true, \"reading:expand:media\" : \"default\", \"posting:default:visibility\" : \"public\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/push/subscription
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     *
     * @return Updating a PushSubscription to only receive mention alerts (status code 200)
     */
    @Operation(
        operationId = "apiV1PushSubscriptionDelete",
        description = "Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updating a PushSubscription to only receive mention alerts", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/push/subscription",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1PushSubscriptionDelete(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/push/subscription
     * View the PushSubscription currently associated with this access token.
     *
     * @return Get one PushSubscription (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1PushSubscriptionGet",
        description = "View the PushSubscription currently associated with this access token.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get one PushSubscription", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PushSubscription.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/push/subscription",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PushSubscription> apiV1PushSubscriptionGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"alerts\" : \"{}\", \"endpoint\" : \"endpoint\", \"id\" : \"id\", \"server_key\" : \"server_key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/push/subscription
     * Add a Web Push API subscription to receive notifications. Each access token can have one push subscription. If you create a new subscription, the old subscription is deleted.
     *
     * @param apiV1PushSubscriptionPostRequest  (optional)
     * @return PushSubscription created (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1PushSubscriptionPost",
        description = "Add a Web Push API subscription to receive notifications. Each access token can have one push subscription. If you create a new subscription, the old subscription is deleted.",
        responses = {
            @ApiResponse(responseCode = "200", description = "PushSubscription created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PushSubscription.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/push/subscription",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PushSubscription> apiV1PushSubscriptionPost(
        @Parameter(name = "ApiV1PushSubscriptionPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1PushSubscriptionPostRequest apiV1PushSubscriptionPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"alerts\" : \"{}\", \"endpoint\" : \"endpoint\", \"id\" : \"id\", \"server_key\" : \"server_key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/push/subscription
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     *
     * @param apiV1PushSubscriptionPutRequest  (optional)
     * @return Updating a PushSubscription to only receive mention alerts (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1PushSubscriptionPut",
        description = "Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updating a PushSubscription to only receive mention alerts", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PushSubscription.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/push/subscription",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PushSubscription> apiV1PushSubscriptionPut(
        @Parameter(name = "ApiV1PushSubscriptionPutRequest", description = "") @Valid @RequestBody(required = false) ApiV1PushSubscriptionPutRequest apiV1PushSubscriptionPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"alerts\" : \"{}\", \"endpoint\" : \"endpoint\", \"id\" : \"id\", \"server_key\" : \"server_key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/reports
     * File a report.
     *
     * @param apiV1ReportsPostRequest  (optional)
     * @return Successfully reported. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1ReportsPost",
        description = "File a report.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully reported.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Report.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/reports",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Report> apiV1ReportsPost(
        @Parameter(name = "ApiV1ReportsPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1ReportsPostRequest apiV1ReportsPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"rule_ids\" : [ 0, 0 ], \"status_ids\" : [ 6, 6 ], \"action_taken\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"comment\" : \"comment\", \"action_taken_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"category\" : \"other\", \"target_account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"forwarded\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/scheduled_statuses
     * View scheduled statuses
     *
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return Get scheduled statuses. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1ScheduledStatusesGet",
        description = "View scheduled statuses",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get scheduled statuses.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ScheduledStatus.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/scheduled_statuses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ScheduledStatus>> apiV1ScheduledStatusesGet(
        @Parameter(name = "limit", description = "Max number of results to return. Defaults to 20.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "max_id", description = "Return results older than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Return results newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId,
        @Parameter(name = "min_id", description = "Return results immediately newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"params\" : { \"media_ids\" : [ \"media_ids\", \"media_ids\" ], \"visibility\" : \"visibility\", \"in_reply_to_id\" : \"in_reply_to_id\", \"spoiler_text\" : \"spoiler_text\", \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\", \"sensitive\" : true, \"text\" : \"text\", \"application_id\" : \"application_id\" } }, { \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"params\" : { \"media_ids\" : [ \"media_ids\", \"media_ids\" ], \"visibility\" : \"visibility\", \"in_reply_to_id\" : \"in_reply_to_id\", \"spoiler_text\" : \"spoiler_text\", \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\", \"sensitive\" : true, \"text\" : \"text\", \"application_id\" : \"application_id\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/scheduled_statuses/{id}
     * Cancel a scheduled status
     *
     * @param id ID of the scheduled status in the database. (required)
     * @return Success. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1ScheduledStatusesIdDelete",
        description = "Cancel a scheduled status",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/scheduled_statuses/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1ScheduledStatusesIdDelete(
        @Parameter(name = "id", description = "ID of the scheduled status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/scheduled_statuses/{id}
     * View a single scheduled status
     *
     * @param id ID of the scheduled status in the database. (required)
     * @return Success. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1ScheduledStatusesIdGet",
        description = "View a single scheduled status",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScheduledStatus.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/scheduled_statuses/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ScheduledStatus> apiV1ScheduledStatusesIdGet(
        @Parameter(name = "id", description = "ID of the scheduled status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"params\" : { \"media_ids\" : [ \"media_ids\", \"media_ids\" ], \"visibility\" : \"visibility\", \"in_reply_to_id\" : \"in_reply_to_id\", \"spoiler_text\" : \"spoiler_text\", \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\", \"sensitive\" : true, \"text\" : \"text\", \"application_id\" : \"application_id\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/scheduled_statuses/{id}
     * View a single scheduled status
     *
     * @param id ID of the scheduled status in the database. (required)
     * @param apiV1ScheduledStatusesIdPutRequest  (optional)
     * @return Success. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Not Found (status code 404)
     *         or Unprocessable Entity (status code 422)
     */
    @Operation(
        operationId = "apiV1ScheduledStatusesIdPut",
        description = "View a single scheduled status",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScheduledStatus.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/scheduled_statuses/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ScheduledStatus> apiV1ScheduledStatusesIdPut(
        @Parameter(name = "id", description = "ID of the scheduled status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApiV1ScheduledStatusesIdPutRequest", description = "") @Valid @RequestBody(required = false) ApiV1ScheduledStatusesIdPutRequest apiV1ScheduledStatusesIdPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"params\" : { \"media_ids\" : [ \"media_ids\", \"media_ids\" ], \"visibility\" : \"visibility\", \"in_reply_to_id\" : \"in_reply_to_id\", \"spoiler_text\" : \"spoiler_text\", \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\", \"sensitive\" : true, \"text\" : \"text\", \"application_id\" : \"application_id\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses/{id}/bookmark
     * Privately bookmark a status.
     *
     * @param id Local ID of a status in the database. (required)
     * @return Status bookmarked (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdBookmarkPost",
        description = "Privately bookmark a status.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status bookmarked", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses/{id}/bookmark",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdBookmarkPost(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/statuses/{id}/context
     *
     * @param id Local ID of a status in the database. (required)
     * @return Success (status code 200)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdContextGet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Context.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/statuses/{id}/context",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Context> apiV1StatusesIdContextGet(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ancestors\" : [ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ], \"descendants\" : [ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/statuses/{id}
     *
     * @param id Local ID of a status in the database. (required)
     * @return Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private. (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdDelete",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/statuses/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdDelete(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses/{id}/favourite
     * Add a status to your favourites list.
     *
     * @param id Local ID of a status in the database. (required)
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdFavouritePost",
        description = "Add a status to your favourites list.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses/{id}/favourite",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdFavouritePost(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/statuses/{id}/favourited_by
     * View who favourited a given status.
     *
     * @param id Local ID of a status in the database. (required)
     * @return Success (status code 200)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdFavouritedByGet",
        description = "View who favourited a given status.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/statuses/{id}/favourited_by",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Account> apiV1StatusesIdFavouritedByGet(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/statuses/{id}
     *
     * @param id Local ID of a status in the database. (required)
     * @return Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private. (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdGet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/statuses/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdGet(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses/{id}/mute
     * Do not receive notifications for the thread that this status is part of. Must be a thread in which you are a participant.
     *
     * @param id Local ID of a status in the database. (required)
     * @return Status&#39;s conversation muted, or was already muted (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdMutePost",
        description = "Do not receive notifications for the thread that this status is part of. Must be a thread in which you are a participant.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status's conversation muted, or was already muted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses/{id}/mute",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdMutePost(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses/{id}/pin
     * Feature one of your own public statuses at the top of your profile.
     *
     * @param id Local ID of a status in the database. (required)
     * @return Status pinned. Note the status is not a reblog and its authoring account is your own. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private (status code 404)
     *         or Status is not owned by you, or is not public. You cannot pin one of your private statuses because private statuses cannot be fetched from remote sites, and must be delivered. (status code 422)
     */
    @Operation(
        operationId = "apiV1StatusesIdPinPost",
        description = "Feature one of your own public statuses at the top of your profile.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status pinned. Note the status is not a reblog and its authoring account is your own.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "422", description = "Status is not owned by you, or is not public. You cannot pin one of your private statuses because private statuses cannot be fetched from remote sites, and must be delivered.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses/{id}/pin",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdPinPost(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses/{id}/reblog
     * Reshare a status.
     *
     * @param id Local ID of a status in the database. (required)
     * @param apiV1StatusesIdReblogPostRequest  (optional)
     * @return Status has been reblogged. Note that the top-level id has changed. The id of the boosted status is now inside the reblog property. The top-level id is the id of the reblog itself. Also note that reblogs cannot be pinned. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdReblogPost",
        description = "Reshare a status.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status has been reblogged. Note that the top-level id has changed. The id of the boosted status is now inside the reblog property. The top-level id is the id of the reblog itself. Also note that reblogs cannot be pinned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses/{id}/reblog",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdReblogPost(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ApiV1StatusesIdReblogPostRequest", description = "") @Valid @RequestBody(required = false) ApiV1StatusesIdReblogPostRequest apiV1StatusesIdReblogPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/statuses/{id}/reblogged_by
     * View who boosted a given status.
     *
     * @param id Local ID of a status in the database. (required)
     * @return Success (status code 200)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdRebloggedByGet",
        description = "View who boosted a given status.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/statuses/{id}/reblogged_by",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Account> apiV1StatusesIdRebloggedByGet(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses/{id}/unbookmark
     * Remove a status from your private bookmarks.
     *
     * @param id Local ID of a status in the database. (required)
     * @return Status unbookmarked (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdUnbookmarkPost",
        description = "Remove a status from your private bookmarks.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status unbookmarked", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses/{id}/unbookmark",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdUnbookmarkPost(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses/{id}/unfavourite
     * Remove a status from your favourites list.
     *
     * @param id Local ID of a status in the database. (required)
     * @return Success (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdUnfavouritePost",
        description = "Remove a status from your favourites list.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses/{id}/unfavourite",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdUnfavouritePost(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses/{id}/unmute
     * Status&#39;s conversation unmuted, or was already unmuted
     *
     * @param id Local ID of a status in the database. (required)
     * @return Status&#39;s conversation muted, or was already muted (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdUnmutePost",
        description = "Status's conversation unmuted, or was already unmuted",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status's conversation muted, or was already muted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses/{id}/unmute",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdUnmutePost(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses/{id}/unpin
     * Unfeature a status from the top of your profile.
     *
     * @param id Local ID of a status in the database. (required)
     * @return Status unpinned, or was already not pinned (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdUnpinPost",
        description = "Unfeature a status from the top of your profile.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status unpinned, or was already not pinned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses/{id}/unpin",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdUnpinPost(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses/{id}/unreblog
     * Undo a reshare of a status.
     *
     * @param id Local ID of a status in the database. (required)
     * @return Status no longer reblogged (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     *         or Status does not exist, is deleted, or is private (status code 404)
     */
    @Operation(
        operationId = "apiV1StatusesIdUnreblogPost",
        description = "Undo a reshare of a status.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status no longer reblogged", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Status does not exist, is deleted, or is private", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses/{id}/unreblog",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> apiV1StatusesIdUnreblogPost(
        @Parameter(name = "id", description = "Local ID of a status in the database.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/statuses
     *
     * @param idempotencyKey Prevent duplicate submissions of the same status. Idempotency keys are stored for up to 1 hour, and can be any arbitrary string. Consider using a hash or UUID generated client-side. (optional)
     * @param apiV1StatusesPostRequestInner  (optional)
     * @return Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1StatusesPost",
        responses = {
            @ApiResponse(responseCode = "200", description = "Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiV1StatusesPost200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/statuses",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ApiV1StatusesPost200Response> apiV1StatusesPost(
        @Parameter(name = "Idempotency-Key", description = "Prevent duplicate submissions of the same status. Idempotency keys are stored for up to 1 hour, and can be any arbitrary string. Consider using a hash or UUID generated client-side.", in = ParameterIn.HEADER) @RequestHeader(value = "Idempotency-Key", required = false) String idempotencyKey,
        @Parameter(name = "ApiV1StatusesPostRequestInner", description = "") @Valid @RequestBody(required = false) List<@Valid ApiV1StatusesPostRequestInner> apiV1StatusesPostRequestInner
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/suggestions
     * Accounts the user has had past positive interactions with, but is not yet following.
     *
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @return Success. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1SuggestionsGet",
        description = "Accounts the user has had past positive interactions with, but is not yet following.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/suggestions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Account> apiV1SuggestionsGet(
        @Parameter(name = "limit", description = "Maximum number of results to return. Defaults to 40.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "40") Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/suggestions/{id}
     * Delete user suggestion
     *
     * @param id id of the account in the database to be removed from suggestions (required)
     * @return Successfully removed (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1SuggestionsIdDelete",
        description = "Delete user suggestion",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully removed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/suggestions/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> apiV1SuggestionsIdDelete(
        @Parameter(name = "id", description = "id of the account in the database to be removed from suggestions", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/timelines/home
     * View statuses from followed users.
     *
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return Get statuses for home. (status code 200)
     *         or Home feed is regenerating (status code 206)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1TimelinesHomeGet",
        description = "View statuses from followed users.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get statuses for home.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Status.class)))
            }),
            @ApiResponse(responseCode = "206", description = "Home feed is regenerating"),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/timelines/home",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Status>> apiV1TimelinesHomeGet(
        @Parameter(name = "local", description = "Show only local statuses? Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "local", required = false, defaultValue = "false") Boolean local,
        @Parameter(name = "limit", description = "Max number of results to return. Defaults to 20.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "max_id", description = "Return results older than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Return results newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId,
        @Parameter(name = "min_id", description = "Return results immediately newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/timelines/list/{list_id}
     * View statuses in the given list timeline.
     *
     * @param listId Local ID of the list in the database. (required)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return Statuses in this list will be returned.. (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV1TimelinesListListIdGet",
        description = "View statuses in the given list timeline.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Statuses in this list will be returned..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Status.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/timelines/list/{list_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Status>> apiV1TimelinesListListIdGet(
        @Parameter(name = "list_id", description = "Local ID of the list in the database.", required = true, in = ParameterIn.PATH) @PathVariable("list_id") String listId,
        @Parameter(name = "limit", description = "Max number of results to return. Defaults to 20.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "max_id", description = "Return results older than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Return results newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId,
        @Parameter(name = "min_id", description = "Return results immediately newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/timelines/public
     * Public timeline
     *
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param remote Show only local statuses? Defaults to false. (optional, default to false)
     * @param onlyMedia Show only statuses with media attached? Defaults to false.. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return get statuses. (status code 200)
     */
    @Operation(
        operationId = "apiV1TimelinesPublicGet",
        description = "Public timeline",
        responses = {
            @ApiResponse(responseCode = "200", description = "get statuses.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Status.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/timelines/public",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Status>> apiV1TimelinesPublicGet(
        @Parameter(name = "local", description = "Show only local statuses? Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "local", required = false, defaultValue = "false") Boolean local,
        @Parameter(name = "remote", description = "Show only local statuses? Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "remote", required = false, defaultValue = "false") Boolean remote,
        @Parameter(name = "only_media", description = "Show only statuses with media attached? Defaults to false..", in = ParameterIn.QUERY) @Valid @RequestParam(value = "only_media", required = false, defaultValue = "false") Boolean onlyMedia,
        @Parameter(name = "limit", description = "Max number of results to return. Defaults to 20.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "max_id", description = "Return results older than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Return results newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId,
        @Parameter(name = "min_id", description = "Return results immediately newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/timelines/tag/{hashtag}
     * View public statuses containing the given hashtag.
     *
     * @param hashtag Content of a &#x60;#hashtag&#x60;&#x60;, not including &#x60;#&#x60; symbol.. (required)
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param remote Show only local statuses? Defaults to false. (optional, default to false)
     * @param onlyMedia Show only statuses with media attached? Defaults to false.. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return Get statuses. (status code 200)
     */
    @Operation(
        operationId = "apiV1TimelinesTagHashtagGet",
        description = "View public statuses containing the given hashtag.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get statuses.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Status.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/timelines/tag/{hashtag}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Status>> apiV1TimelinesTagHashtagGet(
        @Parameter(name = "hashtag", description = "Content of a `#hashtag``, not including `#` symbol..", required = true, in = ParameterIn.PATH) @PathVariable("hashtag") String hashtag,
        @Parameter(name = "local", description = "Show only local statuses? Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "local", required = false, defaultValue = "false") Boolean local,
        @Parameter(name = "remote", description = "Show only local statuses? Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "remote", required = false, defaultValue = "false") Boolean remote,
        @Parameter(name = "only_media", description = "Show only statuses with media attached? Defaults to false..", in = ParameterIn.QUERY) @Valid @RequestParam(value = "only_media", required = false, defaultValue = "false") Boolean onlyMedia,
        @Parameter(name = "limit", description = "Max number of results to return. Defaults to 20.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "max_id", description = "Return results older than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "since_id", description = "Return results newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since_id", required = false) String sinceId,
        @Parameter(name = "min_id", description = "Return results immediately newer than ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/trends
     * Tags that are being used more frequently within the past week.
     *
     * @param limit Max number of results to return. Defaults to 10. (optional, default to 10)
     * @return Domains that this instance is aware of. (status code 200)
     */
    @Operation(
        operationId = "apiV1TrendsGet",
        description = "Tags that are being used more frequently within the past week.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Domains that this instance is aware of.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Tag.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/trends",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Tag>> apiV1TrendsGet(
        @Parameter(name = "limit", description = "Max number of results to return. Defaults to 10.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v2/search
     * Search results
     *
     * @param q What to search for (required)
     * @param limit Maximum number of results. Defaults to 40. (optional, default to 20)
     * @param resolve Attempt WebFinger lookup. (optional)
     * @param following Only who the user is following. Defaults to false. (optional)
     * @param accountId If provided, statuses returned will be authored only by this account (optional)
     * @param maxId Return results older than this id (optional)
     * @param minId Return results immediately newer than this id (optional)
     * @param type Enum(accounts, hashtags, statuses) (optional)
     * @param excludeUnreviewed Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags. (optional)
     * @param offset Offset in search results. Used for pagination. Defaults to 0. (optional)
     * @return Result (status code 200)
     *         or Invalid or missing Authorization header (status code 401)
     */
    @Operation(
        operationId = "apiV2SearchGet",
        description = "Search results",
        responses = {
            @ApiResponse(responseCode = "200", description = "Result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiV2SearchGet200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing Authorization header", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v2/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ApiV2SearchGet200Response> apiV2SearchGet(
        @NotNull @Parameter(name = "q", description = "What to search for", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "q", required = true) String q,
        @Parameter(name = "limit", description = "Maximum number of results. Defaults to 40.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Parameter(name = "resolve", description = "Attempt WebFinger lookup.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resolve", required = false) String resolve,
        @Parameter(name = "following", description = "Only who the user is following. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "following", required = false) Boolean following,
        @Parameter(name = "account_id", description = "If provided, statuses returned will be authored only by this account", in = ParameterIn.QUERY) @Valid @RequestParam(value = "account_id", required = false) String accountId,
        @Parameter(name = "max_id", description = "Return results older than this id", in = ParameterIn.QUERY) @Valid @RequestParam(value = "max_id", required = false) String maxId,
        @Parameter(name = "min_id", description = "Return results immediately newer than this id", in = ParameterIn.QUERY) @Valid @RequestParam(value = "min_id", required = false) String minId,
        @Parameter(name = "type", description = "Enum(accounts, hashtags, statuses)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) String type,
        @Parameter(name = "exclude_unreviewed", description = "Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "exclude_unreviewed", required = false) Boolean excludeUnreviewed,
        @Parameter(name = "offset", description = "Offset in search results. Used for pagination. Defaults to 0.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"hashtags\" : [ { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } }, { \"pinned\" : true, \"in_reply_to_id\" : \"in_reply_to_id\", \"favourites_count\" : 0, \"media_attachments\" : [ { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" }, { \"remote_url\" : \"remote_url\", \"meta\" : \"{}\", \"preview_url\" : \"preview_url\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"unknown\", \"url\" : \"url\", \"text_url\" : \"text_url\" } ], \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"replies_count\" : 2, \"language\" : \"language\", \"poll\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"voters_count\" : 1, \"votes_count\" : 5, \"expired\" : true, \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"own_votes\" : [ 6, 6 ], \"multiple\" : true, \"options\" : [ \"\", \"\" ], \"voted\" : true, \"id\" : \"id\" }, \"in_reply_to_account_id\" : \"in_reply_to_account_id\", \"content\" : \"content\", \"spoiler_text\" : \"spoiler_text\", \"id\" : \"id\", \"reblogged\" : true, \"text\" : \"text\", \"muted\" : true, \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"reblogs_count\" : 5, \"visibility\" : \"public\", \"bookmarked\" : true, \"sensitive\" : true, \"uri\" : \"uri\", \"url\" : \"url\", \"tags\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"application\" : { \"vapid_key\" : \"vapid_key\", \"website\" : \"website\", \"name\" : \"name\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"favourited\" : true, \"mentions\" : [ { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" }, { \"id\" : \"id\", \"acct\" : \"acct\", \"url\" : \"url\", \"username\" : \"username\" } ], \"account\" : { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, \"card\" : { \"author_name\" : \"author_name\", \"image\" : \"image\", \"blurhash\" : \"blurhash\", \"description\" : \"description\", \"provider_url\" : \"provider_url\", \"title\" : \"title\", \"type\" : \"link\", \"url\" : \"url\", \"author_url\" : \"author_url\", \"width\" : 6, \"html\" : \"html\", \"provider_name\" : \"provider_name\", \"height\" : 0 } } ], \"statuses\" : [ { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" }, { \"name\" : \"name\", \"history\" : [ { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" }, { \"uses\" : \"uses\", \"accounts\" : \"accounts\", \"day\" : \"day\" } ], \"url\" : \"url\" } ], \"accounts\" : [ { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" }, { \"emojis\" : [ { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" }, { \"category\" : \"category\", \"shortcode\" : \"shortcode\", \"visible_in_picker\" : true, \"url\" : \"url\", \"static_url\" : \"static_url\" } ], \"note\" : \"note\", \"bot\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"avatar\" : \"avatar\", \"source\" : { \"note\" : \"note\", \"follow_requests_count\" : 1, \"privacy\" : \"public\", \"language\" : \"language\", \"sensitive\" : true, \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ] }, \"display_name\" : \"display_name\", \"header_static\" : \"header_static\", \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\", \"suspended\" : true, \"url\" : \"url\", \"following_count\" : 6, \"discoverable\" : true, \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\", \"statuses_count\" : 5, \"followers_count\" : 0, \"header\" : \"header\", \"id\" : \"id\", \"avatar_static\" : \"avatar_static\", \"fields\" : [ { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" }, { \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"value\" : \"value\" } ], \"locked\" : true, \"acct\" : \"acct\", \"username\" : \"username\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
