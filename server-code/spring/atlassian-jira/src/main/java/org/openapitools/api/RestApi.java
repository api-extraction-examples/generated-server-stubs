/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ActorInputBean;
import org.openapitools.model.ActorsMap;
import org.openapitools.model.AddFieldBean;
import org.openapitools.model.AddGroupBean;
import org.openapitools.model.AddNotificationsDetails;
import org.openapitools.model.AddSecuritySchemeLevelsRequestBean;
import org.openapitools.model.AnnouncementBannerConfiguration;
import org.openapitools.model.AnnouncementBannerConfigurationUpdate;
import org.openapitools.model.ApplicationProperty;
import org.openapitools.model.ApplicationRole;
import org.openapitools.model.AssociateFieldConfigurationsWithIssueTypesRequest;
import org.openapitools.model.Attachment;
import org.openapitools.model.AttachmentArchiveImpl;
import org.openapitools.model.AttachmentArchiveMetadataReadable;
import org.openapitools.model.AttachmentMetadata;
import org.openapitools.model.AttachmentSettings;
import org.openapitools.model.AuditRecords;
import org.openapitools.model.AutoCompleteSuggestions;
import org.openapitools.model.AvailableDashboardGadgetsResponse;
import org.openapitools.model.Avatar;
import org.openapitools.model.Avatars;
import org.openapitools.model.BulkCustomFieldOptionCreateRequest;
import org.openapitools.model.BulkCustomFieldOptionUpdateRequest;
import org.openapitools.model.BulkIssueIsWatching;
import org.openapitools.model.BulkIssuePropertyUpdateRequest;
import org.openapitools.model.BulkPermissionGrants;
import org.openapitools.model.BulkPermissionsRequestBean;
import org.openapitools.model.ChangeFilterOwner;
import org.openapitools.model.ChangedWorklogs;
import org.openapitools.model.ColumnItem;
import org.openapitools.model.Comment;
import org.openapitools.model.ComponentIssuesCount;
import org.openapitools.model.ConnectCustomFieldValues;
import org.openapitools.model.ConnectModules;
import org.openapitools.model.ContainerForProjectFeatures;
import org.openapitools.model.ContainerForRegisteredWebhooks;
import org.openapitools.model.ContainerForWebhookIDs;
import org.openapitools.model.ContainerOfWorkflowSchemeAssociations;
import org.openapitools.model.ConvertedJQLQueries;
import org.openapitools.model.CreateCustomFieldContext;
import org.openapitools.model.CreateIssueSecuritySchemeDetails;
import org.openapitools.model.CreateNotificationSchemeDetails;
import org.openapitools.model.CreatePriorityDetails;
import org.openapitools.model.CreateProjectDetails;
import org.openapitools.model.CreateResolutionDetails;
import org.openapitools.model.CreateUiModificationDetails;
import org.openapitools.model.CreateUpdateRoleRequestBean;
import org.openapitools.model.CreateWorkflowDetails;
import org.openapitools.model.CreatedIssue;
import org.openapitools.model.CreatedIssues;
import org.openapitools.model.CustomFieldConfigurations;
import org.openapitools.model.CustomFieldContextDefaultValueUpdate;
import org.openapitools.model.CustomFieldContextUpdateDetails;
import org.openapitools.model.CustomFieldCreatedContextOptionsList;
import org.openapitools.model.CustomFieldDefinitionJsonBean;
import org.openapitools.model.CustomFieldOption;
import org.openapitools.model.CustomFieldUpdatedContextOptionsList;
import org.openapitools.model.CustomFieldValueUpdateDetails;
import org.openapitools.model.Dashboard;
import org.openapitools.model.DashboardDetails;
import org.openapitools.model.DashboardGadget;
import org.openapitools.model.DashboardGadgetResponse;
import org.openapitools.model.DashboardGadgetSettings;
import org.openapitools.model.DashboardGadgetUpdateRequest;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.DefaultShareScope;
import org.openapitools.model.DefaultWorkflow;
import org.openapitools.model.DeleteAndReplaceVersionBean;
import org.openapitools.model.DeprecatedWorkflow;
import org.openapitools.model.EntityProperty;
import org.openapitools.model.EntityPropertyDetails;
import org.openapitools.model.ErrorCollection;
import org.openapitools.model.ErrorMessage;
import org.openapitools.model.FailedWebhooks;
import org.openapitools.model.FieldConfiguration;
import org.openapitools.model.FieldConfigurationDetails;
import org.openapitools.model.FieldConfigurationItemsDetails;
import org.openapitools.model.FieldConfigurationScheme;
import org.openapitools.model.FieldConfigurationSchemeProjectAssociation;
import org.openapitools.model.FieldDetails;
import org.openapitools.model.Filter;
import org.openapitools.model.FoundGroups;
import org.openapitools.model.FoundUsers;
import org.openapitools.model.FoundUsersAndGroups;
import org.openapitools.model.Group;
import org.openapitools.model.GroupName;
import org.openapitools.model.IdBean;
import org.openapitools.model.IssueBean;
import org.openapitools.model.IssueChangelogIds;
import org.openapitools.model.IssueCommentListRequestBean;
import org.openapitools.model.IssueCreateMetadata;
import org.openapitools.model.IssueEntityProperties;
import org.openapitools.model.IssueEvent;
import org.openapitools.model.IssueFieldOption;
import org.openapitools.model.IssueFieldOptionCreateBean;
import org.openapitools.model.IssueFilterForBulkPropertyDelete;
import org.openapitools.model.IssueLink;
import org.openapitools.model.IssueLinkType;
import org.openapitools.model.IssueLinkTypes;
import org.openapitools.model.IssueList;
import org.openapitools.model.IssueMatches;
import org.openapitools.model.IssuePickerSuggestions;
import org.openapitools.model.IssueTypeCreateBean;
import org.openapitools.model.IssueTypeDetails;
import org.openapitools.model.IssueTypeIds;
import org.openapitools.model.IssueTypeIdsToRemove;
import org.openapitools.model.IssueTypeSchemeDetails;
import org.openapitools.model.IssueTypeSchemeID;
import org.openapitools.model.IssueTypeSchemeProjectAssociation;
import org.openapitools.model.IssueTypeSchemeUpdateDetails;
import org.openapitools.model.IssueTypeScreenSchemeDetails;
import org.openapitools.model.IssueTypeScreenSchemeId;
import org.openapitools.model.IssueTypeScreenSchemeMappingDetails;
import org.openapitools.model.IssueTypeScreenSchemeProjectAssociation;
import org.openapitools.model.IssueTypeScreenSchemeUpdateDetails;
import org.openapitools.model.IssueTypeUpdateBean;
import org.openapitools.model.IssueTypeWithStatus;
import org.openapitools.model.IssueTypeWorkflowMapping;
import org.openapitools.model.IssueTypesWorkflowMapping;
import org.openapitools.model.IssueUpdateDetails;
import org.openapitools.model.IssueUpdateMetadata;
import org.openapitools.model.IssuesAndJQLQueries;
import org.openapitools.model.IssuesUpdateBean;
import org.openapitools.model.JQLPersonalDataMigrationRequest;
import org.openapitools.model.JQLReferenceData;
import org.openapitools.model.JiraExpressionEvalRequestBean;
import org.openapitools.model.JiraExpressionForAnalysis;
import org.openapitools.model.JiraExpressionResult;
import org.openapitools.model.JiraExpressionsAnalysis;
import org.openapitools.model.JiraStatus;
import org.openapitools.model.JqlFunctionPrecomputationUpdateRequestBean;
import org.openapitools.model.JqlQueriesToParse;
import org.openapitools.model.JqlQueriesToSanitize;
import org.openapitools.model.License;
import org.openapitools.model.LicenseMetric;
import org.openapitools.model.LinkIssueRequestJsonBean;
import org.openapitools.model.Locale;
import java.util.Map;
import org.openapitools.model.ModelConfiguration;
import org.openapitools.model.MoveFieldBean;
import org.openapitools.model.MultiIssueEntityProperties;
import org.openapitools.model.MultipleCustomFieldValuesUpdateDetails;
import org.openapitools.model.NewUserDetails;
import org.openapitools.model.Notification;
import org.openapitools.model.NotificationScheme;
import org.openapitools.model.NotificationSchemeId;
import java.time.OffsetDateTime;
import org.openapitools.model.OperationMessage;
import org.openapitools.model.OrderOfCustomFieldOptions;
import org.openapitools.model.OrderOfIssueTypes;
import org.openapitools.model.PageBeanChangelog;
import org.openapitools.model.PageBeanComment;
import org.openapitools.model.PageBeanComponentWithIssueCount;
import org.openapitools.model.PageBeanContext;
import org.openapitools.model.PageBeanContextForProjectAndIssueType;
import org.openapitools.model.PageBeanContextualConfiguration;
import org.openapitools.model.PageBeanCustomFieldContext;
import org.openapitools.model.PageBeanCustomFieldContextDefaultValue;
import org.openapitools.model.PageBeanCustomFieldContextOption;
import org.openapitools.model.PageBeanCustomFieldContextProjectMapping;
import org.openapitools.model.PageBeanDashboard;
import org.openapitools.model.PageBeanField;
import org.openapitools.model.PageBeanFieldConfigurationDetails;
import org.openapitools.model.PageBeanFieldConfigurationIssueTypeItem;
import org.openapitools.model.PageBeanFieldConfigurationItem;
import org.openapitools.model.PageBeanFieldConfigurationScheme;
import org.openapitools.model.PageBeanFieldConfigurationSchemeProjects;
import org.openapitools.model.PageBeanFilterDetails;
import org.openapitools.model.PageBeanGroupDetails;
import org.openapitools.model.PageBeanIssueFieldOption;
import org.openapitools.model.PageBeanIssueSecurityLevelMember;
import org.openapitools.model.PageBeanIssueSecuritySchemeToProjectMapping;
import org.openapitools.model.PageBeanIssueTypeScheme;
import org.openapitools.model.PageBeanIssueTypeSchemeMapping;
import org.openapitools.model.PageBeanIssueTypeSchemeProjects;
import org.openapitools.model.PageBeanIssueTypeScreenScheme;
import org.openapitools.model.PageBeanIssueTypeScreenSchemeItem;
import org.openapitools.model.PageBeanIssueTypeScreenSchemesProjects;
import org.openapitools.model.PageBeanIssueTypeToContextMapping;
import org.openapitools.model.PageBeanJqlFunctionPrecomputationBean;
import org.openapitools.model.PageBeanNotificationScheme;
import org.openapitools.model.PageBeanNotificationSchemeAndProjectMappingJsonBean;
import org.openapitools.model.PageBeanPriority;
import org.openapitools.model.PageBeanProject;
import org.openapitools.model.PageBeanProjectDetails;
import org.openapitools.model.PageBeanResolutionJsonBean;
import org.openapitools.model.PageBeanScreen;
import org.openapitools.model.PageBeanScreenScheme;
import org.openapitools.model.PageBeanScreenWithTab;
import org.openapitools.model.PageBeanSecurityLevel;
import org.openapitools.model.PageBeanSecurityLevelMember;
import org.openapitools.model.PageBeanSecuritySchemeWithProjects;
import org.openapitools.model.PageBeanString;
import org.openapitools.model.PageBeanUiModificationDetails;
import org.openapitools.model.PageBeanUser;
import org.openapitools.model.PageBeanUserDetails;
import org.openapitools.model.PageBeanUserKey;
import org.openapitools.model.PageBeanVersion;
import org.openapitools.model.PageBeanWebhook;
import org.openapitools.model.PageBeanWorkflow;
import org.openapitools.model.PageBeanWorkflowScheme;
import org.openapitools.model.PageBeanWorkflowTransitionRules;
import org.openapitools.model.PageOfChangelogs;
import org.openapitools.model.PageOfComments;
import org.openapitools.model.PageOfDashboards;
import org.openapitools.model.PageOfStatuses;
import org.openapitools.model.PageOfWorklogs;
import org.openapitools.model.ParsedJqlQueries;
import org.openapitools.model.PermissionGrant;
import org.openapitools.model.PermissionGrants;
import org.openapitools.model.PermissionScheme;
import org.openapitools.model.PermissionSchemes;
import org.openapitools.model.Permissions;
import org.openapitools.model.PermissionsKeysBean;
import org.openapitools.model.PermittedProjects;
import org.openapitools.model.Priority;
import org.openapitools.model.PriorityId;
import org.openapitools.model.Project;
import org.openapitools.model.ProjectAvatars;
import org.openapitools.model.ProjectCategory;
import org.openapitools.model.ProjectComponent;
import org.openapitools.model.ProjectEmailAddress;
import org.openapitools.model.ProjectFeatureState;
import org.openapitools.model.ProjectIdentifiers;
import org.openapitools.model.ProjectIds;
import org.openapitools.model.ProjectIssueSecurityLevels;
import org.openapitools.model.ProjectIssueTypeHierarchy;
import org.openapitools.model.ProjectIssueTypeMappings;
import org.openapitools.model.ProjectRole;
import org.openapitools.model.ProjectRoleActorsUpdateBean;
import org.openapitools.model.ProjectRoleDetails;
import org.openapitools.model.ProjectType;
import org.openapitools.model.PropertyKeys;
import org.openapitools.model.PublishDraftWorkflowScheme;
import org.openapitools.model.RemoteIssueLink;
import org.openapitools.model.RemoteIssueLinkIdentifies;
import org.openapitools.model.RemoteIssueLinkRequest;
import org.openapitools.model.ReorderIssuePriorities;
import org.openapitools.model.ReorderIssueResolutionsRequest;
import org.openapitools.model.Resolution;
import org.openapitools.model.ResolutionId;
import org.openapitools.model.SanitizedJqlQueries;
import org.openapitools.model.Screen;
import org.openapitools.model.ScreenDetails;
import org.openapitools.model.ScreenSchemeDetails;
import org.openapitools.model.ScreenSchemeId;
import org.openapitools.model.ScreenableField;
import org.openapitools.model.ScreenableTab;
import org.openapitools.model.SearchAutoCompleteFilter;
import org.openapitools.model.SearchRequestBean;
import org.openapitools.model.SearchResults;
import org.openapitools.model.SecurityLevel;
import org.openapitools.model.SecurityScheme;
import org.openapitools.model.SecuritySchemeId;
import org.openapitools.model.SecuritySchemeMembersRequest;
import org.openapitools.model.SecuritySchemes;
import org.openapitools.model.ServerInformation;
import java.util.Set;
import org.openapitools.model.SetDefaultLevelsRequest;
import org.openapitools.model.SetDefaultPriorityRequest;
import org.openapitools.model.SetDefaultResolutionRequest;
import org.openapitools.model.SharePermission;
import org.openapitools.model.SharePermissionInputBean;
import org.openapitools.model.SimpleApplicationPropertyBean;
import org.openapitools.model.StatusCategory;
import org.openapitools.model.StatusCreateRequest;
import org.openapitools.model.StatusDetails;
import org.openapitools.model.StatusUpdateRequest;
import org.openapitools.model.SystemAvatars;
import org.openapitools.model.TaskProgressBeanObject;
import org.openapitools.model.TaskProgressBeanRemoveOptionFromIssuesResult;
import org.openapitools.model.TimeTrackingConfiguration;
import org.openapitools.model.TimeTrackingProvider;
import org.openapitools.model.Transitions;
import java.net.URI;
import java.util.UUID;
import org.openapitools.model.UiModificationIdentifiers;
import org.openapitools.model.UnrestrictedUserEmail;
import org.openapitools.model.UpdateCustomFieldDetails;
import org.openapitools.model.UpdateDefaultScreenScheme;
import org.openapitools.model.UpdateFieldConfigurationSchemeDetails;
import org.openapitools.model.UpdateIssueSecurityLevelDetails;
import org.openapitools.model.UpdateIssueSecuritySchemeRequestBean;
import org.openapitools.model.UpdateNotificationSchemeDetails;
import org.openapitools.model.UpdatePriorityDetails;
import org.openapitools.model.UpdateProjectDetails;
import org.openapitools.model.UpdateResolutionDetails;
import org.openapitools.model.UpdateScreenDetails;
import org.openapitools.model.UpdateScreenSchemeDetails;
import org.openapitools.model.UpdateUiModificationDetails;
import org.openapitools.model.UpdateUserToGroupBean;
import org.openapitools.model.UpdatedProjectCategory;
import org.openapitools.model.User;
import org.openapitools.model.UserMigrationBean;
import org.openapitools.model.Version;
import org.openapitools.model.VersionIssueCounts;
import org.openapitools.model.VersionMoveBean;
import org.openapitools.model.VersionUnresolvedIssuesCount;
import org.openapitools.model.Votes;
import org.openapitools.model.Watchers;
import org.openapitools.model.WebhookRegistrationDetails;
import org.openapitools.model.WebhooksExpirationDate;
import org.openapitools.model.WorkflowIDs;
import org.openapitools.model.WorkflowRulesSearch;
import org.openapitools.model.WorkflowRulesSearchDetails;
import org.openapitools.model.WorkflowScheme;
import org.openapitools.model.WorkflowSchemeProjectAssociation;
import org.openapitools.model.WorkflowTransitionProperty;
import org.openapitools.model.WorkflowTransitionRulesUpdate;
import org.openapitools.model.WorkflowTransitionRulesUpdateErrors;
import org.openapitools.model.WorkflowsWithTransitionRulesDetails;
import org.openapitools.model.Worklog;
import org.openapitools.model.WorklogIdsRequestBean;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:43:56.097643-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Project role actors", description = "This resource represents the users assigned to [project roles](#api-group-Issue-comments). Use it to get, add, and remove default users from project roles. Also use it to add and remove users from a project role associated with a project.")
public interface RestApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /rest/api/3/project/{projectIdOrKey}/role/{id} : Add actors to project role
     * Adds actors to a project role for the project.  To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param actorsMap The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group&#39;s name can change, use of group ID is recommended. (required)
     * @return Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a &#x60;user&#x60; actor for this project. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. (status code 401)
     *         or Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active. (status code 404)
     */
    @Operation(
        operationId = "addActorUsers",
        summary = "Add actors to project role",
        description = "Adds actors to a project role for the project.  To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project role actors" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a `user` actor for this project.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectRole.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/project/{projectIdOrKey}/role/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectRole> addActorUsers(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "id", description = "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ActorsMap", description = "The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.", required = true) @Valid @RequestBody ActorsMap actorsMap
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/attachments : Add attachment
     * Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).  Note that:   *  The request must have a &#x60;X-Atlassian-Token: no-check&#x60; header, if not it is blocked. See [Special headers](#special-request-headers) for more information.  *  The name of the multipart/form-data parameter that contains the attachments must be &#x60;file&#x60;.  The following examples upload a file called *myfile.txt* to the issue *TEST-123*:  #### curl ####      curl --location --request POST &#39;https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments&#39;      -u &#39;email@example.com:&lt;api_token&gt;&#39;      -H &#39;X-Atlassian-Token: no-check&#39;      --form &#39;file&#x3D;@\&quot;myfile.txt\&quot;&#39;  #### Node.js ####      // This code sample uses the &#39;node-fetch&#39; and &#39;form-data&#39; libraries:      // https://www.npmjs.com/package/node-fetch      // https://www.npmjs.com/package/form-data      const fetch &#x3D; require(&#39;node-fetch&#39;);      const FormData &#x3D; require(&#39;form-data&#39;);      const fs &#x3D; require(&#39;fs&#39;);           const filePath &#x3D; &#39;myfile.txt&#39;;      const form &#x3D; new FormData();      const stats &#x3D; fs.statSync(filePath);      const fileSizeInBytes &#x3D; stats.size;      const fileStream &#x3D; fs.createReadStream(filePath);           form.append(&#39;file&#39;, fileStream, {knownLength: fileSizeInBytes});           fetch(&#39;https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments&#39;, {          method: &#39;POST&#39;,          body: form,          headers: {              &#39;Authorization&#39;: &#x60;Basic ${Buffer.from(                  &#39;email@example.com:&#39;              ).toString(&#39;base64&#39;)}&#x60;,              &#39;Accept&#39;: &#39;application/json&#39;,              &#39;X-Atlassian-Token&#39;: &#39;no-check&#39;          }      })          .then(response &#x3D;&gt; {              console.log(                  &#x60;Response: ${response.status} ${response.statusText}&#x60;              );              return response.text();          })          .then(text &#x3D;&gt; console.log(text))          .catch(err &#x3D;&gt; console.error(err));  #### Java ####      // This code sample uses the  &#39;Unirest&#39; library:      // http://unirest.io/java.html      HttpResponse response &#x3D; Unirest.post(\&quot;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments\&quot;)              .basicAuth(\&quot;email@example.com\&quot;, \&quot;\&quot;)              .header(\&quot;Accept\&quot;, \&quot;application/json\&quot;)              .header(\&quot;X-Atlassian-Token\&quot;, \&quot;no-check\&quot;)              .field(\&quot;file\&quot;, new File(\&quot;myfile.txt\&quot;))              .asJson();                   System.out.println(response.getBody());  #### Python ####      # This code sample uses the &#39;requests&#39; library:      # http://docs.python-requests.org      import requests      from requests.auth import HTTPBasicAuth      import json           url &#x3D; \&quot;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments\&quot;           auth &#x3D; HTTPBasicAuth(\&quot;email@example.com\&quot;, \&quot;\&quot;)           headers &#x3D; {         \&quot;Accept\&quot;: \&quot;application/json\&quot;,         \&quot;X-Atlassian-Token\&quot;: \&quot;no-check\&quot;      }           response &#x3D; requests.request(         \&quot;POST\&quot;,         url,         headers &#x3D; headers,         auth &#x3D; auth,         files &#x3D; {              \&quot;file\&quot;: (\&quot;myfile.txt\&quot;, open(\&quot;myfile.txt\&quot;,\&quot;rb\&quot;), \&quot;application-type\&quot;)         }      )           print(json.dumps(json.loads(response.text), sort_keys&#x3D;True, indent&#x3D;4, separators&#x3D;(\&quot;,\&quot;, \&quot;: \&quot;)))  #### PHP ####      // This code sample uses the &#39;Unirest&#39; library:      // http://unirest.io/php.html      Unirest\\Request::auth(&#39;email@example.com&#39;, &#39;&#39;);           $headers &#x3D; array(        &#39;Accept&#39; &#x3D;&gt; &#39;application/json&#39;,        &#39;X-Atlassian-Token&#39; &#x3D;&gt; &#39;no-check&#39;      );           $parameters &#x3D; array(        &#39;file&#39; &#x3D;&gt; File::add(&#39;myfile.txt&#39;)      );           $response &#x3D; Unirest\\Request::post(        &#39;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments&#39;,        $headers,        $parameters      );           var_dump($response)  #### Forge ####      // This sample uses Atlassian Forge and the &#x60;form-data&#x60; library.      // https://developer.atlassian.com/platform/forge/      // https://www.npmjs.com/package/form-data      import api from \&quot;@forge/api\&quot;;      import FormData from \&quot;form-data\&quot;;           const form &#x3D; new FormData();      form.append(&#39;file&#39;, fileStream, {knownLength: fileSizeInBytes});           const response &#x3D; await api.asApp().requestJira(&#39;/rest/api/2/issue/{issueIdOrKey}/attachments&#39;, {          method: &#39;POST&#39;,          body: form,          headers: {              &#39;Accept&#39;: &#39;application/json&#39;,              &#39;X-Atlassian-Token&#39;: &#39;no-check&#39;          }      });           console.log(&#x60;Response: ${response.status} ${response.statusText}&#x60;);      console.log(await response.json());  Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**    *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue that attachments are added to. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if any of the following is true:   *  the issue is not found.  *  the user does not have permission to view the issue. (status code 404)
     *         or The attachments exceed the maximum attachment size for issues. See [Configuring file attachments](https://confluence.atlassian.com/x/wIXKM) for details. (status code 413)
     */
    @Operation(
        operationId = "addAttachment",
        summary = "Add attachment",
        description = "Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).  Note that:   *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.  *  The name of the multipart/form-data parameter that contains the attachments must be `file`.  The following examples upload a file called *myfile.txt* to the issue *TEST-123*:  #### curl ####      curl --location --request POST 'https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments'      -u 'email@example.com:<api_token>'      -H 'X-Atlassian-Token: no-check'      --form 'file=@\"myfile.txt\"'  #### Node.js ####      // This code sample uses the 'node-fetch' and 'form-data' libraries:      // https://www.npmjs.com/package/node-fetch      // https://www.npmjs.com/package/form-data      const fetch = require('node-fetch');      const FormData = require('form-data');      const fs = require('fs');           const filePath = 'myfile.txt';      const form = new FormData();      const stats = fs.statSync(filePath);      const fileSizeInBytes = stats.size;      const fileStream = fs.createReadStream(filePath);           form.append('file', fileStream, {knownLength: fileSizeInBytes});           fetch('https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments', {          method: 'POST',          body: form,          headers: {              'Authorization': `Basic ${Buffer.from(                  'email@example.com:'              ).toString('base64')}`,              'Accept': 'application/json',              'X-Atlassian-Token': 'no-check'          }      })          .then(response => {              console.log(                  `Response: ${response.status} ${response.statusText}`              );              return response.text();          })          .then(text => console.log(text))          .catch(err => console.error(err));  #### Java ####      // This code sample uses the  'Unirest' library:      // http://unirest.io/java.html      HttpResponse response = Unirest.post(\"https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments\")              .basicAuth(\"email@example.com\", \"\")              .header(\"Accept\", \"application/json\")              .header(\"X-Atlassian-Token\", \"no-check\")              .field(\"file\", new File(\"myfile.txt\"))              .asJson();                   System.out.println(response.getBody());  #### Python ####      # This code sample uses the 'requests' library:      # http://docs.python-requests.org      import requests      from requests.auth import HTTPBasicAuth      import json           url = \"https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments\"           auth = HTTPBasicAuth(\"email@example.com\", \"\")           headers = {         \"Accept\": \"application/json\",         \"X-Atlassian-Token\": \"no-check\"      }           response = requests.request(         \"POST\",         url,         headers = headers,         auth = auth,         files = {              \"file\": (\"myfile.txt\", open(\"myfile.txt\",\"rb\"), \"application-type\")         }      )           print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(\",\", \": \")))  #### PHP ####      // This code sample uses the 'Unirest' library:      // http://unirest.io/php.html      Unirest\\Request::auth('email@example.com', '');           $headers = array(        'Accept' => 'application/json',        'X-Atlassian-Token' => 'no-check'      );           $parameters = array(        'file' => File::add('myfile.txt')      );           $response = Unirest\\Request::post(        'https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments',        $headers,        $parameters      );           var_dump($response)  #### Forge ####      // This sample uses Atlassian Forge and the `form-data` library.      // https://developer.atlassian.com/platform/forge/      // https://www.npmjs.com/package/form-data      import api from \"@forge/api\";      import FormData from \"form-data\";           const form = new FormData();      form.append('file', fileStream, {knownLength: fileSizeInBytes});           const response = await api.asApp().requestJira('/rest/api/2/issue/{issueIdOrKey}/attachments', {          method: 'POST',          body: form,          headers: {              'Accept': 'application/json',              'X-Atlassian-Token': 'no-check'          }      });           console.log(`Response: ${response.status} ${response.statusText}`);      console.log(await response.json());  Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**    *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue attachments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Attachment.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if any of the following is true:   *  the issue is not found.  *  the user does not have permission to view the issue."),
            @ApiResponse(responseCode = "413", description = "The attachments exceed the maximum attachment size for issues. See [Configuring file attachments](https://confluence.atlassian.com/x/wIXKM) for details.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/{issueIdOrKey}/attachments",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<List<Attachment>> addAttachment(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue that attachments are added to.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"thumbnail\" : \"thumbnail\", \"filename\" : \"filename\", \"size\" : 0, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"self\" : \"self\", \"id\" : \"id\", \"mimeType\" : \"mimeType\", \"content\" : \"content\" }, { \"thumbnail\" : \"thumbnail\", \"filename\" : \"filename\", \"size\" : 0, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"self\" : \"self\", \"id\" : \"id\", \"mimeType\" : \"mimeType\", \"content\" : \"content\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/comment : Add comment
     * Adds a comment to an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param comment  (required)
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML. (optional)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "addComment",
        summary = "Add comment",
        description = "Adds a comment to an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue comments" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/{issueIdOrKey}/comment",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Comment> addComment(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "Comment", description = "", required = true) @Valid @RequestBody Comment comment,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"renderedBody\" : \"renderedBody\", \"visibility\" : \"\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"self\" : \"self\", \"jsdPublic\" : true, \"id\" : \"id\", \"body\" : \"\", \"jsdAuthorCanSeeRequest\" : true, \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/screens/addToDefault/{fieldId} : Add field to default screen
     * Adds a field to the default tab of the default screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the field. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field it not found or the field is already present. (status code 404)
     */
    @Operation(
        operationId = "addFieldToDefaultScreen",
        summary = "Add field to default screen",
        description = "Adds a field to the default tab of the default screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screens" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field it not found or the field is already present.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/screens/addToDefault/{fieldId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> addFieldToDefaultScreen(
        @Parameter(name = "fieldId", description = "The ID of the field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/dashboard/{dashboardId}/gadget : Add gadget to dashboard
     * Adds a gadget to a dashboard.  **[Permissions](#permissions) required:** None.
     *
     * @param dashboardId The ID of the dashboard. (required)
     * @param dashboardGadgetSettings  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the dashboard is not found. (status code 404)
     */
    @Operation(
        operationId = "addGadget",
        summary = "Add gadget to dashboard",
        description = "Adds a gadget to a dashboard.  **[Permissions](#permissions) required:** None.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DashboardGadget.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the dashboard is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work", "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/dashboard/{dashboardId}/gadget",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DashboardGadget> addGadget(
        @Parameter(name = "dashboardId", description = "The ID of the dashboard.", required = true, in = ParameterIn.PATH) @PathVariable("dashboardId") Long dashboardId,
        @Parameter(name = "DashboardGadgetSettings", description = "", required = true) @Valid @RequestBody DashboardGadgetSettings dashboardGadgetSettings
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"color\" : \"blue\", \"id\" : 0, \"title\" : \"title\", \"uri\" : \"uri\", \"moduleKey\" : \"moduleKey\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/field/{fieldId}/context/{contextId}/issuetype : Add issue types to context
     * Adds issue types to a custom field context, appending the issue types to the issue types list.  A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.  If any of the issue types exists in the custom field context, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param issueTypeIds  (required)
     * @return Returned if operation is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field, context, or one or more issue types are not found. (status code 404)
     *         or Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings. (status code 409)
     */
    @Operation(
        operationId = "addIssueTypesToContext",
        summary = "Add issue types to context",
        description = "Adds issue types to a custom field context, appending the issue types to the issue types list.  A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.  If any of the issue types exists in the custom field context, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if operation is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field, context, or one or more issue types are not found."),
            @ApiResponse(responseCode = "409", description = "Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}/issuetype",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> addIssueTypesToContext(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId,
        @Parameter(name = "IssueTypeIds", description = "", required = true) @Valid @RequestBody IssueTypeIds issueTypeIds
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype : Add issue types to issue type scheme
     * Adds issue types to an issue type scheme.  The added issue types are appended to the issue types list.  If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeSchemeId The ID of the issue type scheme. (required)
     * @param issueTypeIds  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type or the issue type scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "addIssueTypesToIssueTypeScheme",
        summary = "Add issue types to issue type scheme",
        description = "Adds issue types to an issue type scheme.  The added issue types are appended to the issue types list.  If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type or the issue type scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> addIssueTypesToIssueTypeScheme(
        @Parameter(name = "issueTypeSchemeId", description = "The ID of the issue type scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeSchemeId") Long issueTypeSchemeId,
        @Parameter(name = "IssueTypeIds", description = "", required = true) @Valid @RequestBody IssueTypeIds issueTypeIds
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/notificationscheme/{id}/notification : Add notifications to notification scheme
     * Adds notifications to a notification scheme. You can add up to 1000 notifications per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the notification scheme. (required)
     * @param addNotificationsDetails  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the notification scheme isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "addNotifications",
        summary = "Add notifications to notification scheme",
        description = "Adds notifications to a notification scheme. You can add up to 1000 notifications per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue notification schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the notification scheme isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/notificationscheme/{id}/notification",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> addNotifications(
        @Parameter(name = "id", description = "The ID of the notification scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AddNotificationsDetails", description = "", required = true) @Valid @RequestBody AddNotificationsDetails addNotificationsDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/role/{id}/actors : Add default actors to project role
     * Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.  Changing a project role&#39;s default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param actorInputBean  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have administrative permissions. (status code 403)
     *         or Returned if the project role is not found. (status code 404)
     */
    @Operation(
        operationId = "addProjectRoleActorsToRole",
        summary = "Add default actors to project role",
        description = "Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.  Changing a project role's default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project role actors" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectRole.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have administrative permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project role is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/role/{id}/actors",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectRole> addProjectRoleActorsToRole(
        @Parameter(name = "id", description = "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ActorInputBean", description = "", required = true) @Valid @RequestBody ActorInputBean actorInputBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/screens/{screenId}/tabs : Create screen tab
     * Creates a tab for a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenId The ID of the screen. (required)
     * @param screenableTab  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen is not found. (status code 404)
     */
    @Operation(
        operationId = "addScreenTab",
        summary = "Create screen tab",
        description = "Creates a tab for a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen tabs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScreenableTab.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/screens/{screenId}/tabs",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ScreenableTab> addScreenTab(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId,
        @Parameter(name = "ScreenableTab", description = "", required = true) @Valid @RequestBody ScreenableTab screenableTab
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/screens/{screenId}/tabs/{tabId}/fields : Add screen tab field
     * Adds a field to a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @param addFieldBean  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen, screen tab, or field is not found. (status code 404)
     */
    @Operation(
        operationId = "addScreenTabField",
        summary = "Add screen tab field",
        description = "Adds a field to a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen tab fields" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScreenableField.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen, screen tab, or field is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ScreenableField> addScreenTabField(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId,
        @Parameter(name = "tabId", description = "The ID of the screen tab.", required = true, in = ParameterIn.PATH) @PathVariable("tabId") Long tabId,
        @Parameter(name = "AddFieldBean", description = "", required = true) @Valid @RequestBody AddFieldBean addFieldBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuesecurityschemes/{schemeId}/level : Add issue security levels
     * Adds levels and levels&#39; members to the issue security scheme. You can add up to 100 levels per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param schemeId The ID of the issue security scheme. (required)
     * @param addSecuritySchemeLevelsRequestBean  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the security scheme isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "addSecurityLevel",
        summary = "Add issue security levels",
        description = "Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the security scheme isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuesecurityschemes/{schemeId}/level",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> addSecurityLevel(
        @Parameter(name = "schemeId", description = "The ID of the issue security scheme.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") String schemeId,
        @Parameter(name = "AddSecuritySchemeLevelsRequestBean", description = "", required = true) @Valid @RequestBody AddSecuritySchemeLevelsRequestBean addSecuritySchemeLevelsRequestBean
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member : Add issue security level members
     * Adds members to the issue security level. You can add up to 100 members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param schemeId The ID of the issue security scheme. (required)
     * @param levelId The ID of the issue security level. (required)
     * @param securitySchemeMembersRequest  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the security scheme isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "addSecurityLevelMembers",
        summary = "Add issue security level members",
        description = "Adds members to the issue security level. You can add up to 100 members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the security scheme isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> addSecurityLevelMembers(
        @Parameter(name = "schemeId", description = "The ID of the issue security scheme.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") String schemeId,
        @Parameter(name = "levelId", description = "The ID of the issue security level.", required = true, in = ParameterIn.PATH) @PathVariable("levelId") String levelId,
        @Parameter(name = "SecuritySchemeMembersRequest", description = "", required = true) @Valid @RequestBody SecuritySchemeMembersRequest securitySchemeMembersRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/filter/{id}/permission : Add share permission
     * Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.  Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).  **[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.
     *
     * @param id The ID of the filter. (required)
     * @param sharePermissionInputBean  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if:   *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.  *  the user does not own the filter.  *  the user does not have the required permissions. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. (status code 404)
     */
    @Operation(
        operationId = "addSharePermission",
        summary = "Add share permission",
        description = "Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.  Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).  **[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.",
        tags = { "Filter sharing" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SharePermission.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.  *  the user does not own the filter.  *  the user does not have the required permissions."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/filter/{id}/permission",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<SharePermission>> addSharePermission(
        @Parameter(name = "id", description = "The ID of the filter.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "SharePermissionInputBean", description = "", required = true) @Valid @RequestBody SharePermissionInputBean sharePermissionInputBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/group/user : Add user to group
     * Adds a user to a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     *
     * @param updateUserToGroupBean The user to add to the group. (required)
     * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended to identify a group.   The name of the group. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
     * @param groupId The ID of the group. This parameter cannot be used with the &#x60;groupName&#x60; parameter. (optional)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if:   *  &#x60;groupname&#x60; is not provided.  *  &#x60;accountId&#x60; is missing. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing from the request. (status code 401)
     *         or Returned if the calling user does not have the necessary permission. (status code 403)
     *         or Returned if the group or user are not found. (status code 404)
     */
    @Operation(
        operationId = "addUserToGroup",
        summary = "Add user to group",
        description = "Adds a user to a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `groupname` is not provided.  *  `accountId` is missing."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing from the request."),
            @ApiResponse(responseCode = "403", description = "Returned if the calling user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the group or user are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/group/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Group> addUserToGroup(
        @Parameter(name = "UpdateUserToGroupBean", description = "The user to add to the group.", required = true) @Valid @RequestBody UpdateUserToGroupBean updateUserToGroupBean,
        @Parameter(name = "groupname", description = "As a group's name can change, use of `groupId` is recommended to identify a group.   The name of the group. This parameter cannot be used with the `groupId` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupname", required = false) String groupname,
        @Parameter(name = "groupId", description = "The ID of the group. This parameter cannot be used with the `groupName` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/votes : Add vote
     * Adds the user&#39;s vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.  This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  voting is disabled.  *  the issue is not found. (status code 404)
     */
    @Operation(
        operationId = "addVote",
        summary = "Add vote",
        description = "Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.  This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue votes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  voting is disabled.  *  the issue is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/{issueIdOrKey}/votes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> addVote(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/watchers : Add watcher
     * Adds a user as a watcher of an issue by passing the account ID of the user. For example, &#x60;\&quot;5b10ac8d82e05b22cc7d4ef5\&quot;&#x60;. If no user is specified the calling user is added.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param body The account ID of the user. Note that username cannot be used due to privacy changes. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the permission to manage the watcher list. (status code 403)
     *         or Returned if the issue or the user is not found or the user does not have permission to view the issue. (status code 404)
     */
    @Operation(
        operationId = "addWatcher",
        summary = "Add watcher",
        description = "Adds a user as a watcher of an issue by passing the account ID of the user. For example, `\"5b10ac8d82e05b22cc7d4ef5\"`. If no user is specified the calling user is added.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.",
        tags = { "Issue watchers" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the permission to manage the watcher list."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or the user is not found or the user does not have permission to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/{issueIdOrKey}/watchers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> addWatcher(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "body", description = "The account ID of the user. Note that username cannot be used due to privacy changes.", required = true) @Valid @RequestBody String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/worklog : Add worklog
     * Adds a worklog to an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key the issue. (required)
     * @param worklog  (required)
     * @param notifyUsers Whether users watching the issue are notified by email. (optional, default to true)
     * @param adjustEstimate Defines how to update the issue&#39;s time estimate, the options are:   *  &#x60;new&#x60; Sets the estimate to a specific value, defined in &#x60;newEstimate&#x60;.  *  &#x60;leave&#x60; Leaves the estimate unchanged.  *  &#x60;manual&#x60; Reduces the estimate by amount specified in &#x60;reduceBy&#x60;.  *  &#x60;auto&#x60; Reduces the estimate by the value of &#x60;timeSpent&#x60; in the worklog. (optional, default to auto)
     * @param newEstimate The value to set as the issue&#39;s remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when &#x60;adjustEstimate&#x60; is &#x60;new&#x60;. (optional)
     * @param reduceBy The amount to reduce the issue&#39;s remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m). For example, *2d*. Required when &#x60;adjustEstimate&#x60; is &#x60;manual&#x60;. (optional)
     * @param expand Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts &#x60;properties&#x60;, which returns worklog properties. (optional, default to )
     * @param overrideEditableFlag Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag. (optional, default to false)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if:   *  &#x60;adjustEstimate&#x60; is set to &#x60;new&#x60; but &#x60;newEstimate&#x60; is not provided or is invalid.  *  &#x60;adjustEstimate&#x60; is set to &#x60;manual&#x60; but &#x60;reduceBy&#x60; is not provided or is invalid.  *  the user does not have permission to add the worklog.  *  the request JSON is malformed. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "addWorklog",
        summary = "Add worklog",
        description = "Adds a worklog to an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue worklogs" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Worklog.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.  *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.  *  the user does not have permission to add the worklog.  *  the request JSON is malformed."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/{issueIdOrKey}/worklog",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Worklog> addWorklog(
        @Parameter(name = "issueIdOrKey", description = "The ID or key the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "Worklog", description = "", required = true) @Valid @RequestBody Worklog worklog,
        @Parameter(name = "notifyUsers", description = "Whether users watching the issue are notified by email.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "notifyUsers", required = false, defaultValue = "true") Boolean notifyUsers,
        @Parameter(name = "adjustEstimate", description = "Defines how to update the issue's time estimate, the options are:   *  `new` Sets the estimate to a specific value, defined in `newEstimate`.  *  `leave` Leaves the estimate unchanged.  *  `manual` Reduces the estimate by amount specified in `reduceBy`.  *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "adjustEstimate", required = false, defaultValue = "auto") String adjustEstimate,
        @Parameter(name = "newEstimate", description = "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "newEstimate", required = false) String newEstimate,
        @Parameter(name = "reduceBy", description = "The amount to reduce the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m). For example, *2d*. Required when `adjustEstimate` is `manual`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "reduceBy", required = false) String reduceBy,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false, defaultValue = "") String expand,
        @Parameter(name = "overrideEditableFlag", description = "Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideEditableFlag", required = false, defaultValue = "false") Boolean overrideEditableFlag
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issueId\" : \"issueId\", \"visibility\" : \"\", \"timeSpent\" : \"timeSpent\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"started\" : \"2000-01-23T04:56:07.000+00:00\", \"timeSpentSeconds\" : 5, \"self\" : \"https://openapi-generator.tech\", \"comment\" : \"\", \"id\" : \"id\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey} : Delete app property
     * Deletes an app&#39;s property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches &#x60;addonKey&#x60; can make this request.
     *
     * @param addonKey The key of the app, as defined in its descriptor. (required)
     * @param propertyKey The key of the property. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the property key is longer than 127 characters. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the property is not found or doesn&#39;t belong to the app. (status code 404)
     */
    @Operation(
        operationId = "addonPropertiesResourceDeleteAddonPropertyDelete",
        summary = "Delete app property",
        description = "Deletes an app's property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.",
        tags = { "App properties" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the property key is longer than 127 characters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the property is not found or doesn't belong to the app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> addonPropertiesResourceDeleteAddonPropertyDelete(
        @Parameter(name = "addonKey", description = "The key of the app, as defined in its descriptor.", required = true, in = ParameterIn.PATH) @PathVariable("addonKey") String addonKey,
        @Parameter(name = "propertyKey", description = "The key of the property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/atlassian-connect/1/addons/{addonKey}/properties : Get app properties
     * Gets all the properties of an app.  **[Permissions](#permissions) required:** Only a Connect app whose key matches &#x60;addonKey&#x60; can make this request. Additionally, Forge apps published on the Marketplace can access properties of Connect apps they were [migrated from](https://developer.atlassian.com/platform/forge/build-a-connect-on-forge-app/).
     *
     * @param addonKey The key of the app, as defined in its descriptor. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "addonPropertiesResourceGetAddonPropertiesGet",
        summary = "Get app properties",
        description = "Gets all the properties of an app.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps published on the Marketplace can access properties of Connect apps they were [migrated from](https://developer.atlassian.com/platform/forge/build-a-connect-on-forge-app/).",
        tags = { "App properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyKeys.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/atlassian-connect/1/addons/{addonKey}/properties",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PropertyKeys> addonPropertiesResourceGetAddonPropertiesGet(
        @Parameter(name = "addonKey", description = "The key of the app, as defined in its descriptor.", required = true, in = ParameterIn.PATH) @PathVariable("addonKey") String addonKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keys\" : [ { \"self\" : \"self\", \"key\" : \"key\" }, { \"self\" : \"self\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey} : Get app property
     * Returns the key and value of an app&#39;s property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches &#x60;addonKey&#x60; can make this request. Additionally, Forge apps published on the Marketplace can access properties of Connect apps they were [migrated from](https://developer.atlassian.com/platform/forge/build-a-connect-on-forge-app/).
     *
     * @param addonKey The key of the app, as defined in its descriptor. (required)
     * @param propertyKey The key of the property. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the property key is longer than 127 characters. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the property is not found or doesn&#39;t belong to the app. (status code 404)
     */
    @Operation(
        operationId = "addonPropertiesResourceGetAddonPropertyGet",
        summary = "Get app property",
        description = "Returns the key and value of an app's property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps published on the Marketplace can access properties of Connect apps they were [migrated from](https://developer.atlassian.com/platform/forge/build-a-connect-on-forge-app/).",
        tags = { "App properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EntityProperty.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the property key is longer than 127 characters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the property is not found or doesn't belong to the app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EntityProperty> addonPropertiesResourceGetAddonPropertyGet(
        @Parameter(name = "addonKey", description = "The key of the app, as defined in its descriptor.", required = true, in = ParameterIn.PATH) @PathVariable("addonKey") String addonKey,
        @Parameter(name = "propertyKey", description = "The key of the property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"value\" : \"\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey} : Set app property
     * Sets the value of an app&#39;s property. Use this resource to store custom data for your app.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Only a Connect app whose key matches &#x60;addonKey&#x60; can make this request.
     *
     * @param addonKey The key of the app, as defined in its descriptor. (required)
     * @param propertyKey The key of the property. (required)
     * @param body  (required)
     * @return Returned if the property is updated. (status code 200)
     *         or Returned is the property is created. (status code 201)
     *         or Returned if:   * the property key is longer than 127 characters.   * the value is not valid JSON.   * the value is longer than 32768 characters. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "addonPropertiesResourcePutAddonPropertyPut",
        summary = "Set app property",
        description = "Sets the value of an app's property. Use this resource to store custom data for your app.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.",
        tags = { "App properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the property is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            }),
            @ApiResponse(responseCode = "201", description = "Returned is the property is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   * the property key is longer than 127 characters.   * the value is not valid JSON.   * the value is longer than 32768 characters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OperationMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OperationMessage> addonPropertiesResourcePutAddonPropertyPut(
        @Parameter(name = "addonKey", description = "The key of the app, as defined in its descriptor.", required = true, in = ParameterIn.PATH) @PathVariable("addonKey") String addonKey,
        @Parameter(name = "propertyKey", description = "The key of the property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"An example message.\", \"statusCode\" : 200 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/expression/analyse : Analyse Jira expression
     * Analyses and validates Jira expressions.  As an experimental feature, this operation can also attempt to type-check the expressions.  Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).  **[Permissions](#permissions) required**: None.
     *
     * @param jiraExpressionForAnalysis The Jira expressions to analyse. (required)
     * @param check The check to perform:   *  &#x60;syntax&#x60; Each expression&#39;s syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression&#39;s length.  *  &#x60;type&#x60; EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don&#39;t exist or passing the wrong number of arguments to functions. Also performs the syntax check.  *  &#x60;complexity&#x60; EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute. (optional, default to syntax)
     * @return Returned if the request is successful. (status code 200)
     *         or 400 response (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or 404 response (status code 404)
     */
    @Operation(
        operationId = "analyseExpression",
        summary = "Analyse Jira expression",
        description = "Analyses and validates Jira expressions.  As an experimental feature, this operation can also attempt to type-check the expressions.  Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).  **[Permissions](#permissions) required**: None.",
        tags = { "Jira expressions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JiraExpressionsAnalysis.class))
            }),
            @ApiResponse(responseCode = "400", description = "400 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "404 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work", "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/expression/analyse",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<JiraExpressionsAnalysis> analyseExpression(
        @Parameter(name = "JiraExpressionForAnalysis", description = "The Jira expressions to analyse.", required = true) @Valid @RequestBody JiraExpressionForAnalysis jiraExpressionForAnalysis,
        @Parameter(name = "check", description = "The check to perform:   *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.  *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.  *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "check", required = false, defaultValue = "syntax") String check
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"valid\" : true, \"complexity\" : { \"variables\" : { \"key\" : \"variables\" }, \"expensiveOperations\" : \"expensiveOperations\" }, \"expression\" : \"expression\", \"type\" : \"type\", \"errors\" : [ { \"expression\" : \"expression\", \"line\" : 6, \"column\" : 0, \"message\" : \"!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.\", \"type\" : \"syntax\" }, { \"expression\" : \"expression\", \"line\" : 6, \"column\" : 0, \"message\" : \"!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.\", \"type\" : \"syntax\" } ] }, { \"valid\" : true, \"complexity\" : { \"variables\" : { \"key\" : \"variables\" }, \"expensiveOperations\" : \"expensiveOperations\" }, \"expression\" : \"expression\", \"type\" : \"type\", \"errors\" : [ { \"expression\" : \"expression\", \"line\" : 6, \"column\" : 0, \"message\" : \"!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.\", \"type\" : \"syntax\" }, { \"expression\" : \"expression\", \"line\" : 6, \"column\" : 0, \"message\" : \"!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.\", \"type\" : \"syntax\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/atlassian-connect/1/migration/field : Bulk update custom field value
     * Updates the value of a custom field added by Connect apps on one or more issues. The values of up to 200 custom fields can be updated.  **[Permissions](#permissions) required:** Only Connect apps can make this request.
     *
     * @param atlassianTransferId The ID of the transfer. (required)
     * @param connectCustomFieldValues  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if: * the transfer ID is not found. * the authorisation credentials are incorrect or missing. (status code 403)
     */
    @Operation(
        operationId = "appIssueFieldValueUpdateResourceUpdateIssueFieldsPut",
        summary = "Bulk update custom field value",
        description = "Updates the value of a custom field added by Connect apps on one or more issues. The values of up to 200 custom fields can be updated.  **[Permissions](#permissions) required:** Only Connect apps can make this request.",
        tags = { "App migration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "403", description = "Returned if: * the transfer ID is not found. * the authorisation credentials are incorrect or missing.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/atlassian-connect/1/migration/field",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> appIssueFieldValueUpdateResourceUpdateIssueFieldsPut(
        @NotNull @Parameter(name = "Atlassian-Transfer-Id", description = "The ID of the transfer.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Atlassian-Transfer-Id", required = true) UUID atlassianTransferId,
        @Parameter(name = "ConnectCustomFieldValues", description = "", required = true) @Valid @RequestBody ConnectCustomFieldValues connectCustomFieldValues
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping : Append mappings to issue type screen scheme
     * Appends issue type to screen scheme mappings to an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @param issueTypeScreenSchemeMappingDetails  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type screen scheme, issue type, or screen scheme is not found. (status code 404)
     *         or Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings. (status code 409)
     */
    @Operation(
        operationId = "appendMappingsForIssueTypeScreenScheme",
        summary = "Append mappings to issue type screen scheme",
        description = "Appends issue type to screen scheme mappings to an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type screen scheme, issue type, or screen scheme is not found."),
            @ApiResponse(responseCode = "409", description = "Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> appendMappingsForIssueTypeScreenScheme(
        @Parameter(name = "issueTypeScreenSchemeId", description = "The ID of the issue type screen scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeScreenSchemeId") String issueTypeScreenSchemeId,
        @Parameter(name = "IssueTypeScreenSchemeMappingDetails", description = "", required = true) @Valid @RequestBody IssueTypeScreenSchemeMappingDetails issueTypeScreenSchemeMappingDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/project/{projectIdOrKey}/archive : Archive project
     * Archives a project. You can&#39;t delete a project if it&#39;s archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permissions. (status code 403)
     *         or Returned if the project is not found. (status code 404)
     */
    @Operation(
        operationId = "archiveProject",
        summary = "Archive project",
        description = "Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/project/{projectIdOrKey}/archive",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> archiveProject(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/fieldconfigurationscheme/project : Assign field configuration scheme to project
     * Assigns a field configuration scheme to a project. If the field configuration scheme ID is &#x60;null&#x60;, the operation assigns the default field configuration scheme.  Field configuration schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldConfigurationSchemeProjectAssociation  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the project is not a classic project. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permissions. (status code 403)
     *         or Returned if the project is missing. (status code 404)
     */
    @Operation(
        operationId = "assignFieldConfigurationSchemeToProject",
        summary = "Assign field configuration scheme to project",
        description = "Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.  Field configuration schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the project is not a classic project."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/fieldconfigurationscheme/project",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> assignFieldConfigurationSchemeToProject(
        @Parameter(name = "FieldConfigurationSchemeProjectAssociation", description = "", required = true) @Valid @RequestBody FieldConfigurationSchemeProjectAssociation fieldConfigurationSchemeProjectAssociation
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issue/{issueIdOrKey}/assignee : Assign issue
     * Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.  If &#x60;name&#x60; or &#x60;accountId&#x60; is set to:   *  &#x60;\&quot;-1\&quot;&#x60;, the issue is assigned to the default assignee for the project.  *  &#x60;null&#x60;, the issue is set to unassigned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue to be assigned. (required)
     * @param user The request object with the user that the issue is assigned to. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if:   *  the user is not found.  *  &#x60;name&#x60;, &#x60;key&#x60;, or &#x60;accountId&#x60; is missing.  *  more than one of &#x60;name&#x60;, &#x60;key&#x60;, and &#x60;accountId&#x60; are provided. (status code 400)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the issue is not found. (status code 404)
     */
    @Operation(
        operationId = "assignIssue",
        summary = "Assign issue",
        description = "Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.  If `name` or `accountId` is set to:   *  `\"-1\"`, the issue is assigned to the default assignee for the project.  *  `null`, the issue is set to unassigned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the user is not found.  *  `name`, `key`, or `accountId` is missing.  *  more than one of `name`, `key`, and `accountId` are provided."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issue/{issueIdOrKey}/assignee",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> assignIssue(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue to be assigned.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "User", description = "The request object with the user that the issue is assigned to.", required = true) @Valid @RequestBody User user
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuetypescheme/project : Assign issue type scheme to project
     * Assigns an issue type scheme to a project.  If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.  Issue type schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeSchemeProjectAssociation  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type scheme or the project is not found. (status code 404)
     */
    @Operation(
        operationId = "assignIssueTypeSchemeToProject",
        summary = "Assign issue type scheme to project",
        description = "Assigns an issue type scheme to a project.  If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.  Issue type schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type scheme or the project is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuetypescheme/project",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> assignIssueTypeSchemeToProject(
        @Parameter(name = "IssueTypeSchemeProjectAssociation", description = "", required = true) @Valid @RequestBody IssueTypeSchemeProjectAssociation issueTypeSchemeProjectAssociation
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuetypescreenscheme/project : Assign issue type screen scheme to project
     * Assigns an issue type screen scheme to a project.  Issue type screen schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeScreenSchemeProjectAssociation  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if:   *  project is not found.  *  issue type screen scheme is not found.  *  the project is not a classic project. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type screen scheme or the project are missing. (status code 404)
     */
    @Operation(
        operationId = "assignIssueTypeScreenSchemeToProject",
        summary = "Assign issue type screen scheme to project",
        description = "Assigns an issue type screen scheme to a project.  Issue type screen schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  project is not found.  *  issue type screen scheme is not found.  *  the project is not a classic project."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type screen scheme or the project are missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuetypescreenscheme/project",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> assignIssueTypeScreenSchemeToProject(
        @Parameter(name = "IssueTypeScreenSchemeProjectAssociation", description = "", required = true) @Valid @RequestBody IssueTypeScreenSchemeProjectAssociation issueTypeScreenSchemeProjectAssociation
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/project/{projectKeyOrId}/permissionscheme : Assign permission scheme
     * Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
     *
     * @param projectKeyOrId The project ID or project key (case sensitive). (required)
     * @param idBean  (required)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the user does not have the necessary permission to edit the project&#39;s configuration.  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be assigned to projects on free plans. (status code 403)
     *         or Returned if the project or permission scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "assignPermissionScheme",
        summary = "Assign permission scheme",
        description = "Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)",
        tags = { "Project permission schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if:   *  the user does not have the necessary permission to edit the project's configuration.  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be assigned to projects on free plans."),
            @ApiResponse(responseCode = "404", description = "Returned if the project or permission scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/project/{projectKeyOrId}/permissionscheme",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PermissionScheme> assignPermissionScheme(
        @Parameter(name = "projectKeyOrId", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectKeyOrId") String projectKeyOrId,
        @Parameter(name = "IdBean", description = "", required = true) @Valid @RequestBody IdBean idBean,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"permissions\" : [ { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 }, { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 } ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/field/{fieldId}/context/{contextId}/project : Assign custom field context to projects
     * Assigns a custom field context to projects.  If any project in the request is assigned to any context of the custom field, the operation fails.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param projectIds  (required)
     * @return Returned if operation is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field, context, or project is not found. (status code 404)
     */
    @Operation(
        operationId = "assignProjectsToCustomFieldContext",
        summary = "Assign custom field context to projects",
        description = "Assigns a custom field context to projects.  If any project in the request is assigned to any context of the custom field, the operation fails.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if operation is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field, context, or project is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}/project",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> assignProjectsToCustomFieldContext(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId,
        @Parameter(name = "ProjectIds", description = "", required = true) @Valid @RequestBody ProjectIds projectIds
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflowscheme/project : Assign workflow scheme to project
     * Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.  Workflow schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param workflowSchemeProjectAssociation  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the workflow scheme or the project are not found. (status code 404)
     */
    @Operation(
        operationId = "assignSchemeToProject",
        summary = "Assign workflow scheme to project",
        description = "Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.  Workflow schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme project associations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme or the project are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflowscheme/project",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> assignSchemeToProject(
        @Parameter(name = "WorkflowSchemeProjectAssociation", description = "", required = true) @Valid @RequestBody WorkflowSchemeProjectAssociation workflowSchemeProjectAssociation
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issue/properties/{propertyKey} : Bulk delete issue property
     * Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.  The criteria the filter used to identify eligible issues are:   *  &#x60;entityIds&#x60; Only issues from this list are eligible.  *  &#x60;currentValue&#x60; Only issues with the property set to this value are eligible.  If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.  If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\\_ISSUES permission for the issue are considered eligible.  This operation is:   *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.  *  [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:**   *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
     *
     * @param propertyKey The key of the property. (required)
     * @param issueFilterForBulkPropertyDelete  (required)
     * @return Returned if the request is successful. (status code 303)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "bulkDeleteIssueProperty",
        summary = "Bulk delete issue property",
        description = "Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.  The criteria the filter used to identify eligible issues are:   *  `entityIds` Only issues from this list are eligible.  *  `currentValue` Only issues with the property set to this value are eligible.  If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.  If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\\_ISSUES permission for the issue are considered eligible.  This operation is:   *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:**   *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.",
        tags = { "Issue properties" },
        responses = {
            @ApiResponse(responseCode = "303", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issue/properties/{propertyKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> bulkDeleteIssueProperty(
        @Parameter(name = "propertyKey", description = "The key of the property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Parameter(name = "IssueFilterForBulkPropertyDelete", description = "", required = true) @Valid @RequestBody IssueFilterForBulkPropertyDelete issueFilterForBulkPropertyDelete
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/group/bulk : Bulk get groups
     * Returns a [paginated](#pagination) list of groups.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param groupId The ID of a group. To specify multiple IDs, pass multiple &#x60;groupId&#x60; parameters. For example, &#x60;groupId&#x3D;5b10a2844c20165700ede21g&amp;groupId&#x3D;5b10ac8d82e05b22cc7d4ef5&#x60;. (optional)
     * @param groupName The name of a group. To specify multiple names, pass multiple &#x60;groupName&#x60; parameters. For example, &#x60;groupName&#x3D;administrators&amp;groupName&#x3D;jira-software-users&#x60;. (optional)
     * @param accessType The access level of a group. Valid values: &#39;site-admin&#39;, &#39;admin&#39;, &#39;user&#39;. (optional)
     * @param applicationKey The application key of the product user groups to search for. Valid values: &#39;jira-servicedesk&#39;, &#39;jira-software&#39;, &#39;jira-product-discovery&#39;, &#39;jira-core&#39;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the group with the given access level can&#39;t be retrieved. (status code 500)
     */
    @Operation(
        operationId = "bulkGetGroups",
        summary = "Bulk get groups",
        description = "Returns a [paginated](#pagination) list of groups.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanGroupDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "500", description = "Returned if the group with the given access level can't be retrieved.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/group/bulk",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanGroupDetails> bulkGetGroups(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "groupId", description = "The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) Set<String> groupId,
        @Parameter(name = "groupName", description = "The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupName", required = false) Set<String> groupName,
        @Parameter(name = "accessType", description = "The access level of a group. Valid values: 'site-admin', 'admin', 'user'.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accessType", required = false) String accessType,
        @Parameter(name = "applicationKey", description = "The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "applicationKey", required = false) String applicationKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"groupId\" : \"groupId\", \"name\" : \"name\" }, { \"groupId\" : \"groupId\", \"name\" : \"name\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/bulk : Bulk get users
     * Returns a [paginated](#pagination) list of the users specified by one or more account IDs.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param accountId The account ID of a user. To specify multiple users, pass multiple &#x60;accountId&#x60; parameters. For example, &#x60;accountId&#x3D;5b10a2844c20165700ede21g&amp;accountId&#x3D;5b10ac8d82e05b22cc7d4ef5&#x60;. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 10)
     * @param username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param key This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if &#x60;accountID&#x60; is missing. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "bulkGetUsers",
        summary = "Bulk get users",
        description = "Returns a [paginated](#pagination) list of the users specified by one or more account IDs.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanUser.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if `accountID` is missing."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/bulk",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanUser> bulkGetUsers(
        @NotNull @Parameter(name = "accountId", description = "The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = true) List<@Size(max = 128)String> accountId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "10") Integer maxResults,
        @Parameter(name = "username", description = "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) List<String> username,
        @Parameter(name = "key", description = "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) List<String> key
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }, { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/bulk/migration : Get account IDs for users
     * Returns the account IDs for the users specified in the &#x60;key&#x60; or &#x60;username&#x60; parameters. Note that multiple &#x60;key&#x60; or &#x60;username&#x60; parameters can be specified.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 10)
     * @param username Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, &#x60;username&#x3D;fred&amp;username&#x3D;barney&#x60;. Required if &#x60;key&#x60; isn&#39;t provided. Cannot be provided if &#x60;key&#x60; is present. (optional)
     * @param key Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, &#x60;key&#x3D;fred&amp;key&#x3D;barney&#x60;. Required if &#x60;username&#x60; isn&#39;t provided. Cannot be provided if &#x60;username&#x60; is present. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if &#x60;key&#x60; or &#x60;username&#x60; (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "bulkGetUsersMigration",
        summary = "Get account IDs for users",
        description = "Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserMigrationBean.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if `key` or `username`"),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/bulk/migration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<UserMigrationBean>> bulkGetUsersMigration(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "10") Integer maxResults,
        @Parameter(name = "username", description = "Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) List<String> username,
        @Parameter(name = "key", description = "Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) List<String> key
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"accountId\" : \"accountId\", \"key\" : \"key\", \"username\" : \"username\" }, { \"accountId\" : \"accountId\", \"key\" : \"key\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/properties/multi : Bulk set issue properties by issue
     * Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.  This operation is:   *  [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  *  non-transactional. Updating some entities may fail. Such information will available in the task result.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param multiIssueEntityProperties Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored. (required)
     * @return Returned if the operation is successful. (status code 303)
     *         or Return if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Return if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "bulkSetIssuePropertiesByIssue",
        summary = "Bulk set issue properties by issue",
        description = "Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.  This operation is:   *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  *  non-transactional. Updating some entities may fail. Such information will available in the task result.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue properties" },
        responses = {
            @ApiResponse(responseCode = "303", description = "Returned if the operation is successful."),
            @ApiResponse(responseCode = "400", description = "Return if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Return if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/properties/multi",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> bulkSetIssuePropertiesByIssue(
        @Parameter(name = "MultiIssueEntityProperties", description = "Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored.", required = true) @Valid @RequestBody MultiIssueEntityProperties multiIssueEntityProperties
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issue/properties/{propertyKey} : Bulk set issue property
     * Sets a property value on multiple issues.  The value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.  The issues to be updated can be specified by a filter.  The filter identifies issues eligible for update using these criteria:   *  &#x60;entityIds&#x60; Only issues from this list are eligible.  *  &#x60;currentValue&#x60; Only issues with the property set to this value are eligible.  *  &#x60;hasProperty&#x60;:           *  If *true*, only issues with the property are eligible.      *  If *false*, only issues without the property are eligible.  If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.  If an invalid combination of criteria is provided, an error is returned. For example, specifying a &#x60;currentValue&#x60; and &#x60;hasProperty&#x60; as *false* would not match any issues (because without the property the property cannot have a value).  The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\\_ISSUES permission for the issue are considered eligible.  This operation is:   *  transactional, either all eligible issues are updated or, when errors occur, none are updated.  *  [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
     *
     * @param propertyKey The key of the property. The maximum length is 255 characters. (required)
     * @param bulkIssuePropertyUpdateRequest  (required)
     * @return Returned if the request is successful. (status code 303)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "bulkSetIssueProperty",
        summary = "Bulk set issue property",
        description = "Sets a property value on multiple issues.  The value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.  The issues to be updated can be specified by a filter.  The filter identifies issues eligible for update using these criteria:   *  `entityIds` Only issues from this list are eligible.  *  `currentValue` Only issues with the property set to this value are eligible.  *  `hasProperty`:           *  If *true*, only issues with the property are eligible.      *  If *false*, only issues without the property are eligible.  If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.  If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).  The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\\_ISSUES permission for the issue are considered eligible.  This operation is:   *  transactional, either all eligible issues are updated or, when errors occur, none are updated.  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.",
        tags = { "Issue properties" },
        responses = {
            @ApiResponse(responseCode = "303", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issue/properties/{propertyKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> bulkSetIssueProperty(
        @Parameter(name = "propertyKey", description = "The key of the property. The maximum length is 255 characters.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Parameter(name = "BulkIssuePropertyUpdateRequest", description = "", required = true) @Valid @RequestBody BulkIssuePropertyUpdateRequest bulkIssuePropertyUpdateRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/properties : Bulk set issues properties by list
     * Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.  This operation is:   *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.  *  [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueEntityProperties Issue properties to be set or updated with values. (required)
     * @return Returned if the operation is successful. (status code 303)
     *         or Return if the request is invalid or the user does not have the necessary permission. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     */
    @Operation(
        operationId = "bulkSetIssuesPropertiesList",
        summary = "Bulk set issues properties by list",
        description = "Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.  This operation is:   *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue properties" },
        responses = {
            @ApiResponse(responseCode = "303", description = "Returned if the operation is successful."),
            @ApiResponse(responseCode = "400", description = "Return if the request is invalid or the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/properties",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> bulkSetIssuesPropertiesList(
        @Parameter(name = "IssueEntityProperties", description = "Issue properties to be set or updated with values.", required = true) @Valid @RequestBody IssueEntityProperties issueEntityProperties
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/task/{taskId}/cancel : Cancel task
     * Cancels a task.  **[Permissions](#permissions) required:** either of:   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  Creator of the task.
     *
     * @param taskId The ID of the task. (required)
     * @return Returned if the request is successful. (status code 202)
     *         or Returned if cancellation of the task is not possible. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the task is not found. (status code 404)
     */
    @Operation(
        operationId = "cancelTask",
        summary = "Cancel task",
        description = "Cancels a task.  **[Permissions](#permissions) required:** either of:   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  Creator of the task.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if cancellation of the task is not possible.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the task is not found.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/task/{taskId}/cancel",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> cancelTask(
        @Parameter(name = "taskId", description = "The ID of the task.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/filter/{id}/owner : Change filter owner
     * Changes the owner of the filter.  **[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the filter to update. (required)
     * @param changeFilterOwner The account ID of the new owner of the filter. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned when:   *  The new owner of the filter owns a filter with the same name.  *  An attempt is made to change owner of the default filter. (status code 400)
     *         or Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission. (status code 403)
     *         or Returned if the filter or the new owner of the filter is not found. (status code 404)
     */
    @Operation(
        operationId = "changeFilterOwner",
        summary = "Change filter owner",
        description = "Changes the owner of the filter.  **[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned when:   *  The new owner of the filter owns a filter with the same name.  *  An attempt is made to change owner of the default filter."),
            @ApiResponse(responseCode = "403", description = "Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the filter or the new owner of the filter is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/filter/{id}/owner",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> changeFilterOwner(
        @Parameter(name = "id", description = "The ID of the filter to update.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ChangeFilterOwner", description = "The account ID of the new owner of the filter.", required = true) @Valid @RequestBody ChangeFilterOwner changeFilterOwner
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/dashboard/{id}/copy : Copy dashboard
     * Copies a dashboard. Any values provided in the &#x60;dashboard&#x60; parameter replace those in the copied dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be copied must be owned by or shared with the user.
     *
     * @param id  (required)
     * @param dashboardDetails Dashboard details. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the dashboard is not found or the dashboard is not owned by or shared with the user. (status code 404)
     */
    @Operation(
        operationId = "copyDashboard",
        summary = "Copy dashboard",
        description = "Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be copied must be owned by or shared with the user.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Dashboard.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/dashboard/{id}/copy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Dashboard> copyDashboard(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "DashboardDetails", description = "Dashboard details.", required = true) @Valid @RequestBody DashboardDetails dashboardDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"automaticRefreshMs\" : 0, \"description\" : \"description\", \"isWritable\" : true, \"view\" : \"view\", \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"popularity\" : 1, \"name\" : \"name\", \"rank\" : 5, \"self\" : \"https://openapi-generator.tech\", \"systemDashboard\" : true, \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"isFavourite\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/component : Create component
     * Creates a component. Use components to provide containers for issues within a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectComponent  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if:   *  the user is not found.  *  &#x60;name&#x60; is not provided.  *  &#x60;name&#x60; is over 255 characters in length.  *  &#x60;projectId&#x60; is not provided.  *  &#x60;assigneeType&#x60; is an invalid value. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. (status code 403)
     *         or Returned if the project is not found or the user does not have permission to browse the project containing the component. (status code 404)
     */
    @Operation(
        operationId = "createComponent",
        summary = "Create component",
        description = "Creates a component. Use components to provide containers for issues within a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project components" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectComponent.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the user is not found.  *  `name` is not provided.  *  `name` is over 255 characters in length.  *  `projectId` is not provided.  *  `assigneeType` is an invalid value."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to browse the project containing the component.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/component",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectComponent> createComponent(
        @Parameter(name = "ProjectComponent", description = "", required = true) @Valid @RequestBody ProjectComponent projectComponent
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/field : Create custom field
     * Creates a custom field.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param customFieldDefinitionJsonBean Definition of the custom field to be created (required)
     * @return Returned if the custom field is created. (status code 201)
     *         or Returned if:   *  the user does not have permission to create custom fields.  *  any of the request object properties have invalid or missing values. (status code 400)
     */
    @Operation(
        operationId = "createCustomField",
        summary = "Create custom field",
        description = "Creates a custom field.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue fields" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the custom field is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FieldDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the user does not have permission to create custom fields.  *  any of the request object properties have invalid or missing values.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/field",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FieldDetails> createCustomField(
        @Parameter(name = "CustomFieldDefinitionJsonBean", description = "Definition of the custom field to be created", required = true) @Valid @RequestBody CustomFieldDefinitionJsonBean customFieldDefinitionJsonBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : \"\", \"navigable\" : true, \"orderable\" : true, \"custom\" : true, \"scope\" : \"\", \"name\" : \"name\", \"clauseNames\" : [ \"clauseNames\", \"clauseNames\" ], \"id\" : \"id\", \"key\" : \"key\", \"searchable\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/field/{fieldId}/context : Create custom field context
     * Creates a custom field context.  If &#x60;projectIds&#x60; is empty, a global context is created. A global context is one that applies to all project. If &#x60;issueTypeIds&#x60; is empty, the context applies to all issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param createCustomFieldContext  (required)
     * @return Returned if the custom field context is created. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the field, project, or issue type is not found. (status code 404)
     *         or Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings. (status code 409)
     */
    @Operation(
        operationId = "createCustomFieldContext",
        summary = "Create custom field context",
        description = "Creates a custom field context.  If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the custom field context is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateCustomFieldContext.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the field, project, or issue type is not found."),
            @ApiResponse(responseCode = "409", description = "Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/field/{fieldId}/context",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateCustomFieldContext> createCustomFieldContext(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "CreateCustomFieldContext", description = "", required = true) @Valid @RequestBody CreateCustomFieldContext createCustomFieldContext
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issueTypeIds\" : [ \"issueTypeIds\", \"issueTypeIds\" ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"projectIds\" : [ \"projectIds\", \"projectIds\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/field/{fieldId}/context/{contextId}/option : Create custom field options (context)
     * Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.  The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param bulkCustomFieldOptionCreateRequest  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the custom field is not found or the context doesn&#39;t match the custom field. (status code 404)
     */
    @Operation(
        operationId = "createCustomFieldOption",
        summary = "Create custom field options (context)",
        description = "Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.  The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field options" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomFieldCreatedContextOptionsList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field is not found or the context doesn't match the custom field.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}/option",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CustomFieldCreatedContextOptionsList> createCustomFieldOption(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId,
        @Parameter(name = "BulkCustomFieldOptionCreateRequest", description = "", required = true) @Valid @RequestBody BulkCustomFieldOptionCreateRequest bulkCustomFieldOptionCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"options\" : [ { \"disabled\" : true, \"optionId\" : \"optionId\", \"id\" : \"id\", \"value\" : \"value\" }, { \"disabled\" : true, \"optionId\" : \"optionId\", \"id\" : \"id\", \"value\" : \"value\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/dashboard : Create dashboard
     * Creates a dashboard.  **[Permissions](#permissions) required:** None.
     *
     * @param dashboardDetails Dashboard details. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "createDashboard",
        summary = "Create dashboard",
        description = "Creates a dashboard.  **[Permissions](#permissions) required:** None.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Dashboard.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/dashboard",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Dashboard> createDashboard(
        @Parameter(name = "DashboardDetails", description = "Dashboard details.", required = true) @Valid @RequestBody DashboardDetails dashboardDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"automaticRefreshMs\" : 0, \"description\" : \"description\", \"isWritable\" : true, \"view\" : \"view\", \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"popularity\" : 1, \"name\" : \"name\", \"rank\" : 5, \"self\" : \"https://openapi-generator.tech\", \"systemDashboard\" : true, \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"isFavourite\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/fieldconfiguration : Create field configuration
     * Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.  This operation can only create configurations for use in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldConfigurationDetails  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createFieldConfiguration",
        summary = "Create field configuration",
        description = "Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.  This operation can only create configurations for use in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FieldConfiguration.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/fieldconfiguration",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FieldConfiguration> createFieldConfiguration(
        @Parameter(name = "FieldConfigurationDetails", description = "", required = true) @Valid @RequestBody FieldConfigurationDetails fieldConfigurationDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/fieldconfigurationscheme : Create field configuration scheme
     * Creates a field configuration scheme.  This operation can only create field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param updateFieldConfigurationSchemeDetails The details of the field configuration scheme. (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permissions. (status code 403)
     */
    @Operation(
        operationId = "createFieldConfigurationScheme",
        summary = "Create field configuration scheme",
        description = "Creates a field configuration scheme.  This operation can only create field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FieldConfigurationScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/fieldconfigurationscheme",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FieldConfigurationScheme> createFieldConfigurationScheme(
        @Parameter(name = "UpdateFieldConfigurationSchemeDetails", description = "The details of the field configuration scheme.", required = true) @Valid @RequestBody UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/filter : Create filter
     * Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param filter The filter to create. (required)
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
     * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "createFilter",
        summary = "Create filter",
        description = "Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Filter.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/filter",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Filter> createFilter(
        @Parameter(name = "Filter", description = "The filter to create.", required = true) @Valid @RequestBody Filter filter,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "overrideSharePermissions", description = "EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideSharePermissions", required = false, defaultValue = "false") Boolean overrideSharePermissions
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"jql\" : \"jql\", \"favouritedCount\" : 0, \"description\" : \"description\", \"favourite\" : true, \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/group : Create group
     * Creates a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     *
     * @param addGroupBean The name of the group. (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if group name is not specified or the group name is in use. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createGroup",
        summary = "Create group",
        description = "Creates a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if group name is not specified or the group name is in use."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/group",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Group> createGroup(
        @Parameter(name = "AddGroupBean", description = "The name of the group.", required = true) @Valid @RequestBody AddGroupBean addGroupBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue : Create issue
     * Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.  The content of the issue or subtask is defined using &#x60;update&#x60; and &#x60;fields&#x60;. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue&#39;s create screen. Note that the &#x60;description&#x60;, &#x60;environment&#x60;, and any &#x60;textarea&#x60; type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (&#x60;textfield&#x60;) accept a string and don&#39;t handle Atlassian Document Format content.  Creating a subtask differs from creating an issue as follows:   *  &#x60;issueType&#x60; must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).  *  &#x60;parent&#x60; must contain the ID or key of the parent issue.  In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.  **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
     *
     * @param issueUpdateDetails  (required)
     * @param updateHistory Whether the project in which the issue is created is added to the user&#39;s **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user&#39;s history for a project. These values are then used to provide defaults on the issue create screen. (optional, default to false)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request:   *  is missing required fields.  *  contains invalid field values.  *  contains fields that cannot be set for the issue type.  *  is by a user who does not have the necessary permission.  *  is to create a subtype in a project different that of the parent issue.  *  is for a subtask when the option to create subtasks is disabled.  *  is invalid for any other reason. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createIssue",
        summary = "Create issue",
        description = "Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.  The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.  Creating a subtask differs from creating an issue as follows:   *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).  *  `parent` must contain the ID or key of the parent issue.  In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.  **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreatedIssue.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request:   *  is missing required fields.  *  contains invalid field values.  *  contains fields that cannot be set for the issue type.  *  is by a user who does not have the necessary permission.  *  is to create a subtype in a project different that of the parent issue.  *  is for a subtask when the option to create subtasks is disabled.  *  is invalid for any other reason.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreatedIssue> createIssue(
        @Parameter(name = "IssueUpdateDetails", description = "", required = true) @Valid @RequestBody IssueUpdateDetails issueUpdateDetails,
        @Parameter(name = "updateHistory", description = "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updateHistory", required = false, defaultValue = "false") Boolean updateHistory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"self\" : \"self\", \"id\" : \"id\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/field/{fieldKey}/option : Create issue field option
     * Creates an option for a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     *
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param issueFieldOptionCreateBean  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the option is invalid. (status code 400)
     *         or Returned if the request is not authenticated as a Jira administrator or the app that provided the field. (status code 403)
     *         or Returned if the field is not found or does not support options. (status code 404)
     */
    @Operation(
        operationId = "createIssueFieldOption",
        summary = "Create issue field option",
        description = "Creates an option for a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.",
        tags = { "Issue custom field options (apps)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueFieldOption.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the option is invalid."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not authenticated as a Jira administrator or the app that provided the field."),
            @ApiResponse(responseCode = "404", description = "Returned if the field is not found or does not support options.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/field/{fieldKey}/option",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IssueFieldOption> createIssueFieldOption(
        @Parameter(name = "fieldKey", description = "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`", required = true, in = ParameterIn.PATH) @PathVariable("fieldKey") String fieldKey,
        @Parameter(name = "IssueFieldOptionCreateBean", description = "", required = true) @Valid @RequestBody IssueFieldOptionCreateBean issueFieldOptionCreateBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"config\" : { \"scope\" : \"\", \"attributes\" : [ \"notSelectable\", \"notSelectable\" ] }, \"value\" : \"value\", \"properties\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issueLinkType : Create issue link type
     * Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link&#39;s inward and outward relationships.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueLinkType  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  issue linking is disabled.  *  the issue link type name is in use.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "createIssueLinkType",
        summary = "Create issue link type",
        description = "Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue link types" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueLinkType.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  issue linking is disabled.  *  the issue link type name is in use.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issueLinkType",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IssueLinkType> createIssueLinkType(
        @Parameter(name = "IssueLinkType", description = "", required = true) @Valid @RequestBody IssueLinkType issueLinkType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"inward\" : \"inward\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"outward\" : \"outward\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issuesecurityschemes : Create issue security scheme
     * Creates a security scheme with security scheme levels and levels&#39; members. You can create up to 100 security scheme levels and security scheme levels&#39; members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param createIssueSecuritySchemeDetails  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createIssueSecurityScheme",
        summary = "Create issue security scheme",
        description = "Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SecuritySchemeId.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issuesecurityschemes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SecuritySchemeId> createIssueSecurityScheme(
        @Parameter(name = "CreateIssueSecuritySchemeDetails", description = "", required = true) @Valid @RequestBody CreateIssueSecuritySchemeDetails createIssueSecuritySchemeDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issuetype : Create issue type
     * Creates an issue type and adds it to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeCreateBean  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is invalid because:   *  no content is sent.  *  the issue type name exceeds 60 characters.  *  a subtask issue type is requested on an instance where subtasks are disabled. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the issue type name is in use. (status code 409)
     */
    @Operation(
        operationId = "createIssueType",
        summary = "Create issue type",
        description = "Creates an issue type and adds it to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue types" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueTypeDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid because:   *  no content is sent.  *  the issue type name exceeds 60 characters.  *  a subtask issue type is requested on an instance where subtasks are disabled."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "409", description = "Returned if the issue type name is in use.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issuetype",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IssueTypeDetails> createIssueType(
        @Parameter(name = "IssueTypeCreateBean", description = "", required = true) @Valid @RequestBody IssueTypeCreateBean issueTypeCreateBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issuetype/{id}/avatar2 : Load issue type avatar
     * Loads an avatar for the issue type.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl --request POST \\ --user email@example.com:&lt;api_token&gt; \\ --header &#39;X-Atlassian-Token: no-check&#39; \\ --header &#39;Content-Type: image/&lt; image_type&gt;&#39; \\ --data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; \\ --url &#39;https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}&#39;This&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type&#39;s displayed avatar.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the issue type. (required)
     * @param size The length of each side of the crop region. (required)
     * @param body  (required)
     * @param x The X coordinate of the top-left corner of the crop region. (optional, default to 0)
     * @param y The Y coordinate of the top-left corner of the crop region. (optional, default to 0)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image.  *  &#x60;cropSize&#x60; is missing.  *  the issue type ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the issue type is not found. (status code 404)
     */
    @Operation(
        operationId = "createIssueTypeAvatar",
        summary = "Load issue type avatar",
        description = "Loads an avatar for the issue type.  Specify the avatar's local file location in the body of the request. Also, include the following headers:   *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.  For example:   `curl --request POST \\ --user email@example.com:<api_token> \\ --header 'X-Atlassian-Token: no-check' \\ --header 'Content-Type: image/< image_type>' \\ --data-binary \"<@/path/to/file/with/your/avatar>\" \\ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue types" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Avatar.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  an image isn't included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image.  *  `cropSize` is missing.  *  the issue type ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issuetype/{id}/avatar2",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Avatar> createIssueTypeAvatar(
        @Parameter(name = "id", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @NotNull @Parameter(name = "size", description = "The length of each side of the crop region.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = true) Integer size,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body,
        @Parameter(name = "x", description = "The X coordinate of the top-left corner of the crop region.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "x", required = false, defaultValue = "0") Integer x,
        @Parameter(name = "y", description = "The Y coordinate of the top-left corner of the crop region.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "y", required = false, defaultValue = "0") Integer y
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issuetypescheme : Create issue type scheme
     * Creates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeSchemeDetails  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the scheme name is used by another scheme. (status code 409)
     */
    @Operation(
        operationId = "createIssueTypeScheme",
        summary = "Create issue type scheme",
        description = "Creates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type schemes" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueTypeSchemeID.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "409", description = "Returned if the scheme name is used by another scheme.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issuetypescheme",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IssueTypeSchemeID> createIssueTypeScheme(
        @Parameter(name = "IssueTypeSchemeDetails", description = "", required = true) @Valid @RequestBody IssueTypeSchemeDetails issueTypeSchemeDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issueTypeSchemeId\" : \"issueTypeSchemeId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issuetypescreenscheme : Create issue type screen scheme
     * Creates an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeScreenSchemeDetails An issue type screen scheme bean. (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type or screen scheme is not found. (status code 404)
     *         or Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings. (status code 409)
     */
    @Operation(
        operationId = "createIssueTypeScreenScheme",
        summary = "Create issue type screen scheme",
        description = "Creates an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueTypeScreenSchemeId.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type or screen scheme is not found."),
            @ApiResponse(responseCode = "409", description = "Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issuetypescreenscheme",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IssueTypeScreenSchemeId> createIssueTypeScreenScheme(
        @Parameter(name = "IssueTypeScreenSchemeDetails", description = "An issue type screen scheme bean.", required = true) @Valid @RequestBody IssueTypeScreenSchemeDetails issueTypeScreenSchemeDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/bulk : Bulk create issue
     * Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.  The content of each issue or subtask is defined using &#x60;update&#x60; and &#x60;fields&#x60;. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues&#39; create screens. Note that the &#x60;description&#x60;, &#x60;environment&#x60;, and any &#x60;textarea&#x60; type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (&#x60;textfield&#x60;) accept a string and don&#39;t handle Atlassian Document Format content.  Creating a subtask differs from creating an issue as follows:   *  &#x60;issueType&#x60; must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).  *  &#x60;parent&#x60; the must contain the ID or key of the parent issue.  **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.
     *
     * @param issuesUpdateBean  (required)
     * @return Returned if any of the issue or subtask creation requests were successful. A request may be unsuccessful when it:   *  is missing required fields.  *  contains invalid field values.  *  contains fields that cannot be set for the issue type.  *  is by a user who does not have the necessary permission.  *  is to create a subtype in a project different that of the parent issue.  *  is for a subtask when the option to create subtasks is disabled.  *  is invalid for any other reason. (status code 201)
     *         or Returned if all requests are invalid. Requests may be unsuccessful when they:   *  are missing required fields.  *  contain invalid field values.  *  contain fields that cannot be set for the issue type.  *  are by a user who does not have the necessary permission.  *  are to create a subtype in a project different that of the parent issue.  *  is for a subtask when the option to create subtasks is disabled.  *  are invalid for any other reason. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "createIssues",
        summary = "Bulk create issue",
        description = "Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.  The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.  Creating a subtask differs from creating an issue as follows:   *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).  *  `parent` the must contain the ID or key of the parent issue.  **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if any of the issue or subtask creation requests were successful. A request may be unsuccessful when it:   *  is missing required fields.  *  contains invalid field values.  *  contains fields that cannot be set for the issue type.  *  is by a user who does not have the necessary permission.  *  is to create a subtype in a project different that of the parent issue.  *  is for a subtask when the option to create subtasks is disabled.  *  is invalid for any other reason.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreatedIssues.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if all requests are invalid. Requests may be unsuccessful when they:   *  are missing required fields.  *  contain invalid field values.  *  contain fields that cannot be set for the issue type.  *  are by a user who does not have the necessary permission.  *  are to create a subtype in a project different that of the parent issue.  *  is for a subtask when the option to create subtasks is disabled.  *  are invalid for any other reason.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreatedIssues.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/bulk",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreatedIssues> createIssues(
        @Parameter(name = "IssuesUpdateBean", description = "", required = true) @Valid @RequestBody IssuesUpdateBean issuesUpdateBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issues\" : [ { \"self\" : \"self\", \"id\" : \"id\", \"key\" : \"key\" }, { \"self\" : \"self\", \"id\" : \"id\", \"key\" : \"key\" } ], \"errors\" : [ { \"elementErrors\" : { \"errorMessages\" : [ \"errorMessages\", \"errorMessages\" ], \"errors\" : { \"key\" : \"errors\" }, \"status\" : 0 }, \"failedElementNumber\" : 6, \"status\" : 1 }, { \"elementErrors\" : { \"errorMessages\" : [ \"errorMessages\", \"errorMessages\" ], \"errors\" : { \"key\" : \"errors\" }, \"status\" : 0 }, \"failedElementNumber\" : 6, \"status\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/notificationscheme : Create notification scheme
     * Creates a notification scheme with notifications. You can create up to 1000 notifications per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param createNotificationSchemeDetails  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createNotificationScheme",
        summary = "Create notification scheme",
        description = "Creates a notification scheme with notifications. You can create up to 1000 notifications per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue notification schemes" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificationSchemeId.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/notificationscheme",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<NotificationSchemeId> createNotificationScheme(
        @Parameter(name = "CreateNotificationSchemeDetails", description = "", required = true) @Valid @RequestBody CreateNotificationSchemeDetails createNotificationSchemeDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/remotelink : Create or update remote issue link
     * Creates or updates a remote issue link for an issue.  If a &#x60;globalId&#x60; is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param remoteIssueLinkRequest  (required)
     * @return Returned if the remote issue link is updated. (status code 200)
     *         or Returned if the remote issue link is created. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to link issues. (status code 403)
     *         or Returned if the issue is not found or the user does not have permission to view the issue. (status code 404)
     */
    @Operation(
        operationId = "createOrUpdateRemoteIssueLink",
        summary = "Create or update remote issue link",
        description = "Creates or updates a remote issue link for an issue.  If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue remote links" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the remote issue link is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RemoteIssueLinkIdentifies.class))
            }),
            @ApiResponse(responseCode = "201", description = "Returned if the remote issue link is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RemoteIssueLinkIdentifies.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to link issues."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/{issueIdOrKey}/remotelink",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RemoteIssueLinkIdentifies> createOrUpdateRemoteIssueLink(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "RemoteIssueLinkRequest", description = "", required = true) @Valid @RequestBody RemoteIssueLinkRequest remoteIssueLinkRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"self\" : \"self\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/permissionscheme/{schemeId}/permission : Create permission grant
     * Creates a permission grant in a permission scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param schemeId The ID of the permission scheme in which to create a new permission grant. (required)
     * @param permissionGrant The permission grant to create. (required)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;all&#x60; Returns all expandable information. (optional)
     * @return Returned if the scheme permission is created. (status code 201)
     *         or Returned if the value for expand is invalid or the same permission grant is present. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createPermissionGrant",
        summary = "Create permission grant",
        description = "Creates a permission grant in a permission scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Permission schemes" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the scheme permission is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionGrant.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the value for expand is invalid or the same permission grant is present."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/permissionscheme/{schemeId}/permission",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PermissionGrant> createPermissionGrant(
        @Parameter(name = "schemeId", description = "The ID of the permission scheme in which to create a new permission grant.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") Long schemeId,
        @Parameter(name = "PermissionGrant", description = "The permission grant to create.", required = true) @Valid @RequestBody PermissionGrant permissionGrant,
        @Parameter(name = "expand", description = "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `permissions` Returns all permission grants for each permission scheme.  *  `user` Returns information about the user who is granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `projectRole` Returns information about the project role granted the permission.  *  `field` Returns information about the custom field granted the permission.  *  `all` Returns all expandable information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/permissionscheme : Create permission scheme
     * Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param permissionScheme The permission scheme to create. (required)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
     * @return Returned if the permission scheme is created. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission or the feature is not available in the Jira plan. (status code 403)
     */
    @Operation(
        operationId = "createPermissionScheme",
        summary = "Create permission scheme",
        description = "Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Permission schemes" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the permission scheme is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission or the feature is not available in the Jira plan.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/permissionscheme",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PermissionScheme> createPermissionScheme(
        @Parameter(name = "PermissionScheme", description = "The permission scheme to create.", required = true) @Valid @RequestBody PermissionScheme permissionScheme,
        @Parameter(name = "expand", description = "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"permissions\" : [ { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 }, { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 } ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/priority : Create priority
     * Creates an issue priority.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param createPriorityDetails  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createPriority",
        summary = "Create priority",
        description = "Creates an issue priority.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue priorities" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriorityId.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/priority",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PriorityId> createPriority(
        @Parameter(name = "CreatePriorityDetails", description = "", required = true) @Valid @RequestBody CreatePriorityDetails createPriorityDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/project : Create project
     * Creates a project based on a project type template, as shown in the following table:  | Project Type Key | Project Template Key |   |--|--|   | &#x60;business&#x60; | &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-content-management&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-process-control&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-procurement&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-project-management&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking&#x60; |   | &#x60;service_desk&#x60; | &#x60;com.atlassian.servicedesk:simplified-it-service-management&#x60;, &#x60;com.atlassian.servicedesk:simplified-general-service-desk-it&#x60;, &#x60;com.atlassian.servicedesk:simplified-general-service-desk-business&#x60;, &#x60;com.atlassian.servicedesk:simplified-internal-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-external-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-hr-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-facilities-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-legal-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-analytics-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-marketing-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-design-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-sales-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-finance-service-desk&#x60; |   | &#x60;software&#x60; | &#x60;com.pyxis.greenhopper.jira:gh-simplified-agility-kanban&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-agility-scrum&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-basic&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-kanban-classic&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-scrum-classic&#x60; |   The project types are available according to the installed Jira features as follows:   *  Jira Core, the default, enables &#x60;business&#x60; projects.  *  Jira Service Management enables &#x60;service_desk&#x60; projects.  *  Jira Software enables &#x60;software&#x60; projects.  To determine which features are installed, go to **Jira settings** &gt; **Apps** &gt; **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** &gt; **Apps** &gt; **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param createProjectDetails The JSON representation of the project being created. (required)
     * @return Returned if the project is created. (status code 201)
     *         or Returned if the request is not valid and the project could not be created. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to create projects. (status code 403)
     */
    @Operation(
        operationId = "createProject",
        summary = "Create project",
        description = "Creates a project based on a project type template, as shown in the following table:  | Project Type Key | Project Template Key |   |--|--|   | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |   | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-internal-service-desk`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-finance-service-desk` |   | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |   The project types are available according to the installed Jira features as follows:   *  Jira Core, the default, enables `business` projects.  *  Jira Service Management enables `service_desk` projects.  *  Jira Software enables `software` projects.  To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the project is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectIdentifiers.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid and the project could not be created."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to create projects.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/project",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectIdentifiers> createProject(
        @Parameter(name = "CreateProjectDetails", description = "The JSON representation of the project being created.", required = true) @Valid @RequestBody CreateProjectDetails createProjectDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"self\" : \"https://openapi-generator.tech\", \"id\" : 0, \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/project/{projectIdOrKey}/avatar2 : Load project avatar
     * Loads an avatar for a project.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl --request POST &#x60;  &#x60;--user email@example.com:&lt;api_token&gt; &#x60;  &#x60;--header &#39;X-Atlassian-Token: no-check&#39; &#x60;  &#x60;--header &#39;Content-Type: image/&lt; image_type&gt;&#39; &#x60;  &#x60;--data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; &#x60;  &#x60;--url &#39;https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2&#39;&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project&#39;s displayed avatar.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     *
     * @param projectIdOrKey The ID or (case-sensitive) key of the project. (required)
     * @param body  (required)
     * @param x The X coordinate of the top-left corner of the crop region. (optional, default to 0)
     * @param y The Y coordinate of the top-left corner of the crop region. (optional, default to 0)
     * @param size The length of each side of the crop region. (optional)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to administer the project or an anonymous call is made to the operation. (status code 403)
     *         or Returned if the project is not found or the user does not have permission to view the project. (status code 404)
     */
    @Operation(
        operationId = "createProjectAvatar",
        summary = "Load project avatar",
        description = "Loads an avatar for a project.  Specify the avatar's local file location in the body of the request. Also, include the following headers:   *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.  For example:   `curl --request POST `  `--user email@example.com:<api_token> `  `--header 'X-Atlassian-Token: no-check' `  `--header 'Content-Type: image/< image_type>' `  `--data-binary \"<@/path/to/file/with/your/avatar>\" `  `--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).",
        tags = { "Project avatars" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Avatar.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  an image isn't included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to administer the project or an anonymous call is made to the operation."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view the project.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/project/{projectIdOrKey}/avatar2",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Avatar> createProjectAvatar(
        @Parameter(name = "projectIdOrKey", description = "The ID or (case-sensitive) key of the project.", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body,
        @Parameter(name = "x", description = "The X coordinate of the top-left corner of the crop region.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "x", required = false, defaultValue = "0") Integer x,
        @Parameter(name = "y", description = "The Y coordinate of the top-left corner of the crop region.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "y", required = false, defaultValue = "0") Integer y,
        @Parameter(name = "size", description = "The length of each side of the crop region.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false) Integer size
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/projectCategory : Create project category
     * Creates a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectCategory  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if:   *  &#x60;name&#x60; is not provided or exceeds 255 characters.  *  &#x60;description&#x60; exceeds 1000 characters. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the project category name is in use. (status code 409)
     */
    @Operation(
        operationId = "createProjectCategory",
        summary = "Create project category",
        description = "Creates a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project categories" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectCategory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `name` is not provided or exceeds 255 characters.  *  `description` exceeds 1000 characters."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "409", description = "Returned if the project category name is in use.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/projectCategory",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectCategory> createProjectCategory(
        @Parameter(name = "ProjectCategory", description = "", required = true) @Valid @RequestBody ProjectCategory projectCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/role : Create project role
     * Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.  *Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*&lt;  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param createUpdateRoleRequestBean  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have administrative permissions. (status code 403)
     *         or Returned if a project role with the provided name already exists. (status code 409)
     */
    @Operation(
        operationId = "createProjectRole",
        summary = "Create project role",
        description = "Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.  *Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectRole.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have administrative permissions."),
            @ApiResponse(responseCode = "409", description = "Returned if a project role with the provided name already exists.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/role",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectRole> createProjectRole(
        @Parameter(name = "CreateUpdateRoleRequestBean", description = "", required = true) @Valid @RequestBody CreateUpdateRoleRequestBean createUpdateRoleRequestBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/resolution : Create resolution
     * Creates an issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param createResolutionDetails  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createResolution",
        summary = "Create resolution",
        description = "Creates an issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue resolutions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResolutionId.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/resolution",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ResolutionId> createResolution(
        @Parameter(name = "CreateResolutionDetails", description = "", required = true) @Valid @RequestBody CreateResolutionDetails createResolutionDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/screens : Create screen
     * Creates a screen with a default field tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenDetails  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     */
    @Operation(
        operationId = "createScreen",
        summary = "Create screen",
        description = "Creates a screen with a default field tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screens" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Screen.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/screens",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Screen> createScreen(
        @Parameter(name = "ScreenDetails", description = "", required = true) @Valid @RequestBody ScreenDetails screenDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/screenscheme : Create screen scheme
     * Creates a screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenSchemeDetails  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if a screen used as one of the screen types in the screen scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "createScreenScheme",
        summary = "Create screen scheme",
        description = "Creates a screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen schemes" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScreenSchemeId.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if a screen used as one of the screen types in the screen scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/screenscheme",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ScreenSchemeId> createScreenScheme(
        @Parameter(name = "ScreenSchemeDetails", description = "", required = true) @Valid @RequestBody ScreenSchemeDetails screenSchemeDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/statuses : Bulk create statuses
     * Creates statuses for a global or project scope.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     *
     * @param statusCreateRequest Details of the statuses being created and their scope. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. (status code 401)
     */
    @Operation(
        operationId = "createStatuses",
        summary = "Bulk create statuses",
        description = "Creates statuses for a global or project scope.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)",
        tags = { "Status" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JiraStatus.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/statuses",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<JiraStatus>> createStatuses(
        @Parameter(name = "StatusCreateRequest", description = "Details of the statuses being created and their scope.", required = true) @Valid @RequestBody StatusCreateRequest statusCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"scope\" : { \"project\" : { \"id\" : \"id\" }, \"type\" : \"PROJECT\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"usages\" : [ { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] }, { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] } ], \"statusCategory\" : \"TODO\" }, { \"scope\" : { \"project\" : { \"id\" : \"id\" }, \"type\" : \"PROJECT\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"usages\" : [ { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] }, { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] } ], \"statusCategory\" : \"TODO\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/uiModifications : Create UI modification
     * Creates a UI modification. UI modification can only be created by Forge apps.  Each app can define up to 100 UI modifications. Each UI modification can define up to 1000 contexts.  **[Permissions](#permissions) required:**   *  *None* if the UI modification is created without contexts.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
     *
     * @param createUiModificationDetails Details of the UI modification. (required)
     * @return Returned if the UI modification is created. (status code 201)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the request is not from a Forge app. (status code 403)
     *         or Returned if a project or an issue type in the context are not found. (status code 404)
     */
    @Operation(
        operationId = "createUiModification",
        summary = "Create UI modification",
        description = "Creates a UI modification. UI modification can only be created by Forge apps.  Each app can define up to 100 UI modifications. Each UI modification can define up to 1000 contexts.  **[Permissions](#permissions) required:**   *  *None* if the UI modification is created without contexts.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.",
        tags = { "UI modifications (apps)" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the UI modification is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UiModificationIdentifiers.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not from a Forge app."),
            @ApiResponse(responseCode = "404", description = "Returned if a project or an issue type in the context are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/uiModifications",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UiModificationIdentifiers> createUiModification(
        @Parameter(name = "CreateUiModificationDetails", description = "Details of the UI modification.", required = true) @Valid @RequestBody CreateUiModificationDetails createUiModificationDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"self\" : \"self\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/user : Create user
     * Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.  If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param newUserDetails Details about the user to be created. (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is invalid or the number of licensed users is exceeded. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create user",
        description = "Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.  If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid or the number of licensed users is exceeded."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> createUser(
        @Parameter(name = "NewUserDetails", description = "Details about the user to be created.", required = true) @Valid @RequestBody NewUserDetails newUserDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/version : Create version
     * Creates a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.
     *
     * @param version  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the project is not found.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "createVersion",
        summary = "Create version",
        description = "Creates a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.",
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Version.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the project is not found.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/version",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Version> createVersion(
        @Parameter(name = "Version", description = "", required = true) @Valid @RequestBody Version version
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/workflow : Create workflow
     * Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used.  #### Conditions ####  Conditions enable workflow rules that govern whether a transition can execute.  ##### Always false condition #####  A condition that always fails.      {        \&quot;type\&quot;: \&quot;AlwaysFalseCondition\&quot;      }  ##### Block transition until approval #####  A condition that blocks issue transition if there is a pending approval.      {        \&quot;type\&quot;: \&quot;BlockInProgressApprovalCondition\&quot;      }  ##### Compare number custom field condition #####  A condition that allows transition if a comparison between a number custom field and a value is true.      {        \&quot;type\&quot;: \&quot;CompareNumberCFCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;comparator\&quot;: \&quot;&#x3D;\&quot;,          \&quot;fieldId\&quot;: \&quot;customfield_10029\&quot;,          \&quot;fieldValue\&quot;: 2        }      }   *  &#x60;comparator&#x60; One of the supported comparator: &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, and &#x60;&lt;&#x60;.  *  &#x60;fieldId&#x60; The custom numeric field ID. Allowed field types:           *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:float&#x60;      *  &#x60;com.pyxis.greenhopper.jira:jsw-story-points&#x60;  *  &#x60;fieldValue&#x60; The value for comparison.  ##### Hide from user condition #####  A condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.      {        \&quot;type\&quot;: \&quot;RemoteOnlyCondition\&quot;      }  ##### Only assignee condition #####  A condition that allows only the assignee to execute a transition.      {        \&quot;type\&quot;: \&quot;AllowOnlyAssignee\&quot;      }  ##### Only Bamboo notifications workflow condition #####  A condition that makes the transition available only to Bamboo build notifications.      {        \&quot;type\&quot;: \&quot;OnlyBambooNotificationsCondition\&quot;      }  ##### Only reporter condition #####  A condition that allows only the reporter to execute a transition.      {        \&quot;type\&quot;: \&quot;AllowOnlyReporter\&quot;      }  ##### Permission condition #####  A condition that allows only users with a permission to execute a transition.      {        \&quot;type\&quot;: \&quot;PermissionCondition\&quot;,        \&quot;configuration\&quot;: {            \&quot;permissionKey\&quot;: \&quot;BROWSE_PROJECTS\&quot;        }      }   *  &#x60;permissionKey&#x60; The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.  ##### Previous status condition #####  A condition that allows a transition based on whether an issue has or has not transitioned through a status.      {        \&quot;type\&quot;: \&quot;PreviousStatusCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;ignoreLoopTransitions\&quot;: true,          \&quot;includeCurrentStatus\&quot;: true,          \&quot;mostRecentStatusOnly\&quot;: true,          \&quot;reverseCondition\&quot;: true,          \&quot;previousStatus\&quot;: {            \&quot;id\&quot;: \&quot;5\&quot;          }        }      }  By default this condition allows the transition if the status, as defined by its ID in the &#x60;previousStatus&#x60; object, matches any previous issue status, unless:   *  &#x60;ignoreLoopTransitions&#x60; is &#x60;true&#x60;, then loop transitions (from and to the same status) are ignored.  *  &#x60;includeCurrentStatus&#x60; is &#x60;true&#x60;, then the current issue status is also checked.  *  &#x60;mostRecentStatusOnly&#x60; is &#x60;true&#x60;, then only the issue&#39;s preceding status (the one immediately before the current status) is checked.  *  &#x60;reverseCondition&#x60; is &#x60;true&#x60;, then the status must not be present.  ##### Separation of duties condition #####  A condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.      {        \&quot;type\&quot;: \&quot;SeparationOfDutiesCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;fromStatus\&quot;: {            \&quot;id\&quot;: \&quot;5\&quot;          },          \&quot;toStatus\&quot;: {            \&quot;id\&quot;: \&quot;6\&quot;          }        }      }   *  &#x60;fromStatus&#x60; OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to &#x60;toStatus&#x60; is blocked.  *  &#x60;toStatus&#x60; An object containing the ID of the target status of the transition that is blocked.  ##### Subtask blocking condition #####  A condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.      {        \&quot;type\&quot;: \&quot;SubTaskBlockingCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;statuses\&quot;: [            {              \&quot;id\&quot;: \&quot;1\&quot;            },            {              \&quot;id\&quot;: \&quot;3\&quot;            }          ]        }      }   *  &#x60;statuses&#x60; A list of objects containing status IDs.  ##### User is in any group condition #####  A condition that allows users belonging to any group from a list of groups to execute a transition.      {        \&quot;type\&quot;: \&quot;UserInAnyGroupCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;groups\&quot;: [            \&quot;administrators\&quot;,            \&quot;atlassian-addons-admin\&quot;          ]        }      }   *  &#x60;groups&#x60; A list of group names.  ##### User is in any project role condition #####  A condition that allows only users with at least one project roles from a list of project roles to execute a transition.      {        \&quot;type\&quot;: \&quot;InAnyProjectRoleCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;projectRoles\&quot;: [            {              \&quot;id\&quot;: \&quot;10002\&quot;            },            {              \&quot;id\&quot;: \&quot;10003\&quot;            },            {              \&quot;id\&quot;: \&quot;10012\&quot;            },            {              \&quot;id\&quot;: \&quot;10013\&quot;            }          ]        }      }   *  &#x60;projectRoles&#x60; A list of objects containing project role IDs.  ##### User is in custom field condition #####  A condition that allows only users listed in a given custom field to execute the transition.      {        \&quot;type\&quot;: \&quot;UserIsInCustomFieldCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;allowUserInField\&quot;: false,          \&quot;fieldId\&quot;: \&quot;customfield_10010\&quot;        }      }   *  &#x60;allowUserInField&#x60; If &#x60;true&#x60; only a user who is listed in &#x60;fieldId&#x60; can perform the transition, otherwise, only a user who is not listed in &#x60;fieldId&#x60; can perform the transition.  *  &#x60;fieldId&#x60; The ID of the field containing the list of users.  ##### User is in group condition #####  A condition that allows users belonging to a group to execute a transition.      {        \&quot;type\&quot;: \&quot;UserInGroupCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;group\&quot;: \&quot;administrators\&quot;        }      }   *  &#x60;group&#x60; The name of the group.  ##### User is in group custom field condition #####  A condition that allows users belonging to a group specified in a custom field to execute a transition.      {        \&quot;type\&quot;: \&quot;InGroupCFCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;fieldId\&quot;: \&quot;customfield_10012\&quot;        }      }   *  &#x60;fieldId&#x60; The ID of the field. Allowed field types:           *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:grouppicker&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:select&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:multiselect&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes&#x60;      *  &#x60;com.pyxis.greenhopper.jira:gh-epic-status&#x60;  ##### User is in project role condition #####  A condition that allows users with a project role to execute a transition.      {        \&quot;type\&quot;: \&quot;InProjectRoleCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;projectRole\&quot;: {            \&quot;id\&quot;: \&quot;10002\&quot;          }        }      }   *  &#x60;projectRole&#x60; An object containing the ID of a project role.  ##### Value field condition #####  A conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.      {        \&quot;type\&quot;: \&quot;ValueFieldCondition\&quot;,        \&quot;configuration\&quot;: {          \&quot;fieldId\&quot;: \&quot;assignee\&quot;,          \&quot;fieldValue\&quot;: \&quot;qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f\&quot;,          \&quot;comparisonType\&quot;: \&quot;NUMBER\&quot;,          \&quot;comparator\&quot;: \&quot;&#x3D;\&quot;        }      }   *  &#x60;fieldId&#x60; The ID of a field used in the comparison.  *  &#x60;fieldValue&#x60; The expected value of the field.  *  &#x60;comparisonType&#x60; The type of the comparison. Allowed values: &#x60;STRING&#x60;, &#x60;NUMBER&#x60;, &#x60;DATE&#x60;, &#x60;DATE_WITHOUT_TIME&#x60;, or &#x60;OPTIONID&#x60;.  *  &#x60;comparator&#x60; One of the supported comparator: &#x60;&gt;&#x60;, &#x60;&gt;&#x3D;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&lt;&#x60;, &#x60;!&#x3D;&#x60;.  **Notes:**   *  If you choose the comparison type &#x60;STRING&#x60;, only &#x60;&#x3D;&#x60; and &#x60;!&#x3D;&#x60; are valid options.  *  You may leave &#x60;fieldValue&#x60; empty when comparison type is &#x60;!&#x3D;&#x60; to indicate that a value is required in the field.  *  For date fields without time format values as &#x60;yyyy-MM-dd&#x60;, and for those with time as &#x60;yyyy-MM-dd HH:mm&#x60;. For example, for July 16 2021 use &#x60;2021-07-16&#x60;, for 8:05 AM use &#x60;2021-07-16 08:05&#x60;, and for 4 PM: &#x60;2021-07-16 16:00&#x60;.  #### Validators ####  Validators check that any input made to the transition is valid before the transition is performed.  ##### Date field validator #####  A validator that compares two dates.      {        \&quot;type\&quot;: \&quot;DateFieldValidator\&quot;,        \&quot;configuration\&quot;: {            \&quot;comparator\&quot;: \&quot;&gt;\&quot;,            \&quot;date1\&quot;: \&quot;updated\&quot;,            \&quot;date2\&quot;: \&quot;created\&quot;,            \&quot;expression\&quot;: \&quot;1d\&quot;,            \&quot;includeTime\&quot;: true          }      }   *  &#x60;comparator&#x60; One of the supported comparator: &#x60;&gt;&#x60;, &#x60;&gt;&#x3D;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&lt;&#x60;, or &#x60;!&#x3D;&#x60;.  *  &#x60;date1&#x60; The date field to validate. Allowed field types:           *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:datepicker&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:datetime&#x60;      *  &#x60;com.atlassian.jpo:jpo-custom-field-baseline-end&#x60;      *  &#x60;com.atlassian.jpo:jpo-custom-field-baseline-start&#x60;      *  &#x60;duedate&#x60;      *  &#x60;created&#x60;      *  &#x60;updated&#x60;      *  &#x60;resolutiondate&#x60;  *  &#x60;date2&#x60; The second date field. Required, if &#x60;expression&#x60; is not passed. Allowed field types:           *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:datepicker&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:datetime&#x60;      *  &#x60;com.atlassian.jpo:jpo-custom-field-baseline-end&#x60;      *  &#x60;com.atlassian.jpo:jpo-custom-field-baseline-start&#x60;      *  &#x60;duedate&#x60;      *  &#x60;created&#x60;      *  &#x60;updated&#x60;      *  &#x60;resolutiondate&#x60;  *  &#x60;expression&#x60; An expression specifying an offset. Required, if &#x60;date2&#x60; is not passed. Offsets are built with a number, with &#x60;-&#x60; as prefix for the past, and one of these time units: &#x60;d&#x60; for day, &#x60;w&#x60; for week, &#x60;m&#x60; for month, or &#x60;y&#x60; for year. For example, -2d means two days into the past and 1w means one week into the future. The &#x60;now&#x60; keyword enables a comparison with the current date.  *  &#x60;includeTime&#x60; If &#x60;true&#x60;, then the time part of the data is included for the comparison. If the field doesn&#39;t have a time part, 00:00:00 is used.  ##### Windows date validator #####  A validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.      {        \&quot;type\&quot;: \&quot;WindowsDateValidator\&quot;,        \&quot;configuration\&quot;: {            \&quot;date1\&quot;: \&quot;customfield_10009\&quot;,            \&quot;date2\&quot;: \&quot;created\&quot;,            \&quot;windowsDays\&quot;: 5          }      }   *  &#x60;date1&#x60; The date field to validate. Allowed field types:           *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:datepicker&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:datetime&#x60;      *  &#x60;com.atlassian.jpo:jpo-custom-field-baseline-end&#x60;      *  &#x60;com.atlassian.jpo:jpo-custom-field-baseline-start&#x60;      *  &#x60;duedate&#x60;      *  &#x60;created&#x60;      *  &#x60;updated&#x60;      *  &#x60;resolutiondate&#x60;  *  &#x60;date2&#x60; The reference date. Allowed field types:           *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:datepicker&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:datetime&#x60;      *  &#x60;com.atlassian.jpo:jpo-custom-field-baseline-end&#x60;      *  &#x60;com.atlassian.jpo:jpo-custom-field-baseline-start&#x60;      *  &#x60;duedate&#x60;      *  &#x60;created&#x60;      *  &#x60;updated&#x60;      *  &#x60;resolutiondate&#x60;  *  &#x60;windowsDays&#x60; A positive integer indicating a number of days.  ##### Field required validator #####  A validator that checks fields are not empty. By default, if a field is not included in the current context it&#39;s ignored and not validated.      {          \&quot;type\&quot;: \&quot;FieldRequiredValidator\&quot;,          \&quot;configuration\&quot;: {              \&quot;ignoreContext\&quot;: true,              \&quot;errorMessage\&quot;: \&quot;Hey\&quot;,              \&quot;fieldIds\&quot;: [                  \&quot;versions\&quot;,                  \&quot;customfield_10037\&quot;,                  \&quot;customfield_10003\&quot;              ]          }      }   *  &#x60;ignoreContext&#x60; If &#x60;true&#x60;, then the context is ignored and all the fields are validated.  *  &#x60;errorMessage&#x60; OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.  *  &#x60;fieldIds&#x60; The list of fields to validate.  ##### Field changed validator #####  A validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.      {          \&quot;type\&quot;: \&quot;FieldChangedValidator\&quot;,          \&quot;configuration\&quot;: {              \&quot;fieldId\&quot;: \&quot;comment\&quot;,              \&quot;errorMessage\&quot;: \&quot;Hey\&quot;,              \&quot;exemptedGroups\&quot;: [                  \&quot;administrators\&quot;,                  \&quot;atlassian-addons-admin\&quot;              ]          }      }   *  &#x60;fieldId&#x60; The ID of a field.  *  &#x60;errorMessage&#x60; OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.  *  &#x60;exemptedGroups&#x60; OPTIONAL. The list of groups.  ##### Field has single value validator #####  A validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.      {          \&quot;type\&quot;: \&quot;FieldHasSingleValueValidator\&quot;,          \&quot;configuration\&quot;: {              \&quot;fieldId\&quot;: \&quot;attachment,              \&quot;excludeSubtasks\&quot;: true          }      }   *  &#x60;fieldId&#x60; The ID of a field.  *  &#x60;excludeSubtasks&#x60; If &#x60;true&#x60;, then values copied from subtasks are ignored.  ##### Parent status validator #####  A validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.      {          \&quot;type\&quot;: \&quot;ParentStatusValidator\&quot;,          \&quot;configuration\&quot;: {              \&quot;parentStatuses\&quot;: [                  {                    \&quot;id\&quot;:\&quot;1\&quot;                  },                  {                    \&quot;id\&quot;:\&quot;2\&quot;                  }              ]          }      }   *  &#x60;parentStatus&#x60; The list of required parent issue statuses.  ##### Permission validator #####  A validator that checks the user has a permission.      {        \&quot;type\&quot;: \&quot;PermissionValidator\&quot;,        \&quot;configuration\&quot;: {            \&quot;permissionKey\&quot;: \&quot;ADMINISTER_PROJECTS\&quot;        }      }   *  &#x60;permissionKey&#x60; The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.  ##### Previous status validator #####  A validator that checks if the issue has held a status.      {        \&quot;type\&quot;: \&quot;PreviousStatusValidator\&quot;,        \&quot;configuration\&quot;: {            \&quot;mostRecentStatusOnly\&quot;: false,            \&quot;previousStatus\&quot;: {                \&quot;id\&quot;: \&quot;15\&quot;            }        }      }   *  &#x60;mostRecentStatusOnly&#x60; If &#x60;true&#x60;, then only the issue&#39;s preceding status (the one immediately before the current status) is checked.  *  &#x60;previousStatus&#x60; An object containing the ID of an issue status.  ##### Regular expression validator #####  A validator that checks the content of a field against a regular expression.      {        \&quot;type\&quot;: \&quot;RegexpFieldValidator\&quot;,        \&quot;configuration\&quot;: {            \&quot;regExp\&quot;: \&quot;[0-9]\&quot;,            \&quot;fieldId\&quot;: \&quot;customfield_10029\&quot;        }      }   *  &#x60;regExp&#x60;A regular expression.  *  &#x60;fieldId&#x60; The ID of a field. Allowed field types:           *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:select&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:multiselect&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:textarea&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:textfield&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:url&#x60;      *  &#x60;com.atlassian.jira.plugin.system.customfieldtypes:float&#x60;      *  &#x60;com.pyxis.greenhopper.jira:jsw-story-points&#x60;      *  &#x60;com.pyxis.greenhopper.jira:gh-epic-status&#x60;      *  &#x60;description&#x60;      *  &#x60;summary&#x60;  ##### User permission validator #####  A validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.      {          \&quot;type\&quot;: \&quot;UserPermissionValidator\&quot;,          \&quot;configuration\&quot;: {              \&quot;permissionKey\&quot;: \&quot;BROWSE_PROJECTS\&quot;,              \&quot;nullAllowed\&quot;: false,              \&quot;username\&quot;: \&quot;TestUser\&quot;          }      }   *  &#x60;permissionKey&#x60; The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.  *  &#x60;nullAllowed&#x60; If &#x60;true&#x60;, allows the transition when &#x60;username&#x60; is empty.  *  &#x60;username&#x60; The username to validate against the &#x60;permissionKey&#x60;.  #### Post functions ####  Post functions carry out any additional processing required after a Jira workflow transition is executed.  ##### Fire issue event function #####  A post function that fires an event that is processed by the listeners.      {        \&quot;type\&quot;: \&quot;FireIssueEventFunction\&quot;,        \&quot;configuration\&quot;: {          \&quot;event\&quot;: {            \&quot;id\&quot;:\&quot;1\&quot;          }        }      }  **Note:** If provided, this post function overrides the default &#x60;FireIssueEventFunction&#x60;. Can be included once in a transition.   *  &#x60;event&#x60; An object containing the ID of the issue event.  ##### Update issue status #####  A post function that sets issue status to the linked status of the destination workflow status.      {        \&quot;type\&quot;: \&quot;UpdateIssueStatusFunction\&quot;      }  **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.  ##### Create comment #####  A post function that adds a comment entered during the transition to an issue.      {        \&quot;type\&quot;: \&quot;CreateCommentFunction\&quot;      }  **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.  ##### Store issue #####  A post function that stores updates to an issue.      {        \&quot;type\&quot;: \&quot;IssueStoreFunction\&quot;      }  **Note:** This post function can only be added to the initial transition and can only be added once.  ##### Assign to current user function #####  A post function that assigns the issue to the current user if the current user has the &#x60;ASSIGNABLE_USER&#x60; permission.      {          \&quot;type\&quot;: \&quot;AssignToCurrentUserFunction\&quot;      }  **Note:** This post function can be included once in a transition.  ##### Assign to lead function #####  A post function that assigns the issue to the project or component lead developer.      {          \&quot;type\&quot;: \&quot;AssignToLeadFunction\&quot;      }  **Note:** This post function can be included once in a transition.  ##### Assign to reporter function #####  A post function that assigns the issue to the reporter.      {          \&quot;type\&quot;: \&quot;AssignToReporterFunction\&quot;      }  **Note:** This post function can be included once in a transition.  ##### Clear field value function #####  A post function that clears the value from a field.      {        \&quot;type\&quot;: \&quot;ClearFieldValuePostFunction\&quot;,        \&quot;configuration\&quot;: {          \&quot;fieldId\&quot;: \&quot;assignee\&quot;        }      }   *  &#x60;fieldId&#x60; The ID of the field.  ##### Copy value from other field function #####  A post function that copies the value of one field to another, either within an issue or from parent to subtask.      {        \&quot;type\&quot;: \&quot;CopyValueFromOtherFieldPostFunction\&quot;,        \&quot;configuration\&quot;: {          \&quot;sourceFieldId\&quot;: \&quot;assignee\&quot;,          \&quot;destinationFieldId\&quot;: \&quot;creator\&quot;,          \&quot;copyType\&quot;: \&quot;same\&quot;        }      }   *  &#x60;sourceFieldId&#x60; The ID of the source field.  *  &#x60;destinationFieldId&#x60; The ID of the destination field.  *  &#x60;copyType&#x60; Use &#x60;same&#x60; to copy the value from a field inside the issue, or &#x60;parent&#x60; to copy the value from the parent issue.  ##### Create Crucible review workflow function #####  A post function that creates a Crucible review for all unreviewed code for the issue.      {          \&quot;type\&quot;: \&quot;CreateCrucibleReviewWorkflowFunction\&quot;      }  **Note:** This post function can be included once in a transition.  ##### Set issue security level based on user&#39;s project role function #####  A post function that sets the issue&#39;s security level if the current user has a project role.      {        \&quot;type\&quot;: \&quot;SetIssueSecurityFromRoleFunction\&quot;,        \&quot;configuration\&quot;: {          \&quot;projectRole\&quot;: {              \&quot;id\&quot;:\&quot;10002\&quot;          },          \&quot;issueSecurityLevel\&quot;: {              \&quot;id\&quot;:\&quot;10000\&quot;          }        }      }   *  &#x60;projectRole&#x60; An object containing the ID of the project role.  *  &#x60;issueSecurityLevel&#x60; OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to &#x60;none&#x60;.  ##### Trigger a webhook function #####  A post function that triggers a webhook.      {        \&quot;type\&quot;: \&quot;TriggerWebhookFunction\&quot;,        \&quot;configuration\&quot;: {          \&quot;webhook\&quot;: {            \&quot;id\&quot;: \&quot;1\&quot;          }        }      }   *  &#x60;webhook&#x60; An object containing the ID of the webhook listener to trigger.  ##### Update issue custom field function #####  A post function that updates the content of an issue custom field.      {        \&quot;type\&quot;: \&quot;UpdateIssueCustomFieldPostFunction\&quot;,        \&quot;configuration\&quot;: {          \&quot;mode\&quot;: \&quot;append\&quot;,          \&quot;fieldId\&quot;: \&quot;customfield_10003\&quot;,          \&quot;fieldValue\&quot;: \&quot;yikes\&quot;        }      }   *  &#x60;mode&#x60; Use &#x60;replace&#x60; to override the field content with &#x60;fieldValue&#x60; or &#x60;append&#x60; to add &#x60;fieldValue&#x60; to the end of the field content.  *  &#x60;fieldId&#x60; The ID of the field.  *  &#x60;fieldValue&#x60; The update content.  ##### Update issue field function #####  A post function that updates a simple issue field.      {        \&quot;type\&quot;: \&quot;UpdateIssueFieldFunction\&quot;,        \&quot;configuration\&quot;: {          \&quot;fieldId\&quot;: \&quot;assignee\&quot;,          \&quot;fieldValue\&quot;: \&quot;5f0c277e70b8a90025a00776\&quot;        }      }   *  &#x60;fieldId&#x60; The ID of the field. Allowed field types:           *  &#x60;assignee&#x60;      *  &#x60;description&#x60;      *  &#x60;environment&#x60;      *  &#x60;priority&#x60;      *  &#x60;resolution&#x60;      *  &#x60;summary&#x60;      *  &#x60;timeoriginalestimate&#x60;      *  &#x60;timeestimate&#x60;      *  &#x60;timespent&#x60;  *  &#x60;fieldValue&#x60; The update value.  *  If the &#x60;fieldId&#x60; is &#x60;assignee&#x60;, the &#x60;fieldValue&#x60; should be one of these values:           *  an account ID.      *  &#x60;automatic&#x60;.      *  a blank string, which sets the value to &#x60;unassigned&#x60;.  #### Connect rules ####  Connect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule&#39;s module must exist.      {        \&quot;type\&quot;: \&quot;appKey__moduleKey\&quot;,        \&quot;configuration\&quot;: {          \&quot;value\&quot;:\&quot;{\\\&quot;isValid\\\&quot;:\\\&quot;true\\\&quot;}\&quot;        }      }   *  &#x60;type&#x60; A Connect rule key in a form of &#x60;appKey__moduleKey&#x60;.  *  &#x60;value&#x60; The stringified JSON configuration of a Connect rule.  #### Forge rules ####  Forge transition rules are not yet supported.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param createWorkflowDetails The workflow details. (required)
     * @return Returned if the workflow is created. (status code 201)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if one or more statuses is not found. (status code 404)
     */
    @Operation(
        operationId = "createWorkflow",
        summary = "Create workflow",
        description = "Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used.  #### Conditions ####  Conditions enable workflow rules that govern whether a transition can execute.  ##### Always false condition #####  A condition that always fails.      {        \"type\": \"AlwaysFalseCondition\"      }  ##### Block transition until approval #####  A condition that blocks issue transition if there is a pending approval.      {        \"type\": \"BlockInProgressApprovalCondition\"      }  ##### Compare number custom field condition #####  A condition that allows transition if a comparison between a number custom field and a value is true.      {        \"type\": \"CompareNumberCFCondition\",        \"configuration\": {          \"comparator\": \"=\",          \"fieldId\": \"customfield_10029\",          \"fieldValue\": 2        }      }   *  `comparator` One of the supported comparator: `=`, `>`, and `<`.  *  `fieldId` The custom numeric field ID. Allowed field types:           *  `com.atlassian.jira.plugin.system.customfieldtypes:float`      *  `com.pyxis.greenhopper.jira:jsw-story-points`  *  `fieldValue` The value for comparison.  ##### Hide from user condition #####  A condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.      {        \"type\": \"RemoteOnlyCondition\"      }  ##### Only assignee condition #####  A condition that allows only the assignee to execute a transition.      {        \"type\": \"AllowOnlyAssignee\"      }  ##### Only Bamboo notifications workflow condition #####  A condition that makes the transition available only to Bamboo build notifications.      {        \"type\": \"OnlyBambooNotificationsCondition\"      }  ##### Only reporter condition #####  A condition that allows only the reporter to execute a transition.      {        \"type\": \"AllowOnlyReporter\"      }  ##### Permission condition #####  A condition that allows only users with a permission to execute a transition.      {        \"type\": \"PermissionCondition\",        \"configuration\": {            \"permissionKey\": \"BROWSE_PROJECTS\"        }      }   *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.  ##### Previous status condition #####  A condition that allows a transition based on whether an issue has or has not transitioned through a status.      {        \"type\": \"PreviousStatusCondition\",        \"configuration\": {          \"ignoreLoopTransitions\": true,          \"includeCurrentStatus\": true,          \"mostRecentStatusOnly\": true,          \"reverseCondition\": true,          \"previousStatus\": {            \"id\": \"5\"          }        }      }  By default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:   *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.  *  `includeCurrentStatus` is `true`, then the current issue status is also checked.  *  `mostRecentStatusOnly` is `true`, then only the issue's preceding status (the one immediately before the current status) is checked.  *  `reverseCondition` is `true`, then the status must not be present.  ##### Separation of duties condition #####  A condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.      {        \"type\": \"SeparationOfDutiesCondition\",        \"configuration\": {          \"fromStatus\": {            \"id\": \"5\"          },          \"toStatus\": {            \"id\": \"6\"          }        }      }   *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.  *  `toStatus` An object containing the ID of the target status of the transition that is blocked.  ##### Subtask blocking condition #####  A condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.      {        \"type\": \"SubTaskBlockingCondition\",        \"configuration\": {          \"statuses\": [            {              \"id\": \"1\"            },            {              \"id\": \"3\"            }          ]        }      }   *  `statuses` A list of objects containing status IDs.  ##### User is in any group condition #####  A condition that allows users belonging to any group from a list of groups to execute a transition.      {        \"type\": \"UserInAnyGroupCondition\",        \"configuration\": {          \"groups\": [            \"administrators\",            \"atlassian-addons-admin\"          ]        }      }   *  `groups` A list of group names.  ##### User is in any project role condition #####  A condition that allows only users with at least one project roles from a list of project roles to execute a transition.      {        \"type\": \"InAnyProjectRoleCondition\",        \"configuration\": {          \"projectRoles\": [            {              \"id\": \"10002\"            },            {              \"id\": \"10003\"            },            {              \"id\": \"10012\"            },            {              \"id\": \"10013\"            }          ]        }      }   *  `projectRoles` A list of objects containing project role IDs.  ##### User is in custom field condition #####  A condition that allows only users listed in a given custom field to execute the transition.      {        \"type\": \"UserIsInCustomFieldCondition\",        \"configuration\": {          \"allowUserInField\": false,          \"fieldId\": \"customfield_10010\"        }      }   *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.  *  `fieldId` The ID of the field containing the list of users.  ##### User is in group condition #####  A condition that allows users belonging to a group to execute a transition.      {        \"type\": \"UserInGroupCondition\",        \"configuration\": {          \"group\": \"administrators\"        }      }   *  `group` The name of the group.  ##### User is in group custom field condition #####  A condition that allows users belonging to a group specified in a custom field to execute a transition.      {        \"type\": \"InGroupCFCondition\",        \"configuration\": {          \"fieldId\": \"customfield_10012\"        }      }   *  `fieldId` The ID of the field. Allowed field types:           *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`      *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`      *  `com.atlassian.jira.plugin.system.customfieldtypes:select`      *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`      *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`      *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`      *  `com.pyxis.greenhopper.jira:gh-epic-status`  ##### User is in project role condition #####  A condition that allows users with a project role to execute a transition.      {        \"type\": \"InProjectRoleCondition\",        \"configuration\": {          \"projectRole\": {            \"id\": \"10002\"          }        }      }   *  `projectRole` An object containing the ID of a project role.  ##### Value field condition #####  A conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.      {        \"type\": \"ValueFieldCondition\",        \"configuration\": {          \"fieldId\": \"assignee\",          \"fieldValue\": \"qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f\",          \"comparisonType\": \"NUMBER\",          \"comparator\": \"=\"        }      }   *  `fieldId` The ID of a field used in the comparison.  *  `fieldValue` The expected value of the field.  *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.  *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, `!=`.  **Notes:**   *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.  *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.  *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.  #### Validators ####  Validators check that any input made to the transition is valid before the transition is performed.  ##### Date field validator #####  A validator that compares two dates.      {        \"type\": \"DateFieldValidator\",        \"configuration\": {            \"comparator\": \">\",            \"date1\": \"updated\",            \"date2\": \"created\",            \"expression\": \"1d\",            \"includeTime\": true          }      }   *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, or `!=`.  *  `date1` The date field to validate. Allowed field types:           *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`      *  `duedate`      *  `created`      *  `updated`      *  `resolutiondate`  *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:           *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`      *  `duedate`      *  `created`      *  `updated`      *  `resolutiondate`  *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.  *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn't have a time part, 00:00:00 is used.  ##### Windows date validator #####  A validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.      {        \"type\": \"WindowsDateValidator\",        \"configuration\": {            \"date1\": \"customfield_10009\",            \"date2\": \"created\",            \"windowsDays\": 5          }      }   *  `date1` The date field to validate. Allowed field types:           *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`      *  `duedate`      *  `created`      *  `updated`      *  `resolutiondate`  *  `date2` The reference date. Allowed field types:           *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`      *  `duedate`      *  `created`      *  `updated`      *  `resolutiondate`  *  `windowsDays` A positive integer indicating a number of days.  ##### Field required validator #####  A validator that checks fields are not empty. By default, if a field is not included in the current context it's ignored and not validated.      {          \"type\": \"FieldRequiredValidator\",          \"configuration\": {              \"ignoreContext\": true,              \"errorMessage\": \"Hey\",              \"fieldIds\": [                  \"versions\",                  \"customfield_10037\",                  \"customfield_10003\"              ]          }      }   *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.  *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.  *  `fieldIds` The list of fields to validate.  ##### Field changed validator #####  A validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.      {          \"type\": \"FieldChangedValidator\",          \"configuration\": {              \"fieldId\": \"comment\",              \"errorMessage\": \"Hey\",              \"exemptedGroups\": [                  \"administrators\",                  \"atlassian-addons-admin\"              ]          }      }   *  `fieldId` The ID of a field.  *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.  *  `exemptedGroups` OPTIONAL. The list of groups.  ##### Field has single value validator #####  A validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.      {          \"type\": \"FieldHasSingleValueValidator\",          \"configuration\": {              \"fieldId\": \"attachment,              \"excludeSubtasks\": true          }      }   *  `fieldId` The ID of a field.  *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.  ##### Parent status validator #####  A validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.      {          \"type\": \"ParentStatusValidator\",          \"configuration\": {              \"parentStatuses\": [                  {                    \"id\":\"1\"                  },                  {                    \"id\":\"2\"                  }              ]          }      }   *  `parentStatus` The list of required parent issue statuses.  ##### Permission validator #####  A validator that checks the user has a permission.      {        \"type\": \"PermissionValidator\",        \"configuration\": {            \"permissionKey\": \"ADMINISTER_PROJECTS\"        }      }   *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.  ##### Previous status validator #####  A validator that checks if the issue has held a status.      {        \"type\": \"PreviousStatusValidator\",        \"configuration\": {            \"mostRecentStatusOnly\": false,            \"previousStatus\": {                \"id\": \"15\"            }        }      }   *  `mostRecentStatusOnly` If `true`, then only the issue's preceding status (the one immediately before the current status) is checked.  *  `previousStatus` An object containing the ID of an issue status.  ##### Regular expression validator #####  A validator that checks the content of a field against a regular expression.      {        \"type\": \"RegexpFieldValidator\",        \"configuration\": {            \"regExp\": \"[0-9]\",            \"fieldId\": \"customfield_10029\"        }      }   *  `regExp`A regular expression.  *  `fieldId` The ID of a field. Allowed field types:           *  `com.atlassian.jira.plugin.system.customfieldtypes:select`      *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`      *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`      *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`      *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`      *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`      *  `com.atlassian.jira.plugin.system.customfieldtypes:url`      *  `com.atlassian.jira.plugin.system.customfieldtypes:float`      *  `com.pyxis.greenhopper.jira:jsw-story-points`      *  `com.pyxis.greenhopper.jira:gh-epic-status`      *  `description`      *  `summary`  ##### User permission validator #####  A validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.      {          \"type\": \"UserPermissionValidator\",          \"configuration\": {              \"permissionKey\": \"BROWSE_PROJECTS\",              \"nullAllowed\": false,              \"username\": \"TestUser\"          }      }   *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.  *  `nullAllowed` If `true`, allows the transition when `username` is empty.  *  `username` The username to validate against the `permissionKey`.  #### Post functions ####  Post functions carry out any additional processing required after a Jira workflow transition is executed.  ##### Fire issue event function #####  A post function that fires an event that is processed by the listeners.      {        \"type\": \"FireIssueEventFunction\",        \"configuration\": {          \"event\": {            \"id\":\"1\"          }        }      }  **Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.   *  `event` An object containing the ID of the issue event.  ##### Update issue status #####  A post function that sets issue status to the linked status of the destination workflow status.      {        \"type\": \"UpdateIssueStatusFunction\"      }  **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.  ##### Create comment #####  A post function that adds a comment entered during the transition to an issue.      {        \"type\": \"CreateCommentFunction\"      }  **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.  ##### Store issue #####  A post function that stores updates to an issue.      {        \"type\": \"IssueStoreFunction\"      }  **Note:** This post function can only be added to the initial transition and can only be added once.  ##### Assign to current user function #####  A post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.      {          \"type\": \"AssignToCurrentUserFunction\"      }  **Note:** This post function can be included once in a transition.  ##### Assign to lead function #####  A post function that assigns the issue to the project or component lead developer.      {          \"type\": \"AssignToLeadFunction\"      }  **Note:** This post function can be included once in a transition.  ##### Assign to reporter function #####  A post function that assigns the issue to the reporter.      {          \"type\": \"AssignToReporterFunction\"      }  **Note:** This post function can be included once in a transition.  ##### Clear field value function #####  A post function that clears the value from a field.      {        \"type\": \"ClearFieldValuePostFunction\",        \"configuration\": {          \"fieldId\": \"assignee\"        }      }   *  `fieldId` The ID of the field.  ##### Copy value from other field function #####  A post function that copies the value of one field to another, either within an issue or from parent to subtask.      {        \"type\": \"CopyValueFromOtherFieldPostFunction\",        \"configuration\": {          \"sourceFieldId\": \"assignee\",          \"destinationFieldId\": \"creator\",          \"copyType\": \"same\"        }      }   *  `sourceFieldId` The ID of the source field.  *  `destinationFieldId` The ID of the destination field.  *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.  ##### Create Crucible review workflow function #####  A post function that creates a Crucible review for all unreviewed code for the issue.      {          \"type\": \"CreateCrucibleReviewWorkflowFunction\"      }  **Note:** This post function can be included once in a transition.  ##### Set issue security level based on user's project role function #####  A post function that sets the issue's security level if the current user has a project role.      {        \"type\": \"SetIssueSecurityFromRoleFunction\",        \"configuration\": {          \"projectRole\": {              \"id\":\"10002\"          },          \"issueSecurityLevel\": {              \"id\":\"10000\"          }        }      }   *  `projectRole` An object containing the ID of the project role.  *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.  ##### Trigger a webhook function #####  A post function that triggers a webhook.      {        \"type\": \"TriggerWebhookFunction\",        \"configuration\": {          \"webhook\": {            \"id\": \"1\"          }        }      }   *  `webhook` An object containing the ID of the webhook listener to trigger.  ##### Update issue custom field function #####  A post function that updates the content of an issue custom field.      {        \"type\": \"UpdateIssueCustomFieldPostFunction\",        \"configuration\": {          \"mode\": \"append\",          \"fieldId\": \"customfield_10003\",          \"fieldValue\": \"yikes\"        }      }   *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.  *  `fieldId` The ID of the field.  *  `fieldValue` The update content.  ##### Update issue field function #####  A post function that updates a simple issue field.      {        \"type\": \"UpdateIssueFieldFunction\",        \"configuration\": {          \"fieldId\": \"assignee\",          \"fieldValue\": \"5f0c277e70b8a90025a00776\"        }      }   *  `fieldId` The ID of the field. Allowed field types:           *  `assignee`      *  `description`      *  `environment`      *  `priority`      *  `resolution`      *  `summary`      *  `timeoriginalestimate`      *  `timeestimate`      *  `timespent`  *  `fieldValue` The update value.  *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:           *  an account ID.      *  `automatic`.      *  a blank string, which sets the value to `unassigned`.  #### Connect rules ####  Connect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule's module must exist.      {        \"type\": \"appKey__moduleKey\",        \"configuration\": {          \"value\":\"{\\\"isValid\\\":\\\"true\\\"}\"        }      }   *  `type` A Connect rule key in a form of `appKey__moduleKey`.  *  `value` The stringified JSON configuration of a Connect rule.  #### Forge rules ####  Forge transition rules are not yet supported.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflows" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the workflow is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowIDs.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if one or more statuses is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/workflow",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowIDs> createWorkflow(
        @Parameter(name = "CreateWorkflowDetails", description = "The workflow details.", required = true) @Valid @RequestBody CreateWorkflowDetails createWorkflowDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"entityId\" : \"entityId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/workflowscheme : Create workflow scheme
     * Creates a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param workflowScheme  (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createWorkflowScheme",
        summary = "Create workflow scheme",
        description = "Creates a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/workflowscheme",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> createWorkflowScheme(
        @Parameter(name = "WorkflowScheme", description = "", required = true) @Valid @RequestBody WorkflowScheme workflowScheme
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/workflowscheme/{id}/createdraft : Create draft workflow scheme
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the active workflow scheme that the draft is created from. (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "createWorkflowSchemeDraftFromParent",
        summary = "Create draft workflow scheme",
        description = "Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/workflowscheme/{id}/createdraft",
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> createWorkflowSchemeDraftFromParent(
        @Parameter(name = "id", description = "The ID of the active workflow scheme that the draft is created from.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/workflow/transitions/{transitionId}/properties : Create workflow transition property
     * Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
     * @param key The key of the property being added, also known as the name of the property. Set this to the same value as the &#x60;key&#x60; defined in the request body. (required)
     * @param workflowName The name of the workflow that the transition belongs to. (required)
     * @param workflowTransitionProperty  (required)
     * @param workflowMode The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited. (optional, default to live)
     * @return 200 response (status code 200)
     *         or Returned if a workflow property with the same key is present on the transition. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow transition is not found. (status code 404)
     */
    @Operation(
        operationId = "createWorkflowTransitionProperty",
        summary = "Create workflow transition property",
        description = "Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow transition properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "200 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowTransitionProperty.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if a workflow property with the same key is present on the transition."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow transition is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/workflow/transitions/{transitionId}/properties",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowTransitionProperty> createWorkflowTransitionProperty(
        @Parameter(name = "transitionId", description = "The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.", required = true, in = ParameterIn.PATH) @PathVariable("transitionId") Long transitionId,
        @NotNull @Parameter(name = "key", description = "The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = true) String key,
        @NotNull @Parameter(name = "workflowName", description = "The name of the workflow that the transition belongs to.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = true) String workflowName,
        @Parameter(name = "WorkflowTransitionProperty", description = "", required = true) @Valid @RequestBody WorkflowTransitionProperty workflowTransitionProperty,
        @Parameter(name = "workflowMode", description = "The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowMode", required = false, defaultValue = "live") String workflowMode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"value\" : \"value\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/project/{projectIdOrKey}/role/{id} : Delete actors from project role
     * Deletes actors from a project role for the project.  To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param user The user account ID of the user to remove from the project role. (optional)
     * @param group The name of the group to remove from the project role. This parameter cannot be used with the &#x60;groupId&#x60; parameter. As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended. (optional)
     * @param groupId The ID of the group to remove from the project role. This parameter cannot be used with the &#x60;group&#x60; parameter. (optional)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission. (status code 404)
     */
    @Operation(
        operationId = "deleteActor",
        summary = "Delete actors from project role",
        description = "Deletes actors from a project role for the project.  To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project role actors" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/project/{projectIdOrKey}/role/{id}"
    )
    
    default ResponseEntity<Void> deleteActor(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "id", description = "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "user", description = "The user account ID of the user to remove from the project role.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "user", required = false) String user,
        @Parameter(name = "group", description = "The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "group", required = false) String group,
        @Parameter(name = "groupId", description = "The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/version/{id}/removeAndSwap : Delete and replace version
     * Deletes a project version.  Alternative versions can be provided to update issues that use the deleted version in &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, or any version picker custom fields. If alternatives are not provided, occurrences of &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     *
     * @param id The ID of the version. (required)
     * @param deleteAndReplaceVersionBean  (required)
     * @return Returned if the version is deleted. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the version to delete is not found.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "deleteAndReplaceVersion",
        summary = "Delete and replace version",
        description = "Deletes a project version.  Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.",
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the version is deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the version to delete is not found.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/version/{id}/removeAndSwap",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteAndReplaceVersion(
        @Parameter(name = "id", description = "The ID of the version.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "DeleteAndReplaceVersionBean", description = "", required = true) @Valid @RequestBody DeleteAndReplaceVersionBean deleteAndReplaceVersionBean
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id} : Delete avatar
     * Deletes an avatar from a project or issue type.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param type The avatar type. (required)
     * @param owningObjectId The ID of the item the avatar is associated with. (required)
     * @param id The ID of the avatar. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the user does not have permission to delete the avatar, the avatar is not deletable. (status code 403)
     *         or Returned if the avatar type, associated item ID, or avatar ID is invalid. (status code 404)
     */
    @Operation(
        operationId = "deleteAvatar",
        summary = "Delete avatar",
        description = "Deletes an avatar from a project or issue type.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Avatars" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to delete the avatar, the avatar is not deletable."),
            @ApiResponse(responseCode = "404", description = "Returned if the avatar type, associated item ID, or avatar ID is invalid.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}"
    )
    
    default ResponseEntity<Void> deleteAvatar(
        @Parameter(name = "type", description = "The avatar type.", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "owningObjectId", description = "The ID of the item the avatar is associated with.", required = true, in = ParameterIn.PATH) @PathVariable("owningObjectId") String owningObjectId,
        @Parameter(name = "id", description = "The ID of the avatar.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issue/{issueIdOrKey}/comment/{id} : Delete comment
     * Deletes a comment.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param id The ID of the comment. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the user does not have permission to delete the comment. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. (status code 404)
     *         or Returned if an anonymous call is made to the operation. (status code 405)
     */
    @Operation(
        operationId = "deleteComment",
        summary = "Delete comment",
        description = "Deletes a comment.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue comments" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the user does not have permission to delete the comment."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or comment is not found or the user does not have permission to view the issue or comment."),
            @ApiResponse(responseCode = "405", description = "Returned if an anonymous call is made to the operation.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issue/{issueIdOrKey}/comment/{id}"
    )
    
    default ResponseEntity<Void> deleteComment(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "id", description = "The ID of the comment.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/comment/{commentId}/properties/{propertyKey} : Delete comment property
     * Deletes a comment property.  **[Permissions](#permissions) required:** either of:   *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.  *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.  Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
     *
     * @param commentId The ID of the comment. (required)
     * @param propertyKey The key of the property. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the comment or the property is not found or the user has the necessary project permissions but isn&#39;t a member of the role or group visibility of the comment is restricted to. (status code 404)
     */
    @Operation(
        operationId = "deleteCommentProperty",
        summary = "Delete comment property",
        description = "Deletes a comment property.  **[Permissions](#permissions) required:** either of:   *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.  *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.  Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.",
        tags = { "Issue comment properties" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the comment or the property is not found or the user has the necessary project permissions but isn't a member of the role or group visibility of the comment is restricted to.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/comment/{commentId}/properties/{propertyKey}"
    )
    
    default ResponseEntity<Void> deleteCommentProperty(
        @Parameter(name = "commentId", description = "The ID of the comment.", required = true, in = ParameterIn.PATH) @PathVariable("commentId") String commentId,
        @Parameter(name = "propertyKey", description = "The key of the property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/component/{id} : Delete component
     * Deletes a component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the component. (required)
     * @param moveIssuesTo The ID of the component to replace the deleted component. If this value is null no replacement is made. (optional)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. (status code 403)
     *         or Returned if:   *  the component is not found.  *  the replacement component is not found.  *  the user does not have permission to browse the project containing the component. (status code 404)
     */
    @Operation(
        operationId = "deleteComponent",
        summary = "Delete component",
        description = "Deletes a component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project components" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the component is not found.  *  the replacement component is not found.  *  the user does not have permission to browse the project containing the component.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/component/{id}"
    )
    
    default ResponseEntity<Void> deleteComponent(
        @Parameter(name = "id", description = "The ID of the component.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "moveIssuesTo", description = "The ID of the component to replace the deleted component. If this value is null no replacement is made.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "moveIssuesTo", required = false) String moveIssuesTo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/field/{id} : Delete custom field
     * Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  This operation is [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of a custom field. (required)
     * @return Returned if the request is successful. (status code 303)
     *         or Returned if any of these are true:   *  The custom field is locked.  *  The custom field is used in a issue security scheme or a permission scheme.  *  The custom field ID format is incorrect. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the custom field is not found. (status code 404)
     *         or Returned if a task to delete the custom field is running. (status code 409)
     */
    @Operation(
        operationId = "deleteCustomField",
        summary = "Delete custom field",
        description = "Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue fields" },
        responses = {
            @ApiResponse(responseCode = "303", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgressBeanObject.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if any of these are true:   *  The custom field is locked.  *  The custom field is used in a issue security scheme or a permission scheme.  *  The custom field ID format is incorrect.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "409", description = "Returned if a task to delete the custom field is running.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/field/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteCustomField(
        @Parameter(name = "id", description = "The ID of a custom field.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/field/{fieldId}/context/{contextId} : Delete custom field context
     * Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @return Returned if the context is deleted. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field or the context is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteCustomFieldContext",
        summary = "Delete custom field context",
        description = "Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the context is deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field or the context is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteCustomFieldContext(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId} : Delete custom field options (context)
     * Deletes a custom field option.  Options with cascading options cannot be deleted without deleting the cascading options first.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context from which an option should be deleted. (required)
     * @param optionId The ID of the option to delete. (required)
     * @return Returned if the option is deleted. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field, the context, or the option is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteCustomFieldOption",
        summary = "Delete custom field options (context)",
        description = "Deletes a custom field option.  Options with cascading options cannot be deleted without deleting the cascading options first.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field options" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the option is deleted."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field, the context, or the option is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteCustomFieldOption(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context from which an option should be deleted.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId,
        @Parameter(name = "optionId", description = "The ID of the option to delete.", required = true, in = ParameterIn.PATH) @PathVariable("optionId") Long optionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/dashboard/{id} : Delete dashboard
     * Deletes a dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be deleted must be owned by the user.
     *
     * @param id The ID of the dashboard. (required)
     * @return Returned if the dashboard is deleted. (status code 204)
     *         or 400 response (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "deleteDashboard",
        summary = "Delete dashboard",
        description = "Deletes a dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be deleted must be owned by the user.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the dashboard is deleted."),
            @ApiResponse(responseCode = "400", description = "400 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/dashboard/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteDashboard(
        @Parameter(name = "id", description = "The ID of the dashboard.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey} : Delete dashboard item property
     * Deletes a dashboard item property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     *
     * @param dashboardId The ID of the dashboard. (required)
     * @param itemId The ID of the dashboard item. (required)
     * @param propertyKey The key of the dashboard item property. (required)
     * @return Returned if the dashboard item property is deleted. (status code 204)
     *         or Returned if the dashboard or dashboard item ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user is not the owner of the dashboard. (status code 403)
     *         or Returned if the dashboard item is not found or the dashboard is not shared with the user. (status code 404)
     */
    @Operation(
        operationId = "deleteDashboardItemProperty",
        summary = "Delete dashboard item property",
        description = "Deletes a dashboard item property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the dashboard item property is deleted."),
            @ApiResponse(responseCode = "400", description = "Returned if the dashboard or dashboard item ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user is not the owner of the dashboard."),
            @ApiResponse(responseCode = "404", description = "Returned if the dashboard item is not found or the dashboard is not shared with the user.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}"
    )
    
    default ResponseEntity<Void> deleteDashboardItemProperty(
        @Parameter(name = "dashboardId", description = "The ID of the dashboard.", required = true, in = ParameterIn.PATH) @PathVariable("dashboardId") String dashboardId,
        @Parameter(name = "itemId", description = "The ID of the dashboard item.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") String itemId,
        @Parameter(name = "propertyKey", description = "The key of the dashboard item property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/workflowscheme/{id}/default : Delete default workflow
     * Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira&#39;s system workflow (the *jira* workflow).  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. (required)
     * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteDefaultWorkflow",
        summary = "Delete default workflow",
        description = "Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/workflowscheme/{id}/default",
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> deleteDefaultWorkflow(
        @Parameter(name = "id", description = "The ID of the workflow scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "updateDraftIfNeeded", description = "Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updateDraftIfNeeded", required = false) Boolean updateDraftIfNeeded
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/workflowscheme/{id}/draft/default : Delete draft default workflow
     * Resets the default workflow for a workflow scheme&#39;s draft. That is, the default workflow is set to Jira&#39;s system workflow (the *jira* workflow).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. (status code 404)
     */
    @Operation(
        operationId = "deleteDraftDefaultWorkflow",
        summary = "Delete draft default workflow",
        description = "Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/workflowscheme/{id}/draft/default",
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> deleteDraftDefaultWorkflow(
        @Parameter(name = "id", description = "The ID of the workflow scheme that the draft belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/workflowscheme/{id}/draft/workflow : Delete issue types for workflow in draft workflow scheme
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param workflowName The name of the workflow. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. (status code 404)
     */
    @Operation(
        operationId = "deleteDraftWorkflowMapping",
        summary = "Delete issue types for workflow in draft workflow scheme",
        description = "Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/workflowscheme/{id}/draft/workflow"
    )
    
    default ResponseEntity<Void> deleteDraftWorkflowMapping(
        @Parameter(name = "id", description = "The ID of the workflow scheme that the draft belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @NotNull @Parameter(name = "workflowName", description = "The name of the workflow.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = true) String workflowName
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/filter/{id}/favourite : Remove filter as favorite
     * Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user&#39;s favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param id The ID of the filter. (required)
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. (status code 400)
     */
    @Operation(
        operationId = "deleteFavouriteForFilter",
        summary = "Remove filter as favorite",
        description = "Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Filter.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/filter/{id}/favourite",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Filter> deleteFavouriteForFilter(
        @Parameter(name = "id", description = "The ID of the filter.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"jql\" : \"jql\", \"favouritedCount\" : 0, \"description\" : \"description\", \"favourite\" : true, \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/fieldconfiguration/{id} : Delete field configuration
     * Deletes a field configuration.  This operation can only delete configurations used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the field configuration. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field configuration is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteFieldConfiguration",
        summary = "Delete field configuration",
        description = "Deletes a field configuration.  This operation can only delete configurations used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field configuration is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/fieldconfiguration/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteFieldConfiguration(
        @Parameter(name = "id", description = "The ID of the field configuration.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/fieldconfigurationscheme/{id} : Delete field configuration scheme
     * Deletes a field configuration scheme.  This operation can only delete field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the field configuration scheme. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field configuration scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteFieldConfigurationScheme",
        summary = "Delete field configuration scheme",
        description = "Deletes a field configuration scheme.  This operation can only delete field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field configuration scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/fieldconfigurationscheme/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteFieldConfigurationScheme(
        @Parameter(name = "id", description = "The ID of the field configuration scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/filter/{id} : Delete filter
     * Delete a filter.  **[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the filter to delete. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the filter is not found. (status code 400)
     *         or Returned if the user does not have permission to delete the filter. (status code 401)
     */
    @Operation(
        operationId = "deleteFilter",
        summary = "Delete filter",
        description = "Delete a filter.  **[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the filter is not found."),
            @ApiResponse(responseCode = "401", description = "Returned if the user does not have permission to delete the filter.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/filter/{id}"
    )
    
    default ResponseEntity<Void> deleteFilter(
        @Parameter(name = "id", description = "The ID of the filter to delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/workflow/{entityId} : Delete inactive workflow
     * Deletes a workflow.  The workflow cannot be deleted if it is:   *  an active workflow.  *  a system workflow.  *  associated with any workflow scheme.  *  associated with any draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param entityId The entity ID of the workflow. (required)
     * @return Returned if the workflow is deleted. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the workflow is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteInactiveWorkflow",
        summary = "Delete inactive workflow",
        description = "Deletes a workflow.  The workflow cannot be deleted if it is:   *  an active workflow.  *  a system workflow.  *  associated with any workflow scheme.  *  associated with any draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflows" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the workflow is deleted."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/workflow/{entityId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteInactiveWorkflow(
        @Parameter(name = "entityId", description = "The entity ID of the workflow.", required = true, in = ParameterIn.PATH) @PathVariable("entityId") String entityId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issue/{issueIdOrKey} : Delete issue
     * Deletes an issue.  An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set &#x60;deleteSubtasks&#x60;. This causes the issue&#39;s subtasks to be deleted with the issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param deleteSubtasks Whether the issue&#39;s subtasks are deleted when the issue is deleted. (optional, default to false)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the issue has subtasks and &#x60;deleteSubtasks&#x60; is not set to *true*. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the user does not have permission to delete the issue. (status code 403)
     *         or Returned if the issue is not found or the user does not have permission to view the issue. (status code 404)
     */
    @Operation(
        operationId = "deleteIssue",
        summary = "Delete issue",
        description = "Deletes an issue.  An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the issue has subtasks and `deleteSubtasks` is not set to *true*."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to delete the issue."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issue/{issueIdOrKey}"
    )
    
    default ResponseEntity<Void> deleteIssue(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "deleteSubtasks", description = "Whether the issue's subtasks are deleted when the issue is deleted.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deleteSubtasks", required = false, defaultValue = "false") String deleteSubtasks
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/field/{fieldKey}/option/{optionId} : Delete issue field option
     * Deletes an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     *
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param optionId The ID of the option to be deleted. (required)
     * @return Returned if the field option is deleted. (status code 204)
     *         or Returned if the request is not authenticated as a Jira administrator or the app that provided the field. (status code 403)
     *         or Returned if the field or option is not found. (status code 404)
     *         or Returned if the option is selected for the field in any issue. (status code 409)
     */
    @Operation(
        operationId = "deleteIssueFieldOption",
        summary = "Delete issue field option",
        description = "Deletes an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.",
        tags = { "Issue custom field options (apps)" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the field option is deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not authenticated as a Jira administrator or the app that provided the field."),
            @ApiResponse(responseCode = "404", description = "Returned if the field or option is not found."),
            @ApiResponse(responseCode = "409", description = "Returned if the option is selected for the field in any issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/field/{fieldKey}/option/{optionId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteIssueFieldOption(
        @Parameter(name = "fieldKey", description = "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`", required = true, in = ParameterIn.PATH) @PathVariable("fieldKey") String fieldKey,
        @Parameter(name = "optionId", description = "The ID of the option to be deleted.", required = true, in = ParameterIn.PATH) @PathVariable("optionId") Long optionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issueLink/{linkId} : Delete issue link
     * Deletes an issue link.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
     *
     * @param linkId The ID of the issue link. (required)
     * @return 200 response (status code 200)
     *         or Returned if the request is successful. (status code 204)
     *         or Returned if the issue link ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  issue linking is disabled.  *  the issue link is not found.  *  the user doesn&#39;t have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "deleteIssueLink",
        summary = "Delete issue link",
        description = "Deletes an issue link.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.",
        tags = { "Issue links" },
        responses = {
            @ApiResponse(responseCode = "200", description = "200 response"),
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the issue link ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  issue linking is disabled.  *  the issue link is not found.  *  the user doesn't have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issueLink/{linkId}"
    )
    
    default ResponseEntity<Void> deleteIssueLink(
        @Parameter(name = "linkId", description = "The ID of the issue link.", required = true, in = ParameterIn.PATH) @PathVariable("linkId") String linkId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issueLinkType/{issueLinkTypeId} : Delete issue link type
     * Deletes an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueLinkTypeId The ID of the issue link type. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the issue link type ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "deleteIssueLinkType",
        summary = "Delete issue link type",
        description = "Deletes an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue link types" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the issue link type ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issueLinkType/{issueLinkTypeId}"
    )
    
    default ResponseEntity<Void> deleteIssueLinkType(
        @Parameter(name = "issueLinkTypeId", description = "The ID of the issue link type.", required = true, in = ParameterIn.PATH) @PathVariable("issueLinkTypeId") String issueLinkTypeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey} : Delete issue property
     * Deletes an issue&#39;s property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The key or ID of the issue. (required)
     * @param propertyKey The key of the property. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue or property is not found, or the user does not have permission to edit the issue. (status code 404)
     */
    @Operation(
        operationId = "deleteIssueProperty",
        summary = "Delete issue property",
        description = "Deletes an issue's property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue properties" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or property is not found, or the user does not have permission to edit the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}"
    )
    
    default ResponseEntity<Void> deleteIssueProperty(
        @Parameter(name = "issueIdOrKey", description = "The key or ID of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "propertyKey", description = "The key of the property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issuetype/{id} : Delete issue type
     * Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (&#x60;alternativeIssueTypeId&#x60;). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the issue type. (required)
     * @param alternativeIssueTypeId The ID of the replacement issue type. (optional)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if any issues cannot be updated with the alternative issue type. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if:   *  the issue type is in use and an alternative issue type is not specified.  *  the issue type or alternative issue type is not found. (status code 404)
     *         or Returned if the issue type is in use and:   *  also specified as the alternative issue type.  *  is a *standard* issue type and the alternative issue type is a *subtask*. (status code 409)
     */
    @Operation(
        operationId = "deleteIssueType",
        summary = "Delete issue type",
        description = "Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue types" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if any issues cannot be updated with the alternative issue type."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue type is in use and an alternative issue type is not specified.  *  the issue type or alternative issue type is not found."),
            @ApiResponse(responseCode = "409", description = "Returned if the issue type is in use and:   *  also specified as the alternative issue type.  *  is a *standard* issue type and the alternative issue type is a *subtask*.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issuetype/{id}"
    )
    
    default ResponseEntity<Void> deleteIssueType(
        @Parameter(name = "id", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "alternativeIssueTypeId", description = "The ID of the replacement issue type.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "alternativeIssueTypeId", required = false) String alternativeIssueTypeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey} : Delete issue type property
     * Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeId The ID of the issue type. (required)
     * @param propertyKey The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys. (required)
     * @return Returned if the issue type property is deleted. (status code 204)
     *         or Returned if the issue type ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the issue type or property is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteIssueTypeProperty",
        summary = "Delete issue type property",
        description = "Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type properties" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the issue type property is deleted."),
            @ApiResponse(responseCode = "400", description = "Returned if the issue type ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type or property is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}"
    )
    
    default ResponseEntity<Void> deleteIssueTypeProperty(
        @Parameter(name = "issueTypeId", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeId") String issueTypeId,
        @Parameter(name = "propertyKey", description = "The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issuetypescheme/{issueTypeSchemeId} : Delete issue type scheme
     * Deletes an issue type scheme.  Only issue type schemes used in classic projects can be deleted.  Any projects assigned to the scheme are reassigned to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeSchemeId The ID of the issue type scheme. (required)
     * @return Returned if the issue type scheme is deleted. (status code 204)
     *         or Returned if the request is to delete the default issue type scheme. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteIssueTypeScheme",
        summary = "Delete issue type scheme",
        description = "Deletes an issue type scheme.  Only issue type schemes used in classic projects can be deleted.  Any projects assigned to the scheme are reassigned to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the issue type scheme is deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is to delete the default issue type scheme."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteIssueTypeScheme(
        @Parameter(name = "issueTypeSchemeId", description = "The ID of the issue type scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeSchemeId") Long issueTypeSchemeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId} : Delete issue type screen scheme
     * Deletes an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @return Returned if the issue type screen scheme is deleted. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type screen scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteIssueTypeScreenScheme",
        summary = "Delete issue type screen scheme",
        description = "Deletes an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the issue type screen scheme is deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type screen scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteIssueTypeScreenScheme(
        @Parameter(name = "issueTypeScreenSchemeId", description = "The ID of the issue type screen scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeScreenSchemeId") String issueTypeScreenSchemeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/mypreferences/locale : Delete locale
     * Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.  Deletes the locale of the user, which restores the default setting.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "deleteLocale",
        summary = "Delete locale",
        description = "Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.  Deletes the locale of the user, which restores the default setting.  **[Permissions](#permissions) required:** Permission to access Jira.",
        deprecated = true,
        tags = { "Myself" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/mypreferences/locale",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteLocale(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/notificationscheme/{notificationSchemeId} : Delete notification scheme
     * Deletes a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param notificationSchemeId The ID of the notification scheme. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the notification scheme isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "deleteNotificationScheme",
        summary = "Delete notification scheme",
        description = "Deletes a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue notification schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the notification scheme isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/notificationscheme/{notificationSchemeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteNotificationScheme(
        @Parameter(name = "notificationSchemeId", description = "The ID of the notification scheme.", required = true, in = ParameterIn.PATH) @PathVariable("notificationSchemeId") String notificationSchemeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/permissionscheme/{schemeId} : Delete permission scheme
     * Deletes a permission scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param schemeId The ID of the permission scheme being deleted. (required)
     * @return Returned if the permission scheme is deleted. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the permission scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "deletePermissionScheme",
        summary = "Delete permission scheme",
        description = "Deletes a permission scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Permission schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the permission scheme is deleted."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the permission scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/permissionscheme/{schemeId}"
    )
    
    default ResponseEntity<Void> deletePermissionScheme(
        @Parameter(name = "schemeId", description = "The ID of the permission scheme being deleted.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") Long schemeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/permissionscheme/{schemeId}/permission/{permissionId} : Delete permission scheme grant
     * Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param schemeId The ID of the permission scheme to delete the permission grant from. (required)
     * @param permissionId The ID of the permission grant to delete. (required)
     * @return Returned if the permission grant is deleted. (status code 204)
     *         or Returned if permission grant with the provided ID is not found. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "deletePermissionSchemeEntity",
        summary = "Delete permission scheme grant",
        description = "Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Permission schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the permission grant is deleted."),
            @ApiResponse(responseCode = "400", description = "Returned if permission grant with the provided ID is not found."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}"
    )
    
    default ResponseEntity<Void> deletePermissionSchemeEntity(
        @Parameter(name = "schemeId", description = "The ID of the permission scheme to delete the permission grant from.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") Long schemeId,
        @Parameter(name = "permissionId", description = "The ID of the permission grant to delete.", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") Long permissionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/priority/{id} : Delete priority
     * Deletes an issue priority.  This operation is [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the issue priority. (required)
     * @param replaceWith The ID of the issue priority that will replace the currently selected resolution. (required)
     * @return Returned if the request is successful. (status code 303)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue priority isn&#39;t found. (status code 404)
     *         or Returned if a task to delete the issue priority is already running. (status code 409)
     */
    @Operation(
        operationId = "deletePriority",
        summary = "Delete priority",
        description = "Deletes an issue priority.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue priorities" },
        responses = {
            @ApiResponse(responseCode = "303", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgressBeanObject.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue priority isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "409", description = "Returned if a task to delete the issue priority is already running.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/priority/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deletePriority(
        @Parameter(name = "id", description = "The ID of the issue priority.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @NotNull @Parameter(name = "replaceWith", description = "The ID of the issue priority that will replace the currently selected resolution.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "replaceWith", required = true) String replaceWith
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/project/{projectIdOrKey} : Delete project
     * Deletes a project.  You can&#39;t delete a project if it&#39;s archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param enableUndo Whether this project is placed in the Jira recycle bin where it will be available for restoration. (optional, default to false)
     * @return Returned if the project is deleted. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user does not have permission to delete it. (status code 404)
     */
    @Operation(
        operationId = "deleteProject",
        summary = "Delete project",
        description = "Deletes a project.  You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the project is deleted."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to delete it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/project/{projectIdOrKey}"
    )
    
    default ResponseEntity<Void> deleteProject(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "enableUndo", description = "Whether this project is placed in the Jira recycle bin where it will be available for restoration.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableUndo", required = false, defaultValue = "false") Boolean enableUndo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/project/{projectIdOrKey}/delete : Delete project asynchronously
     * Deletes a project asynchronously.  This operation is:   *  transactional, that is, if part of the delete fails the project is not deleted.  *  [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return Returned if the request is successful. (status code 303)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user does not have the necessary permission. (status code 404)
     */
    @Operation(
        operationId = "deleteProjectAsynchronously",
        summary = "Delete project asynchronously",
        description = "Deletes a project asynchronously.  This operation is:   *  transactional, that is, if part of the delete fails the project is not deleted.  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "303", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgressBeanObject.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/project/{projectIdOrKey}/delete",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteProjectAsynchronously(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/project/{projectIdOrKey}/avatar/{id} : Delete project avatar
     * Deletes a custom avatar from a project. Note that system avatars cannot be deleted.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     *
     * @param projectIdOrKey The project ID or (case-sensitive) key. (required)
     * @param id The ID of the avatar. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the avatar is a system avatar or the user does not have permission to administer the project. (status code 403)
     *         or Returned if the project or avatar is not found or the user does not have permission to view the project. (status code 404)
     */
    @Operation(
        operationId = "deleteProjectAvatar",
        summary = "Delete project avatar",
        description = "Deletes a custom avatar from a project. Note that system avatars cannot be deleted.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).",
        tags = { "Project avatars" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the avatar is a system avatar or the user does not have permission to administer the project."),
            @ApiResponse(responseCode = "404", description = "Returned if the project or avatar is not found or the user does not have permission to view the project.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/project/{projectIdOrKey}/avatar/{id}"
    )
    
    default ResponseEntity<Void> deleteProjectAvatar(
        @Parameter(name = "projectIdOrKey", description = "The project ID or (case-sensitive) key.", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "id", description = "The ID of the avatar.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/project/{projectIdOrKey}/properties/{propertyKey} : Delete project property
     * Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param propertyKey The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys. (required)
     * @return Returned if the project property is deleted. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the user does not have permission to administer the project. (status code 403)
     *         or Returned if the project or property is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteProjectProperty",
        summary = "Delete project property",
        description = "Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.",
        tags = { "Project properties" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the project property is deleted."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to administer the project."),
            @ApiResponse(responseCode = "404", description = "Returned if the project or property is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}"
    )
    
    default ResponseEntity<Void> deleteProjectProperty(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "propertyKey", description = "The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/role/{id} : Delete project role
     * Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the project role to delete. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param swap The ID of the project role that will replace the one being deleted. (optional)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid or if the replacement project role is not found. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have administrative permissions. (status code 403)
     *         or Returned if the project role being deleted is not found. (status code 404)
     *         or Returned if the project role being deleted is in use and a replacement project role is not specified in the request. (status code 409)
     */
    @Operation(
        operationId = "deleteProjectRole",
        summary = "Delete project role",
        description = "Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project roles" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid or if the replacement project role is not found."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have administrative permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project role being deleted is not found."),
            @ApiResponse(responseCode = "409", description = "Returned if the project role being deleted is in use and a replacement project role is not specified in the request.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/role/{id}"
    )
    
    default ResponseEntity<Void> deleteProjectRole(
        @Parameter(name = "id", description = "The ID of the project role to delete. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "swap", description = "The ID of the project role that will replace the one being deleted.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "swap", required = false) Long swap
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/role/{id}/actors : Delete default actors from project role
     * Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.  Changing a project role&#39;s default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param user The user account ID of the user to remove as a default actor. (optional)
     * @param groupId The group ID of the group to be removed as a default actor. This parameter cannot be used with the &#x60;group&#x60; parameter. (optional)
     * @param group The group name of the group to be removed as a default actor.This parameter cannot be used with the &#x60;groupId&#x60; parameter. As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have administrative permissions. (status code 403)
     *         or Returned if the project role is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteProjectRoleActorsFromRole",
        summary = "Delete default actors from project role",
        description = "Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.  Changing a project role's default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project role actors" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectRole.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have administrative permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project role is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/role/{id}/actors",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectRole> deleteProjectRoleActorsFromRole(
        @Parameter(name = "id", description = "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "user", description = "The user account ID of the user to remove as a default actor.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "user", required = false) String user,
        @Parameter(name = "groupId", description = "The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId,
        @Parameter(name = "group", description = "The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "group", required = false) String group
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issue/{issueIdOrKey}/remotelink : Delete remote issue link by global ID
     * Deletes the remote issue link from the issue using the link&#39;s global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass &#x60;system&#x3D;http://www.mycompany.com/support&amp;id&#x3D;1&#x60; as &#x60;system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1&#x60;.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param globalId The global ID of a remote issue link. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if a global ID isn&#39;t provided. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to link issues. (status code 403)
     *         or Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. (status code 404)
     */
    @Operation(
        operationId = "deleteRemoteIssueLinkByGlobalId",
        summary = "Delete remote issue link by global ID",
        description = "Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.",
        tags = { "Issue remote links" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if a global ID isn't provided."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to link issues."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issue/{issueIdOrKey}/remotelink"
    )
    
    default ResponseEntity<Void> deleteRemoteIssueLinkByGlobalId(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @NotNull @Parameter(name = "globalId", description = "The global ID of a remote issue link.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "globalId", required = true) String globalId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId} : Delete remote issue link by ID
     * Deletes a remote issue link from an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param linkId The ID of a remote issue link. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the link ID is invalid or the remote issue link does not belong to the issue. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to link issues. (status code 403)
     *         or Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. (status code 404)
     */
    @Operation(
        operationId = "deleteRemoteIssueLinkById",
        summary = "Delete remote issue link by ID",
        description = "Deletes a remote issue link from an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue remote links" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the link ID is invalid or the remote issue link does not belong to the issue."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to link issues."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}"
    )
    
    default ResponseEntity<Void> deleteRemoteIssueLinkById(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "linkId", description = "The ID of a remote issue link.", required = true, in = ParameterIn.PATH) @PathVariable("linkId") String linkId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/resolution/{id} : Delete resolution
     * Deletes an issue resolution.  This operation is [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the issue resolution. (required)
     * @param replaceWith The ID of the issue resolution that will replace the currently selected resolution. (required)
     * @return Returned if the request is successful. (status code 303)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue resolution isn&#39;t found. (status code 404)
     *         or Returned if a task to delete the issue resolution is already running. (status code 409)
     */
    @Operation(
        operationId = "deleteResolution",
        summary = "Delete resolution",
        description = "Deletes an issue resolution.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue resolutions" },
        responses = {
            @ApiResponse(responseCode = "303", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgressBeanObject.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue resolution isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "409", description = "Returned if a task to delete the issue resolution is already running.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/resolution/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteResolution(
        @Parameter(name = "id", description = "The ID of the issue resolution.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @NotNull @Parameter(name = "replaceWith", description = "The ID of the issue resolution that will replace the currently selected resolution.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "replaceWith", required = true) String replaceWith
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/screens/{screenId} : Delete screen
     * Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.  Only screens used in classic projects can be deleted.
     *
     * @param screenId The ID of the screen. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteScreen",
        summary = "Delete screen",
        description = "Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.  Only screens used in classic projects can be deleted.",
        tags = { "Screens" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/screens/{screenId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteScreen(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/screenscheme/{screenSchemeId} : Delete screen scheme
     * Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.  Only screens schemes used in classic projects can be deleted.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenSchemeId The ID of the screen scheme. (required)
     * @return Returned if the screen scheme is deleted. (status code 204)
     *         or Returned if the screen scheme is used in an issue type screen scheme. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteScreenScheme",
        summary = "Delete screen scheme",
        description = "Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.  Only screens schemes used in classic projects can be deleted.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the screen scheme is deleted."),
            @ApiResponse(responseCode = "400", description = "Returned if the screen scheme is used in an issue type screen scheme."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/screenscheme/{screenSchemeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteScreenScheme(
        @Parameter(name = "screenSchemeId", description = "The ID of the screen scheme.", required = true, in = ParameterIn.PATH) @PathVariable("screenSchemeId") String screenSchemeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/screens/{screenId}/tabs/{tabId} : Delete screen tab
     * Deletes a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen or screen tab is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteScreenTab",
        summary = "Delete screen tab",
        description = "Deletes a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen tabs" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen or screen tab is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/screens/{screenId}/tabs/{tabId}"
    )
    
    default ResponseEntity<Void> deleteScreenTab(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId,
        @Parameter(name = "tabId", description = "The ID of the screen tab.", required = true, in = ParameterIn.PATH) @PathVariable("tabId") Long tabId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issuesecurityschemes/{schemeId} : Delete issue security scheme
     * Deletes an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param schemeId The ID of the issue security scheme. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue security scheme isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "deleteSecurityScheme",
        summary = "Delete issue security scheme",
        description = "Deletes an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue security scheme isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issuesecurityschemes/{schemeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteSecurityScheme(
        @Parameter(name = "schemeId", description = "The ID of the issue security scheme.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") String schemeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/filter/{id}/permission/{permissionId} : Delete share permission
     * Deletes a share permission from a filter.  **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.
     *
     * @param id The ID of the filter. (required)
     * @param permissionId The ID of the share permission. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the filter is not found.  *  the user does not own the filter. (status code 404)
     */
    @Operation(
        operationId = "deleteSharePermission",
        summary = "Delete share permission",
        description = "Deletes a share permission from a filter.  **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.",
        tags = { "Filter sharing" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the filter is not found.  *  the user does not own the filter.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/filter/{id}/permission/{permissionId}"
    )
    
    default ResponseEntity<Void> deleteSharePermission(
        @Parameter(name = "id", description = "The ID of the filter.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "permissionId", description = "The ID of the share permission.", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") Long permissionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/statuses : Bulk delete Statuses
     * Deletes statuses by ID.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     *
     * @param id The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id&#x3D;10000&amp;id&#x3D;10001.  Min items &#x60;1&#x60;, Max items &#x60;50&#x60; (optional)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. (status code 401)
     */
    @Operation(
        operationId = "deleteStatusesById",
        summary = "Bulk delete Statuses",
        description = "Deletes statuses by ID.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)",
        tags = { "Status" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/statuses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteStatusesById(
        @Parameter(name = "id", description = "The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.  Min items `1`, Max items `50`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) List<String> id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/uiModifications/{uiModificationId} : Delete UI modification
     * Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.  **[Permissions](#permissions) required:** None.
     *
     * @param uiModificationId The ID of the UI modification. (required)
     * @return Returned if the UI modification is deleted. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the request is not from a Forge app. (status code 403)
     *         or Returned if the UI modification is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteUiModification",
        summary = "Delete UI modification",
        description = "Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.  **[Permissions](#permissions) required:** None.",
        tags = { "UI modifications (apps)" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the UI modification is deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not from a Forge app."),
            @ApiResponse(responseCode = "404", description = "Returned if the UI modification is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/uiModifications/{uiModificationId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteUiModification(
        @Parameter(name = "uiModificationId", description = "The ID of the UI modification.", required = true, in = ParameterIn.PATH) @PathVariable("uiModificationId") String uiModificationId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/user/properties/{propertyKey} : Delete user property
     * Deletes a property from a user.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.  *  Access to Jira, to delete a property from the calling user&#39;s record.
     *
     * @param propertyKey The key of the user&#39;s property. (required)
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
     * @param userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the user property is deleted. (status code 204)
     *         or Returned if &#x60;accountId&#x60; is missing. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission or is not accessing their user record. (status code 403)
     *         or Returned if the user or the property is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteUserProperty",
        summary = "Delete user property",
        description = "Deletes a property from a user.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.  *  Access to Jira, to delete a property from the calling user's record.",
        tags = { "User properties" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the user property is deleted."),
            @ApiResponse(responseCode = "400", description = "Returned if `accountId` is missing."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission or is not accessing their user record."),
            @ApiResponse(responseCode = "404", description = "Returned if the user or the property is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/user/properties/{propertyKey}"
    )
    
    default ResponseEntity<Void> deleteUserProperty(
        @Parameter(name = "propertyKey", description = "The key of the user's property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "userKey", description = "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userKey", required = false) String userKey,
        @Parameter(name = "username", description = "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/version/{id} : Delete version
     * Deletes a project version.  Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for &#x60;fixVersion&#x60; and &#x60;affectedVersion&#x60; provided in this resource.  Alternative versions can be provided to update issues that use the deleted version in &#x60;fixVersion&#x60; or &#x60;affectedVersion&#x60;. If alternatives are not provided, occurrences of &#x60;fixVersion&#x60; and &#x60;affectedVersion&#x60; that contain the deleted version are cleared.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     *
     * @param id The ID of the version. (required)
     * @param moveFixIssuesTo The ID of the version to update &#x60;fixVersion&#x60; to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted. (optional)
     * @param moveAffectedIssuesTo The ID of the version to update &#x60;affectedVersion&#x60; to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted. (optional)
     * @return Returned if the version is deleted. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if:   *  the authentication credentials are incorrect.  *  the user does not have the required permissions. (status code 401)
     *         or Returned if the version is not found. (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "deleteVersion",
        summary = "Delete version",
        description = "Deletes a project version.  Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.  Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.",
        deprecated = true,
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the version is deleted."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if:   *  the authentication credentials are incorrect.  *  the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the version is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/version/{id}"
    )
    
    default ResponseEntity<Void> deleteVersion(
        @Parameter(name = "id", description = "The ID of the version.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "moveFixIssuesTo", description = "The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "moveFixIssuesTo", required = false) String moveFixIssuesTo,
        @Parameter(name = "moveAffectedIssuesTo", description = "The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "moveAffectedIssuesTo", required = false) String moveAffectedIssuesTo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/webhook : Delete webhooks by ID
     * Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     *
     * @param containerForWebhookIDs  (required)
     * @return Returned if the request is successful. (status code 202)
     *         or Returned if the list of webhook IDs is missing. (status code 400)
     *         or Returned if the caller isn&#39;t an app. (status code 403)
     */
    @Operation(
        operationId = "deleteWebhookById",
        summary = "Delete webhooks by ID",
        description = "Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the list of webhook IDs is missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the caller isn't an app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work", "manage:jira-webhook" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/webhook",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteWebhookById(
        @Parameter(name = "ContainerForWebhookIDs", description = "", required = true) @Valid @RequestBody ContainerForWebhookIDs containerForWebhookIDs
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/workflowscheme/{id}/workflow : Delete issue types for workflow in workflow scheme
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. (required)
     * @param workflowName The name of the workflow. (required)
     * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not true. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. (status code 404)
     */
    @Operation(
        operationId = "deleteWorkflowMapping",
        summary = "Delete issue types for workflow in workflow scheme",
        description = "Deletes the workflow-issue type mapping for a workflow in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the workflow cannot be edited and `updateDraftIfNeeded` is not true."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/workflowscheme/{id}/workflow"
    )
    
    default ResponseEntity<Void> deleteWorkflowMapping(
        @Parameter(name = "id", description = "The ID of the workflow scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @NotNull @Parameter(name = "workflowName", description = "The name of the workflow.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = true) String workflowName,
        @Parameter(name = "updateDraftIfNeeded", description = "Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updateDraftIfNeeded", required = false) Boolean updateDraftIfNeeded
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/workflowscheme/{id} : Delete workflow scheme
     * Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as &#x60;schemeId&#x60;. For example, *schemeId&#x3D;10301*. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the scheme is active. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteWorkflowScheme",
        summary = "Delete workflow scheme",
        description = "Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the scheme is active."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/workflowscheme/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> deleteWorkflowScheme(
        @Parameter(name = "id", description = "The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/workflowscheme/{id}/draft : Delete draft workflow scheme
     * Deletes a draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the active workflow scheme that the draft was created from. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission.. (status code 403)
     *         or Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. (status code 404)
     */
    @Operation(
        operationId = "deleteWorkflowSchemeDraft",
        summary = "Delete draft workflow scheme",
        description = "Deletes a draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/workflowscheme/{id}/draft"
    )
    
    default ResponseEntity<Void> deleteWorkflowSchemeDraft(
        @Parameter(name = "id", description = "The ID of the active workflow scheme that the draft was created from.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType} : Delete workflow for issue type in draft workflow scheme
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param issueType The ID of the issue type. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme or issue type is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteWorkflowSchemeDraftIssueType",
        summary = "Delete workflow for issue type in draft workflow scheme",
        description = "Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme or issue type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> deleteWorkflowSchemeDraftIssueType(
        @Parameter(name = "id", description = "The ID of the workflow scheme that the draft belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "issueType", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueType") String issueType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/workflowscheme/{id}/issuetype/{issueType} : Delete workflow for issue type in workflow scheme
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. (required)
     * @param issueType The ID of the issue type. (required)
     * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme or issue type is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteWorkflowSchemeIssueType",
        summary = "Delete workflow for issue type in workflow scheme",
        description = "Deletes the issue type-workflow mapping for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme or issue type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> deleteWorkflowSchemeIssueType(
        @Parameter(name = "id", description = "The ID of the workflow scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "issueType", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueType") String issueType,
        @Parameter(name = "updateDraftIfNeeded", description = "Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updateDraftIfNeeded", required = false) Boolean updateDraftIfNeeded
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/workflow/transitions/{transitionId}/properties : Delete workflow transition property
     * Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
     * @param key The name of the transition property to delete, also known as the name of the property. (required)
     * @param workflowName The name of the workflow that the transition belongs to. (required)
     * @param workflowMode The workflow status. Set to &#x60;live&#x60; for inactive workflows or &#x60;draft&#x60; for draft workflows. Active workflows cannot be edited. (optional)
     * @return 200 response (status code 200)
     *         or Returned if no changes were made by the request. For example, trying to delete a property that cannot be found. (status code 304)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow transition is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteWorkflowTransitionProperty",
        summary = "Delete workflow transition property",
        description = "Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow transition properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "200 response"),
            @ApiResponse(responseCode = "304", description = "Returned if no changes were made by the request. For example, trying to delete a property that cannot be found."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow transition is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/workflow/transitions/{transitionId}/properties"
    )
    
    default ResponseEntity<Void> deleteWorkflowTransitionProperty(
        @Parameter(name = "transitionId", description = "The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.", required = true, in = ParameterIn.PATH) @PathVariable("transitionId") Long transitionId,
        @NotNull @Parameter(name = "key", description = "The name of the transition property to delete, also known as the name of the property.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = true) String key,
        @NotNull @Parameter(name = "workflowName", description = "The name of the workflow that the transition belongs to.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = true) String workflowName,
        @Parameter(name = "workflowMode", description = "The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowMode", required = false) String workflowMode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflow/rule/config/delete : Delete workflow transition rule configurations
     * Deletes workflow transition rules from one or more workflows. These rule types are supported:   *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)  Only rules created by the calling Connect app can be deleted.  **[Permissions](#permissions) required:** Only Connect apps can use this operation.
     *
     * @param workflowsWithTransitionRulesDetails  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the caller is not a Connect app. (status code 403)
     */
    @Operation(
        operationId = "deleteWorkflowTransitionRuleConfigurations",
        summary = "Delete workflow transition rule configurations",
        description = "Deletes workflow transition rules from one or more workflows. These rule types are supported:   *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)  Only rules created by the calling Connect app can be deleted.  **[Permissions](#permissions) required:** Only Connect apps can use this operation.",
        tags = { "Workflow transition rules" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowTransitionRulesUpdateErrors.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the caller is not a Connect app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflow/rule/config/delete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowTransitionRulesUpdateErrors> deleteWorkflowTransitionRuleConfigurations(
        @Parameter(name = "WorkflowsWithTransitionRulesDetails", description = "", required = true) @Valid @RequestBody WorkflowsWithTransitionRulesDetails workflowsWithTransitionRulesDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updateResults\" : [ { \"updateErrors\" : [ \"updateErrors\", \"updateErrors\" ], \"workflowId\" : { \"draft\" : true, \"name\" : \"name\" }, \"ruleUpdateErrors\" : { \"key\" : [ \"ruleUpdateErrors\", \"ruleUpdateErrors\" ] } }, { \"updateErrors\" : [ \"updateErrors\", \"updateErrors\" ], \"workflowId\" : { \"draft\" : true, \"name\" : \"name\" }, \"ruleUpdateErrors\" : { \"key\" : [ \"ruleUpdateErrors\", \"ruleUpdateErrors\" ] } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issue/{issueIdOrKey}/worklog/{id} : Delete worklog
     * Deletes a worklog from an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param id The ID of the worklog. (required)
     * @param notifyUsers Whether users watching the issue are notified by email. (optional, default to true)
     * @param adjustEstimate Defines how to update the issue&#39;s time estimate, the options are:   *  &#x60;new&#x60; Sets the estimate to a specific value, defined in &#x60;newEstimate&#x60;.  *  &#x60;leave&#x60; Leaves the estimate unchanged.  *  &#x60;manual&#x60; Increases the estimate by amount specified in &#x60;increaseBy&#x60;.  *  &#x60;auto&#x60; Reduces the estimate by the value of &#x60;timeSpent&#x60; in the worklog. (optional, default to auto)
     * @param newEstimate The value to set as the issue&#39;s remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when &#x60;adjustEstimate&#x60; is &#x60;new&#x60;. (optional)
     * @param increaseBy The amount to increase the issue&#39;s remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when &#x60;adjustEstimate&#x60; is &#x60;manual&#x60;. (optional)
     * @param overrideEditableFlag Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag. (optional, default to false)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if:   *  &#x60;adjustEstimate&#x60; is set to &#x60;new&#x60; but &#x60;newEstimate&#x60; is not provided or is invalid.  *  &#x60;adjustEstimate&#x60; is set to &#x60;manual&#x60; but &#x60;reduceBy&#x60; is not provided or is invalid.  *  the user does not have permission to delete the worklog. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if:   *  the issue is not found or user does not have permission to view the issue.  *  the worklog is not found or the user does not have permission to view it.  *  time tracking is disabled. (status code 404)
     */
    @Operation(
        operationId = "deleteWorklog",
        summary = "Delete worklog",
        description = "Deletes a worklog from an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue worklogs" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.  *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.  *  the user does not have permission to delete the worklog."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue is not found or user does not have permission to view the issue.  *  the worklog is not found or the user does not have permission to view it.  *  time tracking is disabled.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}"
    )
    
    default ResponseEntity<Void> deleteWorklog(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "id", description = "The ID of the worklog.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "notifyUsers", description = "Whether users watching the issue are notified by email.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "notifyUsers", required = false, defaultValue = "true") Boolean notifyUsers,
        @Parameter(name = "adjustEstimate", description = "Defines how to update the issue's time estimate, the options are:   *  `new` Sets the estimate to a specific value, defined in `newEstimate`.  *  `leave` Leaves the estimate unchanged.  *  `manual` Increases the estimate by amount specified in `increaseBy`.  *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "adjustEstimate", required = false, defaultValue = "auto") String adjustEstimate,
        @Parameter(name = "newEstimate", description = "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "newEstimate", required = false) String newEstimate,
        @Parameter(name = "increaseBy", description = "The amount to increase the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `manual`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "increaseBy", required = false) String increaseBy,
        @Parameter(name = "overrideEditableFlag", description = "Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideEditableFlag", required = false, defaultValue = "false") Boolean overrideEditableFlag
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey} : Delete worklog property
     * Deletes a worklog property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param worklogId The ID of the worklog. (required)
     * @param propertyKey The key of the property. (required)
     * @return Returned if the worklog property is removed. (status code 204)
     *         or Returned if the worklog key or id is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to edit the worklog. (status code 403)
     *         or Returned if:   *  the issue, worklog, or property is not found.  *  the user does not have permission to view the issue or worklog. (status code 404)
     */
    @Operation(
        operationId = "deleteWorklogProperty",
        summary = "Delete worklog property",
        description = "Deletes a worklog property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue worklog properties" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the worklog property is removed."),
            @ApiResponse(responseCode = "400", description = "Returned if the worklog key or id is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to edit the worklog."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue, worklog, or property is not found.  *  the user does not have permission to view the issue or worklog.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}"
    )
    
    default ResponseEntity<Void> deleteWorklogProperty(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "worklogId", description = "The ID of the worklog.", required = true, in = ParameterIn.PATH) @PathVariable("worklogId") String worklogId,
        @Parameter(name = "propertyKey", description = "The key of the property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/transitions : Transition issue
     * Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.  sortByCategory To update the fields on the transition screen, specify the fields in the &#x60;fields&#x60; or &#x60;update&#x60; parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the &#x60;transitions.fields&#x60; expand.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param issueUpdateDetails  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if:   *  no transition is specified.  *  the user does not have permission to transition the issue.  *  a field that isn&#39;t included on the transition screen is defined in &#x60;fields&#x60; or &#x60;update&#x60;.  *  a field is specified in both &#x60;fields&#x60; and &#x60;update&#x60;.  *  the request is invalid for any other reason. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "doTransition",
        summary = "Transition issue",
        description = "Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.  sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  no transition is specified.  *  the user does not have permission to transition the issue.  *  a field that isn't included on the transition screen is defined in `fields` or `update`.  *  a field is specified in both `fields` and `update`.  *  the request is invalid for any other reason."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/{issueIdOrKey}/transitions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> doTransition(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "IssueUpdateDetails", description = "", required = true) @Valid @RequestBody IssueUpdateDetails issueUpdateDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/atlassian-connect/1/app/module/dynamic : Get modules
     * Returns all modules registered dynamically by the calling app.  **[Permissions](#permissions) required:** Only Connect apps can make this request.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the call is not from a Connect app. (status code 401)
     */
    @Operation(
        operationId = "dynamicModulesResourceGetModulesGet",
        summary = "Get modules",
        description = "Returns all modules registered dynamically by the calling app.  **[Permissions](#permissions) required:** Only Connect apps can make this request.",
        tags = { "Dynamic modules" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConnectModules.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the call is not from a Connect app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/atlassian-connect/1/app/module/dynamic",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ConnectModules> dynamicModulesResourceGetModulesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"jiraEntityProperties\" : [ { \"entityType\" : \"issue\", \"key\" : \"dynamic-attachment-entity-property\", \"keyConfigurations\" : [ { \"extractions\" : [ { \"alias\" : \"attachmentExtension\", \"objectName\" : \"extension\", \"type\" : \"text\" } ], \"propertyKey\" : \"attachment\" } ], \"name\" : { \"value\" : \"Attachment Index Document\" } } ], \"jiraIssueFields\" : [ { \"description\" : { \"value\" : \"A dynamically added single-select field\" }, \"extractions\" : [ { \"name\" : \"categoryName\", \"path\" : \"category\", \"type\" : \"text\" } ], \"key\" : \"dynamic-select-field\", \"name\" : { \"value\" : \"Dynamic single select\" }, \"type\" : \"single_select\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/atlassian-connect/1/app/module/dynamic : Register modules
     * Registers a list of modules.  **[Permissions](#permissions) required:** Only Connect apps can make this request.
     *
     * @param connectModules  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if: * any of the provided modules is invalid. For example, required properties are missing. * any of the modules conflict with registered dynamic modules or modules defined in the app descriptor. For example, there are duplicate keys.  Details of the issues encountered are included in the error message. (status code 400)
     *         or Returned if the call is not from a Connect app. (status code 401)
     */
    @Operation(
        operationId = "dynamicModulesResourceRegisterModulesPost",
        summary = "Register modules",
        description = "Registers a list of modules.  **[Permissions](#permissions) required:** Only Connect apps can make this request.",
        tags = { "Dynamic modules" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if: * any of the provided modules is invalid. For example, required properties are missing. * any of the modules conflict with registered dynamic modules or modules defined in the app descriptor. For example, there are duplicate keys.  Details of the issues encountered are included in the error message.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the call is not from a Connect app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/atlassian-connect/1/app/module/dynamic",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> dynamicModulesResourceRegisterModulesPost(
        @Parameter(name = "ConnectModules", description = "", required = true) @Valid @RequestBody ConnectModules connectModules
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/atlassian-connect/1/app/module/dynamic : Remove modules
     * Remove all or a list of modules registered by the calling app.  **[Permissions](#permissions) required:** Only Connect apps can make this request.
     *
     * @param moduleKey The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter. For example, &#x60;moduleKey&#x3D;dynamic-attachment-entity-property&amp;moduleKey&#x3D;dynamic-select-field&#x60;. Nonexistent keys are ignored. (optional)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the call is not from a Connect app. (status code 401)
     */
    @Operation(
        operationId = "dynamicModulesResourceRemoveModulesDelete",
        summary = "Remove modules",
        description = "Remove all or a list of modules registered by the calling app.  **[Permissions](#permissions) required:** Only Connect apps can make this request.",
        tags = { "Dynamic modules" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the call is not from a Connect app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/atlassian-connect/1/app/module/dynamic",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> dynamicModulesResourceRemoveModulesDelete(
        @Parameter(name = "moduleKey", description = "The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter. For example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`. Nonexistent keys are ignored.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "moduleKey", required = false) List<String> moduleKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issue/{issueIdOrKey} : Edit issue
     * Edits an issue. A transition may be applied and issue properties updated as part of the edit.  The edits to the issue&#39;s fields are defined using &#x60;update&#x60; and &#x60;fields&#x60;. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).  The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting &#x60;update.parent.set.none&#x60; to *true*. Note that the &#x60;description&#x60;, &#x60;environment&#x60;, and any &#x60;textarea&#x60; type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (&#x60;textfield&#x60;) accept a string and don&#39;t handle Atlassian Document Format content.  Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using &#x60;overrideScreenSecurity&#x60; and &#x60;overrideEditableFlag&#x60;.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param issueUpdateDetails  (required)
     * @param notifyUsers Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn&#39;t have the necessary permission the request is ignored. (optional, default to true)
     * @param overrideScreenSecurity Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
     * @param overrideEditableFlag Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if:   *  the request body is missing.  *  the user does not have the necessary permission to edit one or more fields.  *  the request includes one or more fields that are not found or are not associated with the issue&#39;s edit screen.  *  the request includes an invalid transition. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user uses &#x60;overrideScreenSecurity&#x60; or &#x60;overrideEditableFlag&#x60; but doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "editIssue",
        summary = "Edit issue",
        description = "Edits an issue. A transition may be applied and issue properties updated as part of the edit.  The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).  The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.  Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the request body is missing.  *  the user does not have the necessary permission to edit one or more fields.  *  the request includes one or more fields that are not found or are not associated with the issue's edit screen.  *  the request includes an invalid transition."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user uses `overrideScreenSecurity` or `overrideEditableFlag` but doesn't have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issue/{issueIdOrKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> editIssue(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "IssueUpdateDetails", description = "", required = true) @Valid @RequestBody IssueUpdateDetails issueUpdateDetails,
        @Parameter(name = "notifyUsers", description = "Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "notifyUsers", required = false, defaultValue = "true") Boolean notifyUsers,
        @Parameter(name = "overrideScreenSecurity", description = "Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideScreenSecurity", required = false, defaultValue = "false") Boolean overrideScreenSecurity,
        @Parameter(name = "overrideEditableFlag", description = "Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideEditableFlag", required = false, defaultValue = "false") Boolean overrideEditableFlag
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/expression/eval : Evaluate Jira expression
     * Evaluates a Jira expression and returns its value.  This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.  #### Context variables ####  The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.   *  &#x60;user&#x60; ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to &#x60;null&#x60; if the request is anonymous.  *  &#x60;app&#x60; ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).  *  &#x60;issue&#x60; ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.  *  &#x60;issues&#x60; ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.  *  &#x60;project&#x60; ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.  *  &#x60;sprint&#x60; ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.  *  &#x60;board&#x60; ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.  *  &#x60;serviceDesk&#x60; ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.  *  &#x60;customerRequest&#x60; ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.  Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:   *  &#x60;user&#x60;: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  &#x60;issue&#x60;: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  &#x60;json&#x60;: A JSON object containing custom content.  *  &#x60;list&#x60;: A JSON list of &#x60;user&#x60;, &#x60;issue&#x60;, or &#x60;json&#x60; variable types.  This operation can be accessed anonymously.  **[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.   Permission to access Jira Software is required to access Jira Software context variables (&#x60;board&#x60; and &#x60;sprint&#x60;) or fields (for example, &#x60;issue.sprint&#x60;).
     *
     * @param jiraExpressionEvalRequestBean The Jira expression and the evaluation context. (required)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts &#x60;meta.complexity&#x60; that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions. (optional)
     * @return Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object. (status code 200)
     *         or Returned if:   *  the request is invalid, that is:           *  invalid data is provided, such as a request including issue ID and key.      *  the expression is invalid and can not be parsed.  *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression &#x60;issue.id&#x60; where &#x60;issue&#x60; is &#x60;null&#x60;). In this case an error message is provided. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if any object provided in the request context is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "evaluateJiraExpression",
        summary = "Evaluate Jira expression",
        description = "Evaluates a Jira expression and returns its value.  This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.  #### Context variables ####  The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.   *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.  *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).  *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.  *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.  *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.  *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.  *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.  *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.  *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.  Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:   *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  `json`: A JSON object containing custom content.  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.  This operation can be accessed anonymously.  **[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.   Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).",
        tags = { "Jira expressions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JiraExpressionResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the request is invalid, that is:           *  invalid data is provided, such as a request including issue ID and key.      *  the expression is invalid and can not be parsed.  *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression `issue.id` where `issue` is `null`). In this case an error message is provided.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if any object provided in the request context is not found or the user does not have permission to view it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work", "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/expression/eval",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<JiraExpressionResult> evaluateJiraExpression(
        @Parameter(name = "JiraExpressionEvalRequestBean", description = "The Jira expression and the evaluation context.", required = true) @Valid @RequestBody JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"meta\" : \"\", \"value\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/attachment/{id}/expand/human : Get all metadata for an expanded attachment
     * Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.  Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment&#39;s ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment&#39;s contents.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param id The ID of the attachment. (required)
     * @return Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or The user does not have the necessary permission. (status code 403)
     *         or Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings. (status code 404)
     *         or Returned if the attachment is an archive, but not a supported archive format. (status code 409)
     */
    @Operation(
        operationId = "expandAttachmentForHumans",
        summary = "Get all metadata for an expanded attachment",
        description = "Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.  Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue attachments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AttachmentArchiveMetadataReadable.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "The user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings."),
            @ApiResponse(responseCode = "409", description = "Returned if the attachment is an archive, but not a supported archive format.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/attachment/{id}/expand/human",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AttachmentArchiveMetadataReadable> expandAttachmentForHumans(
        @Parameter(name = "id", description = "The ID of the attachment.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalEntryCount\" : 1, \"entries\" : [ { \"path\" : \"path\", \"size\" : \"size\", \"index\" : 0, \"mediaType\" : \"mediaType\", \"label\" : \"label\" }, { \"path\" : \"path\", \"size\" : \"size\", \"index\" : 0, \"mediaType\" : \"mediaType\", \"label\" : \"label\" } ], \"name\" : \"name\", \"mediaType\" : \"mediaType\", \"id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/attachment/{id}/expand/raw : Get contents metadata for an expanded attachment
     * Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.  Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment&#39;s ID and name.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param id The ID of the attachment. (required)
     * @return Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or The user does not have the necessary permission. (status code 403)
     *         or Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings. (status code 404)
     *         or Returned if the attachment is an archive, but not a supported archive format. (status code 409)
     */
    @Operation(
        operationId = "expandAttachmentForMachines",
        summary = "Get contents metadata for an expanded attachment",
        description = "Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.  Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue attachments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AttachmentArchiveImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "The user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings."),
            @ApiResponse(responseCode = "409", description = "Returned if the attachment is an archive, but not a supported archive format.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/attachment/{id}/expand/raw",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AttachmentArchiveImpl> expandAttachmentForMachines(
        @Parameter(name = "id", description = "The ID of the attachment.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalEntryCount\" : 1, \"entries\" : [ { \"entryIndex\" : 0, \"size\" : 6, \"name\" : \"name\", \"mediaType\" : \"mediaType\", \"abbreviatedName\" : \"abbreviatedName\" }, { \"entryIndex\" : 0, \"size\" : 6, \"name\" : \"name\", \"mediaType\" : \"mediaType\", \"abbreviatedName\" : \"abbreviatedName\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/assignable/search : Find users assignable to issues
     * Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:   *  a new issue, by providing the &#x60;projectKeyOrId&#x60;.  *  an updated issue, by providing the &#x60;issueKey&#x60;.  *  to an issue during a transition (workflow action), by providing the &#x60;issueKey&#x60; and the transition id in &#x60;actionDescriptorId&#x60;. You can obtain the IDs of an issue&#39;s valid transitions using the &#x60;transitions&#x60; option in the &#x60;expand&#x60; parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).  In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param query A query string that is matched against user attributes, such as &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;, to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. Required, unless &#x60;username&#x60; or &#x60;accountId&#x60; is specified. (optional)
     * @param sessionId The sessionId of this request. SessionId is the same until the assignee is set. (optional)
     * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId A query string that is matched exactly against user &#x60;accountId&#x60;. Required, unless &#x60;query&#x60; is specified. (optional)
     * @param project The project ID or project key (case sensitive). Required, unless &#x60;issueKey&#x60; is specified. (optional)
     * @param issueKey The key of the issue. Required, unless &#x60;project&#x60; is specified. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue. (optional, default to 50)
     * @param actionDescriptorId The ID of the transition. (optional)
     * @param recommend  (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  &#x60;issueKey&#x60; or &#x60;project&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project, issue, or transition is not found. (status code 404)
     *         or Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. (status code 429)
     */
    @Operation(
        operationId = "findAssignableUsers",
        summary = "Find users assignable to issues",
        description = "Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:   *  a new issue, by providing the `projectKeyOrId`.  *  an updated issue, by providing the `issueKey`.  *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).  In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.  This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "User search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `issueKey` or `project` is missing.  *  `query` or `accountId` is missing.  *  `query` and `accountId` are provided."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project, issue, or transition is not found."),
            @ApiResponse(responseCode = "429", description = "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/assignable/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<User>> findAssignableUsers(
        @Parameter(name = "query", description = "A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "sessionId", description = "The sessionId of this request. SessionId is the same until the assignee is set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sessionId", required = false) String sessionId,
        @Parameter(name = "username", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username,
        @Size(max = 128) @Parameter(name = "accountId", description = "A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "project", description = "The project ID or project key (case sensitive). Required, unless `issueKey` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "project", required = false) String project,
        @Parameter(name = "issueKey", description = "The key of the issue. Required, unless `project` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueKey", required = false) String issueKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Integer startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "actionDescriptorId", description = "The ID of the transition.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "actionDescriptorId", required = false) Integer actionDescriptorId,
        @Parameter(name = "recommend", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "recommend", required = false, defaultValue = "false") Boolean recommend
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }, { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/assignable/multiProjectSearch : Find users assignable to projects
     * Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param projectKeys A list of project keys (case sensitive). This parameter accepts a comma-separated list. (required)
     * @param query A query string that is matched against user attributes, such as &#x60;displayName&#x60; and &#x60;emailAddress&#x60;, to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. Required, unless &#x60;accountId&#x60; is specified. (optional)
     * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId A query string that is matched exactly against user &#x60;accountId&#x60;. Required, unless &#x60;query&#x60; is specified. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  &#x60;projectKeys&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if one or more of the projects is not found. (status code 404)
     *         or Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. (status code 429)
     */
    @Operation(
        operationId = "findBulkAssignableUsers",
        summary = "Find users assignable to projects",
        description = "Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.  This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "User search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `projectKeys` is missing.  *  `query` or `accountId` is missing.  *  `query` and `accountId` are provided."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if one or more of the projects is not found."),
            @ApiResponse(responseCode = "429", description = "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/assignable/multiProjectSearch",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<User>> findBulkAssignableUsers(
        @NotNull @Parameter(name = "projectKeys", description = "A list of project keys (case sensitive). This parameter accepts a comma-separated list.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectKeys", required = true) String projectKeys,
        @Parameter(name = "query", description = "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "username", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username,
        @Size(max = 128) @Parameter(name = "accountId", description = "A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Integer startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }, { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/groups/picker : Find groups
     * Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.  The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the &#x60;html&#x60; field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.  The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.
     *
     * @param accountId This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get). (optional)
     * @param query The string to find in group names. (optional)
     * @param exclude As a group&#39;s name can change, use of &#x60;excludeGroupIds&#x60; is recommended to identify a group.   A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, &#x60;exclude&#x3D;group1&amp;exclude&#x3D;group2&#x60;. This parameter cannot be used with the &#x60;excludeGroupIds&#x60; parameter. (optional)
     * @param excludeId A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, &#x60;excludeId&#x3D;group1-id&amp;excludeId&#x3D;group2-id&#x60;. This parameter cannot be used with the &#x60;excludeGroups&#x60; parameter. (optional)
     * @param maxResults The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property &#x60;jira.ajax.autocomplete.limit&#x60;. (optional)
     * @param caseInsensitive Whether the search for groups should be case insensitive. (optional, default to false)
     * @param userName This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the request is successful. (status code 200)
     */
    @Operation(
        operationId = "findGroups",
        summary = "Find groups",
        description = "Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.  The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.  The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoundGroups.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/groups/picker",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FoundGroups> findGroups(
        @Parameter(name = "accountId", description = "This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "query", description = "The string to find in group names.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "exclude", description = "As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.   A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "exclude", required = false) List<String> exclude,
        @Parameter(name = "excludeId", description = "A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeId", required = false) List<String> excludeId,
        @Parameter(name = "maxResults", description = "The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "caseInsensitive", description = "Whether the search for groups should be case insensitive.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInsensitive", required = false, defaultValue = "false") Boolean caseInsensitive,
        @Parameter(name = "userName", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userName", required = false) String userName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 0, \"groups\" : [ { \"groupId\" : \"groupId\", \"name\" : \"name\", \"html\" : \"html\", \"labels\" : [ { \"text\" : \"text\", \"title\" : \"title\", \"type\" : \"ADMIN\" }, { \"text\" : \"text\", \"title\" : \"title\", \"type\" : \"ADMIN\" } ] }, { \"groupId\" : \"groupId\", \"name\" : \"name\", \"html\" : \"html\", \"labels\" : [ { \"text\" : \"text\", \"title\" : \"title\", \"type\" : \"ADMIN\" }, { \"text\" : \"text\", \"title\" : \"title\", \"type\" : \"ADMIN\" } ] } ], \"header\" : \"header\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/search/query/key : Find user keys by query
     * Finds users with a structured query and returns a [paginated](#pagination) list of user keys.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).  The query statements are:   *  &#x60;is assignee of PROJ&#x60; Returns the users that are assignees of at least one issue in project *PROJ*.  *  &#x60;is assignee of (PROJ-1, PROJ-2)&#x60; Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is reporter of (PROJ-1, PROJ-2)&#x60; Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is watcher of (PROJ-1, PROJ-2)&#x60; Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is voter of (PROJ-1, PROJ-2)&#x60; Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is commenter of (PROJ-1, PROJ-2)&#x60; Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is transitioner of (PROJ-1, PROJ-2)&#x60; Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.  *  &#x60;[propertyKey].entity.property.path is \&quot;property value\&quot;&#x60; Returns users with the entity property value.  The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the &#x60;AND&#x60; and &#x60;OR&#x60; operators to form more complex queries. For example:  &#x60;is assignee of PROJ AND [propertyKey].entity.property.path is \&quot;property value\&quot;&#x60;
     *
     * @param query The search query. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 100)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the query is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the search is timed out. (status code 408)
     */
    @Operation(
        operationId = "findUserKeysByQuery",
        summary = "Find user keys by query",
        description = "Finds users with a structured query and returns a [paginated](#pagination) list of user keys.  This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).  The query statements are:   *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.  *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.  *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.  *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.  *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.  *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.  *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.  *  `[propertyKey].entity.property.path is \"property value\"` Returns users with the entity property value.  The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:  `is assignee of PROJ AND [propertyKey].entity.property.path is \"property value\"`",
        tags = { "User search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanUserKey.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the query is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "408", description = "Returned if the search is timed out.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/search/query/key",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanUserKey> findUserKeysByQuery(
        @NotNull @Parameter(name = "query", description = "The search query.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = true) String query,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "100") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"accountId\" : \"accountId\", \"key\" : \"key\" }, { \"accountId\" : \"accountId\", \"key\" : \"key\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/search : Find users
     * Returns a list of users that match the search string and property.  This operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  This operation can be accessed anonymously.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.
     *
     * @param query A query string that is matched against user attributes ( &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;) to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. Required, unless &#x60;accountId&#x60; or &#x60;property&#x60; is specified. (optional)
     * @param username  (optional)
     * @param accountId A query string that is matched exactly against a user &#x60;accountId&#x60;. Required, unless &#x60;query&#x60; or &#x60;property&#x60; is specified. (optional)
     * @param startAt The index of the first item to return in a page of filtered results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param property A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (&#x3D;) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of &#x60;nested&#x60; from &#x60;{\&quot;something\&quot;:{\&quot;nested\&quot;:1,\&quot;other\&quot;:2}}&#x60; use &#x60;thepropertykey.something.nested&#x3D;1&#x60;. Required, unless &#x60;accountId&#x60; or &#x60;query&#x60; is specified. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  &#x60;accountId&#x60;, &#x60;query&#x60; or &#x60;property&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;property&#x60; parameter is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. (status code 429)
     */
    @Operation(
        operationId = "findUsers",
        summary = "Find users",
        description = "Returns a list of users that match the search string and property.  This operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by `startAt` and `maxResults`, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  This operation can be accessed anonymously.  Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.",
        tags = { "User search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `accountId`, `query` or `property` is missing.  *  `query` and `accountId` are provided.  *  `property` parameter is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "429", description = "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<User>> findUsers(
        @Parameter(name = "query", description = "A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "username", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username,
        @Size(max = 128) @Parameter(name = "accountId", description = "A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of filtered results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Integer startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "property", description = "A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{\"something\":{\"nested\":1,\"other\":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "property", required = false) String property
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }, { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/groupuserpicker : Find users and groups
     * Returns a list of users and groups matching a string. The string is used:   *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.  *  for groups, to find a case-sensitive match with group name.  For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.  Optionally, the search can be refined to:   *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:           *  projects.      *  issue types.          If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.  *  not return Connect app users and groups.  *  return groups that have a case-insensitive match with the query.  The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an &#x60;html&#x60; field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).
     *
     * @param query The search string. (required)
     * @param maxResults The maximum number of items to return in each list. (optional, default to 50)
     * @param showAvatar Whether the user avatar should be returned. If an invalid value is provided, the default value is used. (optional, default to false)
     * @param fieldId The custom field ID of the field this request is for. (optional)
     * @param projectId The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. This parameter is only used when &#x60;fieldId&#x60; is present. (optional)
     * @param issueTypeId The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, &#x60;issueTypeId&#x3D;10000&amp;issueTypeId&#x3D;10001&#x60;. Special values, such as &#x60;-1&#x60; (all standard issue types) and &#x60;-2&#x60; (all subtask issue types), are supported. This parameter is only used when &#x60;fieldId&#x60; is present. (optional)
     * @param avatarSize The size of the avatar to return. If an invalid value is provided, the default value is used. (optional, default to xsmall)
     * @param caseInsensitive Whether the search for groups should be case insensitive. (optional, default to false)
     * @param excludeConnectAddons Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the query parameter is not provided. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. (status code 429)
     */
    @Operation(
        operationId = "findUsersAndGroups",
        summary = "Find users and groups",
        description = "Returns a list of users and groups matching a string. The string is used:   *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.  *  for groups, to find a case-sensitive match with group name.  For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.  Optionally, the search can be refined to:   *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:           *  projects.      *  issue types.          If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.  *  not return Connect app users and groups.  *  return groups that have a case-insensitive match with the query.  The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).",
        tags = { "Group and user picker" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoundUsersAndGroups.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the query parameter is not provided."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "429", description = "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/groupuserpicker",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FoundUsersAndGroups> findUsersAndGroups(
        @NotNull @Parameter(name = "query", description = "The search string.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = true) String query,
        @Parameter(name = "maxResults", description = "The maximum number of items to return in each list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "showAvatar", description = "Whether the user avatar should be returned. If an invalid value is provided, the default value is used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "showAvatar", required = false, defaultValue = "false") Boolean showAvatar,
        @Parameter(name = "fieldId", description = "The custom field ID of the field this request is for.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fieldId", required = false) String fieldId,
        @Parameter(name = "projectId", description = "The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) List<String> projectId,
        @Parameter(name = "issueTypeId", description = "The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueTypeId", required = false) List<String> issueTypeId,
        @Parameter(name = "avatarSize", description = "The size of the avatar to return. If an invalid value is provided, the default value is used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "avatarSize", required = false, defaultValue = "xsmall") String avatarSize,
        @Parameter(name = "caseInsensitive", description = "Whether the search for groups should be case insensitive.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "caseInsensitive", required = false, defaultValue = "false") Boolean caseInsensitive,
        @Parameter(name = "excludeConnectAddons", description = "Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeConnectAddons", required = false, defaultValue = "false") Boolean excludeConnectAddons
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"groups\" : { \"total\" : 0, \"groups\" : [ { \"groupId\" : \"groupId\", \"name\" : \"name\", \"html\" : \"html\", \"labels\" : [ { \"text\" : \"text\", \"title\" : \"title\", \"type\" : \"ADMIN\" }, { \"text\" : \"text\", \"title\" : \"title\", \"type\" : \"ADMIN\" } ] }, { \"groupId\" : \"groupId\", \"name\" : \"name\", \"html\" : \"html\", \"labels\" : [ { \"text\" : \"text\", \"title\" : \"title\", \"type\" : \"ADMIN\" }, { \"text\" : \"text\", \"title\" : \"title\", \"type\" : \"ADMIN\" } ] } ], \"header\" : \"header\" }, \"users\" : { \"total\" : 0, \"header\" : \"header\", \"users\" : [ { \"accountId\" : \"accountId\", \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"html\" : \"html\", \"key\" : \"key\" }, { \"accountId\" : \"accountId\", \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"html\" : \"html\", \"key\" : \"key\" } ] } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/search/query : Find users by query
     * Finds users with a structured query and returns a [paginated](#pagination) list of user details.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).  The query statements are:   *  &#x60;is assignee of PROJ&#x60; Returns the users that are assignees of at least one issue in project *PROJ*.  *  &#x60;is assignee of (PROJ-1, PROJ-2)&#x60; Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is reporter of (PROJ-1, PROJ-2)&#x60; Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is watcher of (PROJ-1, PROJ-2)&#x60; Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is voter of (PROJ-1, PROJ-2)&#x60; Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is commenter of (PROJ-1, PROJ-2)&#x60; Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.  *  &#x60;is transitioner of (PROJ-1, PROJ-2)&#x60; Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.  *  &#x60;[propertyKey].entity.property.path is \&quot;property value\&quot;&#x60; Returns users with the entity property value.  The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the &#x60;AND&#x60; and &#x60;OR&#x60; operators to form more complex queries. For example:  &#x60;is assignee of PROJ AND [propertyKey].entity.property.path is \&quot;property value\&quot;&#x60;
     *
     * @param query The search query. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 100)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the query is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the search is timed out. (status code 408)
     */
    @Operation(
        operationId = "findUsersByQuery",
        summary = "Find users by query",
        description = "Finds users with a structured query and returns a [paginated](#pagination) list of user details.  This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).  The query statements are:   *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.  *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.  *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.  *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.  *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.  *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.  *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.  *  `[propertyKey].entity.property.path is \"property value\"` Returns users with the entity property value.  The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:  `is assignee of PROJ AND [propertyKey].entity.property.path is \"property value\"`",
        tags = { "User search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanUser.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the query is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "408", description = "Returned if the search is timed out.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/search/query",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanUser> findUsersByQuery(
        @NotNull @Parameter(name = "query", description = "The search query.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = true) String query,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "100") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }, { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/picker : Find users for picker
     * Returns a list of users whose attributes match the query term. The returned object includes the &#x60;html&#x60; field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.  This operation takes the users in the range defined by &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.
     *
     * @param query A query string that is matched against user attributes, such as &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;, to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. (required)
     * @param maxResults The maximum number of items to return. The total number of matched users is returned in &#x60;total&#x60;. (optional, default to 50)
     * @param showAvatar Include the URI to the user&#39;s avatar. (optional, default to false)
     * @param exclude This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param excludeAccountIds A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, &#x60;excludeAccountIds&#x3D;5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&amp;excludeAccountIds&#x3D;5b10ac8d82e05b22cc7d4ef5&#x60;. Cannot be provided with &#x60;exclude&#x60;. (optional)
     * @param avatarSize  (optional)
     * @param excludeConnectUsers  (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if &#x60;exclude&#x60; and &#x60;excludeAccountIds&#x60; are provided. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. (status code 429)
     */
    @Operation(
        operationId = "findUsersForPicker",
        summary = "Find users for picker",
        description = "Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.  This operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.",
        tags = { "User search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoundUsers.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if `exclude` and `excludeAccountIds` are provided."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "429", description = "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/picker",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FoundUsers> findUsersForPicker(
        @NotNull @Parameter(name = "query", description = "A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = true) String query,
        @Parameter(name = "maxResults", description = "The maximum number of items to return. The total number of matched users is returned in `total`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "showAvatar", description = "Include the URI to the user's avatar.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "showAvatar", required = false, defaultValue = "false") Boolean showAvatar,
        @Parameter(name = "exclude", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "exclude", required = false) List<String> exclude,
        @Parameter(name = "excludeAccountIds", description = "A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeAccountIds", required = false) List<String> excludeAccountIds,
        @Parameter(name = "avatarSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "avatarSize", required = false) String avatarSize,
        @Parameter(name = "excludeConnectUsers", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeConnectUsers", required = false, defaultValue = "false") Boolean excludeConnectUsers
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 0, \"header\" : \"header\", \"users\" : [ { \"accountId\" : \"accountId\", \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"html\" : \"html\", \"key\" : \"key\" }, { \"accountId\" : \"accountId\", \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"html\" : \"html\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/permission/search : Find users with permissions
     * Returns a list of users who fulfill these criteria:   *  their user attributes match a search string.  *  they have a set of permissions for a project or issue.  If no search string is provided, a list of all users with the permissions is returned.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
     *
     * @param permissions A comma separated list of permissions. Permissions can be specified as any:   *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).  *  custom project permission added by Connect apps.  *  (deprecated) one of the following:           *  ASSIGNABLE\\_USER      *  ASSIGN\\_ISSUE      *  ATTACHMENT\\_DELETE\\_ALL      *  ATTACHMENT\\_DELETE\\_OWN      *  BROWSE      *  CLOSE\\_ISSUE      *  COMMENT\\_DELETE\\_ALL      *  COMMENT\\_DELETE\\_OWN      *  COMMENT\\_EDIT\\_ALL      *  COMMENT\\_EDIT\\_OWN      *  COMMENT\\_ISSUE      *  CREATE\\_ATTACHMENT      *  CREATE\\_ISSUE      *  DELETE\\_ISSUE      *  EDIT\\_ISSUE      *  LINK\\_ISSUE      *  MANAGE\\_WATCHER\\_LIST      *  MODIFY\\_REPORTER      *  MOVE\\_ISSUE      *  PROJECT\\_ADMIN      *  RESOLVE\\_ISSUE      *  SCHEDULE\\_ISSUE      *  SET\\_ISSUE\\_SECURITY      *  TRANSITION\\_ISSUE      *  VIEW\\_VERSION\\_CONTROL      *  VIEW\\_VOTERS\\_AND\\_WATCHERS      *  VIEW\\_WORKFLOW\\_READONLY      *  WORKLOG\\_DELETE\\_ALL      *  WORKLOG\\_DELETE\\_OWN      *  WORKLOG\\_EDIT\\_ALL      *  WORKLOG\\_EDIT\\_OWN      *  WORK\\_ISSUE (required)
     * @param query A query string that is matched against user attributes, such as &#x60;displayName&#x60; and &#x60;emailAddress&#x60;, to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. Required, unless &#x60;accountId&#x60; is specified. (optional)
     * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId A query string that is matched exactly against user &#x60;accountId&#x60;. Required, unless &#x60;query&#x60; is specified. (optional)
     * @param issueKey The issue key for the issue. (optional)
     * @param projectKey The project key for the project (case sensitive). (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;permissions&#x60; is empty or contains an invalid entry. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the issue or project is not found. (status code 404)
     *         or Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. (status code 429)
     */
    @Operation(
        operationId = "findUsersWithAllPermissions",
        summary = "Find users with permissions",
        description = "Returns a list of users who fulfill these criteria:   *  their user attributes match a search string.  *  they have a set of permissions for a project or issue.  If no search string is provided, a list of all users with the permissions is returned.  This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.",
        tags = { "User search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `issueKey` or `projectKey` is missing.  *  `query` or `accountId` is missing.  *  `query` and `accountId` are provided.  *  `permissions` is empty or contains an invalid entry."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or project is not found."),
            @ApiResponse(responseCode = "429", description = "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/permission/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<User>> findUsersWithAllPermissions(
        @NotNull @Parameter(name = "permissions", description = "A comma separated list of permissions. Permissions can be specified as any:   *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).  *  custom project permission added by Connect apps.  *  (deprecated) one of the following:           *  ASSIGNABLE\\_USER      *  ASSIGN\\_ISSUE      *  ATTACHMENT\\_DELETE\\_ALL      *  ATTACHMENT\\_DELETE\\_OWN      *  BROWSE      *  CLOSE\\_ISSUE      *  COMMENT\\_DELETE\\_ALL      *  COMMENT\\_DELETE\\_OWN      *  COMMENT\\_EDIT\\_ALL      *  COMMENT\\_EDIT\\_OWN      *  COMMENT\\_ISSUE      *  CREATE\\_ATTACHMENT      *  CREATE\\_ISSUE      *  DELETE\\_ISSUE      *  EDIT\\_ISSUE      *  LINK\\_ISSUE      *  MANAGE\\_WATCHER\\_LIST      *  MODIFY\\_REPORTER      *  MOVE\\_ISSUE      *  PROJECT\\_ADMIN      *  RESOLVE\\_ISSUE      *  SCHEDULE\\_ISSUE      *  SET\\_ISSUE\\_SECURITY      *  TRANSITION\\_ISSUE      *  VIEW\\_VERSION\\_CONTROL      *  VIEW\\_VOTERS\\_AND\\_WATCHERS      *  VIEW\\_WORKFLOW\\_READONLY      *  WORKLOG\\_DELETE\\_ALL      *  WORKLOG\\_DELETE\\_OWN      *  WORKLOG\\_EDIT\\_ALL      *  WORKLOG\\_EDIT\\_OWN      *  WORK\\_ISSUE", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "permissions", required = true) String permissions,
        @Parameter(name = "query", description = "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "username", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username,
        @Size(max = 128) @Parameter(name = "accountId", description = "A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "issueKey", description = "The issue key for the issue.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueKey", required = false) String issueKey,
        @Parameter(name = "projectKey", description = "The project key for the project (case sensitive).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectKey", required = false) String projectKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Integer startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }, { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/viewissue/search : Find users with browse permission
     * Returns a list of users who fulfill these criteria:   *  their user attributes match a search string.  *  they have permission to browse issues.  Use this resource to find users who can browse:   *  an issue, by providing the &#x60;issueKey&#x60;.  *  any issue in a project, by providing the &#x60;projectKey&#x60;.  This operation takes the users in the range defined by &#x60;startAt&#x60; and &#x60;maxResults&#x60;, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in &#x60;maxResults&#x60;. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.
     *
     * @param query A query string that is matched against user attributes, such as &#x60;displayName&#x60; and &#x60;emailAddress&#x60;, to find relevant users. The string can match the prefix of the attribute&#39;s value. For example, *query&#x3D;john* matches a user with a &#x60;displayName&#x60; of *John Smith* and a user with an &#x60;emailAddress&#x60; of *johnson@example.com*. Required, unless &#x60;accountId&#x60; is specified. (optional)
     * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId A query string that is matched exactly against user &#x60;accountId&#x60;. Required, unless &#x60;query&#x60; is specified. (optional)
     * @param issueKey The issue key for the issue. Required, unless &#x60;projectKey&#x60; is specified. (optional)
     * @param projectKey The project key for the project (case sensitive). Required, unless &#x60;issueKey&#x60; is specified. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  &#x60;issueKey&#x60; or &#x60;projectKey&#x60; is missing.  *  &#x60;query&#x60; or &#x60;accountId&#x60; is missing.  *  &#x60;query&#x60; and &#x60;accountId&#x60; are provided. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue or project is not found. (status code 404)
     *         or Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. (status code 429)
     */
    @Operation(
        operationId = "findUsersWithBrowsePermission",
        summary = "Find users with browse permission",
        description = "Returns a list of users who fulfill these criteria:   *  their user attributes match a search string.  *  they have permission to browse issues.  Use this resource to find users who can browse:   *  an issue, by providing the `issueKey`.  *  any issue in a project, by providing the `projectKey`.  This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.  Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.",
        tags = { "User search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `issueKey` or `projectKey` is missing.  *  `query` or `accountId` is missing.  *  `query` and `accountId` are provided."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or project is not found."),
            @ApiResponse(responseCode = "429", description = "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/viewissue/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<User>> findUsersWithBrowsePermission(
        @Parameter(name = "query", description = "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "username", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username,
        @Size(max = 128) @Parameter(name = "accountId", description = "A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "issueKey", description = "The issue key for the issue. Required, unless `projectKey` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueKey", required = false) String issueKey,
        @Parameter(name = "projectKey", description = "The project key for the project (case sensitive). Required, unless `issueKey` is specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectKey", required = false) String projectKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Integer startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }, { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/role/{id} : Fully update project role
     * Updates the project role&#39;s name and description. You must include both a name and a description in the request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param createUpdateRoleRequestBean  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. The &#x60;name&#x60; cannot be empty or start or end with whitespace. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have administrative permissions. (status code 403)
     *         or Returned if the project role is not found. (status code 404)
     */
    @Operation(
        operationId = "fullyUpdateProjectRole",
        summary = "Fully update project role",
        description = "Updates the project role's name and description. You must include both a name and a description in the request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectRole.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have administrative permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project role is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/role/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectRole> fullyUpdateProjectRole(
        @Parameter(name = "id", description = "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateUpdateRoleRequestBean", description = "", required = true) @Valid @RequestBody CreateUpdateRoleRequestBean createUpdateRoleRequestBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/type/{projectTypeKey}/accessible : Get accessible project type by key
     * Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param projectTypeKey The key of the project type. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project type is not accessible to the user. (status code 404)
     */
    @Operation(
        operationId = "getAccessibleProjectTypeByKey",
        summary = "Get accessible project type by key",
        description = "Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Project types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectType.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project type is not accessible to the user.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/type/{projectTypeKey}/accessible",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectType> getAccessibleProjectTypeByKey(
        @Parameter(name = "projectTypeKey", description = "The key of the project type.", required = true, in = ParameterIn.PATH) @PathVariable("projectTypeKey") String projectTypeKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"descriptionI18nKey\" : \"descriptionI18nKey\", \"color\" : \"color\", \"icon\" : \"icon\", \"formattedKey\" : \"formattedKey\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/application-properties/advanced-settings : Get advanced settings
     * Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon &gt; **Jira settings** &gt; **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user is not an administrator. (status code 403)
     */
    @Operation(
        operationId = "getAdvancedSettings",
        summary = "Get advanced settings",
        description = "Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Jira settings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApplicationProperty.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user is not an administrator.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/application-properties/advanced-settings",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ApplicationProperty>> getAdvancedSettings(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"allowedValues\" : [ \"allowedValues\", \"allowedValues\" ], \"defaultValue\" : \"defaultValue\", \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"value\" : \"value\", \"key\" : \"key\", \"desc\" : \"desc\", \"example\" : \"example\" }, { \"allowedValues\" : [ \"allowedValues\", \"allowedValues\" ], \"defaultValue\" : \"defaultValue\", \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"value\" : \"value\", \"key\" : \"key\", \"desc\" : \"desc\", \"example\" : \"example\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/type/accessible : Get licensed project types
     * Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.
     *
     * @return Returned if the request is successful. (status code 200)
     */
    @Operation(
        operationId = "getAllAccessibleProjectTypes",
        summary = "Get licensed project types",
        description = "Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.",
        tags = { "Project types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectType.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/type/accessible",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectType>> getAllAccessibleProjectTypes(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"descriptionI18nKey\" : \"descriptionI18nKey\", \"color\" : \"color\", \"icon\" : \"icon\", \"formattedKey\" : \"formattedKey\", \"key\" : \"key\" }, { \"descriptionI18nKey\" : \"descriptionI18nKey\", \"color\" : \"color\", \"icon\" : \"icon\", \"formattedKey\" : \"formattedKey\", \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/applicationrole : Get all application roles
     * Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user is not an administrator. (status code 403)
     */
    @Operation(
        operationId = "getAllApplicationRoles",
        summary = "Get all application roles",
        description = "Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Application roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApplicationRole.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user is not an administrator.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/applicationrole",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ApplicationRole>> getAllApplicationRoles(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"defaultGroups\" : [ \"defaultGroups\", \"defaultGroups\" ], \"groupDetails\" : [ { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" }, { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" } ], \"hasUnlimitedSeats\" : true, \"groups\" : [ \"groups\", \"groups\" ], \"remainingSeats\" : 6, \"platform\" : true, \"selectedByDefault\" : true, \"numberOfSeats\" : 0, \"defaultGroupsDetails\" : [ { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" }, { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" } ], \"userCount\" : 1, \"userCountDescription\" : \"userCountDescription\", \"name\" : \"name\", \"defined\" : true, \"key\" : \"key\" }, { \"defaultGroups\" : [ \"defaultGroups\", \"defaultGroups\" ], \"groupDetails\" : [ { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" }, { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" } ], \"hasUnlimitedSeats\" : true, \"groups\" : [ \"groups\", \"groups\" ], \"remainingSeats\" : 6, \"platform\" : true, \"selectedByDefault\" : true, \"numberOfSeats\" : 0, \"defaultGroupsDetails\" : [ { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" }, { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" } ], \"userCount\" : 1, \"userCountDescription\" : \"userCountDescription\", \"name\" : \"name\", \"defined\" : true, \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/dashboard/gadgets : Get available gadgets
     * Gets a list of all available gadgets that can be added to all dashboards.  **[Permissions](#permissions) required:** None.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or 400 response (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getAllAvailableDashboardGadgets",
        summary = "Get available gadgets",
        description = "Gets a list of all available gadgets that can be added to all dashboards.  **[Permissions](#permissions) required:** None.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AvailableDashboardGadgetsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "400 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/dashboard/gadgets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AvailableDashboardGadgetsResponse> getAllAvailableDashboardGadgets(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gadgets\" : [ { \"title\" : \"title\", \"uri\" : \"uri\", \"moduleKey\" : \"moduleKey\" }, { \"title\" : \"title\", \"uri\" : \"uri\", \"moduleKey\" : \"moduleKey\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/dashboard : Get all dashboards
     * Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param filter The filter applied to the list of dashboards. Valid values are:   *  &#x60;favourite&#x60; Returns dashboards the user has marked as favorite.  *  &#x60;my&#x60; Returns dashboards owned by the user. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 20)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getAllDashboards",
        summary = "Get all dashboards",
        description = "Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageOfDashboards.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/dashboard",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageOfDashboards> getAllDashboards(
        @Parameter(name = "filter", description = "The filter applied to the list of dashboards. Valid values are:   *  `favourite` Returns dashboards the user has marked as favorite.  *  `my` Returns dashboards owned by the user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Integer startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "20") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"next\" : \"next\", \"total\" : 7, \"maxResults\" : 5, \"prev\" : \"prev\", \"dashboards\" : [ { \"automaticRefreshMs\" : 0, \"description\" : \"description\", \"isWritable\" : true, \"view\" : \"view\", \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"popularity\" : 1, \"name\" : \"name\", \"rank\" : 5, \"self\" : \"https://openapi-generator.tech\", \"systemDashboard\" : true, \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"isFavourite\" : true }, { \"automaticRefreshMs\" : 0, \"description\" : \"description\", \"isWritable\" : true, \"view\" : \"view\", \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"popularity\" : 1, \"name\" : \"name\", \"rank\" : 5, \"self\" : \"https://openapi-generator.tech\", \"systemDashboard\" : true, \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"isFavourite\" : true } ], \"startAt\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/fieldconfigurationscheme : Get all field configuration schemes
     * Returns a [paginated](#pagination) list of field configuration schemes.  Only field configuration schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permissions. (status code 403)
     */
    @Operation(
        operationId = "getAllFieldConfigurationSchemes",
        summary = "Get all field configuration schemes",
        description = "Returns a [paginated](#pagination) list of field configuration schemes.  Only field configuration schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanFieldConfigurationScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/fieldconfigurationscheme",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanFieldConfigurationScheme> getAllFieldConfigurationSchemes(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "id", description = "The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<Long> id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }, { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/fieldconfiguration : Get all field configurations
     * Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:   *  a list of field configuration item IDs.  *  whether the field configuration is a default.  *  whether the field configuration name or description contains a query string.  Only field configurations used in company-managed (classic) projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
     * @param isDefault If *true* returns default field configurations only. (optional, default to false)
     * @param query The query string used to match against field configuration names and descriptions. (optional, default to )
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getAllFieldConfigurations",
        summary = "Get all field configurations",
        description = "Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:   *  a list of field configuration item IDs.  *  whether the field configuration is a default.  *  whether the field configuration name or description contains a query string.  Only field configurations used in company-managed (classic) projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanFieldConfigurationDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/fieldconfiguration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanFieldConfigurationDetails> getAllFieldConfigurations(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "id", description = "The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<Long> id,
        @Parameter(name = "isDefault", description = "If *true* returns default field configurations only.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isDefault", required = false, defaultValue = "false") Boolean isDefault,
        @Parameter(name = "query", description = "The query string used to match against field configuration names and descriptions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false, defaultValue = "") String query
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"name\" : \"name\", \"description\" : \"description\" }, { \"name\" : \"name\", \"description\" : \"description\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/dashboard/{dashboardId}/gadget : Get gadgets
     * Returns a list of dashboard gadgets on a dashboard.  This operation returns:   *  Gadgets from a list of IDs, when &#x60;id&#x60; is set.  *  Gadgets with a module key, when &#x60;moduleKey&#x60; is set.  *  Gadgets from a list of URIs, when &#x60;uri&#x60; is set.  *  All gadgets, when no other parameters are set.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param dashboardId The ID of the dashboard. (required)
     * @param moduleKey The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: &#x60;moduleKey&#x3D;key:one&amp;moduleKey&#x3D;key:two&#x60;. (optional)
     * @param uri The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: &#x60;uri&#x3D;/rest/example/uri/1&amp;uri&#x3D;/rest/example/uri/2&#x60;. (optional)
     * @param gadgetId The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: &#x60;gadgetId&#x3D;10000&amp;gadgetId&#x3D;10001&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the dashboard is not found. (status code 404)
     */
    @Operation(
        operationId = "getAllGadgets",
        summary = "Get gadgets",
        description = "Returns a list of dashboard gadgets on a dashboard.  This operation returns:   *  Gadgets from a list of IDs, when `id` is set.  *  Gadgets with a module key, when `moduleKey` is set.  *  Gadgets from a list of URIs, when `uri` is set.  *  All gadgets, when no other parameters are set.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DashboardGadgetResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if the dashboard is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/dashboard/{dashboardId}/gadget",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DashboardGadgetResponse> getAllGadgets(
        @Parameter(name = "dashboardId", description = "The ID of the dashboard.", required = true, in = ParameterIn.PATH) @PathVariable("dashboardId") Long dashboardId,
        @Parameter(name = "moduleKey", description = "The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "moduleKey", required = false) List<String> moduleKey,
        @Parameter(name = "uri", description = "The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "uri", required = false) List<String> uri,
        @Parameter(name = "gadgetId", description = "The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "gadgetId", required = false) List<Long> gadgetId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gadgets\" : [ { \"color\" : \"blue\", \"id\" : 0, \"title\" : \"title\", \"uri\" : \"uri\", \"moduleKey\" : \"moduleKey\" }, { \"color\" : \"blue\", \"id\" : 0, \"title\" : \"title\", \"uri\" : \"uri\", \"moduleKey\" : \"moduleKey\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldKey}/option : Get all issue field options
     * Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     *
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the field is not found or does not support options. (status code 400)
     *         or Returned if the request is not authenticated as a Jira administrator or the app that provided the field. (status code 403)
     */
    @Operation(
        operationId = "getAllIssueFieldOptions",
        summary = "Get all issue field options",
        description = "Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.",
        tags = { "Issue custom field options (apps)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueFieldOption.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the field is not found or does not support options."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not authenticated as a Jira administrator or the app that provided the field.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldKey}/option",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueFieldOption> getAllIssueFieldOptions(
        @Parameter(name = "fieldKey", description = "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`", required = true, in = ParameterIn.PATH) @PathVariable("fieldKey") String fieldKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"id\" : 5, \"config\" : { \"scope\" : \"\", \"attributes\" : [ \"notSelectable\", \"notSelectable\" ] }, \"value\" : \"value\", \"properties\" : { \"key\" : \"\" } }, { \"id\" : 5, \"config\" : { \"scope\" : \"\", \"attributes\" : [ \"notSelectable\", \"notSelectable\" ] }, \"value\" : \"value\", \"properties\" : { \"key\" : \"\" } } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetypescheme : Get all issue type schemes
     * Returns a [paginated](#pagination) list of issue type schemes.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;name&#x60; Sorts by issue type scheme name.  *  &#x60;id&#x60; Sorts by issue type scheme ID. (optional, default to id)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;projects&#x60; For each issue type schemes, returns information about the projects the issue type scheme is assigned to.  *  &#x60;issueTypes&#x60; For each issue type schemes, returns information about the issueTypes the issue type scheme have. (optional, default to )
     * @param queryString String used to perform a case-insensitive partial match with issue type scheme name. (optional, default to )
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     */
    @Operation(
        operationId = "getAllIssueTypeSchemes",
        summary = "Get all issue type schemes",
        description = "Returns a [paginated](#pagination) list of issue type schemes.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueTypeScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetypescheme",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueTypeScheme> getAllIssueTypeSchemes(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "id", description = "The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<Long> id,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `name` Sorts by issue type scheme name.  *  `id` Sorts by issue type scheme ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false, defaultValue = "id") String orderBy,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.  *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false, defaultValue = "") String expand,
        @Parameter(name = "queryString", description = "String used to perform a case-insensitive partial match with issue type scheme name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queryString", required = false, defaultValue = "") String queryString
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"isDefault\" : true, \"defaultIssueTypeId\" : \"defaultIssueTypeId\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }, { \"isDefault\" : true, \"defaultIssueTypeId\" : \"defaultIssueTypeId\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/label : Get all labels
     * Returns a [paginated](#pagination) list of labels.
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 1000)
     * @return Returned if the request is successful. (status code 200)
     */
    @Operation(
        operationId = "getAllLabels",
        summary = "Get all labels",
        description = "Returns a [paginated](#pagination) list of labels.",
        tags = { "Labels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanString.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/label",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanString> getAllLabels(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "1000") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ \"values\", \"values\" ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/permissionscheme : Get all permission schemes
     * Returns all permission schemes.  ### About permission schemes and grants ###  A permission scheme is a collection of permission grants. A permission grant consists of a &#x60;holder&#x60; and a &#x60;permission&#x60;.  #### Holder object ####  The &#x60;holder&#x60; object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is &#x60;\&quot;type\&quot;: \&quot;group\&quot;&#x60;, and the parameter is the group name, &#x60;\&quot;parameter\&quot;: \&quot;Teams in space administrators\&quot;&#x60; and the value is group ID, &#x60;\&quot;value\&quot;: \&quot;ca85fac0-d974-40ca-a615-7af99c48d24f\&quot;&#x60;. The &#x60;holder&#x60; object is defined by the following properties:   *  &#x60;type&#x60; Identifies the user or group (see the list of types below).  *  &#x60;parameter&#x60; As a group&#39;s name can change, use of &#x60;value&#x60; is recommended. The value of this property depends on the &#x60;type&#x60;. For example, if the &#x60;type&#x60; is a group, then you need to specify the group name.  *  &#x60;value&#x60; The value of this property depends on the &#x60;type&#x60;. If the &#x60;type&#x60; is a group, then you need to specify the group ID. For other &#x60;type&#x60; it has the same value as &#x60;parameter&#x60;  The following &#x60;types&#x60; are available. The expected values for &#x60;parameter&#x60; and &#x60;value&#x60; are given in parentheses (some types may not have a &#x60;parameter&#x60; or &#x60;value&#x60;):   *  &#x60;anyone&#x60; Grant for anonymous users.  *  &#x60;applicationRole&#x60; Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.  *  &#x60;assignee&#x60; Grant for the user currently assigned to an issue.  *  &#x60;group&#x60; Grant for the specified group (&#x60;parameter&#x60; : group name, &#x60;value&#x60; : group ID).  *  &#x60;groupCustomField&#x60; Grant for a user in the group selected in the specified custom field (&#x60;parameter&#x60; : custom field ID, &#x60;value&#x60; : custom field ID).  *  &#x60;projectLead&#x60; Grant for a project lead.  *  &#x60;projectRole&#x60; Grant for the specified project role (&#x60;parameter&#x60; :project role ID, &#x60;value&#x60; : project role ID).  *  &#x60;reporter&#x60; Grant for the user who reported the issue.  *  &#x60;sd.customer.portal.only&#x60; Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.  *  &#x60;user&#x60; Grant for the specified user (&#x60;parameter&#x60; : user ID - historically this was the userkey but that is deprecated and the account ID should be used, &#x60;value&#x60; : user ID).  *  &#x60;userCustomField&#x60; Grant for a user selected in the specified custom field (&#x60;parameter&#x60; : custom field ID, &#x60;value&#x60; : custom field ID).  #### Built-in permissions ####  The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.  **Project permissions**   *  &#x60;ADMINISTER_PROJECTS&#x60;  *  &#x60;BROWSE_PROJECTS&#x60;  *  &#x60;MANAGE_SPRINTS_PERMISSION&#x60; (Jira Software only)  *  &#x60;SERVICEDESK_AGENT&#x60; (Jira Service Desk only)  *  &#x60;VIEW_DEV_TOOLS&#x60; (Jira Software only)  *  &#x60;VIEW_READONLY_WORKFLOW&#x60;  **Issue permissions**   *  &#x60;ASSIGNABLE_USER&#x60;  *  &#x60;ASSIGN_ISSUES&#x60;  *  &#x60;CLOSE_ISSUES&#x60;  *  &#x60;CREATE_ISSUES&#x60;  *  &#x60;DELETE_ISSUES&#x60;  *  &#x60;EDIT_ISSUES&#x60;  *  &#x60;LINK_ISSUES&#x60;  *  &#x60;MODIFY_REPORTER&#x60;  *  &#x60;MOVE_ISSUES&#x60;  *  &#x60;RESOLVE_ISSUES&#x60;  *  &#x60;SCHEDULE_ISSUES&#x60;  *  &#x60;SET_ISSUE_SECURITY&#x60;  *  &#x60;TRANSITION_ISSUES&#x60;  **Voters and watchers permissions**   *  &#x60;MANAGE_WATCHERS&#x60;  *  &#x60;VIEW_VOTERS_AND_WATCHERS&#x60;  **Comments permissions**   *  &#x60;ADD_COMMENTS&#x60;  *  &#x60;DELETE_ALL_COMMENTS&#x60;  *  &#x60;DELETE_OWN_COMMENTS&#x60;  *  &#x60;EDIT_ALL_COMMENTS&#x60;  *  &#x60;EDIT_OWN_COMMENTS&#x60;  **Attachments permissions**   *  &#x60;CREATE_ATTACHMENTS&#x60;  *  &#x60;DELETE_ALL_ATTACHMENTS&#x60;  *  &#x60;DELETE_OWN_ATTACHMENTS&#x60;  **Time tracking permissions**   *  &#x60;DELETE_ALL_WORKLOGS&#x60;  *  &#x60;DELETE_OWN_WORKLOGS&#x60;  *  &#x60;EDIT_ALL_WORKLOGS&#x60;  *  &#x60;EDIT_OWN_WORKLOGS&#x60;  *  &#x60;WORK_ON_ISSUES&#x60;  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getAllPermissionSchemes",
        summary = "Get all permission schemes",
        description = "Returns all permission schemes.  ### About permission schemes and grants ###  A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.  #### Holder object ####  The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `\"type\": \"group\"`, and the parameter is the group name, `\"parameter\": \"Teams in space administrators\"` and the value is group ID, `\"value\": \"ca85fac0-d974-40ca-a615-7af99c48d24f\"`. The `holder` object is defined by the following properties:   *  `type` Identifies the user or group (see the list of types below).  *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.  *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`  The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):   *  `anyone` Grant for anonymous users.  *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.  *  `assignee` Grant for the user currently assigned to an issue.  *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).  *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).  *  `projectLead` Grant for a project lead.  *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).  *  `reporter` Grant for the user who reported the issue.  *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.  *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).  *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).  #### Built-in permissions ####  The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.  **Project permissions**   *  `ADMINISTER_PROJECTS`  *  `BROWSE_PROJECTS`  *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)  *  `SERVICEDESK_AGENT` (Jira Service Desk only)  *  `VIEW_DEV_TOOLS` (Jira Software only)  *  `VIEW_READONLY_WORKFLOW`  **Issue permissions**   *  `ASSIGNABLE_USER`  *  `ASSIGN_ISSUES`  *  `CLOSE_ISSUES`  *  `CREATE_ISSUES`  *  `DELETE_ISSUES`  *  `EDIT_ISSUES`  *  `LINK_ISSUES`  *  `MODIFY_REPORTER`  *  `MOVE_ISSUES`  *  `RESOLVE_ISSUES`  *  `SCHEDULE_ISSUES`  *  `SET_ISSUE_SECURITY`  *  `TRANSITION_ISSUES`  **Voters and watchers permissions**   *  `MANAGE_WATCHERS`  *  `VIEW_VOTERS_AND_WATCHERS`  **Comments permissions**   *  `ADD_COMMENTS`  *  `DELETE_ALL_COMMENTS`  *  `DELETE_OWN_COMMENTS`  *  `EDIT_ALL_COMMENTS`  *  `EDIT_OWN_COMMENTS`  **Attachments permissions**   *  `CREATE_ATTACHMENTS`  *  `DELETE_ALL_ATTACHMENTS`  *  `DELETE_OWN_ATTACHMENTS`  **Time tracking permissions**   *  `DELETE_ALL_WORKLOGS`  *  `DELETE_OWN_WORKLOGS`  *  `EDIT_ALL_WORKLOGS`  *  `EDIT_OWN_WORKLOGS`  *  `WORK_ON_ISSUES`  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Permission schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionSchemes.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/permissionscheme",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PermissionSchemes> getAllPermissionSchemes(
        @Parameter(name = "expand", description = "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissionSchemes\" : [ { \"expand\" : \"expand\", \"permissions\" : [ { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 }, { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 } ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0 }, { \"expand\" : \"expand\", \"permissions\" : [ { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 }, { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 } ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/permissions : Get all permissions
     * Returns all permissions, including:   *  global permissions.  *  project permissions.  *  global permissions added by plugins.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getAllPermissions",
        summary = "Get all permissions",
        description = "Returns all permissions, including:   *  global permissions.  *  project permissions.  *  global permissions added by plugins.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Permissions.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/permissions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Permissions> getAllPermissions(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissions\" : { \"key\" : { \"havePermission\" : true, \"name\" : \"name\", \"description\" : \"description\", \"deprecatedKey\" : true, \"id\" : \"id\", \"type\" : \"GLOBAL\", \"key\" : \"key\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/avatars : Get all project avatars
     * Returns all project avatars, grouped by system and custom avatars.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectIdOrKey The ID or (case-sensitive) key of the project. (required)
     * @return Returned if request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user does not have permission to view the project. (status code 404)
     */
    @Operation(
        operationId = "getAllProjectAvatars",
        summary = "Get all project avatars",
        description = "Returns all project avatars, grouped by system and custom avatars.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Project avatars" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectAvatars.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view the project.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/avatars",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectAvatars> getAllProjectAvatars(
        @Parameter(name = "projectIdOrKey", description = "The ID or (case-sensitive) key of the project.", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"system\" : [ { \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" }, { \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" } ], \"custom\" : [ { \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" }, { \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/projectCategory : Get all project categories
     * Returns all project categories.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getAllProjectCategories",
        summary = "Get all project categories",
        description = "Returns all project categories.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Project categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectCategory.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/projectCategory",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectCategory>> getAllProjectCategories(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\" }, { \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/role : Get all project roles
     * Gets a list of all project roles, complete with project role details and default actors.  ### About project roles ###  [Project roles](https://confluence.atlassian.com/x/3odKLg) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).  Project roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.  #### Members and actors ####  In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.  Actors may be set as [default members](https://confluence.atlassian.com/x/3odKLg#Managingprojectroles-Specifying&#39;defaultmembers&#39;foraprojectrole) of the project role or set at the project level:   *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.  *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have administrative permissions. (status code 403)
     */
    @Operation(
        operationId = "getAllProjectRoles",
        summary = "Get all project roles",
        description = "Gets a list of all project roles, complete with project role details and default actors.  ### About project roles ###  [Project roles](https://confluence.atlassian.com/x/3odKLg) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).  Project roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.  #### Members and actors ####  In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.  Actors may be set as [default members](https://confluence.atlassian.com/x/3odKLg#Managingprojectroles-Specifying'defaultmembers'foraprojectrole) of the project role or set at the project level:   *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.  *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectRole.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have administrative permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/role",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectRole>> getAllProjectRoles(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }, { \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/type : Get all project types
     * Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     */
    @Operation(
        operationId = "getAllProjectTypes",
        summary = "Get all project types",
        description = "Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Project types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectType.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/type",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectType>> getAllProjectTypes(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"descriptionI18nKey\" : \"descriptionI18nKey\", \"color\" : \"color\", \"icon\" : \"icon\", \"formattedKey\" : \"formattedKey\", \"key\" : \"key\" }, { \"descriptionI18nKey\" : \"descriptionI18nKey\", \"color\" : \"color\", \"icon\" : \"icon\", \"formattedKey\" : \"formattedKey\", \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project : Get all projects
     * Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  &#x60;description&#x60; Returns the project description.  *  &#x60;issueTypes&#x60; Returns all issue types associated with the project.  *  &#x60;lead&#x60; Returns information about the project lead.  *  &#x60;projectKeys&#x60; Returns all project keys associated with the project. (optional)
     * @param recent Returns the user&#39;s most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session. (optional)
     * @param properties A list of project properties to return for the project. This parameter accepts a comma-separated list. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "getAllProjects",
        summary = "Get all projects",
        description = "Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        deprecated = true,
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Project.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Project>> getAllProjects(
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  `description` Returns the project description.  *  `issueTypes` Returns all issue types associated with the project.  *  `lead` Returns information about the project lead.  *  `projectKeys` Returns all project keys associated with the project.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "recent", description = "Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "recent", required = false) Integer recent,
        @Parameter(name = "properties", description = "A list of project properties to return for the project. This parameter accepts a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "properties", required = false) List<String> properties
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"components\" : [ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ], \"roles\" : { \"key\" : \"https://openapi-generator.tech\" }, \"description\" : \"description\", \"isPrivate\" : true, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ], \"archived\" : true, \"assigneeType\" : \"PROJECT_LEAD\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"email\" : \"email\", \"key\" : \"key\", \"archivedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"retentionTillDate\" : \"2000-01-23T04:56:07.000+00:00\", \"favourite\" : true, \"url\" : \"url\", \"expand\" : \"expand\", \"deleted\" : true, \"simplified\" : true, \"deletedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"versions\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"style\" : \"classic\", \"properties\" : { \"key\" : \"\" } }, { \"components\" : [ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ], \"roles\" : { \"key\" : \"https://openapi-generator.tech\" }, \"description\" : \"description\", \"isPrivate\" : true, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ], \"archived\" : true, \"assigneeType\" : \"PROJECT_LEAD\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"email\" : \"email\", \"key\" : \"key\", \"archivedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"retentionTillDate\" : \"2000-01-23T04:56:07.000+00:00\", \"favourite\" : true, \"url\" : \"url\", \"expand\" : \"expand\", \"deleted\" : true, \"simplified\" : true, \"deletedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"versions\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"style\" : \"classic\", \"properties\" : { \"key\" : \"\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/screens/{screenId}/tabs/{tabId}/fields : Get all screen tab fields
     * Returns all fields for a screen tab.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     *
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @param projectKey The key of the project. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen or screen tab is not found. (status code 404)
     */
    @Operation(
        operationId = "getAllScreenTabFields",
        summary = "Get all screen tab fields",
        description = "Returns all fields for a screen tab.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.",
        tags = { "Screen tab fields" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ScreenableField.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen or screen tab is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ScreenableField>> getAllScreenTabFields(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId,
        @Parameter(name = "tabId", description = "The ID of the screen tab.", required = true, in = ParameterIn.PATH) @PathVariable("tabId") Long tabId,
        @Parameter(name = "projectKey", description = "The key of the project.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectKey", required = false) String projectKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"id\" : \"id\" }, { \"name\" : \"name\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/screens/{screenId}/tabs : Get all screen tabs
     * Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     *
     * @param screenId The ID of the screen. (required)
     * @param projectKey The key of the project. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the screen ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen is not found. (status code 404)
     */
    @Operation(
        operationId = "getAllScreenTabs",
        summary = "Get all screen tabs",
        description = "Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.",
        tags = { "Screen tabs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ScreenableTab.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the screen ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/screens/{screenId}/tabs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ScreenableTab>> getAllScreenTabs(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId,
        @Parameter(name = "projectKey", description = "The key of the project.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectKey", required = false) String projectKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"id\" : 0 }, { \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/statuses : Get all statuses for project
     * Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getAllStatuses",
        summary = "Get all statuses for project",
        description = "Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IssueTypeWithStatus.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/statuses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<IssueTypeWithStatus>> getAllStatuses(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"self\" : \"self\", \"statuses\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" }, { \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" } ], \"id\" : \"id\", \"subtask\" : true }, { \"name\" : \"name\", \"self\" : \"self\", \"statuses\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" }, { \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" } ], \"id\" : \"id\", \"subtask\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/avatar/{type}/system : Get system avatars by type
     * Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param type The avatar type. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if an error occurs while retrieving the list of avatars. (status code 500)
     */
    @Operation(
        operationId = "getAllSystemAvatars",
        summary = "Get system avatars by type",
        description = "Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Avatars" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAvatars.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "500", description = "Returned if an error occurs while retrieving the list of avatars.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/avatar/{type}/system",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SystemAvatars> getAllSystemAvatars(
        @Parameter(name = "type", description = "The avatar type.", required = true, in = ParameterIn.PATH) @PathVariable("type") String type
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"system\" : [ { \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" }, { \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/users/search : Get all users
     * Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return. (optional, default to 0)
     * @param maxResults The maximum number of items to return. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the request takes longer than 10 seconds or is interrupted. (status code 409)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "Get all users",
        description = "Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.  Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission."),
            @ApiResponse(responseCode = "409", description = "Returned if the request takes longer than 10 seconds or is interrupted.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/users/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<User>> getAllUsers(
        @Parameter(name = "startAt", description = "The index of the first item to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Integer startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }, { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/users : Get all users default
     * Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.  Privacy controls are applied to the response based on the users&#39; preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return. (optional, default to 0)
     * @param maxResults The maximum number of items to return. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the request takes longer than 10 seconds or is interrupted. (status code 409)
     */
    @Operation(
        operationId = "getAllUsersDefault",
        summary = "Get all users default",
        description = "Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.  Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission."),
            @ApiResponse(responseCode = "409", description = "Returned if the request takes longer than 10 seconds or is interrupted.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/users",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<User>> getAllUsersDefault(
        @Parameter(name = "startAt", description = "The index of the first item to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Integer startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }, { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflowscheme : Get all workflow schemes
     * Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getAllWorkflowSchemes",
        summary = "Get all workflow schemes",
        description = "Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanWorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflowscheme",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanWorkflowScheme> getAllWorkflowSchemes(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }, { \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflow : Get all workflows
     * Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).  If the &#x60;workflowName&#x60; parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param workflowName The name of the workflow to be returned. Only one workflow can be specified. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the user does not have the necessary permission. (status code 401)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "getAllWorkflows",
        summary = "Get all workflows",
        description = "Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).  If the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        deprecated = true,
        tags = { "Workflows" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DeprecatedWorkflow.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflow",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DeprecatedWorkflow>> getAllWorkflows(
        @Parameter(name = "workflowName", description = "The name of the workflow to be returned. Only one workflow can be specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = false) String workflowName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"default\" : true, \"lastModifiedDate\" : \"lastModifiedDate\", \"lastModifiedUserAccountId\" : \"lastModifiedUserAccountId\", \"name\" : \"name\", \"description\" : \"description\", \"lastModifiedUser\" : \"lastModifiedUser\", \"steps\" : 0 }, { \"default\" : true, \"lastModifiedDate\" : \"lastModifiedDate\", \"lastModifiedUserAccountId\" : \"lastModifiedUserAccountId\", \"name\" : \"name\", \"description\" : \"description\", \"lastModifiedUser\" : \"lastModifiedUser\", \"steps\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetype/{id}/alternatives : Get alternative issue types
     * Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param id The ID of the issue type. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the issue type is not found.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "getAlternativeIssueTypes",
        summary = "Get alternative issue types",
        description = "Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Issue types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IssueTypeDetails.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue type is not found.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetype/{id}/alternatives",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<IssueTypeDetails>> getAlternativeIssueTypes(
        @Parameter(name = "id", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/application-properties : Get application property
     * Returns all application properties or an application property.  If you specify a value for the &#x60;key&#x60; parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param key The key of the application property. (optional)
     * @param permissionLevel The permission level of all items being returned in the list. (optional)
     * @param keyFilter When a &#x60;key&#x60; isn&#39;t provided, this filters the list of results by the application property &#x60;key&#x60; using a regular expression. For example, using &#x60;jira.lf.*&#x60; will return all application properties with keys that start with *jira.lf.*. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the application property is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getApplicationProperty",
        summary = "Get application property",
        description = "Returns all application properties or an application property.  If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Jira settings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApplicationProperty.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the application property is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/application-properties",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ApplicationProperty>> getApplicationProperty(
        @Parameter(name = "key", description = "The key of the application property.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "permissionLevel", description = "The permission level of all items being returned in the list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "permissionLevel", required = false) String permissionLevel,
        @Parameter(name = "keyFilter", description = "When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyFilter", required = false) String keyFilter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"allowedValues\" : [ \"allowedValues\", \"allowedValues\" ], \"defaultValue\" : \"defaultValue\", \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"value\" : \"value\", \"key\" : \"key\", \"desc\" : \"desc\", \"example\" : \"example\" }, { \"allowedValues\" : [ \"allowedValues\", \"allowedValues\" ], \"defaultValue\" : \"defaultValue\", \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"value\" : \"value\", \"key\" : \"key\", \"desc\" : \"desc\", \"example\" : \"example\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/applicationrole/{key} : Get application role
     * Returns an application role.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param key The key of the application role. Use the [Get all application roles](#api-rest-api-3-applicationrole-get) operation to get the key for each application role. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user is not an administrator. (status code 403)
     *         or Returned if the role is not found. (status code 404)
     */
    @Operation(
        operationId = "getApplicationRole",
        summary = "Get application role",
        description = "Returns an application role.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Application roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApplicationRole.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user is not an administrator."),
            @ApiResponse(responseCode = "404", description = "Returned if the role is not found.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/applicationrole/{key}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ApplicationRole> getApplicationRole(
        @Parameter(name = "key", description = "The key of the application role. Use the [Get all application roles](#api-rest-api-3-applicationrole-get) operation to get the key for each application role.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"defaultGroups\" : [ \"defaultGroups\", \"defaultGroups\" ], \"groupDetails\" : [ { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" }, { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" } ], \"hasUnlimitedSeats\" : true, \"groups\" : [ \"groups\", \"groups\" ], \"remainingSeats\" : 6, \"platform\" : true, \"selectedByDefault\" : true, \"numberOfSeats\" : 0, \"defaultGroupsDetails\" : [ { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" }, { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" } ], \"userCount\" : 1, \"userCountDescription\" : \"userCountDescription\", \"name\" : \"name\", \"defined\" : true, \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/license/approximateLicenseCount/product/{applicationKey} : Get approximate application license count
     * Returns the total approximate user account for a specific &#x60;jira licence application key&#x60;. Please note this information is cached with a 7-day lifecycle and could be stale at the time of call.  #### Application Key ####  An application key represents a specific version of Jira. See \\{@link ApplicationKey\\} for details  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param applicationKey  (required)
     * @return 200 response (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to complete this request. (status code 403)
     */
    @Operation(
        operationId = "getApproximateApplicationLicenseCount",
        summary = "Get approximate application license count",
        description = "Returns the total approximate user account for a specific `jira licence application key`. Please note this information is cached with a 7-day lifecycle and could be stale at the time of call.  #### Application Key ####  An application key represents a specific version of Jira. See \\{@link ApplicationKey\\} for details  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "License metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "200 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LicenseMetric.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to complete this request.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/license/approximateLicenseCount/product/{applicationKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<LicenseMetric> getApproximateApplicationLicenseCount(
        @Parameter(name = "applicationKey", description = "", required = true, in = ParameterIn.PATH) @PathVariable("applicationKey") String applicationKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"value\" : \"value\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/license/approximateLicenseCount : Get approximate license count
     * Returns the total approximate user account across all jira licenced application keys. Please note this information is cached with a 7-day lifecycle and could be stale at the time of call.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return 200 response (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to complete this request. (status code 403)
     */
    @Operation(
        operationId = "getApproximateLicenseCount",
        summary = "Get approximate license count",
        description = "Returns the total approximate user account across all jira licenced application keys. Please note this information is cached with a 7-day lifecycle and could be stale at the time of call.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "License metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "200 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LicenseMetric.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to complete this request.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/license/approximateLicenseCount",
        produces = { "application/json" }
    )
    
    default ResponseEntity<LicenseMetric> getApproximateLicenseCount(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"value\" : \"value\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectKeyOrId}/permissionscheme : Get assigned permission scheme
     * Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     *
     * @param projectKeyOrId The project ID or project key (case sensitive). (required)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to view the project&#39;s configuration. (status code 403)
     *         or Returned if the project is not found or the user does not have permission to view the project. (status code 404)
     */
    @Operation(
        operationId = "getAssignedPermissionScheme",
        summary = "Get assigned permission scheme",
        description = "Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).",
        tags = { "Project permission schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to view the project's configuration."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view the project.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectKeyOrId}/permissionscheme",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PermissionScheme> getAssignedPermissionScheme(
        @Parameter(name = "projectKeyOrId", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectKeyOrId") String projectKeyOrId,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"permissions\" : [ { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 }, { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 } ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/attachment/{id} : Get attachment metadata
     * Returns the metadata for an attachment. Note that the attachment itself is not returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param id The ID of the attachment. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings. (status code 404)
     */
    @Operation(
        operationId = "getAttachment",
        summary = "Get attachment metadata",
        description = "Returns the metadata for an attachment. Note that the attachment itself is not returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue attachments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AttachmentMetadata.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/attachment/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AttachmentMetadata> getAttachment(
        @Parameter(name = "id", description = "The ID of the attachment.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"thumbnail\" : \"thumbnail\", \"filename\" : \"filename\", \"size\" : 6, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0, \"mimeType\" : \"mimeType\", \"content\" : \"content\", \"properties\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/attachment/content/{id} : Get attachment content
     * Returns the contents of an attachment. A &#x60;Range&#x60; header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.  To return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param id The ID of the attachment. (required)
     * @param redirect Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to &#x60;false&#x60; to avoid making multiple requests to download the attachment. (optional, default to true)
     * @return Returned if the request is successful when &#x60;redirect&#x60; is set to &#x60;false&#x60;. (status code 200)
     *         or Returned if the request is successful when a &#x60;Range&#x60; header is provided and &#x60;redirect&#x60; is set to &#x60;false&#x60;. (status code 206)
     *         or Returned if the request is successful. See the &#x60;Location&#x60; header for the download URL. (status code 303)
     *         or Returned if the range supplied in the &#x60;Range&#x60; header is malformed. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or The user does not have the necessary permission. (status code 403)
     *         or Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings. (status code 404)
     *         or Returned if the server is unable to satisfy the range of bytes provided. (status code 416)
     */
    @Operation(
        operationId = "getAttachmentContent",
        summary = "Get attachment content",
        description = "Returns the contents of an attachment. A `Range` header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.  To return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue attachments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful when `redirect` is set to `false`.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "206", description = "Returned if the request is successful when a `Range` header is provided and `redirect` is set to `false`."),
            @ApiResponse(responseCode = "303", description = "Returned if the request is successful. See the `Location` header for the download URL."),
            @ApiResponse(responseCode = "400", description = "Returned if the range supplied in the `Range` header is malformed."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "The user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings."),
            @ApiResponse(responseCode = "416", description = "Returned if the server is unable to satisfy the range of bytes provided.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/attachment/content/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> getAttachmentContent(
        @Parameter(name = "id", description = "The ID of the attachment.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "redirect", description = "Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "redirect", required = false, defaultValue = "true") Boolean redirect
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/attachment/meta : Get Jira attachment settings
     * Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.  Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getAttachmentMeta",
        summary = "Get Jira attachment settings",
        description = "Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.  Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Issue attachments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AttachmentSettings.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/attachment/meta",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AttachmentSettings> getAttachmentMeta(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uploadLimit\" : 0, \"enabled\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/attachment/thumbnail/{id} : Get attachment thumbnail
     * Returns the thumbnail of an attachment.  To return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param id The ID of the attachment. (required)
     * @param redirect Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to &#x60;false&#x60; to avoid making multiple requests to download the attachment. (optional, default to true)
     * @param fallbackToDefault Whether a default thumbnail is returned when the requested thumbnail is not found. (optional, default to true)
     * @param width The maximum width to scale the thumbnail to. (optional)
     * @param height The maximum height to scale the thumbnail to. (optional)
     * @return Returned if the request is successful when &#x60;redirect&#x60; is set to &#x60;false&#x60;. (status code 200)
     *         or Returned if the request is successful. See the &#x60;Location&#x60; header for the download URL. (status code 303)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or The user does not have the necessary permission. (status code 403)
     *         or Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings.  *  &#x60;fallbackToDefault&#x60; is &#x60;false&#x60; and the request thumbnail cannot be downloaded. (status code 404)
     */
    @Operation(
        operationId = "getAttachmentThumbnail",
        summary = "Get attachment thumbnail",
        description = "Returns the thumbnail of an attachment.  To return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue attachments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful when `redirect` is set to `false`.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "303", description = "Returned if the request is successful. See the `Location` header for the download URL."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "The user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings.  *  `fallbackToDefault` is `false` and the request thumbnail cannot be downloaded.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/attachment/thumbnail/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> getAttachmentThumbnail(
        @Parameter(name = "id", description = "The ID of the attachment.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "redirect", description = "Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "redirect", required = false, defaultValue = "true") Boolean redirect,
        @Parameter(name = "fallbackToDefault", description = "Whether a default thumbnail is returned when the requested thumbnail is not found.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fallbackToDefault", required = false, defaultValue = "true") Boolean fallbackToDefault,
        @Parameter(name = "width", description = "The maximum width to scale the thumbnail to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "width", required = false) Integer width,
        @Parameter(name = "height", description = "The maximum height to scale the thumbnail to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "height", required = false) Integer height
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/auditing/record : Get audit records
     * Returns a list of audit records. The list can be filtered to include items:   *  where each item in &#x60;filter&#x60; has at least one match in any of these fields:           *  &#x60;summary&#x60;      *  &#x60;category&#x60;      *  &#x60;eventSource&#x60;      *  &#x60;objectItem.name&#x60; If the object is a user, account ID is available to filter.      *  &#x60;objectItem.parentName&#x60;      *  &#x60;objectItem.typeName&#x60;      *  &#x60;changedValues.changedFrom&#x60;      *  &#x60;changedValues.changedTo&#x60;      *  &#x60;remoteAddress&#x60;          For example, if &#x60;filter&#x60; contains *man ed*, an audit record containing &#x60;summary\&quot;: \&quot;User added to group\&quot;&#x60; and &#x60;\&quot;category\&quot;: \&quot;group management\&quot;&#x60; is returned.  *  created on or after a date and time.  *  created or or before a date and time.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param offset The number of records to skip before returning the first result. (optional, default to 0)
     * @param limit The maximum number of results to return. (optional, default to 1000)
     * @param filter The strings to match with audit field content, space separated. (optional)
     * @param from The date and time on or after which returned audit records must have been created. If &#x60;to&#x60; is provided &#x60;from&#x60; must be before &#x60;to&#x60; or no audit records are returned. (optional)
     * @param to The date and time on or before which returned audit results must have been created. If &#x60;from&#x60; is provided &#x60;to&#x60; must be after &#x60;from&#x60; or no audit records are returned. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the user does not have the required permissions.  *  all Jira products are on free plans. Audit logs are available when at least one Jira product is on a paid plan. (status code 403)
     */
    @Operation(
        operationId = "getAuditRecords",
        summary = "Get audit records",
        description = "Returns a list of audit records. The list can be filtered to include items:   *  where each item in `filter` has at least one match in any of these fields:           *  `summary`      *  `category`      *  `eventSource`      *  `objectItem.name` If the object is a user, account ID is available to filter.      *  `objectItem.parentName`      *  `objectItem.typeName`      *  `changedValues.changedFrom`      *  `changedValues.changedTo`      *  `remoteAddress`          For example, if `filter` contains *man ed*, an audit record containing `summary\": \"User added to group\"` and `\"category\": \"group management\"` is returned.  *  created on or after a date and time.  *  created or or before a date and time.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Audit records" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuditRecords.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if:   *  the user does not have the required permissions.  *  all Jira products are on free plans. Audit logs are available when at least one Jira product is on a paid plan.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/auditing/record",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AuditRecords> getAuditRecords(
        @Parameter(name = "offset", description = "The number of records to skip before returning the first result.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "limit", description = "The maximum number of results to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "1000") Integer limit,
        @Parameter(name = "filter", description = "The strings to match with audit field content, space separated.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "from", description = "The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "from", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime from,
        @Parameter(name = "to", description = "The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "to", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime to
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 5, \"offset\" : 6, \"records\" : [ { \"changedValues\" : [ { \"changedTo\" : \"changedTo\", \"fieldName\" : \"fieldName\", \"changedFrom\" : \"changedFrom\" }, { \"changedTo\" : \"changedTo\", \"fieldName\" : \"fieldName\", \"changedFrom\" : \"changedFrom\" } ], \"summary\" : \"summary\", \"objectItem\" : { \"parentName\" : \"parentName\", \"name\" : \"name\", \"typeName\" : \"typeName\", \"id\" : \"id\", \"parentId\" : \"parentId\" }, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"authorKey\" : \"authorKey\", \"eventSource\" : \"eventSource\", \"associatedItems\" : [ { \"parentName\" : \"parentName\", \"name\" : \"name\", \"typeName\" : \"typeName\", \"id\" : \"id\", \"parentId\" : \"parentId\" }, { \"parentName\" : \"parentName\", \"name\" : \"name\", \"typeName\" : \"typeName\", \"id\" : \"id\", \"parentId\" : \"parentId\" } ], \"description\" : \"description\", \"id\" : 1, \"category\" : \"category\", \"remoteAddress\" : \"remoteAddress\" }, { \"changedValues\" : [ { \"changedTo\" : \"changedTo\", \"fieldName\" : \"fieldName\", \"changedFrom\" : \"changedFrom\" }, { \"changedTo\" : \"changedTo\", \"fieldName\" : \"fieldName\", \"changedFrom\" : \"changedFrom\" } ], \"summary\" : \"summary\", \"objectItem\" : { \"parentName\" : \"parentName\", \"name\" : \"name\", \"typeName\" : \"typeName\", \"id\" : \"id\", \"parentId\" : \"parentId\" }, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"authorKey\" : \"authorKey\", \"eventSource\" : \"eventSource\", \"associatedItems\" : [ { \"parentName\" : \"parentName\", \"name\" : \"name\", \"typeName\" : \"typeName\", \"id\" : \"id\", \"parentId\" : \"parentId\" }, { \"parentName\" : \"parentName\", \"name\" : \"name\", \"typeName\" : \"typeName\", \"id\" : \"id\", \"parentId\" : \"parentId\" } ], \"description\" : \"description\", \"id\" : 1, \"category\" : \"category\", \"remoteAddress\" : \"remoteAddress\" } ], \"limit\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/jql/autocompletedata : Get field reference data (GET)
     * Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.  To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     */
    @Operation(
        operationId = "getAutoComplete",
        summary = "Get field reference data (GET)",
        description = "Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.  To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "JQL" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JQLReferenceData.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/jql/autocompletedata",
        produces = { "application/json" }
    )
    
    default ResponseEntity<JQLReferenceData> getAutoComplete(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"visibleFieldNames\" : [ { \"cfid\" : \"cfid\", \"auto\" : \"true\", \"types\" : [ \"types\", \"types\" ], \"operators\" : [ \"operators\", \"operators\" ], \"displayName\" : \"displayName\", \"orderable\" : \"true\", \"deprecated\" : \"true\", \"value\" : \"value\", \"deprecatedSearcherKey\" : \"deprecatedSearcherKey\", \"searchable\" : \"true\" }, { \"cfid\" : \"cfid\", \"auto\" : \"true\", \"types\" : [ \"types\", \"types\" ], \"operators\" : [ \"operators\", \"operators\" ], \"displayName\" : \"displayName\", \"orderable\" : \"true\", \"deprecated\" : \"true\", \"value\" : \"value\", \"deprecatedSearcherKey\" : \"deprecatedSearcherKey\", \"searchable\" : \"true\" } ], \"visibleFunctionNames\" : [ { \"types\" : [ \"types\", \"types\" ], \"displayName\" : \"displayName\", \"isList\" : \"true\", \"value\" : \"value\" }, { \"types\" : [ \"types\", \"types\" ], \"displayName\" : \"displayName\", \"isList\" : \"true\", \"value\" : \"value\" } ], \"jqlReservedWords\" : [ \"jqlReservedWords\", \"jqlReservedWords\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/jql/autocompletedata : Get field reference data (POST)
     * Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.  This operation can filter the custom fields returned by project. Invalid project IDs in &#x60;projectIds&#x60; are ignored. System fields are always returned.  It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field &#x60;Component - Component[Dropdown]&#x60; enables dropdown fields &#x60;Component - cf[10061]&#x60; and &#x60;Component - cf[10062]&#x60; to be searched simultaneously.  **[Permissions](#permissions) required:** None.
     *
     * @param searchAutoCompleteFilter  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     */
    @Operation(
        operationId = "getAutoCompletePost",
        summary = "Get field reference data (POST)",
        description = "Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.  This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.  It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.  **[Permissions](#permissions) required:** None.",
        tags = { "JQL" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JQLReferenceData.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/jql/autocompletedata",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<JQLReferenceData> getAutoCompletePost(
        @Parameter(name = "SearchAutoCompleteFilter", description = "", required = true) @Valid @RequestBody SearchAutoCompleteFilter searchAutoCompleteFilter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"visibleFieldNames\" : [ { \"cfid\" : \"cfid\", \"auto\" : \"true\", \"types\" : [ \"types\", \"types\" ], \"operators\" : [ \"operators\", \"operators\" ], \"displayName\" : \"displayName\", \"orderable\" : \"true\", \"deprecated\" : \"true\", \"value\" : \"value\", \"deprecatedSearcherKey\" : \"deprecatedSearcherKey\", \"searchable\" : \"true\" }, { \"cfid\" : \"cfid\", \"auto\" : \"true\", \"types\" : [ \"types\", \"types\" ], \"operators\" : [ \"operators\", \"operators\" ], \"displayName\" : \"displayName\", \"orderable\" : \"true\", \"deprecated\" : \"true\", \"value\" : \"value\", \"deprecatedSearcherKey\" : \"deprecatedSearcherKey\", \"searchable\" : \"true\" } ], \"visibleFunctionNames\" : [ { \"types\" : [ \"types\", \"types\" ], \"displayName\" : \"displayName\", \"isList\" : \"true\", \"value\" : \"value\" }, { \"types\" : [ \"types\", \"types\" ], \"displayName\" : \"displayName\", \"isList\" : \"true\", \"value\" : \"value\" } ], \"jqlReservedWords\" : [ \"jqlReservedWords\", \"jqlReservedWords\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/screens/{screenId}/availableFields : Get available screen fields
     * Returns the fields that can be added to a tab on a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenId The ID of the screen. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen is not found. (status code 404)
     */
    @Operation(
        operationId = "getAvailableScreenFields",
        summary = "Get available screen fields",
        description = "Returns the fields that can be added to a tab on a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screens" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ScreenableField.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/screens/{screenId}/availableFields",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ScreenableField>> getAvailableScreenFields(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"id\" : \"id\" }, { \"name\" : \"name\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/configuration/timetracking/list : Get all time tracking providers
     * Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getAvailableTimeTrackingImplementations",
        summary = "Get all time tracking providers",
        description = "Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Time tracking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TimeTrackingProvider.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/configuration/timetracking/list",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TimeTrackingProvider>> getAvailableTimeTrackingImplementations(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"key\" : \"key\", \"url\" : \"url\" }, { \"name\" : \"name\", \"key\" : \"key\", \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/universal_avatar/view/type/{type}/avatar/{id} : Get avatar image by ID
     * Returns a project or issue type avatar image by ID.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     *
     * @param type The icon type of the avatar. (required)
     * @param id The ID of the avatar. (required)
     * @param size The size of the avatar image. If not provided the default size is returned. (optional)
     * @param format The format to return the avatar image in. If not provided the original content format is returned. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if an avatar is not found or an avatar matching the requested size is not found. (status code 404)
     */
    @Operation(
        operationId = "getAvatarImageByID",
        summary = "Get avatar image by ID",
        description = "Returns a project or issue type avatar image by ID.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.",
        tags = { "Avatars" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if an avatar is not found or an avatar matching the requested size is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}",
        produces = { "*/*", "application/json", "image/png", "image/svg+xml" }
    )
    
    default ResponseEntity<Void> getAvatarImageByID(
        @Parameter(name = "type", description = "The icon type of the avatar.", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "id", description = "The ID of the avatar.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "size", description = "The size of the avatar image. If not provided the default size is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false) String size,
        @Parameter(name = "format", description = "The format to return the avatar image in. If not provided the original content format is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "format", required = false) String format
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/universal_avatar/view/type/{type}/owner/{entityId} : Get avatar image by owner
     * Returns the avatar image for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     *
     * @param type The icon type of the avatar. (required)
     * @param entityId The ID of the project or issue type the avatar belongs to. (required)
     * @param size The size of the avatar image. If not provided the default size is returned. (optional)
     * @param format The format to return the avatar image in. If not provided the original content format is returned. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if an avatar is not found or an avatar matching the requested size is not found. (status code 404)
     */
    @Operation(
        operationId = "getAvatarImageByOwner",
        summary = "Get avatar image by owner",
        description = "Returns the avatar image for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.",
        tags = { "Avatars" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if an avatar is not found or an avatar matching the requested size is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}",
        produces = { "*/*", "application/json", "image/png", "image/svg+xml" }
    )
    
    default ResponseEntity<Void> getAvatarImageByOwner(
        @Parameter(name = "type", description = "The icon type of the avatar.", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "entityId", description = "The ID of the project or issue type the avatar belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("entityId") String entityId,
        @Parameter(name = "size", description = "The size of the avatar image. If not provided the default size is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false) String size,
        @Parameter(name = "format", description = "The format to return the avatar image in. If not provided the original content format is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "format", required = false) String format
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/universal_avatar/view/type/{type} : Get avatar image by type
     * Returns the default project or issue type avatar image.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param type The icon type of the avatar. (required)
     * @param size The size of the avatar image. If not provided the default size is returned. (optional)
     * @param format The format to return the avatar image in. If not provided the original content format is returned. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if an avatar is not found or an avatar matching the requested size is not found. (status code 404)
     */
    @Operation(
        operationId = "getAvatarImageByType",
        summary = "Get avatar image by type",
        description = "Returns the default project or issue type avatar image.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Avatars" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if an avatar is not found or an avatar matching the requested size is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/universal_avatar/view/type/{type}",
        produces = { "*/*", "application/json", "image/png", "image/svg+xml" }
    )
    
    default ResponseEntity<Void> getAvatarImageByType(
        @Parameter(name = "type", description = "The icon type of the avatar.", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "size", description = "The size of the avatar image. If not provided the default size is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false) String size,
        @Parameter(name = "format", description = "The format to return the avatar image in. If not provided the original content format is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "format", required = false) String format
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/universal_avatar/type/{type}/owner/{entityId} : Get avatars
     * Returns the system and custom avatars for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.  *  for system avatars, none.
     *
     * @param type The avatar type. (required)
     * @param entityId The ID of the item the avatar is associated with. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. (status code 404)
     */
    @Operation(
        operationId = "getAvatars",
        summary = "Get avatars",
        description = "Returns the system and custom avatars for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.  *  for system avatars, none.",
        tags = { "Avatars" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Avatars.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/universal_avatar/type/{type}/owner/{entityId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Avatars> getAvatars(
        @Parameter(name = "type", description = "The avatar type.", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "entityId", description = "The ID of the item the avatar is associated with.", required = true, in = ParameterIn.PATH) @PathVariable("entityId") String entityId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"system\" : [ { \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" }, { \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" } ], \"custom\" : [ { \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" }, { \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/announcementBanner : Get announcement banner configuration
     * Returns the current announcement banner configuration.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getBanner",
        summary = "Get announcement banner configuration",
        description = "Returns the current announcement banner configuration.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Announcement banner" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AnnouncementBannerConfiguration.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/announcementBanner",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AnnouncementBannerConfiguration> getBanner(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"visibility\" : \"PUBLIC\", \"isEnabled\" : true, \"isDismissible\" : true, \"message\" : \"message\", \"hashId\" : \"hashId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/permissions/check : Get bulk permissions
     * Returns:   *  for a list of global permissions, the global permissions granted to a user.  *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.  If no account ID is provided, the operation returns details for the logged in user.  Note that:   *  Invalid project and issue IDs are ignored.  *  A maximum of 1000 projects and 1000 issues can be checked.  *  Null values in &#x60;globalPermissions&#x60;, &#x60;projectPermissions&#x60;, &#x60;projectPermissions.projects&#x60;, and &#x60;projectPermissions.issues&#x60; are ignored.  *  Empty strings in &#x60;projectPermissions.permissions&#x60; are ignored.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn&#39;t apply to calls made using AP.request() in a browser.
     *
     * @param bulkPermissionsRequestBean Details of the permissions to check. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  &#x60;projectPermissions&#x60; is provided without at least one project permission being provided.  *  an invalid global permission is provided in the global permissions list.  *  an invalid project permission is provided in the project permissions list.  *  more than 1000 valid project IDs or more than 1000 valid issue IDs are provided.  *  an invalid account ID is provided. (status code 400)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getBulkPermissions",
        summary = "Get bulk permissions",
        description = "Returns:   *  for a list of global permissions, the global permissions granted to a user.  *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.  If no account ID is provided, the operation returns details for the logged in user.  Note that:   *  Invalid project and issue IDs are ignored.  *  A maximum of 1000 projects and 1000 issues can be checked.  *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.  *  Empty strings in `projectPermissions.permissions` are ignored.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser.",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BulkPermissionGrants.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `projectPermissions` is provided without at least one project permission being provided.  *  an invalid global permission is provided in the global permissions list.  *  an invalid project permission is provided in the project permissions list.  *  more than 1000 valid project IDs or more than 1000 valid issue IDs are provided.  *  an invalid account ID is provided.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/permissions/check",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BulkPermissionGrants> getBulkPermissions(
        @Parameter(name = "BulkPermissionsRequestBean", description = "Details of the permissions to check.", required = true) @Valid @RequestBody BulkPermissionsRequestBean bulkPermissionsRequestBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"globalPermissions\" : [ \"globalPermissions\", \"globalPermissions\" ], \"projectPermissions\" : [ { \"projects\" : [ 6, 6 ], \"permission\" : \"permission\", \"issues\" : [ 0, 0 ] }, { \"projects\" : [ 6, 6 ], \"permission\" : \"permission\", \"issues\" : [ 0, 0 ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/changelog : Get changelogs
     * Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 100)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getChangeLogs",
        summary = "Get changelogs",
        description = "Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanChangelog.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/changelog",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanChangelog> getChangeLogs(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Integer startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "100") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"items\" : [ { \"field\" : \"field\", \"from\" : \"from\", \"fromString\" : \"fromString\", \"to\" : \"to\", \"fieldtype\" : \"fieldtype\", \"fieldId\" : \"fieldId\" }, { \"field\" : \"field\", \"from\" : \"from\", \"fromString\" : \"fromString\", \"to\" : \"to\", \"fieldtype\" : \"fieldtype\", \"fieldId\" : \"fieldId\" } ] }, { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"items\" : [ { \"field\" : \"field\", \"from\" : \"from\", \"fromString\" : \"fromString\", \"to\" : \"to\", \"fieldtype\" : \"fieldtype\", \"fieldId\" : \"fieldId\" }, { \"field\" : \"field\", \"from\" : \"from\", \"fromString\" : \"fromString\", \"to\" : \"to\", \"fieldtype\" : \"fieldtype\", \"fieldId\" : \"fieldId\" } ] } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/changelog/list : Get changelogs by IDs
     * Returns changelogs for an issue specified by a list of changelog IDs.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param issueChangelogIds  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the issue is not found or the user does not have the necessary permission. (status code 404)
     */
    @Operation(
        operationId = "getChangeLogsByIds",
        summary = "Get changelogs by IDs",
        description = "Returns changelogs for an issue specified by a list of changelog IDs.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageOfChangelogs.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/{issueIdOrKey}/changelog/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PageOfChangelogs> getChangeLogsByIds(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "IssueChangelogIds", description = "", required = true) @Valid @RequestBody IssueChangelogIds issueChangelogIds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"maxResults\" : 0, \"histories\" : [ { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"items\" : [ { \"field\" : \"field\", \"from\" : \"from\", \"fromString\" : \"fromString\", \"to\" : \"to\", \"fieldtype\" : \"fieldtype\", \"fieldId\" : \"fieldId\" }, { \"field\" : \"field\", \"from\" : \"from\", \"fromString\" : \"fromString\", \"to\" : \"to\", \"fieldtype\" : \"fieldtype\", \"fieldId\" : \"fieldId\" } ] }, { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"items\" : [ { \"field\" : \"field\", \"from\" : \"from\", \"fromString\" : \"fromString\", \"to\" : \"to\", \"fieldtype\" : \"fieldtype\", \"fieldId\" : \"fieldId\" }, { \"field\" : \"field\", \"from\" : \"from\", \"fromString\" : \"fromString\", \"to\" : \"to\", \"fieldtype\" : \"fieldtype\", \"fieldId\" : \"fieldId\" } ] } ], \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/filter/{id}/columns : Get columns
     * Returns the columns configured for a filter. The column configuration is used when the filter&#39;s results are viewed in *List View* with the *Columns* set to *Filter*.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, column details are only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @param id The ID of the filter. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the user does not have permission to view the filter. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if a column configuration is not set for the filter. (status code 404)
     */
    @Operation(
        operationId = "getColumns",
        summary = "Get columns",
        description = "Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, column details are only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ColumnItem.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the user does not have permission to view the filter."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if a column configuration is not set for the filter.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/filter/{id}/columns",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ColumnItem>> getColumns(
        @Parameter(name = "id", description = "The ID of the filter.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"label\" : \"label\", \"value\" : \"value\" }, { \"label\" : \"label\", \"value\" : \"value\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/comment/{id} : Get comment
     * Returns a comment.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param id The ID of the comment. (required)
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. (status code 404)
     */
    @Operation(
        operationId = "getComment",
        summary = "Get comment",
        description = "Returns a comment.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/comment/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Comment> getComment(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "id", description = "The ID of the comment.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"renderedBody\" : \"renderedBody\", \"visibility\" : \"\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"self\" : \"self\", \"jsdPublic\" : true, \"id\" : \"id\", \"body\" : \"\", \"jsdAuthorCanSeeRequest\" : true, \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/comment/{commentId}/properties/{propertyKey} : Get comment property
     * Returns the value of a comment property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param commentId The ID of the comment. (required)
     * @param propertyKey The key of the property. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the comment or the property is not found. (status code 404)
     */
    @Operation(
        operationId = "getCommentProperty",
        summary = "Get comment property",
        description = "Returns the value of a comment property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue comment properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EntityProperty.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the comment or the property is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EntityProperty> getCommentProperty(
        @Parameter(name = "commentId", description = "The ID of the comment.", required = true, in = ParameterIn.PATH) @PathVariable("commentId") String commentId,
        @Parameter(name = "propertyKey", description = "The key of the property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"value\" : \"\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/comment/{commentId}/properties : Get comment property keys
     * Returns the keys of all the properties of a comment.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param commentId The ID of the comment. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the comment ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the comment is not found. (status code 404)
     */
    @Operation(
        operationId = "getCommentPropertyKeys",
        summary = "Get comment property keys",
        description = "Returns the keys of all the properties of a comment.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue comment properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyKeys.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the comment ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the comment is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/comment/{commentId}/properties",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PropertyKeys> getCommentPropertyKeys(
        @Parameter(name = "commentId", description = "The ID of the comment.", required = true, in = ParameterIn.PATH) @PathVariable("commentId") String commentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keys\" : [ { \"self\" : \"self\", \"key\" : \"key\" }, { \"self\" : \"self\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/comment : Get comments
     * Returns all comments for an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Comments are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 5000)
     * @param orderBy [Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date. (optional)
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if &#x60;orderBy&#x60; is set to a value other than *created*. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getComments",
        summary = "Get comments",
        description = "Returns all comments for an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Comments are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.",
        tags = { "Issue comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageOfComments.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if `orderBy` is set to a value other than *created*."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/comment",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageOfComments> getComments(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "5000") Integer maxResults,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) String orderBy,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"comments\" : [ { \"renderedBody\" : \"renderedBody\", \"visibility\" : \"\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"self\" : \"self\", \"jsdPublic\" : true, \"id\" : \"id\", \"body\" : \"\", \"jsdAuthorCanSeeRequest\" : true, \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }, { \"renderedBody\" : \"renderedBody\", \"visibility\" : \"\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"self\" : \"self\", \"jsdPublic\" : true, \"id\" : \"id\", \"body\" : \"\", \"jsdAuthorCanSeeRequest\" : true, \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] } ], \"maxResults\" : 0, \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/comment/list : Get comments by IDs
     * Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Comments are returned where the user:   *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param issueCommentListRequestBean The list of comment IDs. (required)
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;renderedBody&#x60; Returns the comment body rendered in HTML.  *  &#x60;properties&#x60; Returns the comment&#39;s properties. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request contains more than 1000 IDs or is empty. (status code 400)
     */
    @Operation(
        operationId = "getCommentsByIds",
        summary = "Get comments by IDs",
        description = "Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Comments are returned where the user:   *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanComment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request contains more than 1000 IDs or is empty.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/comment/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PageBeanComment> getCommentsByIds(
        @Parameter(name = "IssueCommentListRequestBean", description = "The list of comment IDs.", required = true) @Valid @RequestBody IssueCommentListRequestBean issueCommentListRequestBean,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:   *  `renderedBody` Returns the comment body rendered in HTML.  *  `properties` Returns the comment's properties.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"renderedBody\" : \"renderedBody\", \"visibility\" : \"\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"self\" : \"self\", \"jsdPublic\" : true, \"id\" : \"id\", \"body\" : \"\", \"jsdAuthorCanSeeRequest\" : true, \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }, { \"renderedBody\" : \"renderedBody\", \"visibility\" : \"\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"self\" : \"self\", \"jsdPublic\" : true, \"id\" : \"id\", \"body\" : \"\", \"jsdAuthorCanSeeRequest\" : true, \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/component/{id} : Get component
     * Returns a component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
     *
     * @param id The ID of the component. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the component is not found or the user does not have permission to browse the project containing the component. (status code 404)
     */
    @Operation(
        operationId = "getComponent",
        summary = "Get component",
        description = "Returns a component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.",
        tags = { "Project components" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectComponent.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the component is not found or the user does not have permission to browse the project containing the component.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/component/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectComponent> getComponent(
        @Parameter(name = "id", description = "The ID of the component.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/component/{id}/relatedIssueCounts : Get component issues count
     * Returns the counts of issues assigned to the component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param id The ID of the component. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the component is not found. (status code 404)
     */
    @Operation(
        operationId = "getComponentRelatedIssues",
        summary = "Get component issues count",
        description = "Returns the counts of issues assigned to the component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Project components" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ComponentIssuesCount.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the component is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/component/{id}/relatedIssueCounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ComponentIssuesCount> getComponentRelatedIssues(
        @Parameter(name = "id", description = "The ID of the component.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"self\" : \"https://openapi-generator.tech\", \"issueCount\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/configuration : Get global settings
     * Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getConfiguration",
        summary = "Get global settings",
        description = "Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Jira settings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelConfiguration.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/configuration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ModelConfiguration> getConfiguration(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unassignedIssuesAllowed\" : true, \"watchingEnabled\" : true, \"attachmentsEnabled\" : true, \"timeTrackingEnabled\" : true, \"issueLinkingEnabled\" : true, \"subTasksEnabled\" : true, \"votingEnabled\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldId}/context : Get custom field contexts
     * Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:   *  With no other parameters set, all contexts.  *  By defining &#x60;id&#x60; only, all contexts from the list of IDs.  *  By defining &#x60;isAnyIssueType&#x60;, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)  *  By defining &#x60;isGlobalContext&#x60;, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param isAnyIssueType Whether to return contexts that apply to all issue types. (optional)
     * @param isGlobalContext Whether to return contexts that apply to all projects. (optional)
     * @param contextId The list of context IDs. To include multiple contexts, separate IDs with ampersand: &#x60;contextId&#x3D;10000&amp;contextId&#x3D;10001&#x60;. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field was not found. (status code 404)
     */
    @Operation(
        operationId = "getContextsForField",
        summary = "Get custom field contexts",
        description = "Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:   *  With no other parameters set, all contexts.  *  By defining `id` only, all contexts from the list of IDs.  *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)  *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanCustomFieldContext.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field was not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldId}/context",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanCustomFieldContext> getContextsForField(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "isAnyIssueType", description = "Whether to return contexts that apply to all issue types.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isAnyIssueType", required = false) Boolean isAnyIssueType,
        @Parameter(name = "isGlobalContext", description = "Whether to return contexts that apply to all projects.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isGlobalContext", required = false) Boolean isGlobalContext,
        @Parameter(name = "contextId", description = "The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "contextId", required = false) Set<Long> contextId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"isAnyIssueType\" : true, \"isGlobalContext\" : true }, { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"isAnyIssueType\" : true, \"isGlobalContext\" : true } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldId}/contexts : Get contexts for a field
     * Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the field to return contexts for. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 20)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "getContextsForFieldDeprecated",
        summary = "Get contexts for a field",
        description = "Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        deprecated = true,
        tags = { "Issue fields" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanContext.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldId}/contexts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanContext> getContextsForFieldDeprecated(
        @Parameter(name = "fieldId", description = "The ID of the field to return contexts for.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "20") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"scope\" : \"\", \"name\" : \"name\", \"id\" : 5 }, { \"scope\" : \"\", \"name\" : \"name\", \"id\" : 5 } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/createmeta : Get create issue metadata
     * Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).  The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
     *
     * @param projectIds List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, &#x60;projectIds&#x3D;10000,10001&amp;projectIds&#x3D;10020,10021&#x60;. This parameter may be provided with &#x60;projectKeys&#x60;. (optional)
     * @param projectKeys List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, &#x60;projectKeys&#x3D;proj1,proj2&amp;projectKeys&#x3D;proj3&#x60;. This parameter may be provided with &#x60;projectIds&#x60;. (optional)
     * @param issuetypeIds List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, &#x60;issuetypeIds&#x3D;10000,10001&amp;issuetypeIds&#x3D;10020,10021&#x60;. This parameter may be provided with &#x60;issuetypeNames&#x60;. (optional)
     * @param issuetypeNames List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, &#x60;issuetypeNames&#x3D;name1,name2&amp;issuetypeNames&#x3D;name3&#x60;. This parameter may be provided with &#x60;issuetypeIds&#x60;. (optional)
     * @param expand Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts &#x60;projects.issuetypes.fields&#x60;, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the &#x60;fields&#x60; and &#x60;update&#x60; fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post). (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getCreateIssueMeta",
        summary = "Get create issue metadata",
        description = "Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).  The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueCreateMetadata.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/createmeta",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueCreateMetadata> getCreateIssueMeta(
        @Parameter(name = "projectIds", description = "List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectIds", required = false) List<String> projectIds,
        @Parameter(name = "projectKeys", description = "List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectKeys", required = false) List<String> projectKeys,
        @Parameter(name = "issuetypeIds", description = "List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issuetypeIds", required = false) List<String> issuetypeIds,
        @Parameter(name = "issuetypeNames", description = "List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issuetypeNames", required = false) List<String> issuetypeNames,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"projects\" : [ { \"expand\" : \"expand\", \"issuetypes\" : [ { \"expand\" : \"expand\", \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } }, { \"expand\" : \"expand\", \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } } ], \"name\" : \"name\", \"self\" : \"self\", \"id\" : \"id\", \"key\" : \"key\" }, { \"expand\" : \"expand\", \"issuetypes\" : [ { \"expand\" : \"expand\", \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } }, { \"expand\" : \"expand\", \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } } ], \"name\" : \"name\", \"self\" : \"self\", \"id\" : \"id\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/myself : Get current user
     * Returns details for the current user.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param expand Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;groups&#x60; Returns all groups, including nested groups, the user belongs to.  *  &#x60;applicationRoles&#x60; Returns the application roles the user is assigned to. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getCurrentUser",
        summary = "Get current user",
        description = "Returns details for the current user.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Myself" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/myself",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getCurrentUser(
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:   *  `groups` Returns all groups, including nested groups, the user belongs to.  *  `applicationRoles` Returns the application roles the user is assigned to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/app/field/{fieldIdOrKey}/context/configuration : Get custom field configurations
     * Returns a [paginated](#pagination) list of configurations for a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).  The result can be filtered by one of these criteria:   *  &#x60;id&#x60;.  *  &#x60;fieldContextId&#x60;.  *  &#x60;issueId&#x60;.  *  &#x60;projectKeyOrId&#x60; and &#x60;issueTypeId&#x60;.  Otherwise, all configurations are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field.
     *
     * @param fieldIdOrKey The ID or key of the custom field, for example &#x60;customfield_10000&#x60;. (required)
     * @param id The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. Can&#39;t be provided with &#x60;fieldContextId&#x60;, &#x60;issueId&#x60;, &#x60;projectKeyOrId&#x60;, or &#x60;issueTypeId&#x60;. (optional)
     * @param fieldContextId The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: &#x60;fieldContextId&#x3D;10000&amp;fieldContextId&#x3D;10001&#x60;. Can&#39;t be provided with &#x60;id&#x60;, &#x60;issueId&#x60;, &#x60;projectKeyOrId&#x60;, or &#x60;issueTypeId&#x60;. (optional)
     * @param issueId The ID of the issue to filter results by. If the issue doesn&#39;t exist, an empty list is returned. Can&#39;t be provided with &#x60;projectKeyOrId&#x60;, or &#x60;issueTypeId&#x60;. (optional)
     * @param projectKeyOrId The ID or key of the project to filter results by. Must be provided with &#x60;issueTypeId&#x60;. Can&#39;t be provided with &#x60;issueId&#x60;. (optional)
     * @param issueTypeId The ID of the issue type to filter results by. Must be provided with &#x60;projectKeyOrId&#x60;. Can&#39;t be provided with &#x60;issueId&#x60;. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 100)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. (status code 403)
     *         or Returned if the custom field is not found. (status code 404)
     */
    @Operation(
        operationId = "getCustomFieldConfiguration",
        summary = "Get custom field configurations",
        description = "Returns a [paginated](#pagination) list of configurations for a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).  The result can be filtered by one of these criteria:   *  `id`.  *  `fieldContextId`.  *  `issueId`.  *  `projectKeyOrId` and `issueTypeId`.  Otherwise, all configurations are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field.",
        tags = { "Issue custom field configuration (apps)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanContextualConfiguration.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanContextualConfiguration> getCustomFieldConfiguration(
        @Parameter(name = "fieldIdOrKey", description = "The ID or key of the custom field, for example `customfield_10000`.", required = true, in = ParameterIn.PATH) @PathVariable("fieldIdOrKey") String fieldIdOrKey,
        @Parameter(name = "id", description = "The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<Long> id,
        @Parameter(name = "fieldContextId", description = "The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fieldContextId", required = false) Set<Long> fieldContextId,
        @Parameter(name = "issueId", description = "The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueId", required = false) Long issueId,
        @Parameter(name = "projectKeyOrId", description = "The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectKeyOrId", required = false) String projectKeyOrId,
        @Parameter(name = "issueTypeId", description = "The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueTypeId", required = false) String issueTypeId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "100") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"fieldContextId\" : \"fieldContextId\", \"schema\" : \"\", \"configuration\" : \"\", \"id\" : \"id\" }, { \"fieldContextId\" : \"fieldContextId\", \"schema\" : \"\", \"configuration\" : \"\", \"id\" : \"id\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/field/{fieldId}/context/mapping : Get custom field contexts for projects and issue types
     * Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.  If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is &#x60;null&#x60;.  Duplicate project and issue type mappings cannot be provided in the request.  The order of the returned values is the same as provided in the request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param projectIssueTypeMappings The list of project and issue type mappings. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field, project, or issue type is not found. (status code 404)
     */
    @Operation(
        operationId = "getCustomFieldContextsForProjectsAndIssueTypes",
        summary = "Get custom field contexts for projects and issue types",
        description = "Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.  If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.  Duplicate project and issue type mappings cannot be provided in the request.  The order of the returned values is the same as provided in the request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanContextForProjectAndIssueType.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field, project, or issue type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/field/{fieldId}/context/mapping",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PageBeanContextForProjectAndIssueType> getCustomFieldContextsForProjectsAndIssueTypes(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "ProjectIssueTypeMappings", description = "The list of project and issue type mappings.", required = true) @Valid @RequestBody ProjectIssueTypeMappings projectIssueTypeMappings,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"issueTypeId\" : \"issueTypeId\", \"contextId\" : \"contextId\", \"projectId\" : \"projectId\" }, { \"issueTypeId\" : \"issueTypeId\", \"contextId\" : \"contextId\", \"projectId\" : \"projectId\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/customFieldOption/{id} : Get custom field option
     * Returns a custom field option. For example, an option in a select list.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The custom field option is returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
     *
     * @param id The ID of the custom field option. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the custom field option is not found.  *  the user does not have permission to view the custom field. (status code 404)
     */
    @Operation(
        operationId = "getCustomFieldOption",
        summary = "Get custom field option",
        description = "Returns a custom field option. For example, an option in a select list.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The custom field option is returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.",
        tags = { "Issue custom field options" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomFieldOption.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the custom field option is not found.  *  the user does not have permission to view the custom field.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/customFieldOption/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CustomFieldOption> getCustomFieldOption(
        @Parameter(name = "id", description = "The ID of the custom field option.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"self\" : \"https://openapi-generator.tech\", \"value\" : \"value\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/dashboard/{id} : Get dashboard
     * Returns a dashboard.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.  However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     *
     * @param id The ID of the dashboard. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or 400 response (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the dashboard is not found or the dashboard is not owned by or shared with the user. (status code 404)
     */
    @Operation(
        operationId = "getDashboard",
        summary = "Get dashboard",
        description = "Returns a dashboard.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.  However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Dashboard.class))
            }),
            @ApiResponse(responseCode = "400", description = "400 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/dashboard/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Dashboard> getDashboard(
        @Parameter(name = "id", description = "The ID of the dashboard.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"automaticRefreshMs\" : 0, \"description\" : \"description\", \"isWritable\" : true, \"view\" : \"view\", \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"popularity\" : 1, \"name\" : \"name\", \"rank\" : 5, \"self\" : \"https://openapi-generator.tech\", \"systemDashboard\" : true, \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"isFavourite\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey} : Get dashboard item property
     * Returns the key and value of a dashboard item property.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item&#39;s content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.
     *
     * @param dashboardId The ID of the dashboard. (required)
     * @param itemId The ID of the dashboard item. (required)
     * @param propertyKey The key of the dashboard item property. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the dashboard, the dashboard item, or dashboard item property is not found, or the dashboard is not owned by or shared with the user. (status code 404)
     */
    @Operation(
        operationId = "getDashboardItemProperty",
        summary = "Get dashboard item property",
        description = "Returns the key and value of a dashboard item property.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EntityProperty.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the dashboard, the dashboard item, or dashboard item property is not found, or the dashboard is not owned by or shared with the user.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EntityProperty> getDashboardItemProperty(
        @Parameter(name = "dashboardId", description = "The ID of the dashboard.", required = true, in = ParameterIn.PATH) @PathVariable("dashboardId") String dashboardId,
        @Parameter(name = "itemId", description = "The ID of the dashboard item.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") String itemId,
        @Parameter(name = "propertyKey", description = "The key of the dashboard item property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"value\" : \"\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties : Get dashboard item property keys
     * Returns the keys of all properties for a dashboard item.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.
     *
     * @param dashboardId The ID of the dashboard. (required)
     * @param itemId The ID of the dashboard item. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the dashboard or dashboard item is not found, or the dashboard is not owned by or shared with the user. (status code 404)
     */
    @Operation(
        operationId = "getDashboardItemPropertyKeys",
        summary = "Get dashboard item property keys",
        description = "Returns the keys of all properties for a dashboard item.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyKeys.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the dashboard or dashboard item is not found, or the dashboard is not owned by or shared with the user.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PropertyKeys> getDashboardItemPropertyKeys(
        @Parameter(name = "dashboardId", description = "The ID of the dashboard.", required = true, in = ParameterIn.PATH) @PathVariable("dashboardId") String dashboardId,
        @Parameter(name = "itemId", description = "The ID of the dashboard item.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") String itemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keys\" : [ { \"self\" : \"self\", \"key\" : \"key\" }, { \"self\" : \"self\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/dashboard/search : Search for dashboards
     * Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:   *  Dashboards owned by the user. Not returned for anonymous users.  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.  *  Dashboards shared with a public project.  *  Dashboards shared with the public.
     *
     * @param dashboardName String used to perform a case-insensitive partial match with &#x60;name&#x60;. (optional)
     * @param accountId User account ID used to return dashboards with the matching &#x60;owner.accountId&#x60;. This parameter cannot be used with the &#x60;owner&#x60; parameter. (optional)
     * @param owner This parameter is deprecated because of privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching &#x60;owner.name&#x60;. This parameter cannot be used with the &#x60;accountId&#x60; parameter. (optional)
     * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended. Group name used to return dashboards that are shared with a group that matches &#x60;sharePermissions.group.name&#x60;. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
     * @param groupId Group ID used to return dashboards that are shared with a group that matches &#x60;sharePermissions.group.groupId&#x60;. This parameter cannot be used with the &#x60;groupname&#x60; parameter. (optional)
     * @param projectId Project ID used to returns dashboards that are shared with a project that matches &#x60;sharePermissions.project.id&#x60;. (optional)
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;description&#x60; Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.  *  &#x60;favourite_count&#x60; Sorts by dashboard popularity.  *  &#x60;id&#x60; Sorts by dashboard ID.  *  &#x60;is_favourite&#x60; Sorts by whether the dashboard is marked as a favorite.  *  &#x60;name&#x60; Sorts by dashboard name.  *  &#x60;owner&#x60; Sorts by dashboard owner name. (optional, default to name)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param status The status to filter by. It may be active, archived or deleted. (optional, default to active)
     * @param expand Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;description&#x60; Returns the description of the dashboard.  *  &#x60;owner&#x60; Returns the owner of the dashboard.  *  &#x60;viewUrl&#x60; Returns the URL that is used to view the dashboard.  *  &#x60;favourite&#x60; Returns &#x60;isFavourite&#x60;, an indicator of whether the user has set the dashboard as a favorite.  *  &#x60;favouritedCount&#x60; Returns &#x60;popularity&#x60;, a count of how many users have set this dashboard as a favorite.  *  &#x60;sharePermissions&#x60; Returns details of the share permissions defined for the dashboard.  *  &#x60;editPermissions&#x60; Returns details of the edit permissions defined for the dashboard.  *  &#x60;isWritable&#x60; Returns whether the current user has permission to edit the dashboard. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  &#x60;orderBy&#x60; is invalid.  *  &#x60;expand&#x60; includes an invalid value.  *  &#x60;accountId&#x60; and &#x60;owner&#x60; are provided.  *  &#x60;groupname&#x60; and &#x60;groupId&#x60; are provided. (status code 400)
     *         or 401 response (status code 401)
     */
    @Operation(
        operationId = "getDashboardsPaginated",
        summary = "Search for dashboards",
        description = "Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:   *  Dashboards owned by the user. Not returned for anonymous users.  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.  *  Dashboards shared with a public project.  *  Dashboards shared with the public.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanDashboard.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `orderBy` is invalid.  *  `expand` includes an invalid value.  *  `accountId` and `owner` are provided.  *  `groupname` and `groupId` are provided.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "401 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/dashboard/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanDashboard> getDashboardsPaginated(
        @Parameter(name = "dashboardName", description = "String used to perform a case-insensitive partial match with `name`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dashboardName", required = false) String dashboardName,
        @Size(max = 128) @Parameter(name = "accountId", description = "User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "owner", description = "This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "owner", required = false) String owner,
        @Parameter(name = "groupname", description = "As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupname", required = false) String groupname,
        @Parameter(name = "groupId", description = "Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId,
        @Parameter(name = "projectId", description = "Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Long projectId,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.  *  `favourite_count` Sorts by dashboard popularity.  *  `id` Sorts by dashboard ID.  *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.  *  `name` Sorts by dashboard name.  *  `owner` Sorts by dashboard owner name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false, defaultValue = "name") String orderBy,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "status", description = "The status to filter by. It may be active, archived or deleted.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false, defaultValue = "active") String status,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:   *  `description` Returns the description of the dashboard.  *  `owner` Returns the owner of the dashboard.  *  `viewUrl` Returns the URL that is used to view the dashboard.  *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.  *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.  *  `sharePermissions` Returns details of the share permissions defined for the dashboard.  *  `editPermissions` Returns details of the edit permissions defined for the dashboard.  *  `isWritable` Returns whether the current user has permission to edit the dashboard.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"automaticRefreshMs\" : 0, \"description\" : \"description\", \"isWritable\" : true, \"view\" : \"view\", \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"popularity\" : 1, \"name\" : \"name\", \"rank\" : 5, \"self\" : \"https://openapi-generator.tech\", \"systemDashboard\" : true, \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"isFavourite\" : true }, { \"automaticRefreshMs\" : 0, \"description\" : \"description\", \"isWritable\" : true, \"view\" : \"view\", \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"popularity\" : 1, \"name\" : \"name\", \"rank\" : 5, \"self\" : \"https://openapi-generator.tech\", \"systemDashboard\" : true, \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"isFavourite\" : true } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/filter/defaultShareScope : Get default share scope
     * Returns the default sharing settings for new filters and dashboards for a user.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getDefaultShareScope",
        summary = "Get default share scope",
        description = "Returns the default sharing settings for new filters and dashboards for a user.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Filter sharing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultShareScope.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/filter/defaultShareScope",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DefaultShareScope> getDefaultShareScope(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"scope\" : \"GLOBAL\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldId}/context/defaultValue : Get custom field contexts default values
     * Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by &#x60;contextId&#x60;, otherwise all values are returned. If no defaults are set for a context, nothing is returned.   The returned object depends on type of the custom field:   *  &#x60;CustomFieldContextDefaultValueDate&#x60; (type &#x60;datepicker&#x60;) for date fields.  *  &#x60;CustomFieldContextDefaultValueDateTime&#x60; (type &#x60;datetimepicker&#x60;) for date-time fields.  *  &#x60;CustomFieldContextDefaultValueSingleOption&#x60; (type &#x60;option.single&#x60;) for single choice select lists and radio buttons.  *  &#x60;CustomFieldContextDefaultValueMultipleOption&#x60; (type &#x60;option.multiple&#x60;) for multiple choice select lists and checkboxes.  *  &#x60;CustomFieldContextDefaultValueCascadingOption&#x60; (type &#x60;option.cascading&#x60;) for cascading select lists.  *  &#x60;CustomFieldContextSingleUserPickerDefaults&#x60; (type &#x60;single.user.select&#x60;) for single users.  *  &#x60;CustomFieldContextDefaultValueMultiUserPicker&#x60; (type &#x60;multi.user.select&#x60;) for user lists.  *  &#x60;CustomFieldContextDefaultValueSingleGroupPicker&#x60; (type &#x60;grouppicker.single&#x60;) for single choice group pickers.  *  &#x60;CustomFieldContextDefaultValueMultipleGroupPicker&#x60; (type &#x60;grouppicker.multiple&#x60;) for multiple choice group pickers.  *  &#x60;CustomFieldContextDefaultValueURL&#x60; (type &#x60;url&#x60;) for URLs.  *  &#x60;CustomFieldContextDefaultValueProject&#x60; (type &#x60;project&#x60;) for project pickers.  *  &#x60;CustomFieldContextDefaultValueFloat&#x60; (type &#x60;float&#x60;) for floats (floating-point numbers).  *  &#x60;CustomFieldContextDefaultValueLabels&#x60; (type &#x60;labels&#x60;) for labels.  *  &#x60;CustomFieldContextDefaultValueTextField&#x60; (type &#x60;textfield&#x60;) for text fields.  *  &#x60;CustomFieldContextDefaultValueTextArea&#x60; (type &#x60;textarea&#x60;) for text area fields.  *  &#x60;CustomFieldContextDefaultValueReadOnly&#x60; (type &#x60;readonly&#x60;) for read only (text) fields.  *  &#x60;CustomFieldContextDefaultValueMultipleVersion&#x60; (type &#x60;version.multiple&#x60;) for single choice version pickers.  *  &#x60;CustomFieldContextDefaultValueSingleVersion&#x60; (type &#x60;version.single&#x60;) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  &#x60;CustomFieldContextDefaultValueForgeStringFieldBean&#x60; (type &#x60;forge.string&#x60;) for Forge string fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiStringFieldBean&#x60; (type &#x60;forge.string.list&#x60;) for Forge string collection fields.  *  &#x60;CustomFieldContextDefaultValueForgeObjectFieldBean&#x60; (type &#x60;forge.object&#x60;) for Forge object fields.  *  &#x60;CustomFieldContextDefaultValueForgeDateTimeFieldBean&#x60; (type &#x60;forge.datetime&#x60;) for Forge date-time fields.  *  &#x60;CustomFieldContextDefaultValueForgeGroupFieldBean&#x60; (type &#x60;forge.group&#x60;) for Forge group fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiGroupFieldBean&#x60; (type &#x60;forge.group.list&#x60;) for Forge group collection fields.  *  &#x60;CustomFieldContextDefaultValueForgeNumberFieldBean&#x60; (type &#x60;forge.number&#x60;) for Forge number fields.  *  &#x60;CustomFieldContextDefaultValueForgeUserFieldBean&#x60; (type &#x60;forge.user&#x60;) for Forge user fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiUserFieldBean&#x60; (type &#x60;forge.user.list&#x60;) for Forge user collection fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field, for example &#x60;customfield\\_10000&#x60;. (required)
     * @param contextId The IDs of the contexts. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field is not found. (status code 404)
     */
    @Operation(
        operationId = "getDefaultValues",
        summary = "Get custom field contexts default values",
        description = "Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.   The returned object depends on type of the custom field:   *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanCustomFieldContextDefaultValue.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldId}/context/defaultValue",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanCustomFieldContextDefaultValue> getDefaultValues(
        @Parameter(name = "fieldId", description = "The ID of the custom field, for example `customfield\\_10000`.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The IDs of the contexts.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "contextId", required = false) Set<Long> contextId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ null, null ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflowscheme/{id}/default : Get default workflow
     * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. (required)
     * @param returnDraftIfExists Set to &#x60;true&#x60; to return the default workflow for the workflow scheme&#39;s draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "getDefaultWorkflow",
        summary = "Get default workflow",
        description = "Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultWorkflow.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflowscheme/{id}/default",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DefaultWorkflow> getDefaultWorkflow(
        @Parameter(name = "id", description = "The ID of the workflow scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "returnDraftIfExists", description = "Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "returnDraftIfExists", required = false, defaultValue = "false") Boolean returnDraftIfExists
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updateDraftIfNeeded\" : true, \"workflow\" : \"workflow\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflowscheme/{id}/draft/default : Get draft default workflow
     * Returns the default workflow for a workflow scheme&#39;s draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission.. (status code 403)
     *         or Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. (status code 404)
     */
    @Operation(
        operationId = "getDraftDefaultWorkflow",
        summary = "Get draft default workflow",
        description = "Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultWorkflow.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.."),
            @ApiResponse(responseCode = "404", description = "Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflowscheme/{id}/draft/default",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DefaultWorkflow> getDraftDefaultWorkflow(
        @Parameter(name = "id", description = "The ID of the workflow scheme that the draft belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updateDraftIfNeeded\" : true, \"workflow\" : \"workflow\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflowscheme/{id}/draft/workflow : Get issue types for workflows in draft workflow scheme
     * Returns the workflow-issue type mappings for a workflow scheme&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if either the workflow scheme or workflow (if specified) is not found. session. (status code 404)
     */
    @Operation(
        operationId = "getDraftWorkflow",
        summary = "Get issue types for workflows in draft workflow scheme",
        description = "Returns the workflow-issue type mappings for a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueTypesWorkflowMapping.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if either the workflow scheme or workflow (if specified) is not found. session.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflowscheme/{id}/draft/workflow",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueTypesWorkflowMapping> getDraftWorkflow(
        @Parameter(name = "id", description = "The ID of the workflow scheme that the draft belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "workflowName", description = "The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = false) String workflowName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updateDraftIfNeeded\" : true, \"workflow\" : \"workflow\", \"defaultMapping\" : true, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/webhook : Get dynamic webhooks for app
     * Returns a [paginated](#pagination) list of the webhooks registered by the calling app.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 100)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the caller isn&#39;t an app. (status code 403)
     */
    @Operation(
        operationId = "getDynamicWebhooksForApp",
        summary = "Get dynamic webhooks for app",
        description = "Returns a [paginated](#pagination) list of the webhooks registered by the calling app.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanWebhook.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the caller isn't an app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work", "manage:jira-webhook" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/webhook",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanWebhook> getDynamicWebhooksForApp(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "100") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"jqlFilter\" : \"jqlFilter\", \"fieldIdsFilter\" : [ \"fieldIdsFilter\", \"fieldIdsFilter\" ], \"id\" : 5, \"issuePropertyKeysFilter\" : [ \"issuePropertyKeysFilter\", \"issuePropertyKeysFilter\" ], \"events\" : [ \"jira:issue_created\", \"jira:issue_created\" ], \"expirationDate\" : 5 }, { \"jqlFilter\" : \"jqlFilter\", \"fieldIdsFilter\" : [ \"fieldIdsFilter\", \"fieldIdsFilter\" ], \"id\" : 5, \"issuePropertyKeysFilter\" : [ \"issuePropertyKeysFilter\", \"issuePropertyKeysFilter\" ], \"events\" : [ \"jira:issue_created\", \"jira:issue_created\" ], \"expirationDate\" : 5 } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/editmeta : Get edit issue metadata
     * Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).  This endpoint will check for these conditions:  1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. &#x60;overrideScreenSecurity&#x3D;true&#x60; skips this condition. 2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). &#x60;overrideScreenSecurity&#x3D;true&#x60; skips this condition. 3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue. 4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types. 5.  Issue has a project, issue type, and status defined. 6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. &#x60;overrideEditableFlag&#x3D;true&#x60; skips this condition. 7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the &#x60;jira.issue.editable&#x60; property to &#x60;false&#x60;. &#x60;overrideEditableFlag&#x3D;true&#x60; skips this condition. 8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/). 9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using &#x60;jira.permission.*&#x60; workflow properties.  Fields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.  Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:   *  &#x60;overrideScreenSecurity&#x60; When this flag is &#x60;true&#x60;, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).  *  &#x60;overrideEditableFlag&#x60; When this flag is &#x60;true&#x60;, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param overrideScreenSecurity Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
     * @param overrideEditableFlag Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user uses an override parameter but doesn&#39;t have permission to do so. (status code 403)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getEditIssueMeta",
        summary = "Get edit issue metadata",
        description = "Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).  This endpoint will check for these conditions:  1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition. 2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition. 3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue. 4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types. 5.  Issue has a project, issue type, and status defined. 6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition. 7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition. 8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/). 9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.  Fields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.  Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:   *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).  *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueUpdateMetadata.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user uses an override parameter but doesn't have permission to do so."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/editmeta",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueUpdateMetadata> getEditIssueMeta(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "overrideScreenSecurity", description = "Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideScreenSecurity", required = false, defaultValue = "false") Boolean overrideScreenSecurity,
        @Parameter(name = "overrideEditableFlag", description = "Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideEditableFlag", required = false, defaultValue = "false") Boolean overrideEditableFlag
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/events : Get events
     * Returns all issue events.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to complete this request. (status code 403)
     */
    @Operation(
        operationId = "getEvents",
        summary = "Get events",
        description = "Returns all issue events.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IssueEvent.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to complete this request.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/events",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<IssueEvent>> getEvents(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"id\" : 0 }, { \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/webhook/failed : Get failed webhooks
     * Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.  After 72 hours the failure may no longer be returned by this operation.  The oldest failure is returned first.  This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the &#x60;failedAfter&#x60; value or use the URL provided in &#x60;next&#x60;.  **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.
     *
     * @param maxResults The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page. (optional)
     * @param after The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or 400 response (status code 400)
     *         or Returned if the caller is not a Connect app. (status code 403)
     */
    @Operation(
        operationId = "getFailedWebhooks",
        summary = "Get failed webhooks",
        description = "Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.  After 72 hours the failure may no longer be returned by this operation.  The oldest failure is returned first.  This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.  **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FailedWebhooks.class))
            }),
            @ApiResponse(responseCode = "400", description = "400 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the caller is not a Connect app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work", "manage:jira-webhook" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/webhook/failed",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FailedWebhooks> getFailedWebhooks(
        @Parameter(name = "maxResults", description = "The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "after", description = "The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "after", required = false) Long after
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"next\" : \"https://openapi-generator.tech\", \"maxResults\" : 0, \"values\" : [ { \"failureTime\" : 6, \"id\" : \"id\", \"body\" : \"body\", \"url\" : \"url\" }, { \"failureTime\" : 6, \"id\" : \"id\", \"body\" : \"body\", \"url\" : \"url\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/filter/favourite : Get favorite filters
     * Returns the visible favorite filters of the user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.  For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     *
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getFavouriteFilters",
        summary = "Get favorite filters",
        description = "Returns the visible favorite filters of the user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.  For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Filter.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/filter/favourite",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Filter>> getFavouriteFilters(
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"jql\" : \"jql\", \"favouritedCount\" : 0, \"description\" : \"description\", \"favourite\" : true, \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] }, { \"jql\" : \"jql\", \"favouritedCount\" : 0, \"description\" : \"description\", \"favourite\" : true, \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/features : Get project features
     * Returns the list of features for a project.
     *
     * @param projectIdOrKey The ID or (case-sensitive) key of the project. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the project is not found. (status code 404)
     */
    @Operation(
        operationId = "getFeaturesForProject",
        summary = "Get project features",
        description = "Returns the list of features for a project.",
        tags = { "Project features" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContainerForProjectFeatures.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/features",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ContainerForProjectFeatures> getFeaturesForProject(
        @Parameter(name = "projectIdOrKey", description = "The ID or (case-sensitive) key of the project.", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"features\" : [ { \"prerequisites\" : [ \"prerequisites\", \"prerequisites\" ], \"imageUri\" : \"imageUri\", \"toggleLocked\" : true, \"feature\" : \"feature\", \"localisedDescription\" : \"localisedDescription\", \"localisedName\" : \"localisedName\", \"state\" : \"ENABLED\", \"projectId\" : 0 }, { \"prerequisites\" : [ \"prerequisites\", \"prerequisites\" ], \"imageUri\" : \"imageUri\", \"toggleLocked\" : true, \"feature\" : \"feature\", \"localisedDescription\" : \"localisedDescription\", \"localisedName\" : \"localisedName\", \"state\" : \"ENABLED\", \"projectId\" : 0 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/jql/autocompletedata/suggestions : Get field auto complete suggestions
     * Returns the JQL search auto complete suggestions for a field.  Suggestions can be obtained by providing:   *  &#x60;fieldName&#x60; to get a list of all values for the field.  *  &#x60;fieldName&#x60; and &#x60;fieldValue&#x60; to get a list of values containing the text in &#x60;fieldValue&#x60;.  *  &#x60;fieldName&#x60; and &#x60;predicateName&#x60; to get a list of all predicate values for the field.  *  &#x60;fieldName&#x60;, &#x60;predicateName&#x60;, and &#x60;predicateValue&#x60; to get a list of predicate values containing the text in &#x60;predicateValue&#x60;.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param fieldName The name of the field. (optional)
     * @param fieldValue The partial field item name entered by the user. (optional)
     * @param predicateName The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*. (optional)
     * @param predicateValue The partial predicate item name entered by the user. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if an invalid combination of parameters is passed. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     */
    @Operation(
        operationId = "getFieldAutoCompleteForQueryString",
        summary = "Get field auto complete suggestions",
        description = "Returns the JQL search auto complete suggestions for a field.  Suggestions can be obtained by providing:   *  `fieldName` to get a list of all values for the field.  *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.  *  `fieldName` and `predicateName` to get a list of all predicate values for the field.  *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "JQL" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AutoCompleteSuggestions.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if an invalid combination of parameters is passed."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/jql/autocompletedata/suggestions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AutoCompleteSuggestions> getFieldAutoCompleteForQueryString(
        @Parameter(name = "fieldName", description = "The name of the field.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fieldName", required = false) String fieldName,
        @Parameter(name = "fieldValue", description = "The partial field item name entered by the user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fieldValue", required = false) String fieldValue,
        @Parameter(name = "predicateName", description = "The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "predicateName", required = false) String predicateName,
        @Parameter(name = "predicateValue", description = "The partial predicate item name entered by the user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "predicateValue", required = false) String predicateValue
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"displayName\" : \"displayName\", \"value\" : \"value\" }, { \"displayName\" : \"displayName\", \"value\" : \"value\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/fieldconfiguration/{id}/fields : Get field configuration items
     * Returns a [paginated](#pagination) list of all fields for a configuration.  Only the fields from configurations used in company-managed (classic) projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the field configuration. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field configuration is not found. (status code 404)
     */
    @Operation(
        operationId = "getFieldConfigurationItems",
        summary = "Get field configuration items",
        description = "Returns a [paginated](#pagination) list of all fields for a configuration.  Only the fields from configurations used in company-managed (classic) projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanFieldConfigurationItem.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field configuration is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/fieldconfiguration/{id}/fields",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanFieldConfigurationItem> getFieldConfigurationItems(
        @Parameter(name = "id", description = "The ID of the field configuration.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"isRequired\" : true, \"renderer\" : \"renderer\", \"description\" : \"description\", \"id\" : \"id\", \"isHidden\" : true }, { \"isRequired\" : true, \"renderer\" : \"renderer\", \"description\" : \"description\", \"id\" : \"id\", \"isHidden\" : true } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/fieldconfigurationscheme/mapping : Get field configuration issue type items
     * Returns a [paginated](#pagination) list of field configuration issue type items.  Only items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param fieldConfigurationSchemeId The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: &#x60;fieldConfigurationSchemeId&#x3D;10000&amp;fieldConfigurationSchemeId&#x3D;10001&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if no field configuration schemes are found. (status code 404)
     */
    @Operation(
        operationId = "getFieldConfigurationSchemeMappings",
        summary = "Get field configuration issue type items",
        description = "Returns a [paginated](#pagination) list of field configuration issue type items.  Only items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanFieldConfigurationIssueTypeItem.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if no field configuration schemes are found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/fieldconfigurationscheme/mapping",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanFieldConfigurationIssueTypeItem> getFieldConfigurationSchemeMappings(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Size(min = 1, max = 50) @Parameter(name = "fieldConfigurationSchemeId", description = "The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fieldConfigurationSchemeId", required = false) Set<Long> fieldConfigurationSchemeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"issueTypeId\" : \"issueTypeId\", \"fieldConfigurationSchemeId\" : \"fieldConfigurationSchemeId\", \"fieldConfigurationId\" : \"fieldConfigurationId\" }, { \"issueTypeId\" : \"issueTypeId\", \"fieldConfigurationSchemeId\" : \"fieldConfigurationSchemeId\", \"fieldConfigurationId\" : \"fieldConfigurationId\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/fieldconfigurationscheme/project : Get field configuration schemes for projects
     * Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.  The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.  Only field configuration schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectId The list of project IDs. To include multiple projects, separate IDs with ampersand: &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getFieldConfigurationSchemeProjectMapping",
        summary = "Get field configuration schemes for projects",
        description = "Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.  The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.  Only field configuration schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanFieldConfigurationSchemeProjects.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/fieldconfigurationscheme/project",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanFieldConfigurationSchemeProjects> getFieldConfigurationSchemeProjectMapping(
        @NotNull @Parameter(name = "projectId", description = "The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = true) Set<Long> projectId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"projectIds\" : [ \"projectIds\", \"projectIds\" ], \"fieldConfigurationScheme\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" } }, { \"projectIds\" : [ \"projectIds\", \"projectIds\" ], \"fieldConfigurationScheme\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" } } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field : Get fields
     * Returns system and custom issue fields according to the following rules:   *  Fields that cannot be added to the issue navigator are always returned.  *  Fields that cannot be placed on an issue screen are always returned.  *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.  *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getFields",
        summary = "Get fields",
        description = "Returns system and custom issue fields according to the following rules:   *  Fields that cannot be added to the issue navigator are always returned.  *  Fields that cannot be placed on an issue screen are always returned.  *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.  *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Issue fields" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FieldDetails.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FieldDetails>> getFields(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"schema\" : \"\", \"navigable\" : true, \"orderable\" : true, \"custom\" : true, \"scope\" : \"\", \"name\" : \"name\", \"clauseNames\" : [ \"clauseNames\", \"clauseNames\" ], \"id\" : \"id\", \"key\" : \"key\", \"searchable\" : true }, { \"schema\" : \"\", \"navigable\" : true, \"orderable\" : true, \"custom\" : true, \"scope\" : \"\", \"name\" : \"name\", \"clauseNames\" : [ \"clauseNames\", \"clauseNames\" ], \"id\" : \"id\", \"key\" : \"key\", \"searchable\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/search : Get fields paginated
     * Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:   *  all fields  *  specific fields, by defining &#x60;id&#x60;  *  fields that contain a string in the field name or description, by defining &#x60;query&#x60;  *  specific fields that contain a string in the field name or description, by defining &#x60;id&#x60; and &#x60;query&#x60;  Only custom fields can be queried, &#x60;type&#x60; must be set to &#x60;custom&#x60;.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param type The type of fields to search. (optional)
     * @param id The IDs of the custom fields to return or, where &#x60;query&#x60; is specified, filter. (optional)
     * @param query String used to perform a case-insensitive partial match with field names or descriptions. (optional)
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;contextsCount&#x60; sorts by the number of contexts related to a field  *  &#x60;lastUsed&#x60; sorts by the date when the value of the field last changed  *  &#x60;name&#x60; sorts by the field name  *  &#x60;screensCount&#x60; sorts by the number of screens related to a field (optional)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;key&#x60; returns the key for each field  *  &#x60;lastUsed&#x60; returns the date when the value of the field last changed  *  &#x60;screensCount&#x60; returns the number of screens related to a field  *  &#x60;contextsCount&#x60; returns the number of contexts related to a field  *  &#x60;isLocked&#x60; returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)  *  &#x60;searcherKey&#x60; returns the searcher key for each custom field (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getFieldsPaginated",
        summary = "Get fields paginated",
        description = "Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:   *  all fields  *  specific fields, by defining `id`  *  fields that contain a string in the field name or description, by defining `query`  *  specific fields that contain a string in the field name or description, by defining `id` and `query`  Only custom fields can be queried, `type` must be set to `custom`.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue fields" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanField.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanField> getFieldsPaginated(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "type", description = "The type of fields to search.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) List<String> type,
        @Parameter(name = "id", description = "The IDs of the custom fields to return or, where `query` is specified, filter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<String> id,
        @Parameter(name = "query", description = "String used to perform a case-insensitive partial match with field names or descriptions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `contextsCount` sorts by the number of contexts related to a field  *  `lastUsed` sorts by the date when the value of the field last changed  *  `name` sorts by the field name  *  `screensCount` sorts by the number of screens related to a field", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) String orderBy,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `key` returns the key for each field  *  `lastUsed` returns the date when the value of the field last changed  *  `screensCount` returns the number of screens related to a field  *  `contextsCount` returns the number of contexts related to a field  *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)  *  `searcherKey` returns the searcher key for each custom field", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"isUnscreenable\" : true, \"lastUsed\" : { \"type\" : \"TRACKED\", \"value\" : \"2000-01-23T04:56:07.000+00:00\" }, \"schema\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" }, \"screensCount\" : 7, \"contextsCount\" : 5, \"searcherKey\" : \"searcherKey\", \"isLocked\" : true, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"projectsCount\" : 5, \"key\" : \"key\" }, { \"isUnscreenable\" : true, \"lastUsed\" : { \"type\" : \"TRACKED\", \"value\" : \"2000-01-23T04:56:07.000+00:00\" }, \"schema\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" }, \"screensCount\" : 7, \"contextsCount\" : 5, \"searcherKey\" : \"searcherKey\", \"isLocked\" : true, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"projectsCount\" : 5, \"key\" : \"key\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/filter/{id} : Get filter
     * Returns a filter.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, the filter is only returned where it is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.
     *
     * @param id The ID of the filter to return. (required)
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
     * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the filter is not found or the user does not have permission to view it. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getFilter",
        summary = "Get filter",
        description = "Returns a filter.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, the filter is only returned where it is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Filter.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the filter is not found or the user does not have permission to view it."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/filter/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Filter> getFilter(
        @Parameter(name = "id", description = "The ID of the filter to return.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "overrideSharePermissions", description = "EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideSharePermissions", required = false, defaultValue = "false") Boolean overrideSharePermissions
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"jql\" : \"jql\", \"favouritedCount\" : 0, \"description\" : \"description\", \"favourite\" : true, \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/filter/search : Search for filters
     * Returns a [paginated](#pagination) list of filters. Use this operation to get:   *  specific filters, by defining &#x60;id&#x60; only.  *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @param filterName String used to perform a case-insensitive partial match with &#x60;name&#x60;. (optional)
     * @param accountId User account ID used to return filters with the matching &#x60;owner.accountId&#x60;. This parameter cannot be used with &#x60;owner&#x60;. (optional)
     * @param owner This parameter is deprecated because of privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching &#x60;owner.name&#x60;. This parameter cannot be used with &#x60;accountId&#x60;. (optional)
     * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended to identify a group. Group name used to returns filters that are shared with a group that matches &#x60;sharePermissions.group.groupname&#x60;. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
     * @param groupId Group ID used to returns filters that are shared with a group that matches &#x60;sharePermissions.group.groupId&#x60;. This parameter cannot be used with the &#x60;groupname&#x60; parameter. (optional)
     * @param projectId Project ID used to returns filters that are shared with a project that matches &#x60;sharePermissions.project.id&#x60;. (optional)
     * @param id The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. Do not exceed 200 filter IDs. (optional)
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;description&#x60; Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.  *  &#x60;favourite_count&#x60; Sorts by the count of how many users have this filter as a favorite.  *  &#x60;is_favourite&#x60; Sorts by whether the filter is marked as a favorite.  *  &#x60;id&#x60; Sorts by filter ID.  *  &#x60;name&#x60; Sorts by filter name.  *  &#x60;owner&#x60; Sorts by the ID of the filter owner.  *  &#x60;is_shared&#x60; Sorts by whether the filter is shared. (optional, default to name)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;description&#x60; Returns the description of the filter.  *  &#x60;favourite&#x60; Returns an indicator of whether the user has set the filter as a favorite.  *  &#x60;favouritedCount&#x60; Returns a count of how many users have set this filter as a favorite.  *  &#x60;jql&#x60; Returns the JQL query that the filter uses.  *  &#x60;owner&#x60; Returns the owner of the filter.  *  &#x60;searchUrl&#x60; Returns a URL to perform the filter&#39;s JQL query.  *  &#x60;sharePermissions&#x60; Returns the share permissions defined for the filter.  *  &#x60;editPermissions&#x60; Returns the edit permissions defined for the filter.  *  &#x60;isWritable&#x60; Returns whether the current user has permission to edit the filter.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter.  *  &#x60;viewUrl&#x60; Returns a URL to view the filter. (optional)
     * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  &#x60;owner&#x60; and &#x60;accountId&#x60; are provided.  *  &#x60;expand&#x60; includes an invalid value.  *  &#x60;orderBy&#x60; is invalid.  *  &#x60;id&#x60; identifies more than 200 filter IDs. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getFiltersPaginated",
        summary = "Search for filters",
        description = "Returns a [paginated](#pagination) list of filters. Use this operation to get:   *  specific filters, by defining `id` only.  *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanFilterDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `owner` and `accountId` are provided.  *  `expand` includes an invalid value.  *  `orderBy` is invalid.  *  `id` identifies more than 200 filter IDs.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/filter/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanFilterDetails> getFiltersPaginated(
        @Parameter(name = "filterName", description = "String used to perform a case-insensitive partial match with `name`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filterName", required = false) String filterName,
        @Size(max = 128) @Parameter(name = "accountId", description = "User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "owner", description = "This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "owner", required = false) String owner,
        @Parameter(name = "groupname", description = "As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupname", required = false) String groupname,
        @Parameter(name = "groupId", description = "Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId,
        @Parameter(name = "projectId", description = "Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Long projectId,
        @Parameter(name = "id", description = "The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<Long> id,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.  *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.  *  `is_favourite` Sorts by whether the filter is marked as a favorite.  *  `id` Sorts by filter ID.  *  `name` Sorts by filter name.  *  `owner` Sorts by the ID of the filter owner.  *  `is_shared` Sorts by whether the filter is shared.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false, defaultValue = "name") String orderBy,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  `description` Returns the description of the filter.  *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.  *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.  *  `jql` Returns the JQL query that the filter uses.  *  `owner` Returns the owner of the filter.  *  `searchUrl` Returns a URL to perform the filter's JQL query.  *  `sharePermissions` Returns the share permissions defined for the filter.  *  `editPermissions` Returns the edit permissions defined for the filter.  *  `isWritable` Returns whether the current user has permission to edit the filter.  *  `subscriptions` Returns the users that are subscribed to the filter.  *  `viewUrl` Returns a URL to view the filter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "overrideSharePermissions", description = "EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideSharePermissions", required = false, defaultValue = "false") Boolean overrideSharePermissions
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"subscriptions\" : [ { \"id\" : 5 }, { \"id\" : 5 } ], \"jql\" : \"jql\", \"favouritedCount\" : 5, \"description\" : \"description\", \"favourite\" : true, \"expand\" : \"expand\", \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] }, { \"subscriptions\" : [ { \"id\" : 5 }, { \"id\" : 5 } ], \"jql\" : \"jql\", \"favouritedCount\" : 5, \"description\" : \"description\", \"favourite\" : true, \"expand\" : \"expand\", \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/group : Get group
     * This operation is deprecated, use [&#x60;group/member&#x60;](#api-rest-api-3-group-member-get).  Returns all users in a group.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended to identify a group.   The name of the group. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
     * @param groupId The ID of the group. This parameter cannot be used with the &#x60;groupName&#x60; parameter. (optional)
     * @param expand List of fields to expand. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the group name is not specified. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the calling user does not have the Administer Jira global permission. (status code 403)
     *         or Returned if the group is not found. (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "getGroup",
        summary = "Get group",
        description = "This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).  Returns all users in a group.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        deprecated = true,
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the group name is not specified."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the calling user does not have the Administer Jira global permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the group is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/group",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Group> getGroup(
        @Parameter(name = "groupname", description = "As a group's name can change, use of `groupId` is recommended to identify a group.   The name of the group. This parameter cannot be used with the `groupId` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupname", required = false) String groupname,
        @Parameter(name = "groupId", description = "The ID of the group. This parameter cannot be used with the `groupName` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId,
        @Parameter(name = "expand", description = "List of fields to expand.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectId}/hierarchy : Get project issue type hierarchy
     * Get the issue type hierarchy for a next-gen project.  The issue type hierarchy for a project consists of:   *  *Epic* at level 1 (optional).  *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.  *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectId The ID of the project. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user does not have the necessary permission. (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "getHierarchy",
        summary = "Get project issue type hierarchy",
        description = "Get the issue type hierarchy for a next-gen project.  The issue type hierarchy for a project consists of:   *  *Epic* at level 1 (optional).  *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.  *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        deprecated = true,
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectIssueTypeHierarchy.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectId}/hierarchy",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectIssueTypeHierarchy> getHierarchy(
        @Parameter(name = "projectId", description = "The ID of the project.", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"hierarchy\" : [ { \"level\" : 1, \"name\" : \"name\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"name\" : \"name\", \"id\" : 6 }, { \"avatarId\" : 0, \"name\" : \"name\", \"id\" : 6 } ] }, { \"level\" : 1, \"name\" : \"name\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"name\" : \"name\", \"id\" : 6 }, { \"avatarId\" : 0, \"name\" : \"name\", \"id\" : 6 } ] } ], \"projectId\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/worklog/deleted : Get IDs of deleted worklogs
     * Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, &#x60;until&#x60; indicates the timestamp of the youngest item on the page. Also, &#x60;nextPage&#x60; provides the URL for the next page of worklogs. The &#x60;lastPage&#x60; parameter is set to true on the last page of worklogs.  This resource does not return worklogs deleted during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param since The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned. (optional, default to 0)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getIdsOfWorklogsDeletedSince",
        summary = "Get IDs of deleted worklogs",
        description = "Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.  This resource does not return worklogs deleted during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Issue worklogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChangedWorklogs.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/worklog/deleted",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ChangedWorklogs> getIdsOfWorklogsDeletedSince(
        @Parameter(name = "since", description = "The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false, defaultValue = "0") Long since
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastPage\" : true, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"updatedTime\" : 1, \"worklogId\" : 5, \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }, { \"updatedTime\" : 1, \"worklogId\" : 5, \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] } ], \"self\" : \"https://openapi-generator.tech\", \"until\" : 6, \"since\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/worklog/updated : Get IDs of updated worklogs
     * Returns a list of IDs and update timestamps for worklogs updated after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, &#x60;until&#x60; indicates the timestamp of the youngest item on the page. Also, &#x60;nextPage&#x60; provides the URL for the next page of worklogs. The &#x60;lastPage&#x60; parameter is set to true on the last page of worklogs.  This resource does not return worklogs updated during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.
     *
     * @param since The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned. (optional, default to 0)
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts &#x60;properties&#x60; that returns the properties of each worklog. (optional, default to )
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getIdsOfWorklogsModifiedSince",
        summary = "Get IDs of updated worklogs",
        description = "Returns a list of IDs and update timestamps for worklogs updated after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.  This resource does not return worklogs updated during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.",
        tags = { "Issue worklogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChangedWorklogs.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/worklog/updated",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ChangedWorklogs> getIdsOfWorklogsModifiedSince(
        @Parameter(name = "since", description = "The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false, defaultValue = "0") Long since,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false, defaultValue = "") String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastPage\" : true, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"updatedTime\" : 1, \"worklogId\" : 5, \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }, { \"updatedTime\" : 1, \"worklogId\" : 5, \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] } ], \"self\" : \"https://openapi-generator.tech\", \"until\" : 6, \"since\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/watching : Get is watching issue bulk
     * Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is &#x60;false&#x60;.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueList A list of issue IDs. (required)
     * @return Returned if the request is successful (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getIsWatchingIssueBulk",
        summary = "Get is watching issue bulk",
        description = "Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue watchers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BulkIssueIsWatching.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/watching",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BulkIssueIsWatching> getIsWatchingIssueBulk(
        @Parameter(name = "IssueList", description = "A list of issue IDs.", required = true) @Valid @RequestBody IssueList issueList
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issuesIsWatching\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey} : Get issue
     * Returns the details for an issue.  The issue is identified by its ID or key, however, if the identifier doesn&#39;t match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param fields A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:   *  &#x60;*all&#x60; Returns all fields.  *  &#x60;*navigable&#x60; Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  Examples:   *  &#x60;summary,comment&#x60; Returns only the summary and comments fields.  *  &#x60;-description&#x60; Returns all (default) fields except description.  *  &#x60;*navigable,-comment&#x60; Returns all navigable fields except comment.  This parameter may be specified multiple times. For example, &#x60;fields&#x3D;field1,field2&amp; fields&#x3D;field3&#x60;.  Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields. (optional)
     * @param fieldsByKeys Whether fields in &#x60;fields&#x60; are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field&#39;s key may differ from its ID. (optional, default to false)
     * @param expand Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;renderedFields&#x60; Returns field values rendered in HTML format.  *  &#x60;names&#x60; Returns the display name of each field.  *  &#x60;schema&#x60; Returns the schema describing a field type.  *  &#x60;transitions&#x60; Returns all possible transitions for the issue.  *  &#x60;editmeta&#x60; Returns information about how each field can be edited.  *  &#x60;changelog&#x60; Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  &#x60;versionedRepresentations&#x60; Returns a JSON array for each version of a field&#39;s value, with the highest number representing the most recent version. Note: When included in the request, the &#x60;fields&#x60; parameter is ignored. (optional)
     * @param properties A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:   *  &#x60;*all&#x60; Returns all issue properties.  *  Any issue property key, prefixed with a minus to exclude.  Examples:   *  &#x60;*all&#x60; Returns all properties.  *  &#x60;*all,-prop1&#x60; Returns all properties except &#x60;prop1&#x60;.  *  &#x60;prop1,prop2&#x60; Returns &#x60;prop1&#x60; and &#x60;prop2&#x60; properties.  This parameter may be specified multiple times. For example, &#x60;properties&#x3D;prop1,prop2&amp; properties&#x3D;prop3&#x60;. (optional)
     * @param updateHistory Whether the project in which the issue is created is added to the user&#39;s **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) &#x60;lastViewed&#x60; field. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getIssue",
        summary = "Get issue",
        description = "Returns the details for an issue.  The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueBean.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueBean> getIssue(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "fields", description = "A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:   *  `*all` Returns all fields.  *  `*navigable` Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  Examples:   *  `summary,comment` Returns only the summary and comments fields.  *  `-description` Returns all (default) fields except description.  *  `*navigable,-comment` Returns all navigable fields except comment.  This parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.  Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields", required = false) List<String> fields,
        @Parameter(name = "fieldsByKeys", description = "Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fieldsByKeys", required = false, defaultValue = "false") Boolean fieldsByKeys,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:   *  `renderedFields` Returns field values rendered in HTML format.  *  `names` Returns the display name of each field.  *  `schema` Returns the schema describing a field type.  *  `transitions` Returns all possible transitions for the issue.  *  `editmeta` Returns information about how each field can be edited.  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "properties", description = "A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:   *  `*all` Returns all issue properties.  *  Any issue property key, prefixed with a minus to exclude.  Examples:   *  `*all` Returns all properties.  *  `*all,-prop1` Returns all properties except `prop1`.  *  `prop1,prop2` Returns `prop1` and `prop2` properties.  This parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "properties", required = false) List<String> properties,
        @Parameter(name = "updateHistory", description = "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updateHistory", required = false, defaultValue = "false") Boolean updateHistory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : { \"key\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" } }, \"fieldsToInclude\" : { \"excluded\" : [ \"excluded\", \"excluded\" ], \"actuallyIncluded\" : [ \"actuallyIncluded\", \"actuallyIncluded\" ], \"included\" : [ \"included\", \"included\" ] }, \"transitions\" : [ { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } }, { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } } ], \"renderedFields\" : { \"key\" : \"\" }, \"expand\" : \"expand\", \"names\" : { \"key\" : \"names\" }, \"versionedRepresentations\" : { \"key\" : { \"key\" : \"\" } }, \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"fields\" : { \"key\" : \"\" }, \"key\" : \"key\", \"properties\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetype : Get all issue types for user
     * Returns all issue types.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issue types are only returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getIssueAllTypes",
        summary = "Get all issue types for user",
        description = "Returns all issue types.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issue types are only returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.",
        tags = { "Issue types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IssueTypeDetails.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetype",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<IssueTypeDetails>> getIssueAllTypes(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldKey}/option/{optionId} : Get issue field option
     * Returns an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     *
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param optionId The ID of the option to be returned. (required)
     * @return Returned if the requested option is returned. (status code 200)
     *         or Returned if the field is not found or does not support options. (status code 400)
     *         or Returned if the request is not authenticated as a Jira administrator or the app that provided the field. (status code 403)
     *         or Returned if the option is not found. (status code 404)
     */
    @Operation(
        operationId = "getIssueFieldOption",
        summary = "Get issue field option",
        description = "Returns an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.",
        tags = { "Issue custom field options (apps)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the requested option is returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueFieldOption.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the field is not found or does not support options."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not authenticated as a Jira administrator or the app that provided the field."),
            @ApiResponse(responseCode = "404", description = "Returned if the option is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldKey}/option/{optionId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueFieldOption> getIssueFieldOption(
        @Parameter(name = "fieldKey", description = "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`", required = true, in = ParameterIn.PATH) @PathVariable("fieldKey") String fieldKey,
        @Parameter(name = "optionId", description = "The ID of the option to be returned.", required = true, in = ParameterIn.PATH) @PathVariable("optionId") Long optionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"config\" : { \"scope\" : \"\", \"attributes\" : [ \"notSelectable\", \"notSelectable\" ] }, \"value\" : \"value\", \"properties\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issueLink/{linkId} : Get issue link
     * Returns an issue link.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
     *
     * @param linkId The ID of the issue link. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the issue link ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  issue linking is disabled.  *  the issue link is not found.  *  the user doesn&#39;t have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "getIssueLink",
        summary = "Get issue link",
        description = "Returns an issue link.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.",
        tags = { "Issue links" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueLink.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the issue link ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  issue linking is disabled.  *  the issue link is not found.  *  the user doesn't have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issueLink/{linkId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueLink> getIssueLink(
        @Parameter(name = "linkId", description = "The ID of the issue link.", required = true, in = ParameterIn.PATH) @PathVariable("linkId") String linkId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"outwardIssue\" : \"\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"inwardIssue\" : \"\", \"type\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issueLinkType/{issueLinkTypeId} : Get issue link type
     * Returns an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     *
     * @param issueLinkTypeId The ID of the issue link type. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the issue link type ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "getIssueLinkType",
        summary = "Get issue link type",
        description = "Returns an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.",
        tags = { "Issue link types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueLinkType.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the issue link type ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issueLinkType/{issueLinkTypeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueLinkType> getIssueLinkType(
        @Parameter(name = "issueLinkTypeId", description = "The ID of the issue link type.", required = true, in = ParameterIn.PATH) @PathVariable("issueLinkTypeId") String issueLinkTypeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"inward\" : \"inward\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"outward\" : \"outward\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issueLinkType : Get issue link types
     * Returns a list of all issue link types.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if issue linking is disabled. (status code 404)
     */
    @Operation(
        operationId = "getIssueLinkTypes",
        summary = "Get issue link types",
        description = "Returns a list of all issue link types.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.",
        tags = { "Issue link types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueLinkTypes.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if issue linking is disabled.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issueLinkType",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueLinkTypes> getIssueLinkTypes(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issueLinkTypes\" : [ { \"inward\" : \"inward\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"outward\" : \"outward\" }, { \"inward\" : \"inward\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"outward\" : \"outward\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/settings/columns : Get issue navigator default columns
     * Returns the default issue navigator columns.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getIssueNavigatorDefaultColumns",
        summary = "Get issue navigator default columns",
        description = "Returns the default issue navigator columns.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue navigator settings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ColumnItem.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/settings/columns",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ColumnItem>> getIssueNavigatorDefaultColumns(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"label\" : \"label\", \"value\" : \"value\" }, { \"label\" : \"label\", \"value\" : \"value\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/picker : Get issue picker suggestions
     * Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.  This operation returns two lists:   *  &#x60;History Search&#x60; which includes issues from the user&#39;s history of created, edited, or viewed issues that contain the string in the &#x60;query&#x60; parameter.  *  &#x60;Current Search&#x60; which includes issues that match the JQL expression in &#x60;currentJQL&#x60; and contain the string in the &#x60;query&#x60; parameter.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param query A string to match against text fields in the issue such as title, description, or comments. (optional)
     * @param currentJQL A JQL query defining a list of issues to search for the query term. Note that &#x60;username&#x60; and &#x60;userkey&#x60; cannot be used as search terms for this parameter, due to privacy reasons. Use &#x60;accountId&#x60; instead. (optional)
     * @param currentIssueKey The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query. (optional)
     * @param currentProjectId The ID of a project that suggested issues must belong to. (optional)
     * @param showSubTasks Indicate whether to include subtasks in the suggestions list. (optional)
     * @param showSubTaskParent When &#x60;currentIssueKey&#x60; is a subtask, whether to include the parent issue in the suggestions if it matches the query. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getIssuePickerResource",
        summary = "Get issue picker suggestions",
        description = "Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.  This operation returns two lists:   *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.  *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Issue search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssuePickerSuggestions.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/picker",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssuePickerSuggestions> getIssuePickerResource(
        @Parameter(name = "query", description = "A string to match against text fields in the issue such as title, description, or comments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "currentJQL", description = "A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "currentJQL", required = false) String currentJQL,
        @Parameter(name = "currentIssueKey", description = "The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "currentIssueKey", required = false) String currentIssueKey,
        @Parameter(name = "currentProjectId", description = "The ID of a project that suggested issues must belong to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "currentProjectId", required = false) String currentProjectId,
        @Parameter(name = "showSubTasks", description = "Indicate whether to include subtasks in the suggestions list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "showSubTasks", required = false) Boolean showSubTasks,
        @Parameter(name = "showSubTaskParent", description = "When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "showSubTaskParent", required = false) Boolean showSubTaskParent
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"sections\" : [ { \"msg\" : \"msg\", \"sub\" : \"sub\", \"id\" : \"id\", \"label\" : \"label\", \"issues\" : [ { \"summary\" : \"summary\", \"img\" : \"img\", \"keyHtml\" : \"keyHtml\", \"summaryText\" : \"summaryText\", \"id\" : 0, \"key\" : \"key\" }, { \"summary\" : \"summary\", \"img\" : \"img\", \"keyHtml\" : \"keyHtml\", \"summaryText\" : \"summaryText\", \"id\" : 0, \"key\" : \"key\" } ] }, { \"msg\" : \"msg\", \"sub\" : \"sub\", \"id\" : \"id\", \"label\" : \"label\", \"issues\" : [ { \"summary\" : \"summary\", \"img\" : \"img\", \"keyHtml\" : \"keyHtml\", \"summaryText\" : \"summaryText\", \"id\" : 0, \"key\" : \"key\" }, { \"summary\" : \"summary\", \"img\" : \"img\", \"keyHtml\" : \"keyHtml\", \"summaryText\" : \"summaryText\", \"id\" : 0, \"key\" : \"key\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey} : Get issue property
     * Returns the key and value of an issue&#39;s property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The key or ID of the issue. (required)
     * @param propertyKey The key of the property. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue or property is not found or the user does not have permission to see the issue. (status code 404)
     */
    @Operation(
        operationId = "getIssueProperty",
        summary = "Get issue property",
        description = "Returns the key and value of an issue's property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EntityProperty.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or property is not found or the user does not have permission to see the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EntityProperty> getIssueProperty(
        @Parameter(name = "issueIdOrKey", description = "The key or ID of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "propertyKey", description = "The key of the property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"value\" : \"\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/properties : Get issue property keys
     * Returns the URLs and keys of an issue&#39;s properties.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Property details are only returned where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The key or ID of the issue. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the issue is not found or the user does not have permissions to view the issue. (status code 404)
     */
    @Operation(
        operationId = "getIssuePropertyKeys",
        summary = "Get issue property keys",
        description = "Returns the URLs and keys of an issue's properties.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Property details are only returned where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyKeys.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permissions to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/properties",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PropertyKeys> getIssuePropertyKeys(
        @Parameter(name = "issueIdOrKey", description = "The key or ID of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keys\" : [ { \"self\" : \"self\", \"key\" : \"key\" }, { \"self\" : \"self\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/securitylevel/{id} : Get issue security level
     * Returns details of an issue security level.  Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param id The ID of the issue security level. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the issue security level is not found. (status code 404)
     */
    @Operation(
        operationId = "getIssueSecurityLevel",
        summary = "Get issue security level",
        description = "Returns details of an issue security level.  Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Issue security level" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SecurityLevel.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue security level is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/securitylevel/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SecurityLevel> getIssueSecurityLevel(
        @Parameter(name = "id", description = "The ID of the issue security level.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members : Get issue security level members
     * Returns issue security level members.  Only issue security level members in context of classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueSecuritySchemeId The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param issueSecurityLevelId The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: &#x60;issueSecurityLevelId&#x3D;10000&amp;issueSecurityLevelId&#x3D;10001&#x60;. (optional)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if no issue security level members are found. (status code 404)
     */
    @Operation(
        operationId = "getIssueSecurityLevelMembers",
        summary = "Get issue security level members",
        description = "Returns issue security level members.  Only issue security level members in context of classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security level" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueSecurityLevelMember.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if no issue security level members are found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueSecurityLevelMember> getIssueSecurityLevelMembers(
        @Parameter(name = "issueSecuritySchemeId", description = "The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.", required = true, in = ParameterIn.PATH) @PathVariable("issueSecuritySchemeId") Long issueSecuritySchemeId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "issueSecurityLevelId", description = "The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueSecurityLevelId", required = false) Set<Long> issueSecurityLevelId,
        @Parameter(name = "expand", description = "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"holder\" : \"\", \"id\" : 5, \"issueSecurityLevelId\" : 5 }, { \"holder\" : \"\", \"id\" : 5, \"issueSecurityLevelId\" : 5 } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuesecurityschemes/{id} : Get issue security scheme
     * Returns an issue security scheme along with its security levels.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
     *
     * @param id The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission. (status code 403)
     */
    @Operation(
        operationId = "getIssueSecurityScheme",
        summary = "Get issue security scheme",
        description = "Returns an issue security scheme along with its security levels.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SecurityScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuesecurityschemes/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SecurityScheme> getIssueSecurityScheme(
        @Parameter(name = "id", description = "The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"defaultSecurityLevelId\" : 0, \"description\" : \"description\", \"self\" : \"self\", \"id\" : 6, \"levels\" : [ { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" }, { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuesecurityschemes : Get issue security schemes
     * Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the user does not have permission to administer issue security schemes. (status code 403)
     */
    @Operation(
        operationId = "getIssueSecuritySchemes",
        summary = "Get issue security schemes",
        description = "Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SecuritySchemes.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to administer issue security schemes.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuesecurityschemes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SecuritySchemes> getIssueSecuritySchemes(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issueSecuritySchemes\" : [ { \"name\" : \"name\", \"defaultSecurityLevelId\" : 0, \"description\" : \"description\", \"self\" : \"self\", \"id\" : 6, \"levels\" : [ { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" }, { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" } ] }, { \"name\" : \"name\", \"defaultSecurityLevelId\" : 0, \"description\" : \"description\", \"self\" : \"self\", \"id\" : 6, \"levels\" : [ { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" }, { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetype/{id} : Get issue type
     * Returns an issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the issue type. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the issue type ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the issue type is not found.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "getIssueType",
        summary = "Get issue type",
        description = "Returns an issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueTypeDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the issue type ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue type is not found.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetype/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueTypeDetails> getIssueType(
        @Parameter(name = "id", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldId}/context/issuetypemapping : Get issue types for custom field context
     * Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, &#x60;contextId&#x3D;10001&amp;contextId&#x3D;10002&#x60;. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if operation is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     */
    @Operation(
        operationId = "getIssueTypeMappingsForContexts",
        summary = "Get issue types for custom field context",
        description = "Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if operation is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueTypeToContextMapping.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldId}/context/issuetypemapping",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueTypeToContextMapping> getIssueTypeMappingsForContexts(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "contextId", required = false) List<Long> contextId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"issueTypeId\" : \"issueTypeId\", \"contextId\" : \"contextId\", \"isAnyIssueType\" : true }, { \"issueTypeId\" : \"issueTypeId\", \"contextId\" : \"contextId\", \"isAnyIssueType\" : true } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey} : Get issue type property
     * Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.
     *
     * @param issueTypeId The ID of the issue type. (required)
     * @param propertyKey The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the issue type ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue type or property is not found or the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "getIssueTypeProperty",
        summary = "Get issue type property",
        description = "Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.",
        tags = { "Issue type properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EntityProperty.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the issue type ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type or property is not found or the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EntityProperty> getIssueTypeProperty(
        @Parameter(name = "issueTypeId", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeId") String issueTypeId,
        @Parameter(name = "propertyKey", description = "The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"value\" : \"\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetype/{issueTypeId}/properties : Get issue type property keys
     * Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.
     *
     * @param issueTypeId The ID of the issue type. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the issue type ID is invalid. (status code 400)
     *         or Returned if:   *  the issue type is not found.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "getIssueTypePropertyKeys",
        summary = "Get issue type property keys",
        description = "Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.",
        tags = { "Issue type properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyKeys.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the issue type ID is invalid."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue type is not found.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetype/{issueTypeId}/properties",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PropertyKeys> getIssueTypePropertyKeys(
        @Parameter(name = "issueTypeId", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeId") String issueTypeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keys\" : [ { \"self\" : \"self\", \"key\" : \"key\" }, { \"self\" : \"self\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetypescheme/project : Get issue type schemes for projects
     * Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectId The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     */
    @Operation(
        operationId = "getIssueTypeSchemeForProjects",
        summary = "Get issue type schemes for projects",
        description = "Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueTypeSchemeProjects.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetypescheme/project",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueTypeSchemeProjects> getIssueTypeSchemeForProjects(
        @NotNull @Parameter(name = "projectId", description = "The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = true) Set<Long> projectId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"projectIds\" : [ \"projectIds\", \"projectIds\" ], \"issueTypeScheme\" : \"\" }, { \"projectIds\" : [ \"projectIds\", \"projectIds\" ], \"issueTypeScheme\" : \"\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetypescheme/mapping : Get issue type scheme items
     * Returns a [paginated](#pagination) list of issue type scheme items.  Only issue type scheme items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param issueTypeSchemeId The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;issueTypeSchemeId&#x3D;10000&amp;issueTypeSchemeId&#x3D;10001&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     */
    @Operation(
        operationId = "getIssueTypeSchemesMapping",
        summary = "Get issue type scheme items",
        description = "Returns a [paginated](#pagination) list of issue type scheme items.  Only issue type scheme items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueTypeSchemeMapping.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetypescheme/mapping",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueTypeSchemeMapping> getIssueTypeSchemesMapping(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "issueTypeSchemeId", description = "The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueTypeSchemeId", required = false) Set<Long> issueTypeSchemeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"issueTypeId\" : \"issueTypeId\", \"issueTypeSchemeId\" : \"issueTypeSchemeId\" }, { \"issueTypeId\" : \"issueTypeId\", \"issueTypeSchemeId\" : \"issueTypeSchemeId\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetypescreenscheme/mapping : Get issue type screen scheme items
     * Returns a [paginated](#pagination) list of issue type screen scheme items.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param issueTypeScreenSchemeId The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: &#x60;issueTypeScreenSchemeId&#x3D;10000&amp;issueTypeScreenSchemeId&#x3D;10001&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     */
    @Operation(
        operationId = "getIssueTypeScreenSchemeMappings",
        summary = "Get issue type screen scheme items",
        description = "Returns a [paginated](#pagination) list of issue type screen scheme items.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueTypeScreenSchemeItem.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetypescreenscheme/mapping",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueTypeScreenSchemeItem> getIssueTypeScreenSchemeMappings(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "issueTypeScreenSchemeId", description = "The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueTypeScreenSchemeId", required = false) Set<Long> issueTypeScreenSchemeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"issueTypeId\" : \"issueTypeId\", \"issueTypeScreenSchemeId\" : \"issueTypeScreenSchemeId\", \"screenSchemeId\" : \"screenSchemeId\" }, { \"issueTypeId\" : \"issueTypeId\", \"issueTypeScreenSchemeId\" : \"issueTypeScreenSchemeId\", \"screenSchemeId\" : \"screenSchemeId\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetypescreenscheme/project : Get issue type screen schemes for projects
     * Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectId The list of project IDs. To include multiple projects, separate IDs with ampersand: &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     */
    @Operation(
        operationId = "getIssueTypeScreenSchemeProjectAssociations",
        summary = "Get issue type screen schemes for projects",
        description = "Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueTypeScreenSchemesProjects.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetypescreenscheme/project",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueTypeScreenSchemesProjects> getIssueTypeScreenSchemeProjectAssociations(
        @NotNull @Parameter(name = "projectId", description = "The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = true) Set<Long> projectId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"issueTypeScreenScheme\" : \"\", \"projectIds\" : [ \"projectIds\", \"projectIds\" ] }, { \"issueTypeScreenScheme\" : \"\", \"projectIds\" : [ \"projectIds\", \"projectIds\" ] } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetypescreenscheme : Get issue type screen schemes
     * Returns a [paginated](#pagination) list of issue type screen schemes.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
     * @param queryString String used to perform a case-insensitive partial match with issue type screen scheme name. (optional, default to )
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;name&#x60; Sorts by issue type screen scheme name.  *  &#x60;id&#x60; Sorts by issue type screen scheme ID. (optional, default to id)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts &#x60;projects&#x60; that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to. (optional, default to )
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     */
    @Operation(
        operationId = "getIssueTypeScreenSchemes",
        summary = "Get issue type screen schemes",
        description = "Returns a [paginated](#pagination) list of issue type screen schemes.  Only issue type screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueTypeScreenScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetypescreenscheme",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueTypeScreenScheme> getIssueTypeScreenSchemes(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "id", description = "The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<Long> id,
        @Parameter(name = "queryString", description = "String used to perform a case-insensitive partial match with issue type screen scheme name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queryString", required = false, defaultValue = "") String queryString,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `name` Sorts by issue type screen scheme name.  *  `id` Sorts by issue type screen scheme ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false, defaultValue = "id") String orderBy,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false, defaultValue = "") String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }, { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetype/project : Get issue types for project
     * Returns issue types for a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectId The ID of the project. (required)
     * @param level The level of the issue type to filter by. Use:   *  &#x60;-1&#x60; for Subtask.  *  &#x60;0&#x60; for Base.  *  &#x60;1&#x60; for Epic. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the project is not found.  *  the user does not have the necessary permission. (status code 404)
     */
    @Operation(
        operationId = "getIssueTypesForProject",
        summary = "Get issue types for project",
        description = "Returns issue types for a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IssueTypeDetails.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the project is not found.  *  the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetype/project",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<IssueTypeDetails>> getIssueTypesForProject(
        @NotNull @Parameter(name = "projectId", description = "The ID of the project.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = true) Long projectId,
        @Parameter(name = "level", description = "The level of the issue type to filter by. Use:   *  `-1` for Subtask.  *  `0` for Base.  *  `1` for Epic.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "level", required = false) Integer level
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/watchers : Get issue watchers
     * Returns the watchers for an issue.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @return Returned if the request is successful (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getIssueWatchers",
        summary = "Get issue watchers",
        description = "Returns the watchers for an issue.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.",
        tags = { "Issue watchers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Watchers.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/watchers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Watchers> getIssueWatchers(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"self\" : \"self\", \"watchers\" : [ { \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"displayName\" : \"displayName\", \"accountType\" : \"accountType\", \"name\" : \"name\", \"active\" : true, \"self\" : \"self\", \"timeZone\" : \"timeZone\", \"key\" : \"key\" }, { \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"displayName\" : \"displayName\", \"accountType\" : \"accountType\", \"name\" : \"name\", \"active\" : true, \"self\" : \"self\", \"timeZone\" : \"timeZone\", \"key\" : \"key\" } ], \"isWatching\" : true, \"watchCount\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/worklog : Get issue worklogs
     * Returns worklogs for an issue, starting from the oldest worklog or from the worklog started on or after a date and time.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Workloads are only returned where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 5000)
     * @param startedAfter The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned. (optional)
     * @param startedBefore The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned. (optional)
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts&#x60;properties&#x60;, which returns worklog properties. (optional, default to )
     * @return Returned if the request is successful (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the issue is not found or the user does not have permission to view the issue.  *  &#x60;startAt&#x60; or &#x60;maxResults&#x60; has non-numeric values.  *  time tracking is disabled. (status code 404)
     */
    @Operation(
        operationId = "getIssueWorklog",
        summary = "Get issue worklogs",
        description = "Returns worklogs for an issue, starting from the oldest worklog or from the worklog started on or after a date and time.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Workloads are only returned where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue worklogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageOfWorklogs.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue is not found or the user does not have permission to view the issue.  *  `startAt` or `maxResults` has non-numeric values.  *  time tracking is disabled.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/worklog",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageOfWorklogs> getIssueWorklog(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "5000") Integer maxResults,
        @Parameter(name = "startedAfter", description = "The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedAfter", required = false) Long startedAfter,
        @Parameter(name = "startedBefore", description = "The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startedBefore", required = false) Long startedBefore,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false, defaultValue = "") String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"maxResults\" : 0, \"startAt\" : 6, \"worklogs\" : [ { \"issueId\" : \"issueId\", \"visibility\" : \"\", \"timeSpent\" : \"timeSpent\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"started\" : \"2000-01-23T04:56:07.000+00:00\", \"timeSpentSeconds\" : 5, \"self\" : \"https://openapi-generator.tech\", \"comment\" : \"\", \"id\" : \"id\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }, { \"issueId\" : \"issueId\", \"visibility\" : \"\", \"timeSpent\" : \"timeSpent\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"started\" : \"2000-01-23T04:56:07.000+00:00\", \"timeSpentSeconds\" : 5, \"self\" : \"https://openapi-generator.tech\", \"comment\" : \"\", \"id\" : \"id\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/instance/license : Get license
     * Returns licensing information about the Jira instance.  **[Permissions](#permissions) required:** None.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getLicense",
        summary = "Get license",
        description = "Returns licensing information about the Jira instance.  **[Permissions](#permissions) required:** None.",
        tags = { "Instance information" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = License.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/instance/license",
        produces = { "application/json" }
    )
    
    default ResponseEntity<License> getLicense(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"applications\" : [ { \"id\" : \"id\", \"plan\" : \"UNLICENSED\" }, { \"id\" : \"id\", \"plan\" : \"UNLICENSED\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/mypreferences/locale : Get locale
     * Returns the locale for the user.  If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn&#39;t match a locale available Jira, the site default locale is returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getLocale",
        summary = "Get locale",
        description = "Returns the locale for the user.  If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Myself" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Locale.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/mypreferences/locale",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Locale> getLocale(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"locale\" : \"locale\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/filter/my : Get my filters
     * Returns the filters owned by the user. If &#x60;includeFavourites&#x60; is &#x60;true&#x60;, the user&#39;s visible favorite filters are also returned.  **[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.  For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     *
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
     * @param includeFavourites Include the user&#39;s favorite filters in the response. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getMyFilters",
        summary = "Get my filters",
        description = "Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.  **[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:   *  owned by the user.  *  shared with a group that the user is a member of.  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  shared with a public project.  *  shared with the public.  For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Filter.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/filter/my",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Filter>> getMyFilters(
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "includeFavourites", description = "Include the user's favorite filters in the response.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeFavourites", required = false, defaultValue = "false") Boolean includeFavourites
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"jql\" : \"jql\", \"favouritedCount\" : 0, \"description\" : \"description\", \"favourite\" : true, \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] }, { \"jql\" : \"jql\", \"favouritedCount\" : 0, \"description\" : \"description\", \"favourite\" : true, \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/mypermissions : Get my permissions
     * Returns a list of permissions indicating which permissions the user has. Details of the user&#39;s permissions can be obtained in a global, project, issue or comment context.  The user is reported as having a project permission:   *  in the global context, if the user has the project permission in any project.  *  for a project, where the project permission is determined using issue data, if the user meets the permission&#39;s criteria for any issue in the project. Otherwise, if the user has the project permission in the project.  *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.  *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment&#39;s parent issue. Only the BROWSE\\_PROJECTS permission is supported. If a &#x60;commentId&#x60; is provided whose &#x60;permissions&#x60; does not equal BROWSE\\_PROJECTS, a 400 error will be returned.  This means that users may be shown as having an issue permission (such as EDIT\\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\\_ISSUES permission for that issue.  Global permissions are unaffected by context.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param projectKey The key of project. Ignored if &#x60;projectId&#x60; is provided. (optional)
     * @param projectId The ID of project. (optional)
     * @param issueKey The key of the issue. Ignored if &#x60;issueId&#x60; is provided. (optional)
     * @param issueId The ID of the issue. (optional)
     * @param permissions A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get). (optional)
     * @param projectUuid  (optional)
     * @param projectConfigurationUuid  (optional)
     * @param commentId The ID of the comment. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if &#x60;permissions&#x60; is empty, contains an invalid key, or does not equal BROWSE\\_PROJECTS when commentId is provided. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project or issue is not found or the user does not have permission to view the project or issue. (status code 404)
     */
    @Operation(
        operationId = "getMyPermissions",
        summary = "Get my permissions",
        description = "Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.  The user is reported as having a project permission:   *  in the global context, if the user has the project permission in any project.  *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.  *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.  *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\\_PROJECTS, a 400 error will be returned.  This means that users may be shown as having an issue permission (such as EDIT\\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\\_ISSUES permission for that issue.  Global permissions are unaffected by context.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Permissions.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if `permissions` is empty, contains an invalid key, or does not equal BROWSE\\_PROJECTS when commentId is provided.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the project or issue is not found or the user does not have permission to view the project or issue.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/mypermissions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Permissions> getMyPermissions(
        @Parameter(name = "projectKey", description = "The key of project. Ignored if `projectId` is provided.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectKey", required = false) String projectKey,
        @Parameter(name = "projectId", description = "The ID of project.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) String projectId,
        @Parameter(name = "issueKey", description = "The key of the issue. Ignored if `issueId` is provided.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueKey", required = false) String issueKey,
        @Parameter(name = "issueId", description = "The ID of the issue.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueId", required = false) String issueId,
        @Parameter(name = "permissions", description = "A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "permissions", required = false) String permissions,
        @Parameter(name = "projectUuid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectUuid", required = false) String projectUuid,
        @Parameter(name = "projectConfigurationUuid", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectConfigurationUuid", required = false) String projectConfigurationUuid,
        @Parameter(name = "commentId", description = "The ID of the comment.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "commentId", required = false) String commentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissions\" : { \"key\" : { \"havePermission\" : true, \"name\" : \"name\", \"description\" : \"description\", \"deprecatedKey\" : true, \"id\" : \"id\", \"type\" : \"GLOBAL\", \"key\" : \"key\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/notificationscheme/{id} : Get notification scheme
     * Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.  **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.
     *
     * @param id The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs. (required)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information  *  &#x60;field&#x60; Returns information about any custom fields assigned to receive an event  *  &#x60;group&#x60; Returns information about any groups assigned to receive an event  *  &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information  *  &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event  *  &#x60;user&#x60; Returns information about any users assigned to receive an event (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the notification scheme is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getNotificationScheme",
        summary = "Get notification scheme",
        description = "Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.  **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.",
        tags = { "Issue notification schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificationScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the notification scheme is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/notificationscheme/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<NotificationScheme> getNotificationScheme(
        @Parameter(name = "id", description = "The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information  *  `field` Returns information about any custom fields assigned to receive an event  *  `group` Returns information about any groups assigned to receive an event  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information  *  `projectRole` Returns information about any project roles assigned to receive an event  *  `user` Returns information about any users assigned to receive an event", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"projects\" : [ 7, 7 ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : 5, \"notificationSchemeEvents\" : [ { \"event\" : { \"templateEvent\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, \"notifications\" : [ { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" }, { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" } ] }, { \"event\" : { \"templateEvent\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, \"notifications\" : [ { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" }, { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectKeyOrId}/notificationscheme : Get project notification scheme
     * Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project. Deprecated, use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) supporting search and pagination.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     *
     * @param projectKeyOrId The project ID or project key (case sensitive). (required)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information  *  &#x60;field&#x60; Returns information about any custom fields assigned to receive an event  *  &#x60;group&#x60; Returns information about any groups assigned to receive an event  *  &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information  *  &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event  *  &#x60;user&#x60; Returns information about any users assigned to receive an event (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user is not an administrator. (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "getNotificationSchemeForProject",
        summary = "Get project notification scheme",
        description = "Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project. Deprecated, use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) supporting search and pagination.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).",
        deprecated = true,
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificationScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user is not an administrator.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectKeyOrId}/notificationscheme",
        produces = { "application/json" }
    )
    
    default ResponseEntity<NotificationScheme> getNotificationSchemeForProject(
        @Parameter(name = "projectKeyOrId", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectKeyOrId") String projectKeyOrId,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information  *  `field` Returns information about any custom fields assigned to receive an event  *  `group` Returns information about any groups assigned to receive an event  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information  *  `projectRole` Returns information about any project roles assigned to receive an event  *  `user` Returns information about any users assigned to receive an event", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"projects\" : [ 7, 7 ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : 5, \"notificationSchemeEvents\" : [ { \"event\" : { \"templateEvent\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, \"notifications\" : [ { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" }, { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" } ] }, { \"event\" : { \"templateEvent\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, \"notifications\" : [ { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" }, { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/notificationscheme/project : Get projects using notification schemes paginated
     * Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don&#39;t provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don&#39;t have a concept of a default notification scheme. The mappings are ordered by projectId.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param notificationSchemeId The list of notifications scheme IDs to be filtered out (optional)
     * @param projectId The list of project IDs to be filtered out (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if search criteria are invalid, strings vs numbers for projectId, notificationSchemeId, startAt and maxResult (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getNotificationSchemeToProjectMappings",
        summary = "Get projects using notification schemes paginated",
        description = "Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Issue notification schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanNotificationSchemeAndProjectMappingJsonBean.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if search criteria are invalid, strings vs numbers for projectId, notificationSchemeId, startAt and maxResult", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/notificationscheme/project",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanNotificationSchemeAndProjectMappingJsonBean> getNotificationSchemeToProjectMappings(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") String startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") String maxResults,
        @Parameter(name = "notificationSchemeId", description = "The list of notifications scheme IDs to be filtered out", in = ParameterIn.QUERY) @Valid @RequestParam(value = "notificationSchemeId", required = false) Set<String> notificationSchemeId,
        @Parameter(name = "projectId", description = "The list of project IDs to be filtered out", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Set<String> projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"notificationSchemeId\" : \"notificationSchemeId\", \"projectId\" : \"projectId\" }, { \"notificationSchemeId\" : \"notificationSchemeId\", \"projectId\" : \"projectId\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/notificationscheme : Get notification schemes paginated
     * Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.  *Note that you should allow for events without recipients to appear in responses.*  **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id The list of notification schemes IDs to be filtered by (optional)
     * @param projectId The list of projects IDs to be filtered by (optional)
     * @param onlyDefault When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false. (optional, default to false)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information  *  &#x60;field&#x60; Returns information about any custom fields assigned to receive an event  *  &#x60;group&#x60; Returns information about any groups assigned to receive an event  *  &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information  *  &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event  *  &#x60;user&#x60; Returns information about any users assigned to receive an event (optional)
     * @return Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes. (status code 200)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getNotificationSchemes",
        summary = "Get notification schemes paginated",
        description = "Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.  *Note that you should allow for events without recipients to appear in responses.*  **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.",
        tags = { "Issue notification schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanNotificationScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/notificationscheme",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanNotificationScheme> getNotificationSchemes(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") String startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") String maxResults,
        @Parameter(name = "id", description = "The list of notification schemes IDs to be filtered by", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<String> id,
        @Parameter(name = "projectId", description = "The list of projects IDs to be filtered by", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Set<String> projectId,
        @Parameter(name = "onlyDefault", description = "When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "onlyDefault", required = false, defaultValue = "false") Boolean onlyDefault,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information  *  `field` Returns information about any custom fields assigned to receive an event  *  `group` Returns information about any groups assigned to receive an event  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information  *  `projectRole` Returns information about any project roles assigned to receive an event  *  `user` Returns information about any users assigned to receive an event", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"expand\" : \"expand\", \"projects\" : [ 7, 7 ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : 5, \"notificationSchemeEvents\" : [ { \"event\" : { \"templateEvent\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, \"notifications\" : [ { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" }, { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" } ] }, { \"event\" : { \"templateEvent\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, \"notifications\" : [ { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" }, { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" } ] } ] }, { \"expand\" : \"expand\", \"projects\" : [ 7, 7 ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : 5, \"notificationSchemeEvents\" : [ { \"event\" : { \"templateEvent\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, \"notifications\" : [ { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" }, { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" } ] }, { \"event\" : { \"templateEvent\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, \"notifications\" : [ { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" }, { \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"field\" : \"\", \"projectRole\" : \"\", \"parameter\" : \"parameter\", \"recipient\" : \"recipient\", \"id\" : 2, \"notificationType\" : \"CurrentAssignee\", \"user\" : \"\", \"group\" : \"\" } ] } ] } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldId}/context/{contextId}/option : Get custom field options (context)
     * Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param optionId The ID of the option. (optional)
     * @param onlyOptions Whether only options are returned. (optional, default to false)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 100)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the custom field is not found or the context doesn&#39;t match the custom field. (status code 404)
     */
    @Operation(
        operationId = "getOptionsForContext",
        summary = "Get custom field options (context)",
        description = "Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field options" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanCustomFieldContextOption.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field is not found or the context doesn't match the custom field.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}/option",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanCustomFieldContextOption> getOptionsForContext(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId,
        @Parameter(name = "optionId", description = "The ID of the option.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "optionId", required = false) Long optionId,
        @Parameter(name = "onlyOptions", description = "Whether only options are returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "onlyOptions", required = false, defaultValue = "false") Boolean onlyOptions,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "100") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"disabled\" : true, \"optionId\" : \"optionId\", \"id\" : \"id\", \"value\" : \"value\" }, { \"disabled\" : true, \"optionId\" : \"optionId\", \"id\" : \"id\", \"value\" : \"value\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/permissionscheme/{schemeId} : Get permission scheme
     * Returns a permission scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param schemeId The ID of the permission scheme to return. (required)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the permission scheme is not found or the user does not have the necessary permission. (status code 404)
     */
    @Operation(
        operationId = "getPermissionScheme",
        summary = "Get permission scheme",
        description = "Returns a permission scheme.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Permission schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the permission scheme is not found or the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/permissionscheme/{schemeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PermissionScheme> getPermissionScheme(
        @Parameter(name = "schemeId", description = "The ID of the permission scheme to return.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") Long schemeId,
        @Parameter(name = "expand", description = "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"permissions\" : [ { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 }, { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 } ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/permissionscheme/{schemeId}/permission/{permissionId} : Get permission scheme grant
     * Returns a permission grant.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param schemeId The ID of the permission scheme. (required)
     * @param permissionId The ID of the permission grant. (required)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission. (status code 404)
     */
    @Operation(
        operationId = "getPermissionSchemeGrant",
        summary = "Get permission scheme grant",
        description = "Returns a permission grant.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Permission schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionGrant.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PermissionGrant> getPermissionSchemeGrant(
        @Parameter(name = "schemeId", description = "The ID of the permission scheme.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") Long schemeId,
        @Parameter(name = "permissionId", description = "The ID of the permission grant.", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") Long permissionId,
        @Parameter(name = "expand", description = "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/permissionscheme/{schemeId}/permission : Get permission scheme grants
     * Returns all permission grants for a permission scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param schemeId The ID of the permission scheme. (required)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;all&#x60; Returns all expandable information. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the permission schemes is not found or the user does not have the necessary permission. (status code 404)
     */
    @Operation(
        operationId = "getPermissionSchemeGrants",
        summary = "Get permission scheme grants",
        description = "Returns all permission grants for a permission scheme.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Permission schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionGrants.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the permission schemes is not found or the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/permissionscheme/{schemeId}/permission",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PermissionGrants> getPermissionSchemeGrants(
        @Parameter(name = "schemeId", description = "The ID of the permission scheme.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") Long schemeId,
        @Parameter(name = "expand", description = "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `permissions` Returns all permission grants for each permission scheme.  *  `user` Returns information about the user who is granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `projectRole` Returns information about the project role granted the permission.  *  `field` Returns information about the custom field granted the permission.  *  `all` Returns all expandable information.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"permissions\" : [ { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 }, { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/permissions/project : Get permitted projects
     * Returns all the projects where the user is granted a list of project permissions.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param permissionsKeysBean  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if a project permission is not found. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getPermittedProjects",
        summary = "Get permitted projects",
        description = "Returns all the projects where the user is granted a list of project permissions.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermittedProjects.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if a project permission is not found."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/permissions/project",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PermittedProjects> getPermittedProjects(
        @Parameter(name = "PermissionsKeysBean", description = "", required = true) @Valid @RequestBody PermissionsKeysBean permissionsKeysBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"projects\" : [ { \"id\" : 0, \"key\" : \"key\" }, { \"id\" : 0, \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/jql/function/computation : Get precomputations (apps)
     * Returns the list of a function&#39;s precomputations along with information about when they were created, updated, and last used. Each precomputation has a &#x60;value&#x60; \\- the JQL fragment to replace the custom function clause with.  **[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.
     *
     * @param functionKey The function key in format:   *  Forge: &#x60;ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]&#x60;.  *  Connect: &#x60;[App key]__[Module key]&#x60;. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 100)
     * @param orderBy Not supported yet. (optional)
     * @param filter Not supported yet. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the request is not authenticated as the app that provided the function. (status code 403)
     *         or Returned if the function is not found. (status code 404)
     */
    @Operation(
        operationId = "getPrecomputations",
        summary = "Get precomputations (apps)",
        description = "Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \\- the JQL fragment to replace the custom function clause with.  **[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.",
        tags = { "JQL functions (apps)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanJqlFunctionPrecomputationBean.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not authenticated as the app that provided the function."),
            @ApiResponse(responseCode = "404", description = "Returned if the function is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/jql/function/computation",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanJqlFunctionPrecomputationBean> getPrecomputations(
        @Parameter(name = "functionKey", description = "The function key in format:   *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`.  *  Connect: `[App key]__[Module key]`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "functionKey", required = false) List<String> functionKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "100") Integer maxResults,
        @Parameter(name = "orderBy", description = "Not supported yet.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) String orderBy,
        @Parameter(name = "filter", description = "Not supported yet.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"field\" : \"field\", \"functionName\" : \"functionName\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"arguments\" : [ \"arguments\", \"arguments\" ], \"id\" : \"id\", \"used\" : \"2000-01-23T04:56:07.000+00:00\", \"functionKey\" : \"functionKey\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"value\" : \"value\", \"operator\" : \"operator\" }, { \"field\" : \"field\", \"functionName\" : \"functionName\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"arguments\" : [ \"arguments\", \"arguments\" ], \"id\" : \"id\", \"used\" : \"2000-01-23T04:56:07.000+00:00\", \"functionKey\" : \"functionKey\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"value\" : \"value\", \"operator\" : \"operator\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/mypreferences : Get preference
     * Returns the value of a preference of the current user.  Note that these keys are deprecated:   *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.  *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.  Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param key The key of the preference. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the key is not provided or not found. (status code 404)
     */
    @Operation(
        operationId = "getPreference",
        summary = "Get preference",
        description = "Returns the value of a preference of the current user.  Note that these keys are deprecated:   *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.  *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.  Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Myself" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the key is not provided or not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/mypreferences",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> getPreference(
        @NotNull @Parameter(name = "key", description = "The key of the preference.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = true) String key
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/priority : Get priorities
     * Returns the list of all issue priorities.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "getPriorities",
        summary = "Get priorities",
        description = "Returns the list of all issue priorities.  **[Permissions](#permissions) required:** Permission to access Jira.",
        deprecated = true,
        tags = { "Issue priorities" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Priority.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/priority",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Priority>> getPriorities(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"isDefault\" : true, \"statusColor\" : \"statusColor\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" }, { \"isDefault\" : true, \"statusColor\" : \"statusColor\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/priority/{id} : Get priority
     * Returns an issue priority.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param id The ID of the issue priority. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the issue priority isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "getPriority",
        summary = "Get priority",
        description = "Returns an issue priority.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Issue priorities" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Priority.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue priority isn't found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/priority/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Priority> getPriority(
        @Parameter(name = "id", description = "The ID of the issue priority.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isDefault\" : true, \"statusColor\" : \"statusColor\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey} : Get project
     * Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:   *  &#x60;description&#x60; The project description.  *  &#x60;issueTypes&#x60; The issue types associated with the project.  *  &#x60;lead&#x60; The project lead.  *  &#x60;projectKeys&#x60; All project keys associated with the project.  *  &#x60;issueTypeHierarchy&#x60; The project issue type hierarchy. (optional)
     * @param properties A list of project properties to return for the project. This parameter accepts a comma-separated list. (optional)
     * @return Returned if successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getProject",
        summary = "Get project",
        description = "Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Project> getProject(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:   *  `description` The project description.  *  `issueTypes` The issue types associated with the project.  *  `lead` The project lead.  *  `projectKeys` All project keys associated with the project.  *  `issueTypeHierarchy` The project issue type hierarchy.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "properties", description = "A list of project properties to return for the project. This parameter accepts a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "properties", required = false) List<String> properties
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"components\" : [ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ], \"roles\" : { \"key\" : \"https://openapi-generator.tech\" }, \"description\" : \"description\", \"isPrivate\" : true, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ], \"archived\" : true, \"assigneeType\" : \"PROJECT_LEAD\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"email\" : \"email\", \"key\" : \"key\", \"archivedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"retentionTillDate\" : \"2000-01-23T04:56:07.000+00:00\", \"favourite\" : true, \"url\" : \"url\", \"expand\" : \"expand\", \"deleted\" : true, \"simplified\" : true, \"deletedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"versions\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"style\" : \"classic\", \"properties\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/projectCategory/{id} : Get project category by ID
     * Returns a project category.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param id The ID of the project category. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project category is not found. (status code 404)
     */
    @Operation(
        operationId = "getProjectCategoryById",
        summary = "Get project category by ID",
        description = "Returns a project category.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Project categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectCategory.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project category is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/projectCategory/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectCategory> getProjectCategoryById(
        @Parameter(name = "id", description = "The ID of the project category.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/components : Get project components
     * Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getProjectComponents",
        summary = "Get project components",
        description = "Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Project components" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectComponent.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/components",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectComponent>> getProjectComponents(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/component : Get project components paginated
     * Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;description&#x60; Sorts by the component description.  *  &#x60;issueCount&#x60; Sorts by the count of issues associated with the component.  *  &#x60;lead&#x60; Sorts by the user key of the component&#39;s project lead.  *  &#x60;name&#x60; Sorts by component name. (optional)
     * @param query Filter the results using a literal string. Components with a matching &#x60;name&#x60; or &#x60;description&#x60; are returned (case insensitive). (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getProjectComponentsPaginated",
        summary = "Get project components paginated",
        description = "Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Project components" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanComponentWithIssueCount.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/component",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanComponentWithIssueCount> getProjectComponentsPaginated(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `description` Sorts by the component description.  *  `issueCount` Sorts by the count of issues associated with the component.  *  `lead` Sorts by the user key of the component's project lead.  *  `name` Sorts by component name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) String orderBy,
        @Parameter(name = "query", description = "Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"description\" : \"description\", \"project\" : \"project\", \"issueCount\" : 5, \"lead\" : \"\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"realAssignee\" : \"\", \"assignee\" : \"\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 5 }, { \"description\" : \"description\", \"project\" : \"project\", \"issueCount\" : 5, \"lead\" : \"\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"realAssignee\" : \"\", \"assignee\" : \"\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 5 } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldId}/context/projectmapping : Get project mappings for custom field context
     * Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by &#x60;contextId&#x60;. Otherwise, all mappings are returned. Invalid IDs are ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field, for example &#x60;customfield\\_10000&#x60;. (required)
     * @param contextId The list of context IDs. To include multiple context, separate IDs with ampersand: &#x60;contextId&#x3D;10000&amp;contextId&#x3D;10001&#x60;. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field is not found. (status code 404)
     */
    @Operation(
        operationId = "getProjectContextMapping",
        summary = "Get project mappings for custom field context",
        description = "Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanCustomFieldContextProjectMapping.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldId}/context/projectmapping",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanCustomFieldContextProjectMapping> getProjectContextMapping(
        @Parameter(name = "fieldId", description = "The ID of the custom field, for example `customfield\\_10000`.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "contextId", required = false) Set<Long> contextId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"contextId\" : \"contextId\", \"projectId\" : \"projectId\", \"isGlobalContext\" : true }, { \"contextId\" : \"contextId\", \"projectId\" : \"projectId\", \"isGlobalContext\" : true } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectId}/email : Get project&#39;s sender email
     * Returns the [project&#39;s sender email address](https://confluence.atlassian.com/x/dolKLg).  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectId The project ID. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to read project. (status code 403)
     *         or Returned if the project or project&#39;s sender email address is not found. (status code 404)
     */
    @Operation(
        operationId = "getProjectEmail",
        summary = "Get project's sender email",
        description = "Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Project email" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectEmailAddress.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to read project."),
            @ApiResponse(responseCode = "404", description = "Returned if the project or project's sender email address is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectId}/email",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectEmailAddress> getProjectEmail(
        @Parameter(name = "projectId", description = "The project ID.", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emailAddress\" : \"emailAddress\", \"emailAddressStatus\" : [ \"emailAddressStatus\", \"emailAddressStatus\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme : Get project issue security scheme
     * Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     *
     * @param projectKeyOrId The project ID or project key (case sensitive). (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is visible to the user but the user doesn&#39;t have administrative permissions. (status code 403)
     *         or Returned if the project is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getProjectIssueSecurityScheme",
        summary = "Get project issue security scheme",
        description = "Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).",
        tags = { "Project permission schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SecurityScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the project is visible to the user but the user doesn't have administrative permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SecurityScheme> getProjectIssueSecurityScheme(
        @Parameter(name = "projectKeyOrId", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectKeyOrId") String projectKeyOrId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"defaultSecurityLevelId\" : 0, \"description\" : \"description\", \"self\" : \"self\", \"id\" : 6, \"levels\" : [ { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" }, { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/properties/{propertyKey} : Get project property
     * Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param propertyKey The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the user does not have permission to view the project. (status code 403)
     *         or Returned if the project or property is not found. (status code 404)
     */
    @Operation(
        operationId = "getProjectProperty",
        summary = "Get project property",
        description = "Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.",
        tags = { "Project properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EntityProperty.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to view the project."),
            @ApiResponse(responseCode = "404", description = "Returned if the project or property is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EntityProperty> getProjectProperty(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "propertyKey", description = "The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"value\" : \"\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/properties : Get project property keys
     * Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the user does not have permission to view the project. (status code 403)
     *         or Returned if the project is not found. (status code 404)
     */
    @Operation(
        operationId = "getProjectPropertyKeys",
        summary = "Get project property keys",
        description = "Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Project properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyKeys.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to view the project."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/properties",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PropertyKeys> getProjectPropertyKeys(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keys\" : [ { \"self\" : \"self\", \"key\" : \"key\" }, { \"self\" : \"self\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/role/{id} : Get project role for project
     * Returns a project role&#39;s details and actors associated with the project. The list of actors is sorted by display name.  To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the &#x60;groups&#x60; expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param excludeInactiveUsers Exclude inactive users. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the project or project role is not found.  *  the user does not have administrative permission. (status code 404)
     */
    @Operation(
        operationId = "getProjectRole",
        summary = "Get project role for project",
        description = "Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.  To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectRole.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the project or project role is not found.  *  the user does not have administrative permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/role/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectRole> getProjectRole(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "id", description = "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "excludeInactiveUsers", description = "Exclude inactive users.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeInactiveUsers", required = false, defaultValue = "false") Boolean excludeInactiveUsers
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/role/{id}/actors : Get default actors for project role
     * Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have administrative permissions. (status code 403)
     *         or Returned if the project role is not found. (status code 404)
     */
    @Operation(
        operationId = "getProjectRoleActorsForRole",
        summary = "Get default actors for project role",
        description = "Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project role actors" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectRole.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have administrative permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project role is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/role/{id}/actors",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectRole> getProjectRoleActorsForRole(
        @Parameter(name = "id", description = "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/role/{id} : Get project role by ID
     * Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have administrative permissions. (status code 403)
     *         or Returned if the project role is not found. (status code 404)
     */
    @Operation(
        operationId = "getProjectRoleById",
        summary = "Get project role by ID",
        description = "Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectRole.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have administrative permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project role is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/role/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectRole> getProjectRoleById(
        @Parameter(name = "id", description = "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/roledetails : Get project role details
     * Returns all [project roles](https://confluence.atlassian.com/x/3odKLg) and the details for each role. Note that the list of project roles is common to all projects.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param currentMember Whether the roles should be filtered to include only those the user is assigned to. (optional, default to false)
     * @param excludeConnectAddons  (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or if the user does not have the necessary permissions for the project. (status code 404)
     */
    @Operation(
        operationId = "getProjectRoleDetails",
        summary = "Get project role details",
        description = "Returns all [project roles](https://confluence.atlassian.com/x/3odKLg) and the details for each role. Note that the list of project roles is common to all projects.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Project roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectRoleDetails.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or if the user does not have the necessary permissions for the project.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/roledetails",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectRoleDetails>> getProjectRoleDetails(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "currentMember", description = "Whether the roles should be filtered to include only those the user is assigned to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "currentMember", required = false, defaultValue = "false") Boolean currentMember,
        @Parameter(name = "excludeConnectAddons", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeConnectAddons", required = false, defaultValue = "false") Boolean excludeConnectAddons
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"default\" : true, \"roleConfigurable\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0, \"translatedName\" : \"translatedName\" }, { \"default\" : true, \"roleConfigurable\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0, \"translatedName\" : \"translatedName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/role : Get project roles for project
     * Returns a list of [project roles](https://confluence.atlassian.com/x/3odKLg) for the project returning the name and self URL for each role.  Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project. (status code 401)
     *         or Returned if the project is not found or or if the user does not have administrative permissions for the project. (status code 404)
     */
    @Operation(
        operationId = "getProjectRoles",
        summary = "Get project roles for project",
        description = "Returns a list of [project roles](https://confluence.atlassian.com/x/3odKLg) for the project returning the name and self URL for each role.  Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = URI.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or or if the user does not have administrative permissions for the project.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/role",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Map<String, URI>> getProjectRoles(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/type/{projectTypeKey} : Get project type by key
     * Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param projectTypeKey The key of the project type. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the project type is not found. (status code 404)
     */
    @Operation(
        operationId = "getProjectTypeByKey",
        summary = "Get project type by key",
        description = "Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Project types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectType.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if the project type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/type/{projectTypeKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectType> getProjectTypeByKey(
        @Parameter(name = "projectTypeKey", description = "The key of the project type.", required = true, in = ParameterIn.PATH) @PathVariable("projectTypeKey") String projectTypeKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"descriptionI18nKey\" : \"descriptionI18nKey\", \"color\" : \"color\", \"icon\" : \"icon\", \"formattedKey\" : \"formattedKey\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/versions : Get project versions
     * Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts &#x60;operations&#x60;, which returns actions that can be performed on the version. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the project is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getProjectVersions",
        summary = "Get project versions",
        description = "Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Version.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/versions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Version>> getProjectVersions(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectIdOrKey}/version : Get project versions paginated
     * Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;description&#x60; Sorts by version description.  *  &#x60;name&#x60; Sorts by version name.  *  &#x60;releaseDate&#x60; Sorts by release date, starting with the oldest date. Versions with no release date are listed last.  *  &#x60;sequence&#x60; Sorts by the order of appearance in the user interface.  *  &#x60;startDate&#x60; Sorts by start date, starting with the oldest date. Versions with no start date are listed last. (optional)
     * @param query Filter the results using a literal string. Versions with matching &#x60;name&#x60; or &#x60;description&#x60; are returned (case insensitive). (optional)
     * @param status A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are &#x60;released&#x60;, &#x60;unreleased&#x60;, and &#x60;archived&#x60;. (optional)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;issuesstatus&#x60; Returns the number of issues in each status category for each version.  *  &#x60;operations&#x60; Returns actions that can be performed on the specified version. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the project is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getProjectVersionsPaginated",
        summary = "Get project versions paginated",
        description = "Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanVersion.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectIdOrKey}/version",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanVersion> getProjectVersionsPaginated(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `description` Sorts by version description.  *  `name` Sorts by version name.  *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.  *  `sequence` Sorts by the order of appearance in the user interface.  *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) String orderBy,
        @Parameter(name = "query", description = "Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "status", description = "A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) String status,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `issuesstatus` Returns the number of issues in each status category for each version.  *  `operations` Returns actions that can be performed on the specified version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project : Get issue type screen scheme projects
     * Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.  Only company-managed projects associated with an issue type screen scheme are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param query  (optional, default to )
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     */
    @Operation(
        operationId = "getProjectsForIssueTypeScreenScheme",
        summary = "Get issue type screen scheme projects",
        description = "Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.  Only company-managed projects associated with an issue type screen scheme are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanProjectDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanProjectDetails> getProjectsForIssueTypeScreenScheme(
        @Parameter(name = "issueTypeScreenSchemeId", description = "The ID of the issue type screen scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeScreenSchemeId") Long issueTypeScreenSchemeId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "query", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false, defaultValue = "") String query
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"simplified\" : true, \"name\" : \"name\", \"self\" : \"self\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"key\" : \"key\" }, { \"simplified\" : true, \"name\" : \"name\", \"self\" : \"self\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"key\" : \"key\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/recent : Get recent projects
     * Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Projects are returned only where the user has one of:   *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  &#x60;description&#x60; Returns the project description.  *  &#x60;projectKeys&#x60; Returns all project keys associated with a project.  *  &#x60;lead&#x60; Returns information about the project lead.  *  &#x60;issueTypes&#x60; Returns all issue types associated with the project.  *  &#x60;url&#x60; Returns the URL associated with the project.  *  &#x60;permissions&#x60; Returns the permissions associated with the project.  *  &#x60;insight&#x60; EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.  *  &#x60;*&#x60; Returns the project with all available expand options. (optional)
     * @param properties EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getRecent",
        summary = "Get recent projects",
        description = "Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Projects are returned only where the user has one of:   *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Project.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/recent",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Project>> getRecent(
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  `description` Returns the project description.  *  `projectKeys` Returns all project keys associated with a project.  *  `lead` Returns information about the project lead.  *  `issueTypes` Returns all issue types associated with the project.  *  `url` Returns the URL associated with the project.  *  `permissions` Returns the permissions associated with the project.  *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.  *  `*` Returns the project with all available expand options.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "properties", description = "EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "properties", required = false) List<@Valid Object> properties
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"components\" : [ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ], \"roles\" : { \"key\" : \"https://openapi-generator.tech\" }, \"description\" : \"description\", \"isPrivate\" : true, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ], \"archived\" : true, \"assigneeType\" : \"PROJECT_LEAD\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"email\" : \"email\", \"key\" : \"key\", \"archivedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"retentionTillDate\" : \"2000-01-23T04:56:07.000+00:00\", \"favourite\" : true, \"url\" : \"url\", \"expand\" : \"expand\", \"deleted\" : true, \"simplified\" : true, \"deletedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"versions\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"style\" : \"classic\", \"properties\" : { \"key\" : \"\" } }, { \"components\" : [ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ], \"roles\" : { \"key\" : \"https://openapi-generator.tech\" }, \"description\" : \"description\", \"isPrivate\" : true, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ], \"archived\" : true, \"assigneeType\" : \"PROJECT_LEAD\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"email\" : \"email\", \"key\" : \"key\", \"archivedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"retentionTillDate\" : \"2000-01-23T04:56:07.000+00:00\", \"favourite\" : true, \"url\" : \"url\", \"expand\" : \"expand\", \"deleted\" : true, \"simplified\" : true, \"deletedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"versions\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"style\" : \"classic\", \"properties\" : { \"key\" : \"\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId} : Get remote issue link by ID
     * Returns a remote issue link for an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param linkId The ID of the remote issue link. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the link ID is invalid or the remote issue link does not belong to the issue. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if issue linking is disabled. (status code 403)
     *         or Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. (status code 404)
     */
    @Operation(
        operationId = "getRemoteIssueLinkById",
        summary = "Get remote issue link by ID",
        description = "Returns a remote issue link for an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue remote links" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RemoteIssueLink.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the link ID is invalid or the remote issue link does not belong to the issue."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if issue linking is disabled."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RemoteIssueLink> getRemoteIssueLinkById(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "linkId", description = "The ID of the remote issue link.", required = true, in = ParameterIn.PATH) @PathVariable("linkId") String linkId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"application\" : \"\", \"globalId\" : \"globalId\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0, \"relationship\" : \"relationship\", \"object\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/remotelink : Get remote issue links
     * Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass &#x60;system&#x3D;http://www.mycompany.com/support&amp;id&#x3D;1&#x60; as &#x60;system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1&#x60;.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param globalId The global ID of the remote issue link. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if issue linking is disabled. (status code 403)
     *         or Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. (status code 404)
     */
    @Operation(
        operationId = "getRemoteIssueLinks",
        summary = "Get remote issue links",
        description = "Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue remote links" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RemoteIssueLink.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if issue linking is disabled."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/remotelink",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RemoteIssueLink> getRemoteIssueLinks(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "globalId", description = "The global ID of the remote issue link.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "globalId", required = false) String globalId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"application\" : \"\", \"globalId\" : \"globalId\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0, \"relationship\" : \"relationship\", \"object\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/resolution/{id} : Get resolution
     * Returns an issue resolution value.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param id The ID of the issue resolution value. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue resolution value is not found. (status code 404)
     */
    @Operation(
        operationId = "getResolution",
        summary = "Get resolution",
        description = "Returns an issue resolution value.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Issue resolutions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Resolution.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue resolution value is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/resolution/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Resolution> getResolution(
        @Parameter(name = "id", description = "The ID of the issue resolution value.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/resolution : Get resolutions
     * Returns a list of all issue resolution values.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "getResolutions",
        summary = "Get resolutions",
        description = "Returns a list of all issue resolution values.  **[Permissions](#permissions) required:** Permission to access Jira.",
        deprecated = true,
        tags = { "Issue resolutions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Resolution.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/resolution",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Resolution>> getResolutions(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\" }, { \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/screenscheme : Get screen schemes
     * Returns a [paginated](#pagination) list of screen schemes.  Only screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 25)
     * @param id The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
     * @param expand Use [expand](#expansion) include additional information in the response. This parameter accepts &#x60;issueTypeScreenSchemes&#x60; that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to. (optional, default to )
     * @param queryString String used to perform a case-insensitive partial match with screen scheme name. (optional, default to )
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;id&#x60; Sorts by screen scheme ID.  *  &#x60;name&#x60; Sorts by screen scheme name. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getScreenSchemes",
        summary = "Get screen schemes",
        description = "Returns a [paginated](#pagination) list of screen schemes.  Only screen schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanScreenScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/screenscheme",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanScreenScheme> getScreenSchemes(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "25") Integer maxResults,
        @Parameter(name = "id", description = "The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<Long> id,
        @Parameter(name = "expand", description = "Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false, defaultValue = "") String expand,
        @Parameter(name = "queryString", description = "String used to perform a case-insensitive partial match with screen scheme name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queryString", required = false, defaultValue = "") String queryString,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `id` Sorts by screen scheme ID.  *  `name` Sorts by screen scheme name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) String orderBy
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"issueTypeScreenSchemes\" : \"\", \"screens\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, { \"issueTypeScreenSchemes\" : \"\", \"screens\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/screens : Get screens
     * Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 100)
     * @param id The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
     * @param queryString String used to perform a case-insensitive partial match with screen name. (optional, default to )
     * @param scope The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, &#x60;scope&#x3D;GLOBAL&amp;scope&#x3D;PROJECT&#x60;. (optional)
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;id&#x60; Sorts by screen ID.  *  &#x60;name&#x60; Sorts by screen name. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getScreens",
        summary = "Get screens",
        description = "Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screens" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanScreen.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/screens",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanScreen> getScreens(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "100") Integer maxResults,
        @Parameter(name = "id", description = "The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<Long> id,
        @Parameter(name = "queryString", description = "String used to perform a case-insensitive partial match with screen name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queryString", required = false, defaultValue = "") String queryString,
        @Parameter(name = "scope", description = "The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "scope", required = false) Set<String> scope,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `id` Sorts by screen ID.  *  `name` Sorts by screen name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) String orderBy
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, { \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldId}/screens : Get screens for a field
     * Returns a [paginated](#pagination) list of the screens a field is used in.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the field to return screens for. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 100)
     * @param expand Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts &#x60;tab&#x60; which returns details about the screen tabs the field is used in. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getScreensForField",
        summary = "Get screens for a field",
        description = "Returns a [paginated](#pagination) list of the screens a field is used in.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screens" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanScreenWithTab.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldId}/screens",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanScreenWithTab> getScreensForField(
        @Parameter(name = "fieldId", description = "The ID of the field to return screens for.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "100") Integer maxResults,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"tab\" : \"\", \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }, { \"tab\" : \"\", \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuesecurityschemes/level/member : Get issue security level members
     * Returns a [paginated](#pagination) list of issue security level members.  Only issue security level members in the context of classic projects are returned.  Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
     * @param schemeId The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: &#x60;schemeId&#x3D;10000&amp;schemeId&#x3D;10001&#x60;. (optional)
     * @param levelId The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: &#x60;levelId&#x3D;10000&amp;levelId&#x3D;10001&#x60;. (optional)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information  *  &#x60;field&#x60; Returns information about the custom field granted the permission  *  &#x60;group&#x60; Returns information about the group that is granted the permission  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission  *  &#x60;user&#x60; Returns information about the user who is granted the permission (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getSecurityLevelMembers",
        summary = "Get issue security level members",
        description = "Returns a [paginated](#pagination) list of issue security level members.  Only issue security level members in the context of classic projects are returned.  Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanSecurityLevelMember.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuesecurityschemes/level/member",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanSecurityLevelMember> getSecurityLevelMembers(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") String startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") String maxResults,
        @Parameter(name = "id", description = "The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<String> id,
        @Parameter(name = "schemeId", description = "The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "schemeId", required = false) Set<String> schemeId,
        @Parameter(name = "levelId", description = "The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "levelId", required = false) Set<String> levelId,
        @Parameter(name = "expand", description = "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information  *  `field` Returns information about the custom field granted the permission  *  `group` Returns information about the group that is granted the permission  *  `projectRole` Returns information about the project role granted the permission  *  `user` Returns information about the user who is granted the permission", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"id\" : \"id\", \"issueSecurityLevelId\" : \"issueSecurityLevelId\" }, { \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"id\" : \"id\", \"issueSecurityLevelId\" : \"issueSecurityLevelId\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuesecurityschemes/level : Get issue security levels
     * Returns a [paginated](#pagination) list of issue security levels.  Only issue security levels in the context of classic projects are returned.  Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
     * @param schemeId The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: &#x60;schemeId&#x3D;10000&amp;schemeId&#x3D;10001&#x60;. (optional)
     * @param onlyDefault When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getSecurityLevels",
        summary = "Get issue security levels",
        description = "Returns a [paginated](#pagination) list of issue security levels.  Only issue security levels in the context of classic projects are returned.  Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanSecurityLevel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuesecurityschemes/level",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanSecurityLevel> getSecurityLevels(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") String startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") String maxResults,
        @Parameter(name = "id", description = "The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<String> id,
        @Parameter(name = "schemeId", description = "The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "schemeId", required = false) Set<String> schemeId,
        @Parameter(name = "onlyDefault", description = "When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "onlyDefault", required = false, defaultValue = "false") Boolean onlyDefault
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" }, { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/{projectKeyOrId}/securitylevel : Get project issue security levels
     * Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.
     *
     * @param projectKeyOrId The project ID or project key (case sensitive). (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the project is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getSecurityLevelsForProject",
        summary = "Get project issue security levels",
        description = "Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.",
        tags = { "Project permission schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectIssueSecurityLevels.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/{projectKeyOrId}/securitylevel",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectIssueSecurityLevels> getSecurityLevelsForProject(
        @Parameter(name = "projectKeyOrId", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectKeyOrId") String projectKeyOrId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"levels\" : [ { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" }, { \"isDefault\" : true, \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldKey}/option/suggestions/edit : Get selectable issue field options
     * Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param projectId Filters the results to options that are only available in the specified project. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the field is not found or does not support options. (status code 404)
     */
    @Operation(
        operationId = "getSelectableIssueFieldOptions",
        summary = "Get selectable issue field options",
        description = "Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Issue custom field options (apps)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueFieldOption.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the field is not found or does not support options.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldKey}/option/suggestions/edit",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueFieldOption> getSelectableIssueFieldOptions(
        @Parameter(name = "fieldKey", description = "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`", required = true, in = ParameterIn.PATH) @PathVariable("fieldKey") String fieldKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "projectId", description = "Filters the results to options that are only available in the specified project.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Long projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"id\" : 5, \"config\" : { \"scope\" : \"\", \"attributes\" : [ \"notSelectable\", \"notSelectable\" ] }, \"value\" : \"value\", \"properties\" : { \"key\" : \"\" } }, { \"id\" : 5, \"config\" : { \"scope\" : \"\", \"attributes\" : [ \"notSelectable\", \"notSelectable\" ] }, \"value\" : \"value\", \"properties\" : { \"key\" : \"\" } } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/configuration/timetracking : Get selected time tracking provider
     * Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful and time tracking is enabled. (status code 200)
     *         or Returned if the request is successful but time tracking is disabled. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getSelectedTimeTrackingImplementation",
        summary = "Get selected time tracking provider",
        description = "Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Time tracking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful and time tracking is enabled.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TimeTrackingProvider.class))
            }),
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful but time tracking is disabled.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/configuration/timetracking",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TimeTrackingProvider> getSelectedTimeTrackingImplementation(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"key\" : \"key\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/serverInfo : Get Jira instance info
     * Returns information about the Jira instance.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     */
    @Operation(
        operationId = "getServerInfo",
        summary = "Get Jira instance info",
        description = "Returns information about the Jira instance.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Server info" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServerInformation.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/serverInfo",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ServerInformation> getServerInfo(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"healthChecks\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"passed\" : true }, { \"name\" : \"name\", \"description\" : \"description\", \"passed\" : true } ], \"baseUrl\" : \"baseUrl\", \"deploymentType\" : \"deploymentType\", \"scmInfo\" : \"scmInfo\", \"serverTime\" : \"2000-01-23T04:56:07.000+00:00\", \"buildDate\" : \"2000-01-23T04:56:07.000+00:00\", \"serverTitle\" : \"serverTitle\", \"buildNumber\" : 0, \"version\" : \"version\", \"versionNumbers\" : [ 6, 6 ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/filter/{id}/permission/{permissionId} : Get share permission
     * Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, a share permission is only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @param id The ID of the filter. (required)
     * @param permissionId The ID of the share permission. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the filter is not found.  *  the permission is not found.  *  the user does not have permission to view the filter. (status code 404)
     */
    @Operation(
        operationId = "getSharePermission",
        summary = "Get share permission",
        description = "Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, a share permission is only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.",
        tags = { "Filter sharing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SharePermission.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the filter is not found.  *  the permission is not found.  *  the user does not have permission to view the filter.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/filter/{id}/permission/{permissionId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SharePermission> getSharePermission(
        @Parameter(name = "id", description = "The ID of the filter.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "permissionId", description = "The ID of the share permission.", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") Long permissionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/filter/{id}/permission : Get share permissions
     * Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, share permissions are only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @param id The ID of the filter. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. (status code 404)
     */
    @Operation(
        operationId = "getSharePermissions",
        summary = "Get share permissions",
        description = "Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, share permissions are only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.",
        tags = { "Filter sharing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SharePermission.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/filter/{id}/permission",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<SharePermission>> getSharePermissions(
        @Parameter(name = "id", description = "The ID of the filter.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/configuration/timetracking/options : Get time tracking settings
     * Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getSharedTimeTrackingConfiguration",
        summary = "Get time tracking settings",
        description = "Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Time tracking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TimeTrackingConfiguration.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/configuration/timetracking/options",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TimeTrackingConfiguration> getSharedTimeTrackingConfiguration(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"defaultUnit\" : \"minute\", \"workingHoursPerDay\" : 6.027456183070403, \"timeFormat\" : \"pretty\", \"workingDaysPerWeek\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/status/{idOrName} : Get status
     * Returns a status. The status must be associated with an active workflow to be returned.  If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.  This operation can be accessed anonymously.  [Permissions](#permissions) required: None.
     *
     * @param idOrName The ID or name of the status. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the status is not found.  *  the status is not associated with a workflow.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "getStatus",
        summary = "Get status",
        description = "Returns a status. The status must be associated with an active workflow to be returned.  If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.  This operation can be accessed anonymously.  [Permissions](#permissions) required: None.",
        tags = { "Workflow statuses" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusDetails.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the status is not found.  *  the status is not associated with a workflow.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/status/{idOrName}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StatusDetails> getStatus(
        @Parameter(name = "idOrName", description = "The ID or name of the status.", required = true, in = ParameterIn.PATH) @PathVariable("idOrName") String idOrName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/statuscategory : Get all status categories
     * Returns a list of all status categories.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getStatusCategories",
        summary = "Get all status categories",
        description = "Returns a list of all status categories.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Workflow status categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatusCategory.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/statuscategory",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<StatusCategory>> getStatusCategories(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"colorName\" : \"colorName\", \"name\" : \"name\", \"self\" : \"self\", \"id\" : 0, \"key\" : \"key\" }, { \"colorName\" : \"colorName\", \"name\" : \"name\", \"self\" : \"self\", \"id\" : 0, \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/statuscategory/{idOrKey} : Get status category
     * Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param idOrKey The ID or key of the status category. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the status category is not found. (status code 404)
     */
    @Operation(
        operationId = "getStatusCategory",
        summary = "Get status category",
        description = "Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Workflow status categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusCategory.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the status category is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/statuscategory/{idOrKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StatusCategory> getStatusCategory(
        @Parameter(name = "idOrKey", description = "The ID or key of the status category.", required = true, in = ParameterIn.PATH) @PathVariable("idOrKey") String idOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"colorName\" : \"colorName\", \"name\" : \"name\", \"self\" : \"self\", \"id\" : 0, \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/status : Get all statuses
     * Returns a list of all statuses associated with active workflows.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getStatuses",
        summary = "Get all statuses",
        description = "Returns a list of all statuses associated with active workflows.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "Workflow statuses" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StatusDetails.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/status",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<StatusDetails>> getStatuses(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" }, { \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/statuses : Bulk get statuses
     * Returns a list of the statuses specified by one or more status IDs.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     *
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;usages&#x60; Returns the project and issue types that use the status in their workflow. (optional)
     * @param id The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id&#x3D;10000&amp;id&#x3D;10001.  Min items &#x60;1&#x60;, Max items &#x60;50&#x60; (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. (status code 401)
     */
    @Operation(
        operationId = "getStatusesById",
        summary = "Bulk get statuses",
        description = "Returns a list of the statuses specified by one or more status IDs.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)",
        tags = { "Status" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JiraStatus.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/statuses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<JiraStatus>> getStatusesById(
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `usages` Returns the project and issue types that use the status in their workflow.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "id", description = "The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.  Min items `1`, Max items `50`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) List<String> id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"scope\" : { \"project\" : { \"id\" : \"id\" }, \"type\" : \"PROJECT\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"usages\" : [ { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] }, { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] } ], \"statusCategory\" : \"TODO\" }, { \"scope\" : { \"project\" : { \"id\" : \"id\" }, \"type\" : \"PROJECT\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"usages\" : [ { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] }, { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] } ], \"statusCategory\" : \"TODO\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/task/{taskId} : Get task
     * Returns the status of a [long-running asynchronous task](#async).  When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.  **[Permissions](#permissions) required:** either of:   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  Creator of the task.
     *
     * @param taskId The ID of the task. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the task is not found. (status code 404)
     */
    @Operation(
        operationId = "getTask",
        summary = "Get task",
        description = "Returns the status of a [long-running asynchronous task](#async).  When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.  **[Permissions](#permissions) required:** either of:   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  Creator of the task.",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgressBeanObject.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the task is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/task/{taskId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskProgressBeanObject> getTask(
        @Parameter(name = "taskId", description = "The ID of the task.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"submittedBy\" : 7, \"description\" : \"description\", \"finished\" : 6, \"started\" : 5, \"message\" : \"message\", \"result\" : \"\", \"submitted\" : 2, \"lastUpdate\" : 1, \"progress\" : 5, \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"elapsedRuntime\" : 0, \"status\" : \"ENQUEUED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/transitions : Get transitions
     * Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue&#39;s status.  Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.  This operation can be accessed anonymously.  **[Permissions](#permissions) required: A list or transition is returned only when the user has:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param expand Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts &#x60;transitions.fields&#x60;, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the &#x60;fields&#x60; and &#x60;update&#x60; fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post). (optional)
     * @param transitionId The ID of the transition. (optional)
     * @param skipRemoteOnlyCondition Whether transitions with the condition *Hide From User Condition* are included in the response. (optional, default to false)
     * @param includeUnavailableTransitions Whether details of transitions that fail a condition are included in the response (optional, default to false)
     * @param sortByOpsBarAndStatus Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getTransitions",
        summary = "Get transitions",
        description = "Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.  Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.  This operation can be accessed anonymously.  **[Permissions](#permissions) required: A list or transition is returned only when the user has:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Transitions.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/transitions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Transitions> getTransitions(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "transitionId", description = "The ID of the transition.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transitionId", required = false) String transitionId,
        @Parameter(name = "skipRemoteOnlyCondition", description = "Whether transitions with the condition *Hide From User Condition* are included in the response.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "skipRemoteOnlyCondition", required = false, defaultValue = "false") Boolean skipRemoteOnlyCondition,
        @Parameter(name = "includeUnavailableTransitions", description = "Whether details of transitions that fail a condition are included in the response", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeUnavailableTransitions", required = false, defaultValue = "false") Boolean includeUnavailableTransitions,
        @Parameter(name = "sortByOpsBarAndStatus", description = "Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sortByOpsBarAndStatus", required = false, defaultValue = "false") Boolean sortByOpsBarAndStatus
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"transitions\" : [ { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } }, { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/search/trashed : Get fields in trash paginated
     * Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.  Only custom fields can be queried, &#x60;type&#x60; must be set to &#x60;custom&#x60;.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id  (optional)
     * @param query String used to perform a case-insensitive partial match with field names or descriptions. (optional)
     * @param expand  (optional)
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;name&#x60; sorts by the field name  *  &#x60;trashDate&#x60; sorts by the date the field was moved to the trash  *  &#x60;plannedDeletionDate&#x60; sorts by the planned deletion date (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getTrashedFieldsPaginated",
        summary = "Get fields in trash paginated",
        description = "Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.  Only custom fields can be queried, `type` must be set to `custom`.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue fields" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanField.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/search/trashed",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanField> getTrashedFieldsPaginated(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<String> id,
        @Parameter(name = "query", description = "String used to perform a case-insensitive partial match with field names or descriptions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "expand", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `name` sorts by the field name  *  `trashDate` sorts by the date the field was moved to the trash  *  `plannedDeletionDate` sorts by the planned deletion date", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) String orderBy
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"isUnscreenable\" : true, \"lastUsed\" : { \"type\" : \"TRACKED\", \"value\" : \"2000-01-23T04:56:07.000+00:00\" }, \"schema\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" }, \"screensCount\" : 7, \"contextsCount\" : 5, \"searcherKey\" : \"searcherKey\", \"isLocked\" : true, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"projectsCount\" : 5, \"key\" : \"key\" }, { \"isUnscreenable\" : true, \"lastUsed\" : { \"type\" : \"TRACKED\", \"value\" : \"2000-01-23T04:56:07.000+00:00\" }, \"schema\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" }, \"screensCount\" : 7, \"contextsCount\" : 5, \"searcherKey\" : \"searcherKey\", \"isLocked\" : true, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"projectsCount\" : 5, \"key\" : \"key\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/uiModifications : Get UI modifications
     * Gets UI modifications. UI modifications can only be retrieved by Forge apps.  **[Permissions](#permissions) required:** None.
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;data&#x60; Returns UI modification data.  *  &#x60;contexts&#x60; Returns UI modification contexts. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the request is not from a Forge app. (status code 403)
     */
    @Operation(
        operationId = "getUiModifications",
        summary = "Get UI modifications",
        description = "Gets UI modifications. UI modifications can only be retrieved by Forge apps.  **[Permissions](#permissions) required:** None.",
        tags = { "UI modifications (apps)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanUiModificationDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not from a Forge app.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/uiModifications",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanUiModificationDetails> getUiModifications(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "expand", description = "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `data` Returns UI modification data.  *  `contexts` Returns UI modification contexts.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"data\" : \"data\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"contexts\" : [ { \"isAvailable\" : true, \"issueTypeId\" : \"issueTypeId\", \"viewType\" : \"viewType\", \"id\" : \"id\", \"projectId\" : \"projectId\" }, { \"isAvailable\" : true, \"issueTypeId\" : \"issueTypeId\", \"viewType\" : \"viewType\", \"id\" : \"id\", \"projectId\" : \"projectId\" } ], \"id\" : \"id\" }, { \"data\" : \"data\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"contexts\" : [ { \"isAvailable\" : true, \"issueTypeId\" : \"issueTypeId\", \"viewType\" : \"viewType\", \"id\" : \"id\", \"projectId\" : \"projectId\" }, { \"isAvailable\" : true, \"issueTypeId\" : \"issueTypeId\", \"viewType\" : \"viewType\", \"id\" : \"id\", \"projectId\" : \"projectId\" } ], \"id\" : \"id\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user : Get user
     * Returns a user.  Privacy controls are applied to the response based on the user&#39;s preferences. This could mean, for example, that the user&#39;s email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required. (optional)
     * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details. (optional)
     * @param key This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details. (optional)
     * @param expand Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;groups&#x60; includes all groups and nested groups to which the user belongs.  *  &#x60;applicationRoles&#x60; includes details of all the applications to which the user has access. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the calling user does not have the *Browse users and groups* global permission. (status code 403)
     *         or Returned if the user is not found. (status code 404)
     */
    @Operation(
        operationId = "getUser",
        summary = "Get user",
        description = "Returns a user.  Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the calling user does not have the *Browse users and groups* global permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the user is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getUser(
        @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "username", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username,
        @Parameter(name = "key", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:   *  `groups` includes all groups and nested groups to which the user belongs.  *  `applicationRoles` includes details of all the applications to which the user has access.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/columns : Get user default columns
     * Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If &#x60;accountId&#x60; is not passed in the request, the calling user&#39;s details are returned.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.  *  Permission to access Jira, to get the calling user&#39;s column details.
     *
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
     * @param username This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission or is not accessing their user record. (status code 403)
     *         or Returned if the requested user is not found. (status code 404)
     */
    @Operation(
        operationId = "getUserDefaultColumns",
        summary = "Get user default columns",
        description = "Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.  *  Permission to access Jira, to get the calling user's column details.",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ColumnItem.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission or is not accessing their user record."),
            @ApiResponse(responseCode = "404", description = "Returned if the requested user is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/columns",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ColumnItem>> getUserDefaultColumns(
        @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "username", description = "This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"label\" : \"label\", \"value\" : \"value\" }, { \"label\" : \"label\", \"value\" : \"value\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/email : Get user email
     * Returns a user&#39;s email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
     *
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, &#x60;5b10ac8d82e05b22cc7d4ef5&#x60;. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the calling app is not approved to use this API. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing from the request (for example if a user is trying to access this API). (status code 401)
     *         or Returned if a user with the given &#x60;accountId&#x60; doesn&#39;t exist (status code 404)
     *         or Indicates the API is not currently enabled (status code 503)
     */
    @Operation(
        operationId = "getUserEmail",
        summary = "Get user email",
        description = "Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UnrestrictedUserEmail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the calling app is not approved to use this API."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing from the request (for example if a user is trying to access this API)."),
            @ApiResponse(responseCode = "404", description = "Returned if a user with the given `accountId` doesn't exist"),
            @ApiResponse(responseCode = "503", description = "Indicates the API is not currently enabled")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/email",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UnrestrictedUserEmail> getUserEmail(
        @NotNull @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = true) String accountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : \"accountId\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/email/bulk : Get user email bulk
     * Returns a user&#39;s email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
     *
     * @param accountId The account IDs of the users for which emails are required. An &#x60;accountId&#x60; is an identifier that uniquely identifies the user across all Atlassian products. For example, &#x60;5b10ac8d82e05b22cc7d4ef5&#x60;. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value). (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the calling app is not approved to use this API. (status code 400)
     *         or Returned if the authentication credentials are incorrect, or missing from the request (for example if a user is trying to access this API). (status code 401)
     *         or Indicates the API is not currently enabled. (status code 503)
     */
    @Operation(
        operationId = "getUserEmailBulk",
        summary = "Get user email bulk",
        description = "Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UnrestrictedUserEmail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the calling app is not approved to use this API."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect, or missing from the request (for example if a user is trying to access this API)."),
            @ApiResponse(responseCode = "503", description = "Indicates the API is not currently enabled.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/email/bulk",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UnrestrictedUserEmail> getUserEmailBulk(
        @NotNull @Parameter(name = "accountId", description = "The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value).", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = true) List<@Size(max = 128)String> accountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : \"accountId\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/groups : Get user groups
     * Returns the groups to which a user belongs.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (required)
     * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param key This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the calling user does not have the *Browse users and groups* global permission. (status code 403)
     *         or Returned if the user is not found. (status code 404)
     */
    @Operation(
        operationId = "getUserGroups",
        summary = "Get user groups",
        description = "Returns the groups to which a user belongs.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GroupName.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the calling user does not have the *Browse users and groups* global permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the user is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/groups",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GroupName>> getUserGroups(
        @NotNull @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = true) String accountId,
        @Parameter(name = "username", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username,
        @Parameter(name = "key", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" }, { \"groupId\" : \"groupId\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/properties/{propertyKey} : Get user property
     * Returns the value of a user&#39;s property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.  *  Access to Jira, to get a property from the calling user&#39;s record.
     *
     * @param propertyKey The key of the user&#39;s property. (required)
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
     * @param userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if &#x60;accountId&#x60; is missing. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission or is not accessing their user record. (status code 403)
     *         or Returned if the user is not found. (status code 404)
     */
    @Operation(
        operationId = "getUserProperty",
        summary = "Get user property",
        description = "Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.  *  Access to Jira, to get a property from the calling user's record.",
        tags = { "User properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EntityProperty.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if `accountId` is missing."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission or is not accessing their user record."),
            @ApiResponse(responseCode = "404", description = "Returned if the user is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/properties/{propertyKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EntityProperty> getUserProperty(
        @Parameter(name = "propertyKey", description = "The key of the user's property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "userKey", description = "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userKey", required = false) String userKey,
        @Parameter(name = "username", description = "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"value\" : \"\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/user/properties : Get user property keys
     * Returns the keys of all properties for a user.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.  *  Access to Jira, to access the calling user&#39;s property keys.
     *
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
     * @param userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if &#x60;accountId&#x60; is missing. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission or is not accessing their user record. (status code 403)
     *         or Returned if the user is not found. (status code 404)
     */
    @Operation(
        operationId = "getUserPropertyKeys",
        summary = "Get user property keys",
        description = "Returns the keys of all properties for a user.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.  *  Access to Jira, to access the calling user's property keys.",
        tags = { "User properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyKeys.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if `accountId` is missing."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission or is not accessing their user record."),
            @ApiResponse(responseCode = "404", description = "Returned if the user is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/user/properties",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PropertyKeys> getUserPropertyKeys(
        @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "userKey", description = "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userKey", required = false) String userKey,
        @Parameter(name = "username", description = "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keys\" : [ { \"self\" : \"self\", \"key\" : \"key\" }, { \"self\" : \"self\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/group/member : Get users from group
     * Returns a [paginated](#pagination) list of all users in a group.  Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended to identify a group.   The name of the group. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
     * @param groupId The ID of the group. This parameter cannot be used with the &#x60;groupName&#x60; parameter. (optional)
     * @param includeInactiveUsers Include inactive users. (optional, default to false)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the group name is not specified. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the calling user does not have the Administer Jira global permission. (status code 403)
     *         or Returned if the group is not found. (status code 404)
     */
    @Operation(
        operationId = "getUsersFromGroup",
        summary = "Get users from group",
        description = "Returns a [paginated](#pagination) list of all users in a group.  Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanUserDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the group name is not specified."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the calling user does not have the Administer Jira global permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the group is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/group/member",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanUserDetails> getUsersFromGroup(
        @Parameter(name = "groupname", description = "As a group's name can change, use of `groupId` is recommended to identify a group.   The name of the group. This parameter cannot be used with the `groupId` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupname", required = false) String groupname,
        @Parameter(name = "groupId", description = "The ID of the group. This parameter cannot be used with the `groupName` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId,
        @Parameter(name = "includeInactiveUsers", description = "Include inactive users.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeInactiveUsers", required = false, defaultValue = "false") Boolean includeInactiveUsers,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"displayName\" : \"displayName\", \"accountType\" : \"accountType\", \"name\" : \"name\", \"active\" : true, \"self\" : \"self\", \"timeZone\" : \"timeZone\", \"key\" : \"key\" }, { \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"displayName\" : \"displayName\", \"accountType\" : \"accountType\", \"name\" : \"name\", \"active\" : true, \"self\" : \"self\", \"timeZone\" : \"timeZone\", \"key\" : \"key\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/projectvalidate/validProjectKey : Get valid project key
     * Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.  **[Permissions](#permissions) required:** None.
     *
     * @param key The project key. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     */
    @Operation(
        operationId = "getValidProjectKey",
        summary = "Get valid project key",
        description = "Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.  **[Permissions](#permissions) required:** None.",
        tags = { "Project key and name validation" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/projectvalidate/validProjectKey",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> getValidProjectKey(
        @Parameter(name = "key", description = "The project key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/projectvalidate/validProjectName : Get valid project name
     * Checks that a project name isn&#39;t in use. If the name isn&#39;t in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.  **[Permissions](#permissions) required:** None.
     *
     * @param name The project name. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if a valid project name cannot be generated. (status code 404)
     */
    @Operation(
        operationId = "getValidProjectName",
        summary = "Get valid project name",
        description = "Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.  **[Permissions](#permissions) required:** None.",
        tags = { "Project key and name validation" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if a valid project name cannot be generated.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/projectvalidate/validProjectName",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> getValidProjectName(
        @NotNull @Parameter(name = "name", description = "The project name.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/version/{id} : Get version
     * Returns a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
     *
     * @param id The ID of the version. (required)
     * @param expand Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the version is not found or the user does not have the necessary permission. (status code 404)
     */
    @Operation(
        operationId = "getVersion",
        summary = "Get version",
        description = "Returns a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.",
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Version.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the version is not found or the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/version/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Version> getVersion(
        @Parameter(name = "id", description = "The ID of the version.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  `operations` Returns the list of operations available for this version.  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/version/{id}/relatedIssueCounts : Get version&#39;s related issues count
     * Returns the following counts for a version:   *  Number of issues where the &#x60;fixVersion&#x60; is set to the version.  *  Number of issues where the &#x60;affectedVersion&#x60; is set to the version.  *  Number of issues where a version custom field is set to the version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
     *
     * @param id The ID of the version. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if:   *  the version is not found.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "getVersionRelatedIssues",
        summary = "Get version's related issues count",
        description = "Returns the following counts for a version:   *  Number of issues where the `fixVersion` is set to the version.  *  Number of issues where the `affectedVersion` is set to the version.  *  Number of issues where a version custom field is set to the version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.",
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VersionIssueCounts.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the version is not found.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/version/{id}/relatedIssueCounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<VersionIssueCounts> getVersionRelatedIssues(
        @Parameter(name = "id", description = "The ID of the version.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issueCountWithCustomFieldsShowingVersion\" : 1, \"customFieldUsage\" : [ { \"fieldName\" : \"fieldName\", \"issueCountWithVersionInCustomField\" : 6, \"customFieldId\" : 0 }, { \"fieldName\" : \"fieldName\", \"issueCountWithVersionInCustomField\" : 6, \"customFieldId\" : 0 } ], \"issuesAffectedCount\" : 5, \"issuesFixedCount\" : 5, \"self\" : \"https://openapi-generator.tech\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/version/{id}/unresolvedIssueCount : Get version&#39;s unresolved issues count
     * Returns counts of the issues and unresolved issues for the project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
     *
     * @param id The ID of the version. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the version is not found.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "getVersionUnresolvedIssues",
        summary = "Get version's unresolved issues count",
        description = "Returns counts of the issues and unresolved issues for the project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.",
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VersionUnresolvedIssuesCount.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the version is not found.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/version/{id}/unresolvedIssueCount",
        produces = { "application/json" }
    )
    
    default ResponseEntity<VersionUnresolvedIssuesCount> getVersionUnresolvedIssues(
        @Parameter(name = "id", description = "The ID of the version.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issuesUnresolvedCount\" : 6, \"self\" : \"https://openapi-generator.tech\", \"issuesCount\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/field/{fieldKey}/option/suggestions/search : Get visible issue field options
     * Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional)
     * @param projectId Filters the results to options that are only available in the specified project. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the field is not found or does not support options. (status code 404)
     */
    @Operation(
        operationId = "getVisibleIssueFieldOptions",
        summary = "Get visible issue field options",
        description = "Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Issue custom field options (apps)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueFieldOption.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the field is not found or does not support options.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/field/{fieldKey}/option/suggestions/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueFieldOption> getVisibleIssueFieldOptions(
        @Parameter(name = "fieldKey", description = "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`", required = true, in = ParameterIn.PATH) @PathVariable("fieldKey") String fieldKey,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults,
        @Parameter(name = "projectId", description = "Filters the results to options that are only available in the specified project.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Long projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"id\" : 5, \"config\" : { \"scope\" : \"\", \"attributes\" : [ \"notSelectable\", \"notSelectable\" ] }, \"value\" : \"value\", \"properties\" : { \"key\" : \"\" } }, { \"id\" : 5, \"config\" : { \"scope\" : \"\", \"attributes\" : [ \"notSelectable\", \"notSelectable\" ] }, \"value\" : \"value\", \"properties\" : { \"key\" : \"\" } } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/votes : Get votes
     * Returns details about the votes on an issue.  This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the &#x60;voters&#x60; field.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  voting is disabled.  *  the user does not have permission to view the issue.  *  the issue is not found. (status code 404)
     */
    @Operation(
        operationId = "getVotes",
        summary = "Get votes",
        description = "Returns details about the votes on an issue.  This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field.",
        tags = { "Issue votes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Votes.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  voting is disabled.  *  the user does not have permission to view the issue.  *  the issue is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/votes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Votes> getVotes(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"hasVoted\" : true, \"voters\" : [ { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" }, { \"displayName\" : \"displayName\", \"accountType\" : \"atlassian\", \"active\" : true, \"timeZone\" : \"timeZone\", \"locale\" : \"locale\", \"accountId\" : \"accountId\", \"emailAddress\" : \"emailAddress\", \"expand\" : \"expand\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"key\" : \"key\" } ], \"self\" : \"https://openapi-generator.tech\", \"votes\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflowscheme/{id}/workflow : Get issue types for workflows in workflow scheme
     * Returns the workflow-issue type mappings for a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. (required)
     * @param workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. (optional)
     * @param returnDraftIfExists Returns the mapping from the workflow scheme&#39;s draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if either the workflow scheme or workflow is not found. (status code 404)
     */
    @Operation(
        operationId = "getWorkflow",
        summary = "Get issue types for workflows in workflow scheme",
        description = "Returns the workflow-issue type mappings for a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueTypesWorkflowMapping.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if either the workflow scheme or workflow is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflowscheme/{id}/workflow",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueTypesWorkflowMapping> getWorkflow(
        @Parameter(name = "id", description = "The ID of the workflow scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "workflowName", description = "The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = false) String workflowName,
        @Parameter(name = "returnDraftIfExists", description = "Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "returnDraftIfExists", required = false, defaultValue = "false") Boolean returnDraftIfExists
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updateDraftIfNeeded\" : true, \"workflow\" : \"workflow\", \"defaultMapping\" : true, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflowscheme/{id} : Get workflow scheme
     * Returns a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as &#x60;schemeId&#x60;. For example, *schemeId&#x3D;10301*. (required)
     * @param returnDraftIfExists Returns the workflow scheme&#39;s draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "getWorkflowScheme",
        summary = "Get workflow scheme",
        description = "Returns a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflowscheme/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> getWorkflowScheme(
        @Parameter(name = "id", description = "The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "returnDraftIfExists", description = "Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "returnDraftIfExists", required = false, defaultValue = "false") Boolean returnDraftIfExists
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflowscheme/{id}/draft : Get draft workflow scheme
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:   *  Only active workflow schemes can have draft workflow schemes.  *  An active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the active workflow scheme that the draft was created from. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. (status code 404)
     */
    @Operation(
        operationId = "getWorkflowSchemeDraft",
        summary = "Get draft workflow scheme",
        description = "Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:   *  Only active workflow schemes can have draft workflow schemes.  *  An active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflowscheme/{id}/draft",
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> getWorkflowSchemeDraft(
        @Parameter(name = "id", description = "The ID of the active workflow scheme that the draft was created from.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType} : Get workflow for issue type in draft workflow scheme
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param issueType The ID of the issue type. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme or issue type is not found. (status code 404)
     */
    @Operation(
        operationId = "getWorkflowSchemeDraftIssueType",
        summary = "Get workflow for issue type in draft workflow scheme",
        description = "Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueTypeWorkflowMapping.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme or issue type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueTypeWorkflowMapping> getWorkflowSchemeDraftIssueType(
        @Parameter(name = "id", description = "The ID of the workflow scheme that the draft belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "issueType", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueType") String issueType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issueType\" : \"issueType\", \"updateDraftIfNeeded\" : true, \"workflow\" : \"workflow\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflowscheme/{id}/issuetype/{issueType} : Get workflow for issue type in workflow scheme
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. (required)
     * @param issueType The ID of the issue type. (required)
     * @param returnDraftIfExists Returns the mapping from the workflow scheme&#39;s draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme or issue type is not found. (status code 404)
     */
    @Operation(
        operationId = "getWorkflowSchemeIssueType",
        summary = "Get workflow for issue type in workflow scheme",
        description = "Returns the issue type-workflow mapping for an issue type in a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueTypeWorkflowMapping.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme or issue type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueTypeWorkflowMapping> getWorkflowSchemeIssueType(
        @Parameter(name = "id", description = "The ID of the workflow scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "issueType", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueType") String issueType,
        @Parameter(name = "returnDraftIfExists", description = "Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "returnDraftIfExists", required = false, defaultValue = "false") Boolean returnDraftIfExists
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issueType\" : \"issueType\", \"updateDraftIfNeeded\" : true, \"workflow\" : \"workflow\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflowscheme/project : Get workflow scheme project associations
     * Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.  If the project is associated with the &#x60;Default Workflow Scheme&#x60; no ID is returned. This is because the way the &#x60;Default Workflow Scheme&#x60; is stored means it has no ID.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectId The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getWorkflowSchemeProjectAssociations",
        summary = "Get workflow scheme project associations",
        description = "Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.  If the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme project associations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContainerOfWorkflowSchemeAssociations.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflowscheme/project",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ContainerOfWorkflowSchemeAssociations> getWorkflowSchemeProjectAssociations(
        @NotNull @Size(min = 1, max = 100) @Parameter(name = "projectId", description = "The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = true) Set<Long> projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"values\" : [ { \"projectIds\" : [ \"projectIds\", \"projectIds\" ], \"workflowScheme\" : \"\" }, { \"projectIds\" : [ \"projectIds\", \"projectIds\" ], \"workflowScheme\" : \"\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflow/transitions/{transitionId}/properties : Get workflow transition properties
     * Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition. (required)
     * @param workflowName The name of the workflow that the transition belongs to. (required)
     * @param includeReservedKeys Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*. (optional, default to false)
     * @param key The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned. (optional)
     * @param workflowMode The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows. (optional, default to live)
     * @return 200 response (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have admin permission (status code 403)
     *         or Returned if the workflow transition or property is not found. (status code 404)
     */
    @Operation(
        operationId = "getWorkflowTransitionProperties",
        summary = "Get workflow transition properties",
        description = "Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow transition properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "200 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowTransitionProperty.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have admin permission"),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow transition or property is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflow/transitions/{transitionId}/properties",
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowTransitionProperty> getWorkflowTransitionProperties(
        @Parameter(name = "transitionId", description = "The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.", required = true, in = ParameterIn.PATH) @PathVariable("transitionId") Long transitionId,
        @NotNull @Parameter(name = "workflowName", description = "The name of the workflow that the transition belongs to.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = true) String workflowName,
        @Parameter(name = "includeReservedKeys", description = "Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeReservedKeys", required = false, defaultValue = "false") Boolean includeReservedKeys,
        @Parameter(name = "key", description = "The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "workflowMode", description = "The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowMode", required = false, defaultValue = "live") String workflowMode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"value\" : \"value\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflow/rule/config : Get workflow transition rule configurations
     * Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:   *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).  *  matching one or more transition rule keys.  Only workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.  Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
     *
     * @param types The types of the transition rules to return. (required)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 10)
     * @param keys The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return. (optional)
     * @param workflowNames EXPERIMENTAL: The list of workflow names to filter by. (optional)
     * @param withTags EXPERIMENTAL: The list of &#x60;tags&#x60; to filter by. (optional)
     * @param draft EXPERIMENTAL: Whether draft or published workflows are returned. If not provided, both workflow types are returned. (optional)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts &#x60;transition&#x60;, which, for each rule, returns information about the transition the rule is assigned to. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the caller is not a Connect or a Forge app. (status code 403)
     *         or Returned if any transition rule type is not supported. (status code 404)
     */
    @Operation(
        operationId = "getWorkflowTransitionRuleConfigurations",
        summary = "Get workflow transition rule configurations",
        description = "Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:   *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).  *  matching one or more transition rule keys.  Only workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.  Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.",
        tags = { "Workflow transition rules" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanWorkflowTransitionRules.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the caller is not a Connect or a Forge app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if any transition rule type is not supported.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflow/rule/config",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanWorkflowTransitionRules> getWorkflowTransitionRuleConfigurations(
        @NotNull @Parameter(name = "types", description = "The types of the transition rules to return.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "types", required = true) Set<String> types,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Max(50) @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "10") Integer maxResults,
        @Parameter(name = "keys", description = "The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keys", required = false) Set<String> keys,
        @Parameter(name = "workflowNames", description = "EXPERIMENTAL: The list of workflow names to filter by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowNames", required = false) Set<@Size(max = 50)String> workflowNames,
        @Parameter(name = "withTags", description = "EXPERIMENTAL: The list of `tags` to filter by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "withTags", required = false) Set<@Size(max = 20)String> withTags,
        @Parameter(name = "draft", description = "EXPERIMENTAL: Whether draft or published workflows are returned. If not provided, both workflow types are returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "draft", required = false) Boolean draft,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"postFunctions\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"validators\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"conditions\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"workflowId\" : { \"draft\" : true, \"name\" : \"name\" } }, { \"postFunctions\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"validators\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"conditions\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"workflowId\" : { \"draft\" : true, \"name\" : \"name\" } } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/workflow/search : Get workflows paginated
     * Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.  This operation does not return next-gen workflows.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param workflowName The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, &#x60;workflowName&#x3D;name1&amp;workflowName&#x3D;name2&#x60;. (optional)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;transitions&#x60; For each workflow, returns information about the transitions inside the workflow.  *  &#x60;transitions.rules&#x60; For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.  *  &#x60;transitions.properties&#x60; For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.  *  &#x60;statuses&#x60; For each workflow, returns information about the statuses inside the workflow.  *  &#x60;statuses.properties&#x60; For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.  *  &#x60;default&#x60; For each workflow, returns information about whether this is the default workflow.  *  &#x60;schemes&#x60; For each workflow, returns information about the workflow schemes the workflow is assigned to.  *  &#x60;projects&#x60; For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.  *  &#x60;hasDraftWorkflow&#x60; For each workflow, returns information about whether the workflow has a draft version.  *  &#x60;operations&#x60; For each workflow, returns information about the actions that can be undertaken on the workflow. (optional)
     * @param queryString String used to perform a case-insensitive partial match with workflow name. (optional)
     * @param orderBy [Order](#ordering) the results by a field:   *  &#x60;name&#x60; Sorts by workflow name.  *  &#x60;created&#x60; Sorts by create time.  *  &#x60;updated&#x60; Sorts by update time. (optional)
     * @param isActive Filters active and inactive workflows. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "getWorkflowsPaginated",
        summary = "Get workflows paginated",
        description = "Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.  This operation does not return next-gen workflows.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflows" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanWorkflow.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/workflow/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanWorkflow> getWorkflowsPaginated(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "workflowName", description = "The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&workflowName=name2`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = false) Set<String> workflowName,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `transitions` For each workflow, returns information about the transitions inside the workflow.  *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.  *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.  *  `statuses` For each workflow, returns information about the statuses inside the workflow.  *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.  *  `default` For each workflow, returns information about whether this is the default workflow.  *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.  *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.  *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.  *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "queryString", description = "String used to perform a case-insensitive partial match with workflow name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queryString", required = false) String queryString,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field:   *  `name` Sorts by workflow name.  *  `created` Sorts by create time.  *  `updated` Sorts by update time.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false) String orderBy,
        @Parameter(name = "isActive", description = "Filters active and inactive workflows.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive", required = false) Boolean isActive
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"isDefault\" : true, \"operations\" : { \"canEdit\" : true, \"canDelete\" : true }, \"projects\" : [ { \"simplified\" : true, \"name\" : \"name\", \"self\" : \"self\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"key\" : \"key\" }, { \"simplified\" : true, \"name\" : \"name\", \"self\" : \"self\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"key\" : \"key\" } ], \"hasDraftWorkflow\" : true, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"statuses\" : [ { \"name\" : \"name\", \"id\" : \"id\", \"properties\" : { \"key\" : \"\" } }, { \"name\" : \"name\", \"id\" : \"id\", \"properties\" : { \"key\" : \"\" } } ], \"id\" : { \"name\" : \"name\", \"entityId\" : \"entityId\" }, \"schemes\" : [ { \"name\" : \"name\", \"id\" : \"id\" }, { \"name\" : \"name\", \"id\" : \"id\" } ], \"transitions\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"screen\" : { \"name\" : \"name\", \"id\" : \"id\" }, \"from\" : [ \"from\", \"from\" ], \"rules\" : { \"postFunctions\" : [ { \"configuration\" : \"\", \"type\" : \"type\" }, { \"configuration\" : \"\", \"type\" : \"type\" } ], \"validators\" : [ { \"configuration\" : \"\", \"type\" : \"type\" }, { \"configuration\" : \"\", \"type\" : \"type\" } ] }, \"id\" : \"id\", \"to\" : \"to\", \"type\" : \"global\", \"properties\" : { \"key\" : \"\" } }, { \"name\" : \"name\", \"description\" : \"description\", \"screen\" : { \"name\" : \"name\", \"id\" : \"id\" }, \"from\" : [ \"from\", \"from\" ], \"rules\" : { \"postFunctions\" : [ { \"configuration\" : \"\", \"type\" : \"type\" }, { \"configuration\" : \"\", \"type\" : \"type\" } ], \"validators\" : [ { \"configuration\" : \"\", \"type\" : \"type\" }, { \"configuration\" : \"\", \"type\" : \"type\" } ] }, \"id\" : \"id\", \"to\" : \"to\", \"type\" : \"global\", \"properties\" : { \"key\" : \"\" } } ], \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"isDefault\" : true, \"operations\" : { \"canEdit\" : true, \"canDelete\" : true }, \"projects\" : [ { \"simplified\" : true, \"name\" : \"name\", \"self\" : \"self\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"key\" : \"key\" }, { \"simplified\" : true, \"name\" : \"name\", \"self\" : \"self\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"key\" : \"key\" } ], \"hasDraftWorkflow\" : true, \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"statuses\" : [ { \"name\" : \"name\", \"id\" : \"id\", \"properties\" : { \"key\" : \"\" } }, { \"name\" : \"name\", \"id\" : \"id\", \"properties\" : { \"key\" : \"\" } } ], \"id\" : { \"name\" : \"name\", \"entityId\" : \"entityId\" }, \"schemes\" : [ { \"name\" : \"name\", \"id\" : \"id\" }, { \"name\" : \"name\", \"id\" : \"id\" } ], \"transitions\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"screen\" : { \"name\" : \"name\", \"id\" : \"id\" }, \"from\" : [ \"from\", \"from\" ], \"rules\" : { \"postFunctions\" : [ { \"configuration\" : \"\", \"type\" : \"type\" }, { \"configuration\" : \"\", \"type\" : \"type\" } ], \"validators\" : [ { \"configuration\" : \"\", \"type\" : \"type\" }, { \"configuration\" : \"\", \"type\" : \"type\" } ] }, \"id\" : \"id\", \"to\" : \"to\", \"type\" : \"global\", \"properties\" : { \"key\" : \"\" } }, { \"name\" : \"name\", \"description\" : \"description\", \"screen\" : { \"name\" : \"name\", \"id\" : \"id\" }, \"from\" : [ \"from\", \"from\" ], \"rules\" : { \"postFunctions\" : [ { \"configuration\" : \"\", \"type\" : \"type\" }, { \"configuration\" : \"\", \"type\" : \"type\" } ], \"validators\" : [ { \"configuration\" : \"\", \"type\" : \"type\" }, { \"configuration\" : \"\", \"type\" : \"type\" } ] }, \"id\" : \"id\", \"to\" : \"to\", \"type\" : \"global\", \"properties\" : { \"key\" : \"\" } } ], \"updated\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/worklog/{id} : Get worklog
     * Returns a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param id The ID of the worklog. (required)
     * @param expand Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts  &#x60;properties&#x60;, which returns worklog properties. (optional, default to )
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if:   *  the issue is not found or the user does not have permission to view it.  *  the worklog is not found or the user does not have permission to view it.  *  time tracking is disabled.  . (status code 404)
     */
    @Operation(
        operationId = "getWorklog",
        summary = "Get worklog",
        description = "Returns a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue worklogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Worklog.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue is not found or the user does not have permission to view it.  *  the worklog is not found or the user does not have permission to view it.  *  time tracking is disabled.  .")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Worklog> getWorklog(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "id", description = "The ID of the worklog.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts  `properties`, which returns worklog properties.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false, defaultValue = "") String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issueId\" : \"issueId\", \"visibility\" : \"\", \"timeSpent\" : \"timeSpent\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"started\" : \"2000-01-23T04:56:07.000+00:00\", \"timeSpentSeconds\" : 5, \"self\" : \"https://openapi-generator.tech\", \"comment\" : \"\", \"id\" : \"id\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey} : Get worklog property
     * Returns the value of a worklog property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param worklogId The ID of the worklog. (required)
     * @param propertyKey The key of the property. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the worklog ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the issue, worklog, or property is not found.  *  the user does not have permission to view the issue or worklog. (status code 404)
     */
    @Operation(
        operationId = "getWorklogProperty",
        summary = "Get worklog property",
        description = "Returns the value of a worklog property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue worklog properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EntityProperty.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the worklog ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue, worklog, or property is not found.  *  the user does not have permission to view the issue or worklog.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EntityProperty> getWorklogProperty(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "worklogId", description = "The ID of the worklog.", required = true, in = ParameterIn.PATH) @PathVariable("worklogId") String worklogId,
        @Parameter(name = "propertyKey", description = "The key of the property.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"value\" : \"\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties : Get worklog property keys
     * Returns the keys of all properties for a worklog.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param worklogId The ID of the worklog. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the worklog ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the issue or worklog is not found.  *  the user does not have permission to view the issue or worklog. (status code 404)
     */
    @Operation(
        operationId = "getWorklogPropertyKeys",
        summary = "Get worklog property keys",
        description = "Returns the keys of all properties for a worklog.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue worklog properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyKeys.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the worklog ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue or worklog is not found.  *  the user does not have permission to view the issue or worklog.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PropertyKeys> getWorklogPropertyKeys(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "worklogId", description = "The ID of the worklog.", required = true, in = ParameterIn.PATH) @PathVariable("worklogId") String worklogId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keys\" : [ { \"self\" : \"self\", \"key\" : \"key\" }, { \"self\" : \"self\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/worklog/list : Get worklogs
     * Returns worklog details for a list of worklog IDs.  The returned list of worklogs is limited to 1000 items.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.
     *
     * @param worklogIdsRequestBean A JSON object containing a list of worklog IDs. (required)
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts &#x60;properties&#x60; that returns the properties of each worklog. (optional, default to )
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request contains more than 1000 worklog IDs or is empty. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "getWorklogsForIds",
        summary = "Get worklogs",
        description = "Returns worklog details for a list of worklog IDs.  The returned list of worklogs is limited to 1000 items.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.",
        tags = { "Issue worklogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Worklog.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request contains more than 1000 worklog IDs or is empty."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/worklog/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<Worklog>> getWorklogsForIds(
        @Parameter(name = "WorklogIdsRequestBean", description = "A JSON object containing a list of worklog IDs.", required = true) @Valid @RequestBody WorklogIdsRequestBean worklogIdsRequestBean,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false, defaultValue = "") String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"issueId\" : \"issueId\", \"visibility\" : \"\", \"timeSpent\" : \"timeSpent\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"started\" : \"2000-01-23T04:56:07.000+00:00\", \"timeSpentSeconds\" : 5, \"self\" : \"https://openapi-generator.tech\", \"comment\" : \"\", \"id\" : \"id\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }, { \"issueId\" : \"issueId\", \"visibility\" : \"\", \"timeSpent\" : \"timeSpent\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"started\" : \"2000-01-23T04:56:07.000+00:00\", \"timeSpentSeconds\" : 5, \"self\" : \"https://openapi-generator.tech\", \"comment\" : \"\", \"id\" : \"id\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issueLink : Create issue link
     * Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use &#x60;https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields&#x3D;issuelinks&#x60;.  If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param linkIssueRequestJsonBean The issue link request. (required)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if the comment is not created. The response contains an error message indicating why the comment wasn&#39;t created. The issue link is also not created. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  issue linking is disabled.  *  the user cannot view one or both of the issues. For example, the user doesn&#39;t have *Browse project* project permission for a project containing one of the issues.  *  the user does not have *link issues* project permission.  *  either of the link issues are not found.  *  the issue link type is not found. (status code 404)
     */
    @Operation(
        operationId = "linkIssues",
        summary = "Create issue link",
        description = "Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.  If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue links" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the comment is not created. The response contains an error message indicating why the comment wasn't created. The issue link is also not created."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  issue linking is disabled.  *  the user cannot view one or both of the issues. For example, the user doesn't have *Browse project* project permission for a project containing one of the issues.  *  the user does not have *link issues* project permission.  *  either of the link issues are not found.  *  the issue link type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issueLink",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> linkIssues(
        @Parameter(name = "LinkIssueRequestJsonBean", description = "The issue link request.", required = true) @Valid @RequestBody LinkIssueRequestJsonBean linkIssueRequestJsonBean
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/jql/match : Check issues against JQL
     * Checks whether one or more issues would be returned by one or more JQL queries.  **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issuesAndJQLQueries  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if &#x60;jqls&#x60; exceeds the maximum number of JQL queries or &#x60;issueIds&#x60; exceeds the maximum number of issue IDs. (status code 400)
     */
    @Operation(
        operationId = "matchIssues",
        summary = "Check issues against JQL",
        description = "Checks whether one or more issues would be returned by one or more JQL queries.  **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueMatches.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if `jqls` exceeds the maximum number of JQL queries or `issueIds` exceeds the maximum number of issue IDs.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/jql/match",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IssueMatches> matchIssues(
        @Parameter(name = "IssuesAndJQLQueries", description = "", required = true) @Valid @RequestBody IssuesAndJQLQueries issuesAndJQLQueries
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"matches\" : [ { \"errors\" : [ \"errors\", \"errors\" ], \"matchedIssues\" : [ 0, 0 ] }, { \"errors\" : [ \"errors\", \"errors\" ], \"matchedIssues\" : [ 0, 0 ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/version/{id}/mergeto/{moveIssuesTo} : Merge versions
     * Merges two project versions. The merge is completed by deleting the version specified in &#x60;id&#x60; and replacing any occurrences of its ID in &#x60;fixVersion&#x60; with the version ID specified in &#x60;moveIssuesTo&#x60;.  Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, and custom fields.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     *
     * @param id The ID of the version to delete. (required)
     * @param moveIssuesTo The ID of the version to merge into. (required)
     * @return Returned if the version is deleted. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if:   *  the authentication credentials are incorrect or missing.  *  the user does not have the required permissions. (status code 401)
     *         or Returned if the version to be deleted or the version to merge to are not found. (status code 404)
     */
    @Operation(
        operationId = "mergeVersions",
        summary = "Merge versions",
        description = "Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.  Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.",
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the version is deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if:   *  the authentication credentials are incorrect or missing.  *  the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the version to be deleted or the version to merge to are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/version/{id}/mergeto/{moveIssuesTo}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> mergeVersions(
        @Parameter(name = "id", description = "The ID of the version to delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "moveIssuesTo", description = "The ID of the version to merge into.", required = true, in = ParameterIn.PATH) @PathVariable("moveIssuesTo") String moveIssuesTo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/jql/pdcleaner : Convert user identifiers to account IDs in JQL queries
     * Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.  You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param jqLPersonalDataMigrationRequest  (required)
     * @return Returned if the request is successful. Note that the JQL queries are returned in the same order that they were passed. (status code 200)
     *         or Returned if at least one of the queries cannot be converted. For example, the JQL has invalid operators or invalid keywords, or the users in the query cannot be found. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "migrateQueries",
        summary = "Convert user identifiers to account IDs in JQL queries",
        description = "Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.  You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "JQL" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful. Note that the JQL queries are returned in the same order that they were passed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConvertedJQLQueries.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if at least one of the queries cannot be converted. For example, the JQL has invalid operators or invalid keywords, or the users in the query cannot be found."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-user" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/jql/pdcleaner",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ConvertedJQLQueries> migrateQueries(
        @Parameter(name = "JQLPersonalDataMigrationRequest", description = "", required = true) @Valid @RequestBody JQLPersonalDataMigrationRequest jqLPersonalDataMigrationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"queriesWithUnknownUsers\" : [ { \"convertedQuery\" : \"convertedQuery\", \"originalQuery\" : \"originalQuery\" }, { \"convertedQuery\" : \"convertedQuery\", \"originalQuery\" : \"originalQuery\" } ], \"queryStrings\" : [ \"queryStrings\", \"queryStrings\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/atlassian-connect/1/migration/properties/{entityType} : Bulk update entity properties
     * Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.
     *
     * @param atlassianTransferId The app migration transfer ID. (required)
     * @param entityType The type indicating the object that contains the entity properties. (required)
     * @param entityPropertyDetails  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authorisation credentials are incorrect or missing. (status code 403)
     */
    @Operation(
        operationId = "migrationResourceUpdateEntityPropertiesValuePut",
        summary = "Bulk update entity properties",
        description = "Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.",
        tags = { "App migration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "403", description = "Returned if the authorisation credentials are incorrect or missing.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/atlassian-connect/1/migration/properties/{entityType}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> migrationResourceUpdateEntityPropertiesValuePut(
        @NotNull @Parameter(name = "Atlassian-Transfer-Id", description = "The app migration transfer ID.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Atlassian-Transfer-Id", required = true) UUID atlassianTransferId,
        @Parameter(name = "entityType", description = "The type indicating the object that contains the entity properties.", required = true, in = ParameterIn.PATH) @PathVariable("entityType") String entityType,
        @Parameter(name = "EntityPropertyDetails", description = "", required = true) @Valid@Size(min = 1, max = 50)  @RequestBody List<@Valid EntityPropertyDetails> entityPropertyDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/atlassian-connect/1/migration/workflow/rule/search : Get workflow transition rule configurations
     * Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.
     *
     * @param atlassianTransferId The app migration transfer ID. (required)
     * @param workflowRulesSearch  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authorisation credentials are incorrect or missing. (status code 403)
     */
    @Operation(
        operationId = "migrationResourceWorkflowRuleSearchPost",
        summary = "Get workflow transition rule configurations",
        description = "Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.",
        tags = { "App migration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowRulesSearchDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "403", description = "Returned if the authorisation credentials are incorrect or missing.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/atlassian-connect/1/migration/workflow/rule/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowRulesSearchDetails> migrationResourceWorkflowRuleSearchPost(
        @NotNull @Parameter(name = "Atlassian-Transfer-Id", description = "The app migration transfer ID.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Atlassian-Transfer-Id", required = true) UUID atlassianTransferId,
        @Parameter(name = "WorkflowRulesSearch", description = "", required = true) @Valid @RequestBody WorkflowRulesSearch workflowRulesSearch
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invalidRules\" : [ \"55d44f1d-c859-42e5-9c27-2c5ec3f340b1\", \"55d44f1d-c859-42e5-9c27-2c5ec3f340b1\" ], \"validRules\" : [ { \"postFunctions\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"validators\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"conditions\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"workflowId\" : { \"draft\" : true, \"name\" : \"name\" } }, { \"postFunctions\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"validators\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"conditions\" : [ { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" }, { \"configuration\" : { \"disabled\" : false, \"tag\" : \"tag\", \"value\" : \"value\" }, \"id\" : \"id\", \"key\" : \"key\", \"transition\" : \"\" } ], \"workflowId\" : { \"draft\" : true, \"name\" : \"name\" } } ], \"workflowEntityId\" : \"a498d711-685d-428d-8c3e-bc03bb450ea7\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/priority/move : Move priorities
     * Changes the order of issue priorities.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param reorderIssuePriorities  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue priority isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "movePriorities",
        summary = "Move priorities",
        description = "Changes the order of issue priorities.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue priorities" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue priority isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/priority/move",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> movePriorities(
        @Parameter(name = "ReorderIssuePriorities", description = "", required = true) @Valid @RequestBody ReorderIssuePriorities reorderIssuePriorities
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/resolution/move : Move resolutions
     * Changes the order of issue resolutions.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param reorderIssueResolutionsRequest  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue resolution isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "moveResolutions",
        summary = "Move resolutions",
        description = "Changes the order of issue resolutions.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue resolutions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue resolution isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/resolution/move",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> moveResolutions(
        @Parameter(name = "ReorderIssueResolutionsRequest", description = "", required = true) @Valid @RequestBody ReorderIssueResolutionsRequest reorderIssueResolutionsRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos} : Move screen tab
     * Moves a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @param pos The position of tab. The base index is 0. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen or screen tab is not found or the position is invalid. (status code 404)
     */
    @Operation(
        operationId = "moveScreenTab",
        summary = "Move screen tab",
        description = "Moves a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen tabs" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen or screen tab is not found or the position is invalid.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> moveScreenTab(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId,
        @Parameter(name = "tabId", description = "The ID of the screen tab.", required = true, in = ParameterIn.PATH) @PathVariable("tabId") Long tabId,
        @Parameter(name = "pos", description = "The position of tab. The base index is 0.", required = true, in = ParameterIn.PATH) @PathVariable("pos") Integer pos
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move : Move screen tab field
     * Moves a screen tab field.  If &#x60;after&#x60; and &#x60;position&#x60; are provided in the request, &#x60;position&#x60; is ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @param id The ID of the field. (required)
     * @param moveFieldBean  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen, screen tab, or field is not found or the field can&#39;t be moved to the requested position. (status code 404)
     */
    @Operation(
        operationId = "moveScreenTabField",
        summary = "Move screen tab field",
        description = "Moves a screen tab field.  If `after` and `position` are provided in the request, `position` is ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen tab fields" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen, screen tab, or field is not found or the field can't be moved to the requested position.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> moveScreenTabField(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId,
        @Parameter(name = "tabId", description = "The ID of the screen tab.", required = true, in = ParameterIn.PATH) @PathVariable("tabId") Long tabId,
        @Parameter(name = "id", description = "The ID of the field.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "MoveFieldBean", description = "", required = true) @Valid @RequestBody MoveFieldBean moveFieldBean
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/version/{id}/move : Move version
     * Modifies the version&#39;s sequence within the project, which affects the display order of the versions in Jira.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
     *
     * @param id The ID of the version to be moved. (required)
     * @param versionMoveBean  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  no body parameters are provided.  *  &#x60;after&#x60; and &#x60;position&#x60; are provided.  *  &#x60;position&#x60; is invalid. (status code 400)
     *         or Returned if:   *  the authentication credentials are incorrect or missing  *  the user does not have the required commissions. (status code 401)
     *         or Returned if the version or move after version are not found. (status code 404)
     */
    @Operation(
        operationId = "moveVersion",
        summary = "Move version",
        description = "Modifies the version's sequence within the project, which affects the display order of the versions in Jira.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.",
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Version.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  no body parameters are provided.  *  `after` and `position` are provided.  *  `position` is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if:   *  the authentication credentials are incorrect or missing  *  the user does not have the required commissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the version or move after version are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/version/{id}/move",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Version> moveVersion(
        @Parameter(name = "id", description = "The ID of the version to be moved.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "VersionMoveBean", description = "", required = true) @Valid @RequestBody VersionMoveBean versionMoveBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issue/{issueIdOrKey}/notify : Send notification for issue
     * Creates an email notification for an issue and adds it to the mail queue.  **[Permissions](#permissions) required:**   *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey ID or key of the issue that the notification is sent for. (required)
     * @param notification The request object for the notification and recipients. (required)
     * @return Returned if the email is queued for sending. (status code 204)
     *         or Returned if:   *  the recipient is the same as the calling user.  *  the recipient is invalid. For example, the recipient is set to the assignee, but the issue is unassigned.  *  the request is invalid. For example, required fields are missing or have invalid values. (status code 400)
     *         or Returned if:   *  outgoing emails are disabled.  *  no SMTP server is configured. (status code 403)
     *         or Returned if the issue is not found. (status code 404)
     */
    @Operation(
        operationId = "notify",
        summary = "Send notification for issue",
        description = "Creates an email notification for an issue and adds it to the mail queue.  **[Permissions](#permissions) required:**   *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the email is queued for sending.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the recipient is the same as the calling user.  *  the recipient is invalid. For example, the recipient is set to the assignee, but the issue is unassigned.  *  the request is invalid. For example, required fields are missing or have invalid values."),
            @ApiResponse(responseCode = "403", description = "Returned if:   *  outgoing emails are disabled.  *  no SMTP server is configured."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issue/{issueIdOrKey}/notify",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> notify(
        @Parameter(name = "issueIdOrKey", description = "ID or key of the issue that the notification is sent for.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "Notification", description = "The request object for the notification and recipients.", required = true) @Valid @RequestBody Notification notification
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/jql/parse : Parse JQL query
     * Parses and validates JQL queries.  Validation is performed in context of the current user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     *
     * @param jqlQueriesToParse  (required)
     * @param validation How to validate the JQL query and treat the validation results. Validation options include:   *  &#x60;strict&#x60; Returns all errors. If validation fails, the query structure is not returned.  *  &#x60;warn&#x60; Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.  *  &#x60;none&#x60; No validation is performed. If JQL query is correctly formed, the query structure is returned. (optional, default to strict)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     */
    @Operation(
        operationId = "parseJqlQueries",
        summary = "Parse JQL query",
        description = "Parses and validates JQL queries.  Validation is performed in context of the current user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.",
        tags = { "JQL" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ParsedJqlQueries.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/jql/parse",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ParsedJqlQueries> parseJqlQueries(
        @Parameter(name = "JqlQueriesToParse", description = "", required = true) @Valid @RequestBody JqlQueriesToParse jqlQueriesToParse,
        @Parameter(name = "validation", description = "How to validate the JQL query and treat the validation results. Validation options include:   *  `strict` Returns all errors. If validation fails, the query structure is not returned.  *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.  *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "validation", required = false, defaultValue = "strict") String validation
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"queries\" : [ { \"query\" : \"query\", \"errors\" : [ \"errors\", \"errors\" ], \"structure\" : \"\" }, { \"query\" : \"query\", \"errors\" : [ \"errors\", \"errors\" ], \"structure\" : \"\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/role/{id} : Partial update project role
     * Updates either the project role&#39;s name or its description.  You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param createUpdateRoleRequestBean  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have administrative permissions. (status code 403)
     *         or Returned if the project role is not found. (status code 404)
     */
    @Operation(
        operationId = "partialUpdateProjectRole",
        summary = "Partial update project role",
        description = "Updates either the project role's name or its description.  You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectRole.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have administrative permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project role is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/role/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectRole> partialUpdateProjectRole(
        @Parameter(name = "id", description = "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateUpdateRoleRequestBean", description = "", required = true) @Valid @RequestBody CreateUpdateRoleRequestBean createUpdateRoleRequestBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/workflowscheme/{id}/draft/publish : Publish draft workflow scheme
     * Publishes a draft workflow scheme.  Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.  This operation is [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param publishDraftWorkflowScheme Details of the status mappings. (required)
     * @param validateOnly Whether the request only performs a validation. (optional, default to false)
     * @return Returned if the request is only for validation and is successful. (status code 204)
     *         or Returned if the request is successful. (status code 303)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if any of these are true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  A new status in the draft workflow scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "publishDraftWorkflowScheme",
        summary = "Publish draft workflow scheme",
        description = "Publishes a draft workflow scheme.  Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is only for validation and is successful."),
            @ApiResponse(responseCode = "303", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgressBeanObject.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if any of these are true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  A new status in the draft workflow scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/workflowscheme/{id}/draft/publish",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> publishDraftWorkflowScheme(
        @Parameter(name = "id", description = "The ID of the workflow scheme that the draft belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "PublishDraftWorkflowScheme", description = "Details of the status mappings.", required = true) @Valid @RequestBody PublishDraftWorkflowScheme publishDraftWorkflowScheme,
        @Parameter(name = "validateOnly", description = "Whether the request only performs a validation.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "validateOnly", required = false, defaultValue = "false") Boolean validateOnly
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/webhook/refresh : Extend webhook life
     * Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.  Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     *
     * @param containerForWebhookIDs  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the caller isn&#39;t an app. (status code 403)
     */
    @Operation(
        operationId = "refreshWebhooks",
        summary = "Extend webhook life",
        description = "Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.  Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WebhooksExpirationDate.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the caller isn't an app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work", "manage:jira-webhook" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/webhook/refresh",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WebhooksExpirationDate> refreshWebhooks(
        @Parameter(name = "ContainerForWebhookIDs", description = "", required = true) @Valid @RequestBody ContainerForWebhookIDs containerForWebhookIDs
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expirationDate\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/webhook : Register dynamic webhooks
     * Registers webhooks.  **NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     *
     * @param webhookRegistrationDetails  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the caller isn&#39;t an app. (status code 403)
     */
    @Operation(
        operationId = "registerDynamicWebhooks",
        summary = "Register dynamic webhooks",
        description = "Registers webhooks.  **NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.",
        tags = { "Webhooks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContainerForRegisteredWebhooks.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the caller isn't an app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work", "manage:jira-webhook" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/webhook",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ContainerForRegisteredWebhooks> registerDynamicWebhooks(
        @Parameter(name = "WebhookRegistrationDetails", description = "", required = true) @Valid @RequestBody WebhookRegistrationDetails webhookRegistrationDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"webhookRegistrationResult\" : [ { \"createdWebhookId\" : 0, \"errors\" : [ \"errors\", \"errors\" ] }, { \"createdWebhookId\" : 0, \"errors\" : [ \"errors\", \"errors\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/attachment/{id} : Delete attachment
     * Deletes an attachment from an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the project holding the issue containing the attachment:   *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.  *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.
     *
     * @param id The ID of the attachment. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings. (status code 404)
     */
    @Operation(
        operationId = "removeAttachment",
        summary = "Delete attachment",
        description = "Deletes an attachment from an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the project holding the issue containing the attachment:   *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.  *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.",
        tags = { "Issue attachments" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/attachment/{id}"
    )
    
    default ResponseEntity<Void> removeAttachment(
        @Parameter(name = "id", description = "The ID of the attachment.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/field/{fieldId}/context/{contextId}/project/remove : Remove custom field context from projects
     * Removes a custom field context from projects.  A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.  If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param projectIds  (required)
     * @return Returned if the custom field context is removed from the projects. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field, context, or one or more projects are not found. (status code 404)
     */
    @Operation(
        operationId = "removeCustomFieldContextFromProjects",
        summary = "Remove custom field context from projects",
        description = "Removes a custom field context from projects.  A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.  If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the custom field context is removed from the projects.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field, context, or one or more projects are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}/project/remove",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> removeCustomFieldContextFromProjects(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId,
        @Parameter(name = "ProjectIds", description = "", required = true) @Valid @RequestBody ProjectIds projectIds
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId} : Remove gadget from dashboard
     * Removes a dashboard gadget from a dashboard.  When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.  **[Permissions](#permissions) required:** None.
     *
     * @param dashboardId The ID of the dashboard. (required)
     * @param gadgetId The ID of the gadget. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the gadget or the dashboard is not found. (status code 404)
     */
    @Operation(
        operationId = "removeGadget",
        summary = "Remove gadget from dashboard",
        description = "Removes a dashboard gadget from a dashboard.  When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.  **[Permissions](#permissions) required:** None.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the gadget or the dashboard is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> removeGadget(
        @Parameter(name = "dashboardId", description = "The ID of the dashboard.", required = true, in = ParameterIn.PATH) @PathVariable("dashboardId") Long dashboardId,
        @Parameter(name = "gadgetId", description = "The ID of the gadget.", required = true, in = ParameterIn.PATH) @PathVariable("gadgetId") Long gadgetId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/group : Remove group
     * Deletes a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).
     *
     * @param groupname  (optional)
     * @param groupId The ID of the group. This parameter cannot be used with the &#x60;groupname&#x60; parameter. (optional)
     * @param swapGroup As a group&#39;s name can change, use of &#x60;swapGroupId&#x60; is recommended to identify a group.   The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the &#x60;swapGroupId&#x60; parameter. (optional)
     * @param swapGroupId The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the &#x60;swapGroup&#x60; parameter. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the group name is not specified. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing from the request. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the group is not found. (status code 404)
     */
    @Operation(
        operationId = "removeGroup",
        summary = "Remove group",
        description = "Deletes a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the group name is not specified."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing from the request."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the group is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/group"
    )
    
    default ResponseEntity<Void> removeGroup(
        @Parameter(name = "groupname", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupname", required = false) String groupname,
        @Parameter(name = "groupId", description = "The ID of the group. This parameter cannot be used with the `groupname` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId,
        @Parameter(name = "swapGroup", description = "As a group's name can change, use of `swapGroupId` is recommended to identify a group.   The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "swapGroup", required = false) String swapGroup,
        @Parameter(name = "swapGroupId", description = "The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "swapGroupId", required = false) String swapGroupId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId} : Remove issue type from issue type scheme
     * Removes an issue type from an issue type scheme.  This operation cannot remove:   *  any issue type used by issues.  *  any issue types from the default issue type scheme.  *  the last standard issue type from an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeSchemeId The ID of the issue type scheme. (required)
     * @param issueTypeId The ID of the issue type. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type scheme is missing or the issue type is not found in the issue type scheme. (status code 404)
     */
    @Operation(
        operationId = "removeIssueTypeFromIssueTypeScheme",
        summary = "Remove issue type from issue type scheme",
        description = "Removes an issue type from an issue type scheme.  This operation cannot remove:   *  any issue type used by issues.  *  any issue types from the default issue type scheme.  *  the last standard issue type from an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type scheme is missing or the issue type is not found in the issue type scheme.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> removeIssueTypeFromIssueTypeScheme(
        @Parameter(name = "issueTypeSchemeId", description = "The ID of the issue type scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeSchemeId") Long issueTypeSchemeId,
        @Parameter(name = "issueTypeId", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeId") Long issueTypeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove : Remove issue types from context
     * Removes issue types from a custom field context.  A custom field context without any issue types applies to all issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param issueTypeIds  (required)
     * @return Returned if operation is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field, context, or one or more issue types are not found. (status code 404)
     */
    @Operation(
        operationId = "removeIssueTypesFromContext",
        summary = "Remove issue types from context",
        description = "Removes issue types from a custom field context.  A custom field context without any issue types applies to all issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if operation is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field, context, or one or more issue types are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> removeIssueTypesFromContext(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId,
        @Parameter(name = "IssueTypeIds", description = "", required = true) @Valid @RequestBody IssueTypeIds issueTypeIds
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/fieldconfigurationscheme/{id}/mapping/delete : Remove issue types from field configuration scheme
     * Removes issue types from the field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the field configuration scheme. (required)
     * @param issueTypeIdsToRemove The issue type IDs to remove. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field configuration scheme or the issue types are not found. (status code 404)
     */
    @Operation(
        operationId = "removeIssueTypesFromGlobalFieldConfigurationScheme",
        summary = "Remove issue types from field configuration scheme",
        description = "Removes issue types from the field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the field configuration scheme or the issue types are not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> removeIssueTypesFromGlobalFieldConfigurationScheme(
        @Parameter(name = "id", description = "The ID of the field configuration scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "IssueTypeIdsToRemove", description = "The issue type IDs to remove.", required = true) @Valid @RequestBody IssueTypeIdsToRemove issueTypeIdsToRemove
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId} : Remove issue security level
     * Deletes an issue security level.  This operation is [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param schemeId The ID of the issue security scheme. (required)
     * @param levelId The ID of the issue security level to remove. (required)
     * @param replaceWith The ID of the issue security level that will replace the currently selected level. (optional)
     * @return Returned if the request is successful. (status code 303)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue security level isn&#39;t found. (status code 404)
     *         or Returned if a task to remove the issue security level is already running. (status code 409)
     */
    @Operation(
        operationId = "removeLevel",
        summary = "Remove issue security level",
        description = "Deletes an issue security level.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "303", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgressBeanObject.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue security level isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "409", description = "Returned if a task to remove the issue security level is already running.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> removeLevel(
        @Parameter(name = "schemeId", description = "The ID of the issue security scheme.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") String schemeId,
        @Parameter(name = "levelId", description = "The ID of the issue security level to remove.", required = true, in = ParameterIn.PATH) @PathVariable("levelId") String levelId,
        @Parameter(name = "replaceWith", description = "The ID of the issue security level that will replace the currently selected level.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "replaceWith", required = false) String replaceWith
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove : Remove mappings from issue type screen scheme
     * Removes issue type to screen scheme mappings from an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @param issueTypeIds  (required)
     * @return Returned if the screen scheme mappings are removed from the issue type screen scheme. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type screen scheme or one or more issue type mappings are not found. (status code 404)
     */
    @Operation(
        operationId = "removeMappingsFromIssueTypeScreenScheme",
        summary = "Remove mappings from issue type screen scheme",
        description = "Removes issue type to screen scheme mappings from an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the screen scheme mappings are removed from the issue type screen scheme.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type screen scheme or one or more issue type mappings are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> removeMappingsFromIssueTypeScreenScheme(
        @Parameter(name = "issueTypeScreenSchemeId", description = "The ID of the issue type screen scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeScreenSchemeId") String issueTypeScreenSchemeId,
        @Parameter(name = "IssueTypeIds", description = "", required = true) @Valid @RequestBody IssueTypeIds issueTypeIds
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId} : Remove member from issue security level
     * Removes an issue security level member from an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param schemeId The ID of the issue security scheme. (required)
     * @param levelId The ID of the issue security level. (required)
     * @param memberId The ID of the issue security level member to be removed. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the security scheme isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "removeMemberFromSecurityLevel",
        summary = "Remove member from issue security level",
        description = "Removes an issue security level member from an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the security scheme isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> removeMemberFromSecurityLevel(
        @Parameter(name = "schemeId", description = "The ID of the issue security scheme.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") String schemeId,
        @Parameter(name = "levelId", description = "The ID of the issue security level.", required = true, in = ParameterIn.PATH) @PathVariable("levelId") String levelId,
        @Parameter(name = "memberId", description = "The ID of the issue security level member to be removed.", required = true, in = ParameterIn.PATH) @PathVariable("memberId") String memberId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId} : Remove notification from notification scheme
     * Removes a notification from a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param notificationSchemeId The ID of the notification scheme. (required)
     * @param notificationId The ID of the notification. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if either the notification scheme or notification isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "removeNotificationFromNotificationScheme",
        summary = "Remove notification from notification scheme",
        description = "Removes a notification from a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue notification schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if either the notification scheme or notification isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> removeNotificationFromNotificationScheme(
        @Parameter(name = "notificationSchemeId", description = "The ID of the notification scheme.", required = true, in = ParameterIn.PATH) @PathVariable("notificationSchemeId") String notificationSchemeId,
        @Parameter(name = "notificationId", description = "The ID of the notification.", required = true, in = ParameterIn.PATH) @PathVariable("notificationId") String notificationId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/mypreferences : Delete preference
     * Deletes a preference of the user, which restores the default value of system defined settings.  Note that these keys are deprecated:   *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.  Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param key The key of the preference. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the key is not provided or not found. (status code 404)
     */
    @Operation(
        operationId = "removePreference",
        summary = "Delete preference",
        description = "Deletes a preference of the user, which restores the default value of system defined settings.  Note that these keys are deprecated:   *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.  Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Myself" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the key is not provided or not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/mypreferences"
    )
    
    default ResponseEntity<Void> removePreference(
        @NotNull @Parameter(name = "key", description = "The key of the preference.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = true) String key
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/projectCategory/{id} : Delete project category
     * Deletes a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id ID of the project category to delete. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the project category is not found. (status code 404)
     */
    @Operation(
        operationId = "removeProjectCategory",
        summary = "Delete project category",
        description = "Deletes a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project categories" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the project category is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/projectCategory/{id}"
    )
    
    default ResponseEntity<Void> removeProjectCategory(
        @Parameter(name = "id", description = "ID of the project category to delete.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id} : Remove screen tab field
     * Removes a field from a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @param id The ID of the field. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen, screen tab, or field is not found. (status code 404)
     */
    @Operation(
        operationId = "removeScreenTabField",
        summary = "Remove screen tab field",
        description = "Removes a field from a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen tab fields" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen, screen tab, or field is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}"
    )
    
    default ResponseEntity<Void> removeScreenTabField(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId,
        @Parameter(name = "tabId", description = "The ID of the screen tab.", required = true, in = ParameterIn.PATH) @PathVariable("tabId") Long tabId,
        @Parameter(name = "id", description = "The ID of the field.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/user : Delete user
     * Deletes a user. If the operation completes successfully then the user is removed from Jira&#39;s user base. This operation does not delete the user&#39;s Atlassian account.  **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     *
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (required)
     * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param key This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the user cannot be removed. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the user is not found. (status code 404)
     */
    @Operation(
        operationId = "removeUser",
        summary = "Delete user",
        description = "Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.  **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if the user cannot be removed."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the user is not found.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/user"
    )
    
    default ResponseEntity<Void> removeUser(
        @NotNull @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = true) String accountId,
        @Parameter(name = "username", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username,
        @Parameter(name = "key", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/group/user : Remove user from group
     * Removes a user from a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     *
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (required)
     * @param groupname As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended to identify a group.   The name of the group. This parameter cannot be used with the &#x60;groupId&#x60; parameter. (optional)
     * @param groupId The ID of the group. This parameter cannot be used with the &#x60;groupName&#x60; parameter. (optional)
     * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  &#x60;groupName&#x60; is missing.  *  &#x60;accountId&#x60; is missing. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing from the request. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the group or user are not found. (status code 404)
     */
    @Operation(
        operationId = "removeUserFromGroup",
        summary = "Remove user from group",
        description = "Removes a user from a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `groupName` is missing.  *  `accountId` is missing."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing from the request."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the group or user are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/group/user"
    )
    
    default ResponseEntity<Void> removeUserFromGroup(
        @NotNull @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = true) String accountId,
        @Parameter(name = "groupname", description = "As a group's name can change, use of `groupId` is recommended to identify a group.   The name of the group. This parameter cannot be used with the `groupId` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupname", required = false) String groupname,
        @Parameter(name = "groupId", description = "The ID of the group. This parameter cannot be used with the `groupName` parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId,
        @Parameter(name = "username", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issue/{issueIdOrKey}/votes : Delete vote
     * Deletes a user&#39;s vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.  This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  voting is disabled.  *  the user has not voted on the issue.  *  the issue is not found. (status code 404)
     */
    @Operation(
        operationId = "removeVote",
        summary = "Delete vote",
        description = "Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.  This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue votes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  voting is disabled.  *  the user has not voted on the issue.  *  the issue is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issue/{issueIdOrKey}/votes"
    )
    
    default ResponseEntity<Void> removeVote(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/issue/{issueIdOrKey}/watchers : Delete watcher
     * Deletes a user as a watcher of an issue.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required. (optional)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if &#x60;accountId&#x60; is not supplied. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the permission to manage the watcher list. (status code 403)
     *         or Returned if the issue or the user is not found or the user does not have permission to view the issue. (status code 404)
     */
    @Operation(
        operationId = "removeWatcher",
        summary = "Delete watcher",
        description = "Deletes a user as a watcher of an issue.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.",
        tags = { "Issue watchers" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if `accountId` is not supplied."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the permission to manage the watcher list."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or the user is not found or the user does not have permission to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/issue/{issueIdOrKey}/watchers"
    )
    
    default ResponseEntity<Void> removeWatcher(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "username", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username,
        @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/screens/{screenId}/tabs/{tabId} : Update screen tab
     * Updates the name of a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenId The ID of the screen. (required)
     * @param tabId The ID of the screen tab. (required)
     * @param screenableTab  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen or screen tab is not found. (status code 404)
     */
    @Operation(
        operationId = "renameScreenTab",
        summary = "Update screen tab",
        description = "Updates the name of a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen tabs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScreenableTab.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen or screen tab is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/screens/{screenId}/tabs/{tabId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ScreenableTab> renameScreenTab(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId,
        @Parameter(name = "tabId", description = "The ID of the screen tab.", required = true, in = ParameterIn.PATH) @PathVariable("tabId") Long tabId,
        @Parameter(name = "ScreenableTab", description = "", required = true) @Valid @RequestBody ScreenableTab screenableTab
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/field/{fieldId}/context/{contextId}/option/move : Reorder custom field options (context)
     * Changes the order of custom field options or cascading options in a context.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param orderOfCustomFieldOptions  (required)
     * @return Returned if options are reordered. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field, the context, or one or more of the options is not found.. (status code 404)
     */
    @Operation(
        operationId = "reorderCustomFieldOptions",
        summary = "Reorder custom field options (context)",
        description = "Changes the order of custom field options or cascading options in a context.  This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field options" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if options are reordered.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field, the context, or one or more of the options is not found..")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}/option/move",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> reorderCustomFieldOptions(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId,
        @Parameter(name = "OrderOfCustomFieldOptions", description = "", required = true) @Valid @RequestBody OrderOfCustomFieldOptions orderOfCustomFieldOptions
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move : Change order of issue types
     * Changes the order of issue types in an issue type scheme.  The request body parameters must meet the following requirements:   *  all of the issue types must belong to the issue type scheme.  *  either &#x60;after&#x60; or &#x60;position&#x60; must be provided.  *  the issue type in &#x60;after&#x60; must not be in the issue type list.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeSchemeId The ID of the issue type scheme. (required)
     * @param orderOfIssueTypes  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "reorderIssueTypesInIssueTypeScheme",
        summary = "Change order of issue types",
        description = "Changes the order of issue types in an issue type scheme.  The request body parameters must meet the following requirements:   *  all of the issue types must belong to the issue type scheme.  *  either `after` or `position` must be provided.  *  the issue type in `after` must not be in the issue type list.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> reorderIssueTypesInIssueTypeScheme(
        @Parameter(name = "issueTypeSchemeId", description = "The ID of the issue type scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeSchemeId") Long issueTypeSchemeId,
        @Parameter(name = "OrderOfIssueTypes", description = "", required = true) @Valid @RequestBody OrderOfIssueTypes orderOfIssueTypes
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/field/{fieldKey}/option/{optionId}/issue : Replace issue field option
     * Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.  Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using &#x60;overrideScreenSecurity&#x60; and &#x60;overrideEditableFlag&#x60;.  This is an [asynchronous operation](#async). The response object contains a link to the long-running task.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     *
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param optionId The ID of the option to be deselected. (required)
     * @param replaceWith The ID of the option that will replace the currently selected option. (optional)
     * @param jql A JQL query that specifies the issues to be updated. For example, *project&#x3D;10000*. (optional)
     * @param overrideScreenSecurity Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission. (optional, default to false)
     * @param overrideEditableFlag Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
     * @return Returned if the long-running task to deselect the option is started. (status code 303)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field is not found or does not support options, or the options to be replaced are not found. (status code 404)
     */
    @Operation(
        operationId = "replaceIssueFieldOption",
        summary = "Replace issue field option",
        description = "Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.  Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.  This is an [asynchronous operation](#async). The response object contains a link to the long-running task.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.",
        tags = { "Issue custom field options (apps)" },
        responses = {
            @ApiResponse(responseCode = "303", description = "Returned if the long-running task to deselect the option is started.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskProgressBeanRemoveOptionFromIssuesResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field is not found or does not support options, or the options to be replaced are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/field/{fieldKey}/option/{optionId}/issue",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> replaceIssueFieldOption(
        @Parameter(name = "fieldKey", description = "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`", required = true, in = ParameterIn.PATH) @PathVariable("fieldKey") String fieldKey,
        @Parameter(name = "optionId", description = "The ID of the option to be deselected.", required = true, in = ParameterIn.PATH) @PathVariable("optionId") Long optionId,
        @Parameter(name = "replaceWith", description = "The ID of the option that will replace the currently selected option.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "replaceWith", required = false) Long replaceWith,
        @Parameter(name = "jql", description = "A JQL query that specifies the issues to be updated. For example, *project=10000*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jql", required = false) String jql,
        @Parameter(name = "overrideScreenSecurity", description = "Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideScreenSecurity", required = false, defaultValue = "false") Boolean overrideScreenSecurity,
        @Parameter(name = "overrideEditableFlag", description = "Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideEditableFlag", required = false, defaultValue = "false") Boolean overrideEditableFlag
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/filter/{id}/columns : Reset columns
     * Reset the user&#39;s column configuration for the filter to the default.  **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @param id The ID of the filter. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "resetColumns",
        summary = "Reset columns",
        description = "Reset the user's column configuration for the filter to the default.  **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/filter/{id}/columns"
    )
    
    default ResponseEntity<Void> resetColumns(
        @Parameter(name = "id", description = "The ID of the filter.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/3/user/columns : Reset user default columns
     * Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If &#x60;accountId&#x60; is not passed, the calling user&#39;s default columns are reset.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.  *  Permission to access Jira, to set the calling user&#39;s columns.
     *
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
     * @param username This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission or is not accessing their user record. (status code 403)
     */
    @Operation(
        operationId = "resetUserColumns",
        summary = "Reset user default columns",
        description = "Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.  *  Permission to access Jira, to set the calling user's columns.",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission or is not accessing their user record.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/3/user/columns"
    )
    
    default ResponseEntity<Void> resetUserColumns(
        @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "username", description = "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/project/{projectIdOrKey}/restore : Restore deleted or archived project
     * Restores a project that has been archived or placed in the Jira recycle bin.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user does not have the necessary permission. (status code 404)
     */
    @Operation(
        operationId = "restore",
        summary = "Restore deleted or archived project",
        description = "Restores a project that has been archived or placed in the Jira recycle bin.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/project/{projectIdOrKey}/restore",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Project> restore(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"components\" : [ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ], \"roles\" : { \"key\" : \"https://openapi-generator.tech\" }, \"description\" : \"description\", \"isPrivate\" : true, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ], \"archived\" : true, \"assigneeType\" : \"PROJECT_LEAD\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"email\" : \"email\", \"key\" : \"key\", \"archivedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"retentionTillDate\" : \"2000-01-23T04:56:07.000+00:00\", \"favourite\" : true, \"url\" : \"url\", \"expand\" : \"expand\", \"deleted\" : true, \"simplified\" : true, \"deletedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"versions\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"style\" : \"classic\", \"properties\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/field/{id}/restore : Restore custom field from trash
     * Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of a custom field. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the custom field is not found. (status code 404)
     */
    @Operation(
        operationId = "restoreCustomField",
        summary = "Restore custom field from trash",
        description = "Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue fields" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/field/{id}/restore",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> restoreCustomField(
        @Parameter(name = "id", description = "The ID of a custom field.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/jql/sanitize : Sanitize JQL queries
     * Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn&#39;t have permission to view the entity.  For example, if the query contains the clause *project &#x3D; &#39;Secret project&#39;*, and a user does not have browse permission for the project \&quot;Secret project\&quot;, the sanitized query replaces the clause with *project &#x3D; 12345\&quot;* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.  Note that sanitization doesn&#39;t make the queries GDPR-compliant, because it doesn&#39;t remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).  Before sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param jqlQueriesToSanitize  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "sanitiseJqlQueries",
        summary = "Sanitize JQL queries",
        description = "Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn't have permission to view the entity.  For example, if the query contains the clause *project = 'Secret project'*, and a user does not have browse permission for the project \"Secret project\", the sanitized query replaces the clause with *project = 12345\"* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.  Note that sanitization doesn't make the queries GDPR-compliant, because it doesn't remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).  Before sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "JQL" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SanitizedJqlQueries.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/jql/sanitize",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SanitizedJqlQueries> sanitiseJqlQueries(
        @Parameter(name = "JqlQueriesToSanitize", description = "", required = true) @Valid @RequestBody JqlQueriesToSanitize jqlQueriesToSanitize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"queries\" : [ { \"accountId\" : \"accountId\", \"initialQuery\" : \"initialQuery\", \"sanitizedQuery\" : \"sanitizedQuery\", \"errors\" : \"\" }, { \"accountId\" : \"accountId\", \"initialQuery\" : \"initialQuery\", \"sanitizedQuery\" : \"sanitizedQuery\", \"errors\" : \"\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/statuses/search : Search statuses paginated
     * Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     *
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;usages&#x60; Returns the project and issue types that use the status in their workflow. (optional)
     * @param projectId The project the status is part of or null for global statuses. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 200)
     * @param searchString Term to match status names against or null to search for all statuses in the search scope. (optional)
     * @param statusCategory Category of the status to filter by. The supported values are: &#x60;TODO&#x60;, &#x60;IN_PROGRESS&#x60;, and &#x60;DONE&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. (status code 401)
     */
    @Operation(
        operationId = "search",
        summary = "Search statuses paginated",
        description = "Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)",
        tags = { "Status" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageOfStatuses.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/statuses/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageOfStatuses> search(
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `usages` Returns the project and issue types that use the status in their workflow.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "projectId", description = "The project the status is part of or null for global statuses.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) String projectId,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "200") Integer maxResults,
        @Size(max = 255) @Parameter(name = "searchString", description = "Term to match status names against or null to search for all statuses in the search scope.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchString", required = false) String searchString,
        @Parameter(name = "statusCategory", description = "Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "statusCategory", required = false) String statusCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"nextPage\", \"values\" : [ { \"scope\" : { \"project\" : { \"id\" : \"id\" }, \"type\" : \"PROJECT\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"usages\" : [ { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] }, { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] } ], \"statusCategory\" : \"TODO\" }, { \"scope\" : { \"project\" : { \"id\" : \"id\" }, \"type\" : \"PROJECT\" }, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"usages\" : [ { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] }, { \"project\" : { \"id\" : \"id\" }, \"issueTypes\" : [ \"issueTypes\", \"issueTypes\" ] } ], \"statusCategory\" : \"TODO\" } ], \"self\" : \"self\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/search : Search for issues using JQL (GET)
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param jql The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:   *  If no JQL expression is provided, all issues are returned.  *  &#x60;username&#x60; and &#x60;userkey&#x60; cannot be used as search terms due to privacy reasons. Use &#x60;accountId&#x60; instead.  *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required. (optional)
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting &#x60;id&#x60; or &#x60;key&#x60; only. (optional, default to 50)
     * @param validateQuery Determines how to validate the JQL query and treat the validation results. Supported values are:   *  &#x60;strict&#x60; Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).  *  &#x60;warn&#x60; Returns all errors as warnings.  *  &#x60;none&#x60; No validation is performed.  *  &#x60;true&#x60; *Deprecated* A legacy synonym for &#x60;strict&#x60;.  *  &#x60;false&#x60; *Deprecated* A legacy synonym for &#x60;warn&#x60;.  Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the &#x60;validateQuery&#x60; value. (optional, default to strict)
     * @param fields A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;*all&#x60; Returns all fields.  *  &#x60;*navigable&#x60; Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  Examples:   *  &#x60;summary,comment&#x60; Returns only the summary and comments fields.  *  &#x60;-description&#x60; Returns all navigable (default) fields except description.  *  &#x60;*all,-comment&#x60; Returns all fields except comments.  This parameter may be specified multiple times. For example, &#x60;fields&#x3D;field1,field2&amp;fields&#x3D;field3&#x60;.  Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields. (optional)
     * @param expand Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;renderedFields&#x60; Returns field values rendered in HTML format.  *  &#x60;names&#x60; Returns the display name of each field.  *  &#x60;schema&#x60; Returns the schema describing a field type.  *  &#x60;transitions&#x60; Returns all possible transitions for the issue.  *  &#x60;operations&#x60; Returns all possible operations for the issue.  *  &#x60;editmeta&#x60; Returns information about how each field can be edited.  *  &#x60;changelog&#x60; Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  &#x60;versionedRepresentations&#x60; Instead of &#x60;fields&#x60;, returns &#x60;versionedRepresentations&#x60; a JSON array containing each version of a field&#39;s value, with the highest numbered item representing the most recent version. (optional)
     * @param properties A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, &#x60;properties&#x3D;prop1,prop2&amp;properties&#x3D;prop3&#x60;. A maximum of 5 issue property keys can be specified. (optional)
     * @param fieldsByKeys Reference fields by their key (rather than ID). (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the JQL query is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "searchForIssuesUsingJql",
        summary = "Search for issues using JQL (GET)",
        description = "Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchResults.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the JQL query is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SearchResults> searchForIssuesUsingJql(
        @Parameter(name = "jql", description = "The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:   *  If no JQL expression is provided, all issues are returned.  *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.  *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "jql", required = false) String jql,
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Integer startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "validateQuery", description = "Determines how to validate the JQL query and treat the validation results. Supported values are:   *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).  *  `warn` Returns all errors as warnings.  *  `none` No validation is performed.  *  `true` *Deprecated* A legacy synonym for `strict`.  *  `false` *Deprecated* A legacy synonym for `warn`.  Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "validateQuery", required = false, defaultValue = "strict") String validateQuery,
        @Parameter(name = "fields", description = "A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  `*all` Returns all fields.  *  `*navigable` Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  Examples:   *  `summary,comment` Returns only the summary and comments fields.  *  `-description` Returns all navigable (default) fields except description.  *  `*all,-comment` Returns all fields except comments.  This parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.  Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields", required = false) List<String> fields,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:   *  `renderedFields` Returns field values rendered in HTML format.  *  `names` Returns the display name of each field.  *  `schema` Returns the schema describing a field type.  *  `transitions` Returns all possible transitions for the issue.  *  `operations` Returns all possible operations for the issue.  *  `editmeta` Returns information about how each field can be edited.  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "properties", description = "A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "properties", required = false) List<String> properties,
        @Parameter(name = "fieldsByKeys", description = "Reference fields by their key (rather than ID).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fieldsByKeys", required = false, defaultValue = "false") Boolean fieldsByKeys
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : { \"key\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" } }, \"warningMessages\" : [ \"warningMessages\", \"warningMessages\" ], \"expand\" : \"expand\", \"total\" : 1, \"names\" : { \"key\" : \"names\" }, \"maxResults\" : 0, \"issues\" : [ { \"schema\" : { \"key\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" } }, \"fieldsToInclude\" : { \"excluded\" : [ \"excluded\", \"excluded\" ], \"actuallyIncluded\" : [ \"actuallyIncluded\", \"actuallyIncluded\" ], \"included\" : [ \"included\", \"included\" ] }, \"transitions\" : [ { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } }, { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } } ], \"renderedFields\" : { \"key\" : \"\" }, \"expand\" : \"expand\", \"names\" : { \"key\" : \"names\" }, \"versionedRepresentations\" : { \"key\" : { \"key\" : \"\" } }, \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"fields\" : { \"key\" : \"\" }, \"key\" : \"key\", \"properties\" : { \"key\" : \"\" } }, { \"schema\" : { \"key\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" } }, \"fieldsToInclude\" : { \"excluded\" : [ \"excluded\", \"excluded\" ], \"actuallyIncluded\" : [ \"actuallyIncluded\", \"actuallyIncluded\" ], \"included\" : [ \"included\", \"included\" ] }, \"transitions\" : [ { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } }, { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } } ], \"renderedFields\" : { \"key\" : \"\" }, \"expand\" : \"expand\", \"names\" : { \"key\" : \"names\" }, \"versionedRepresentations\" : { \"key\" : { \"key\" : \"\" } }, \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"fields\" : { \"key\" : \"\" }, \"key\" : \"key\", \"properties\" : { \"key\" : \"\" } } ], \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/search : Search for issues using JQL (POST)
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param searchRequestBean A JSON object containing the search request. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the JQL query is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "searchForIssuesUsingJqlPost",
        summary = "Search for issues using JQL (POST)",
        description = "Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchResults.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the JQL query is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SearchResults> searchForIssuesUsingJqlPost(
        @Parameter(name = "SearchRequestBean", description = "A JSON object containing the search request.", required = true) @Valid @RequestBody SearchRequestBean searchRequestBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"schema\" : { \"key\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" } }, \"warningMessages\" : [ \"warningMessages\", \"warningMessages\" ], \"expand\" : \"expand\", \"total\" : 1, \"names\" : { \"key\" : \"names\" }, \"maxResults\" : 0, \"issues\" : [ { \"schema\" : { \"key\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" } }, \"fieldsToInclude\" : { \"excluded\" : [ \"excluded\", \"excluded\" ], \"actuallyIncluded\" : [ \"actuallyIncluded\", \"actuallyIncluded\" ], \"included\" : [ \"included\", \"included\" ] }, \"transitions\" : [ { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } }, { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } } ], \"renderedFields\" : { \"key\" : \"\" }, \"expand\" : \"expand\", \"names\" : { \"key\" : \"names\" }, \"versionedRepresentations\" : { \"key\" : { \"key\" : \"\" } }, \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"fields\" : { \"key\" : \"\" }, \"key\" : \"key\", \"properties\" : { \"key\" : \"\" } }, { \"schema\" : { \"key\" : { \"system\" : \"system\", \"configuration\" : { \"key\" : \"\" }, \"custom\" : \"custom\", \"type\" : \"type\", \"customId\" : 2, \"items\" : \"items\" } }, \"fieldsToInclude\" : { \"excluded\" : [ \"excluded\", \"excluded\" ], \"actuallyIncluded\" : [ \"actuallyIncluded\", \"actuallyIncluded\" ], \"included\" : [ \"included\", \"included\" ] }, \"transitions\" : [ { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } }, { \"hasScreen\" : true, \"isAvailable\" : true, \"expand\" : \"expand\", \"isGlobal\" : true, \"isInitial\" : true, \"looped\" : true, \"name\" : \"name\", \"id\" : \"id\", \"isConditional\" : true, \"fields\" : { \"key\" : { \"allowedValues\" : [ \"\", \"\" ], \"hasDefaultValue\" : true, \"operations\" : [ \"operations\", \"operations\" ], \"configuration\" : { \"key\" : \"\" }, \"defaultValue\" : \"\", \"name\" : \"name\", \"autoCompleteUrl\" : \"autoCompleteUrl\", \"key\" : \"key\", \"required\" : true } } } ], \"renderedFields\" : { \"key\" : \"\" }, \"expand\" : \"expand\", \"names\" : { \"key\" : \"names\" }, \"versionedRepresentations\" : { \"key\" : { \"key\" : \"\" } }, \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"fields\" : { \"key\" : \"\" }, \"key\" : \"key\", \"properties\" : { \"key\" : \"\" } } ], \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/priority/search : Search priorities
     * Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:   *  a list of priority IDs. Any invalid priority IDs are ignored.  *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;2&amp;id&#x3D;3&#x60;. (optional)
     * @param onlyDefault Whether only the default priority is returned. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "searchPriorities",
        summary = "Search priorities",
        description = "Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:   *  a list of priority IDs. Any invalid priority IDs are ignored.  *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Issue priorities" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanPriority.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/priority/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanPriority> searchPriorities(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") String startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") String maxResults,
        @Parameter(name = "id", description = "The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=2&id=3`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) List<String> id,
        @Parameter(name = "onlyDefault", description = "Whether only the default priority is returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "onlyDefault", required = false, defaultValue = "false") Boolean onlyDefault
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"isDefault\" : true, \"statusColor\" : \"statusColor\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" }, { \"isDefault\" : true, \"statusColor\" : \"statusColor\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/project/search : Get projects paginated
     * Returns a [paginated](#pagination) list of projects visible to the user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Projects are returned only where the user has one of:   *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param orderBy [Order](#ordering) the results by a field.   *  &#x60;category&#x60; Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).  *  &#x60;issueCount&#x60; Sorts by the total number of issues in each project.  *  &#x60;key&#x60; Sorts by project key.  *  &#x60;lastIssueUpdatedTime&#x60; Sorts by the last issue update time.  *  &#x60;name&#x60; Sorts by project name.  *  &#x60;owner&#x60; Sorts by project lead.  *  &#x60;archivedDate&#x60; EXPERIMENTAL. Sorts by project archived date.  *  &#x60;deletedDate&#x60; EXPERIMENTAL. Sorts by project deleted date. (optional, default to key)
     * @param id The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. Up to 50 project IDs can be provided. (optional)
     * @param keys The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, &#x60;keys&#x3D;PA&amp;keys&#x3D;PB&#x60;. Up to 50 project keys can be provided. (optional)
     * @param query Filter the results using a literal string. Projects with a matching &#x60;key&#x60; or &#x60;name&#x60; are returned (case insensitive). (optional)
     * @param typeKey Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are &#x60;business&#x60;, &#x60;service_desk&#x60;, and &#x60;software&#x60;. (optional)
     * @param categoryId The ID of the project&#39;s category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. (optional)
     * @param action Filter results by projects for which the user can:   *  &#x60;view&#x60; the project, meaning that they have one of the following permissions:           *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  &#x60;browse&#x60; the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  &#x60;edit&#x60; the project, meaning that they have one of the following permissions:           *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to view)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  &#x60;description&#x60; Returns the project description.  *  &#x60;projectKeys&#x60; Returns all project keys associated with a project.  *  &#x60;lead&#x60; Returns information about the project lead.  *  &#x60;issueTypes&#x60; Returns all issue types associated with the project.  *  &#x60;url&#x60; Returns the URL associated with the project.  *  &#x60;insight&#x60; EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project. (optional)
     * @param status EXPERIMENTAL. Filter results by project status:   *  &#x60;live&#x60; Search live projects.  *  &#x60;archived&#x60; Search archived projects.  *  &#x60;deleted&#x60; Search deleted projects, those in the recycle bin. (optional)
     * @param properties EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. (optional)
     * @param propertyQuery EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of &#x60;nested&#x60; from &#x60;{\&quot;something\&quot;:{\&quot;nested\&quot;:1,\&quot;other\&quot;:2}}&#x60; use &#x60;[thepropertykey].something.nested&#x3D;1&#x60;. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (&#x3D;) characters. Note that &#x60;thepropertykey&#x60; is only returned when included in &#x60;properties&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if no projects matching the search criteria are found. (status code 404)
     */
    @Operation(
        operationId = "searchProjects",
        summary = "Get projects paginated",
        description = "Returns a [paginated](#pagination) list of projects visible to the user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Projects are returned only where the user has one of:   *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanProject.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if no projects matching the search criteria are found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/project/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanProject> searchProjects(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") Long startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") Integer maxResults,
        @Parameter(name = "orderBy", description = "[Order](#ordering) the results by a field.   *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).  *  `issueCount` Sorts by the total number of issues in each project.  *  `key` Sorts by project key.  *  `lastIssueUpdatedTime` Sorts by the last issue update time.  *  `name` Sorts by project name.  *  `owner` Sorts by project lead.  *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.  *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderBy", required = false, defaultValue = "key") String orderBy,
        @Parameter(name = "id", description = "The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<Long> id,
        @Parameter(name = "keys", description = "The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "keys", required = false) Set<String> keys,
        @Parameter(name = "query", description = "Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "typeKey", description = "Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "typeKey", required = false) String typeKey,
        @Parameter(name = "categoryId", description = "The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Long categoryId,
        @Parameter(name = "action", description = "Filter results by projects for which the user can:   *  `view` the project, meaning that they have one of the following permissions:           *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  `edit` the project, meaning that they have one of the following permissions:           *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "action", required = false, defaultValue = "view") String action,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  `description` Returns the project description.  *  `projectKeys` Returns all project keys associated with a project.  *  `lead` Returns information about the project lead.  *  `issueTypes` Returns all issue types associated with the project.  *  `url` Returns the URL associated with the project.  *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "status", description = "EXPERIMENTAL. Filter results by project status:   *  `live` Search live projects.  *  `archived` Search archived projects.  *  `deleted` Search deleted projects, those in the recycle bin.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) List<String> status,
        @Parameter(name = "properties", description = "EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "properties", required = false) List<@Valid Object> properties,
        @Parameter(name = "propertyQuery", description = "EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{\"something\":{\"nested\":1,\"other\":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "propertyQuery", required = false) String propertyQuery
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"components\" : [ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ], \"roles\" : { \"key\" : \"https://openapi-generator.tech\" }, \"description\" : \"description\", \"isPrivate\" : true, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ], \"archived\" : true, \"assigneeType\" : \"PROJECT_LEAD\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"email\" : \"email\", \"key\" : \"key\", \"archivedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"retentionTillDate\" : \"2000-01-23T04:56:07.000+00:00\", \"favourite\" : true, \"url\" : \"url\", \"expand\" : \"expand\", \"deleted\" : true, \"simplified\" : true, \"deletedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"versions\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"style\" : \"classic\", \"properties\" : { \"key\" : \"\" } }, { \"components\" : [ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ], \"roles\" : { \"key\" : \"https://openapi-generator.tech\" }, \"description\" : \"description\", \"isPrivate\" : true, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ], \"archived\" : true, \"assigneeType\" : \"PROJECT_LEAD\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"email\" : \"email\", \"key\" : \"key\", \"archivedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"retentionTillDate\" : \"2000-01-23T04:56:07.000+00:00\", \"favourite\" : true, \"url\" : \"url\", \"expand\" : \"expand\", \"deleted\" : true, \"simplified\" : true, \"deletedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"versions\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"style\" : \"classic\", \"properties\" : { \"key\" : \"\" } } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuesecurityschemes/project : Get projects using issue security schemes
     * Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don&#39;t provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param issueSecuritySchemeId The list of security scheme IDs to be filtered out. (optional)
     * @param projectId The list of project IDs to be filtered out. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the search criteria is invalid.If you specify the project ID parameter (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "searchProjectsUsingSecuritySchemes",
        summary = "Get projects using issue security schemes",
        description = "Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanIssueSecuritySchemeToProjectMapping.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the search criteria is invalid.If you specify the project ID parameter", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuesecurityschemes/project",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanIssueSecuritySchemeToProjectMapping> searchProjectsUsingSecuritySchemes(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") String startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") String maxResults,
        @Parameter(name = "issueSecuritySchemeId", description = "The list of security scheme IDs to be filtered out.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "issueSecuritySchemeId", required = false) Set<String> issueSecuritySchemeId,
        @Parameter(name = "projectId", description = "The list of project IDs to be filtered out.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Set<String> projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"projectId\" : \"projectId\" }, { \"issueSecuritySchemeId\" : \"issueSecuritySchemeId\", \"projectId\" : \"projectId\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/resolution/search : Search resolutions
     * Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:   *  a list of resolutions IDs.  *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id The list of resolutions IDs to be filtered out (optional)
     * @param onlyDefault When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "searchResolutions",
        summary = "Search resolutions",
        description = "Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:   *  a list of resolutions IDs.  *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Issue resolutions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanResolutionJsonBean.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/resolution/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanResolutionJsonBean> searchResolutions(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") String startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") String maxResults,
        @Parameter(name = "id", description = "The list of resolutions IDs to be filtered out", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) List<String> id,
        @Parameter(name = "onlyDefault", description = "When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false", in = ParameterIn.QUERY) @Valid @RequestParam(value = "onlyDefault", required = false, defaultValue = "false") Boolean onlyDefault
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"default\" : true, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" }, { \"default\" : true, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\" } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/issuesecurityschemes/search : Search issue security schemes
     * Returns a [paginated](#pagination) list of issue security schemes.   If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \\{@link IssueSecuritySchemeResource\\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\\} to obtain all projects related to scheme.  Only issue security schemes in the context of classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param startAt The index of the first item to return in a page of results (page offset). (optional, default to 0)
     * @param maxResults The maximum number of items to return per page. (optional, default to 50)
     * @param id The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;. (optional)
     * @param projectId The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "searchSecuritySchemes",
        summary = "Search issue security schemes",
        description = "Returns a [paginated](#pagination) list of issue security schemes.   If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \\{@link IssueSecuritySchemeResource\\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\\} to obtain all projects related to scheme.  Only issue security schemes in the context of classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PageBeanSecuritySchemeWithProjects.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/issuesecurityschemes/search",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PageBeanSecuritySchemeWithProjects> searchSecuritySchemes(
        @Parameter(name = "startAt", description = "The index of the first item to return in a page of results (page offset).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startAt", required = false, defaultValue = "0") String startAt,
        @Parameter(name = "maxResults", description = "The maximum number of items to return per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxResults", required = false, defaultValue = "50") String maxResults,
        @Parameter(name = "id", description = "The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Set<String> id,
        @Parameter(name = "projectId", description = "The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Set<String> projectId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 1, \"isLast\" : true, \"maxResults\" : 0, \"nextPage\" : \"https://openapi-generator.tech\", \"values\" : [ { \"defaultLevel\" : 5, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : 5, \"projectIds\" : [ 2, 2 ] }, { \"defaultLevel\" : 5, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : 5, \"projectIds\" : [ 2, 2 ] } ], \"self\" : \"https://openapi-generator.tech\", \"startAt\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/configuration/timetracking : Select time tracking provider
     * Selects a time tracking provider.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param timeTrackingProvider  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the time tracking provider is not found. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "selectTimeTrackingImplementation",
        summary = "Select time tracking provider",
        description = "Selects a time tracking provider.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Time tracking" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the time tracking provider is not found."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/configuration/timetracking",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> selectTimeTrackingImplementation(
        @Parameter(name = "TimeTrackingProvider", description = "", required = true) @Valid @RequestBody TimeTrackingProvider timeTrackingProvider
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/project/{projectIdOrKey}/role/{id} : Set actors for project role
     * Sets the actors for a project role for a project, replacing all existing actors.  To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param projectRoleActorsUpdateBean The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group&#39;s name can change, use of group ID is recommended. (required)
     * @return Returned if the request is successful. The complete list of actors for the project is returned. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. (status code 401)
     *         or Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active. (status code 404)
     */
    @Operation(
        operationId = "setActors",
        summary = "Set actors for project role",
        description = "Sets the actors for a project role for a project, replacing all existing actors.  To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project role actors" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful. The complete list of actors for the project is returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectRole.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/project/{projectIdOrKey}/role/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectRole> setActors(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "id", description = "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ProjectRoleActorsUpdateBean", description = "The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.", required = true) @Valid @RequestBody ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"actors\" : [ { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" }, { \"avatarUrl\" : \"https://openapi-generator.tech\", \"displayName\" : \"displayName\", \"actorGroup\" : \"\", \"name\" : \"name\", \"id\" : 0, \"type\" : \"atlassian-group-role-actor\", \"actorUser\" : \"\" } ], \"default\" : true, \"roleConfigurable\" : true, \"currentUserRole\" : true, \"name\" : \"name\", \"admin\" : true, \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 6, \"translatedName\" : \"translatedName\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/application-properties/{id} : Set application property
     * Changes the value of an application property. For example, you can change the value of the &#x60;jira.clone.prefix&#x60; from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.  #### Advanced settings ####  The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).  | Key | Description | Default value |   | -- | -- | -- |   | &#x60;jira.clone.prefix&#x60; | The string of text prefixed to the title of a cloned issue. | &#x60;CLONE -&#x60; |   | &#x60;jira.date.picker.java.format&#x60; | The date format for the Java (server-side) generated dates. This must be the same as the &#x60;jira.date.picker.javascript.format&#x60; format setting. | &#x60;d/MMM/yy&#x60; |   | &#x60;jira.date.picker.javascript.format&#x60; | The date format for the JavaScript (client-side) generated dates. This must be the same as the &#x60;jira.date.picker.java.format&#x60; format setting. | &#x60;%e/%b/%y&#x60; |   | &#x60;jira.date.time.picker.java.format&#x60; | The date format for the Java (server-side) generated date times. This must be the same as the &#x60;jira.date.time.picker.javascript.format&#x60; format setting. | &#x60;dd/MMM/yy h:mm a&#x60; |   | &#x60;jira.date.time.picker.javascript.format&#x60; | The date format for the JavaScript (client-side) generated date times. This must be the same as the &#x60;jira.date.time.picker.java.format&#x60; format setting. | &#x60;%e/%b/%y %I:%M %p&#x60; |   | &#x60;jira.issue.actions.order&#x60; | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | &#x60;asc&#x60; |   | &#x60;jira.table.cols.subtasks&#x60; | The columns to show while viewing subtask issues in a table. For example, a list of subtasks on an issue. | &#x60;issuetype, status, assignee, progress&#x60; |   | &#x60;jira.view.issue.links.sort.order&#x60; | The sort order of the list of issue links on the issue view. | &#x60;type, status, priority&#x60; |   | &#x60;jira.comment.collapsing.minimum.hidden&#x60; | The minimum number of comments required for comment collapsing to occur. A value of &#x60;0&#x60; disables comment collapsing. | &#x60;4&#x60; |   | &#x60;jira.newsletter.tip.delay.days&#x60; | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of &#x60;-1&#x60; disables this feature. | &#x60;7&#x60; |     #### Look and feel ####  The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).  | Key | Description | Default value |   | -- | -- | -- |   | &#x60;jira.lf.date.time&#x60; | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | &#x60;h:mm a&#x60; |   | &#x60;jira.lf.date.day&#x60; | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | &#x60;EEEE h:mm a&#x60; |   | &#x60;jira.lf.date.complete&#x60; | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | &#x60;dd/MMM/yy h:mm a&#x60; |   | &#x60;jira.lf.date.dmy&#x60; | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | &#x60;dd/MMM/yy&#x60; |   | &#x60;jira.date.time.picker.use.iso8061&#x60; | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | &#x60;false&#x60; |   | &#x60;jira.lf.logo.url&#x60; | The URL of the logo image file. | &#x60;/images/icon-jira-logo.png&#x60; |   | &#x60;jira.lf.logo.show.application.title&#x60; | Controls the visibility of the application title on the sidebar. | &#x60;false&#x60; |   | &#x60;jira.lf.favicon.url&#x60; | The URL of the favicon. | &#x60;/favicon.ico&#x60; |   | &#x60;jira.lf.favicon.hires.url&#x60; | The URL of the high-resolution favicon. | &#x60;/images/64jira.png&#x60; |   | &#x60;jira.lf.navigation.bgcolour&#x60; | The background color of the sidebar. | &#x60;#0747A6&#x60; |   | &#x60;jira.lf.navigation.highlightcolour&#x60; | The color of the text and logo of the sidebar. | &#x60;#DEEBFF&#x60; |   | &#x60;jira.lf.hero.button.base.bg.colour&#x60; | The background color of the hero button. | &#x60;#3b7fc4&#x60; |   | &#x60;jira.title&#x60; | The text for the application title. The application title can also be set in *General settings*. | &#x60;Jira&#x60; |   | &#x60;jira.option.globalsharing&#x60; | Whether filters and dashboards can be shared with anyone signed into Jira. | &#x60;true&#x60; |   | &#x60;xflow.product.suggestions.enabled&#x60; | Whether to expose product suggestions for other Atlassian products within Jira. | &#x60;true&#x60; |     #### Other settings ####  | Key | Description | Default value |   | -- | -- | -- |   | &#x60;jira.issuenav.criteria.autoupdate&#x60; | Whether instant updates to search criteria is active. | &#x60;true&#x60; |     *Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The key of the application property to update. (required)
     * @param simpleApplicationPropertyBean  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the data type of the &#x60;value&#x60; does not match the application property&#39;s data type. For example, a string is provided instead of an integer. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to edit the property. (status code 403)
     *         or Returned if the property is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "setApplicationProperty",
        summary = "Set application property",
        description = "Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.  #### Advanced settings ####  The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).  | Key | Description | Default value |   | -- | -- | -- |   | `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |   | `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |   | `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |   | `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |   | `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |   | `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |   | `jira.table.cols.subtasks` | The columns to show while viewing subtask issues in a table. For example, a list of subtasks on an issue. | `issuetype, status, assignee, progress` |   | `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |   | `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |   | `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |     #### Look and feel ####  The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).  | Key | Description | Default value |   | -- | -- | -- |   | `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |   | `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |   | `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |   | `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |   | `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |   | `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |   | `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |   | `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |   | `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |   | `jira.lf.navigation.bgcolour` | The background color of the sidebar. | `#0747A6` |   | `jira.lf.navigation.highlightcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |   | `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |   | `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |   | `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |   | `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |     #### Other settings ####  | Key | Description | Default value |   | -- | -- | -- |   | `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |     *Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Jira settings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApplicationProperty.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the data type of the `value` does not match the application property's data type. For example, a string is provided instead of an integer."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to edit the property."),
            @ApiResponse(responseCode = "404", description = "Returned if the property is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/application-properties/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ApplicationProperty> setApplicationProperty(
        @Parameter(name = "id", description = "The key of the application property to update.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "SimpleApplicationPropertyBean", description = "", required = true) @Valid @RequestBody SimpleApplicationPropertyBean simpleApplicationPropertyBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"allowedValues\" : [ \"allowedValues\", \"allowedValues\" ], \"defaultValue\" : \"defaultValue\", \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"value\" : \"value\", \"key\" : \"key\", \"desc\" : \"desc\", \"example\" : \"example\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/announcementBanner : Update announcement banner configuration
     * Updates the announcement banner configuration.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param announcementBannerConfigurationUpdate  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if an invalid parameter is passed. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "setBanner",
        summary = "Update announcement banner configuration",
        description = "Updates the announcement banner configuration.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Announcement banner" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if an invalid parameter is passed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/announcementBanner",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setBanner(
        @Parameter(name = "AnnouncementBannerConfigurationUpdate", description = "", required = true) @Valid @RequestBody AnnouncementBannerConfigurationUpdate announcementBannerConfigurationUpdate
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/filter/{id}/columns : Set columns
     * Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has &#x60;navigable&#x60; set to &#x60;true&#x60;.  The parameters for this resource are expressed as HTML form data. For example, in curl:  &#x60;curl -X PUT -d columns&#x3D;summary -d columns&#x3D;description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns&#x60;  **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @param id The ID of the filter. (required)
     * @param requestBody The IDs of the fields to set as columns. In the form data, specify each field as &#x60;columns&#x3D;id&#x60;, where &#x60;id&#x60; is the *id* of a field (as seen in the response for [Get fields](#api-rest-api-&lt;ver&gt;-field-get)). For example, &#x60;columns&#x3D;summary&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  a non-navigable field is set as a column.  *  the user does not have permission to view the filter. (status code 400)
     *         or Returned if the requesting user is not an owner of the filter. (status code 403)
     */
    @Operation(
        operationId = "setColumns",
        summary = "Set columns",
        description = "Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.  The parameters for this resource are expressed as HTML form data. For example, in curl:  `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`  **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  a non-navigable field is set as a column.  *  the user does not have permission to view the filter."),
            @ApiResponse(responseCode = "403", description = "Returned if the requesting user is not an owner of the filter.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/filter/{id}/columns",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Object> setColumns(
        @Parameter(name = "id", description = "The ID of the filter.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "request_body", description = "The IDs of the fields to set as columns. In the form data, specify each field as `columns=id`, where `id` is the *id* of a field (as seen in the response for [Get fields](#api-rest-api-<ver>-field-get)). For example, `columns=summary`.") @Valid @RequestBody(required = false) List<String> requestBody
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/comment/{commentId}/properties/{propertyKey} : Set comment property
     * Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** either of:   *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.  *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.  Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
     *
     * @param commentId The ID of the comment. (required)
     * @param propertyKey The key of the property. The maximum length is 255 characters. (required)
     * @param body  (required)
     * @return Returned if the comment property is updated. (status code 200)
     *         or Returned if the comment property is created. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the comment is not found. (status code 404)
     */
    @Operation(
        operationId = "setCommentProperty",
        summary = "Set comment property",
        description = "Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** either of:   *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.  *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.  Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.",
        tags = { "Issue comment properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the comment property is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "201", description = "Returned if the comment property is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the comment is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setCommentProperty(
        @Parameter(name = "commentId", description = "The ID of the comment.", required = true, in = ParameterIn.PATH) @PathVariable("commentId") String commentId,
        @Parameter(name = "propertyKey", description = "The key of the property. The maximum length is 255 characters.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey} : Set dashboard item property
     * Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item&#39;s content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     *
     * @param dashboardId The ID of the dashboard. (required)
     * @param itemId The ID of the dashboard item. (required)
     * @param propertyKey The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to \&quot;config\&quot;, the request body&#39;s JSON must be an object with all keys and values as strings. (required)
     * @param body  (required)
     * @return Returned if the dashboard item property is updated. (status code 200)
     *         or Returned if the dashboard item property is created. (status code 201)
     *         or Returned if:   *  Request is invalid  *  Or if all of these conditions are met in the request:           *  The dashboard item has a spec URI and no complete module key      *  The value of propertyKey is equal to \&quot;config\&quot;      *  The request body contains a JSON object whose keys and values are not strings. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user is not the owner of the dashboard. (status code 403)
     *         or Returned if the dashboard item is not found or the dashboard is not shared with the user. (status code 404)
     */
    @Operation(
        operationId = "setDashboardItemProperty",
        summary = "Set dashboard item property",
        description = "Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the dashboard item property is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "201", description = "Returned if the dashboard item property is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  Request is invalid  *  Or if all of these conditions are met in the request:           *  The dashboard item has a spec URI and no complete module key      *  The value of propertyKey is equal to \"config\"      *  The request body contains a JSON object whose keys and values are not strings."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user is not the owner of the dashboard."),
            @ApiResponse(responseCode = "404", description = "Returned if the dashboard item is not found or the dashboard is not shared with the user.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setDashboardItemProperty(
        @Parameter(name = "dashboardId", description = "The ID of the dashboard.", required = true, in = ParameterIn.PATH) @PathVariable("dashboardId") String dashboardId,
        @Parameter(name = "itemId", description = "The ID of the dashboard item.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") String itemId,
        @Parameter(name = "propertyKey", description = "The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to \"config\", the request body's JSON must be an object with all keys and values as strings.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuesecurityschemes/level/default : Set default issue security levels
     * Sets default issue security levels for schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param setDefaultLevelsRequest  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue resolution isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "setDefaultLevels",
        summary = "Set default issue security levels",
        description = "Sets default issue security levels for schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue resolution isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuesecurityschemes/level/default",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setDefaultLevels(
        @Parameter(name = "SetDefaultLevelsRequest", description = "", required = true) @Valid @RequestBody SetDefaultLevelsRequest setDefaultLevelsRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/priority/default : Set default priority
     * Sets default issue priority.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param setDefaultPriorityRequest  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue priority isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "setDefaultPriority",
        summary = "Set default priority",
        description = "Sets default issue priority.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue priorities" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue priority isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/priority/default",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setDefaultPriority(
        @Parameter(name = "SetDefaultPriorityRequest", description = "", required = true) @Valid @RequestBody SetDefaultPriorityRequest setDefaultPriorityRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/resolution/default : Set default resolution
     * Sets default issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param setDefaultResolutionRequest  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue resolution isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "setDefaultResolution",
        summary = "Set default resolution",
        description = "Sets default issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue resolutions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue resolution isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/resolution/default",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setDefaultResolution(
        @Parameter(name = "SetDefaultResolutionRequest", description = "", required = true) @Valid @RequestBody SetDefaultResolutionRequest setDefaultResolutionRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/filter/defaultShareScope : Set default share scope
     * Sets the default sharing for new filters and dashboards for a user.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param defaultShareScope  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if an invalid scope is set. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "setDefaultShareScope",
        summary = "Set default share scope",
        description = "Sets the default sharing for new filters and dashboards for a user.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Filter sharing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultShareScope.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if an invalid scope is set."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/filter/defaultShareScope",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DefaultShareScope> setDefaultShareScope(
        @Parameter(name = "DefaultShareScope", description = "", required = true) @Valid @RequestBody DefaultShareScope defaultShareScope
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"scope\" : \"GLOBAL\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/field/{fieldId}/context/defaultValue : Set custom field contexts default values
     * Sets default for contexts of a custom field. Default are defined using these objects:   *  &#x60;CustomFieldContextDefaultValueDate&#x60; (type &#x60;datepicker&#x60;) for date fields.  *  &#x60;CustomFieldContextDefaultValueDateTime&#x60; (type &#x60;datetimepicker&#x60;) for date-time fields.  *  &#x60;CustomFieldContextDefaultValueSingleOption&#x60; (type &#x60;option.single&#x60;) for single choice select lists and radio buttons.  *  &#x60;CustomFieldContextDefaultValueMultipleOption&#x60; (type &#x60;option.multiple&#x60;) for multiple choice select lists and checkboxes.  *  &#x60;CustomFieldContextDefaultValueCascadingOption&#x60; (type &#x60;option.cascading&#x60;) for cascading select lists.  *  &#x60;CustomFieldContextSingleUserPickerDefaults&#x60; (type &#x60;single.user.select&#x60;) for single users.  *  &#x60;CustomFieldContextDefaultValueMultiUserPicker&#x60; (type &#x60;multi.user.select&#x60;) for user lists.  *  &#x60;CustomFieldContextDefaultValueSingleGroupPicker&#x60; (type &#x60;grouppicker.single&#x60;) for single choice group pickers.  *  &#x60;CustomFieldContextDefaultValueMultipleGroupPicker&#x60; (type &#x60;grouppicker.multiple&#x60;) for multiple choice group pickers.  *  &#x60;CustomFieldContextDefaultValueURL&#x60; (type &#x60;url&#x60;) for URLs.  *  &#x60;CustomFieldContextDefaultValueProject&#x60; (type &#x60;project&#x60;) for project pickers.  *  &#x60;CustomFieldContextDefaultValueFloat&#x60; (type &#x60;float&#x60;) for floats (floating-point numbers).  *  &#x60;CustomFieldContextDefaultValueLabels&#x60; (type &#x60;labels&#x60;) for labels.  *  &#x60;CustomFieldContextDefaultValueTextField&#x60; (type &#x60;textfield&#x60;) for text fields.  *  &#x60;CustomFieldContextDefaultValueTextArea&#x60; (type &#x60;textarea&#x60;) for text area fields.  *  &#x60;CustomFieldContextDefaultValueReadOnly&#x60; (type &#x60;readonly&#x60;) for read only (text) fields.  *  &#x60;CustomFieldContextDefaultValueMultipleVersion&#x60; (type &#x60;version.multiple&#x60;) for single choice version pickers.  *  &#x60;CustomFieldContextDefaultValueSingleVersion&#x60; (type &#x60;version.single&#x60;) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  &#x60;CustomFieldContextDefaultValueForgeStringFieldBean&#x60; (type &#x60;forge.string&#x60;) for Forge string fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiStringFieldBean&#x60; (type &#x60;forge.string.list&#x60;) for Forge string collection fields.  *  &#x60;CustomFieldContextDefaultValueForgeObjectFieldBean&#x60; (type &#x60;forge.object&#x60;) for Forge object fields.  *  &#x60;CustomFieldContextDefaultValueForgeDateTimeFieldBean&#x60; (type &#x60;forge.datetime&#x60;) for Forge date-time fields.  *  &#x60;CustomFieldContextDefaultValueForgeGroupFieldBean&#x60; (type &#x60;forge.group&#x60;) for Forge group fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiGroupFieldBean&#x60; (type &#x60;forge.group.list&#x60;) for Forge group collection fields.  *  &#x60;CustomFieldContextDefaultValueForgeNumberFieldBean&#x60; (type &#x60;forge.number&#x60;) for Forge number fields.  *  &#x60;CustomFieldContextDefaultValueForgeUserFieldBean&#x60; (type &#x60;forge.user&#x60;) for Forge user fields.  *  &#x60;CustomFieldContextDefaultValueForgeMultiUserFieldBean&#x60; (type &#x60;forge.user.list&#x60;) for Forge user collection fields.  Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to &#x60;null&#x60;.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param customFieldContextDefaultValueUpdate  (required)
     * @return Returned if operation is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field, a context, an option, or a cascading option is not found. (status code 404)
     */
    @Operation(
        operationId = "setDefaultValues",
        summary = "Set custom field contexts default values",
        description = "Sets default for contexts of a custom field. Default are defined using these objects:   *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.  Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if operation is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field, a context, an option, or a cascading option is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/field/{fieldId}/context/defaultValue",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setDefaultValues(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "CustomFieldContextDefaultValueUpdate", description = "", required = true) @Valid @RequestBody CustomFieldContextDefaultValueUpdate customFieldContextDefaultValueUpdate
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/filter/{id}/favourite : Add filter as favorite
     * Add a filter as a favorite for the user.  **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.
     *
     * @param id The ID of the filter. (required)
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  the filter is not found.  *  the user does not have permission to favorite the filter. (status code 400)
     */
    @Operation(
        operationId = "setFavouriteForFilter",
        summary = "Add filter as favorite",
        description = "Add a filter as a favorite for the user.  **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Filter.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the filter is not found.  *  the user does not have permission to favorite the filter.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/filter/{id}/favourite",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Filter> setFavouriteForFilter(
        @Parameter(name = "id", description = "The ID of the filter.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"jql\" : \"jql\", \"favouritedCount\" : 0, \"description\" : \"description\", \"favourite\" : true, \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/fieldconfigurationscheme/{id}/mapping : Assign issue types to field configurations
     * Assigns issue types to field configurations on field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the field configuration scheme. (required)
     * @param associateFieldConfigurationsWithIssueTypesRequest  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field configuration scheme, the field configuration, or the issue type is not found. (status code 404)
     */
    @Operation(
        operationId = "setFieldConfigurationSchemeMapping",
        summary = "Assign issue types to field configurations",
        description = "Assigns issue types to field configurations on field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field configuration scheme, the field configuration, or the issue type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/fieldconfigurationscheme/{id}/mapping",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setFieldConfigurationSchemeMapping(
        @Parameter(name = "id", description = "The ID of the field configuration scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "AssociateFieldConfigurationsWithIssueTypesRequest", description = "", required = true) @Valid @RequestBody AssociateFieldConfigurationsWithIssueTypesRequest associateFieldConfigurationsWithIssueTypesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/settings/columns : Set issue navigator default columns
     * Sets the default issue navigator columns.  The &#x60;columns&#x60; parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple &#x60;columns&#x60; parameters. For example, in curl:  &#x60;curl -X PUT -d columns&#x3D;summary -d columns&#x3D;description https://your-domain.atlassian.net/rest/api/3/settings/columns&#x60;  If no column details are sent, then all default columns are removed.  A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param requestBody A navigable field value. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if invalid parameters are passed. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if a navigable field value is not found. (status code 404)
     */
    @Operation(
        operationId = "setIssueNavigatorDefaultColumns",
        summary = "Set issue navigator default columns",
        description = "Sets the default issue navigator columns.  The `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:  `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`  If no column details are sent, then all default columns are removed.  A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue navigator settings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if invalid parameters are passed."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if a navigable field value is not found.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/settings/columns",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Object> setIssueNavigatorDefaultColumns(
        @Parameter(name = "request_body", description = "A navigable field value.") @Valid @RequestBody(required = false) List<String> requestBody
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey} : Set issue property
     * Sets the value of an issue&#39;s property. Use this resource to store custom data against an issue.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param propertyKey The key of the issue property. The maximum length is 255 characters. (required)
     * @param body  (required)
     * @return Returned if the issue property is updated. (status code 200)
     *         or Returned if the issue property is created. (status code 201)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to edit the issue. (status code 403)
     *         or Returned if the issue is not found or the user does not have permission to view the issue. (status code 404)
     */
    @Operation(
        operationId = "setIssueProperty",
        summary = "Set issue property",
        description = "Sets the value of an issue's property. Use this resource to store custom data against an issue.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the issue property is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "201", description = "Returned if the issue property is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to edit the issue."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setIssueProperty(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "propertyKey", description = "The key of the issue property. The maximum length is 255 characters.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey} : Set issue type property
     * Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeId The ID of the issue type. (required)
     * @param propertyKey The key of the issue type property. The maximum length is 255 characters. (required)
     * @param body  (required)
     * @return Returned if the issue type property is updated. (status code 200)
     *         or Returned if the issue type property is created. (status code 201)
     *         or Returned if:   *  the issue type ID is invalid.  *  a property value is not provided.  *  the property value JSON content is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to modify the issue type. (status code 403)
     *         or Returned if:   *  the issue type is not found.  *  the user does not have the permission view the issue type. (status code 404)
     */
    @Operation(
        operationId = "setIssueTypeProperty",
        summary = "Set issue type property",
        description = "Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the issue type property is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "201", description = "Returned if the issue type property is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the issue type ID is invalid.  *  a property value is not provided.  *  the property value JSON content is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to modify the issue type."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue type is not found.  *  the user does not have the permission view the issue type.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setIssueTypeProperty(
        @Parameter(name = "issueTypeId", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeId") String issueTypeId,
        @Parameter(name = "propertyKey", description = "The key of the issue type property. The maximum length is 255 characters.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/mypreferences/locale : Set locale
     * Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.  Sets the locale of the user. The locale must be one supported by the instance of Jira.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param locale The locale defined in a LocaleBean. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "setLocale",
        summary = "Set locale",
        description = "Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.  Sets the locale of the user. The locale must be one supported by the instance of Jira.  **[Permissions](#permissions) required:** Permission to access Jira.",
        deprecated = true,
        tags = { "Myself" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/mypreferences/locale",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setLocale(
        @Parameter(name = "Locale", description = "The locale defined in a LocaleBean.", required = true) @Valid @RequestBody Locale locale
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/mypreferences : Set preference
     * Creates a preference for the user or updates a preference&#39;s value by sending a plain text string. For example, &#x60;false&#x60;. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:   *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to &#x60;html&#x60;.  *  *user.notify.own.changes* Whether the user gets notified of their own changes. Defaults to &#x60;false&#x60;.  *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to &#x60;true&#x60;.  *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to &#x60;false&#x60;.  *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.  Note that these keys are deprecated:   *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.  Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.  **[Permissions](#permissions) required:** Permission to access Jira.
     *
     * @param key The key of the preference. The maximum length is 255 characters. (required)
     * @param body The value of the preference as a plain text string. The maximum length is 255 characters. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the key or value is not provided or invalid. (status code 404)
     */
    @Operation(
        operationId = "setPreference",
        summary = "Set preference",
        description = "Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:   *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.  *  *user.notify.own.changes* Whether the user gets notified of their own changes. Defaults to `false`.  *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.  *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.  *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.  Note that these keys are deprecated:   *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.  Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.  **[Permissions](#permissions) required:** Permission to access Jira.",
        tags = { "Myself" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the key or value is not provided or invalid.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/mypreferences",
        produces = { "application/json" },
        consumes = { "application/json", "text/plain" }
    )
    
    default ResponseEntity<Object> setPreference(
        @NotNull @Parameter(name = "key", description = "The key of the preference. The maximum length is 255 characters.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = true) String key,
        @Parameter(name = "body", description = "The value of the preference as a plain text string. The maximum length is 255 characters.", required = true) @Valid @RequestBody String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/project/{projectIdOrKey}/properties/{propertyKey} : Set project property
     * Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param propertyKey The key of the project property. The maximum length is 255 characters. (required)
     * @param body  (required)
     * @return Returned if the project property is updated. (status code 200)
     *         or Returned if the project property is created. (status code 201)
     *         or Returned if the project key or id is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the user does not have permission to administer the project. (status code 403)
     *         or Returned if the project is not found. (status code 404)
     */
    @Operation(
        operationId = "setProjectProperty",
        summary = "Set project property",
        description = "Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.",
        tags = { "Project properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the project property is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "201", description = "Returned if the project property is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the project key or id is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to administer the project."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setProjectProperty(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "propertyKey", description = "The key of the project property. The maximum length is 255 characters.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/configuration/timetracking/options : Set time tracking settings
     * Sets the time tracking settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param timeTrackingConfiguration  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request object is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     */
    @Operation(
        operationId = "setSharedTimeTrackingConfiguration",
        summary = "Set time tracking settings",
        description = "Sets the time tracking settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Time tracking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TimeTrackingConfiguration.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request object is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/configuration/timetracking/options",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TimeTrackingConfiguration> setSharedTimeTrackingConfiguration(
        @Parameter(name = "TimeTrackingConfiguration", description = "", required = true) @Valid @RequestBody TimeTrackingConfiguration timeTrackingConfiguration
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"defaultUnit\" : \"minute\", \"workingHoursPerDay\" : 6.027456183070403, \"timeFormat\" : \"pretty\", \"workingDaysPerWeek\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/user/columns : Set user default columns
     * Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user&#39;s default columns are set. If no column details are sent, then all default columns are removed.  The parameters for this resource are expressed as HTML form data. For example, in curl:  &#x60;curl -X PUT -d columns&#x3D;summary -d columns&#x3D;description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId&#x3D;5b10ac8d82e05b22cc7d4ef5&#39;&#x60;  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.  *  Permission to access Jira, to set the calling user&#39;s columns.
     *
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
     * @param requestBody The ID of a column to set. To set multiple columns, send multiple &#x60;columns&#x60; parameters. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission or is not accessing their user record. (status code 403)
     *         or Returned if the requested user is not found. (status code 404)
     *         or Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. (status code 429)
     *         or Returned if an invalid issue table column ID is sent. (status code 500)
     */
    @Operation(
        operationId = "setUserColumns",
        summary = "Set user default columns",
        description = "Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.  The parameters for this resource are expressed as HTML form data. For example, in curl:  `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.  *  Permission to access Jira, to set the calling user's columns.",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission or is not accessing their user record."),
            @ApiResponse(responseCode = "404", description = "Returned if the requested user is not found."),
            @ApiResponse(responseCode = "429", description = "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header."),
            @ApiResponse(responseCode = "500", description = "Returned if an invalid issue table column ID is sent.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/user/columns",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Object> setUserColumns(
        @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "request_body", description = "The ID of a column to set. To set multiple columns, send multiple `columns` parameters.") @Valid @RequestBody(required = false) List<String> requestBody
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/user/properties/{propertyKey} : Set user property
     * Sets the value of a user&#39;s property. Use this resource to store custom data against a user.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.  *  Access to Jira, to set a property on the calling user&#39;s record.
     *
     * @param propertyKey The key of the user&#39;s property. The maximum length is 255 characters. (required)
     * @param body  (required)
     * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. (optional)
     * @param userKey This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @param username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. (optional)
     * @return Returned if the user property is updated. (status code 200)
     *         or Returned if the user property is created. (status code 201)
     *         or Returned if &#x60;accountId&#x60; is missing. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission or is not accessing their user record. (status code 403)
     *         or Returned if the user is not found. (status code 404)
     *         or Returned if the property key is not specified. (status code 405)
     */
    @Operation(
        operationId = "setUserProperty",
        summary = "Set user property",
        description = "Sets the value of a user's property. Use this resource to store custom data against a user.  Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.  *  Access to Jira, to set a property on the calling user's record.",
        tags = { "User properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the user property is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "201", description = "Returned if the user property is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if `accountId` is missing."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission or is not accessing their user record."),
            @ApiResponse(responseCode = "404", description = "Returned if the user is not found."),
            @ApiResponse(responseCode = "405", description = "Returned if the property key is not specified.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/user/properties/{propertyKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setUserProperty(
        @Parameter(name = "propertyKey", description = "The key of the user's property. The maximum length is 255 characters.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body,
        @Size(max = 128) @Parameter(name = "accountId", description = "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accountId", required = false) String accountId,
        @Parameter(name = "userKey", description = "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userKey", required = false) String userKey,
        @Parameter(name = "username", description = "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = false) String username
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType} : Set workflow for issue type in draft workflow scheme
     * Sets the workflow for an issue type in a workflow scheme&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param issueType The ID of the issue type. (required)
     * @param issueTypeWorkflowMapping The issue type-project mapping. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme or issue type is not found. (status code 404)
     */
    @Operation(
        operationId = "setWorkflowSchemeDraftIssueType",
        summary = "Set workflow for issue type in draft workflow scheme",
        description = "Sets the workflow for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme or issue type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> setWorkflowSchemeDraftIssueType(
        @Parameter(name = "id", description = "The ID of the workflow scheme that the draft belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "issueType", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueType") String issueType,
        @Parameter(name = "IssueTypeWorkflowMapping", description = "The issue type-project mapping.", required = true) @Valid @RequestBody IssueTypeWorkflowMapping issueTypeWorkflowMapping
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflowscheme/{id}/issuetype/{issueType} : Set workflow for issue type in workflow scheme
     * Sets the workflow for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. (required)
     * @param issueType The ID of the issue type. (required)
     * @param issueTypeWorkflowMapping The issue type-project mapping. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the workflow cannot be edited and &#x60;updateDraftIfNeeded&#x60; is false. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme or issue type is not found. (status code 404)
     */
    @Operation(
        operationId = "setWorkflowSchemeIssueType",
        summary = "Set workflow for issue type in workflow scheme",
        description = "Sets the workflow for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme or issue type is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> setWorkflowSchemeIssueType(
        @Parameter(name = "id", description = "The ID of the workflow scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "issueType", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("issueType") String issueType,
        @Parameter(name = "IssueTypeWorkflowMapping", description = "The issue type-project mapping.", required = true) @Valid @RequestBody IssueTypeWorkflowMapping issueTypeWorkflowMapping
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey} : Set worklog property
     * Sets the value of a worklog property. Use this operation to store custom data against the worklog.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param worklogId The ID of the worklog. (required)
     * @param propertyKey The key of the issue property. The maximum length is 255 characters. (required)
     * @param body  (required)
     * @return Returned if the worklog property is updated. (status code 200)
     *         or Returned if the worklog property is created. (status code 201)
     *         or Returned if the worklog ID is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to edit the worklog. (status code 403)
     *         or Returned if:   *  the issue or worklog is not found.  *  the user does not have permission to view the issue or worklog. (status code 404)
     */
    @Operation(
        operationId = "setWorklogProperty",
        summary = "Set worklog property",
        description = "Sets the value of a worklog property. Use this operation to store custom data against the worklog.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue worklog properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the worklog property is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "201", description = "Returned if the worklog property is created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the worklog ID is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to edit the worklog."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue or worklog is not found.  *  the user does not have permission to view the issue or worklog.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> setWorklogProperty(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "worklogId", description = "The ID of the worklog.", required = true, in = ParameterIn.PATH) @PathVariable("worklogId") String worklogId,
        @Parameter(name = "propertyKey", description = "The key of the issue property. The maximum length is 255 characters.", required = true, in = ParameterIn.PATH) @PathVariable("propertyKey") String propertyKey,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/universal_avatar/type/{type}/owner/{entityId} : Load avatar
     * Loads a custom avatar for a project or issue type.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl --request POST &#x60;  &#x60;--user email@example.com:&lt;api_token&gt; &#x60;  &#x60;--header &#39;X-Atlassian-Token: no-check&#39; &#x60;  &#x60;--header &#39;Content-Type: image/&lt; image_type&gt;&#39; &#x60;  &#x60;--data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; &#x60;  &#x60;--url &#39;https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}&#39;&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use:   *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type&#39;s displayed avatar.  *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project&#39;s displayed avatar.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param type The avatar type. (required)
     * @param entityId The ID of the item the avatar is associated with. (required)
     * @param size The length of each side of the crop region. (required)
     * @param body  (required)
     * @param x The X coordinate of the top-left corner of the crop region. (optional, default to 0)
     * @param y The Y coordinate of the top-left corner of the crop region. (optional, default to 0)
     * @return Returned if the request is successful. (status code 201)
     *         or Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permissions. (status code 403)
     *         or Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. (status code 404)
     */
    @Operation(
        operationId = "storeAvatar",
        summary = "Load avatar",
        description = "Loads a custom avatar for a project or issue type.  Specify the avatar's local file location in the body of the request. Also, include the following headers:   *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.  For example:   `curl --request POST `  `--user email@example.com:<api_token> `  `--header 'X-Atlassian-Token: no-check' `  `--header 'Content-Type: image/< image_type>' `  `--data-binary \"<@/path/to/file/with/your/avatar>\" `  `--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use:   *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.  *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Avatars" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Avatar.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  an image isn't included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/universal_avatar/type/{type}/owner/{entityId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Avatar> storeAvatar(
        @Parameter(name = "type", description = "The avatar type.", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "entityId", description = "The ID of the item the avatar is associated with.", required = true, in = ParameterIn.PATH) @PathVariable("entityId") String entityId,
        @NotNull @Parameter(name = "size", description = "The length of each side of the crop region.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = true) Integer size,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body,
        @Parameter(name = "x", description = "The X coordinate of the top-left corner of the crop region.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "x", required = false, defaultValue = "0") Integer x,
        @Parameter(name = "y", description = "The Y coordinate of the top-left corner of the crop region.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "y", required = false, defaultValue = "0") Integer y
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isDeletable\" : true, \"owner\" : \"owner\", \"fileName\" : \"fileName\", \"urls\" : { \"key\" : \"https://openapi-generator.tech\" }, \"isSelected\" : true, \"isSystemAvatar\" : true, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/project/{projectIdOrKey}/features/{featureKey} : Set project feature state
     * Sets the state of a project feature.
     *
     * @param projectIdOrKey The ID or (case-sensitive) key of the project. (required)
     * @param featureKey The key of the feature. (required)
     * @param projectFeatureState Details of the feature state change. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the project or project feature is not found. (status code 404)
     */
    @Operation(
        operationId = "toggleFeatureForProject",
        summary = "Set project feature state",
        description = "Sets the state of a project feature.",
        tags = { "Project features" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContainerForProjectFeatures.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the project or project feature is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/project/{projectIdOrKey}/features/{featureKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ContainerForProjectFeatures> toggleFeatureForProject(
        @Parameter(name = "projectIdOrKey", description = "The ID or (case-sensitive) key of the project.", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "featureKey", description = "The key of the feature.", required = true, in = ParameterIn.PATH) @PathVariable("featureKey") String featureKey,
        @Parameter(name = "ProjectFeatureState", description = "Details of the feature state change.", required = true) @Valid @RequestBody ProjectFeatureState projectFeatureState
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"features\" : [ { \"prerequisites\" : [ \"prerequisites\", \"prerequisites\" ], \"imageUri\" : \"imageUri\", \"toggleLocked\" : true, \"feature\" : \"feature\", \"localisedDescription\" : \"localisedDescription\", \"localisedName\" : \"localisedName\", \"state\" : \"ENABLED\", \"projectId\" : 0 }, { \"prerequisites\" : [ \"prerequisites\", \"prerequisites\" ], \"imageUri\" : \"imageUri\", \"toggleLocked\" : true, \"feature\" : \"feature\", \"localisedDescription\" : \"localisedDescription\", \"localisedName\" : \"localisedName\", \"state\" : \"ENABLED\", \"projectId\" : 0 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/field/{id}/trash : Move custom field to trash
     * Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of a custom field. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the custom field is not found. (status code 404)
     */
    @Operation(
        operationId = "trashCustomField",
        summary = "Move custom field to trash",
        description = "Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue fields" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/field/{id}/trash",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> trashCustomField(
        @Parameter(name = "id", description = "The ID of a custom field.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issue/{issueIdOrKey}/comment/{id} : Update comment
     * Updates a comment.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param id The ID of the comment. (required)
     * @param comment  (required)
     * @param notifyUsers Whether users are notified when a comment is updated. (optional, default to true)
     * @param overrideEditableFlag Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the user does not have permission to edit the comment or the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. (status code 404)
     */
    @Operation(
        operationId = "updateComment",
        summary = "Update comment",
        description = "Updates a comment.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue comments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the user does not have permission to edit the comment or the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issue/{issueIdOrKey}/comment/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Comment> updateComment(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "id", description = "The ID of the comment.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Comment", description = "", required = true) @Valid @RequestBody Comment comment,
        @Parameter(name = "notifyUsers", description = "Whether users are notified when a comment is updated.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "notifyUsers", required = false, defaultValue = "true") Boolean notifyUsers,
        @Parameter(name = "overrideEditableFlag", description = "Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideEditableFlag", required = false, defaultValue = "false") Boolean overrideEditableFlag,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"renderedBody\" : \"renderedBody\", \"visibility\" : \"\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"self\" : \"self\", \"jsdPublic\" : true, \"id\" : \"id\", \"body\" : \"\", \"jsdAuthorCanSeeRequest\" : true, \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/component/{id} : Update component
     * Updates a component. Any fields included in the request are overwritten. If &#x60;leadAccountId&#x60; is an empty string (\&quot;\&quot;) the component lead is removed.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the component. (required)
     * @param projectComponent  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  the user is not found.  *  &#x60;assigneeType&#x60; is an invalid value.  *  &#x60;name&#x60; is over 255 characters in length. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. (status code 403)
     *         or Returned if the component is not found or the user does not have permission to browse the project containing the component. (status code 404)
     */
    @Operation(
        operationId = "updateComponent",
        summary = "Update component",
        description = "Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string (\"\") the component lead is removed.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project components" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectComponent.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the user is not found.  *  `assigneeType` is an invalid value.  *  `name` is over 255 characters in length."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira."),
            @ApiResponse(responseCode = "404", description = "Returned if the component is not found or the user does not have permission to browse the project containing the component.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/component/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectComponent> updateComponent(
        @Parameter(name = "id", description = "The ID of the component.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ProjectComponent", description = "", required = true) @Valid @RequestBody ProjectComponent projectComponent
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/field/{fieldId} : Update custom field
     * Updates a custom field.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param updateCustomFieldDetails The custom field update details. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field is not found. (status code 404)
     */
    @Operation(
        operationId = "updateCustomField",
        summary = "Update custom field",
        description = "Updates a custom field.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue fields" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/field/{fieldId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateCustomField(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "UpdateCustomFieldDetails", description = "The custom field update details.", required = true) @Valid @RequestBody UpdateCustomFieldDetails updateCustomFieldDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/app/field/{fieldIdOrKey}/context/configuration : Update custom field configurations
     * Update the configuration for contexts of a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field.
     *
     * @param fieldIdOrKey The ID or key of the custom field, for example &#x60;customfield_10000&#x60;. (required)
     * @param customFieldConfigurations  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. (status code 403)
     *         or Returned if the custom field is not found. (status code 404)
     */
    @Operation(
        operationId = "updateCustomFieldConfiguration",
        summary = "Update custom field configurations",
        description = "Update the configuration for contexts of a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field.",
        tags = { "Issue custom field configuration (apps)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateCustomFieldConfiguration(
        @Parameter(name = "fieldIdOrKey", description = "The ID or key of the custom field, for example `customfield_10000`.", required = true, in = ParameterIn.PATH) @PathVariable("fieldIdOrKey") String fieldIdOrKey,
        @Parameter(name = "CustomFieldConfigurations", description = "", required = true) @Valid @RequestBody CustomFieldConfigurations customFieldConfigurations
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/field/{fieldId}/context/{contextId} : Update custom field context
     * Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param customFieldContextUpdateDetails  (required)
     * @return Returned if the context is updated. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the custom field or the context is not found. (status code 404)
     */
    @Operation(
        operationId = "updateCustomFieldContext",
        summary = "Update custom field context",
        description = "Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field contexts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the context is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the custom field or the context is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateCustomFieldContext(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId,
        @Parameter(name = "CustomFieldContextUpdateDetails", description = "", required = true) @Valid @RequestBody CustomFieldContextUpdateDetails customFieldContextUpdateDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/field/{fieldId}/context/{contextId}/option : Update custom field options (context)
     * Updates the options of a custom field.  If any of the options are not found, no options are updated. Options where the values in the request match the current values aren&#39;t updated and aren&#39;t reported in the response.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param fieldId The ID of the custom field. (required)
     * @param contextId The ID of the context. (required)
     * @param bulkCustomFieldOptionUpdateRequest  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field, context, or one or more options is not found. (status code 404)
     */
    @Operation(
        operationId = "updateCustomFieldOption",
        summary = "Update custom field options (context)",
        description = "Updates the options of a custom field.  If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.  Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue custom field options" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomFieldUpdatedContextOptionsList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field, context, or one or more options is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/field/{fieldId}/context/{contextId}/option",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CustomFieldUpdatedContextOptionsList> updateCustomFieldOption(
        @Parameter(name = "fieldId", description = "The ID of the custom field.", required = true, in = ParameterIn.PATH) @PathVariable("fieldId") String fieldId,
        @Parameter(name = "contextId", description = "The ID of the context.", required = true, in = ParameterIn.PATH) @PathVariable("contextId") Long contextId,
        @Parameter(name = "BulkCustomFieldOptionUpdateRequest", description = "", required = true) @Valid @RequestBody BulkCustomFieldOptionUpdateRequest bulkCustomFieldOptionUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"options\" : [ { \"disabled\" : true, \"id\" : \"id\", \"value\" : \"value\" }, { \"disabled\" : true, \"id\" : \"id\", \"value\" : \"value\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/app/field/{fieldIdOrKey}/value : Update custom field value
     * Updates the value of a custom field on one or more issues. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
     *
     * @param fieldIdOrKey The ID or key of the custom field. For example, &#x60;customfield_10010&#x60;. (required)
     * @param customFieldValueUpdateDetails  (required)
     * @param generateChangelog Whether to generate a changelog for this update. (optional, default to true)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the request is not authenticated as the app that provided the field. (status code 403)
     *         or Returned if the field is not found. (status code 404)
     */
    @Operation(
        operationId = "updateCustomFieldValue",
        summary = "Update custom field value",
        description = "Updates the value of a custom field on one or more issues. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.",
        tags = { "Issue custom field values (apps)" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not authenticated as the app that provided the field."),
            @ApiResponse(responseCode = "404", description = "Returned if the field is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/app/field/{fieldIdOrKey}/value",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateCustomFieldValue(
        @Parameter(name = "fieldIdOrKey", description = "The ID or key of the custom field. For example, `customfield_10010`.", required = true, in = ParameterIn.PATH) @PathVariable("fieldIdOrKey") String fieldIdOrKey,
        @Parameter(name = "CustomFieldValueUpdateDetails", description = "", required = true) @Valid @RequestBody CustomFieldValueUpdateDetails customFieldValueUpdateDetails,
        @Parameter(name = "generateChangelog", description = "Whether to generate a changelog for this update.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "generateChangelog", required = false, defaultValue = "true") Boolean generateChangelog
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/dashboard/{id} : Update dashboard
     * Updates a dashboard, replacing all the dashboard details with those provided.  **[Permissions](#permissions) required:** None  The dashboard to be updated must be owned by the user.
     *
     * @param id The ID of the dashboard to update. (required)
     * @param dashboardDetails Replacement dashboard details. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the dashboard is not found or the dashboard is not owned by the user. (status code 404)
     */
    @Operation(
        operationId = "updateDashboard",
        summary = "Update dashboard",
        description = "Updates a dashboard, replacing all the dashboard details with those provided.  **[Permissions](#permissions) required:** None  The dashboard to be updated must be owned by the user.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Dashboard.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the dashboard is not found or the dashboard is not owned by the user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/dashboard/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Dashboard> updateDashboard(
        @Parameter(name = "id", description = "The ID of the dashboard to update.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "DashboardDetails", description = "Replacement dashboard details.", required = true) @Valid @RequestBody DashboardDetails dashboardDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"automaticRefreshMs\" : 0, \"description\" : \"description\", \"isWritable\" : true, \"view\" : \"view\", \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"popularity\" : 1, \"name\" : \"name\", \"rank\" : 5, \"self\" : \"https://openapi-generator.tech\", \"systemDashboard\" : true, \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"isFavourite\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default : Update issue type screen scheme default screen scheme
     * Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @param updateDefaultScreenScheme  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type screen scheme or the screen screen is not found, or the screen scheme isn&#39;t used in classic projects. (status code 404)
     */
    @Operation(
        operationId = "updateDefaultScreenScheme",
        summary = "Update issue type screen scheme default screen scheme",
        description = "Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type screen scheme or the screen screen is not found, or the screen scheme isn't used in classic projects.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateDefaultScreenScheme(
        @Parameter(name = "issueTypeScreenSchemeId", description = "The ID of the issue type screen scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeScreenSchemeId") String issueTypeScreenSchemeId,
        @Parameter(name = "UpdateDefaultScreenScheme", description = "", required = true) @Valid @RequestBody UpdateDefaultScreenScheme updateDefaultScreenScheme
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflowscheme/{id}/default : Update default workflow
     * Sets the default workflow for a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. (required)
     * @param defaultWorkflow The new default workflow. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the workflow scheme cannot be edited and &#x60;updateDraftIfNeeded&#x60; is not &#x60;true&#x60;. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "updateDefaultWorkflow",
        summary = "Update default workflow",
        description = "Sets the default workflow for a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflowscheme/{id}/default",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> updateDefaultWorkflow(
        @Parameter(name = "id", description = "The ID of the workflow scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "DefaultWorkflow", description = "The new default workflow.", required = true) @Valid @RequestBody DefaultWorkflow defaultWorkflow
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflowscheme/{id}/draft/default : Update draft default workflow
     * Sets the default workflow for a workflow scheme&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param defaultWorkflow The object for the new default workflow. (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft. (status code 404)
     */
    @Operation(
        operationId = "updateDraftDefaultWorkflow",
        summary = "Update draft default workflow",
        description = "Sets the default workflow for a workflow scheme's draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflowscheme/{id}/draft/default",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> updateDraftDefaultWorkflow(
        @Parameter(name = "id", description = "The ID of the workflow scheme that the draft belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "DefaultWorkflow", description = "The object for the new default workflow.", required = true) @Valid @RequestBody DefaultWorkflow defaultWorkflow
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflowscheme/{id}/draft/workflow : Set issue types for workflow in workflow scheme
     * Sets the issue types for a workflow in a workflow scheme&#39;s draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme that the draft belongs to. (required)
     * @param workflowName The name of the workflow. (required)
     * @param issueTypesWorkflowMapping  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified. (status code 404)
     */
    @Operation(
        operationId = "updateDraftWorkflowMapping",
        summary = "Set issue types for workflow in workflow scheme",
        description = "Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow scheme does not have a draft.  *  The workflow is not found.  *  The workflow is not specified.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflowscheme/{id}/draft/workflow",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> updateDraftWorkflowMapping(
        @Parameter(name = "id", description = "The ID of the workflow scheme that the draft belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @NotNull @Parameter(name = "workflowName", description = "The name of the workflow.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = true) String workflowName,
        @Parameter(name = "IssueTypesWorkflowMapping", description = "", required = true) @Valid @RequestBody IssueTypesWorkflowMapping issueTypesWorkflowMapping
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/fieldconfiguration/{id} : Update field configuration
     * Updates a field configuration. The name and the description provided in the request override the existing values.  This operation can only update configurations used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the field configuration. (required)
     * @param fieldConfigurationDetails  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field configuration is not found. (status code 404)
     */
    @Operation(
        operationId = "updateFieldConfiguration",
        summary = "Update field configuration",
        description = "Updates a field configuration. The name and the description provided in the request override the existing values.  This operation can only update configurations used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field configuration is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/fieldconfiguration/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateFieldConfiguration(
        @Parameter(name = "id", description = "The ID of the field configuration.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "FieldConfigurationDetails", description = "", required = true) @Valid @RequestBody FieldConfigurationDetails fieldConfigurationDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/fieldconfiguration/{id}/fields : Update field configuration items
     * Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.  This operation can only update field configurations used in company-managed (classic) projects.  The operation can set the renderer for text fields to the default text renderer (&#x60;text-renderer&#x60;) or wiki style renderer (&#x60;wiki-renderer&#x60;). However, the renderer cannot be updated for fields using the autocomplete renderer (&#x60;autocomplete-renderer&#x60;).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the field configuration. (required)
     * @param fieldConfigurationItemsDetails  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the field configuration is not found. (status code 404)
     */
    @Operation(
        operationId = "updateFieldConfigurationItems",
        summary = "Update field configuration items",
        description = "Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.  This operation can only update field configurations used in company-managed (classic) projects.  The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the field configuration is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/fieldconfiguration/{id}/fields",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateFieldConfigurationItems(
        @Parameter(name = "id", description = "The ID of the field configuration.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "FieldConfigurationItemsDetails", description = "", required = true) @Valid @RequestBody FieldConfigurationItemsDetails fieldConfigurationItemsDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/fieldconfigurationscheme/{id} : Update field configuration scheme
     * Updates a field configuration scheme.  This operation can only update field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the field configuration scheme. (required)
     * @param updateFieldConfigurationSchemeDetails The details of the field configuration scheme. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permissions. (status code 403)
     *         or Returned if the field configuration scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "updateFieldConfigurationScheme",
        summary = "Update field configuration scheme",
        description = "Updates a field configuration scheme.  This operation can only update field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue field configurations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the field configuration scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/fieldconfigurationscheme/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateFieldConfigurationScheme(
        @Parameter(name = "id", description = "The ID of the field configuration scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "UpdateFieldConfigurationSchemeDetails", description = "The details of the field configuration scheme.", required = true) @Valid @RequestBody UpdateFieldConfigurationSchemeDetails updateFieldConfigurationSchemeDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/filter/{id} : Update filter
     * Updates a filter. Use this operation to update a filter&#39;s name, description, JQL, or sharing.  **[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.
     *
     * @param id The ID of the filter to update. (required)
     * @param filter The filter to update. (required)
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;.  *  &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;. (optional)
     * @param overrideSharePermissions EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request object is invalid. For example, the &#x60;name&#x60; is not unique or the project ID is not specified for a project role share permission. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     */
    @Operation(
        operationId = "updateFilter",
        summary = "Update filter",
        description = "Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.  **[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.",
        tags = { "Filters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Filter.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/filter/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Filter> updateFilter(
        @Parameter(name = "id", description = "The ID of the filter to update.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Filter", description = "The filter to update.", required = true) @Valid @RequestBody Filter filter,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:   *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "overrideSharePermissions", description = "EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideSharePermissions", required = false, defaultValue = "false") Boolean overrideSharePermissions
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"jql\" : \"jql\", \"favouritedCount\" : 0, \"description\" : \"description\", \"favourite\" : true, \"editPermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ], \"name\" : \"name\", \"viewUrl\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"searchUrl\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"sharePermissions\" : [ { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" }, { \"role\" : \"\", \"project\" : \"\", \"id\" : 6, \"type\" : \"user\", \"user\" : \"\", \"group\" : \"\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId} : Update gadget on dashboard
     * Changes the title, position, and color of the gadget on a dashboard.  **[Permissions](#permissions) required:** None.
     *
     * @param dashboardId The ID of the dashboard. (required)
     * @param gadgetId The ID of the gadget. (required)
     * @param dashboardGadgetUpdateRequest  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the gadget or the dashboard is not found. (status code 404)
     */
    @Operation(
        operationId = "updateGadget",
        summary = "Update gadget on dashboard",
        description = "Changes the title, position, and color of the gadget on a dashboard.  **[Permissions](#permissions) required:** None.",
        tags = { "Dashboards" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if the gadget or the dashboard is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateGadget(
        @Parameter(name = "dashboardId", description = "The ID of the dashboard.", required = true, in = ParameterIn.PATH) @PathVariable("dashboardId") Long dashboardId,
        @Parameter(name = "gadgetId", description = "The ID of the gadget.", required = true, in = ParameterIn.PATH) @PathVariable("gadgetId") Long gadgetId,
        @Parameter(name = "DashboardGadgetUpdateRequest", description = "", required = true) @Valid @RequestBody DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/field/{fieldKey}/option/{optionId} : Update issue field option
     * Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     *
     * @param fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the &#x60;fieldKey&#x60; value, do one of the following:   *  open the app&#39;s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the &#x60;jiraIssueFields&#x60; module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in &#x60;key&#x60;. For example, &#x60;\&quot;key\&quot;: \&quot;teams-add-on__team-issue-field\&quot;&#x60; (required)
     * @param optionId The ID of the option to be updated. (required)
     * @param issueFieldOption  (required)
     * @return Returned if the option is updated or created. (status code 200)
     *         or Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter. (status code 400)
     *         or Returned if the request is not authenticated as a Jira administrator or the app that provided the field. (status code 403)
     *         or Returned if field is not found. (status code 404)
     */
    @Operation(
        operationId = "updateIssueFieldOption",
        summary = "Update issue field option",
        description = "Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.",
        tags = { "Issue custom field options (apps)" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the option is updated or created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueFieldOption.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not authenticated as a Jira administrator or the app that provided the field."),
            @ApiResponse(responseCode = "404", description = "Returned if field is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/field/{fieldKey}/option/{optionId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IssueFieldOption> updateIssueFieldOption(
        @Parameter(name = "fieldKey", description = "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`", required = true, in = ParameterIn.PATH) @PathVariable("fieldKey") String fieldKey,
        @Parameter(name = "optionId", description = "The ID of the option to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("optionId") Long optionId,
        @Parameter(name = "IssueFieldOption", description = "", required = true) @Valid @RequestBody IssueFieldOption issueFieldOption
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 5, \"config\" : { \"scope\" : \"\", \"attributes\" : [ \"notSelectable\", \"notSelectable\" ] }, \"value\" : \"value\", \"properties\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issueLinkType/{issueLinkTypeId} : Update issue link type
     * Updates an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueLinkTypeId The ID of the issue link type. (required)
     * @param issueLinkType  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the issue link type ID or the request body are invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions. (status code 404)
     */
    @Operation(
        operationId = "updateIssueLinkType",
        summary = "Update issue link type",
        description = "Updates an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue link types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueLinkType.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the issue link type ID or the request body are invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  issue linking is disabled.  *  the issue link type is not found.  *  the user does not have the required permissions.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issueLinkType/{issueLinkTypeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IssueLinkType> updateIssueLinkType(
        @Parameter(name = "issueLinkTypeId", description = "The ID of the issue link type.", required = true, in = ParameterIn.PATH) @PathVariable("issueLinkTypeId") String issueLinkTypeId,
        @Parameter(name = "IssueLinkType", description = "", required = true) @Valid @RequestBody IssueLinkType issueLinkType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"inward\" : \"inward\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : \"id\", \"outward\" : \"outward\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuesecurityschemes/{id} : Update issue security scheme
     * Updates the issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the issue security scheme. (required)
     * @param updateIssueSecuritySchemeRequestBean  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue security scheme isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "updateIssueSecurityScheme",
        summary = "Update issue security scheme",
        description = "Updates the issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue security scheme isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuesecurityschemes/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateIssueSecurityScheme(
        @Parameter(name = "id", description = "The ID of the issue security scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UpdateIssueSecuritySchemeRequestBean", description = "", required = true) @Valid @RequestBody UpdateIssueSecuritySchemeRequestBean updateIssueSecuritySchemeRequestBean
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuetype/{id} : Update issue type
     * Updates the issue type.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the issue type. (required)
     * @param issueTypeUpdateBean  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid because:   *  no content is sent.  *  the issue type name exceeds 60 characters.  *  the avatar is not associated with this issue type. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the issue type is not found. (status code 404)
     *         or Returned if the issue type name is in use. (status code 409)
     */
    @Operation(
        operationId = "updateIssueType",
        summary = "Update issue type",
        description = "Updates the issue type.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue types" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueTypeDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid because:   *  no content is sent.  *  the issue type name exceeds 60 characters.  *  the avatar is not associated with this issue type."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type is not found."),
            @ApiResponse(responseCode = "409", description = "Returned if the issue type name is in use.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuetype/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IssueTypeDetails> updateIssueType(
        @Parameter(name = "id", description = "The ID of the issue type.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "IssueTypeUpdateBean", description = "", required = true) @Valid @RequestBody IssueTypeUpdateBean issueTypeUpdateBean
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuetypescheme/{issueTypeSchemeId} : Update issue type scheme
     * Updates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeSchemeId The ID of the issue type scheme. (required)
     * @param issueTypeSchemeUpdateDetails  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "updateIssueTypeScheme",
        summary = "Update issue type scheme",
        description = "Updates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateIssueTypeScheme(
        @Parameter(name = "issueTypeSchemeId", description = "The ID of the issue type scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeSchemeId") Long issueTypeSchemeId,
        @Parameter(name = "IssueTypeSchemeUpdateDetails", description = "", required = true) @Valid @RequestBody IssueTypeSchemeUpdateDetails issueTypeSchemeUpdateDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId} : Update issue type screen scheme
     * Updates an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param issueTypeScreenSchemeId The ID of the issue type screen scheme. (required)
     * @param issueTypeScreenSchemeUpdateDetails The issue type screen scheme update details. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the issue type screen scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "updateIssueTypeScreenScheme",
        summary = "Update issue type screen scheme",
        description = "Updates an issue type screen scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue type screen schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue type screen scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateIssueTypeScreenScheme(
        @Parameter(name = "issueTypeScreenSchemeId", description = "The ID of the issue type screen scheme.", required = true, in = ParameterIn.PATH) @PathVariable("issueTypeScreenSchemeId") String issueTypeScreenSchemeId,
        @Parameter(name = "IssueTypeScreenSchemeUpdateDetails", description = "The issue type screen scheme update details.", required = true) @Valid @RequestBody IssueTypeScreenSchemeUpdateDetails issueTypeScreenSchemeUpdateDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/app/field/value : Update custom fields
     * Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
     *
     * @param multipleCustomFieldValuesUpdateDetails  (required)
     * @param generateChangelog Whether to generate a changelog for this update. (optional, default to true)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the request is not authenticated as the app that provided all the fields. (status code 403)
     *         or Returned if any field is not found. (status code 404)
     */
    @Operation(
        operationId = "updateMultipleCustomFieldValues",
        summary = "Update custom fields",
        description = "Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.",
        tags = { "Issue custom field values (apps)" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not authenticated as the app that provided all the fields."),
            @ApiResponse(responseCode = "404", description = "Returned if any field is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/app/field/value",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateMultipleCustomFieldValues(
        @Parameter(name = "MultipleCustomFieldValuesUpdateDetails", description = "", required = true) @Valid @RequestBody MultipleCustomFieldValuesUpdateDetails multipleCustomFieldValuesUpdateDetails,
        @Parameter(name = "generateChangelog", description = "Whether to generate a changelog for this update.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "generateChangelog", required = false, defaultValue = "true") Boolean generateChangelog
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/notificationscheme/{id} : Update notification scheme
     * Updates a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the notification scheme. (required)
     * @param updateNotificationSchemeDetails  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the notification scheme isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "updateNotificationScheme",
        summary = "Update notification scheme",
        description = "Updates a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue notification schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the notification scheme isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/notificationscheme/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateNotificationScheme(
        @Parameter(name = "id", description = "The ID of the notification scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UpdateNotificationSchemeDetails", description = "", required = true) @Valid @RequestBody UpdateNotificationSchemeDetails updateNotificationSchemeDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/permissionscheme/{schemeId} : Update permission scheme
     * Updates a permission scheme. Below are some important things to note when using this resource:   *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.  *  If you want to update only the name and description, then do not send a permissions list in the request.  *  Sending an empty list will remove all permission grants from the permission scheme.  If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).  See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param schemeId The ID of the permission scheme to update. (required)
     * @param permissionScheme  (required)
     * @param expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission. (optional)
     * @return Returned if the scheme is updated. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the user does not have the necessary permission to update permission schemes.  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans. (status code 403)
     *         or Returned if the permission scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "updatePermissionScheme",
        summary = "Update permission scheme",
        description = "Updates a permission scheme. Below are some important things to note when using this resource:   *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.  *  If you want to update only the name and description, then do not send a permissions list in the request.  *  Sending an empty list will remove all permission grants from the permission scheme.  If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).  See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Permission schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the scheme is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PermissionScheme.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if:   *  the user does not have the necessary permission to update permission schemes.  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans."),
            @ApiResponse(responseCode = "404", description = "Returned if the permission scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/permissionscheme/{schemeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PermissionScheme> updatePermissionScheme(
        @Parameter(name = "schemeId", description = "The ID of the permission scheme to update.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") Long schemeId,
        @Parameter(name = "PermissionScheme", description = "", required = true) @Valid @RequestBody PermissionScheme permissionScheme,
        @Parameter(name = "expand", description = "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expand\" : \"expand\", \"permissions\" : [ { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 }, { \"self\" : \"https://openapi-generator.tech\", \"holder\" : \"\", \"permission\" : \"permission\", \"id\" : 6 } ], \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/3/jql/function/computation : Update precomputations (apps)
     * Update the precomputation value of a function created by a Forge/Connect app.  **[Permissions](#permissions) required:** An API for apps to update their own precomputations.
     *
     * @param jqlFunctionPrecomputationUpdateRequestBean  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the request is not authenticated as the app that provided the function. (status code 403)
     *         or Returned if the function is not found. (status code 404)
     */
    @Operation(
        operationId = "updatePrecomputations",
        summary = "Update precomputations (apps)",
        description = "Update the precomputation value of a function created by a Forge/Connect app.  **[Permissions](#permissions) required:** An API for apps to update their own precomputations.",
        tags = { "JQL functions (apps)" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not authenticated as the app that provided the function."),
            @ApiResponse(responseCode = "404", description = "Returned if the function is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2"),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/3/jql/function/computation",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updatePrecomputations(
        @Parameter(name = "JqlFunctionPrecomputationUpdateRequestBean", description = "", required = true) @Valid @RequestBody JqlFunctionPrecomputationUpdateRequestBean jqlFunctionPrecomputationUpdateRequestBean
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/priority/{id} : Update priority
     * Updates an issue priority.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the issue priority. (required)
     * @param updatePriorityDetails  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue priority isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "updatePriority",
        summary = "Update priority",
        description = "Updates an issue priority.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue priorities" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue priority isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/priority/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updatePriority(
        @Parameter(name = "id", description = "The ID of the issue priority.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UpdatePriorityDetails", description = "", required = true) @Valid @RequestBody UpdatePriorityDetails updatePriorityDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/project/{projectIdOrKey} : Update project
     * Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.  All parameters are optional in the body of the request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param updateProjectDetails The project details to be updated. (required)
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:   *  &#x60;description&#x60; The project description.  *  &#x60;issueTypes&#x60; The issue types associated with the project.  *  &#x60;lead&#x60; The project lead.  *  &#x60;projectKeys&#x60; All project keys associated with the project. (optional)
     * @return Returned if the project is updated. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if:   *  the user does not have the necessary permission to update project details.  *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans. (status code 403)
     *         or Returned if the project is not found. (status code 404)
     */
    @Operation(
        operationId = "updateProject",
        summary = "Update project",
        description = "Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.  All parameters are optional in the body of the request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the project is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if:   *  the user does not have the necessary permission to update project details.  *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/project/{projectIdOrKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Project> updateProject(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "UpdateProjectDetails", description = "The project details to be updated.", required = true) @Valid @RequestBody UpdateProjectDetails updateProjectDetails,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:   *  `description` The project description.  *  `issueTypes` The issue types associated with the project.  *  `lead` The project lead.  *  `projectKeys` All project keys associated with the project.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"components\" : [ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ], \"roles\" : { \"key\" : \"https://openapi-generator.tech\" }, \"description\" : \"description\", \"isPrivate\" : true, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ], \"archived\" : true, \"assigneeType\" : \"PROJECT_LEAD\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"email\" : \"email\", \"key\" : \"key\", \"archivedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"retentionTillDate\" : \"2000-01-23T04:56:07.000+00:00\", \"favourite\" : true, \"url\" : \"url\", \"expand\" : \"expand\", \"deleted\" : true, \"simplified\" : true, \"deletedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"versions\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"style\" : \"classic\", \"properties\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/project/{projectIdOrKey}/avatar : Set project avatar
     * Sets the avatar displayed for a project.  Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     *
     * @param projectIdOrKey The ID or (case-sensitive) key of the project. (required)
     * @param avatar  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to administer the project. (status code 403)
     *         or Returned if the project or avatar is not found or the user does not have permission to view the project. (status code 404)
     */
    @Operation(
        operationId = "updateProjectAvatar",
        summary = "Set project avatar",
        description = "Sets the avatar displayed for a project.  Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).",
        tags = { "Project avatars" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to administer the project."),
            @ApiResponse(responseCode = "404", description = "Returned if the project or avatar is not found or the user does not have permission to view the project.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/project/{projectIdOrKey}/avatar",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateProjectAvatar(
        @Parameter(name = "projectIdOrKey", description = "The ID or (case-sensitive) key of the project.", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "Avatar", description = "", required = true) @Valid @RequestBody Avatar avatar
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/projectCategory/{id} : Update project category
     * Updates a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id  (required)
     * @param projectCategory  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  &#x60;name&#x60; has been modified and exceeds 255 characters.  *  &#x60;description&#x60; has been modified and exceeds 1000 characters. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the project category is not found. (status code 404)
     */
    @Operation(
        operationId = "updateProjectCategory",
        summary = "Update project category",
        description = "Updates a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Project categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdatedProjectCategory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `name` has been modified and exceeds 255 characters.  *  `description` has been modified and exceeds 1000 characters."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the project category is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/projectCategory/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdatedProjectCategory> updateProjectCategory(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ProjectCategory", description = "", required = true) @Valid @RequestBody ProjectCategory projectCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/project/{projectId}/email : Set project&#39;s sender email
     * Sets the [project&#39;s sender email address](https://confluence.atlassian.com/x/dolKLg).  If &#x60;emailAddress&#x60; is an empty string, the default email address is restored.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *
     * @param projectId The project ID. (required)
     * @param projectEmailAddress The project&#39;s sender email address to be set. (required)
     * @return Returned if the project&#39;s sender email address is successfully set. (status code 204)
     *         or Returned if the request is not valid, if the email address is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to read project. (status code 403)
     *         or Returned if the project is not found. (status code 404)
     */
    @Operation(
        operationId = "updateProjectEmail",
        summary = "Set project's sender email",
        description = "Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).  If `emailAddress` is an empty string, the default email address is restored.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
        tags = { "Project email" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the project's sender email address is successfully set.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid, if the email address is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to read project."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/project/{projectId}/email",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateProjectEmail(
        @Parameter(name = "projectId", description = "The project ID.", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId,
        @Parameter(name = "ProjectEmailAddress", description = "The project's sender email address to be set.", required = true) @Valid @RequestBody ProjectEmailAddress projectEmailAddress
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey} : Update project type
     * Deprecated, this feature is no longer supported and no alternatives are available, see [Convert project to a different template or type](https://confluence.atlassian.com/x/yEKeOQ). Updates a [project type](https://confluence.atlassian.com/x/GwiiLQ). The project type can be updated for classic projects only, project type cannot be updated for next-gen projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param newProjectTypeKey The key of the new project type. (required)
     * @return Returned if the project type is updated. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the project is not found or the user does not have permission to view it. (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "updateProjectType",
        summary = "Update project type",
        description = "Deprecated, this feature is no longer supported and no alternatives are available, see [Convert project to a different template or type](https://confluence.atlassian.com/x/yEKeOQ). Updates a [project type](https://confluence.atlassian.com/x/GwiiLQ). The project type can be updated for classic projects only, project type cannot be updated for next-gen projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        deprecated = true,
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the project type is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the project is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Project> updateProjectType(
        @Parameter(name = "projectIdOrKey", description = "The project ID or project key (case sensitive).", required = true, in = ParameterIn.PATH) @PathVariable("projectIdOrKey") String projectIdOrKey,
        @Parameter(name = "newProjectTypeKey", description = "The key of the new project type.", required = true, in = ParameterIn.PATH) @PathVariable("newProjectTypeKey") String newProjectTypeKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"components\" : [ { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 }, { \"leadUserName\" : \"leadUserName\", \"description\" : \"description\", \"project\" : \"project\", \"leadAccountId\" : \"leadAccountId\", \"isAssigneeTypeValid\" : true, \"realAssigneeType\" : \"PROJECT_DEFAULT\", \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"assigneeType\" : \"PROJECT_DEFAULT\", \"id\" : \"id\", \"projectId\" : 0 } ], \"roles\" : { \"key\" : \"https://openapi-generator.tech\" }, \"description\" : \"description\", \"isPrivate\" : true, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"issueTypes\" : [ { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true }, { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } ], \"archived\" : true, \"assigneeType\" : \"PROJECT_LEAD\", \"id\" : \"id\", \"projectTypeKey\" : \"software\", \"email\" : \"email\", \"key\" : \"key\", \"archivedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"retentionTillDate\" : \"2000-01-23T04:56:07.000+00:00\", \"favourite\" : true, \"url\" : \"url\", \"expand\" : \"expand\", \"deleted\" : true, \"simplified\" : true, \"deletedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"versions\" : [ { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }, { \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" } ], \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"style\" : \"classic\", \"properties\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId} : Update remote issue link by ID
     * Updates a remote issue link for an issue.  Note: Fields without values in the request are set to null.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param linkId The ID of the remote issue link. (required)
     * @param remoteIssueLinkRequest  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if:   *  the link ID is invalid.  *  the remote issue link does not belong to the issue.  *  the request body is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have permission to link issues. (status code 403)
     *         or Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. (status code 404)
     */
    @Operation(
        operationId = "updateRemoteIssueLink",
        summary = "Update remote issue link by ID",
        description = "Updates a remote issue link for an issue.  Note: Fields without values in the request are set to null.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issue remote links" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the link ID is invalid.  *  the remote issue link does not belong to the issue.  *  the request body is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have permission to link issues."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateRemoteIssueLink(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "linkId", description = "The ID of the remote issue link.", required = true, in = ParameterIn.PATH) @PathVariable("linkId") String linkId,
        @Parameter(name = "RemoteIssueLinkRequest", description = "", required = true) @Valid @RequestBody RemoteIssueLinkRequest remoteIssueLinkRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/resolution/{id} : Update resolution
     * Updates an issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the issue resolution. (required)
     * @param updateResolutionDetails  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue resolution isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "updateResolution",
        summary = "Update resolution",
        description = "Updates an issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue resolutions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue resolution isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/resolution/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateResolution(
        @Parameter(name = "id", description = "The ID of the issue resolution.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UpdateResolutionDetails", description = "", required = true) @Valid @RequestBody UpdateResolutionDetails updateResolutionDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/screens/{screenId} : Update screen
     * Updates a screen. Only screens used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenId The ID of the screen. (required)
     * @param updateScreenDetails  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the screen is not found. (status code 404)
     */
    @Operation(
        operationId = "updateScreen",
        summary = "Update screen",
        description = "Updates a screen. Only screens used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screens" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Screen.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/screens/{screenId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Screen> updateScreen(
        @Parameter(name = "screenId", description = "The ID of the screen.", required = true, in = ParameterIn.PATH) @PathVariable("screenId") Long screenId,
        @Parameter(name = "UpdateScreenDetails", description = "", required = true) @Valid @RequestBody UpdateScreenDetails updateScreenDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"scope\" : \"\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/screenscheme/{screenSchemeId} : Update screen scheme
     * Updates a screen scheme. Only screen schemes used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param screenSchemeId The ID of the screen scheme. (required)
     * @param updateScreenSchemeDetails The screen scheme update details. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the required permissions. (status code 403)
     *         or Returned if the screen scheme or a screen used as one of the screen types is not found. (status code 404)
     */
    @Operation(
        operationId = "updateScreenScheme",
        summary = "Update screen scheme",
        description = "Updates a screen scheme. Only screen schemes used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Screen schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the required permissions."),
            @ApiResponse(responseCode = "404", description = "Returned if the screen scheme or a screen used as one of the screen types is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/screenscheme/{screenSchemeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateScreenScheme(
        @Parameter(name = "screenSchemeId", description = "The ID of the screen scheme.", required = true, in = ParameterIn.PATH) @PathVariable("screenSchemeId") String screenSchemeId,
        @Parameter(name = "UpdateScreenSchemeDetails", description = "The screen scheme update details.", required = true) @Valid @RequestBody UpdateScreenSchemeDetails updateScreenSchemeDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId} : Update issue security level
     * Updates the issue security level.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param schemeId The ID of the issue security scheme level belongs to. (required)
     * @param levelId The ID of the issue security level to update. (required)
     * @param updateIssueSecurityLevelDetails  (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request isn&#39;t valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user doesn&#39;t have the necessary permission. (status code 403)
     *         or Returned if the issue security level isn&#39;t found. (status code 404)
     */
    @Operation(
        operationId = "updateSecurityLevel",
        summary = "Update issue security level",
        description = "Updates the issue security level.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Issue security schemes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request isn't valid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the user doesn't have the necessary permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the issue security level isn't found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateSecurityLevel(
        @Parameter(name = "schemeId", description = "The ID of the issue security scheme level belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("schemeId") String schemeId,
        @Parameter(name = "levelId", description = "The ID of the issue security level to update.", required = true, in = ParameterIn.PATH) @PathVariable("levelId") String levelId,
        @Parameter(name = "UpdateIssueSecurityLevelDetails", description = "", required = true) @Valid @RequestBody UpdateIssueSecurityLevelDetails updateIssueSecurityLevelDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/statuses : Bulk update statuses
     * Updates statuses by ID.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     *
     * @param statusUpdateRequest The list of statuses that will be updated. (required)
     * @return Returned if the request is successful. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing, or the caller doesn&#39;t have permissions to perform the operation. (status code 401)
     */
    @Operation(
        operationId = "updateStatuses",
        summary = "Bulk update statuses",
        description = "Updates statuses by ID.  **[Permissions](#permissions) required:**   *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)",
        tags = { "Status" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/statuses",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateStatuses(
        @Parameter(name = "StatusUpdateRequest", description = "The list of statuses that will be updated.", required = true) @Valid @RequestBody StatusUpdateRequest statusUpdateRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/uiModifications/{uiModificationId} : Update UI modification
     * Updates a UI modification. UI modification can only be updated by Forge apps.  Each UI modification can define up to 1000 contexts.  **[Permissions](#permissions) required:**   *  *None* if the UI modification is created without contexts.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
     *
     * @param uiModificationId The ID of the UI modification. (required)
     * @param updateUiModificationDetails Details of the UI modification. (required)
     * @return Returned if the UI modification is updated. (status code 204)
     *         or Returned if the request is not valid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the request is not from a Forge app. (status code 403)
     *         or Returned if the UI modification, a project or an issue type in the context are not found. (status code 404)
     */
    @Operation(
        operationId = "updateUiModification",
        summary = "Update UI modification",
        description = "Updates a UI modification. UI modification can only be updated by Forge apps.  Each UI modification can define up to 1000 contexts.  **[Permissions](#permissions) required:**   *  *None* if the UI modification is created without contexts.  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.",
        tags = { "UI modifications (apps)" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the UI modification is updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is not valid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the request is not from a Forge app."),
            @ApiResponse(responseCode = "404", description = "Returned if the UI modification, a project or an issue type in the context are not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/uiModifications/{uiModificationId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> updateUiModification(
        @Parameter(name = "uiModificationId", description = "The ID of the UI modification.", required = true, in = ParameterIn.PATH) @PathVariable("uiModificationId") String uiModificationId,
        @Parameter(name = "UpdateUiModificationDetails", description = "Details of the UI modification.", required = true) @Valid @RequestBody UpdateUiModificationDetails updateUiModificationDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/version/{id} : Update version
     * Updates a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     *
     * @param id The ID of the version. (required)
     * @param version  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if:   *  the request is invalid.  *  the user does not have the required permissions. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if the version is not found. (status code 404)
     */
    @Operation(
        operationId = "updateVersion",
        summary = "Update version",
        description = "Updates a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.",
        tags = { "Project versions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Version.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  the request is invalid.  *  the user does not have the required permissions."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if the version is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-project" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/version/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Version> updateVersion(
        @Parameter(name = "id", description = "The ID of the version.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Version", description = "", required = true) @Valid @RequestBody Version version
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"releaseDate\" : \"2000-01-23\", \"description\" : \"description\", \"project\" : \"project\", \"archived\" : true, \"expand\" : \"expand\", \"operations\" : [ { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" }, { \"weight\" : 0, \"href\" : \"href\", \"id\" : \"id\", \"label\" : \"label\", \"styleClass\" : \"styleClass\", \"title\" : \"title\", \"iconClass\" : \"iconClass\" } ], \"overdue\" : true, \"name\" : \"name\", \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\", \"userReleaseDate\" : \"userReleaseDate\", \"id\" : \"id\", \"userStartDate\" : \"userStartDate\", \"projectId\" : 6, \"released\" : true, \"startDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflowscheme/{id}/workflow : Set issue types for workflow in workflow scheme
     * Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. (required)
     * @param workflowName The name of the workflow. (required)
     * @param issueTypesWorkflowMapping  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified. (status code 404)
     */
    @Operation(
        operationId = "updateWorkflowMapping",
        summary = "Set issue types for workflow in workflow scheme",
        description = "Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if any of the following is true:   *  The workflow scheme is not found.  *  The workflow is not found.  *  The workflow is not specified.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflowscheme/{id}/workflow",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> updateWorkflowMapping(
        @Parameter(name = "id", description = "The ID of the workflow scheme.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @NotNull @Parameter(name = "workflowName", description = "The name of the workflow.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = true) String workflowName,
        @Parameter(name = "IssueTypesWorkflowMapping", description = "", required = true) @Valid @RequestBody IssueTypesWorkflowMapping issueTypesWorkflowMapping
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflowscheme/{id} : Update workflow scheme
     * Updates a workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that &#x60;updateDraftIfNeeded&#x60; is set to &#x60;true&#x60;.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as &#x60;schemeId&#x60;. For example, *schemeId&#x3D;10301*. (required)
     * @param workflowScheme  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow scheme is not found. (status code 404)
     */
    @Operation(
        operationId = "updateWorkflowScheme",
        summary = "Update workflow scheme",
        description = "Updates a workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow schemes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow scheme is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflowscheme/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> updateWorkflowScheme(
        @Parameter(name = "id", description = "The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "WorkflowScheme", description = "", required = true) @Valid @RequestBody WorkflowScheme workflowScheme
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflowscheme/{id}/draft : Update draft workflow scheme
     * Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param id The ID of the active workflow scheme that the draft was created from. (required)
     * @param workflowScheme  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft. (status code 404)
     */
    @Operation(
        operationId = "updateWorkflowSchemeDraft",
        summary = "Update draft workflow scheme",
        description = "Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow scheme drafts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowScheme.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the original active workflow scheme is not found.  *  the original active workflow scheme does not have a draft.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflowscheme/{id}/draft",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowScheme> updateWorkflowSchemeDraft(
        @Parameter(name = "id", description = "The ID of the active workflow scheme that the draft was created from.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "WorkflowScheme", description = "", required = true) @Valid @RequestBody WorkflowScheme workflowScheme
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalDefaultWorkflow\" : \"originalDefaultWorkflow\", \"description\" : \"description\", \"issueTypes\" : { \"key\" : { \"avatarId\" : 0, \"hierarchyLevel\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"self\" : \"self\", \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"iconUrl\" : \"iconUrl\", \"id\" : \"id\", \"subtask\" : true } }, \"originalIssueTypeMappings\" : { \"key\" : \"originalIssueTypeMappings\" }, \"defaultWorkflow\" : \"defaultWorkflow\", \"updateDraftIfNeeded\" : true, \"draft\" : true, \"name\" : \"name\", \"self\" : \"https://openapi-generator.tech\", \"id\" : 5, \"lastModified\" : \"lastModified\", \"issueTypeMappings\" : { \"key\" : \"issueTypeMappings\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflow/transitions/{transitionId}/properties : Update workflow transition property
     * Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. (required)
     * @param key The key of the property being updated, also known as the name of the property. Set this to the same value as the &#x60;key&#x60; defined in the request body. (required)
     * @param workflowName The name of the workflow that the transition belongs to. (required)
     * @param workflowTransitionProperty  (required)
     * @param workflowMode The workflow status. Set to &#x60;live&#x60; for inactive workflows or &#x60;draft&#x60; for draft workflows. Active workflows cannot be edited. (optional)
     * @return 200 response (status code 200)
     *         or Returned if no changes were made by the request. For example, attempting to update a property with its current value. (status code 304)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the user does not have the necessary permission. (status code 403)
     *         or Returned if the workflow transition is not found. (status code 404)
     */
    @Operation(
        operationId = "updateWorkflowTransitionProperty",
        summary = "Update workflow transition property",
        description = "Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
        tags = { "Workflow transition properties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "200 response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowTransitionProperty.class))
            }),
            @ApiResponse(responseCode = "304", description = "Returned if no changes were made by the request. For example, attempting to update a property with its current value."),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "403", description = "Returned if the user does not have the necessary permission."),
            @ApiResponse(responseCode = "404", description = "Returned if the workflow transition is not found.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "manage:jira-configuration" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflow/transitions/{transitionId}/properties",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowTransitionProperty> updateWorkflowTransitionProperty(
        @Parameter(name = "transitionId", description = "The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.", required = true, in = ParameterIn.PATH) @PathVariable("transitionId") Long transitionId,
        @NotNull @Parameter(name = "key", description = "The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = true) String key,
        @NotNull @Parameter(name = "workflowName", description = "The name of the workflow that the transition belongs to.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowName", required = true) String workflowName,
        @Parameter(name = "WorkflowTransitionProperty", description = "", required = true) @Valid @RequestBody WorkflowTransitionProperty workflowTransitionProperty,
        @Parameter(name = "workflowMode", description = "The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workflowMode", required = false) String workflowMode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"value\" : \"value\", \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/workflow/rule/config : Update workflow transition rule configurations
     * Updates configuration of workflow transition rules. The following rule types are supported:   *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)  Only rules created by the calling Connect app can be updated.  To assist with app migration, this operation can be used to:   *  Disable a rule.  *  Add a &#x60;tag&#x60;. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).  Rules are enabled if the &#x60;disabled&#x60; parameter is not provided.  **[Permissions](#permissions) required:** Only Connect apps can use this operation.
     *
     * @param workflowTransitionRulesUpdate  (required)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the request is invalid. (status code 400)
     *         or Returned if the caller is not a Connect app. (status code 403)
     */
    @Operation(
        operationId = "updateWorkflowTransitionRuleConfigurations",
        summary = "Update workflow transition rule configurations",
        description = "Updates configuration of workflow transition rules. The following rule types are supported:   *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)  Only rules created by the calling Connect app can be updated.  To assist with app migration, this operation can be used to:   *  Disable a rule.  *  Add a `tag`. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).  Rules are enabled if the `disabled` parameter is not provided.  **[Permissions](#permissions) required:** Only Connect apps can use this operation.",
        tags = { "Workflow transition rules" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowTransitionRulesUpdateErrors.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if the request is invalid.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "403", description = "Returned if the caller is not a Connect app.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/workflow/rule/config",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowTransitionRulesUpdateErrors> updateWorkflowTransitionRuleConfigurations(
        @Parameter(name = "WorkflowTransitionRulesUpdate", description = "", required = true) @Valid @RequestBody WorkflowTransitionRulesUpdate workflowTransitionRulesUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updateResults\" : [ { \"updateErrors\" : [ \"updateErrors\", \"updateErrors\" ], \"workflowId\" : { \"draft\" : true, \"name\" : \"name\" }, \"ruleUpdateErrors\" : { \"key\" : [ \"ruleUpdateErrors\", \"ruleUpdateErrors\" ] } }, { \"updateErrors\" : [ \"updateErrors\", \"updateErrors\" ], \"workflowId\" : { \"draft\" : true, \"name\" : \"name\" }, \"ruleUpdateErrors\" : { \"key\" : [ \"ruleUpdateErrors\", \"ruleUpdateErrors\" ] } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/3/issue/{issueIdOrKey}/worklog/{id} : Update worklog
     * Updates a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     *
     * @param issueIdOrKey The ID or key the issue. (required)
     * @param id The ID of the worklog. (required)
     * @param worklog  (required)
     * @param notifyUsers Whether users watching the issue are notified by email. (optional, default to true)
     * @param adjustEstimate Defines how to update the issue&#39;s time estimate, the options are:   *  &#x60;new&#x60; Sets the estimate to a specific value, defined in &#x60;newEstimate&#x60;.  *  &#x60;leave&#x60; Leaves the estimate unchanged.  *  &#x60;auto&#x60; Updates the estimate by the difference between the original and updated value of &#x60;timeSpent&#x60; or &#x60;timeSpentSeconds&#x60;. (optional, default to auto)
     * @param newEstimate The value to set as the issue&#39;s remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when &#x60;adjustEstimate&#x60; is &#x60;new&#x60;. (optional)
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts &#x60;properties&#x60;, which returns worklog properties. (optional, default to )
     * @param overrideEditableFlag Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag. (optional, default to false)
     * @return Returned if the request is successful (status code 200)
     *         or Returned if:   *  &#x60;adjustEstimate&#x60; is set to &#x60;new&#x60; but &#x60;newEstimate&#x60; is not provided or is invalid.  *  the user does not have permission to update the worklog.  *  the request JSON is malformed. (status code 400)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     *         or Returned if:   *  the issue is not found or user does not have permission to view the issue.  *  the worklog is not found or the user does not have permission to view it.  *  time tracking is disabled. (status code 404)
     */
    @Operation(
        operationId = "updateWorklog",
        summary = "Update worklog",
        description = "Updates a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
        tags = { "Issue worklogs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Worklog.class))
            }),
            @ApiResponse(responseCode = "400", description = "Returned if:   *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.  *  the user does not have permission to update the worklog.  *  the request JSON is malformed."),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect."),
            @ApiResponse(responseCode = "404", description = "Returned if:   *  the issue is not found or user does not have permission to view the issue.  *  the worklog is not found or the user does not have permission to view it.  *  time tracking is disabled.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Worklog> updateWorklog(
        @Parameter(name = "issueIdOrKey", description = "The ID or key the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "id", description = "The ID of the worklog.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Worklog", description = "", required = true) @Valid @RequestBody Worklog worklog,
        @Parameter(name = "notifyUsers", description = "Whether users watching the issue are notified by email.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "notifyUsers", required = false, defaultValue = "true") Boolean notifyUsers,
        @Parameter(name = "adjustEstimate", description = "Defines how to update the issue's time estimate, the options are:   *  `new` Sets the estimate to a specific value, defined in `newEstimate`.  *  `leave` Leaves the estimate unchanged.  *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "adjustEstimate", required = false, defaultValue = "auto") String adjustEstimate,
        @Parameter(name = "newEstimate", description = "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "newEstimate", required = false) String newEstimate,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false, defaultValue = "") String expand,
        @Parameter(name = "overrideEditableFlag", description = "Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "overrideEditableFlag", required = false, defaultValue = "false") Boolean overrideEditableFlag
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"issueId\" : \"issueId\", \"visibility\" : \"\", \"timeSpent\" : \"timeSpent\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"started\" : \"2000-01-23T04:56:07.000+00:00\", \"timeSpentSeconds\" : 5, \"self\" : \"https://openapi-generator.tech\", \"comment\" : \"\", \"id\" : \"id\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"properties\" : [ { \"value\" : \"\", \"key\" : \"key\" }, { \"value\" : \"\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/3/projectvalidate/key : Validate project key
     * Validates a project key by confirming the key is a valid string and not in use.  **[Permissions](#permissions) required:** None.
     *
     * @param key The project key. (optional)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect. (status code 401)
     */
    @Operation(
        operationId = "validateProjectKey",
        summary = "Validate project key",
        description = "Validates a project key by confirming the key is a valid string and not in use.  **[Permissions](#permissions) required:** None.",
        tags = { "Project key and name validation" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect.")
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read:jira-work" }),
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/3/projectvalidate/key",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ErrorCollection> validateProjectKey(
        @Parameter(name = "key", description = "The project key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorMessages\" : [ \"errorMessages\", \"errorMessages\" ], \"errors\" : { \"key\" : \"errors\" }, \"status\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
