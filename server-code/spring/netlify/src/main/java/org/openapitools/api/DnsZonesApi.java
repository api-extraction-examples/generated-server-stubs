/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.DnsRecord;
import org.openapitools.model.DnsRecordCreate;
import org.openapitools.model.DnsZone;
import org.openapitools.model.DnsZoneSetup;
import org.openapitools.model.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:42.313754-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "dnsZone", description = "the dnsZone API")
public interface DnsZonesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /dns_zones/{zone_id}/dns_records
     *
     * @param zoneId  (required)
     * @param dnsRecord  (required)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createDnsRecord",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DnsRecord.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/dns_zones/{zone_id}/dns_records",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DnsRecord> createDnsRecord(
        @Parameter(name = "zone_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("zone_id") String zoneId,
        @Parameter(name = "dns_record", description = "", required = true) @Valid @RequestBody DnsRecordCreate dnsRecord
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /dns_zones
     *
     * @param dnsZoneParams  (required)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createDnsZone",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DnsZone.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/dns_zones",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DnsZone> createDnsZone(
        @Parameter(name = "DnsZoneParams", description = "", required = true) @Valid @RequestBody DnsZoneSetup dnsZoneParams
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dedicated\" : true, \"records\" : [ { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }, { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" } ], \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ], \"created_at\" : \"created_at\", \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ], \"account_slug\" : \"account_slug\", \"account_id\" : \"account_id\", \"updated_at\" : \"updated_at\", \"user_id\" : \"user_id\", \"account_name\" : \"account_name\", \"domain\" : \"domain\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"ipv6_enabled\" : true, \"id\" : \"id\", \"errors\" : [ \"errors\", \"errors\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /dns_zones/{zone_id}/dns_records/{dns_record_id}
     *
     * @param zoneId  (required)
     * @param dnsRecordId  (required)
     * @return record deleted (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteDnsRecord",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "204", description = "record deleted"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/dns_zones/{zone_id}/dns_records/{dns_record_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteDnsRecord(
        @Parameter(name = "zone_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("zone_id") String zoneId,
        @Parameter(name = "dns_record_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("dns_record_id") String dnsRecordId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /dns_zones/{zone_id}
     *
     * @param zoneId  (required)
     * @return delete a single DNS zone (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteDnsZone",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "204", description = "delete a single DNS zone"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/dns_zones/{zone_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteDnsZone(
        @Parameter(name = "zone_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("zone_id") String zoneId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dns_zones/{zone_id}/dns_records
     *
     * @param zoneId  (required)
     * @return get all DNS records for a single DNS zone (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getDnsRecords",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "200", description = "get all DNS records for a single DNS zone", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DnsRecord.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dns_zones/{zone_id}/dns_records",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DnsRecord>> getDnsRecords(
        @Parameter(name = "zone_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("zone_id") String zoneId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }, { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dns_zones/{zone_id}
     *
     * @param zoneId  (required)
     * @return get a single DNS zone (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getDnsZone",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "200", description = "get a single DNS zone", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DnsZone.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dns_zones/{zone_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DnsZone> getDnsZone(
        @Parameter(name = "zone_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("zone_id") String zoneId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dedicated\" : true, \"records\" : [ { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }, { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" } ], \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ], \"created_at\" : \"created_at\", \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ], \"account_slug\" : \"account_slug\", \"account_id\" : \"account_id\", \"updated_at\" : \"updated_at\", \"user_id\" : \"user_id\", \"account_name\" : \"account_name\", \"domain\" : \"domain\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"ipv6_enabled\" : true, \"id\" : \"id\", \"errors\" : [ \"errors\", \"errors\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dns_zones
     *
     * @param accountSlug  (optional)
     * @return get all DNS zones the user has access to (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getDnsZones",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "200", description = "get all DNS zones the user has access to", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DnsZone.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dns_zones",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DnsZone>> getDnsZones(
        @Parameter(name = "account_slug", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "account_slug", required = false) String accountSlug
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"dedicated\" : true, \"records\" : [ { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }, { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" } ], \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ], \"created_at\" : \"created_at\", \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ], \"account_slug\" : \"account_slug\", \"account_id\" : \"account_id\", \"updated_at\" : \"updated_at\", \"user_id\" : \"user_id\", \"account_name\" : \"account_name\", \"domain\" : \"domain\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"ipv6_enabled\" : true, \"id\" : \"id\", \"errors\" : [ \"errors\", \"errors\" ] }, { \"dedicated\" : true, \"records\" : [ { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }, { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" } ], \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ], \"created_at\" : \"created_at\", \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ], \"account_slug\" : \"account_slug\", \"account_id\" : \"account_id\", \"updated_at\" : \"updated_at\", \"user_id\" : \"user_id\", \"account_name\" : \"account_name\", \"domain\" : \"domain\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"ipv6_enabled\" : true, \"id\" : \"id\", \"errors\" : [ \"errors\", \"errors\" ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dns_zones/{zone_id}/dns_records/{dns_record_id}
     *
     * @param zoneId  (required)
     * @param dnsRecordId  (required)
     * @return get a single DNS record (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getIndividualDnsRecord",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "200", description = "get a single DNS record", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DnsRecord.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dns_zones/{zone_id}/dns_records/{dns_record_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DnsRecord> getIndividualDnsRecord(
        @Parameter(name = "zone_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("zone_id") String zoneId,
        @Parameter(name = "dns_record_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("dns_record_id") String dnsRecordId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /dns_zones/{zone_id}/transfer
     *
     * @param zoneId  (required)
     * @param accountId the account of the dns zone (required)
     * @param transferAccountId the account you want to transfer the dns zone to (required)
     * @param transferUserId the user you want to transfer the dns zone to (required)
     * @return transfer a DNS zone to another account (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "transferDnsZone",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "200", description = "transfer a DNS zone to another account", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DnsZone.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/dns_zones/{zone_id}/transfer",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DnsZone> transferDnsZone(
        @Parameter(name = "zone_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("zone_id") String zoneId,
        @NotNull @Parameter(name = "account_id", description = "the account of the dns zone", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "account_id", required = true) String accountId,
        @NotNull @Parameter(name = "transfer_account_id", description = "the account you want to transfer the dns zone to", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "transfer_account_id", required = true) String transferAccountId,
        @NotNull @Parameter(name = "transfer_user_id", description = "the user you want to transfer the dns zone to", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "transfer_user_id", required = true) String transferUserId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dedicated\" : true, \"records\" : [ { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }, { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" } ], \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ], \"created_at\" : \"created_at\", \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ], \"account_slug\" : \"account_slug\", \"account_id\" : \"account_id\", \"updated_at\" : \"updated_at\", \"user_id\" : \"user_id\", \"account_name\" : \"account_name\", \"domain\" : \"domain\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"ipv6_enabled\" : true, \"id\" : \"id\", \"errors\" : [ \"errors\", \"errors\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
