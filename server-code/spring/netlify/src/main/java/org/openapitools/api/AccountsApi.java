/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccountMembership;
import org.openapitools.model.AccountSetup;
import org.openapitools.model.AccountType;
import org.openapitools.model.AccountUpdateSetup;
import org.openapitools.model.AuditLog;
import org.openapitools.model.CreateEnvVarsRequestInner;
import org.openapitools.model.EnvVar;
import org.openapitools.model.Error;
import org.openapitools.model.SetEnvVarValueRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:42.313754-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "accountMembership", description = "the accountMembership API")
public interface AccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /accounts/{account_id}
     *
     * @param accountId  (required)
     * @return Not Content (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "cancelAccount",
        tags = { "accountMembership" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Not Content"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/accounts/{account_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> cancelAccount(
        @Parameter(name = "account_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accounts
     *
     * @param accountSetup  (required)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createAccount",
        tags = { "accountMembership" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountMembership.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AccountMembership> createAccount(
        @Parameter(name = "accountSetup", description = "", required = true) @Valid @RequestBody AccountSetup accountSetup
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"billing_period\" : \"billing_period\", \"billing_details\" : \"billing_details\", \"type_name\" : \"type_name\", \"capabilities\" : { \"collaborators\" : { \"used\" : 6, \"included\" : 0 }, \"sites\" : { \"used\" : 6, \"included\" : 0 } }, \"type_id\" : \"type_id\", \"created_at\" : \"created_at\", \"billing_name\" : \"billing_name\", \"type\" : \"type\", \"payment_method_id\" : \"payment_method_id\", \"updated_at\" : \"updated_at\", \"roles_allowed\" : [ \"roles_allowed\", \"roles_allowed\" ], \"billing_email\" : \"billing_email\", \"name\" : \"name\", \"id\" : \"id\", \"owner_ids\" : [ \"owner_ids\", \"owner_ids\" ], \"slug\" : \"slug\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accounts/{account_id}/env
     * Creates new environment variables. Granular scopes are available on Pro plans and above.  To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.
     *
     * @param accountId Scope response to account_id (required)
     * @param siteId If provided, create an environment variable on the site level, not the account level (optional)
     * @param envVars  (optional)
     * @return OK (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createEnvVars",
        description = "Creates new environment variables. Granular scopes are available on Pro plans and above.  To use this endpoint, your site must no longer be using the <a href=\"https://docs.netlify.com/environment-variables/classic-experience/\">classic environment variables experience</a>.  Migrate now with the Netlify UI.",
        tags = { "environmentVariables" },
        responses = {
            @ApiResponse(responseCode = "201", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EnvVar.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/accounts/{account_id}/env",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<EnvVar>> createEnvVars(
        @Parameter(name = "account_id", description = "Scope response to account_id", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId,
        @Parameter(name = "site_id", description = "If provided, create an environment variable on the site level, not the account level", in = ParameterIn.QUERY) @Valid @RequestParam(value = "site_id", required = false) String siteId,
        @Parameter(name = "env_vars", description = "") @Valid @RequestBody(required = false) List<@Valid CreateEnvVarsRequestInner> envVars
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"values\" : [ { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" }, { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" } ], \"updated_by\" : { \"full_name\" : \"full_name\", \"avatar_url\" : \"avatar_url\", \"id\" : \"id\", \"email\" : \"email\" }, \"scopes\" : [ \"builds\", \"builds\" ], \"key\" : \"key\" }, { \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"values\" : [ { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" }, { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" } ], \"updated_by\" : { \"full_name\" : \"full_name\", \"avatar_url\" : \"avatar_url\", \"id\" : \"id\", \"email\" : \"email\" }, \"scopes\" : [ \"builds\", \"builds\" ], \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /accounts/{account_id}/env/{key}
     * Deletes an environment variable. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.
     *
     * @param accountId Scope response to account_id (required)
     * @param key The environment variable key (case-sensitive) (required)
     * @param siteId If provided, delete the environment variable from this site (optional)
     * @return No Content (success) (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteEnvVar",
        description = "Deletes an environment variable. To use this endpoint, your site must no longer be using the <a href=\"https://docs.netlify.com/environment-variables/classic-experience/\">classic environment variables experience</a>.  Migrate now with the Netlify UI.",
        tags = { "environmentVariables" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content (success)"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/accounts/{account_id}/env/{key}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteEnvVar(
        @Parameter(name = "account_id", description = "Scope response to account_id", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId,
        @Parameter(name = "key", description = "The environment variable key (case-sensitive)", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "site_id", description = "If provided, delete the environment variable from this site", in = ParameterIn.QUERY) @Valid @RequestParam(value = "site_id", required = false) String siteId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /accounts/{account_id}/env/{key}/value/{id}
     * Deletes a specific environment variable value. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.
     *
     * @param accountId Scope response to account_id (required)
     * @param id The environment variable value&#39;s ID (required)
     * @param key The environment variable key name (case-sensitive) (required)
     * @param siteId If provided, delete the value from an environment variable on this site (optional)
     * @return No Content (success) (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteEnvVarValue",
        description = "Deletes a specific environment variable value. To use this endpoint, your site must no longer be using the <a href=\"https://docs.netlify.com/environment-variables/classic-experience/\">classic environment variables experience</a>.  Migrate now with the Netlify UI.",
        tags = { "environmentVariables" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content (success)"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/accounts/{account_id}/env/{key}/value/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteEnvVarValue(
        @Parameter(name = "account_id", description = "Scope response to account_id", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId,
        @Parameter(name = "id", description = "The environment variable value's ID", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "key", description = "The environment variable key name (case-sensitive)", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "site_id", description = "If provided, delete the value from an environment variable on this site", in = ParameterIn.QUERY) @Valid @RequestParam(value = "site_id", required = false) String siteId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{account_id}
     *
     * @param accountId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getAccount",
        tags = { "accountMembership" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AccountMembership.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/{account_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AccountMembership>> getAccount(
        @Parameter(name = "account_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"billing_period\" : \"billing_period\", \"billing_details\" : \"billing_details\", \"type_name\" : \"type_name\", \"capabilities\" : { \"collaborators\" : { \"used\" : 6, \"included\" : 0 }, \"sites\" : { \"used\" : 6, \"included\" : 0 } }, \"type_id\" : \"type_id\", \"created_at\" : \"created_at\", \"billing_name\" : \"billing_name\", \"type\" : \"type\", \"payment_method_id\" : \"payment_method_id\", \"updated_at\" : \"updated_at\", \"roles_allowed\" : [ \"roles_allowed\", \"roles_allowed\" ], \"billing_email\" : \"billing_email\", \"name\" : \"name\", \"id\" : \"id\", \"owner_ids\" : [ \"owner_ids\", \"owner_ids\" ], \"slug\" : \"slug\" }, { \"billing_period\" : \"billing_period\", \"billing_details\" : \"billing_details\", \"type_name\" : \"type_name\", \"capabilities\" : { \"collaborators\" : { \"used\" : 6, \"included\" : 0 }, \"sites\" : { \"used\" : 6, \"included\" : 0 } }, \"type_id\" : \"type_id\", \"created_at\" : \"created_at\", \"billing_name\" : \"billing_name\", \"type\" : \"type\", \"payment_method_id\" : \"payment_method_id\", \"updated_at\" : \"updated_at\", \"roles_allowed\" : [ \"roles_allowed\", \"roles_allowed\" ], \"billing_email\" : \"billing_email\", \"name\" : \"name\", \"id\" : \"id\", \"owner_ids\" : [ \"owner_ids\", \"owner_ids\" ], \"slug\" : \"slug\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{account_id}/env/{key}
     * Returns an individual environment variable. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.
     *
     * @param accountId Scope response to account_id (required)
     * @param key The environment variable key (case-sensitive) (required)
     * @param siteId If provided, return the environment variable for a specific site (no merging is performed) (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getEnvVar",
        description = "Returns an individual environment variable. To use this endpoint, your site must no longer be using the <a href=\"https://docs.netlify.com/environment-variables/classic-experience/\">classic environment variables experience</a>.  Migrate now with the Netlify UI.",
        tags = { "environmentVariables" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EnvVar.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/{account_id}/env/{key}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EnvVar> getEnvVar(
        @Parameter(name = "account_id", description = "Scope response to account_id", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId,
        @Parameter(name = "key", description = "The environment variable key (case-sensitive)", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "site_id", description = "If provided, return the environment variable for a specific site (no merging is performed)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "site_id", required = false) String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"values\" : [ { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" }, { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" } ], \"updated_by\" : { \"full_name\" : \"full_name\", \"avatar_url\" : \"avatar_url\", \"id\" : \"id\", \"email\" : \"email\" }, \"scopes\" : [ \"builds\", \"builds\" ], \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{account_id}/env
     * Returns all environment variables for an account or site. An account corresponds to a team in the Netlify UI. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.
     *
     * @param accountId Scope response to account_id (required)
     * @param contextName Filter by deploy context (optional)
     * @param scope Filter by scope (optional)
     * @param siteId If specified, only return environment variables set on this site (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getEnvVars",
        description = "Returns all environment variables for an account or site. An account corresponds to a team in the Netlify UI. To use this endpoint, your site must no longer be using the <a href=\"https://docs.netlify.com/environment-variables/classic-experience/\">classic environment variables experience</a>.  Migrate now with the Netlify UI.",
        tags = { "environmentVariables" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EnvVar.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/{account_id}/env",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<EnvVar>> getEnvVars(
        @Parameter(name = "account_id", description = "Scope response to account_id", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId,
        @Parameter(name = "context_name", description = "Filter by deploy context", in = ParameterIn.QUERY) @Valid @RequestParam(value = "context_name", required = false) String contextName,
        @Parameter(name = "scope", description = "Filter by scope", in = ParameterIn.QUERY) @Valid @RequestParam(value = "scope", required = false) String scope,
        @Parameter(name = "site_id", description = "If specified, only return environment variables set on this site", in = ParameterIn.QUERY) @Valid @RequestParam(value = "site_id", required = false) String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"values\" : [ { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" }, { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" } ], \"updated_by\" : { \"full_name\" : \"full_name\", \"avatar_url\" : \"avatar_url\", \"id\" : \"id\", \"email\" : \"email\" }, \"scopes\" : [ \"builds\", \"builds\" ], \"key\" : \"key\" }, { \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"values\" : [ { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" }, { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" } ], \"updated_by\" : { \"full_name\" : \"full_name\", \"avatar_url\" : \"avatar_url\", \"id\" : \"id\", \"email\" : \"email\" }, \"scopes\" : [ \"builds\", \"builds\" ], \"key\" : \"key\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{account_id}/audit
     *
     * @param accountId  (required)
     * @param query  (optional)
     * @param logType  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listAccountAuditEvents",
        tags = { "auditLog" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AuditLog.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/{account_id}/audit",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AuditLog>> listAccountAuditEvents(
        @Parameter(name = "account_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId,
        @Parameter(name = "query", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "log_type", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "log_type", required = false) String logType,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "per_page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false) Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"account_id\" : \"account_id\", \"payload\" : { \"key\" : \"{}\" }, \"id\" : \"id\" }, { \"account_id\" : \"account_id\", \"payload\" : { \"key\" : \"{}\" }, \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/types
     *
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listAccountTypesForUser",
        tags = { "accountType" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AccountType.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/types",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AccountType>> listAccountTypesForUser(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"yearly_dollar_price\" : 1, \"capabilities\" : \"{}\", \"yearly_seats_addon_dollar_price\" : 5, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"monthly_dollar_price\" : 0, \"monthly_seats_addon_dollar_price\" : 6 }, { \"yearly_dollar_price\" : 1, \"capabilities\" : \"{}\", \"yearly_seats_addon_dollar_price\" : 5, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"monthly_dollar_price\" : 0, \"monthly_seats_addon_dollar_price\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts
     *
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listAccountsForUser",
        tags = { "accountMembership" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AccountMembership.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AccountMembership>> listAccountsForUser(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"billing_period\" : \"billing_period\", \"billing_details\" : \"billing_details\", \"type_name\" : \"type_name\", \"capabilities\" : { \"collaborators\" : { \"used\" : 6, \"included\" : 0 }, \"sites\" : { \"used\" : 6, \"included\" : 0 } }, \"type_id\" : \"type_id\", \"created_at\" : \"created_at\", \"billing_name\" : \"billing_name\", \"type\" : \"type\", \"payment_method_id\" : \"payment_method_id\", \"updated_at\" : \"updated_at\", \"roles_allowed\" : [ \"roles_allowed\", \"roles_allowed\" ], \"billing_email\" : \"billing_email\", \"name\" : \"name\", \"id\" : \"id\", \"owner_ids\" : [ \"owner_ids\", \"owner_ids\" ], \"slug\" : \"slug\" }, { \"billing_period\" : \"billing_period\", \"billing_details\" : \"billing_details\", \"type_name\" : \"type_name\", \"capabilities\" : { \"collaborators\" : { \"used\" : 6, \"included\" : 0 }, \"sites\" : { \"used\" : 6, \"included\" : 0 } }, \"type_id\" : \"type_id\", \"created_at\" : \"created_at\", \"billing_name\" : \"billing_name\", \"type\" : \"type\", \"payment_method_id\" : \"payment_method_id\", \"updated_at\" : \"updated_at\", \"roles_allowed\" : [ \"roles_allowed\", \"roles_allowed\" ], \"billing_email\" : \"billing_email\", \"name\" : \"name\", \"id\" : \"id\", \"owner_ids\" : [ \"owner_ids\", \"owner_ids\" ], \"slug\" : \"slug\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /accounts/{account_id}/env/{key}
     * Updates or creates a new value for an existing environment variable. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.
     *
     * @param accountId Scope response to account_id (required)
     * @param key The existing environment variable key name (case-sensitive) (required)
     * @param siteId If provided, update an environment variable set on this site (optional)
     * @param envVar  (optional)
     * @return Created (success) (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "setEnvVarValue",
        description = "Updates or creates a new value for an existing environment variable. To use this endpoint, your site must no longer be using the <a href=\"https://docs.netlify.com/environment-variables/classic-experience/\">classic environment variables experience</a>.  Migrate now with the Netlify UI.",
        tags = { "environmentVariables" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created (success)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EnvVar.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/accounts/{account_id}/env/{key}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EnvVar> setEnvVarValue(
        @Parameter(name = "account_id", description = "Scope response to account_id", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId,
        @Parameter(name = "key", description = "The existing environment variable key name (case-sensitive)", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "site_id", description = "If provided, update an environment variable set on this site", in = ParameterIn.QUERY) @Valid @RequestParam(value = "site_id", required = false) String siteId,
        @Parameter(name = "env_var", description = "") @Valid @RequestBody(required = false) SetEnvVarValueRequest envVar
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"values\" : [ { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" }, { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" } ], \"updated_by\" : { \"full_name\" : \"full_name\", \"avatar_url\" : \"avatar_url\", \"id\" : \"id\", \"email\" : \"email\" }, \"scopes\" : [ \"builds\", \"builds\" ], \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /accounts/{account_id}
     *
     * @param accountId  (required)
     * @param accountUpdateSetup  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateAccount",
        tags = { "accountMembership" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountMembership.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/accounts/{account_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AccountMembership> updateAccount(
        @Parameter(name = "account_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId,
        @Parameter(name = "accountUpdateSetup", description = "") @Valid @RequestBody(required = false) AccountUpdateSetup accountUpdateSetup
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"billing_period\" : \"billing_period\", \"billing_details\" : \"billing_details\", \"type_name\" : \"type_name\", \"capabilities\" : { \"collaborators\" : { \"used\" : 6, \"included\" : 0 }, \"sites\" : { \"used\" : 6, \"included\" : 0 } }, \"type_id\" : \"type_id\", \"created_at\" : \"created_at\", \"billing_name\" : \"billing_name\", \"type\" : \"type\", \"payment_method_id\" : \"payment_method_id\", \"updated_at\" : \"updated_at\", \"roles_allowed\" : [ \"roles_allowed\", \"roles_allowed\" ], \"billing_email\" : \"billing_email\", \"name\" : \"name\", \"id\" : \"id\", \"owner_ids\" : [ \"owner_ids\", \"owner_ids\" ], \"slug\" : \"slug\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /accounts/{account_id}/env/{key}
     * Updates an existing environment variable and all of its values. Existing values will be replaced by values provided. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.
     *
     * @param accountId Scope response to account_id (required)
     * @param key The existing environment variable key name (case-sensitive) (required)
     * @param siteId If provided, update an environment variable set on this site (optional)
     * @param envVar  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateEnvVar",
        description = "Updates an existing environment variable and all of its values. Existing values will be replaced by values provided. To use this endpoint, your site must no longer be using the <a href=\"https://docs.netlify.com/environment-variables/classic-experience/\">classic environment variables experience</a>.  Migrate now with the Netlify UI.",
        tags = { "environmentVariables" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EnvVar.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/accounts/{account_id}/env/{key}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EnvVar> updateEnvVar(
        @Parameter(name = "account_id", description = "Scope response to account_id", required = true, in = ParameterIn.PATH) @PathVariable("account_id") String accountId,
        @Parameter(name = "key", description = "The existing environment variable key name (case-sensitive)", required = true, in = ParameterIn.PATH) @PathVariable("key") String key,
        @Parameter(name = "site_id", description = "If provided, update an environment variable set on this site", in = ParameterIn.QUERY) @Valid @RequestParam(value = "site_id", required = false) String siteId,
        @Parameter(name = "env_var", description = "") @Valid @RequestBody(required = false) CreateEnvVarsRequestInner envVar
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"values\" : [ { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" }, { \"context\" : \"all\", \"id\" : \"id\", \"value\" : \"value\" } ], \"updated_by\" : { \"full_name\" : \"full_name\", \"avatar_url\" : \"avatar_url\", \"id\" : \"id\", \"email\" : \"email\" }, \"scopes\" : [ \"builds\", \"builds\" ], \"key\" : \"key\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
