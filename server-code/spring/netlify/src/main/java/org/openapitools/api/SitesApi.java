/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Asset;
import org.openapitools.model.AssetPublicSignature;
import org.openapitools.model.AssetSignature;
import org.openapitools.model.Build;
import org.openapitools.model.BuildHook;
import org.openapitools.model.BuildHookSetup;
import org.openapitools.model.BuildSetup;
import org.openapitools.model.Deploy;
import org.openapitools.model.DeployFiles;
import org.openapitools.model.DeployedBranch;
import org.openapitools.model.DnsZone;
import org.openapitools.model.Error;
import org.openapitools.model.Form;
import org.openapitools.model.Plugin;
import org.openapitools.model.PluginParams;
import org.openapitools.model.PluginRun;
import org.openapitools.model.ServiceInstance;
import org.openapitools.model.Site;
import org.openapitools.model.SiteSetup;
import org.openapitools.model.SniCertificate;
import org.openapitools.model.Snippet;
import org.openapitools.model.SplitTest;
import org.openapitools.model.SplitTestSetup;
import org.openapitools.model.Submission;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:42.313754-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "dnsZone", description = "the dnsZone API")
public interface SitesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /sites/{site_id}/dns
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "configureDNSForSite",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DnsZone.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/dns",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DnsZone>> configureDNSForSite(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"dedicated\" : true, \"records\" : [ { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }, { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" } ], \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ], \"created_at\" : \"created_at\", \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ], \"account_slug\" : \"account_slug\", \"account_id\" : \"account_id\", \"updated_at\" : \"updated_at\", \"user_id\" : \"user_id\", \"account_name\" : \"account_name\", \"domain\" : \"domain\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"ipv6_enabled\" : true, \"id\" : \"id\", \"errors\" : [ \"errors\", \"errors\" ] }, { \"dedicated\" : true, \"records\" : [ { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }, { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" } ], \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ], \"created_at\" : \"created_at\", \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ], \"account_slug\" : \"account_slug\", \"account_id\" : \"account_id\", \"updated_at\" : \"updated_at\", \"user_id\" : \"user_id\", \"account_name\" : \"account_name\", \"domain\" : \"domain\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"ipv6_enabled\" : true, \"id\" : \"id\", \"errors\" : [ \"errors\", \"errors\" ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/services/{addon}/instances
     *
     * @param siteId  (required)
     * @param addon  (required)
     * @param config  (required)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createServiceInstance",
        tags = { "serviceInstance" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceInstance.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/services/{addon}/instances",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ServiceInstance> createServiceInstance(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "addon", description = "", required = true, in = ParameterIn.PATH) @PathVariable("addon") String addon,
        @Parameter(name = "config", description = "", required = true) @Valid @RequestBody Object config
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"service_slug\" : \"service_slug\", \"updated_at\" : \"updated_at\", \"service_name\" : \"service_name\", \"snippets\" : [ \"{}\", \"{}\" ], \"created_at\" : \"created_at\", \"auth_url\" : \"auth_url\", \"id\" : \"id\", \"service_path\" : \"service_path\", \"env\" : \"{}\", \"config\" : \"{}\", \"url\" : \"url\", \"external_attributes\" : \"{}\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites
     * **Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.
     *
     * @param site  (required)
     * @param configureDns  (optional)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createSite",
        description = "**Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.",
        tags = { "site" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Site.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Site> createSite(
        @Parameter(name = "site", description = "", required = true) @Valid @RequestBody SiteSetup site,
        @Parameter(name = "configure_dns", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "configure_dns", required = false) Boolean configureDns
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_domain\" : \"id_domain\", \"deploy_hook\" : \"deploy_hook\", \"deploy_url\" : \"deploy_url\", \"created_at\" : \"created_at\", \"ssl\" : true, \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ], \"password\" : \"password\", \"updated_at\" : \"updated_at\", \"account_name\" : \"account_name\", \"id\" : \"id\", \"published_deploy\" : { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }, \"state\" : \"state\", \"custom_domain\" : \"custom_domain\", \"default_hooks_data\" : { \"access_token\" : \"access_token\" }, \"plan\" : \"plan\", \"managed_dns\" : true, \"force_ssl\" : true, \"capabilities\" : { \"key\" : \"{}\" }, \"notification_email\" : \"notification_email\", \"git_provider\" : \"git_provider\", \"session_id\" : \"session_id\", \"admin_url\" : \"admin_url\", \"build_settings\" : { \"repo_url\" : \"repo_url\", \"stop_builds\" : true, \"deploy_key_id\" : \"deploy_key_id\", \"installation_id\" : 6, \"dir\" : \"dir\", \"env\" : { \"key\" : \"env\" }, \"repo_branch\" : \"repo_branch\", \"private_logs\" : true, \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ], \"functions_dir\" : \"functions_dir\", \"repo_path\" : \"repo_path\", \"provider\" : \"provider\", \"public_repo\" : true, \"cmd\" : \"cmd\", \"id\" : 0 }, \"prerender\" : \"prerender\", \"url\" : \"url\", \"account_slug\" : \"account_slug\", \"ssl_url\" : \"ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"build_image\" : \"build_image\", \"processing_settings\" : { \"css\" : { \"minify\" : true, \"bundle\" : true }, \"images\" : { \"optimize\" : true }, \"js\" : { \"minify\" : true, \"bundle\" : true }, \"html\" : { \"pretty_urls\" : true }, \"skip\" : true }, \"screenshot_url\" : \"screenshot_url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/assets
     *
     * @param siteId  (required)
     * @param name  (required)
     * @param size  (required)
     * @param contentType  (required)
     * @param visibility  (optional)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createSiteAsset",
        tags = { "asset" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssetSignature.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/assets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AssetSignature> createSiteAsset(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @NotNull @Parameter(name = "name", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name,
        @NotNull @Parameter(name = "size", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = true) Long size,
        @NotNull @Parameter(name = "content_type", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "content_type", required = true) String contentType,
        @Parameter(name = "visibility", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "visibility", required = false) String visibility
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"form\" : { \"fields\" : { \"key\" : \"fields\" }, \"url\" : \"url\" }, \"asset\" : { \"content_type\" : \"content_type\", \"size\" : 0, \"updated_at\" : \"updated_at\", \"visibility\" : \"visibility\", \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"state\" : \"state\", \"key\" : \"key\", \"url\" : \"url\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/builds
     *
     * @param siteId  (required)
     * @param build  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createSiteBuild",
        tags = { "build" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Build.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/builds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Build> createSiteBuild(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "build", description = "") @Valid @RequestBody(required = false) BuildSetup build
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"created_at\" : \"created_at\", \"id\" : \"id\", \"error\" : \"error\", \"done\" : true, \"sha\" : \"sha\", \"deploy_id\" : \"deploy_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/build_hooks
     *
     * @param siteId  (required)
     * @param buildHook  (required)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createSiteBuildHook",
        tags = { "buildHook" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildHook.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/build_hooks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BuildHook> createSiteBuildHook(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "buildHook", description = "", required = true) @Valid @RequestBody BuildHookSetup buildHook
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"title\" : \"title\", \"branch\" : \"branch\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/deploys
     *
     * @param siteId  (required)
     * @param deploy  (required)
     * @param deployPreviews  (optional)
     * @param production  (optional)
     * @param state  (optional)
     * @param branch  (optional)
     * @param latestPublished  (optional)
     * @param title  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createSiteDeploy",
        tags = { "deploy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Deploy.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/deploys",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Deploy> createSiteDeploy(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "deploy", description = "", required = true) @Valid @RequestBody DeployFiles deploy,
        @Parameter(name = "deploy-previews", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploy-previews", required = false) Boolean deployPreviews,
        @Parameter(name = "production", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "production", required = false) Boolean production,
        @Parameter(name = "state", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) String state,
        @Parameter(name = "branch", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "branch", required = false) String branch,
        @Parameter(name = "latest-published", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latest-published", required = false) Boolean latestPublished,
        @Parameter(name = "title", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "title", required = false) String title
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/snippets
     *
     * @param siteId  (required)
     * @param snippet  (required)
     * @return OK (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createSiteSnippet",
        tags = { "snippet" },
        responses = {
            @ApiResponse(responseCode = "201", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Snippet.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/snippets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Snippet> createSiteSnippet(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "snippet", description = "", required = true) @Valid @RequestBody Snippet snippet
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"general\" : \"general\", \"goal\" : \"goal\", \"general_position\" : \"general_position\", \"site_id\" : \"site_id\", \"id\" : 0, \"goal_position\" : \"goal_position\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/traffic_splits
     *
     * @param siteId  (required)
     * @param branchTests  (required)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createSplitTest",
        tags = { "splitTest" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SplitTest.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/traffic_splits",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SplitTest> createSplitTest(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "branch_tests", description = "", required = true) @Valid @RequestBody SplitTestSetup branchTests
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"updated_at\" : \"updated_at\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"active\" : true, \"created_at\" : \"created_at\", \"id\" : \"id\", \"branches\" : [ \"{}\", \"{}\" ], \"unpublished_at\" : \"unpublished_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /sites/{site_id}/services/{addon}/instances/{instance_id}
     *
     * @param siteId  (required)
     * @param addon  (required)
     * @param instanceId  (required)
     * @return Deleted (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteServiceInstance",
        tags = { "serviceInstance" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/sites/{site_id}/services/{addon}/instances/{instance_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteServiceInstance(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "addon", description = "", required = true, in = ParameterIn.PATH) @PathVariable("addon") String addon,
        @Parameter(name = "instance_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("instance_id") String instanceId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /sites/{site_id}
     *
     * @param siteId  (required)
     * @return Deleted (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteSite",
        tags = { "site" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/sites/{site_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteSite(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /sites/{site_id}/assets/{asset_id}
     *
     * @param siteId  (required)
     * @param assetId  (required)
     * @return Deleted (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteSiteAsset",
        tags = { "asset" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/sites/{site_id}/assets/{asset_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteSiteAsset(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "asset_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("asset_id") String assetId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /sites/{site_id}/build_hooks/{id}
     *
     * @param siteId  (required)
     * @param id  (required)
     * @return No content (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteSiteBuildHook",
        tags = { "buildHook" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/sites/{site_id}/build_hooks/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteSiteBuildHook(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /sites/{site_id}/deploys/{deploy_id}
     *
     * @param deployId  (required)
     * @param siteId  (required)
     * @return No content (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteSiteDeploy",
        tags = { "deploy" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/sites/{site_id}/deploys/{deploy_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteSiteDeploy(
        @Parameter(name = "deploy_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("deploy_id") String deployId,
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /sites/{site_id}/forms/{form_id}
     *
     * @param siteId  (required)
     * @param formId  (required)
     * @return Deleted (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteSiteForm",
        tags = { "form" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/sites/{site_id}/forms/{form_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteSiteForm(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "form_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("form_id") String formId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /sites/{site_id}/snippets/{snippet_id}
     *
     * @param siteId  (required)
     * @param snippetId  (required)
     * @return No content (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "deleteSiteSnippet",
        tags = { "snippet" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/sites/{site_id}/snippets/{snippet_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteSiteSnippet(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "snippet_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("snippet_id") String snippetId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/traffic_splits/{split_test_id}/unpublish
     *
     * @param siteId  (required)
     * @param splitTestId  (required)
     * @return disabled (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "disableSplitTest",
        tags = { "splitTest" },
        responses = {
            @ApiResponse(responseCode = "204", description = "disabled"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/traffic_splits/{split_test_id}/unpublish",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> disableSplitTest(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "split_test_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("split_test_id") String splitTestId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/traffic_splits/{split_test_id}/publish
     *
     * @param siteId  (required)
     * @param splitTestId  (required)
     * @return enable (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "enableSplitTest",
        tags = { "splitTest" },
        responses = {
            @ApiResponse(responseCode = "204", description = "enable"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/traffic_splits/{split_test_id}/publish",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> enableSplitTest(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "split_test_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("split_test_id") String splitTestId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/dns
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getDNSForSite",
        tags = { "dnsZone" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DnsZone.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/dns",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DnsZone>> getDNSForSite(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"dedicated\" : true, \"records\" : [ { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }, { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" } ], \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ], \"created_at\" : \"created_at\", \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ], \"account_slug\" : \"account_slug\", \"account_id\" : \"account_id\", \"updated_at\" : \"updated_at\", \"user_id\" : \"user_id\", \"account_name\" : \"account_name\", \"domain\" : \"domain\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"ipv6_enabled\" : true, \"id\" : \"id\", \"errors\" : [ \"errors\", \"errors\" ] }, { \"dedicated\" : true, \"records\" : [ { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" }, { \"hostname\" : \"hostname\", \"flag\" : 0, \"managed\" : true, \"site_id\" : \"site_id\", \"dns_zone_id\" : \"dns_zone_id\", \"id\" : \"id\", \"tag\" : \"tag\", \"priority\" : 6, \"type\" : \"type\", \"ttl\" : 1, \"value\" : \"value\" } ], \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ], \"created_at\" : \"created_at\", \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ], \"account_slug\" : \"account_slug\", \"account_id\" : \"account_id\", \"updated_at\" : \"updated_at\", \"user_id\" : \"user_id\", \"account_name\" : \"account_name\", \"domain\" : \"domain\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"ipv6_enabled\" : true, \"id\" : \"id\", \"errors\" : [ \"errors\", \"errors\" ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/plugin_runs/latest
     * This is an internal-only endpoint.
     *
     * @param siteId  (required)
     * @param packages  (required)
     * @param state  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getLatestPluginRuns",
        description = "This is an internal-only endpoint.",
        tags = { "x-internal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PluginRun.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/plugin_runs/latest",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PluginRun>> getLatestPluginRuns(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @NotNull @Parameter(name = "packages", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "packages", required = true) List<String> packages,
        @Parameter(name = "state", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) String state
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}
     * **Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getSite",
        description = "**Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.",
        tags = { "site" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Site.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Site> getSite(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_domain\" : \"id_domain\", \"deploy_hook\" : \"deploy_hook\", \"deploy_url\" : \"deploy_url\", \"created_at\" : \"created_at\", \"ssl\" : true, \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ], \"password\" : \"password\", \"updated_at\" : \"updated_at\", \"account_name\" : \"account_name\", \"id\" : \"id\", \"published_deploy\" : { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }, \"state\" : \"state\", \"custom_domain\" : \"custom_domain\", \"default_hooks_data\" : { \"access_token\" : \"access_token\" }, \"plan\" : \"plan\", \"managed_dns\" : true, \"force_ssl\" : true, \"capabilities\" : { \"key\" : \"{}\" }, \"notification_email\" : \"notification_email\", \"git_provider\" : \"git_provider\", \"session_id\" : \"session_id\", \"admin_url\" : \"admin_url\", \"build_settings\" : { \"repo_url\" : \"repo_url\", \"stop_builds\" : true, \"deploy_key_id\" : \"deploy_key_id\", \"installation_id\" : 6, \"dir\" : \"dir\", \"env\" : { \"key\" : \"env\" }, \"repo_branch\" : \"repo_branch\", \"private_logs\" : true, \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ], \"functions_dir\" : \"functions_dir\", \"repo_path\" : \"repo_path\", \"provider\" : \"provider\", \"public_repo\" : true, \"cmd\" : \"cmd\", \"id\" : 0 }, \"prerender\" : \"prerender\", \"url\" : \"url\", \"account_slug\" : \"account_slug\", \"ssl_url\" : \"ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"build_image\" : \"build_image\", \"processing_settings\" : { \"css\" : { \"minify\" : true, \"bundle\" : true }, \"images\" : { \"optimize\" : true }, \"js\" : { \"minify\" : true, \"bundle\" : true }, \"html\" : { \"pretty_urls\" : true }, \"skip\" : true }, \"screenshot_url\" : \"screenshot_url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/assets/{asset_id}
     *
     * @param siteId  (required)
     * @param assetId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getSiteAssetInfo",
        tags = { "asset" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Asset.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/assets/{asset_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Asset> getSiteAssetInfo(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "asset_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("asset_id") String assetId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"content_type\" : \"content_type\", \"size\" : 0, \"updated_at\" : \"updated_at\", \"visibility\" : \"visibility\", \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"state\" : \"state\", \"key\" : \"key\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/assets/{asset_id}/public_signature
     *
     * @param siteId  (required)
     * @param assetId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getSiteAssetPublicSignature",
        tags = { "assetPublicSignature" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssetPublicSignature.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/assets/{asset_id}/public_signature",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AssetPublicSignature> getSiteAssetPublicSignature(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "asset_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("asset_id") String assetId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/build_hooks/{id}
     *
     * @param siteId  (required)
     * @param id  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getSiteBuildHook",
        tags = { "buildHook" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildHook.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/build_hooks/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildHook> getSiteBuildHook(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"title\" : \"title\", \"branch\" : \"branch\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/deploys/{deploy_id}
     *
     * @param siteId  (required)
     * @param deployId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getSiteDeploy",
        tags = { "deploy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Deploy.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/deploys/{deploy_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Deploy> getSiteDeploy(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "deploy_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("deploy_id") String deployId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/files/{file_path}
     *
     * @param siteId  (required)
     * @param filePath  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getSiteFileByPathName",
        tags = { "file" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/files/{file_path}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getSiteFileByPathName(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "file_path", description = "", required = true, in = ParameterIn.PATH) @PathVariable("file_path") String filePath
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"size\" : 0, \"mime_type\" : \"mime_type\", \"id\" : \"id\", \"sha\" : \"sha\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/metadata
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getSiteMetadata",
        tags = { "metadata" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/metadata",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> getSiteMetadata(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/snippets/{snippet_id}
     *
     * @param siteId  (required)
     * @param snippetId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getSiteSnippet",
        tags = { "snippet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Snippet.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/snippets/{snippet_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Snippet> getSiteSnippet(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "snippet_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("snippet_id") String snippetId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"general\" : \"general\", \"goal\" : \"goal\", \"general_position\" : \"general_position\", \"site_id\" : \"site_id\", \"id\" : 0, \"goal_position\" : \"goal_position\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/traffic_splits/{split_test_id}
     *
     * @param siteId  (required)
     * @param splitTestId  (required)
     * @return split_test (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getSplitTest",
        tags = { "splitTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "split_test", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SplitTest.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/traffic_splits/{split_test_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SplitTest> getSplitTest(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "split_test_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("split_test_id") String splitTestId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"updated_at\" : \"updated_at\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"active\" : true, \"created_at\" : \"created_at\", \"id\" : \"id\", \"branches\" : [ \"{}\", \"{}\" ], \"unpublished_at\" : \"unpublished_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/traffic_splits
     *
     * @param siteId  (required)
     * @return split_tests (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getSplitTests",
        tags = { "splitTest" },
        responses = {
            @ApiResponse(responseCode = "200", description = "split_tests", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SplitTest.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/traffic_splits",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<SplitTest>> getSplitTests(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"path\" : \"path\", \"updated_at\" : \"updated_at\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"active\" : true, \"created_at\" : \"created_at\", \"id\" : \"id\", \"branches\" : [ \"{}\", \"{}\" ], \"unpublished_at\" : \"unpublished_at\" }, { \"path\" : \"path\", \"updated_at\" : \"updated_at\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"active\" : true, \"created_at\" : \"created_at\", \"id\" : \"id\", \"branches\" : [ \"{}\", \"{}\" ], \"unpublished_at\" : \"unpublished_at\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/service-instances
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listServiceInstancesForSite",
        tags = { "serviceInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ServiceInstance.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/service-instances",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ServiceInstance>> listServiceInstancesForSite(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"service_slug\" : \"service_slug\", \"updated_at\" : \"updated_at\", \"service_name\" : \"service_name\", \"snippets\" : [ \"{}\", \"{}\" ], \"created_at\" : \"created_at\", \"auth_url\" : \"auth_url\", \"id\" : \"id\", \"service_path\" : \"service_path\", \"env\" : \"{}\", \"config\" : \"{}\", \"url\" : \"url\", \"external_attributes\" : \"{}\" }, { \"service_slug\" : \"service_slug\", \"updated_at\" : \"updated_at\", \"service_name\" : \"service_name\", \"snippets\" : [ \"{}\", \"{}\" ], \"created_at\" : \"created_at\", \"auth_url\" : \"auth_url\", \"id\" : \"id\", \"service_path\" : \"service_path\", \"env\" : \"{}\", \"config\" : \"{}\", \"url\" : \"url\", \"external_attributes\" : \"{}\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/assets
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSiteAssets",
        tags = { "asset" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Asset.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/assets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Asset>> listSiteAssets(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"content_type\" : \"content_type\", \"size\" : 0, \"updated_at\" : \"updated_at\", \"visibility\" : \"visibility\", \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"state\" : \"state\", \"key\" : \"key\", \"url\" : \"url\" }, { \"content_type\" : \"content_type\", \"size\" : 0, \"updated_at\" : \"updated_at\", \"visibility\" : \"visibility\", \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"state\" : \"state\", \"key\" : \"key\", \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/build_hooks
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSiteBuildHooks",
        tags = { "buildHook" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BuildHook.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/build_hooks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<BuildHook>> listSiteBuildHooks(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"title\" : \"title\", \"branch\" : \"branch\", \"url\" : \"url\" }, { \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"title\" : \"title\", \"branch\" : \"branch\", \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/builds
     *
     * @param siteId  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSiteBuilds",
        tags = { "build" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Build.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/builds",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Build>> listSiteBuilds(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "per_page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false) Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"created_at\" : \"created_at\", \"id\" : \"id\", \"error\" : \"error\", \"done\" : true, \"sha\" : \"sha\", \"deploy_id\" : \"deploy_id\" }, { \"created_at\" : \"created_at\", \"id\" : \"id\", \"error\" : \"error\", \"done\" : true, \"sha\" : \"sha\", \"deploy_id\" : \"deploy_id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/deployed-branches
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSiteDeployedBranches",
        tags = { "deployedBranch" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DeployedBranch.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/deployed-branches",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DeployedBranch>> listSiteDeployedBranches(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"ssl_url\" : \"ssl_url\", \"name\" : \"name\", \"id\" : \"id\", \"slug\" : \"slug\", \"url\" : \"url\", \"deploy_id\" : \"deploy_id\" }, { \"ssl_url\" : \"ssl_url\", \"name\" : \"name\", \"id\" : \"id\", \"slug\" : \"slug\", \"url\" : \"url\", \"deploy_id\" : \"deploy_id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/deploys
     *
     * @param siteId  (required)
     * @param deployPreviews  (optional)
     * @param production  (optional)
     * @param state  (optional)
     * @param branch  (optional)
     * @param latestPublished  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSiteDeploys",
        tags = { "deploy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Deploy.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/deploys",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Deploy>> listSiteDeploys(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "deploy-previews", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deploy-previews", required = false) Boolean deployPreviews,
        @Parameter(name = "production", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "production", required = false) Boolean production,
        @Parameter(name = "state", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) String state,
        @Parameter(name = "branch", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "branch", required = false) String branch,
        @Parameter(name = "latest-published", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latest-published", required = false) Boolean latestPublished,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "per_page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false) Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }, { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/files
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSiteFiles",
        tags = { "file" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = org.springframework.core.io.Resource.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/files",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<org.springframework.core.io.Resource>> listSiteFiles(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"path\" : \"path\", \"size\" : 0, \"mime_type\" : \"mime_type\", \"id\" : \"id\", \"sha\" : \"sha\" }, { \"path\" : \"path\", \"size\" : 0, \"mime_type\" : \"mime_type\", \"id\" : \"id\", \"sha\" : \"sha\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/forms
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSiteForms",
        tags = { "form" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Form.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/forms",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Form>> listSiteForms(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"paths\" : [ \"paths\", \"paths\" ], \"submission_count\" : 0, \"name\" : \"name\", \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"fields\" : [ \"{}\", \"{}\" ] }, { \"paths\" : [ \"paths\", \"paths\" ], \"submission_count\" : 0, \"name\" : \"name\", \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"fields\" : [ \"{}\", \"{}\" ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/snippets
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSiteSnippets",
        tags = { "snippet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Snippet.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/snippets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Snippet>> listSiteSnippets(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"general\" : \"general\", \"goal\" : \"goal\", \"general_position\" : \"general_position\", \"site_id\" : \"site_id\", \"id\" : 0, \"goal_position\" : \"goal_position\", \"title\" : \"title\" }, { \"general\" : \"general\", \"goal\" : \"goal\", \"general_position\" : \"general_position\", \"site_id\" : \"site_id\", \"id\" : 0, \"goal_position\" : \"goal_position\", \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/submissions
     *
     * @param siteId  (required)
     * @param page  (optional)
     * @param perPage  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSiteSubmissions",
        tags = { "submission" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Submission.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/submissions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Submission>> listSiteSubmissions(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "per_page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false) Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"summary\" : \"summary\", \"number\" : 0, \"data\" : \"{}\", \"site_url\" : \"site_url\", \"name\" : \"name\", \"created_at\" : \"created_at\", \"last_name\" : \"last_name\", \"company\" : \"company\", \"id\" : \"id\", \"body\" : \"body\", \"first_name\" : \"first_name\", \"email\" : \"email\" }, { \"summary\" : \"summary\", \"number\" : 0, \"data\" : \"{}\", \"site_url\" : \"site_url\", \"name\" : \"name\", \"created_at\" : \"created_at\", \"last_name\" : \"last_name\", \"company\" : \"company\", \"id\" : \"id\", \"body\" : \"body\", \"first_name\" : \"first_name\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites
     * **Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.
     *
     * @param name  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSites",
        description = "**Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.",
        tags = { "site" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Site.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Site>> listSites(
        @Parameter(name = "name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "filter", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "per_page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false) Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id_domain\" : \"id_domain\", \"deploy_hook\" : \"deploy_hook\", \"deploy_url\" : \"deploy_url\", \"created_at\" : \"created_at\", \"ssl\" : true, \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ], \"password\" : \"password\", \"updated_at\" : \"updated_at\", \"account_name\" : \"account_name\", \"id\" : \"id\", \"published_deploy\" : { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }, \"state\" : \"state\", \"custom_domain\" : \"custom_domain\", \"default_hooks_data\" : { \"access_token\" : \"access_token\" }, \"plan\" : \"plan\", \"managed_dns\" : true, \"force_ssl\" : true, \"capabilities\" : { \"key\" : \"{}\" }, \"notification_email\" : \"notification_email\", \"git_provider\" : \"git_provider\", \"session_id\" : \"session_id\", \"admin_url\" : \"admin_url\", \"build_settings\" : { \"repo_url\" : \"repo_url\", \"stop_builds\" : true, \"deploy_key_id\" : \"deploy_key_id\", \"installation_id\" : 6, \"dir\" : \"dir\", \"env\" : { \"key\" : \"env\" }, \"repo_branch\" : \"repo_branch\", \"private_logs\" : true, \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ], \"functions_dir\" : \"functions_dir\", \"repo_path\" : \"repo_path\", \"provider\" : \"provider\", \"public_repo\" : true, \"cmd\" : \"cmd\", \"id\" : 0 }, \"prerender\" : \"prerender\", \"url\" : \"url\", \"account_slug\" : \"account_slug\", \"ssl_url\" : \"ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"build_image\" : \"build_image\", \"processing_settings\" : { \"css\" : { \"minify\" : true, \"bundle\" : true }, \"images\" : { \"optimize\" : true }, \"js\" : { \"minify\" : true, \"bundle\" : true }, \"html\" : { \"pretty_urls\" : true }, \"skip\" : true }, \"screenshot_url\" : \"screenshot_url\" }, { \"id_domain\" : \"id_domain\", \"deploy_hook\" : \"deploy_hook\", \"deploy_url\" : \"deploy_url\", \"created_at\" : \"created_at\", \"ssl\" : true, \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ], \"password\" : \"password\", \"updated_at\" : \"updated_at\", \"account_name\" : \"account_name\", \"id\" : \"id\", \"published_deploy\" : { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }, \"state\" : \"state\", \"custom_domain\" : \"custom_domain\", \"default_hooks_data\" : { \"access_token\" : \"access_token\" }, \"plan\" : \"plan\", \"managed_dns\" : true, \"force_ssl\" : true, \"capabilities\" : { \"key\" : \"{}\" }, \"notification_email\" : \"notification_email\", \"git_provider\" : \"git_provider\", \"session_id\" : \"session_id\", \"admin_url\" : \"admin_url\", \"build_settings\" : { \"repo_url\" : \"repo_url\", \"stop_builds\" : true, \"deploy_key_id\" : \"deploy_key_id\", \"installation_id\" : 6, \"dir\" : \"dir\", \"env\" : { \"key\" : \"env\" }, \"repo_branch\" : \"repo_branch\", \"private_logs\" : true, \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ], \"functions_dir\" : \"functions_dir\", \"repo_path\" : \"repo_path\", \"provider\" : \"provider\", \"public_repo\" : true, \"cmd\" : \"cmd\", \"id\" : 0 }, \"prerender\" : \"prerender\", \"url\" : \"url\", \"account_slug\" : \"account_slug\", \"ssl_url\" : \"ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"build_image\" : \"build_image\", \"processing_settings\" : { \"css\" : { \"minify\" : true, \"bundle\" : true }, \"images\" : { \"optimize\" : true }, \"js\" : { \"minify\" : true, \"bundle\" : true }, \"html\" : { \"pretty_urls\" : true }, \"skip\" : true }, \"screenshot_url\" : \"screenshot_url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/ssl
     *
     * @param siteId  (required)
     * @param certificate  (optional)
     * @param key  (optional)
     * @param caCertificates  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "provisionSiteTLSCertificate",
        tags = { "sniCertificate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SniCertificate.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/ssl",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SniCertificate> provisionSiteTLSCertificate(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "certificate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "certificate", required = false) String certificate,
        @Parameter(name = "key", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "ca_certificates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ca_certificates", required = false) String caCertificates
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expires_at\" : \"expires_at\", \"updated_at\" : \"updated_at\", \"created_at\" : \"created_at\", \"domains\" : [ \"domains\", \"domains\" ], \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sites/{site_id}/deploys/{deploy_id}/restore
     *
     * @param siteId  (required)
     * @param deployId  (required)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "restoreSiteDeploy",
        tags = { "deploy" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Deploy.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sites/{site_id}/deploys/{deploy_id}/restore",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Deploy> restoreSiteDeploy(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "deploy_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("deploy_id") String deployId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sites/{site_id}/rollback
     *
     * @param siteId  (required)
     * @return No content (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "rollbackSiteDeploy",
        tags = { "deploy" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/rollback",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> rollbackSiteDeploy(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/services/{addon}/instances/{instance_id}
     *
     * @param siteId  (required)
     * @param addon  (required)
     * @param instanceId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "showServiceInstance",
        tags = { "serviceInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceInstance.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/services/{addon}/instances/{instance_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ServiceInstance> showServiceInstance(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "addon", description = "", required = true, in = ParameterIn.PATH) @PathVariable("addon") String addon,
        @Parameter(name = "instance_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("instance_id") String instanceId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"service_slug\" : \"service_slug\", \"updated_at\" : \"updated_at\", \"service_name\" : \"service_name\", \"snippets\" : [ \"{}\", \"{}\" ], \"created_at\" : \"created_at\", \"auth_url\" : \"auth_url\", \"id\" : \"id\", \"service_path\" : \"service_path\", \"env\" : \"{}\", \"config\" : \"{}\", \"url\" : \"url\", \"external_attributes\" : \"{}\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sites/{site_id}/ssl
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "showSiteTLSCertificate",
        tags = { "sniCertificate" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SniCertificate.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sites/{site_id}/ssl",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SniCertificate> showSiteTLSCertificate(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expires_at\" : \"expires_at\", \"updated_at\" : \"updated_at\", \"created_at\" : \"created_at\", \"domains\" : [ \"domains\", \"domains\" ], \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sites/{site_id}/unlink_repo
     * [Beta] Unlinks the repo from the site.  This action will also: - Delete associated deploy keys - Delete outgoing webhooks for the repo - Delete the site&#39;s build hooks
     *
     * @param siteId  (required)
     * @return OK (status code 200)
     *         or Site not found (status code 404)
     */
    @Operation(
        operationId = "unlinkSiteRepo",
        description = "[Beta] Unlinks the repo from the site.  This action will also: - Delete associated deploy keys - Delete outgoing webhooks for the repo - Delete the site's build hooks",
        tags = { "site" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Site.class))
            }),
            @ApiResponse(responseCode = "404", description = "Site not found")
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/unlink_repo",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Site> unlinkSiteRepo(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_domain\" : \"id_domain\", \"deploy_hook\" : \"deploy_hook\", \"deploy_url\" : \"deploy_url\", \"created_at\" : \"created_at\", \"ssl\" : true, \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ], \"password\" : \"password\", \"updated_at\" : \"updated_at\", \"account_name\" : \"account_name\", \"id\" : \"id\", \"published_deploy\" : { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }, \"state\" : \"state\", \"custom_domain\" : \"custom_domain\", \"default_hooks_data\" : { \"access_token\" : \"access_token\" }, \"plan\" : \"plan\", \"managed_dns\" : true, \"force_ssl\" : true, \"capabilities\" : { \"key\" : \"{}\" }, \"notification_email\" : \"notification_email\", \"git_provider\" : \"git_provider\", \"session_id\" : \"session_id\", \"admin_url\" : \"admin_url\", \"build_settings\" : { \"repo_url\" : \"repo_url\", \"stop_builds\" : true, \"deploy_key_id\" : \"deploy_key_id\", \"installation_id\" : 6, \"dir\" : \"dir\", \"env\" : { \"key\" : \"env\" }, \"repo_branch\" : \"repo_branch\", \"private_logs\" : true, \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ], \"functions_dir\" : \"functions_dir\", \"repo_path\" : \"repo_path\", \"provider\" : \"provider\", \"public_repo\" : true, \"cmd\" : \"cmd\", \"id\" : 0 }, \"prerender\" : \"prerender\", \"url\" : \"url\", \"account_slug\" : \"account_slug\", \"ssl_url\" : \"ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"build_image\" : \"build_image\", \"processing_settings\" : { \"css\" : { \"minify\" : true, \"bundle\" : true }, \"images\" : { \"optimize\" : true }, \"js\" : { \"minify\" : true, \"bundle\" : true }, \"html\" : { \"pretty_urls\" : true }, \"skip\" : true }, \"screenshot_url\" : \"screenshot_url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sites/{site_id}/plugins/{package}
     * This is an internal-only endpoint.
     *
     * @param siteId  (required)
     * @param _package  (required)
     * @param pluginParams  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updatePlugin",
        description = "This is an internal-only endpoint.",
        tags = { "x-internal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Plugin.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/plugins/{package}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Plugin> updatePlugin(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "package", description = "", required = true, in = ParameterIn.PATH) @PathVariable("package") String _package,
        @Parameter(name = "plugin_params", description = "") @Valid @RequestBody(required = false) PluginParams pluginParams
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"package\" : \"package\", \"pinned_version\" : \"pinned_version\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sites/{site_id}/services/{addon}/instances/{instance_id}
     *
     * @param siteId  (required)
     * @param addon  (required)
     * @param instanceId  (required)
     * @param config  (required)
     * @return No Content (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateServiceInstance",
        tags = { "serviceInstance" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/services/{addon}/instances/{instance_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateServiceInstance(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "addon", description = "", required = true, in = ParameterIn.PATH) @PathVariable("addon") String addon,
        @Parameter(name = "instance_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("instance_id") String instanceId,
        @Parameter(name = "config", description = "", required = true) @Valid @RequestBody Object config
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /sites/{site_id}
     * **Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [updateEnvVar](#tag/environmentVariables/operation/updateEnvVar) to update a site&#39;s environment variables.
     *
     * @param siteId  (required)
     * @param site  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateSite",
        description = "**Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [updateEnvVar](#tag/environmentVariables/operation/updateEnvVar) to update a site's environment variables.",
        tags = { "site" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Site.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/sites/{site_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Site> updateSite(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "site", description = "", required = true) @Valid @RequestBody SiteSetup site
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_domain\" : \"id_domain\", \"deploy_hook\" : \"deploy_hook\", \"deploy_url\" : \"deploy_url\", \"created_at\" : \"created_at\", \"ssl\" : true, \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ], \"password\" : \"password\", \"updated_at\" : \"updated_at\", \"account_name\" : \"account_name\", \"id\" : \"id\", \"published_deploy\" : { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }, \"state\" : \"state\", \"custom_domain\" : \"custom_domain\", \"default_hooks_data\" : { \"access_token\" : \"access_token\" }, \"plan\" : \"plan\", \"managed_dns\" : true, \"force_ssl\" : true, \"capabilities\" : { \"key\" : \"{}\" }, \"notification_email\" : \"notification_email\", \"git_provider\" : \"git_provider\", \"session_id\" : \"session_id\", \"admin_url\" : \"admin_url\", \"build_settings\" : { \"repo_url\" : \"repo_url\", \"stop_builds\" : true, \"deploy_key_id\" : \"deploy_key_id\", \"installation_id\" : 6, \"dir\" : \"dir\", \"env\" : { \"key\" : \"env\" }, \"repo_branch\" : \"repo_branch\", \"private_logs\" : true, \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ], \"functions_dir\" : \"functions_dir\", \"repo_path\" : \"repo_path\", \"provider\" : \"provider\", \"public_repo\" : true, \"cmd\" : \"cmd\", \"id\" : 0 }, \"prerender\" : \"prerender\", \"url\" : \"url\", \"account_slug\" : \"account_slug\", \"ssl_url\" : \"ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"build_image\" : \"build_image\", \"processing_settings\" : { \"css\" : { \"minify\" : true, \"bundle\" : true }, \"images\" : { \"optimize\" : true }, \"js\" : { \"minify\" : true, \"bundle\" : true }, \"html\" : { \"pretty_urls\" : true }, \"skip\" : true }, \"screenshot_url\" : \"screenshot_url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sites/{site_id}/assets/{asset_id}
     *
     * @param siteId  (required)
     * @param assetId  (required)
     * @param state  (required)
     * @return Updated (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateSiteAsset",
        tags = { "asset" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Asset.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/assets/{asset_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Asset> updateSiteAsset(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "asset_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("asset_id") String assetId,
        @NotNull @Parameter(name = "state", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = true) String state
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"content_type\" : \"content_type\", \"size\" : 0, \"updated_at\" : \"updated_at\", \"visibility\" : \"visibility\", \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"created_at\" : \"created_at\", \"id\" : \"id\", \"state\" : \"state\", \"key\" : \"key\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sites/{site_id}/build_hooks/{id}
     *
     * @param siteId  (required)
     * @param id  (required)
     * @param buildHook  (required)
     * @return No content (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateSiteBuildHook",
        tags = { "buildHook" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/build_hooks/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateSiteBuildHook(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "buildHook", description = "", required = true) @Valid @RequestBody BuildHookSetup buildHook
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sites/{site_id}/deploys/{deploy_id}
     *
     * @param siteId  (required)
     * @param deployId  (required)
     * @param deploy  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateSiteDeploy",
        tags = { "deploy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Deploy.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/deploys/{deploy_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Deploy> updateSiteDeploy(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "deploy_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("deploy_id") String deployId,
        @Parameter(name = "deploy", description = "", required = true) @Valid @RequestBody DeployFiles deploy
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sites/{site_id}/metadata
     *
     * @param siteId  (required)
     * @param metadata  (required)
     * @return No content (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateSiteMetadata",
        tags = { "metadata" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/metadata",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateSiteMetadata(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "metadata", description = "", required = true) @Valid @RequestBody Object metadata
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sites/{site_id}/snippets/{snippet_id}
     *
     * @param siteId  (required)
     * @param snippetId  (required)
     * @param snippet  (required)
     * @return No content (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateSiteSnippet",
        tags = { "snippet" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/snippets/{snippet_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateSiteSnippet(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "snippet_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("snippet_id") String snippetId,
        @Parameter(name = "snippet", description = "", required = true) @Valid @RequestBody Snippet snippet
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sites/{site_id}/traffic_splits/{split_test_id}
     *
     * @param siteId  (required)
     * @param splitTestId  (required)
     * @param branchTests  (required)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateSplitTest",
        tags = { "splitTest" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SplitTest.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sites/{site_id}/traffic_splits/{split_test_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SplitTest> updateSplitTest(
        @Parameter(name = "site_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("site_id") String siteId,
        @Parameter(name = "split_test_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("split_test_id") String splitTestId,
        @Parameter(name = "branch_tests", description = "", required = true) @Valid @RequestBody SplitTestSetup branchTests
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"path\", \"updated_at\" : \"updated_at\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"active\" : true, \"created_at\" : \"created_at\", \"id\" : \"id\", \"branches\" : [ \"{}\", \"{}\" ], \"unpublished_at\" : \"unpublished_at\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
