/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AccountAddMemberSetup;
import org.openapitools.model.AccountUpdateMemberSetup;
import org.openapitools.model.Error;
import org.openapitools.model.Member;
import org.openapitools.model.Site;
import org.openapitools.model.SiteSetup;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:42.313754-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "member", description = "the member API")
public interface AccountSlugApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /{account_slug}/members
     *
     * @param accountSlug  (required)
     * @param accountAddMemberSetup  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "addMemberToAccount",
        tags = { "member" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Member.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{account_slug}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<Member>> addMemberToAccount(
        @Parameter(name = "account_slug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_slug") String accountSlug,
        @Parameter(name = "accountAddMemberSetup", description = "", required = true) @Valid @RequestBody AccountAddMemberSetup accountAddMemberSetup
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"full_name\" : \"full_name\", \"role\" : \"role\", \"avatar\" : \"avatar\", \"id\" : \"id\", \"email\" : \"email\" }, { \"full_name\" : \"full_name\", \"role\" : \"role\", \"avatar\" : \"avatar\", \"id\" : \"id\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /{account_slug}/sites
     * **Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.
     *
     * @param accountSlug  (required)
     * @param configureDns  (optional)
     * @param site  (optional)
     * @return Created (status code 201)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "createSiteInTeam",
        description = "**Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.",
        tags = { "site" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Site.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{account_slug}/sites",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Site> createSiteInTeam(
        @Parameter(name = "account_slug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_slug") String accountSlug,
        @Parameter(name = "configure_dns", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "configure_dns", required = false) Boolean configureDns,
        @Parameter(name = "site", description = "") @Valid @RequestBody(required = false) SiteSetup site
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_domain\" : \"id_domain\", \"deploy_hook\" : \"deploy_hook\", \"deploy_url\" : \"deploy_url\", \"created_at\" : \"created_at\", \"ssl\" : true, \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ], \"password\" : \"password\", \"updated_at\" : \"updated_at\", \"account_name\" : \"account_name\", \"id\" : \"id\", \"published_deploy\" : { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }, \"state\" : \"state\", \"custom_domain\" : \"custom_domain\", \"default_hooks_data\" : { \"access_token\" : \"access_token\" }, \"plan\" : \"plan\", \"managed_dns\" : true, \"force_ssl\" : true, \"capabilities\" : { \"key\" : \"{}\" }, \"notification_email\" : \"notification_email\", \"git_provider\" : \"git_provider\", \"session_id\" : \"session_id\", \"admin_url\" : \"admin_url\", \"build_settings\" : { \"repo_url\" : \"repo_url\", \"stop_builds\" : true, \"deploy_key_id\" : \"deploy_key_id\", \"installation_id\" : 6, \"dir\" : \"dir\", \"env\" : { \"key\" : \"env\" }, \"repo_branch\" : \"repo_branch\", \"private_logs\" : true, \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ], \"functions_dir\" : \"functions_dir\", \"repo_path\" : \"repo_path\", \"provider\" : \"provider\", \"public_repo\" : true, \"cmd\" : \"cmd\", \"id\" : 0 }, \"prerender\" : \"prerender\", \"url\" : \"url\", \"account_slug\" : \"account_slug\", \"ssl_url\" : \"ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"build_image\" : \"build_image\", \"processing_settings\" : { \"css\" : { \"minify\" : true, \"bundle\" : true }, \"images\" : { \"optimize\" : true }, \"js\" : { \"minify\" : true, \"bundle\" : true }, \"html\" : { \"pretty_urls\" : true }, \"skip\" : true }, \"screenshot_url\" : \"screenshot_url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /{account_slug}/members/{member_id}
     *
     * @param accountSlug  (required)
     * @param memberId  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "getAccountMember",
        tags = { "member" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Member.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{account_slug}/members/{member_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Member> getAccountMember(
        @Parameter(name = "account_slug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_slug") String accountSlug,
        @Parameter(name = "member_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("member_id") String memberId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"full_name\" : \"full_name\", \"role\" : \"role\", \"avatar\" : \"avatar\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /{account_slug}/members
     *
     * @param accountSlug  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listMembersForAccount",
        tags = { "member" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Member.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{account_slug}/members",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Member>> listMembersForAccount(
        @Parameter(name = "account_slug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_slug") String accountSlug
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"full_name\" : \"full_name\", \"role\" : \"role\", \"avatar\" : \"avatar\", \"id\" : \"id\", \"email\" : \"email\" }, { \"full_name\" : \"full_name\", \"role\" : \"role\", \"avatar\" : \"avatar\", \"id\" : \"id\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /{account_slug}/sites
     * **Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.
     *
     * @param accountSlug  (required)
     * @param name  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "listSitesForAccount",
        description = "**Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.",
        tags = { "site" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Site.class)))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/{account_slug}/sites",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Site>> listSitesForAccount(
        @Parameter(name = "account_slug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_slug") String accountSlug,
        @Parameter(name = "name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "per_page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false) Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id_domain\" : \"id_domain\", \"deploy_hook\" : \"deploy_hook\", \"deploy_url\" : \"deploy_url\", \"created_at\" : \"created_at\", \"ssl\" : true, \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ], \"password\" : \"password\", \"updated_at\" : \"updated_at\", \"account_name\" : \"account_name\", \"id\" : \"id\", \"published_deploy\" : { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }, \"state\" : \"state\", \"custom_domain\" : \"custom_domain\", \"default_hooks_data\" : { \"access_token\" : \"access_token\" }, \"plan\" : \"plan\", \"managed_dns\" : true, \"force_ssl\" : true, \"capabilities\" : { \"key\" : \"{}\" }, \"notification_email\" : \"notification_email\", \"git_provider\" : \"git_provider\", \"session_id\" : \"session_id\", \"admin_url\" : \"admin_url\", \"build_settings\" : { \"repo_url\" : \"repo_url\", \"stop_builds\" : true, \"deploy_key_id\" : \"deploy_key_id\", \"installation_id\" : 6, \"dir\" : \"dir\", \"env\" : { \"key\" : \"env\" }, \"repo_branch\" : \"repo_branch\", \"private_logs\" : true, \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ], \"functions_dir\" : \"functions_dir\", \"repo_path\" : \"repo_path\", \"provider\" : \"provider\", \"public_repo\" : true, \"cmd\" : \"cmd\", \"id\" : 0 }, \"prerender\" : \"prerender\", \"url\" : \"url\", \"account_slug\" : \"account_slug\", \"ssl_url\" : \"ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"build_image\" : \"build_image\", \"processing_settings\" : { \"css\" : { \"minify\" : true, \"bundle\" : true }, \"images\" : { \"optimize\" : true }, \"js\" : { \"minify\" : true, \"bundle\" : true }, \"html\" : { \"pretty_urls\" : true }, \"skip\" : true }, \"screenshot_url\" : \"screenshot_url\" }, { \"id_domain\" : \"id_domain\", \"deploy_hook\" : \"deploy_hook\", \"deploy_url\" : \"deploy_url\", \"created_at\" : \"created_at\", \"ssl\" : true, \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ], \"password\" : \"password\", \"updated_at\" : \"updated_at\", \"account_name\" : \"account_name\", \"id\" : \"id\", \"published_deploy\" : { \"review_id\" : 0.8008281904610115, \"deploy_url\" : \"deploy_url\", \"review_url\" : \"review_url\", \"created_at\" : \"created_at\", \"title\" : \"title\", \"branch\" : \"branch\", \"required\" : [ \"required\", \"required\" ], \"skipped\" : true, \"commit_url\" : \"commit_url\", \"updated_at\" : \"updated_at\", \"draft\" : true, \"context\" : \"context\", \"id\" : \"id\", \"state\" : \"state\", \"locked\" : true, \"published_at\" : \"published_at\", \"error_message\" : \"error_message\", \"function_schedules\" : [ { \"cron\" : \"cron\", \"name\" : \"name\" }, { \"cron\" : \"cron\", \"name\" : \"name\" } ], \"admin_url\" : \"admin_url\", \"site_capabilities\" : { \"large_media_enabled\" : true }, \"url\" : \"url\", \"framework\" : \"framework\", \"ssl_url\" : \"ssl_url\", \"build_id\" : \"build_id\", \"deploy_ssl_url\" : \"deploy_ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"site_id\" : \"site_id\", \"required_functions\" : [ \"required_functions\", \"required_functions\" ], \"screenshot_url\" : \"screenshot_url\", \"commit_ref\" : \"commit_ref\" }, \"state\" : \"state\", \"custom_domain\" : \"custom_domain\", \"default_hooks_data\" : { \"access_token\" : \"access_token\" }, \"plan\" : \"plan\", \"managed_dns\" : true, \"force_ssl\" : true, \"capabilities\" : { \"key\" : \"{}\" }, \"notification_email\" : \"notification_email\", \"git_provider\" : \"git_provider\", \"session_id\" : \"session_id\", \"admin_url\" : \"admin_url\", \"build_settings\" : { \"repo_url\" : \"repo_url\", \"stop_builds\" : true, \"deploy_key_id\" : \"deploy_key_id\", \"installation_id\" : 6, \"dir\" : \"dir\", \"env\" : { \"key\" : \"env\" }, \"repo_branch\" : \"repo_branch\", \"private_logs\" : true, \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ], \"functions_dir\" : \"functions_dir\", \"repo_path\" : \"repo_path\", \"provider\" : \"provider\", \"public_repo\" : true, \"cmd\" : \"cmd\", \"id\" : 0 }, \"prerender\" : \"prerender\", \"url\" : \"url\", \"account_slug\" : \"account_slug\", \"ssl_url\" : \"ssl_url\", \"user_id\" : \"user_id\", \"name\" : \"name\", \"build_image\" : \"build_image\", \"processing_settings\" : { \"css\" : { \"minify\" : true, \"bundle\" : true }, \"images\" : { \"optimize\" : true }, \"js\" : { \"minify\" : true, \"bundle\" : true }, \"html\" : { \"pretty_urls\" : true }, \"skip\" : true }, \"screenshot_url\" : \"screenshot_url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /{account_slug}/members/{member_id}
     *
     * @param accountSlug  (required)
     * @param memberId  (required)
     * @return Not Content (status code 204)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "removeAccountMember",
        tags = { "member" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Not Content"),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/{account_slug}/members/{member_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> removeAccountMember(
        @Parameter(name = "account_slug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_slug") String accountSlug,
        @Parameter(name = "member_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("member_id") String memberId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /{account_slug}/members/{member_id}
     *
     * @param accountSlug  (required)
     * @param memberId  (required)
     * @param accountUpdateMemberSetup  (required)
     * @return OK (status code 200)
     *         or error (status code 200)
     */
    @Operation(
        operationId = "updateAccountMember",
        tags = { "member" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Member.class))
            }),
            @ApiResponse(responseCode = "default", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "netlifyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/{account_slug}/members/{member_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Member> updateAccountMember(
        @Parameter(name = "account_slug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("account_slug") String accountSlug,
        @Parameter(name = "member_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("member_id") String memberId,
        @Parameter(name = "accountUpdateMemberSetup", description = "", required = true) @Valid @RequestBody AccountUpdateMemberSetup accountUpdateMemberSetup
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"full_name\" : \"full_name\", \"role\" : \"role\", \"avatar\" : \"avatar\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
