/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AmendmentDetail;
import org.openapitools.model.AmendmentSearchItemSearchResult;
import org.openapitools.model.Bill;
import org.openapitools.model.BillPublicationList;
import org.openapitools.model.BillSortOrder;
import org.openapitools.model.BillStageDetails;
import org.openapitools.model.BillStagePublicationList;
import org.openapitools.model.BillStageSittingSearchResult;
import org.openapitools.model.BillSummarySearchResult;
import org.openapitools.model.BillTypeCategory;
import org.openapitools.model.BillTypeSearchResult;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.Decision;
import org.openapitools.model.House;
import org.openapitools.model.NewsArticlesSummarySearchResult;
import java.time.OffsetDateTime;
import org.openapitools.model.OriginatingHouse;
import org.openapitools.model.ProblemDetails;
import org.openapitools.model.PublicationDocument;
import org.openapitools.model.PublicationTypeSearchResult;
import org.openapitools.model.StageReferenceSearchResult;
import org.openapitools.model.StageSummarySearchResult;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:54:38.614249-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "BillTypes", description = "the BillTypes API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/BillTypes : Returns a list of Bill types.
     *
     * @param category  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "apiV1BillTypesGet",
        summary = "Returns a list of Bill types.",
        tags = { "BillTypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BillTypeSearchResult.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = BillTypeSearchResult.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = BillTypeSearchResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/BillTypes",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<BillTypeSearchResult> apiV1BillTypesGet(
        @Parameter(name = "Category", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Category", required = false) BillTypeCategory category,
        @Parameter(name = "Skip", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Skip", required = false) Integer skip,
        @Parameter(name = "Take", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Take", required = false) Integer take
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalResults\" : 1, \"itemsPerPage\" : 6, \"items\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }, { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Bills/{billId}/Stages : Returns all Bill stages.
     *
     * @param billId Stages relating to a Bill with Bill ID specified (required)
     * @param skip  (optional)
     * @param take  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1BillsBillIdStagesGet",
        summary = "Returns all Bill stages.",
        tags = { "Bills" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StageSummarySearchResult.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = StageSummarySearchResult.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = StageSummarySearchResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Bills/{billId}/Stages",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<StageSummarySearchResult> apiV1BillsBillIdStagesGet(
        @Parameter(name = "billId", description = "Stages relating to a Bill with Bill ID specified", required = true, in = ParameterIn.PATH) @PathVariable("billId") Integer billId,
        @Parameter(name = "Skip", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Skip", required = false) Integer skip,
        @Parameter(name = "Take", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Take", required = false) Integer take
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalResults\" : 6, \"itemsPerPage\" : 0, \"items\" : [ { \"stageSittings\" : [ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 } ], \"sortOrder\" : 5, \"description\" : \"description\", \"id\" : 1, \"sessionId\" : 5, \"abbreviation\" : \"abbreviation\", \"stageId\" : 2 }, { \"stageSittings\" : [ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 } ], \"sortOrder\" : 5, \"description\" : \"description\", \"id\" : 1, \"sessionId\" : 5, \"abbreviation\" : \"abbreviation\", \"stageId\" : 2 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Bills/{billId}/Stages/{stageId}/Publications : Return a list of Bill stage publications.
     *
     * @param billId  (required)
     * @param stageId  (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1BillsBillIdStagesStageIdPublicationsGet",
        summary = "Return a list of Bill stage publications.",
        tags = { "Publications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BillStagePublicationList.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = BillStagePublicationList.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = BillStagePublicationList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Bills/{billId}/Stages/{stageId}/Publications",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<BillStagePublicationList> apiV1BillsBillIdStagesStageIdPublicationsGet(
        @Parameter(name = "billId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("billId") Integer billId,
        @Parameter(name = "stageId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("stageId") Integer stageId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"billStageId\" : 0, \"sittings\" : [ { \"sittingId\" : 1, \"publications\" : [ { \"displayDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicationType\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 2 }, \"files\" : [ { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" }, { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" } ], \"links\" : [ { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" }, { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" } ], \"id\" : 6, \"title\" : \"title\" }, { \"displayDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicationType\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 2 }, \"files\" : [ { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" }, { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" } ], \"links\" : [ { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" }, { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" } ], \"id\" : 6, \"title\" : \"title\" } ] }, { \"sittingId\" : 1, \"publications\" : [ { \"displayDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicationType\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 2 }, \"files\" : [ { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" }, { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" } ], \"links\" : [ { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" }, { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" } ], \"id\" : 6, \"title\" : \"title\" }, { \"displayDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicationType\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 2 }, \"files\" : [ { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" }, { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" } ], \"links\" : [ { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" }, { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" } ], \"id\" : 6, \"title\" : \"title\" } ] } ], \"publications\" : [ { \"displayDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicationType\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 2 }, \"files\" : [ { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" }, { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" } ], \"links\" : [ { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" }, { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" } ], \"id\" : 6, \"title\" : \"title\" }, { \"displayDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicationType\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 2 }, \"files\" : [ { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" }, { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" } ], \"links\" : [ { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" }, { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" } ], \"id\" : 6, \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/PublicationTypes : Returns a list of publication types.
     *
     * @param skip  (optional)
     * @param take  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "apiV1PublicationTypesGet",
        summary = "Returns a list of publication types.",
        tags = { "PublicationTypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PublicationTypeSearchResult.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = PublicationTypeSearchResult.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = PublicationTypeSearchResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/PublicationTypes",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<PublicationTypeSearchResult> apiV1PublicationTypesGet(
        @Parameter(name = "Skip", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Skip", required = false) Integer skip,
        @Parameter(name = "Take", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Take", required = false) Integer take
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalResults\" : 6, \"itemsPerPage\" : 0, \"items\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 2 }, { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 2 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Publications/{publicationId}/Documents/{documentId}/Download : Return a document.
     *
     * @param publicationId Document with publication Id specified (required)
     * @param documentId Document with Id specified (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet",
        summary = "Return a document.",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Publications/{publicationId}/Documents/{documentId}/Download",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<Void> apiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet(
        @Parameter(name = "publicationId", description = "Document with publication Id specified", required = true, in = ParameterIn.PATH) @PathVariable("publicationId") Integer publicationId,
        @Parameter(name = "documentId", description = "Document with Id specified", required = true, in = ParameterIn.PATH) @PathVariable("documentId") Integer documentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Publications/{publicationId}/Documents/{documentId} : Return information on a document.
     *
     * @param publicationId Document with publication Id specified (required)
     * @param documentId Document with Id specified (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1PublicationsPublicationIdDocumentsDocumentIdGet",
        summary = "Return information on a document.",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PublicationDocument.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = PublicationDocument.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = PublicationDocument.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Publications/{publicationId}/Documents/{documentId}",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<PublicationDocument> apiV1PublicationsPublicationIdDocumentsDocumentIdGet(
        @Parameter(name = "publicationId", description = "Document with publication Id specified", required = true, in = ParameterIn.PATH) @PathVariable("publicationId") Integer publicationId,
        @Parameter(name = "documentId", description = "Document with Id specified", required = true, in = ParameterIn.PATH) @PathVariable("documentId") Integer documentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Rss/allbills.rss : Returns an Rss feed of all Bills.
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1RssAllbillsRssGet",
        summary = "Returns an Rss feed of all Bills.",
        tags = { "Rss" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Rss/allbills.rss"
    )
    
    default ResponseEntity<Void> apiV1RssAllbillsRssGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Rss/Bills/{id}.rss : Returns an Rss feed of a certain Bill.
     *
     * @param id Id of Bill (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "apiV1RssBillsIdRssGet",
        summary = "Returns an Rss feed of a certain Bill.",
        tags = { "Rss" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Rss/Bills/{id}.rss",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<Void> apiV1RssBillsIdRssGet(
        @Parameter(name = "id", description = "Id of Bill", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Rss/privatebills.rss : Returns an Rss feed of private Bills.
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1RssPrivatebillsRssGet",
        summary = "Returns an Rss feed of private Bills.",
        tags = { "Rss" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Rss/privatebills.rss"
    )
    
    default ResponseEntity<Void> apiV1RssPrivatebillsRssGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Rss/publicbills.rss : Returns an Rss feed of public Bills.
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiV1RssPublicbillsRssGet",
        summary = "Returns an Rss feed of public Bills.",
        tags = { "Rss" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Rss/publicbills.rss"
    )
    
    default ResponseEntity<Void> apiV1RssPublicbillsRssGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Stages : Returns a list of Bill stages.
     *
     * @param skip  (optional)
     * @param take  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "apiV1StagesGet",
        summary = "Returns a list of Bill stages.",
        tags = { "Stages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StageReferenceSearchResult.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = StageReferenceSearchResult.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = StageReferenceSearchResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Stages",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<StageReferenceSearchResult> apiV1StagesGet(
        @Parameter(name = "Skip", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Skip", required = false) Integer skip,
        @Parameter(name = "Take", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Take", required = false) Integer take
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalResults\" : 1, \"itemsPerPage\" : 6, \"items\" : [ { \"name\" : \"name\", \"id\" : 0 }, { \"name\" : \"name\", \"id\" : 0 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Bills/{billId}/Stages/{billStageId}/Amendments/{amendmentId} : Returns an amendment.
     *
     * @param billId Amendment relating to a bill with bill ID specified (required)
     * @param billStageId Amendment relating to a bill stage with bill stage ID specified (required)
     * @param amendmentId Amendment with amendment ID specified (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getAmendment",
        summary = "Returns an amendment.",
        tags = { "Amendments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AmendmentDetail.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = AmendmentDetail.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = AmendmentDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Bills/{billId}/Stages/{billStageId}/Amendments/{amendmentId}",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<AmendmentDetail> getAmendment(
        @Parameter(name = "billId", description = "Amendment relating to a bill with bill ID specified", required = true, in = ParameterIn.PATH) @PathVariable("billId") Integer billId,
        @Parameter(name = "billStageId", description = "Amendment relating to a bill stage with bill stage ID specified", required = true, in = ParameterIn.PATH) @PathVariable("billStageId") Integer billStageId,
        @Parameter(name = "amendmentId", description = "Amendment with amendment ID specified", required = true, in = ParameterIn.PATH) @PathVariable("amendmentId") Integer amendmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amendmentNote\" : \"amendmentNote\", \"clause\" : 5, \"pageNumber\" : 7, \"amendmentId\" : 0, \"explanatoryTextPrefix\" : \"explanatoryTextPrefix\", \"marshalledListText\" : \"marshalledListText\", \"amendmentLines\" : [ { \"hangingIndentation\" : \"hangingIndentation\", \"isImage\" : true, \"indentation\" : 6, \"text\" : \"text\", \"imageType\" : \"imageType\" }, { \"hangingIndentation\" : \"hangingIndentation\", \"isImage\" : true, \"indentation\" : 6, \"text\" : \"text\", \"imageType\" : \"imageType\" } ], \"explanatoryText\" : \"explanatoryText\", \"schedule\" : 9, \"amendmentPosition\" : \"amendmentPosition\", \"sponsors\" : [ { \"isLead\" : true, \"memberPage\" : \"memberPage\", \"sortOrder\" : 3, \"name\" : \"name\", \"partyColour\" : \"partyColour\", \"memberFrom\" : \"memberFrom\", \"memberPhoto\" : \"memberPhoto\", \"party\" : \"party\", \"memberId\" : 9 }, { \"isLead\" : true, \"memberPage\" : \"memberPage\", \"sortOrder\" : 3, \"name\" : \"name\", \"partyColour\" : \"partyColour\", \"memberFrom\" : \"memberFrom\", \"memberPhoto\" : \"memberPhoto\", \"party\" : \"party\", \"memberId\" : 9 } ], \"billId\" : 1, \"billStageId\" : 5, \"lineNumber\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Bills/{billId}/Stages/{billStageId}/Amendments : Returns a list of amendments.
     *
     * @param billId Amendments relating to a Bill with Bill ID specified (required)
     * @param billStageId Amendments relating to a Bill stage with Bill stage ID specified (required)
     * @param searchTerm  (optional)
     * @param decision  (optional)
     * @param memberId  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getAmendments",
        summary = "Returns a list of amendments.",
        tags = { "Amendments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AmendmentSearchItemSearchResult.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = AmendmentSearchItemSearchResult.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = AmendmentSearchItemSearchResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Bills/{billId}/Stages/{billStageId}/Amendments",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<AmendmentSearchItemSearchResult> getAmendments(
        @Parameter(name = "billId", description = "Amendments relating to a Bill with Bill ID specified", required = true, in = ParameterIn.PATH) @PathVariable("billId") Integer billId,
        @Parameter(name = "billStageId", description = "Amendments relating to a Bill stage with Bill stage ID specified", required = true, in = ParameterIn.PATH) @PathVariable("billStageId") Integer billStageId,
        @Parameter(name = "SearchTerm", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "SearchTerm", required = false) String searchTerm,
        @Parameter(name = "Decision", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Decision", required = false) Decision decision,
        @Parameter(name = "MemberId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "MemberId", required = false) Integer memberId,
        @Parameter(name = "Skip", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Skip", required = false) Integer skip,
        @Parameter(name = "Take", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Take", required = false) Integer take
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalResults\" : 4, \"itemsPerPage\" : 2, \"items\" : [ { \"clause\" : 5, \"pageNumber\" : 2, \"amendmentId\" : 0, \"marshalledListText\" : \"marshalledListText\", \"schedule\" : 7, \"summaryText\" : [ \"summaryText\", \"summaryText\" ], \"amendmentPosition\" : \"amendmentPosition\", \"sponsors\" : [ { \"isLead\" : true, \"memberPage\" : \"memberPage\", \"sortOrder\" : 3, \"name\" : \"name\", \"partyColour\" : \"partyColour\", \"memberFrom\" : \"memberFrom\", \"memberPhoto\" : \"memberPhoto\", \"party\" : \"party\", \"memberId\" : 9 }, { \"isLead\" : true, \"memberPage\" : \"memberPage\", \"sortOrder\" : 3, \"name\" : \"name\", \"partyColour\" : \"partyColour\", \"memberFrom\" : \"memberFrom\", \"memberPhoto\" : \"memberPhoto\", \"party\" : \"party\", \"memberId\" : 9 } ], \"billId\" : 6, \"billStageId\" : 1, \"lineNumber\" : 5 }, { \"clause\" : 5, \"pageNumber\" : 2, \"amendmentId\" : 0, \"marshalledListText\" : \"marshalledListText\", \"schedule\" : 7, \"summaryText\" : [ \"summaryText\", \"summaryText\" ], \"amendmentPosition\" : \"amendmentPosition\", \"sponsors\" : [ { \"isLead\" : true, \"memberPage\" : \"memberPage\", \"sortOrder\" : 3, \"name\" : \"name\", \"partyColour\" : \"partyColour\", \"memberFrom\" : \"memberFrom\", \"memberPhoto\" : \"memberPhoto\", \"party\" : \"party\", \"memberId\" : 9 }, { \"isLead\" : true, \"memberPage\" : \"memberPage\", \"sortOrder\" : 3, \"name\" : \"name\", \"partyColour\" : \"partyColour\", \"memberFrom\" : \"memberFrom\", \"memberPhoto\" : \"memberPhoto\", \"party\" : \"party\", \"memberId\" : 9 } ], \"billId\" : 6, \"billStageId\" : 1, \"lineNumber\" : 5 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Bills/{billId} : Return a Bill.
     *
     * @param billId Bill with ID specified (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getBill",
        summary = "Return a Bill.",
        tags = { "Bills" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bill.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = Bill.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Bill.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Bills/{billId}",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<Bill> getBill(
        @Parameter(name = "billId", description = "Bill with ID specified", required = true, in = ParameterIn.PATH) @PathVariable("billId") Integer billId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"petitionInformation\" : \"petitionInformation\", \"summary\" : \"summary\", \"currentStage\" : { \"stageSittings\" : [ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 } ], \"sortOrder\" : 5, \"description\" : \"description\", \"id\" : 1, \"sessionId\" : 5, \"abbreviation\" : \"abbreviation\", \"stageId\" : 2 }, \"agent\" : { \"website\" : \"website\", \"address\" : \"address\", \"name\" : \"name\", \"email\" : \"email\", \"phoneNo\" : \"phoneNo\" }, \"billWithdrawn\" : \"2000-01-23T04:56:07.000+00:00\", \"shortTitle\" : \"shortTitle\", \"isDefeated\" : true, \"isAct\" : true, \"sponsors\" : [ { \"sortOrder\" : 2, \"member\" : { \"memberPage\" : \"memberPage\", \"name\" : \"name\", \"partyColour\" : \"partyColour\", \"memberFrom\" : \"memberFrom\", \"memberPhoto\" : \"memberPhoto\", \"party\" : \"party\", \"memberId\" : 5 }, \"organisation\" : { \"name\" : \"name\", \"url\" : \"url\" } }, { \"sortOrder\" : 2, \"member\" : { \"memberPage\" : \"memberPage\", \"name\" : \"name\", \"partyColour\" : \"partyColour\", \"memberFrom\" : \"memberFrom\", \"memberPhoto\" : \"memberPhoto\", \"party\" : \"party\", \"memberId\" : 5 }, \"organisation\" : { \"name\" : \"name\", \"url\" : \"url\" } } ], \"billId\" : 0, \"lastUpdate\" : \"2000-01-23T04:56:07.000+00:00\", \"petitioningPeriod\" : \"petitioningPeriod\", \"introducedSessionId\" : 5, \"includedSessionIds\" : [ 1, 1 ], \"promoters\" : [ { \"organisationName\" : \"organisationName\", \"organisationUrl\" : \"organisationUrl\" }, { \"organisationName\" : \"organisationName\", \"organisationUrl\" : \"organisationUrl\" } ], \"billTypeId\" : 6, \"longTitle\" : \"longTitle\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Bills/{billId}/Publications : Return a list of Bill publications.
     *
     * @param billId Publications relating to Bill with Bill ID specified (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getBillPublication",
        summary = "Return a list of Bill publications.",
        tags = { "Publications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BillPublicationList.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = BillPublicationList.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = BillPublicationList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Bills/{billId}/Publications",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<BillPublicationList> getBillPublication(
        @Parameter(name = "billId", description = "Publications relating to Bill with Bill ID specified", required = true, in = ParameterIn.PATH) @PathVariable("billId") Integer billId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"billId\" : 0, \"publications\" : [ { \"displayDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicationType\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 2 }, \"files\" : [ { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" }, { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" } ], \"links\" : [ { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" }, { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" } ], \"id\" : 5, \"title\" : \"title\" }, { \"displayDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicationType\" : { \"name\" : \"name\", \"description\" : \"description\", \"id\" : 2 }, \"files\" : [ { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" }, { \"filename\" : \"filename\", \"contentLength\" : 6, \"id\" : 1, \"contentType\" : \"contentType\" } ], \"links\" : [ { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" }, { \"id\" : 5, \"title\" : \"title\", \"contentType\" : \"contentType\", \"url\" : \"url\" } ], \"id\" : 5, \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Bills/{billId}/Stages/{billStageId} : Returns a Bill stage.
     *
     * @param billId Bill stage relating to Bill with Bill ID specified (required)
     * @param billStageId Bill stage with ID specified (required)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getBillStageDetails",
        summary = "Returns a Bill stage.",
        tags = { "Bills" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BillStageDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = BillStageDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = BillStageDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Bills/{billId}/Stages/{billStageId}",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<BillStageDetails> getBillStageDetails(
        @Parameter(name = "billId", description = "Bill stage relating to Bill with Bill ID specified", required = true, in = ParameterIn.PATH) @PathVariable("billId") Integer billId,
        @Parameter(name = "billStageId", description = "Bill stage with ID specified", required = true, in = ParameterIn.PATH) @PathVariable("billStageId") Integer billStageId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"stageSittings\" : [ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 } ], \"committee\" : { \"name\" : \"name\", \"id\" : 0, \"category\" : \"category\", \"url\" : \"url\" }, \"lastUpdate\" : \"2000-01-23T04:56:07.000+00:00\", \"sortOrder\" : 2, \"description\" : \"description\", \"nextStageBillStageId\" : 1, \"id\" : 6, \"sessionId\" : 5, \"abbreviation\" : \"abbreviation\", \"previousStageBillStageId\" : 5, \"stageId\" : 7 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Bills : Returns a list of Bills.
     *
     * @param searchTerm  (optional)
     * @param session  (optional)
     * @param currentHouse  (optional)
     * @param originatingHouse  (optional)
     * @param memberId  (optional)
     * @param departmentId  (optional)
     * @param billStage  (optional)
     * @param billStagesExcluded  (optional)
     * @param isDefeated  (optional)
     * @param isWithdrawn  (optional)
     * @param billType  (optional)
     * @param sortOrder  (optional)
     * @param billIds  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "getBills",
        summary = "Returns a list of Bills.",
        tags = { "Bills" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BillSummarySearchResult.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = BillSummarySearchResult.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = BillSummarySearchResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Bills",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<BillSummarySearchResult> getBills(
        @Parameter(name = "SearchTerm", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "SearchTerm", required = false) String searchTerm,
        @Parameter(name = "Session", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Session", required = false) Integer session,
        @Parameter(name = "CurrentHouse", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "CurrentHouse", required = false) House currentHouse,
        @Parameter(name = "OriginatingHouse", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "OriginatingHouse", required = false) OriginatingHouse originatingHouse,
        @Parameter(name = "MemberId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "MemberId", required = false) Integer memberId,
        @Parameter(name = "DepartmentId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "DepartmentId", required = false) Integer departmentId,
        @Parameter(name = "BillStage", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "BillStage", required = false) List<Integer> billStage,
        @Parameter(name = "BillStagesExcluded", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "BillStagesExcluded", required = false) List<Integer> billStagesExcluded,
        @Parameter(name = "IsDefeated", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "IsDefeated", required = false) Boolean isDefeated,
        @Parameter(name = "IsWithdrawn", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "IsWithdrawn", required = false) Boolean isWithdrawn,
        @Parameter(name = "BillType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "BillType", required = false) List<Integer> billType,
        @Parameter(name = "SortOrder", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "SortOrder", required = false) BillSortOrder sortOrder,
        @Parameter(name = "BillIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "BillIds", required = false) List<Integer> billIds,
        @Parameter(name = "Skip", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Skip", required = false) Integer skip,
        @Parameter(name = "Take", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Take", required = false) Integer take
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalResults\" : 1, \"itemsPerPage\" : 1, \"items\" : [ { \"currentStage\" : { \"stageSittings\" : [ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 } ], \"sortOrder\" : 5, \"description\" : \"description\", \"id\" : 1, \"sessionId\" : 5, \"abbreviation\" : \"abbreviation\", \"stageId\" : 2 }, \"isDefeated\" : true, \"isAct\" : true, \"billId\" : 0, \"billWithdrawn\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUpdate\" : \"2000-01-23T04:56:07.000+00:00\", \"shortTitle\" : \"shortTitle\", \"introducedSessionId\" : 7, \"includedSessionIds\" : [ 4, 4 ], \"billTypeId\" : 6 }, { \"currentStage\" : { \"stageSittings\" : [ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 } ], \"sortOrder\" : 5, \"description\" : \"description\", \"id\" : 1, \"sessionId\" : 5, \"abbreviation\" : \"abbreviation\", \"stageId\" : 2 }, \"isDefeated\" : true, \"isAct\" : true, \"billId\" : 0, \"billWithdrawn\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUpdate\" : \"2000-01-23T04:56:07.000+00:00\", \"shortTitle\" : \"shortTitle\", \"introducedSessionId\" : 7, \"includedSessionIds\" : [ 4, 4 ], \"billTypeId\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Bills/{billId}/NewsArticles : Returns a list of news articles for a Bill.
     *
     * @param billId  (required)
     * @param skip  (optional)
     * @param take  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getNewsArticles",
        summary = "Returns a list of news articles for a Bill.",
        tags = { "BillNews" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NewsArticlesSummarySearchResult.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = NewsArticlesSummarySearchResult.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = NewsArticlesSummarySearchResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Bills/{billId}/NewsArticles",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<NewsArticlesSummarySearchResult> getNewsArticles(
        @Parameter(name = "billId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("billId") Integer billId,
        @Parameter(name = "Skip", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Skip", required = false) Integer skip,
        @Parameter(name = "Take", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Take", required = false) Integer take
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalResults\" : 1, \"itemsPerPage\" : 6, \"items\" : [ { \"displayDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"title\" : \"title\", \"content\" : \"content\" }, { \"displayDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"title\" : \"title\", \"content\" : \"content\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/Sittings : Returns a list of Sittings.
     *
     * @param house  (optional)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param skip  (optional)
     * @param take  (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "getSittings",
        summary = "Returns a list of Sittings.",
        tags = { "Sittings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BillStageSittingSearchResult.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = BillStageSittingSearchResult.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = BillStageSittingSearchResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/Sittings",
        produces = { "application/json", "text/json", "text/plain" }
    )
    
    default ResponseEntity<BillStageSittingSearchResult> getSittings(
        @Parameter(name = "House", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "House", required = false) House house,
        @Parameter(name = "DateFrom", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "DateFrom", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateFrom,
        @Parameter(name = "DateTo", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "DateTo", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateTo,
        @Parameter(name = "Skip", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Skip", required = false) Integer skip,
        @Parameter(name = "Take", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Take", required = false) Integer take
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalResults\" : 6, \"itemsPerPage\" : 0, \"items\" : [ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"billId\" : 7, \"billStageId\" : 9, \"id\" : 3, \"stageId\" : 2 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/json"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/json";
                    ApiUtil.setExampleResponse(request, "text/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
