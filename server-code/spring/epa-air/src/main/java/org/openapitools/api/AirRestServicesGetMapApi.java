/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AirRestServicesGetMapGet200Response;
import java.math.BigDecimal;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:50:47.778831-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Facilities", description = "the Facilities API")
public interface AirRestServicesGetMapApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /air_rest_services.get_map : Clean Air Act Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     *
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. (status code 200)
     */
    @Operation(
        operationId = "airRestServicesGetMapGet",
        summary = "Clean Air Act Map Service",
        description = "The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.",
        tags = { "Facilities" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AirRestServicesGetMapGet200Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = AirRestServicesGetMapGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/air_rest_services.get_map",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<AirRestServicesGetMapGet200Response> airRestServicesGetMapGet(
        @NotNull @Parameter(name = "qid", description = "Query ID Selector.  Enter the QueryID number from a previously run query.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "qid", required = true) String qid,
        @NotNull @Parameter(name = "p_id", description = "Identifier for the service.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "p_id", required = true) String pId,
        @Parameter(name = "output", description = "Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "output", required = false) String output,
        @Parameter(name = "callback", description = "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "callback", required = false) String paramCallback,
        @Parameter(name = "tablelist", description = "Table List Flag. Enter a Y to display the first page of facility results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tablelist", required = false) String tablelist,
        @Parameter(name = "c1_lat", description = "Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "c1_lat", required = false) BigDecimal c1Lat,
        @Parameter(name = "c1_long", description = "Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "c1_long", required = false) BigDecimal c1Long,
        @Parameter(name = "c2_lat", description = "Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "c2_lat", required = false) BigDecimal c2Lat,
        @Parameter(name = "c2_long", description = "Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "c2_long", required = false) BigDecimal c2Long
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"MapOutput\" : { \"PopUpBaseURL\" : \"https://echodata.epa.gov/echo/cwa_rest_services.pop_up?p_id=\", \"IconBaseURL\" : \"https://echo.epa.gov/app/map/icons/\", \"MapData\" : [ { \"LastInsp\" : \"901\", \"PUV\" : \"110001891506\", \"InformalCount\" : \"1\", \"FormalCount\" : \"1\", \"LON\" : \"-77.062981\", \"ICON\" : \"CAA-IC-MN-N.png\", \"CAAstatus\" : \"______UUUUUU\", \"TYPE\" : \"Facility\", \"LAT\" : \"38.798026\", \"NAME\" : \"VIRGINIA CONCRETE ALEXANDRIA PLANT\" }, { \"LastInsp\" : \"901\", \"PUV\" : \"110001891506\", \"InformalCount\" : \"1\", \"FormalCount\" : \"1\", \"LON\" : \"-77.062981\", \"ICON\" : \"CAA-IC-MN-N.png\", \"CAAstatus\" : \"______UUUUUU\", \"TYPE\" : \"Facility\", \"LAT\" : \"38.798026\", \"NAME\" : \"VIRGINIA CONCRETE ALEXANDRIA PLANT\" } ], \"QueryID\" : \"245\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Root> </Root>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /air_rest_services.get_map : Clean Air Act Map Service
     * The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.
     *
     * @param qid Query ID Selector.  Enter the QueryID number from a previously run query. (required)
     * @param pId Identifier for the service. (required)
     * @param output Output Format Flag.  Enter one of the following keywords: - JSON &#x3D; Data model formatted as Javascript Object Notation (default). - JSONP &#x3D; Data model formatted as Javascript Object Notation with Padding.   - XML &#x3D; Data model formatted as Extensible Markup Language. (optional)
     * @param paramCallback JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response. (optional)
     * @param tablelist Table List Flag. Enter a Y to display the first page of facility results. (optional)
     * @param c1Lat Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c1Long Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Lat Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @param c2Long Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided. (optional)
     * @return Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84. (status code 200)
     */
    @Operation(
        operationId = "airRestServicesGetMapPost",
        summary = "Clean Air Act Map Service",
        description = "The purpose of the GET_MAP service is to display facility coordinates and facility clusters related to a get_facilities facility query. Currently, the maximum number of coordinates returned is 500. GET_MAP performs automatic clustering at the state, county, and zip code levels to maximize the number of coordinates returned.",
        tags = { "Facilities" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Results are either an array of State, County, Zip Code facility cluster map coordinates or individual facility coordinates.  Coordinates provided are in WGS84.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AirRestServicesGetMapGet200Response.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = AirRestServicesGetMapGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/air_rest_services.get_map",
        produces = { "application/json", "application/xml" },
        consumes = { "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<AirRestServicesGetMapGet200Response> airRestServicesGetMapPost(
        @Parameter(name = "qid", description = "Query ID Selector.  Enter the QueryID number from a previously run query.", required = true) @Valid @RequestParam(value = "qid", required = true) String qid,
        @Parameter(name = "p_id", description = "Identifier for the service.", required = true) @Valid @RequestParam(value = "p_id", required = true) String pId,
        @Parameter(name = "output", description = "Output Format Flag.  Enter one of the following keywords: - JSON = Data model formatted as Javascript Object Notation (default). - JSONP = Data model formatted as Javascript Object Notation with Padding.   - XML = Data model formatted as Extensible Markup Language.") @Valid @RequestParam(value = "output", required = false) String output,
        @Parameter(name = "callback", description = "JSONP Callback.  For use with JSONP and GEOJSONP output only.  Enter a name of the function in which to wrap the JSON response.") @Valid @RequestParam(value = "callback", required = false) String paramCallback,
        @Parameter(name = "tablelist", description = "Table List Flag. Enter a Y to display the first page of facility results.") @Valid @RequestParam(value = "tablelist", required = false) String tablelist,
        @Parameter(name = "c1_lat", description = "Latitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided.") @Valid @RequestParam(value = "c1_lat", required = false) BigDecimal c1Lat,
        @Parameter(name = "c1_long", description = "Longitude of 1st corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided.") @Valid @RequestParam(value = "c1_long", required = false) BigDecimal c1Long,
        @Parameter(name = "c2_lat", description = "Latitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided.") @Valid @RequestParam(value = "c2_lat", required = false) BigDecimal c2Lat,
        @Parameter(name = "c2_long", description = "Longitude of 2nd corner of box that bounds the resulting facilities. The latitude and longitude of both corners of the bounding box must be provided.") @Valid @RequestParam(value = "c2_long", required = false) BigDecimal c2Long
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"MapOutput\" : { \"PopUpBaseURL\" : \"https://echodata.epa.gov/echo/cwa_rest_services.pop_up?p_id=\", \"IconBaseURL\" : \"https://echo.epa.gov/app/map/icons/\", \"MapData\" : [ { \"LastInsp\" : \"901\", \"PUV\" : \"110001891506\", \"InformalCount\" : \"1\", \"FormalCount\" : \"1\", \"LON\" : \"-77.062981\", \"ICON\" : \"CAA-IC-MN-N.png\", \"CAAstatus\" : \"______UUUUUU\", \"TYPE\" : \"Facility\", \"LAT\" : \"38.798026\", \"NAME\" : \"VIRGINIA CONCRETE ALEXANDRIA PLANT\" }, { \"LastInsp\" : \"901\", \"PUV\" : \"110001891506\", \"InformalCount\" : \"1\", \"FormalCount\" : \"1\", \"LON\" : \"-77.062981\", \"ICON\" : \"CAA-IC-MN-N.png\", \"CAAstatus\" : \"______UUUUUU\", \"TYPE\" : \"Facility\", \"LAT\" : \"38.798026\", \"NAME\" : \"VIRGINIA CONCRETE ALEXANDRIA PLANT\" } ], \"QueryID\" : \"245\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Root> </Root>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
