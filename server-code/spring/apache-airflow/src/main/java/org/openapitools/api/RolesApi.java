/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.Role;
import org.openapitools.model.RoleCollection;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:42:53.320742-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Role", description = "the Role API")
public interface RolesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /roles/{role_name} : Delete a role
     * Delete a role.  *New in version 2.1.0* 
     *
     * @param roleName The role name (required)
     * @return Success. (status code 204)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteRole",
        summary = "Delete a role",
        description = "Delete a role.  *New in version 2.1.0* ",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success."),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/roles/{role_name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteRole(
        @Parameter(name = "role_name", description = "The role name", required = true, in = ParameterIn.PATH) @PathVariable("role_name") String roleName
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /roles/{role_name} : Get a role
     * Get a role.  *New in version 2.1.0* 
     *
     * @param roleName The role name (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getRole",
        summary = "Get a role",
        description = "Get a role.  *New in version 2.1.0* ",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/roles/{role_name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Role> getRole(
        @Parameter(name = "role_name", description = "The role name", required = true, in = ParameterIn.PATH) @PathVariable("role_name") String roleName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"actions\" : [ { \"resource\" : { \"name\" : \"name\" }, \"action\" : { \"name\" : \"name\" } }, { \"resource\" : { \"name\" : \"name\" }, \"action\" : { \"name\" : \"name\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /roles : List roles
     * Get a list of roles.  *New in version 2.1.0* 
     *
     * @param limit The numbers of items to return. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param orderBy The name of the field to order the results by. Prefix a field name with &#x60;-&#x60; to reverse the sort order.  *New in version 2.1.0*  (optional)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     */
    @Operation(
        operationId = "getRoles",
        summary = "List roles",
        description = "Get a list of roles.  *New in version 2.1.0* ",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoleCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/roles",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RoleCollection> getRoles(
        @Parameter(name = "limit", description = "The numbers of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "100") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "order_by", description = "The name of the field to order the results by. Prefix a field name with `-` to reverse the sort order.  *New in version 2.1.0* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order_by", required = false) String orderBy
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /roles/{role_name} : Update a role
     * Update a role.  *New in version 2.1.0* 
     *
     * @param roleName The role name (required)
     * @param role  (required)
     * @param updateMask The fields to update on the resource. If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional)
     * @return Success. (status code 200)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "patchRole",
        summary = "Update a role",
        description = "Update a role.  *New in version 2.1.0* ",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/roles/{role_name}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Role> patchRole(
        @Parameter(name = "role_name", description = "The role name", required = true, in = ParameterIn.PATH) @PathVariable("role_name") String roleName,
        @Parameter(name = "Role", description = "", required = true) @Valid @RequestBody Role role,
        @Parameter(name = "update_mask", description = "The fields to update on the resource. If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "update_mask", required = false) List<String> updateMask
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"actions\" : [ { \"resource\" : { \"name\" : \"name\" }, \"action\" : { \"name\" : \"name\" } }, { \"resource\" : { \"name\" : \"name\" }, \"action\" : { \"name\" : \"name\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /roles : Create a role
     * Create a new role.  *New in version 2.1.0* 
     *
     * @param role  (required)
     * @return Success. (status code 200)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     */
    @Operation(
        operationId = "postRole",
        summary = "Create a role",
        description = "Create a new role.  *New in version 2.1.0* ",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Role> postRole(
        @Parameter(name = "Role", description = "", required = true) @Valid @RequestBody Role role
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"actions\" : [ { \"resource\" : { \"name\" : \"name\" }, \"action\" : { \"name\" : \"name\" } }, { \"resource\" : { \"name\" : \"name\" }, \"action\" : { \"name\" : \"name\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
