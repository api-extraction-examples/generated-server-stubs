/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Dataset;
import org.openapitools.model.DatasetCollection;
import org.openapitools.model.DatasetEventCollection;
import org.openapitools.model.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:42:53.320742-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Dataset", description = "the Dataset API")
public interface DatasetsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /datasets/{uri} : Get a dataset
     * Get a dataset by uri.
     *
     * @param uri The encoded Dataset URI (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getDataset",
        summary = "Get a dataset",
        description = "Get a dataset by uri.",
        tags = { "Dataset" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Dataset.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/datasets/{uri}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Dataset> getDataset(
        @Parameter(name = "uri", description = "The encoded Dataset URI", required = true, in = ParameterIn.PATH) @PathVariable("uri") String uri
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"consuming_dags\" : [ { \"updated_at\" : \"updated_at\", \"created_at\" : \"created_at\", \"dag_id\" : \"dag_id\" }, { \"updated_at\" : \"updated_at\", \"created_at\" : \"created_at\", \"dag_id\" : \"dag_id\" } ], \"updated_at\" : \"updated_at\", \"extra\" : \"{}\", \"producing_tasks\" : [ { \"updated_at\" : \"updated_at\", \"created_at\" : \"created_at\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\" }, { \"updated_at\" : \"updated_at\", \"created_at\" : \"created_at\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\" } ], \"created_at\" : \"created_at\", \"id\" : 0, \"uri\" : \"uri\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /datasets/events : Get dataset events
     * Get dataset events
     *
     * @param limit The numbers of items to return. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param orderBy The name of the field to order the results by. Prefix a field name with &#x60;-&#x60; to reverse the sort order.  *New in version 2.1.0*  (optional)
     * @param datasetId The Dataset ID that updated the dataset. (optional)
     * @param sourceDagId The DAG ID that updated the dataset. (optional)
     * @param sourceTaskId The task ID that updated the dataset. (optional)
     * @param sourceRunId The DAG run ID that updated the dataset. (optional)
     * @param sourceMapIndex The map index that updated the dataset. (optional)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getDatasetEvents",
        summary = "Get dataset events",
        description = "Get dataset events",
        tags = { "Dataset" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DatasetEventCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/datasets/events",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DatasetEventCollection> getDatasetEvents(
        @Parameter(name = "limit", description = "The numbers of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "100") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "order_by", description = "The name of the field to order the results by. Prefix a field name with `-` to reverse the sort order.  *New in version 2.1.0* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order_by", required = false) String orderBy,
        @Parameter(name = "dataset_id", description = "The Dataset ID that updated the dataset.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dataset_id", required = false) Integer datasetId,
        @Parameter(name = "source_dag_id", description = "The DAG ID that updated the dataset.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "source_dag_id", required = false) String sourceDagId,
        @Parameter(name = "source_task_id", description = "The task ID that updated the dataset.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "source_task_id", required = false) String sourceTaskId,
        @Parameter(name = "source_run_id", description = "The DAG run ID that updated the dataset.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "source_run_id", required = false) String sourceRunId,
        @Parameter(name = "source_map_index", description = "The map index that updated the dataset.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "source_map_index", required = false) Integer sourceMapIndex
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /datasets : List datasets
     *
     * @param limit The numbers of items to return. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param orderBy The name of the field to order the results by. Prefix a field name with &#x60;-&#x60; to reverse the sort order.  *New in version 2.1.0*  (optional)
     * @param uriPattern If set, only return datasets with uris matching this pattern.  (optional)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     */
    @Operation(
        operationId = "getDatasets",
        summary = "List datasets",
        tags = { "Dataset" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DatasetCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/datasets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DatasetCollection> getDatasets(
        @Parameter(name = "limit", description = "The numbers of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "100") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "order_by", description = "The name of the field to order the results by. Prefix a field name with `-` to reverse the sort order.  *New in version 2.1.0* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order_by", required = false) String orderBy,
        @Parameter(name = "uri_pattern", description = "If set, only return datasets with uris matching this pattern. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "uri_pattern", required = false) String uriPattern
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
