/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import org.openapitools.model.ClearDagRun;
import org.openapitools.model.ClearDagRun200Response;
import org.openapitools.model.ClearTaskInstances;
import org.openapitools.model.DAG;
import org.openapitools.model.DAGCollection;
import org.openapitools.model.DAGDetail;
import org.openapitools.model.DAGRun;
import org.openapitools.model.DAGRunCollection;
import org.openapitools.model.DatasetEventCollection;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.Error;
import org.openapitools.model.ExtraLinkCollection;
import org.openapitools.model.GetLog200Response;
import org.openapitools.model.ListDagRunsForm;
import org.openapitools.model.ListTaskInstanceForm;
import java.time.OffsetDateTime;
import org.openapitools.model.SetDagRunNote;
import org.openapitools.model.SetTaskInstanceNote;
import org.openapitools.model.Task;
import org.openapitools.model.TaskCollection;
import org.openapitools.model.TaskInstance;
import org.openapitools.model.TaskInstanceCollection;
import org.openapitools.model.TaskInstanceReference;
import org.openapitools.model.TaskInstanceReferenceCollection;
import org.openapitools.model.UpdateDagRunState;
import org.openapitools.model.UpdateTaskInstance;
import org.openapitools.model.UpdateTaskInstancesState;
import org.openapitools.model.XCom;
import org.openapitools.model.XComCollection;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:42:53.320742-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "DAGRun", description = "the DAGRun API")
public interface DagsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /dags/{dag_id}/dagRuns/{dag_run_id}/clear : Clear a DAG run
     * Clear a DAG run.  *New in version 2.4.0* 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param clearDagRun  (required)
     * @return Success. (status code 200)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "clearDagRun",
        summary = "Clear a DAG run",
        description = "Clear a DAG run.  *New in version 2.4.0* ",
        tags = { "DAGRun" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClearDagRun200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/clear",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ClearDagRun200Response> clearDagRun(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "ClearDagRun", description = "", required = true) @Valid @RequestBody ClearDagRun clearDagRun
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /dags/{dag_id} : Delete a DAG
     * Deletes all metadata related to the DAG, including finished DAG Runs and Tasks. Logs are not deleted. This action cannot be undone.  *New in version 2.2.0* 
     *
     * @param dagId The DAG ID. (required)
     * @return Success. (status code 204)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     *         or An existing resource conflicts with the request. (status code 409)
     */
    @Operation(
        operationId = "deleteDag",
        summary = "Delete a DAG",
        description = "Deletes all metadata related to the DAG, including finished DAG Runs and Tasks. Logs are not deleted. This action cannot be undone.  *New in version 2.2.0* ",
        tags = { "DAG" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success."),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "An existing resource conflicts with the request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/dags/{dag_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteDag(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /dags/{dag_id}/dagRuns/{dag_run_id} : Delete a DAG run
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @return Success. (status code 204)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "deleteDagRun",
        summary = "Delete a DAG run",
        tags = { "DAGRun" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success."),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteDagRun(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id} : Get basic information about a DAG
     * Presents only information available in database (DAGModel). If you need detailed information, consider using GET /dags/{dag_id}/details. 
     *
     * @param dagId The DAG ID. (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getDag",
        summary = "Get basic information about a DAG",
        description = "Presents only information available in database (DAGModel). If you need detailed information, consider using GET /dags/{dag_id}/details. ",
        tags = { "DAG" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAG.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DAG> getDag(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"description\", \"owners\" : [ \"owners\", \"owners\" ], \"fileloc\" : \"fileloc\", \"has_task_concurrency_limits\" : true, \"root_dag_id\" : \"root_dag_id\", \"has_import_errors\" : true, \"last_pickled\" : \"2000-01-23T04:56:07.000+00:00\", \"last_parsed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"next_dagrun_create_after\" : \"2000-01-23T04:56:07.000+00:00\", \"dag_id\" : \"dag_id\", \"scheduler_lock\" : true, \"default_view\" : \"default_view\", \"next_dagrun_data_interval_end\" : \"2000-01-23T04:56:07.000+00:00\", \"next_dagrun_data_interval_start\" : \"2000-01-23T04:56:07.000+00:00\", \"is_active\" : true, \"last_expired\" : \"2000-01-23T04:56:07.000+00:00\", \"max_active_runs\" : 0, \"file_token\" : \"file_token\", \"max_active_tasks\" : 6, \"pickle_id\" : \"pickle_id\", \"tags\" : [ { \"name\" : \"name\" }, { \"name\" : \"name\" } ], \"timetable_description\" : \"timetable_description\", \"is_paused\" : true, \"is_subdag\" : true, \"next_dagrun\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/details : Get a simplified representation of DAG
     * The response contains many DAG attributes, so the response can be large. If possible, consider using GET /dags/{dag_id}. 
     *
     * @param dagId The DAG ID. (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getDagDetails",
        summary = "Get a simplified representation of DAG",
        description = "The response contains many DAG attributes, so the response can be large. If possible, consider using GET /dags/{dag_id}. ",
        tags = { "DAG" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAGDetail.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/details",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DAGDetail> getDagDetails(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns/{dag_run_id} : Get a DAG run
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getDagRun",
        summary = "Get a DAG run",
        tags = { "DAGRun" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAGRun.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DAGRun> getDagRun(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"note\" : \"note\", \"execution_date\" : \"2000-01-23T04:56:07.000+00:00\", \"external_trigger\" : true, \"conf\" : \"{}\", \"data_interval_start\" : \"2000-01-23T04:56:07.000+00:00\", \"run_type\" : \"backfill\", \"data_interval_end\" : \"2000-01-23T04:56:07.000+00:00\", \"last_scheduling_decision\" : \"2000-01-23T04:56:07.000+00:00\", \"dag_run_id\" : \"dag_run_id\", \"dag_id\" : \"dag_id\", \"logical_date\" : \"2000-01-23T04:56:07.000+00:00\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns : List DAG runs
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id to retrieve DAG runs for all DAGs. 
     *
     * @param dagId The DAG ID. (required)
     * @param limit The numbers of items to return. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param executionDateGte Returns objects greater or equal to the specified date.  This can be combined with execution_date_lte parameter to receive only the selected period.  (optional)
     * @param executionDateLte Returns objects less than or equal to the specified date.  This can be combined with execution_date_gte parameter to receive only the selected period.  (optional)
     * @param startDateGte Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period.  (optional)
     * @param startDateLte Returns objects less or equal the specified date.  This can be combined with start_date_gte parameter to receive only the selected period.  (optional)
     * @param endDateGte Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period.  (optional)
     * @param endDateLte Returns objects less than or equal to the specified date.  This can be combined with start_date_gte parameter to receive only the selected period.  (optional)
     * @param state The value can be repeated to retrieve multiple matching values (OR condition). (optional)
     * @param orderBy The name of the field to order the results by. Prefix a field name with &#x60;-&#x60; to reverse the sort order.  *New in version 2.1.0*  (optional)
     * @return List of DAG runs. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     */
    @Operation(
        operationId = "getDagRuns",
        summary = "List DAG runs",
        description = "This endpoint allows specifying `~` as the dag_id to retrieve DAG runs for all DAGs. ",
        tags = { "DAGRun" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of DAG runs.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAGRunCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DAGRunCollection> getDagRuns(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "limit", description = "The numbers of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "100") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "execution_date_gte", description = "Returns objects greater or equal to the specified date.  This can be combined with execution_date_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "execution_date_gte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executionDateGte,
        @Parameter(name = "execution_date_lte", description = "Returns objects less than or equal to the specified date.  This can be combined with execution_date_gte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "execution_date_lte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executionDateLte,
        @Parameter(name = "start_date_gte", description = "Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_date_gte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDateGte,
        @Parameter(name = "start_date_lte", description = "Returns objects less or equal the specified date.  This can be combined with start_date_gte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_date_lte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDateLte,
        @Parameter(name = "end_date_gte", description = "Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_date_gte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDateGte,
        @Parameter(name = "end_date_lte", description = "Returns objects less than or equal to the specified date.  This can be combined with start_date_gte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_date_lte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDateLte,
        @Parameter(name = "state", description = "The value can be repeated to retrieve multiple matching values (OR condition).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) List<String> state,
        @Parameter(name = "order_by", description = "The name of the field to order the results by. Prefix a field name with `-` to reverse the sort order.  *New in version 2.1.0* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order_by", required = false) String orderBy
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /dags/~/dagRuns/list : List DAG runs (batch)
     * This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL length limit. 
     *
     * @param listDagRunsForm  (required)
     * @return Success. (status code 200)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     */
    @Operation(
        operationId = "getDagRunsBatch",
        summary = "List DAG runs (batch)",
        description = "This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL length limit. ",
        tags = { "DAGRun" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAGRunCollection.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/dags/~/dagRuns/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DAGRunCollection> getDagRunsBatch(
        @Parameter(name = "ListDagRunsForm", description = "", required = true) @Valid @RequestBody ListDagRunsForm listDagRunsForm
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags : List DAGs
     * List DAGs in the database. &#x60;dag_id_pattern&#x60; can be set to match dags of a specific pattern 
     *
     * @param limit The numbers of items to return. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param orderBy The name of the field to order the results by. Prefix a field name with &#x60;-&#x60; to reverse the sort order.  *New in version 2.1.0*  (optional)
     * @param tags List of tags to filter results.  *New in version 2.2.0*  (optional)
     * @param onlyActive Only filter active DAGs.  *New in version 2.1.1*  (optional, default to true)
     * @param dagIdPattern If set, only return DAGs with dag_ids matching this pattern.  (optional)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     */
    @Operation(
        operationId = "getDags",
        summary = "List DAGs",
        description = "List DAGs in the database. `dag_id_pattern` can be set to match dags of a specific pattern ",
        tags = { "DAG" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAGCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DAGCollection> getDags(
        @Parameter(name = "limit", description = "The numbers of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "100") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "order_by", description = "The name of the field to order the results by. Prefix a field name with `-` to reverse the sort order.  *New in version 2.1.0* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order_by", required = false) String orderBy,
        @Parameter(name = "tags", description = "List of tags to filter results.  *New in version 2.2.0* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tags", required = false) List<String> tags,
        @Parameter(name = "only_active", description = "Only filter active DAGs.  *New in version 2.1.1* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "only_active", required = false, defaultValue = "true") Boolean onlyActive,
        @Parameter(name = "dag_id_pattern", description = "If set, only return DAGs with dag_ids matching this pattern. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dag_id_pattern", required = false) String dagIdPattern
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/links : List extra links
     * List extra links for task instance. 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getExtraLinks",
        summary = "List extra links",
        description = "List extra links for task instance. ",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExtraLinkCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/links",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ExtraLinkCollection> getExtraLinks(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"extra_links\" : [ { \"name\" : \"name\", \"href\" : \"href\", \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" } }, { \"name\" : \"name\", \"href\" : \"href\", \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/logs/{task_try_number} : Get logs
     * Get logs for a specific task instance and its try number.
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @param taskTryNumber The task try number. (required)
     * @param fullContent A full content will be returned. By default, only the first fragment will be returned.  (optional)
     * @param mapIndex Filter on map index for mapped task. (optional)
     * @param token A token that allows you to continue fetching logs. If passed, it will specify the location from which the download should be continued.  (optional)
     * @return Success. (status code 200)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getLog",
        summary = "Get logs",
        description = "Get logs for a specific task instance and its try number.",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetLog200Response.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = GetLog200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/logs/{task_try_number}",
        produces = { "application/json", "text/plain" }
    )
    
    default ResponseEntity<GetLog200Response> getLog(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "task_try_number", description = "The task try number.", required = true, in = ParameterIn.PATH) @PathVariable("task_try_number") Integer taskTryNumber,
        @Parameter(name = "full_content", description = "A full content will be returned. By default, only the first fragment will be returned. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_content", required = false) Boolean fullContent,
        @Parameter(name = "map_index", description = "Filter on map index for mapped task.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "map_index", required = false) Integer mapIndex,
        @Parameter(name = "token", description = "A token that allows you to continue fetching logs. If passed, it will specify the location from which the download should be continued. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "token", required = false) String token
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"continuation_token\" : \"continuation_token\", \"content\" : \"content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/plain"))) {
                    String exampleString = "Custom MIME type example not yet supported: text/plain";
                    ApiUtil.setExampleResponse(request, "text/plain", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index} : Get a mapped task instance
     * Get details of a mapped task instance.  *New in version 2.3.0* 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @param mapIndex The map index. (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getMappedTaskInstance",
        summary = "Get a mapped task instance",
        description = "Get details of a mapped task instance.  *New in version 2.3.0* ",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstance.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskInstance> getMappedTaskInstance(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "map_index", description = "The map index.", required = true, in = ParameterIn.PATH) @PathVariable("map_index") Integer mapIndex
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"end_date\", \"note\" : \"note\", \"unixname\" : \"unixname\", \"rendered_fields\" : \"{}\", \"pid\" : 5, \"task_id\" : \"task_id\", \"operator\" : \"operator\", \"sla_miss\" : { \"notification_sent\" : true, \"email_sent\" : true, \"execution_date\" : \"execution_date\", \"description\" : \"description\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\", \"timestamp\" : \"timestamp\" }, \"duration\" : 0.8008281904610115, \"hostname\" : \"hostname\", \"dag_id\" : \"dag_id\", \"priority_weight\" : 2, \"queued_when\" : \"queued_when\", \"start_date\" : \"start_date\", \"triggerer_job\" : { \"end_date\" : \"end_date\", \"job_type\" : \"job_type\", \"unixname\" : \"unixname\", \"hostname\" : \"hostname\", \"latest_heartbeat\" : \"latest_heartbeat\", \"dag_id\" : \"dag_id\", \"id\" : 3, \"state\" : \"state\", \"executor_class\" : \"executor_class\", \"start_date\" : \"start_date\" }, \"execution_date\" : \"execution_date\", \"pool_slots\" : 5, \"pool\" : \"pool\", \"map_index\" : 6, \"max_tries\" : 1, \"trigger\" : { \"classpath\" : \"classpath\", \"kwargs\" : \"kwargs\", \"created_date\" : \"created_date\", \"id\" : 7, \"triggerer_id\" : 9 }, \"executor_config\" : \"executor_config\", \"dag_run_id\" : \"dag_run_id\", \"try_number\" : 2, \"queue\" : \"queue\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/listMapped : List mapped task instances
     * Get details of all mapped task instances.  *New in version 2.3.0* 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @param limit The numbers of items to return. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param executionDateGte Returns objects greater or equal to the specified date.  This can be combined with execution_date_lte parameter to receive only the selected period.  (optional)
     * @param executionDateLte Returns objects less than or equal to the specified date.  This can be combined with execution_date_gte parameter to receive only the selected period.  (optional)
     * @param startDateGte Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period.  (optional)
     * @param startDateLte Returns objects less or equal the specified date.  This can be combined with start_date_gte parameter to receive only the selected period.  (optional)
     * @param endDateGte Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period.  (optional)
     * @param endDateLte Returns objects less than or equal to the specified date.  This can be combined with start_date_gte parameter to receive only the selected period.  (optional)
     * @param durationGte Returns objects greater than or equal to the specified values.  This can be combined with duration_lte parameter to receive only the selected period.  (optional)
     * @param durationLte Returns objects less than or equal to the specified values.  This can be combined with duration_gte parameter to receive only the selected range.  (optional)
     * @param state The value can be repeated to retrieve multiple matching values (OR condition). (optional)
     * @param pool The value can be repeated to retrieve multiple matching values (OR condition). (optional)
     * @param queue The value can be repeated to retrieve multiple matching values (OR condition). (optional)
     * @param orderBy The name of the field to order the results by. Prefix a field name with &#x60;-&#x60; to reverse the sort order.  *New in version 2.1.0*  (optional)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getMappedTaskInstances",
        summary = "List mapped task instances",
        description = "Get details of all mapped task instances.  *New in version 2.3.0* ",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstanceCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/listMapped",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskInstanceCollection> getMappedTaskInstances(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "limit", description = "The numbers of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "100") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "execution_date_gte", description = "Returns objects greater or equal to the specified date.  This can be combined with execution_date_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "execution_date_gte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executionDateGte,
        @Parameter(name = "execution_date_lte", description = "Returns objects less than or equal to the specified date.  This can be combined with execution_date_gte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "execution_date_lte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executionDateLte,
        @Parameter(name = "start_date_gte", description = "Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_date_gte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDateGte,
        @Parameter(name = "start_date_lte", description = "Returns objects less or equal the specified date.  This can be combined with start_date_gte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_date_lte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDateLte,
        @Parameter(name = "end_date_gte", description = "Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_date_gte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDateGte,
        @Parameter(name = "end_date_lte", description = "Returns objects less than or equal to the specified date.  This can be combined with start_date_gte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_date_lte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDateLte,
        @Parameter(name = "duration_gte", description = "Returns objects greater than or equal to the specified values.  This can be combined with duration_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "duration_gte", required = false) BigDecimal durationGte,
        @Parameter(name = "duration_lte", description = "Returns objects less than or equal to the specified values.  This can be combined with duration_gte parameter to receive only the selected range. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "duration_lte", required = false) BigDecimal durationLte,
        @Parameter(name = "state", description = "The value can be repeated to retrieve multiple matching values (OR condition).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) List<String> state,
        @Parameter(name = "pool", description = "The value can be repeated to retrieve multiple matching values (OR condition).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pool", required = false) List<String> pool,
        @Parameter(name = "queue", description = "The value can be repeated to retrieve multiple matching values (OR condition).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queue", required = false) List<String> queue,
        @Parameter(name = "order_by", description = "The name of the field to order the results by. Prefix a field name with `-` to reverse the sort order.  *New in version 2.1.0* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order_by", required = false) String orderBy
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/tasks/{task_id} : Get simplified representation of a task
     *
     * @param dagId The DAG ID. (required)
     * @param taskId The task ID. (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getTask",
        summary = "Get simplified representation of a task",
        tags = { "DAG" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/tasks/{task_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Task> getTask(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"owner\" : \"owner\", \"ui_fgcolor\" : \"ui_fgcolor\", \"extra_links\" : [ { \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" } }, { \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" } } ], \"depends_on_past\" : true, \"ui_color\" : \"ui_color\", \"pool_slots\" : 5.962133916683182, \"pool\" : \"pool\", \"retry_exponential_backoff\" : true, \"task_id\" : \"task_id\", \"downstream_task_ids\" : [ \"downstream_task_ids\", \"downstream_task_ids\" ], \"sub_dag\" : { \"description\" : \"description\", \"owners\" : [ \"owners\", \"owners\" ], \"fileloc\" : \"fileloc\", \"has_task_concurrency_limits\" : true, \"root_dag_id\" : \"root_dag_id\", \"has_import_errors\" : true, \"last_pickled\" : \"2000-01-23T04:56:07.000+00:00\", \"last_parsed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"next_dagrun_create_after\" : \"2000-01-23T04:56:07.000+00:00\", \"dag_id\" : \"dag_id\", \"scheduler_lock\" : true, \"default_view\" : \"default_view\", \"next_dagrun_data_interval_end\" : \"2000-01-23T04:56:07.000+00:00\", \"next_dagrun_data_interval_start\" : \"2000-01-23T04:56:07.000+00:00\", \"is_active\" : true, \"last_expired\" : \"2000-01-23T04:56:07.000+00:00\", \"max_active_runs\" : 0, \"file_token\" : \"file_token\", \"max_active_tasks\" : 6, \"pickle_id\" : \"pickle_id\", \"tags\" : [ { \"name\" : \"name\" }, { \"name\" : \"name\" } ], \"timetable_description\" : \"timetable_description\", \"is_paused\" : true, \"is_subdag\" : true, \"next_dagrun\" : \"2000-01-23T04:56:07.000+00:00\" }, \"retries\" : 2.3021358869347655, \"template_fields\" : [ \"template_fields\", \"template_fields\" ], \"retry_delay\" : { \"seconds\" : 1, \"__type\" : \"__type\", \"days\" : 0, \"microseconds\" : 6 }, \"is_mapped\" : true, \"priority_weight\" : 5.637376656633329, \"wait_for_downstream\" : true, \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" }, \"execution_timeout\" : { \"seconds\" : 1, \"__type\" : \"__type\", \"days\" : 0, \"microseconds\" : 6 }, \"queue\" : \"queue\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id} : Get a task instance
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getTaskInstance",
        summary = "Get a task instance",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstance.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskInstance> getTaskInstance(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"end_date\", \"note\" : \"note\", \"unixname\" : \"unixname\", \"rendered_fields\" : \"{}\", \"pid\" : 5, \"task_id\" : \"task_id\", \"operator\" : \"operator\", \"sla_miss\" : { \"notification_sent\" : true, \"email_sent\" : true, \"execution_date\" : \"execution_date\", \"description\" : \"description\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\", \"timestamp\" : \"timestamp\" }, \"duration\" : 0.8008281904610115, \"hostname\" : \"hostname\", \"dag_id\" : \"dag_id\", \"priority_weight\" : 2, \"queued_when\" : \"queued_when\", \"start_date\" : \"start_date\", \"triggerer_job\" : { \"end_date\" : \"end_date\", \"job_type\" : \"job_type\", \"unixname\" : \"unixname\", \"hostname\" : \"hostname\", \"latest_heartbeat\" : \"latest_heartbeat\", \"dag_id\" : \"dag_id\", \"id\" : 3, \"state\" : \"state\", \"executor_class\" : \"executor_class\", \"start_date\" : \"start_date\" }, \"execution_date\" : \"execution_date\", \"pool_slots\" : 5, \"pool\" : \"pool\", \"map_index\" : 6, \"max_tries\" : 1, \"trigger\" : { \"classpath\" : \"classpath\", \"kwargs\" : \"kwargs\", \"created_date\" : \"created_date\", \"id\" : 7, \"triggerer_id\" : 9 }, \"executor_config\" : \"executor_config\", \"dag_run_id\" : \"dag_run_id\", \"try_number\" : 2, \"queue\" : \"queue\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances : List task instances
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id, dag_run_id to retrieve DAG runs for all DAGs and DAG runs. 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param executionDateGte Returns objects greater or equal to the specified date.  This can be combined with execution_date_lte parameter to receive only the selected period.  (optional)
     * @param executionDateLte Returns objects less than or equal to the specified date.  This can be combined with execution_date_gte parameter to receive only the selected period.  (optional)
     * @param startDateGte Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period.  (optional)
     * @param startDateLte Returns objects less or equal the specified date.  This can be combined with start_date_gte parameter to receive only the selected period.  (optional)
     * @param endDateGte Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period.  (optional)
     * @param endDateLte Returns objects less than or equal to the specified date.  This can be combined with start_date_gte parameter to receive only the selected period.  (optional)
     * @param durationGte Returns objects greater than or equal to the specified values.  This can be combined with duration_lte parameter to receive only the selected period.  (optional)
     * @param durationLte Returns objects less than or equal to the specified values.  This can be combined with duration_gte parameter to receive only the selected range.  (optional)
     * @param state The value can be repeated to retrieve multiple matching values (OR condition). (optional)
     * @param pool The value can be repeated to retrieve multiple matching values (OR condition). (optional)
     * @param queue The value can be repeated to retrieve multiple matching values (OR condition). (optional)
     * @param limit The numbers of items to return. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     */
    @Operation(
        operationId = "getTaskInstances",
        summary = "List task instances",
        description = "This endpoint allows specifying `~` as the dag_id, dag_run_id to retrieve DAG runs for all DAGs and DAG runs. ",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstanceCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskInstanceCollection> getTaskInstances(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "execution_date_gte", description = "Returns objects greater or equal to the specified date.  This can be combined with execution_date_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "execution_date_gte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executionDateGte,
        @Parameter(name = "execution_date_lte", description = "Returns objects less than or equal to the specified date.  This can be combined with execution_date_gte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "execution_date_lte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime executionDateLte,
        @Parameter(name = "start_date_gte", description = "Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_date_gte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDateGte,
        @Parameter(name = "start_date_lte", description = "Returns objects less or equal the specified date.  This can be combined with start_date_gte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_date_lte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDateLte,
        @Parameter(name = "end_date_gte", description = "Returns objects greater or equal the specified date.  This can be combined with start_date_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_date_gte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDateGte,
        @Parameter(name = "end_date_lte", description = "Returns objects less than or equal to the specified date.  This can be combined with start_date_gte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_date_lte", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDateLte,
        @Parameter(name = "duration_gte", description = "Returns objects greater than or equal to the specified values.  This can be combined with duration_lte parameter to receive only the selected period. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "duration_gte", required = false) BigDecimal durationGte,
        @Parameter(name = "duration_lte", description = "Returns objects less than or equal to the specified values.  This can be combined with duration_gte parameter to receive only the selected range. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "duration_lte", required = false) BigDecimal durationLte,
        @Parameter(name = "state", description = "The value can be repeated to retrieve multiple matching values (OR condition).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) List<String> state,
        @Parameter(name = "pool", description = "The value can be repeated to retrieve multiple matching values (OR condition).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pool", required = false) List<String> pool,
        @Parameter(name = "queue", description = "The value can be repeated to retrieve multiple matching values (OR condition).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "queue", required = false) List<String> queue,
        @Parameter(name = "limit", description = "The numbers of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "100") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /dags/~/dagRuns/~/taskInstances/list : List task instances (batch)
     * List task instances from all DAGs and DAG runs. This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL length limits. 
     *
     * @param listTaskInstanceForm  (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getTaskInstancesBatch",
        summary = "List task instances (batch)",
        description = "List task instances from all DAGs and DAG runs. This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL length limits. ",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstanceCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/dags/~/dagRuns/~/taskInstances/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskInstanceCollection> getTaskInstancesBatch(
        @Parameter(name = "ListTaskInstanceForm", description = "", required = true) @Valid @RequestBody ListTaskInstanceForm listTaskInstanceForm
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/tasks : Get tasks for DAG
     *
     * @param dagId The DAG ID. (required)
     * @param orderBy The name of the field to order the results by. Prefix a field name with &#x60;-&#x60; to reverse the sort order.  *New in version 2.1.0*  (optional)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getTasks",
        summary = "Get tasks for DAG",
        tags = { "DAG" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/tasks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskCollection> getTasks(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "order_by", description = "The name of the field to order the results by. Prefix a field name with `-` to reverse the sort order.  *New in version 2.1.0* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "order_by", required = false) String orderBy
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tasks\" : [ { \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"owner\" : \"owner\", \"ui_fgcolor\" : \"ui_fgcolor\", \"extra_links\" : [ { \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" } }, { \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" } } ], \"depends_on_past\" : true, \"ui_color\" : \"ui_color\", \"pool_slots\" : 5.962133916683182, \"pool\" : \"pool\", \"retry_exponential_backoff\" : true, \"task_id\" : \"task_id\", \"downstream_task_ids\" : [ \"downstream_task_ids\", \"downstream_task_ids\" ], \"sub_dag\" : { \"description\" : \"description\", \"owners\" : [ \"owners\", \"owners\" ], \"fileloc\" : \"fileloc\", \"has_task_concurrency_limits\" : true, \"root_dag_id\" : \"root_dag_id\", \"has_import_errors\" : true, \"last_pickled\" : \"2000-01-23T04:56:07.000+00:00\", \"last_parsed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"next_dagrun_create_after\" : \"2000-01-23T04:56:07.000+00:00\", \"dag_id\" : \"dag_id\", \"scheduler_lock\" : true, \"default_view\" : \"default_view\", \"next_dagrun_data_interval_end\" : \"2000-01-23T04:56:07.000+00:00\", \"next_dagrun_data_interval_start\" : \"2000-01-23T04:56:07.000+00:00\", \"is_active\" : true, \"last_expired\" : \"2000-01-23T04:56:07.000+00:00\", \"max_active_runs\" : 0, \"file_token\" : \"file_token\", \"max_active_tasks\" : 6, \"pickle_id\" : \"pickle_id\", \"tags\" : [ { \"name\" : \"name\" }, { \"name\" : \"name\" } ], \"timetable_description\" : \"timetable_description\", \"is_paused\" : true, \"is_subdag\" : true, \"next_dagrun\" : \"2000-01-23T04:56:07.000+00:00\" }, \"retries\" : 2.3021358869347655, \"template_fields\" : [ \"template_fields\", \"template_fields\" ], \"retry_delay\" : { \"seconds\" : 1, \"__type\" : \"__type\", \"days\" : 0, \"microseconds\" : 6 }, \"is_mapped\" : true, \"priority_weight\" : 5.637376656633329, \"wait_for_downstream\" : true, \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" }, \"execution_timeout\" : { \"seconds\" : 1, \"__type\" : \"__type\", \"days\" : 0, \"microseconds\" : 6 }, \"queue\" : \"queue\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"owner\" : \"owner\", \"ui_fgcolor\" : \"ui_fgcolor\", \"extra_links\" : [ { \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" } }, { \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" } } ], \"depends_on_past\" : true, \"ui_color\" : \"ui_color\", \"pool_slots\" : 5.962133916683182, \"pool\" : \"pool\", \"retry_exponential_backoff\" : true, \"task_id\" : \"task_id\", \"downstream_task_ids\" : [ \"downstream_task_ids\", \"downstream_task_ids\" ], \"sub_dag\" : { \"description\" : \"description\", \"owners\" : [ \"owners\", \"owners\" ], \"fileloc\" : \"fileloc\", \"has_task_concurrency_limits\" : true, \"root_dag_id\" : \"root_dag_id\", \"has_import_errors\" : true, \"last_pickled\" : \"2000-01-23T04:56:07.000+00:00\", \"last_parsed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"next_dagrun_create_after\" : \"2000-01-23T04:56:07.000+00:00\", \"dag_id\" : \"dag_id\", \"scheduler_lock\" : true, \"default_view\" : \"default_view\", \"next_dagrun_data_interval_end\" : \"2000-01-23T04:56:07.000+00:00\", \"next_dagrun_data_interval_start\" : \"2000-01-23T04:56:07.000+00:00\", \"is_active\" : true, \"last_expired\" : \"2000-01-23T04:56:07.000+00:00\", \"max_active_runs\" : 0, \"file_token\" : \"file_token\", \"max_active_tasks\" : 6, \"pickle_id\" : \"pickle_id\", \"tags\" : [ { \"name\" : \"name\" }, { \"name\" : \"name\" } ], \"timetable_description\" : \"timetable_description\", \"is_paused\" : true, \"is_subdag\" : true, \"next_dagrun\" : \"2000-01-23T04:56:07.000+00:00\" }, \"retries\" : 2.3021358869347655, \"template_fields\" : [ \"template_fields\", \"template_fields\" ], \"retry_delay\" : { \"seconds\" : 1, \"__type\" : \"__type\", \"days\" : 0, \"microseconds\" : 6 }, \"is_mapped\" : true, \"priority_weight\" : 5.637376656633329, \"wait_for_downstream\" : true, \"class_ref\" : { \"class_name\" : \"class_name\", \"module_path\" : \"module_path\" }, \"execution_timeout\" : { \"seconds\" : 1, \"__type\" : \"__type\", \"days\" : 0, \"microseconds\" : 6 }, \"queue\" : \"queue\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns/{dag_run_id}/upstreamDatasetEvents : Get dataset events for a DAG run
     * Get datasets for a dag run.  *New in version 2.4.0* 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getUpstreamDatasetEvents",
        summary = "Get dataset events for a DAG run",
        description = "Get datasets for a dag run.  *New in version 2.4.0* ",
        tags = { "DAGRun", "Dataset" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DatasetEventCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/upstreamDatasetEvents",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DatasetEventCollection> getUpstreamDatasetEvents(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries : List XCom entries
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id, dag_run_id, task_id to retrieve XCOM entries for for all DAGs, DAG runs and task instances. XCom values won&#39;t be returned as they can be large. Use this endpoint to get a list of XCom entries and then fetch individual entry to get value.
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @param limit The numbers of items to return. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     */
    @Operation(
        operationId = "getXcomEntries",
        summary = "List XCom entries",
        description = "This endpoint allows specifying `~` as the dag_id, dag_run_id, task_id to retrieve XCOM entries for for all DAGs, DAG runs and task instances. XCom values won't be returned as they can be large. Use this endpoint to get a list of XCom entries and then fetch individual entry to get value.",
        tags = { "XCom" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = XComCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries",
        produces = { "application/json" }
    )
    
    default ResponseEntity<XComCollection> getXcomEntries(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "limit", description = "The numbers of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "100") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key} : Get an XCom entry
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @param xcomKey The XCom key. (required)
     * @param deserialize Whether to deserialize an XCom value when using a custom XCom backend.  The XCom API endpoint calls &#x60;orm_deserialize_value&#x60; by default since an XCom may contain value that is potentially expensive to deserialize in the web server. Setting this to true overrides the consideration, and calls &#x60;deserialize_value&#x60; instead.  This parameter is not meaningful when using the default XCom backend.  *New in version 2.4.0*  (optional, default to false)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "getXcomEntry",
        summary = "Get an XCom entry",
        tags = { "XCom" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = XCom.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<XCom> getXcomEntry(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "xcom_key", description = "The XCom key.", required = true, in = ParameterIn.PATH) @PathVariable("xcom_key") String xcomKey,
        @Parameter(name = "deserialize", description = "Whether to deserialize an XCom value when using a custom XCom backend.  The XCom API endpoint calls `orm_deserialize_value` by default since an XCom may contain value that is potentially expensive to deserialize in the web server. Setting this to true overrides the consideration, and calls `deserialize_value` instead.  This parameter is not meaningful when using the default XCom backend.  *New in version 2.4.0* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deserialize", required = false, defaultValue = "false") Boolean deserialize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /dags/{dag_id} : Update a DAG
     *
     * @param dagId The DAG ID. (required)
     * @param DAG  (required)
     * @param updateMask The fields to update on the resource. If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "patchDag",
        summary = "Update a DAG",
        tags = { "DAG" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAG.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/dags/{dag_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DAG> patchDag(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "DAG", description = "", required = true) @Valid @RequestBody DAG DAG,
        @Parameter(name = "update_mask", description = "The fields to update on the resource. If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "update_mask", required = false) List<String> updateMask
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"description\", \"owners\" : [ \"owners\", \"owners\" ], \"fileloc\" : \"fileloc\", \"has_task_concurrency_limits\" : true, \"root_dag_id\" : \"root_dag_id\", \"has_import_errors\" : true, \"last_pickled\" : \"2000-01-23T04:56:07.000+00:00\", \"last_parsed_time\" : \"2000-01-23T04:56:07.000+00:00\", \"next_dagrun_create_after\" : \"2000-01-23T04:56:07.000+00:00\", \"dag_id\" : \"dag_id\", \"scheduler_lock\" : true, \"default_view\" : \"default_view\", \"next_dagrun_data_interval_end\" : \"2000-01-23T04:56:07.000+00:00\", \"next_dagrun_data_interval_start\" : \"2000-01-23T04:56:07.000+00:00\", \"is_active\" : true, \"last_expired\" : \"2000-01-23T04:56:07.000+00:00\", \"max_active_runs\" : 0, \"file_token\" : \"file_token\", \"max_active_tasks\" : 6, \"pickle_id\" : \"pickle_id\", \"tags\" : [ { \"name\" : \"name\" }, { \"name\" : \"name\" } ], \"timetable_description\" : \"timetable_description\", \"is_paused\" : true, \"is_subdag\" : true, \"next_dagrun\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /dags : Update DAGs
     * Update DAGs of a given dag_id_pattern using UpdateMask. This endpoint allows specifying &#x60;~&#x60; as the dag_id_pattern to update all DAGs. *New in version 2.3.0* 
     *
     * @param dagIdPattern If set, only update DAGs with dag_ids matching this pattern.  (required)
     * @param DAG  (required)
     * @param limit The numbers of items to return. (optional, default to 100)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param tags List of tags to filter results.  *New in version 2.2.0*  (optional)
     * @param updateMask The fields to update on the resource. If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields.  (optional)
     * @param onlyActive Only filter active DAGs.  *New in version 2.1.1*  (optional, default to true)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "patchDags",
        summary = "Update DAGs",
        description = "Update DAGs of a given dag_id_pattern using UpdateMask. This endpoint allows specifying `~` as the dag_id_pattern to update all DAGs. *New in version 2.3.0* ",
        tags = { "DAG" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAGCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/dags",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DAGCollection> patchDags(
        @NotNull @Parameter(name = "dag_id_pattern", description = "If set, only update DAGs with dag_ids matching this pattern. ", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "dag_id_pattern", required = true) String dagIdPattern,
        @Parameter(name = "DAG", description = "", required = true) @Valid @RequestBody DAG DAG,
        @Parameter(name = "limit", description = "The numbers of items to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "100") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "The number of items to skip before starting to collect the result set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "tags", description = "List of tags to filter results.  *New in version 2.2.0* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tags", required = false) List<String> tags,
        @Parameter(name = "update_mask", description = "The fields to update on the resource. If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "update_mask", required = false) List<String> updateMask,
        @Parameter(name = "only_active", description = "Only filter active DAGs.  *New in version 2.1.1* ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "only_active", required = false, defaultValue = "true") Boolean onlyActive
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index} : Updates the state of a mapped task instance
     * Updates the state for single mapped task instance. *New in version 2.5.0* 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @param mapIndex The map index. (required)
     * @param updateTaskInstance Parameters of action (optional)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "patchMappedTaskInstance",
        summary = "Updates the state of a mapped task instance",
        description = "Updates the state for single mapped task instance. *New in version 2.5.0* ",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstanceReference.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskInstanceReference> patchMappedTaskInstance(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "map_index", description = "The map index.", required = true, in = ParameterIn.PATH) @PathVariable("map_index") Integer mapIndex,
        @Parameter(name = "UpdateTaskInstance", description = "Parameters of action") @Valid @RequestBody(required = false) UpdateTaskInstance updateTaskInstance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"execution_date\" : \"execution_date\", \"dag_run_id\" : \"dag_run_id\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id} : Updates the state of a task instance
     * Updates the state for single task instance. *New in version 2.5.0* 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @param updateTaskInstance Parameters of action (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "patchTaskInstance",
        summary = "Updates the state of a task instance",
        description = "Updates the state for single task instance. *New in version 2.5.0* ",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstanceReference.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskInstanceReference> patchTaskInstance(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "UpdateTaskInstance", description = "Parameters of action", required = true) @Valid @RequestBody UpdateTaskInstance updateTaskInstance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"execution_date\" : \"execution_date\", \"dag_run_id\" : \"dag_run_id\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /dags/{dag_id}/clearTaskInstances : Clear a set of task instances
     * Clears a set of task instances associated with the DAG for a specified date range. 
     *
     * @param dagId The DAG ID. (required)
     * @param clearTaskInstances Parameters of action (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "postClearTaskInstances",
        summary = "Clear a set of task instances",
        description = "Clears a set of task instances associated with the DAG for a specified date range. ",
        tags = { "DAG" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstanceReferenceCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/dags/{dag_id}/clearTaskInstances",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskInstanceReferenceCollection> postClearTaskInstances(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "ClearTaskInstances", description = "Parameters of action", required = true) @Valid @RequestBody ClearTaskInstances clearTaskInstances
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"task_instances\" : [ { \"execution_date\" : \"execution_date\", \"dag_run_id\" : \"dag_run_id\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\" }, { \"execution_date\" : \"execution_date\", \"dag_run_id\" : \"dag_run_id\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /dags/{dag_id}/dagRuns : Trigger a new DAG run
     *
     * @param dagId The DAG ID. (required)
     * @param daGRun  (required)
     * @return Success. (status code 200)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     *         or An existing resource conflicts with the request. (status code 409)
     */
    @Operation(
        operationId = "postDagRun",
        summary = "Trigger a new DAG run",
        tags = { "DAGRun" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAGRun.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "An existing resource conflicts with the request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/dags/{dag_id}/dagRuns",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DAGRun> postDagRun(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "DAGRun", description = "", required = true) @Valid @RequestBody DAGRun daGRun
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"note\" : \"note\", \"execution_date\" : \"2000-01-23T04:56:07.000+00:00\", \"external_trigger\" : true, \"conf\" : \"{}\", \"data_interval_start\" : \"2000-01-23T04:56:07.000+00:00\", \"run_type\" : \"backfill\", \"data_interval_end\" : \"2000-01-23T04:56:07.000+00:00\", \"last_scheduling_decision\" : \"2000-01-23T04:56:07.000+00:00\", \"dag_run_id\" : \"dag_run_id\", \"dag_id\" : \"dag_id\", \"logical_date\" : \"2000-01-23T04:56:07.000+00:00\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /dags/{dag_id}/updateTaskInstancesState : Set a state of task instances
     * Updates the state for multiple task instances simultaneously. 
     *
     * @param dagId The DAG ID. (required)
     * @param updateTaskInstancesState Parameters of action (required)
     * @return Success. (status code 200)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "postSetTaskInstancesState",
        summary = "Set a state of task instances",
        description = "Updates the state for multiple task instances simultaneously. ",
        tags = { "DAG" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstanceReferenceCollection.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/dags/{dag_id}/updateTaskInstancesState",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskInstanceReferenceCollection> postSetTaskInstancesState(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "UpdateTaskInstancesState", description = "Parameters of action", required = true) @Valid @RequestBody UpdateTaskInstancesState updateTaskInstancesState
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"task_instances\" : [ { \"execution_date\" : \"execution_date\", \"dag_run_id\" : \"dag_run_id\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\" }, { \"execution_date\" : \"execution_date\", \"dag_run_id\" : \"dag_run_id\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /dags/{dag_id}/dagRuns/{dag_run_id}/setNote : Update the DagRun note.
     * Update the manual user note of a DagRun.  *New in version 2.5.0* 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param setDagRunNote Parameters of set DagRun note. (required)
     * @return Success. (status code 200)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "setDagRunNote",
        summary = "Update the DagRun note.",
        description = "Update the manual user note of a DagRun.  *New in version 2.5.0* ",
        tags = { "DAGRun" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAGRun.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/setNote",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DAGRun> setDagRunNote(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "SetDagRunNote", description = "Parameters of set DagRun note.", required = true) @Valid @RequestBody SetDagRunNote setDagRunNote
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"note\" : \"note\", \"execution_date\" : \"2000-01-23T04:56:07.000+00:00\", \"external_trigger\" : true, \"conf\" : \"{}\", \"data_interval_start\" : \"2000-01-23T04:56:07.000+00:00\", \"run_type\" : \"backfill\", \"data_interval_end\" : \"2000-01-23T04:56:07.000+00:00\", \"last_scheduling_decision\" : \"2000-01-23T04:56:07.000+00:00\", \"dag_run_id\" : \"dag_run_id\", \"dag_id\" : \"dag_id\", \"logical_date\" : \"2000-01-23T04:56:07.000+00:00\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/setNote : Update the TaskInstance note.
     * Update the manual user note of a mapped Task Instance.  *New in version 2.5.0* 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @param mapIndex The map index. (required)
     * @param setTaskInstanceNote Parameters of set Task Instance note. (required)
     * @return Success. (status code 200)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "setMappedTaskInstanceNote",
        summary = "Update the TaskInstance note.",
        description = "Update the manual user note of a mapped Task Instance.  *New in version 2.5.0* ",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstance.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/setNote",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskInstance> setMappedTaskInstanceNote(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "map_index", description = "The map index.", required = true, in = ParameterIn.PATH) @PathVariable("map_index") Integer mapIndex,
        @Parameter(name = "SetTaskInstanceNote", description = "Parameters of set Task Instance note.", required = true) @Valid @RequestBody SetTaskInstanceNote setTaskInstanceNote
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"end_date\", \"note\" : \"note\", \"unixname\" : \"unixname\", \"rendered_fields\" : \"{}\", \"pid\" : 5, \"task_id\" : \"task_id\", \"operator\" : \"operator\", \"sla_miss\" : { \"notification_sent\" : true, \"email_sent\" : true, \"execution_date\" : \"execution_date\", \"description\" : \"description\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\", \"timestamp\" : \"timestamp\" }, \"duration\" : 0.8008281904610115, \"hostname\" : \"hostname\", \"dag_id\" : \"dag_id\", \"priority_weight\" : 2, \"queued_when\" : \"queued_when\", \"start_date\" : \"start_date\", \"triggerer_job\" : { \"end_date\" : \"end_date\", \"job_type\" : \"job_type\", \"unixname\" : \"unixname\", \"hostname\" : \"hostname\", \"latest_heartbeat\" : \"latest_heartbeat\", \"dag_id\" : \"dag_id\", \"id\" : 3, \"state\" : \"state\", \"executor_class\" : \"executor_class\", \"start_date\" : \"start_date\" }, \"execution_date\" : \"execution_date\", \"pool_slots\" : 5, \"pool\" : \"pool\", \"map_index\" : 6, \"max_tries\" : 1, \"trigger\" : { \"classpath\" : \"classpath\", \"kwargs\" : \"kwargs\", \"created_date\" : \"created_date\", \"id\" : 7, \"triggerer_id\" : 9 }, \"executor_config\" : \"executor_config\", \"dag_run_id\" : \"dag_run_id\", \"try_number\" : 2, \"queue\" : \"queue\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/setNote : Update the TaskInstance note.
     * Update the manual user note of a non-mapped Task Instance.  *New in version 2.5.0* 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param taskId The task ID. (required)
     * @param setTaskInstanceNote Parameters of set Task Instance note. (required)
     * @return Success. (status code 200)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "setTaskInstanceNote",
        summary = "Update the TaskInstance note.",
        description = "Update the manual user note of a non-mapped Task Instance.  *New in version 2.5.0* ",
        tags = { "TaskInstance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstance.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/setNote",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskInstance> setTaskInstanceNote(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "task_id", description = "The task ID.", required = true, in = ParameterIn.PATH) @PathVariable("task_id") String taskId,
        @Parameter(name = "SetTaskInstanceNote", description = "Parameters of set Task Instance note.", required = true) @Valid @RequestBody SetTaskInstanceNote setTaskInstanceNote
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"end_date\", \"note\" : \"note\", \"unixname\" : \"unixname\", \"rendered_fields\" : \"{}\", \"pid\" : 5, \"task_id\" : \"task_id\", \"operator\" : \"operator\", \"sla_miss\" : { \"notification_sent\" : true, \"email_sent\" : true, \"execution_date\" : \"execution_date\", \"description\" : \"description\", \"task_id\" : \"task_id\", \"dag_id\" : \"dag_id\", \"timestamp\" : \"timestamp\" }, \"duration\" : 0.8008281904610115, \"hostname\" : \"hostname\", \"dag_id\" : \"dag_id\", \"priority_weight\" : 2, \"queued_when\" : \"queued_when\", \"start_date\" : \"start_date\", \"triggerer_job\" : { \"end_date\" : \"end_date\", \"job_type\" : \"job_type\", \"unixname\" : \"unixname\", \"hostname\" : \"hostname\", \"latest_heartbeat\" : \"latest_heartbeat\", \"dag_id\" : \"dag_id\", \"id\" : 3, \"state\" : \"state\", \"executor_class\" : \"executor_class\", \"start_date\" : \"start_date\" }, \"execution_date\" : \"execution_date\", \"pool_slots\" : 5, \"pool\" : \"pool\", \"map_index\" : 6, \"max_tries\" : 1, \"trigger\" : { \"classpath\" : \"classpath\", \"kwargs\" : \"kwargs\", \"created_date\" : \"created_date\", \"id\" : 7, \"triggerer_id\" : 9 }, \"executor_config\" : \"executor_config\", \"dag_run_id\" : \"dag_run_id\", \"try_number\" : 2, \"queue\" : \"queue\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /dags/{dag_id}/dagRuns/{dag_run_id} : Modify a DAG run
     * Modify a DAG run.  *New in version 2.2.0* 
     *
     * @param dagId The DAG ID. (required)
     * @param dagRunId The DAG run ID. (required)
     * @param updateDagRunState  (required)
     * @return Success. (status code 200)
     *         or Client specified an invalid argument. (status code 400)
     *         or Request not authenticated due to missing, invalid, authentication info. (status code 401)
     *         or Client does not have sufficient permission. (status code 403)
     *         or A specified resource is not found. (status code 404)
     */
    @Operation(
        operationId = "updateDagRunState",
        summary = "Modify a DAG run",
        description = "Modify a DAG run.  *New in version 2.2.0* ",
        tags = { "DAGRun" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DAGRun.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client specified an invalid argument.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Request not authenticated due to missing, invalid, authentication info.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Client does not have sufficient permission.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "A specified resource is not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/dags/{dag_id}/dagRuns/{dag_run_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DAGRun> updateDagRunState(
        @Parameter(name = "dag_id", description = "The DAG ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_id") String dagId,
        @Parameter(name = "dag_run_id", description = "The DAG run ID.", required = true, in = ParameterIn.PATH) @PathVariable("dag_run_id") String dagRunId,
        @Parameter(name = "UpdateDagRunState", description = "", required = true) @Valid @RequestBody UpdateDagRunState updateDagRunState
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"note\" : \"note\", \"execution_date\" : \"2000-01-23T04:56:07.000+00:00\", \"external_trigger\" : true, \"conf\" : \"{}\", \"data_interval_start\" : \"2000-01-23T04:56:07.000+00:00\", \"run_type\" : \"backfill\", \"data_interval_end\" : \"2000-01-23T04:56:07.000+00:00\", \"last_scheduling_decision\" : \"2000-01-23T04:56:07.000+00:00\", \"dag_run_id\" : \"dag_run_id\", \"dag_id\" : \"dag_id\", \"logical_date\" : \"2000-01-23T04:56:07.000+00:00\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
