/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ApiError;
import org.openapitools.model.CancellationCostError;
import org.openapitools.model.CancellationRequest;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.Location;
import java.time.OffsetDateTime;
import org.openapitools.model.RatingRequest;
import org.openapitools.model.Ride;
import org.openapitools.model.RideDetail;
import org.openapitools.model.RideReceipt;
import org.openapitools.model.RideRequest;
import org.openapitools.model.RideRequestError;
import org.openapitools.model.RidesResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:53.578762-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "User", description = "Endpoints that require a user context")
public interface RidesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /rides/{id}/cancel : Cancel a ongoing requested ride
     * Cancel a ongoing ride which was requested earlier by providing the ride id. 
     *
     * @param id The ID of the ride (required)
     * @param request  (optional)
     * @return Successfully canceled the ride (status code 204)
     *         or Cancellation token required  * &#x60;cancel_confirmation_required&#x60;: a cancelation fee applies which the user must accept  * &#x60;invalid_cancel_confirmation&#x60;: provided token was invalid or expired  (status code 400)
     *         or User or client does not have permission to complete this request (status code 403)
     *         or No ride found with provided ride ID (status code 404)
     *         or You cannot cancel this ride (status code 409)
     */
    @Operation(
        operationId = "cancelRide",
        summary = "Cancel a ongoing requested ride",
        description = "Cancel a ongoing ride which was requested earlier by providing the ride id. ",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully canceled the ride"),
            @ApiResponse(responseCode = "400", description = "Cancellation token required  * `cancel_confirmation_required`: a cancelation fee applies which the user must accept  * `invalid_cancel_confirmation`: provided token was invalid or expired ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CancellationCostError.class))
            }),
            @ApiResponse(responseCode = "403", description = "User or client does not have permission to complete this request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "No ride found with provided ride ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "You cannot cancel this ride", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "User Authentication", scopes={ "rides.request" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rides/{id}/cancel",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> cancelRide(
        @Parameter(name = "id", description = "The ID of the ride", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "request", description = "") @Valid @RequestBody(required = false) CancellationRequest request
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rides/{id} : Get the ride detail of a given ride ID
     * Get the status of a ride along with information about the driver, vehicle and price of a given ride ID 
     *
     * @param id The ID of the ride (required)
     * @return Detailed ride information including ride status, driver information, passenger information, vehicle information, location information and price  (status code 200)
     *         or User or client does not have permission to complete this request (status code 403)
     *         or No ride found with provided ride ID (status code 404)
     */
    @Operation(
        operationId = "getRide",
        summary = "Get the ride detail of a given ride ID",
        description = "Get the status of a ride along with information about the driver, vehicle and price of a given ride ID ",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detailed ride information including ride status, driver information, passenger information, vehicle information, location information and price ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RideDetail.class))
            }),
            @ApiResponse(responseCode = "403", description = "User or client does not have permission to complete this request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "No ride found with provided ride ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "User Authentication", scopes={ "rides.read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rides/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RideDetail> getRide(
        @Parameter(name = "id", description = "The ID of the ride", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"beacon_color\" : \"#FFFFFF\", \"destination\" : { \"address\" : \"987 Second St, Anytown, CA\", \"lat\" : 36.9453452, \"lng\" : -123.8642521 }, \"distance_miles\" : 16.2, \"driver\" : { \"first_name\" : \"Joe\", \"image_url\" : \"http://example.com/lyft.png\", \"phone_number\" : \"+15554445111\", \"rating\" : \"4.9\" }, \"dropoff\" : { \"address\" : \"987 Second St, Anytown, CA\", \"lat\" : 36.9453452, \"lng\" : -123.8642521, \"time\" : \"2015-09-24T23:28:25+00:00\" }, \"duration_seconds\" : 1620, \"line_items\" : [ { \"amount\" : 500, \"currency\" : \"USD\", \"type\" : \"Ride\" }, { \"amount\" : 250, \"currency\" : \"USD\", \"type\" : \"Prime Time\" }, { \"amount\" : 155, \"currency\" : \"USD\", \"type\" : \"Service fee\" } ], \"location\" : { \"address\" : \"987 Second St, Anytown, CA\", \"lat\" : 36.9453452, \"lng\" : -123.8642521 }, \"origin\" : { \"address\" : \"123 Main St, Anytown, CA\", \"lat\" : 36.9442175, \"lng\" : -123.8679133 }, \"passenger\" : { \"first_name\" : \"Jane\", \"phone_number\" : \"+15554445000\", \"user_id\" : \"776630198662493392\" }, \"pickup\" : { \"address\" : \"123 Main St, Anytown, CA\", \"lat\" : 36.9442175, \"lng\" : -123.8679133, \"time\" : \"2015-09-24T23:27:25+00:00\" }, \"price\" : { \"amount\" : 905, \"currency\" : \"USD\", \"description\" : \"Total ride price\" }, \"primetime_percentage\" : \"50%\", \"requested_at\" : \"2015-09-24T23:26:25+00:00\", \"ride_id\" : 123456789, \"ride_profile\" : \"personal\", \"ride_type\" : \"lyft\", \"status\" : \"droppedOff\", \"vehicle\" : { \"color\" : \"black\", \"image_url\" : \"http://example.com/lyft.png\", \"license_plate\" : \"AAAAAAA\", \"make\" : \"Audi\", \"model\" : \"A4\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rides/{id}/receipt : Get the receipt of the rides.
     * Get the receipt information of a processed ride by providing the ride id. Receipts will only be available to view once the payment has been processed. In the case of canceled ride, cancellation penalty is included if applicable. 
     *
     * @param id The ID of the ride (required)
     * @return Detailed ride receipt information including cancel penalty if applicable. (status code 200)
     *         or User or client does not have permission to complete this request (status code 403)
     *         or No ride receipt found with provided ride ID (status code 404)
     */
    @Operation(
        operationId = "getRideReceipt",
        summary = "Get the receipt of the rides.",
        description = "Get the receipt information of a processed ride by providing the ride id. Receipts will only be available to view once the payment has been processed. In the case of canceled ride, cancellation penalty is included if applicable. ",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detailed ride receipt information including cancel penalty if applicable.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RideReceipt.class))
            }),
            @ApiResponse(responseCode = "403", description = "User or client does not have permission to complete this request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "No ride receipt found with provided ride ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "User Authentication", scopes={ "rides.read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rides/{id}/receipt",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RideReceipt> getRideReceipt(
        @Parameter(name = "id", description = "The ID of the ride", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"charges\" : [ { \"amount\" : 500, \"currency\" : \"USD\", \"payment_method\" : \"Card\" }, { \"amount\" : 405, \"currency\" : \"USD\", \"payment_method\" : \"Lyft Credit\" } ], \"line_items\" : [ { \"amount\" : 500, \"currency\" : \"USD\", \"type\" : \"Ride\" }, { \"amount\" : 250, \"currency\" : \"USD\", \"type\" : \"Prime Time\" }, { \"amount\" : 155, \"currency\" : \"USD\", \"type\" : \"Service fee\" } ], \"price\" : { \"amount\" : 905, \"currency\" : \"USD\", \"description\" : \"Total ride price\" }, \"requested_at\" : \"2015-09-24T23:26:25+00:00\", \"ride_id\" : 123456789, \"ride_profile\" : \"personal\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rides : List rides
     * Get a list of past &amp; current rides for this passenger. 
     *
     * @param startTime Restrict to rides starting after this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00  (required)
     * @param endTime Restrict to rides starting before this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00  (optional)
     * @param limit The maximum number of rides to return. The default limit is 10 if not specified. The maximum allowed value is 50, an integer greater that 50 will return at most 50 results.  (optional, default to 10)
     * @return An object with an array of up to &#x60;limit&#x60; rides taken by the user between &#x60;start_time&#x60; and &#x60;end_time&#x60;.  (status code 200)
     *         or A validation error occurred (status code 400)
     */
    @Operation(
        operationId = "getRides",
        summary = "List rides",
        description = "Get a list of past & current rides for this passenger. ",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An object with an array of up to `limit` rides taken by the user between `start_time` and `end_time`. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RidesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "A validation error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "User Authentication", scopes={ "rides.read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rides",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RidesResponse> getRides(
        @NotNull @Parameter(name = "start_time", description = "Restrict to rides starting after this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00 ", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "start_time", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startTime,
        @Parameter(name = "end_time", description = "Restrict to rides starting before this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00 ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "end_time", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endTime,
        @Min(0) @Max(50) @Parameter(name = "limit", description = "The maximum number of rides to return. The default limit is 10 if not specified. The maximum allowed value is 50, an integer greater that 50 will return at most 50 results. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ride_history\" : [ { \"beacon_color\" : \"#FFFFFF\", \"destination\" : { \"address\" : \"987 Second St, Anytown, CA\", \"lat\" : 36.9453452, \"lng\" : -123.8642521 }, \"distance_miles\" : 16.2, \"driver\" : { \"first_name\" : \"Joe\", \"image_url\" : \"http://example.com/lyft.png\", \"phone_number\" : \"+15554445111\", \"rating\" : \"4.9\" }, \"dropoff\" : { \"address\" : \"987 Second St, Anytown, CA\", \"lat\" : 36.9453452, \"lng\" : -123.8642521, \"time\" : \"2015-09-24T23:28:25+00:00\" }, \"duration_seconds\" : 1620, \"line_items\" : [ { \"amount\" : 500, \"currency\" : \"USD\", \"type\" : \"Ride\" }, { \"amount\" : 250, \"currency\" : \"USD\", \"type\" : \"Prime Time\" }, { \"amount\" : 155, \"currency\" : \"USD\", \"type\" : \"Service fee\" } ], \"location\" : { \"address\" : \"987 Second St, Anytown, CA\", \"lat\" : 36.9453452, \"lng\" : -123.8642521 }, \"origin\" : { \"address\" : \"123 Main St, Anytown, CA\", \"lat\" : 36.9442175, \"lng\" : -123.8679133 }, \"passenger\" : { \"first_name\" : \"Jane\", \"phone_number\" : \"+15554445000\", \"user_id\" : \"776630198662493392\" }, \"pickup\" : { \"address\" : \"123 Main St, Anytown, CA\", \"lat\" : 36.9442175, \"lng\" : -123.8679133, \"time\" : \"2015-09-24T23:27:25+00:00\" }, \"price\" : { \"amount\" : 905, \"currency\" : \"USD\", \"description\" : \"Total ride price\" }, \"primetime_percentage\" : \"50%\", \"requested_at\" : \"2015-09-24T23:26:25+00:00\", \"ride_id\" : 123456789, \"ride_profile\" : \"personal\", \"ride_type\" : \"lyft\", \"status\" : \"droppedOff\", \"vehicle\" : { \"color\" : \"black\", \"image_url\" : \"http://example.com/lyft.png\", \"license_plate\" : \"AAAAAAA\", \"make\" : \"Audi\", \"model\" : \"A4\" } }, { \"beacon_color\" : \"#FFFFFF\", \"destination\" : { \"address\" : \"987 Second St, Anytown, CA\", \"lat\" : 36.9453452, \"lng\" : -123.8642521 }, \"distance_miles\" : 16.2, \"driver\" : { \"first_name\" : \"Joe\", \"image_url\" : \"http://example.com/lyft.png\", \"phone_number\" : \"+15554445111\", \"rating\" : \"4.9\" }, \"dropoff\" : { \"address\" : \"987 Second St, Anytown, CA\", \"lat\" : 36.9453452, \"lng\" : -123.8642521, \"time\" : \"2015-09-24T23:28:25+00:00\" }, \"duration_seconds\" : 1620, \"line_items\" : [ { \"amount\" : 500, \"currency\" : \"USD\", \"type\" : \"Ride\" }, { \"amount\" : 250, \"currency\" : \"USD\", \"type\" : \"Prime Time\" }, { \"amount\" : 155, \"currency\" : \"USD\", \"type\" : \"Service fee\" } ], \"location\" : { \"address\" : \"987 Second St, Anytown, CA\", \"lat\" : 36.9453452, \"lng\" : -123.8642521 }, \"origin\" : { \"address\" : \"123 Main St, Anytown, CA\", \"lat\" : 36.9442175, \"lng\" : -123.8679133 }, \"passenger\" : { \"first_name\" : \"Jane\", \"phone_number\" : \"+15554445000\", \"user_id\" : \"776630198662493392\" }, \"pickup\" : { \"address\" : \"123 Main St, Anytown, CA\", \"lat\" : 36.9442175, \"lng\" : -123.8679133, \"time\" : \"2015-09-24T23:27:25+00:00\" }, \"price\" : { \"amount\" : 905, \"currency\" : \"USD\", \"description\" : \"Total ride price\" }, \"primetime_percentage\" : \"50%\", \"requested_at\" : \"2015-09-24T23:26:25+00:00\", \"ride_id\" : 123456789, \"ride_profile\" : \"personal\", \"ride_type\" : \"lyft\", \"status\" : \"droppedOff\", \"vehicle\" : { \"color\" : \"black\", \"image_url\" : \"http://example.com/lyft.png\", \"license_plate\" : \"AAAAAAA\", \"make\" : \"Audi\", \"model\" : \"A4\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rides : Request a Lyft
     * Request a Lyft come pick you up at the given location. 
     *
     * @param request Ride request information (required)
     * @return An object with high level ride information. Use &#x60;GET /v1/rides/{id}&#x60; for more details. (status code 201)
     *         or The &#39;error&#39; field can be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: origin is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at origin  * &#x60;primetime_confirmation_required&#x60;: user must accept primetime. A primetime confirmation token and details will be included in the response  * &#x60;invalid_primetime_confirmation&#x60;: supplied token is invalid or expired  * &#x60;destination_prohibited&#x60;: Lyft is not allowed to drop off at that destination (e.g. some airports).  User-displayable details in the &#39;error_description&#39; field  * &#x60;client_error&#x60;: an uncategorized error. Details in the &#39;error_description&#39; field  (status code 400)
     *         or User or client does not have permission to complete this request. Specific errors include:  * &#x60;user_payment_required&#x60;: The user does not have a valid payment method on file.  They must use the Lyft app to add or update one.  * &#x60;account_disabled&#x60;: The user&#39;s account has been suspended, and they must contact Lyft support.  * &#x60;user_in_driver_mode&#x60;: The user is logged in as a driver and can&#39;t request rides until they log out  * &#x60;verified_phone_required&#x60;: The user has not provided or verified their phone number.  They can add one in the Lyft app  (status code 403)
     *         or The &#39;error&#39; field will be one of the following:  * &#x60;no_drivers_available&#x60;: No drivers are available right now  * &#x60;user_already_in_ride&#x60;: User cannot request a ride while in a ride  (status code 409)
     */
    @Operation(
        operationId = "newRide",
        summary = "Request a Lyft",
        description = "Request a Lyft come pick you up at the given location. ",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "An object with high level ride information. Use `GET /v1/rides/{id}` for more details.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RideRequest.class))
            }),
            @ApiResponse(responseCode = "400", description = "The 'error' field can be one of the following:  * `bad_parameter`: A validation error occurred  * `no_service_in_area`: origin is not within a Lyft service area  * `ridetype_unavailable_in_region`: ridetype not supported at origin  * `primetime_confirmation_required`: user must accept primetime. A primetime confirmation token and details will be included in the response  * `invalid_primetime_confirmation`: supplied token is invalid or expired  * `destination_prohibited`: Lyft is not allowed to drop off at that destination (e.g. some airports).  User-displayable details in the 'error_description' field  * `client_error`: an uncategorized error. Details in the 'error_description' field ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RideRequestError.class))
            }),
            @ApiResponse(responseCode = "403", description = "User or client does not have permission to complete this request. Specific errors include:  * `user_payment_required`: The user does not have a valid payment method on file.  They must use the Lyft app to add or update one.  * `account_disabled`: The user's account has been suspended, and they must contact Lyft support.  * `user_in_driver_mode`: The user is logged in as a driver and can't request rides until they log out  * `verified_phone_required`: The user has not provided or verified their phone number.  They can add one in the Lyft app ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "The 'error' field will be one of the following:  * `no_drivers_available`: No drivers are available right now  * `user_already_in_ride`: User cannot request a ride while in a ride ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "User Authentication", scopes={ "rides.request" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rides",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RideRequest> newRide(
        @Parameter(name = "request", description = "Ride request information", required = true) @Valid @RequestBody Ride request
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"destination\" : { \"address\" : \"123 Main St, Anytown, CA\", \"lat\" : 36.9442175, \"lng\" : -123.8679133 }, \"origin\" : { \"address\" : \"123 Main St, Anytown, CA\", \"lat\" : 36.9442175, \"lng\" : -123.8679133 }, \"passenger\" : { \"first_name\" : \"Jane\", \"image_url\" : \"https://public-api.lyft.com/static/images/user.png\", \"rating\" : 4.9, \"user_id\" : \"776630198662493392\" }, \"ride_id\" : 123456789, \"status\" : \"pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rides/{id}/destination : Update the destination of the ride
     * Add or update the ride&#39;s destination. Note that the ride must still be active (not droppedOff or canceled), and that destinations on Lyft Line rides can not be changed. 
     *
     * @param id The ID of the ride (required)
     * @param request The coordinates and optional address of the destination (required)
     * @return Successfully updated the destination. Returns the new destination. (status code 200)
     *         or The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;invalid_destination&#x60;: Destination is generally invalid (eg. not in a Lyft service area)  * &#x60;destination_prohibited&#x60;: Lyft drop-offs are not permitted at this location (eg. some airports).  The &#39;error_description&#39; field will contain an explaination suitable to display to the user.  * &#x60;ride_is_lyft_line&#x60;: Cannot change the destination on Line rides  * &#x60;ride_is_finished&#x60;: Ride has already been completed  (status code 400)
     *         or User or client does not have permission to complete this request (&#x60;ride_does_not_belong_to_user&#x60;)  (status code 403)
     *         or No ride found with provided ride ID (status code 404)
     */
    @Operation(
        operationId = "setRideDestination",
        summary = "Update the destination of the ride",
        description = "Add or update the ride's destination. Note that the ride must still be active (not droppedOff or canceled), and that destinations on Lyft Line rides can not be changed. ",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully updated the destination. Returns the new destination.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Location.class))
            }),
            @ApiResponse(responseCode = "400", description = "The 'error' field will be one of the following:  * `bad_parameter`: A validation error occurred  * `invalid_destination`: Destination is generally invalid (eg. not in a Lyft service area)  * `destination_prohibited`: Lyft drop-offs are not permitted at this location (eg. some airports).  The 'error_description' field will contain an explaination suitable to display to the user.  * `ride_is_lyft_line`: Cannot change the destination on Line rides  * `ride_is_finished`: Ride has already been completed ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "403", description = "User or client does not have permission to complete this request (`ride_does_not_belong_to_user`) ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "No ride found with provided ride ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "User Authentication", scopes={ "rides.request" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rides/{id}/destination",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Location> setRideDestination(
        @Parameter(name = "id", description = "The ID of the ride", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "request", description = "The coordinates and optional address of the destination", required = true) @Valid @RequestBody Location request
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rides/{id}/rating : Add the passenger&#39;s rating, feedback, and tip
     * Add the passenger&#39;s 1 to 5 star rating of the ride, optional written feedback, and optional tip amount in minor units and currency. The ride must already be dropped off, and ratings must be given within 24 hours of drop off. For purposes of display, 5 is considered the default rating. When this endpoint is successfully called, payment processing will begin. 
     *
     * @param id The ID of the ride (required)
     * @param request The rating and optional feedback (required)
     * @return Successfully added the rating (status code 204)
     *         or The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;user_cannot_rate_this_ride&#x60;: Rides can only be rated once, within 24 hours of drop-off, and before  the user starts another ride  * &#x60;tip_too_large&#x60;: tip amount is too large for this ride  * &#x60;tip_currency_not_accepted&#x60;: That tip currency is not accepted  (status code 400)
     *         or The &#39;error&#39; field will be:  * &#x60;ride_not_finished&#x60;: Ride is still in progress (not yet in the droppedOff status)  (status code 409)
     */
    @Operation(
        operationId = "setRideRating",
        summary = "Add the passenger's rating, feedback, and tip",
        description = "Add the passenger's 1 to 5 star rating of the ride, optional written feedback, and optional tip amount in minor units and currency. The ride must already be dropped off, and ratings must be given within 24 hours of drop off. For purposes of display, 5 is considered the default rating. When this endpoint is successfully called, payment processing will begin. ",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully added the rating"),
            @ApiResponse(responseCode = "400", description = "The 'error' field will be one of the following:  * `bad_parameter`: A validation error occurred  * `user_cannot_rate_this_ride`: Rides can only be rated once, within 24 hours of drop-off, and before  the user starts another ride  * `tip_too_large`: tip amount is too large for this ride  * `tip_currency_not_accepted`: That tip currency is not accepted ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "The 'error' field will be:  * `ride_not_finished`: Ride is still in progress (not yet in the droppedOff status) ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "User Authentication", scopes={ "rides.request" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/rides/{id}/rating",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> setRideRating(
        @Parameter(name = "id", description = "The ID of the ride", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "request", description = "The rating and optional feedback", required = true) @Valid @RequestBody RatingRequest request
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
