/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ApiError;
import org.openapitools.model.SandboxDriverAvailability;
import org.openapitools.model.SandboxPrimetime;
import org.openapitools.model.SandboxRideStatus;
import org.openapitools.model.SandboxRideType;
import org.openapitools.model.SandboxRideUpdate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:53.578762-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Sandbox", description = "Endpoints that manipulate the Lyft sandbox")
public interface SandboxApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /sandbox/primetime : Preset Prime Time percentage
     * Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. 
     *
     * @param request Prime Time to be preset in the region surrounding the lat, lng (required)
     * @return Successfully applied Prime Time in sandbox (status code 204)
     *         or Validation error occurred (status code 400)
     */
    @Operation(
        operationId = "setPrimeTime",
        summary = "Preset Prime Time percentage",
        description = "Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. ",
        tags = { "Sandbox" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully applied Prime Time in sandbox"),
            @ApiResponse(responseCode = "400", description = "Validation error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Client Authentication", scopes={ "public" }),
            @SecurityRequirement(name = "User Authentication", scopes={ "public" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sandbox/primetime",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> setPrimeTime(
        @Parameter(name = "request", description = "Prime Time to be preset in the region surrounding the lat, lng", required = true) @Valid @RequestBody SandboxPrimetime request
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sandbox/rides/{id} : Propagate ride through ride status
     * Propagate a sandbox-ride through various ride status 
     *
     * @param id The ID of the ride (required)
     * @param request status to propagate the ride into (required)
     * @return An object with the Ride ID and the new status (status code 200)
     *         or Validation error occurred (status code 400)
     *         or User or client does not have permission to complete this request (status code 403)
     */
    @Operation(
        operationId = "setRideStatus",
        summary = "Propagate ride through ride status",
        description = "Propagate a sandbox-ride through various ride status ",
        tags = { "Sandbox" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An object with the Ride ID and the new status", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SandboxRideUpdate.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "403", description = "User or client does not have permission to complete this request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "User Authentication", scopes={ "rides.request" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sandbox/rides/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SandboxRideUpdate> setRideStatus(
        @Parameter(name = "id", description = "The ID of the ride", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "request", description = "status to propagate the ride into", required = true) @Valid @RequestBody SandboxRideStatus request
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ride_id\" : 123456789, \"status\" : \"accepted\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sandbox/ridetypes/{ride_type} : Driver availability for processing ride request
     * Set driver availability for the provided ride_type in the city/region surrounding the specified location 
     *
     * @param rideType  (required)
     * @param request Driver availability to be preset in the region surrounding the lat, lng (required)
     * @return Successfully set driver availability in sandbox (status code 204)
     *         or Validation error occurred (status code 400)
     *         or ride_type provided in the path is not supported in the current area (status code 404)
     */
    @Operation(
        operationId = "setRideTypeAvailability",
        summary = "Driver availability for processing ride request",
        description = "Set driver availability for the provided ride_type in the city/region surrounding the specified location ",
        tags = { "Sandbox" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully set driver availability in sandbox"),
            @ApiResponse(responseCode = "400", description = "Validation error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "ride_type provided in the path is not supported in the current area", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Client Authentication", scopes={ "public" }),
            @SecurityRequirement(name = "User Authentication", scopes={ "public" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sandbox/ridetypes/{ride_type}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> setRideTypeAvailability(
        @Parameter(name = "ride_type", description = "", required = true, in = ParameterIn.PATH) @PathVariable("ride_type") String rideType,
        @Parameter(name = "request", description = "Driver availability to be preset in the region surrounding the lat, lng", required = true) @Valid @RequestBody SandboxDriverAvailability request
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sandbox/ridetypes : Preset types of rides for sandbox
     * The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios 
     *
     * @param request Ridetypes to be preset in the region surrounding the lat, lng (required)
     * @return An object listing the ridetypes at a given location (status code 200)
     *         or Validation error occurred (status code 400)
     */
    @Operation(
        operationId = "setRideTypes",
        summary = "Preset types of rides for sandbox",
        description = "The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios ",
        tags = { "Sandbox" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An object listing the ridetypes at a given location", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SandboxRideType.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Client Authentication", scopes={ "public" }),
            @SecurityRequirement(name = "User Authentication", scopes={ "public" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sandbox/ridetypes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SandboxRideType> setRideTypes(
        @Parameter(name = "request", description = "Ridetypes to be preset in the region surrounding the lat, lng", required = true) @Valid @RequestBody SandboxRideType request
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lat\" : 37.7833, \"lng\" : -122.4167, \"ride_types\" : [ \"lyft\", \"lyft_line\", \"lyft_plus\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
