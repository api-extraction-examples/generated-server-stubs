/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ApiError;
import org.openapitools.model.NearbyDriversResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:53.578762-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Public", description = "Endpoints that do not require a user")
public interface DriversApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /drivers : Available drivers nearby
     * The drivers endpoint returns a list of nearby drivers&#39; lat and lng at a given location. 
     *
     * @param lat Latitude of a location (required)
     * @param lng Longitude of a location (required)
     * @return An object with an array of available drivers sorted by eta for the given location (status code 200)
     *         or A validation error occurred (status code 400)
     */
    @Operation(
        operationId = "getDrivers",
        summary = "Available drivers nearby",
        description = "The drivers endpoint returns a list of nearby drivers' lat and lng at a given location. ",
        tags = { "Public" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An object with an array of available drivers sorted by eta for the given location", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NearbyDriversResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "A validation error occurred", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Client Authentication", scopes={ "public" }),
            @SecurityRequirement(name = "User Authentication", scopes={ "public" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/drivers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<NearbyDriversResponse> getDrivers(
        @NotNull @Parameter(name = "lat", description = "Latitude of a location", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lat", required = true) Double lat,
        @NotNull @Parameter(name = "lng", description = "Longitude of a location", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "lng", required = true) Double lng
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nearby_drivers\" : [ { \"drivers\" : [ { \"locations\" : [ { \"lat\" : 36.9442175, \"lng\" : -123.8679133 }, { \"lat\" : 36.9442175, \"lng\" : -123.8679133 } ] }, { \"locations\" : [ { \"lat\" : 36.9442175, \"lng\" : -123.8679133 }, { \"lat\" : 36.9442175, \"lng\" : -123.8679133 } ] } ], \"ride_type\" : \"ride_type\" }, { \"drivers\" : [ { \"locations\" : [ { \"lat\" : 36.9442175, \"lng\" : -123.8679133 }, { \"lat\" : 36.9442175, \"lng\" : -123.8679133 } ] }, { \"locations\" : [ { \"lat\" : 36.9442175, \"lng\" : -123.8679133 }, { \"lat\" : 36.9442175, \"lng\" : -123.8679133 } ] } ], \"ride_type\" : \"ride_type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
