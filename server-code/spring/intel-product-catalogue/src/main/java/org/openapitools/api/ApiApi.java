/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CompleteCodenameLsit;
import org.openapitools.model.DetailedOrderingLevelInfo;
import org.openapitools.model.DetailedProductInformation;
import org.openapitools.model.ProductListingLevelInfo;
import org.openapitools.model.UnsuccessfulOperation;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:15.060829-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "products", description = "Product details.")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/products/get-codename : 5. Get list of codename details for Intel products.
     * Use this to get codename details for Intel products. No pagination supported.
     *
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @return successful operation (status code 200)
     *         or unsuccessful operation (status code 500)
     */
    @Operation(
        operationId = "getCodeName",
        summary = "5. Get list of codename details for Intel products.",
        description = "Use this to get codename details for Intel products. No pagination supported.",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = CompleteCodenameLsit.class))
            }),
            @ApiResponse(responseCode = "500", description = "unsuccessful operation", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = UnsuccessfulOperation.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BasicAuth"),
            @SecurityRequirement(name = "ClientId")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/products/get-codename",
        produces = { "*/*" }
    )
    
    default ResponseEntity<CompleteCodenameLsit> getCodeName(
        @NotNull @Parameter(name = "locale_geo_id", description = "Locale and Geo code used to get localised data.<br/><br/>", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "locale_geo_id", required = true) String localeGeoId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"result\" : [ { \"CodeNameId\" : \"37567\", \"CodeNameText\" : \"Products formerly Tunnel Creek\", \"CodeNameType\" : \"CODENAME\", \"UrlText\" : \"Tunnel-Creek\" }, { \"CodeNameId\" : \"37567\", \"CodeNameText\" : \"Products formerly Tunnel Creek\", \"CodeNameType\" : \"CODENAME\", \"UrlText\" : \"Tunnel-Creek\" } ], \"total_count\" : 909, \"status\" : \"success\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/products/get-products-info : 2. Get complete product info with product id.
     * Use this to get complete product info. No pagination supported.
     *
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param productId Product id&#39;s that needs to be filtered. Only max of 40 products are supported now. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values.&lt;br/&gt;&lt;br/&gt;Example: [\&quot;223\&quot;,\&quot;224\&quot;] (required)
     * @param includeReference If send \&quot;true\&quot;, this will fetch variant/compatible info into result set. Default is false. (optional)
     * @return Successful operation. (status code 200)
     *         or unsuccessful operation (status code 500)
     */
    @Operation(
        operationId = "getProductInfo",
        summary = "2. Get complete product info with product id.",
        description = "Use this to get complete product info. No pagination supported.",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation.", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DetailedProductInformation.class))
            }),
            @ApiResponse(responseCode = "500", description = "unsuccessful operation", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = UnsuccessfulOperation.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BasicAuth"),
            @SecurityRequirement(name = "ClientId")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/products/get-products-info",
        produces = { "*/*" }
    )
    
    default ResponseEntity<DetailedProductInformation> getProductInfo(
        @NotNull @Parameter(name = "locale_geo_id", description = "Locale and Geo code used to get localised data.<br/><br/>", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "locale_geo_id", required = true) String localeGeoId,
        @NotNull @Parameter(name = "product_id", description = "Product id's that needs to be filtered. Only max of 40 products are supported now. Values must be enclosed in [ square brackets ] and each value must be in \"double quotes\". Use comma to add multiple values.<br/><br/>Example: [\"223\",\"224\"]", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "product_id", required = true) String productId,
        @Parameter(name = "include_reference", description = "If send \"true\", this will fetch variant/compatible info into result set. Default is false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_reference", required = false) String includeReference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"result\" : [ null, null ], \"total_count\" : 10, \"status\" : \"success\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/products/get-products : 1. Find products by product id or category id
     * Use this to get basic details of products with pagination. Can be used to generate listing page for products.
     *
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @param categoryId Filter products based on one or multiple category id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;873\&quot;]&lt;br/&gt;&lt;br/&gt;Categories Available:&lt;br/&gt; Processors &#x3D; 873, Server Products &#x3D; 1201, Mini PC&#39;s &#x3D; 98414, Wireless Networking &#x3D; 59485, Ethernet Products &#x3D; 36773, Fabric products &#x3D; 70021, Memory and Storage &#x3D; 35125, Chipsets &#x3D; 53, Graphics Drivers &#x3D; 80939 &lt;br/&gt;&lt;br/&gt; (optional)
     * @param productId Filter products based on one or multiple product id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;123003\&quot;]&lt;br/&gt;&lt;br/&gt; (optional)
     * @param highlights Specification values which needs to be pulled from product data. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;CoreCount\&quot;, \&quot;StatusCodeText\&quot;]&lt;br/&gt;&lt;br/&gt; (optional)
     * @param sort Indicates sorting fields. Accepts array of objects in format like: [{\&quot;field\&quot;:\&quot;name\&quot;,\&quot;order\&quot;:\&quot;ASC\&quot;}].&lt;br/&gt;&lt;br/&gt;Any specification that we get from get-product-info can be used to sort result. Other generic sort field is \&quot;name\&quot;.&lt;br/&gt;&lt;br/&gt; (optional)
     * @param filters Allows to filter data.&lt;br/&gt;&lt;br/&gt;Format of filter: [{\&quot;type\&quot;:\&quot;specvalue\&quot;,\&quot;name\&quot;:\&quot;ThreadCount\&quot;,\&quot;gteq\&quot;:\&quot;4\&quot;}]&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Available operators are:&lt;/b&gt; \&quot;eq\&quot;: equal to, \&quot;neq\&quot;: not equal to, \&quot;lteq\&quot;: less than or equal to, \&quot;gteq\&quot;: greater than or equal to, \&quot;swc\&quot;: starts with characters, \&quot;nswc\&quot;: not starting with characters, \&quot;cts\&quot;: contains, \&quot;ncts\&quot;: not contains&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Conditions:&lt;/b&gt; By default all objects works on an AND condition. But inside an object we have the capability to put an \&quot;OR\&quot; or \&quot;AND\&quot; condition.&lt;br/&gt;Example conditions: [{\&quot;type\&quot;:\&quot;specvalue\&quot;,\&quot;name\&quot;:\&quot;ThreadCount\&quot;,\&quot;ncts\&quot;:\&quot;4,5\&quot;,\&quot;cond\&quot;:\&quot;AND\&quot;}]&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; (optional)
     * @param perPage Filter number of products in response to desired size. (optional)
     * @param pageNo Indicates page number for pagination of results. (optional)
     * @return successful operation (status code 200)
     *         or unsuccessful operation (status code 500)
     */
    @Operation(
        operationId = "getProductList",
        summary = "1. Find products by product id or category id",
        description = "Use this to get basic details of products with pagination. Can be used to generate listing page for products.",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ProductListingLevelInfo.class))
            }),
            @ApiResponse(responseCode = "500", description = "unsuccessful operation", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = UnsuccessfulOperation.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BasicAuth"),
            @SecurityRequirement(name = "ClientId")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/products/get-products",
        produces = { "*/*" }
    )
    
    default ResponseEntity<ProductListingLevelInfo> getProductList(
        @NotNull @Parameter(name = "locale_geo_id", description = "Locale and Geo code used to get localised data.<br/><br/>", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "locale_geo_id", required = true) String localeGeoId,
        @Parameter(name = "category_id", description = "Filter products based on one or multiple category id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \"double quotes\". Use comma to add multiple values. <br/><br/>Example: [\"873\"]<br/><br/>Categories Available:<br/> Processors = 873, Server Products = 1201, Mini PC's = 98414, Wireless Networking = 59485, Ethernet Products = 36773, Fabric products = 70021, Memory and Storage = 35125, Chipsets = 53, Graphics Drivers = 80939 <br/><br/>", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category_id", required = false) String categoryId,
        @Parameter(name = "product_id", description = "Filter products based on one or multiple product id. Either category id or product id is mandatory for any request. Values must be enclosed in [ square brackets ] and each value must be in \"double quotes\". Use comma to add multiple values. <br/><br/>Example: [\"123003\"]<br/><br/>", in = ParameterIn.QUERY) @Valid @RequestParam(value = "product_id", required = false) String productId,
        @Parameter(name = "highlights", description = "Specification values which needs to be pulled from product data. Values must be enclosed in [ square brackets ] and each value must be in \"double quotes\". Use comma to add multiple values. <br/><br/>Example: [\"CoreCount\", \"StatusCodeText\"]<br/><br/>", in = ParameterIn.QUERY) @Valid @RequestParam(value = "highlights", required = false) String highlights,
        @Parameter(name = "sort", description = "Indicates sorting fields. Accepts array of objects in format like: [{\"field\":\"name\",\"order\":\"ASC\"}].<br/><br/>Any specification that we get from get-product-info can be used to sort result. Other generic sort field is \"name\".<br/><br/>", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "filters", description = "Allows to filter data.<br/><br/>Format of filter: [{\"type\":\"specvalue\",\"name\":\"ThreadCount\",\"gteq\":\"4\"}]<br/><br/><b>Available operators are:</b> \"eq\": equal to, \"neq\": not equal to, \"lteq\": less than or equal to, \"gteq\": greater than or equal to, \"swc\": starts with characters, \"nswc\": not starting with characters, \"cts\": contains, \"ncts\": not contains<br/><br/><b>Conditions:</b> By default all objects works on an AND condition. But inside an object we have the capability to put an \"OR\" or \"AND\" condition.<br/>Example conditions: [{\"type\":\"specvalue\",\"name\":\"ThreadCount\",\"ncts\":\"4,5\",\"cond\":\"AND\"}]<br/><br/><br/>", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filters", required = false) String filters,
        @Parameter(name = "per_page", description = "Filter number of products in response to desired size.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false) Integer perPage,
        @Parameter(name = "page_no", description = "Indicates page number for pagination of results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_no", required = false) Integer pageNo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"result\" : [ { \"product_name_raw\" : \"Intel® Xeon® Gold 5122 Processor (16.5M Cache, 3.60 GHz)\", \"product_id\" : \"120475\", \"highlights_info\" : [ { \"highlight_key\" : \"StatusCodeText\", \"raw_value\" : \"4\", \"label\" : \"Status\", \"value\" : \"Launched\" }, { \"highlight_key\" : \"StatusCodeText\", \"raw_value\" : \"4\", \"label\" : \"Status\", \"value\" : \"Launched\" } ], \"mktg_prd_type\" : \"18\", \"product_on_market_date\" : \"2017-07-11T00:00:00:000-0400\", \"created_date\" : \"2018-04-17T08:29:13:770-0400\", \"product_manufacturer\" : \"Intel\", \"updated_date\" : \"2018-10-11T07:20:11:500-0400\", \"product_description\" : \"Intel® Xeon® Gold 5122 Processor (16.5M Cache, 3.60 GHz)\", \"product_name\" : \"Intel® Xeon® Gold 5122 Processor (16.5M Cache, 3.60 GHz)\", \"product_category\" : [ \"51163\", \"12201\" ] }, { \"product_name_raw\" : \"Intel® Xeon® Gold 5122 Processor (16.5M Cache, 3.60 GHz)\", \"product_id\" : \"120475\", \"highlights_info\" : [ { \"highlight_key\" : \"StatusCodeText\", \"raw_value\" : \"4\", \"label\" : \"Status\", \"value\" : \"Launched\" }, { \"highlight_key\" : \"StatusCodeText\", \"raw_value\" : \"4\", \"label\" : \"Status\", \"value\" : \"Launched\" } ], \"mktg_prd_type\" : \"18\", \"product_on_market_date\" : \"2017-07-11T00:00:00:000-0400\", \"created_date\" : \"2018-04-17T08:29:13:770-0400\", \"product_manufacturer\" : \"Intel\", \"updated_date\" : \"2018-10-11T07:20:11:500-0400\", \"product_description\" : \"Intel® Xeon® Gold 5122 Processor (16.5M Cache, 3.60 GHz)\", \"product_name\" : \"Intel® Xeon® Gold 5122 Processor (16.5M Cache, 3.60 GHz)\", \"product_category\" : [ \"51163\", \"12201\" ] } ], \"per_page\" : 10, \"total_count\" : 230, \"page_no\" : \"1\", \"status\" : \"success\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/products/get-ordering-info : 3. Get ordering info for product id&#39;s requested.
     * Use this to fetch ordering info details for Intel products. No pagination supported.
     *
     * @param productId Filter ordering info details based on one or multiple product id&#39;s. Values must be enclosed in [ square brackets ] and each value must be in \&quot;double quotes\&quot;. Use comma to add multiple values. &lt;br/&gt;&lt;br/&gt;Example: [\&quot;123003\&quot;] (required)
     * @param localeGeoId Locale and Geo code used to get localised data.&lt;br/&gt;&lt;br/&gt; (required)
     * @return successful operation (status code 200)
     *         or unsuccessful operation (status code 500)
     */
    @Operation(
        operationId = "getorderinginfo",
        summary = "3. Get ordering info for product id's requested.",
        description = "Use this to fetch ordering info details for Intel products. No pagination supported.",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DetailedOrderingLevelInfo.class))
            }),
            @ApiResponse(responseCode = "500", description = "unsuccessful operation", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = UnsuccessfulOperation.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BasicAuth"),
            @SecurityRequirement(name = "ClientId")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/products/get-ordering-info",
        produces = { "*/*" }
    )
    
    default ResponseEntity<DetailedOrderingLevelInfo> getorderinginfo(
        @NotNull @Parameter(name = "product_id", description = "Filter ordering info details based on one or multiple product id's. Values must be enclosed in [ square brackets ] and each value must be in \"double quotes\". Use comma to add multiple values. <br/><br/>Example: [\"123003\"]", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "product_id", required = true) String productId,
        @NotNull @Parameter(name = "locale_geo_id", description = "Locale and Geo code used to get localised data.<br/><br/>", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "locale_geo_id", required = true) String localeGeoId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"result\" : [ { \"product_id\" : \"123003\", \"attributes\" : [ { \"highlight_key\" : \"OrderingCode\", \"tool_tip\" : \"tool tip\", \"raw_value\" : \"CM8068403377111\", \"label\" : \"Ordering Code\", \"value\" : \"CM8068403377111\" }, { \"highlight_key\" : \"OrderingCode\", \"tool_tip\" : \"tool tip\", \"raw_value\" : \"CM8068403377111\", \"label\" : \"Ordering Code\", \"value\" : \"CM8068403377111\" } ] }, { \"product_id\" : \"123003\", \"attributes\" : [ { \"highlight_key\" : \"OrderingCode\", \"tool_tip\" : \"tool tip\", \"raw_value\" : \"CM8068403377111\", \"label\" : \"Ordering Code\", \"value\" : \"CM8068403377111\" }, { \"highlight_key\" : \"OrderingCode\", \"tool_tip\" : \"tool tip\", \"raw_value\" : \"CM8068403377111\", \"label\" : \"Ordering Code\", \"value\" : \"CM8068403377111\" } ] } ], \"total_count\" : 1, \"status\" : \"success\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
