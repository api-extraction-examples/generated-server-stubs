/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.PatchOperation;
import org.openapitools.model.PostUserSegmentRequest;
import org.openapitools.model.SemanticPatchOperation;
import org.openapitools.model.UpdateBigSegmentTargetsRequest;
import org.openapitools.model.UserSegment;
import org.openapitools.model.UserSegments;
import org.openapitools.model.UserTargetingExpirationForSegment;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:38.380306-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "User segments", description = "the User segments API")
public interface SegmentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /segments/{projectKey}/{environmentKey}/{userSegmentKey} : Delete a user segment.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userSegmentKey The user segment&#39;s key. The key identifies the user segment in your code. (required)
     * @return Action completed successfully. (status code 204)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "deleteUserSegment",
        summary = "Delete a user segment.",
        tags = { "User segments" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Action completed successfully."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/segments/{projectKey}/{environmentKey}/{userSegmentKey}"
    )
    
    default ResponseEntity<Void> deleteUserSegment(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userSegmentKey", description = "The user segment's key. The key identifies the user segment in your code.", required = true, in = ParameterIn.PATH) @PathVariable("userSegmentKey") String userSegmentKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /segments/{projectKey}/{userSegmentKey}/expiring-user-targets/{environmentKey} : Get expiring user targets for user segment
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userSegmentKey The user segment&#39;s key. The key identifies the user segment in your code. (required)
     * @return User targeting expirations on user segment response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getExpiringUserTargetsOnSegment",
        summary = "Get expiring user targets for user segment",
        tags = { "User segments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User targeting expirations on user segment response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserTargetingExpirationForSegment.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/segments/{projectKey}/{userSegmentKey}/expiring-user-targets/{environmentKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserTargetingExpirationForSegment> getExpiringUserTargetsOnSegment(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userSegmentKey", description = "The user segment's key. The key identifies the user segment in your code.", required = true, in = ParameterIn.PATH) @PathVariable("userSegmentKey") String userSegmentKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_resourceId\" : { \"projectKey\" : \"projectKey\", \"kind\" : \"kind\", \"flagKey\" : \"flagKey\", \"key\" : \"key\", \"environmentKey\" : \"environmentKey\" }, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"targetType\" : \"targetType\", \"_id\" : \"_id\", \"_version\" : 0, \"userKey\" : \"userKey\", \"expirationDate\" : 1735689600000 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /segments/{projectKey}/{environmentKey}/{userSegmentKey} : Get a single user segment by key.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userSegmentKey The user segment&#39;s key. The key identifies the user segment in your code. (required)
     * @return User segment response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getUserSegment",
        summary = "Get a single user segment by key.",
        tags = { "User segments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User segment response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserSegment.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/segments/{projectKey}/{environmentKey}/{userSegmentKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserSegment> getUserSegment(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userSegmentKey", description = "The user segment's key. The key identifies the user segment in your code.", required = true, in = ParameterIn.PATH) @PathVariable("userSegmentKey") String userSegmentKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"excluded\" : [ \"excluded\", \"excluded\" ], \"_flags\" : [ { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" }, { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" } ], \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"name\" : \"Beta Testers\", \"description\" : \"Users in this segment can access beta features.\", \"rules\" : [ { \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"weight\" : 0, \"bucketBy\" : \"bucketBy\" }, { \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"weight\" : 0, \"bucketBy\" : \"bucketBy\" } ], \"creationDate\" : 1443652232590, \"unbounded\" : false, \"included\" : [ \"included\", \"included\" ], \"version\" : 6, \"key\" : \"beta-testers\", \"tags\" : [ \"dev\", \"ops\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /segments/{projectKey}/{environmentKey} : Get a list of all user segments in the given project.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param tag Filter by tag. A tag can be used to group flags across projects. (optional)
     * @return Segments response. (status code 200)
     *         or Invalid access token. (status code 401)
     */
    @Operation(
        operationId = "getUserSegments",
        summary = "Get a list of all user segments in the given project.",
        tags = { "User segments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Segments response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserSegments.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/segments/{projectKey}/{environmentKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserSegments> getUserSegments(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "tag", description = "Filter by tag. A tag can be used to group flags across projects.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"excluded\" : [ \"excluded\", \"excluded\" ], \"_flags\" : [ { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" }, { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" } ], \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"name\" : \"Beta Testers\", \"description\" : \"Users in this segment can access beta features.\", \"rules\" : [ { \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"weight\" : 0, \"bucketBy\" : \"bucketBy\" }, { \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"weight\" : 0, \"bucketBy\" : \"bucketBy\" } ], \"creationDate\" : 1443652232590, \"unbounded\" : false, \"included\" : [ \"included\", \"included\" ], \"version\" : 6, \"key\" : \"beta-testers\", \"tags\" : [ \"dev\", \"ops\" ] }, { \"excluded\" : [ \"excluded\", \"excluded\" ], \"_flags\" : [ { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" }, { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" } ], \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"name\" : \"Beta Testers\", \"description\" : \"Users in this segment can access beta features.\", \"rules\" : [ { \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"weight\" : 0, \"bucketBy\" : \"bucketBy\" }, { \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"weight\" : 0, \"bucketBy\" : \"bucketBy\" } ], \"creationDate\" : 1443652232590, \"unbounded\" : false, \"included\" : [ \"included\", \"included\" ], \"version\" : 6, \"key\" : \"beta-testers\", \"tags\" : [ \"dev\", \"ops\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /segments/{projectKey}/{userSegmentKey}/expiring-user-targets/{environmentKey} : Update, add, or delete expiring user targets on user segment
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userSegmentKey The user segment&#39;s key. The key identifies the user segment in your code. (required)
     * @param semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. &#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches&#39;. The addition of comments is also supported. (required)
     * @return User targeting expirations on user segment response. (status code 200)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "patchExpiringUserTargetsOnSegment",
        summary = "Update, add, or delete expiring user targets on user segment",
        tags = { "User segments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User targeting expirations on user segment response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserTargetingExpirationForSegment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/segments/{projectKey}/{userSegmentKey}/expiring-user-targets/{environmentKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserTargetingExpirationForSegment> patchExpiringUserTargetsOnSegment(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userSegmentKey", description = "The user segment's key. The key identifies the user segment in your code.", required = true, in = ParameterIn.PATH) @PathVariable("userSegmentKey") String userSegmentKey,
        @Parameter(name = "SemanticPatchWithComment", description = "Requires a Semantic Patch representation of the desired changes to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'. The addition of comments is also supported.", required = true) @Valid @RequestBody List<@Valid SemanticPatchOperation> semanticPatchWithComment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_resourceId\" : { \"projectKey\" : \"projectKey\", \"kind\" : \"kind\", \"flagKey\" : \"flagKey\", \"key\" : \"key\", \"environmentKey\" : \"environmentKey\" }, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"targetType\" : \"targetType\", \"_id\" : \"_id\", \"_version\" : 0, \"userKey\" : \"userKey\", \"expirationDate\" : 1735689600000 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /segments/{projectKey}/{environmentKey}/{userSegmentKey} : Perform a partial update to a user segment.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userSegmentKey The user segment&#39;s key. The key identifies the user segment in your code. (required)
     * @param patchOnly Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported. (required)
     * @return User segment response. (status code 200)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "patchUserSegment",
        summary = "Perform a partial update to a user segment.",
        tags = { "User segments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User segment response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserSegment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/segments/{projectKey}/{environmentKey}/{userSegmentKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserSegment> patchUserSegment(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userSegmentKey", description = "The user segment's key. The key identifies the user segment in your code.", required = true, in = ParameterIn.PATH) @PathVariable("userSegmentKey") String userSegmentKey,
        @Parameter(name = "PatchOnly", description = "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.", required = true) @Valid @RequestBody List<@Valid PatchOperation> patchOnly
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"excluded\" : [ \"excluded\", \"excluded\" ], \"_flags\" : [ { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" }, { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" } ], \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"name\" : \"Beta Testers\", \"description\" : \"Users in this segment can access beta features.\", \"rules\" : [ { \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"weight\" : 0, \"bucketBy\" : \"bucketBy\" }, { \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"weight\" : 0, \"bucketBy\" : \"bucketBy\" } ], \"creationDate\" : 1443652232590, \"unbounded\" : false, \"included\" : [ \"included\", \"included\" ], \"version\" : 6, \"key\" : \"beta-testers\", \"tags\" : [ \"dev\", \"ops\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /segments/{projectKey}/{environmentKey} : Creates a new user segment.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userSegmentBody Create a new user segment. (required)
     * @return User segment response. (status code 201)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "postUserSegment",
        summary = "Creates a new user segment.",
        tags = { "User segments" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User segment response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserSegment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/segments/{projectKey}/{environmentKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserSegment> postUserSegment(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userSegmentBody", description = "Create a new user segment.", required = true) @Valid @RequestBody PostUserSegmentRequest userSegmentBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"excluded\" : [ \"excluded\", \"excluded\" ], \"_flags\" : [ { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" }, { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" } ], \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"name\" : \"Beta Testers\", \"description\" : \"Users in this segment can access beta features.\", \"rules\" : [ { \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"weight\" : 0, \"bucketBy\" : \"bucketBy\" }, { \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"weight\" : 0, \"bucketBy\" : \"bucketBy\" } ], \"creationDate\" : 1443652232590, \"unbounded\" : false, \"included\" : [ \"included\", \"included\" ], \"version\" : 6, \"key\" : \"beta-testers\", \"tags\" : [ \"dev\", \"ops\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /segments/{projectKey}/{environmentKey}/{userSegmentKey}/users : Update targets included or excluded in a big segment
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userSegmentKey The user segment&#39;s key. The key identifies the user segment in your code. (required)
     * @param bigSegmentTargetsBody Add or remove user targets to the included or excluded lists on a big segment. Contact your account manager for early access to this feature. (required)
     * @return Action completed successfully. (status code 204)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     */
    @Operation(
        operationId = "updateBigSegmentTargets",
        summary = "Update targets included or excluded in a big segment",
        tags = { "User segments" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Action completed successfully."),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/segments/{projectKey}/{environmentKey}/{userSegmentKey}/users",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateBigSegmentTargets(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userSegmentKey", description = "The user segment's key. The key identifies the user segment in your code.", required = true, in = ParameterIn.PATH) @PathVariable("userSegmentKey") String userSegmentKey,
        @Parameter(name = "bigSegmentTargetsBody", description = "Add or remove user targets to the included or excluded lists on a big segment. Contact your account manager for early access to this feature.", required = true) @Valid @RequestBody UpdateBigSegmentTargetsRequest bigSegmentTargetsBody
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
