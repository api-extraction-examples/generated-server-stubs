/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Destination;
import org.openapitools.model.Destinations;
import org.openapitools.model.PatchOperation;
import org.openapitools.model.PostDestinationRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:38.380306-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Data export destinations", description = "the Data export destinations API")
public interface DestinationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /destinations/{projectKey}/{environmentKey}/{destinationId} : Get a single data export destination by ID
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param destinationId The data export destination ID. (required)
     * @return Action completed successfully. (status code 204)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "deleteDestination",
        summary = "Get a single data export destination by ID",
        tags = { "Data export destinations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Action completed successfully."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/destinations/{projectKey}/{environmentKey}/{destinationId}"
    )
    
    default ResponseEntity<Void> deleteDestination(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "destinationId", description = "The data export destination ID.", required = true, in = ParameterIn.PATH) @PathVariable("destinationId") String destinationId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /destinations/{projectKey}/{environmentKey}/{destinationId} : Get a single data export destination by ID
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param destinationId The data export destination ID. (required)
     * @return Destination response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getDestination",
        summary = "Get a single data export destination by ID",
        tags = { "Data export destinations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Destination response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Destination.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/destinations/{projectKey}/{environmentKey}/{destinationId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Destination> getDestination(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "destinationId", description = "The data export destination ID.", required = true, in = ParameterIn.PATH) @PathVariable("destinationId") String destinationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"kind\" : \"google-pubsub\", \"name\" : \"Example Google Pub/Sub Destination\", \"true\" : true, \"_id\" : \"37ed9aad-de0a-4665-932e-41c35587aeea\", \"config\" : { \"project\" : \"cool-project\", \"topic\" : \"test\" }, \"version\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /destinations : Returns a list of all data export destinations.
     *
     * @return Destinations response. (status code 200)
     *         or Invalid access token. (status code 401)
     */
    @Operation(
        operationId = "getDestinations",
        summary = "Returns a list of all data export destinations.",
        tags = { "Data export destinations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Destinations response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Destinations.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/destinations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Destinations> getDestinations(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"kind\" : \"google-pubsub\", \"name\" : \"Example Google Pub/Sub Destination\", \"true\" : true, \"_id\" : \"37ed9aad-de0a-4665-932e-41c35587aeea\", \"config\" : { \"project\" : \"cool-project\", \"topic\" : \"test\" }, \"version\" : 2 }, { \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"kind\" : \"google-pubsub\", \"name\" : \"Example Google Pub/Sub Destination\", \"true\" : true, \"_id\" : \"37ed9aad-de0a-4665-932e-41c35587aeea\", \"config\" : { \"project\" : \"cool-project\", \"topic\" : \"test\" }, \"version\" : 2 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /destinations/{projectKey}/{environmentKey}/{destinationId} : Perform a partial update to a data export destination.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param destinationId The data export destination ID. (required)
     * @param patchOnly Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported. (required)
     * @return Destination response. (status code 200)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "patchDestination",
        summary = "Perform a partial update to a data export destination.",
        tags = { "Data export destinations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Destination response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Destination.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/destinations/{projectKey}/{environmentKey}/{destinationId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Destination> patchDestination(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "destinationId", description = "The data export destination ID.", required = true, in = ParameterIn.PATH) @PathVariable("destinationId") String destinationId,
        @Parameter(name = "PatchOnly", description = "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.", required = true) @Valid @RequestBody List<@Valid PatchOperation> patchOnly
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"kind\" : \"google-pubsub\", \"name\" : \"Example Google Pub/Sub Destination\", \"true\" : true, \"_id\" : \"37ed9aad-de0a-4665-932e-41c35587aeea\", \"config\" : { \"project\" : \"cool-project\", \"topic\" : \"test\" }, \"version\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /destinations/{projectKey}/{environmentKey} : Create a new data export destination
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param destinationBody Create a new data export destination. (required)
     * @return Destination response. (status code 201)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "postDestination",
        summary = "Create a new data export destination",
        tags = { "Data export destinations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Destination response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Destination.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/destinations/{projectKey}/{environmentKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Destination> postDestination(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "destinationBody", description = "Create a new data export destination.", required = true) @Valid @RequestBody PostDestinationRequest destinationBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"kind\" : \"google-pubsub\", \"name\" : \"Example Google Pub/Sub Destination\", \"true\" : true, \"_id\" : \"37ed9aad-de0a-4665-932e-41c35587aeea\", \"config\" : { \"project\" : \"cool-project\", \"topic\" : \"test\" }, \"version\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
