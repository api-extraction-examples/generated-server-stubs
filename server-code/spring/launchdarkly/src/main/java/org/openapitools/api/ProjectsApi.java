/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ApprovalRequest;
import org.openapitools.model.ApprovalRequests;
import org.openapitools.model.Environment;
import org.openapitools.model.EnvironmentPost;
import org.openapitools.model.FeatureFlagScheduledChange;
import org.openapitools.model.FeatureFlagScheduledChanges;
import org.openapitools.model.FeatureFlagScheduledChangesConflicts;
import org.openapitools.model.GetFlagConfigScheduledChangesConflictsRequest;
import org.openapitools.model.PatchFlagConfigScheduledChangeRequest;
import org.openapitools.model.PatchOperation;
import org.openapitools.model.PostApplyApprovalRequestRequest;
import org.openapitools.model.PostApprovalRequestRequest;
import org.openapitools.model.PostFlagConfigScheduledChangesRequest;
import org.openapitools.model.PostProjectRequest;
import org.openapitools.model.PostReviewApprovalRequestRequest;
import org.openapitools.model.Project;
import org.openapitools.model.Projects;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:38.380306-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Feature flags", description = "the Feature flags API")
public interface ProjectsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId} : Delete an approval request for a feature flag config
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param approvalRequestId The approval request ID (required)
     * @param approvalRequestConfigBody Create a new approval request (optional)
     * @return Action completed successfully. (status code 204)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "deleteApprovalRequest",
        summary = "Delete an approval request for a feature flag config",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Action completed successfully."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteApprovalRequest(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "approvalRequestId", description = "The approval request ID", required = true, in = ParameterIn.PATH) @PathVariable("approvalRequestId") String approvalRequestId,
        @Parameter(name = "approvalRequestConfigBody", description = "Create a new approval request") @Valid @RequestBody(required = false) PostApprovalRequestRequest approvalRequestConfigBody
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /projects/{projectKey}/environments/{environmentKey} : Delete an environment in a specific project.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @return Action completed successfully. (status code 204)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "deleteEnvironment",
        summary = "Delete an environment in a specific project.",
        tags = { "Environments" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Action completed successfully."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/projects/{projectKey}/environments/{environmentKey}"
    )
    
    default ResponseEntity<Void> deleteEnvironment(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId} : Delete a scheduled change on a feature flag in an environment.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param scheduledChangeId The id of the scheduled change (required)
     * @return Action completed successfully. (status code 204)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "deleteFlagConfigScheduledChanges",
        summary = "Delete a scheduled change on a feature flag in an environment.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Action completed successfully."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}"
    )
    
    default ResponseEntity<Void> deleteFlagConfigScheduledChanges(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "scheduledChangeId", description = "The id of the scheduled change", required = true, in = ParameterIn.PATH) @PathVariable("scheduledChangeId") String scheduledChangeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /projects/{projectKey} : Delete a project by key. Caution-- deleting a project will delete all associated environments and feature flags. You cannot delete the last project in an account.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @return Action completed successfully. (status code 204)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "deleteProject",
        summary = "Delete a project by key. Caution-- deleting a project will delete all associated environments and feature flags. You cannot delete the last project in an account.",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Action completed successfully."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/projects/{projectKey}"
    )
    
    default ResponseEntity<Void> deleteProject(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId} : Get a single approval request for a feature flag config
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param approvalRequestId The approval request ID (required)
     * @return Approval request response (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getApprovalRequest",
        summary = "Get a single approval request for a feature flag config",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Approval request response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApprovalRequests.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ApprovalRequests> getApprovalRequest(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "approvalRequestId", description = "The approval request ID", required = true, in = ParameterIn.PATH) @PathVariable("approvalRequestId") String approvalRequestId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"allReviews\" : [ { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" }, { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" } ], \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"notifyMemberIds\" : [ \"memberId\", \"memberId2\" ], \"executionDate\" : 5, \"appliedDate\" : 1, \"creationDate\" : 5, \"requestorId\" : \"requestorId\", \"appliedByMemberID\" : \"appliedByMemberID\", \"operatingOnId\" : \"operatingOnId\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_version\" : 0, \"status\" : \"pending\" }, { \"allReviews\" : [ { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" }, { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" } ], \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"notifyMemberIds\" : [ \"memberId\", \"memberId2\" ], \"executionDate\" : 5, \"appliedDate\" : 1, \"creationDate\" : 5, \"requestorId\" : \"requestorId\", \"appliedByMemberID\" : \"appliedByMemberID\", \"operatingOnId\" : \"operatingOnId\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_version\" : 0, \"status\" : \"pending\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests : Get all approval requests for a feature flag config
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @return Approval requests response (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getApprovalRequests",
        summary = "Get all approval requests for a feature flag config",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Approval requests response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApprovalRequests.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ApprovalRequests> getApprovalRequests(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"allReviews\" : [ { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" }, { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" } ], \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"notifyMemberIds\" : [ \"memberId\", \"memberId2\" ], \"executionDate\" : 5, \"appliedDate\" : 1, \"creationDate\" : 5, \"requestorId\" : \"requestorId\", \"appliedByMemberID\" : \"appliedByMemberID\", \"operatingOnId\" : \"operatingOnId\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_version\" : 0, \"status\" : \"pending\" }, { \"allReviews\" : [ { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" }, { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" } ], \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"notifyMemberIds\" : [ \"memberId\", \"memberId2\" ], \"executionDate\" : 5, \"appliedDate\" : 1, \"creationDate\" : 5, \"requestorId\" : \"requestorId\", \"appliedByMemberID\" : \"appliedByMemberID\", \"operatingOnId\" : \"operatingOnId\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_version\" : 0, \"status\" : \"pending\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{projectKey}/environments/{environmentKey} : Get an environment given a project and key.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @return Environment response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getEnvironment",
        summary = "Get an environment given a project and key.",
        tags = { "Environments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Environment response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Environment.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{projectKey}/environments/{environmentKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Environment> getEnvironment(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId} : Get a scheduled change on a feature flag by id.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param scheduledChangeId The id of the scheduled change (required)
     * @return A scheduled change for feature flag response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getFlagConfigScheduledChange",
        summary = "Get a scheduled change on a feature flag by id.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A scheduled change for feature flag response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeatureFlagScheduledChange.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FeatureFlagScheduledChange> getFlagConfigScheduledChange(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "scheduledChangeId", description = "The id of the scheduled change", required = true, in = ParameterIn.PATH) @PathVariable("scheduledChangeId") String scheduledChangeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"executionDate\" : 6, \"_id\" : \"_id\", \"_version\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes : Get all scheduled workflows for a feature flag by key.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @return A list of scheduled changes for feature flag response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getFlagConfigScheduledChanges",
        summary = "Get all scheduled workflows for a feature flag by key.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of scheduled changes for feature flag response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeatureFlagScheduledChanges.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FeatureFlagScheduledChanges> getFlagConfigScheduledChanges(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"executionDate\" : 6, \"_id\" : \"_id\", \"_version\" : 0 }, { \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"executionDate\" : 6, \"_id\" : \"_id\", \"_version\" : 0 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes-conflicts : Lists conflicts between the given instructions and any existing scheduled changes for the feature flag. The actual HTTP verb should be REPORT, not POST.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param flagConfigScheduledChangesConflictsBody Used to determine if a semantic patch will result in conflicts with scheduled changes on a feature flag. (required)
     * @return Scheduled changes conflict response (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getFlagConfigScheduledChangesConflicts",
        summary = "Lists conflicts between the given instructions and any existing scheduled changes for the feature flag. The actual HTTP verb should be REPORT, not POST.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Scheduled changes conflict response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeatureFlagScheduledChangesConflicts.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes-conflicts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FeatureFlagScheduledChangesConflicts> getFlagConfigScheduledChangesConflicts(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "flagConfigScheduledChangesConflictsBody", description = "Used to determine if a semantic patch will result in conflicts with scheduled changes on a feature flag.", required = true) @Valid @RequestBody GetFlagConfigScheduledChangesConflictsRequest flagConfigScheduledChangesConflictsBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"instructions\" : [ { \"kind\" : \"removeUserTargets\", \"conflicts\" : [ { \"reason\" : \"reason\", \"_id\" : \"_id\" }, { \"reason\" : \"reason\", \"_id\" : \"_id\" } ] }, { \"kind\" : \"removeUserTargets\", \"conflicts\" : [ { \"reason\" : \"reason\", \"_id\" : \"_id\" }, { \"reason\" : \"reason\", \"_id\" : \"_id\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{projectKey} : Fetch a single project by key.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @return Successful Project response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getProject",
        summary = "Fetch a single project by key.",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Project response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{projectKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Project> getProject(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"includeInSnippetByDefault\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : [ { \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" }, { \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" } ], \"defaultClientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"name\" : \"Zentasks\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"key\" : \"zentasks\", \"tags\" : [ \"tags\", \"tags\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects : Returns a list of all projects in the account.
     *
     * @return Projects response (status code 200)
     *         or Invalid access token. (status code 401)
     */
    @Operation(
        operationId = "getProjects",
        summary = "Returns a list of all projects in the account.",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Projects response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Projects.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Projects> getProjects(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"includeInSnippetByDefault\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : [ { \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" }, { \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" } ], \"defaultClientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"name\" : \"Zentasks\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"key\" : \"zentasks\", \"tags\" : [ \"tags\", \"tags\" ] }, { \"includeInSnippetByDefault\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : [ { \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" }, { \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" } ], \"defaultClientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"name\" : \"Zentasks\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"key\" : \"zentasks\", \"tags\" : [ \"tags\", \"tags\" ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /projects/{projectKey}/environments/{environmentKey} : Modify an environment by ID. If you try to patch the environment by setting both required and requiredApprovalTags, it will result in an error. Users can specify either required approvals for all flags in an environment or those with specific tags, but not both. Only customers on an Enterprise plan can require approval for flag updates with either mechanism.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param patchDelta Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; (required)
     * @return Environment response. (status code 200)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "patchEnvironment",
        summary = "Modify an environment by ID. If you try to patch the environment by setting both required and requiredApprovalTags, it will result in an error. Users can specify either required approvals for all flags in an environment or those with specific tags, but not both. Only customers on an Enterprise plan can require approval for flag updates with either mechanism.",
        tags = { "Environments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Environment response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Environment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/projects/{projectKey}/environments/{environmentKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Environment> patchEnvironment(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "patchDelta", description = "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'", required = true) @Valid @RequestBody List<@Valid PatchOperation> patchDelta
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId} : Updates an existing scheduled-change on a feature flag in an environment.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param scheduledChangeId The id of the scheduled change (required)
     * @param flagConfigScheduledChangesPatchBody Update scheduled changes on a feature flag. (required)
     * @return A Scheduled change for feature flag response. (status code 201)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "patchFlagConfigScheduledChange",
        summary = "Updates an existing scheduled-change on a feature flag in an environment.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "201", description = "A Scheduled change for feature flag response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeatureFlagScheduledChange.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FeatureFlagScheduledChange> patchFlagConfigScheduledChange(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "scheduledChangeId", description = "The id of the scheduled change", required = true, in = ParameterIn.PATH) @PathVariable("scheduledChangeId") String scheduledChangeId,
        @Parameter(name = "flagConfigScheduledChangesPatchBody", description = "Update scheduled changes on a feature flag.", required = true) @Valid @RequestBody PatchFlagConfigScheduledChangeRequest flagConfigScheduledChangesPatchBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"executionDate\" : 6, \"_id\" : \"_id\", \"_version\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /projects/{projectKey} : Modify a project by ID.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param patchDelta Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; (required)
     * @return Successful Project response. (status code 200)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "patchProject",
        summary = "Modify a project by ID.",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful Project response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/projects/{projectKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Project> patchProject(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "patchDelta", description = "Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'", required = true) @Valid @RequestBody List<@Valid PatchOperation> patchDelta
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"includeInSnippetByDefault\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : [ { \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" }, { \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" } ], \"defaultClientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"name\" : \"Zentasks\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"key\" : \"zentasks\", \"tags\" : [ \"tags\", \"tags\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/apply : Apply approval request for a feature flag config
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param approvalRequestId The approval request ID (required)
     * @param approvalRequestApplyConfigBody Apply an approval request (required)
     * @return Approval request applied response (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "postApplyApprovalRequest",
        summary = "Apply approval request for a feature flag config",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Approval request applied response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApprovalRequests.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/apply",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ApprovalRequests> postApplyApprovalRequest(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "approvalRequestId", description = "The approval request ID", required = true, in = ParameterIn.PATH) @PathVariable("approvalRequestId") String approvalRequestId,
        @Parameter(name = "approvalRequestApplyConfigBody", description = "Apply an approval request", required = true) @Valid @RequestBody PostApplyApprovalRequestRequest approvalRequestApplyConfigBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"allReviews\" : [ { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" }, { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" } ], \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"notifyMemberIds\" : [ \"memberId\", \"memberId2\" ], \"executionDate\" : 5, \"appliedDate\" : 1, \"creationDate\" : 5, \"requestorId\" : \"requestorId\", \"appliedByMemberID\" : \"appliedByMemberID\", \"operatingOnId\" : \"operatingOnId\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_version\" : 0, \"status\" : \"pending\" }, { \"allReviews\" : [ { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" }, { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" } ], \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"notifyMemberIds\" : [ \"memberId\", \"memberId2\" ], \"executionDate\" : 5, \"appliedDate\" : 1, \"creationDate\" : 5, \"requestorId\" : \"requestorId\", \"appliedByMemberID\" : \"appliedByMemberID\", \"operatingOnId\" : \"operatingOnId\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_version\" : 0, \"status\" : \"pending\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId} : Create an approval request for a feature flag config
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param approvalRequestId The approval request ID (required)
     * @param approvalRequestConfigBody Create a new approval request (optional)
     * @return Approval request response (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "postApprovalRequest",
        summary = "Create an approval request for a feature flag config",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Approval request response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApprovalRequest.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ApprovalRequest> postApprovalRequest(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "approvalRequestId", description = "The approval request ID", required = true, in = ParameterIn.PATH) @PathVariable("approvalRequestId") String approvalRequestId,
        @Parameter(name = "approvalRequestConfigBody", description = "Create a new approval request") @Valid @RequestBody(required = false) PostApprovalRequestRequest approvalRequestConfigBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"allReviews\" : [ { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" }, { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" } ], \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"notifyMemberIds\" : [ \"memberId\", \"memberId2\" ], \"executionDate\" : 5, \"appliedDate\" : 1, \"creationDate\" : 5, \"requestorId\" : \"requestorId\", \"appliedByMemberID\" : \"appliedByMemberID\", \"operatingOnId\" : \"operatingOnId\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_version\" : 0, \"status\" : \"pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects/{projectKey}/environments : Create a new environment in a specified project with a given name, key, and swatch color.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentBody New environment. (required)
     * @return Environment response. (status code 201)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "postEnvironment",
        summary = "Create a new environment in a specified project with a given name, key, and swatch color.",
        tags = { "Environments" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Environment response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Environment.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{projectKey}/environments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Environment> postEnvironment(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentBody", description = "New environment.", required = true) @Valid @RequestBody EnvironmentPost environmentBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes : Creates a new scheduled change for a feature flag.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param flagConfigScheduledChangesPostBody Create scheduled changes on a feature flag. (required)
     * @return A scheduled change for feature flag response. (status code 201)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "postFlagConfigScheduledChanges",
        summary = "Creates a new scheduled change for a feature flag.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "201", description = "A scheduled change for feature flag response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeatureFlagScheduledChange.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FeatureFlagScheduledChange> postFlagConfigScheduledChanges(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "flagConfigScheduledChangesPostBody", description = "Create scheduled changes on a feature flag.", required = true) @Valid @RequestBody PostFlagConfigScheduledChangesRequest flagConfigScheduledChangesPostBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"executionDate\" : 6, \"_id\" : \"_id\", \"_version\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects : Create a new project with the given key and name.
     *
     * @param projectBody Project keys must be unique within an account. (required)
     * @return Successful Project response. (status code 201)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "postProject",
        summary = "Create a new project with the given key and name.",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successful Project response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Project> postProject(
        @Parameter(name = "projectBody", description = "Project keys must be unique within an account.", required = true) @Valid @RequestBody PostProjectRequest projectBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"includeInSnippetByDefault\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : [ { \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" }, { \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" } ], \"defaultClientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"name\" : \"Zentasks\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"key\" : \"zentasks\", \"tags\" : [ \"tags\", \"tags\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/review : Review approval request for a feature flag config
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param approvalRequestId The approval request ID (required)
     * @param approvalRequestReviewConfigBody Review an approval request (required)
     * @return Approval request reviewed response (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "postReviewApprovalRequest",
        summary = "Review approval request for a feature flag config",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Approval request reviewed response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApprovalRequests.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/review",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ApprovalRequests> postReviewApprovalRequest(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "approvalRequestId", description = "The approval request ID", required = true, in = ParameterIn.PATH) @PathVariable("approvalRequestId") String approvalRequestId,
        @Parameter(name = "approvalRequestReviewConfigBody", description = "Review an approval request", required = true) @Valid @RequestBody PostReviewApprovalRequestRequest approvalRequestReviewConfigBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"allReviews\" : [ { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" }, { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" } ], \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"notifyMemberIds\" : [ \"memberId\", \"memberId2\" ], \"executionDate\" : 5, \"appliedDate\" : 1, \"creationDate\" : 5, \"requestorId\" : \"requestorId\", \"appliedByMemberID\" : \"appliedByMemberID\", \"operatingOnId\" : \"operatingOnId\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_version\" : 0, \"status\" : \"pending\" }, { \"allReviews\" : [ { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" }, { \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"creationDate\" : 6, \"memberId\" : \"5a580a01b4ff89217bdf9dc1\" } ], \"instructions\" : [ { \"kind\" : \"removeUserTargets\" }, { \"kind\" : \"removeUserTargets\" } ], \"notifyMemberIds\" : [ \"memberId\", \"memberId2\" ], \"executionDate\" : 5, \"appliedDate\" : 1, \"creationDate\" : 5, \"requestorId\" : \"requestorId\", \"appliedByMemberID\" : \"appliedByMemberID\", \"operatingOnId\" : \"operatingOnId\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_version\" : 0, \"status\" : \"pending\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects/{projectKey}/environments/{environmentKey}/mobileKey : Reset an environment&#39;s mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param expiry The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version. (optional)
     * @return Environment response. (status code 200)
     *         or Invalid resource specifier. (status code 404)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "resetEnvironmentMobileKey",
        summary = "Reset an environment's mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.",
        tags = { "Environments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Environment response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Environment.class))
            }),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{projectKey}/environments/{environmentKey}/mobileKey",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Environment> resetEnvironmentMobileKey(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "expiry", description = "The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expiry", required = false) Long expiry
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects/{projectKey}/environments/{environmentKey}/apiKey : Reset an environment&#39;s SDK key with an optional expiry time for the old key.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param expiry An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately. (optional)
     * @return Environment response. (status code 200)
     *         or Invalid resource specifier. (status code 404)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "resetEnvironmentSDKKey",
        summary = "Reset an environment's SDK key with an optional expiry time for the old key.",
        tags = { "Environments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Environment response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Environment.class))
            }),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{projectKey}/environments/{environmentKey}/apiKey",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Environment> resetEnvironmentSDKKey(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "expiry", description = "An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expiry", required = false) Long expiry
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"approvalSettings\" : { \"serviceKind\" : \"launchdarkly\", \"canReviewOwnRequest\" : true, \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ], \"canApplyDeclinedChanges\" : true, \"minNumApprovals\" : 2, \"required\" : true }, \"apiKey\" : \"XXX\", \"color\" : \"417505\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"confirmChanges\" : false, \"requireComments\" : false, \"mobileKey\" : \"XXX\", \"defaultTrackEvents\" : false, \"tags\" : [ \"tags\", \"tags\" ], \"defaultTtl\" : 0.0, \"name\" : \"Production\", \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"secureMode\" : false, \"key\" : \"production\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
