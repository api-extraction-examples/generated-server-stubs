/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.EvaluationUsageError;
import org.openapitools.model.Events;
import org.openapitools.model.MAU;
import org.openapitools.model.MAUbyCategory;
import org.openapitools.model.Stream;
import org.openapitools.model.StreamBySDK;
import org.openapitools.model.StreamSDKVersion;
import org.openapitools.model.StreamUsageError;
import org.openapitools.model.Streams;
import org.openapitools.model.Usage;
import org.openapitools.model.UsageError;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:38.380306-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Customer Metrics", description = "the Customer Metrics API")
public interface UsageApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /usage/evaluations/{envId}/{flagKey} : Get events usage by event id and the feature flag key.
     *
     * @param envId The environment id for the flag evaluations in question. (required)
     * @param flagKey The key of the flag we want metrics for. (required)
     * @return Returns timeseries data and all sdk versions. (status code 200)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     *         or The environment or flag you requested could not be found (status code 404)
     */
    @Operation(
        operationId = "getEvaluations",
        summary = "Get events usage by event id and the feature flag key.",
        tags = { "Customer Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns timeseries data and all sdk versions.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamSDKVersion.class))
            }),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            }),
            @ApiResponse(responseCode = "404", description = "The environment or flag you requested could not be found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EvaluationUsageError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usage/evaluations/{envId}/{flagKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StreamSDKVersion> getEvaluations(
        @Parameter(name = "envId", description = "The environment id for the flag evaluations in question.", required = true, in = ParameterIn.PATH) @PathVariable("envId") String envId,
        @Parameter(name = "flagKey", description = "The key of the flag we want metrics for.", required = true, in = ParameterIn.PATH) @PathVariable("flagKey") String flagKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"sdkVersions\" : [ { \"sdk\" : \"ruby\", \"version\" : \"5.4.3\" }, { \"sdk\" : \"ruby\", \"version\" : \"5.4.3\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /usage/events/{type} : Get events usage by event type.
     *
     * @param type The type of event we would like to track. (required)
     * @return Returns timeseries data and all sdk versions. (status code 200)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     *         or The stream source you requested could not be found (status code 404)
     */
    @Operation(
        operationId = "getEvent",
        summary = "Get events usage by event type.",
        tags = { "Customer Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns timeseries data and all sdk versions.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamSDKVersion.class))
            }),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            }),
            @ApiResponse(responseCode = "404", description = "The stream source you requested could not be found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamUsageError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usage/events/{type}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StreamSDKVersion> getEvent(
        @Parameter(name = "type", description = "The type of event we would like to track.", required = true, in = ParameterIn.PATH) @PathVariable("type") String type
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"sdkVersions\" : [ { \"sdk\" : \"ruby\", \"version\" : \"5.4.3\" }, { \"sdk\" : \"ruby\", \"version\" : \"5.4.3\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /usage/events : Get events usage endpoints.
     *
     * @return Returns timeseries data and all sdk versions. (status code 200)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     */
    @Operation(
        operationId = "getEvents",
        summary = "Get events usage endpoints.",
        tags = { "Customer Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns timeseries data and all sdk versions.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Events.class))
            }),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usage/events",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Events> getEvents(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"subseries\" : [ { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } ] } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /usage/mau : Get monthly active user data.
     *
     * @return Returns timeseries data and all sdk versions. (status code 200)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     */
    @Operation(
        operationId = "getMAU",
        summary = "Get monthly active user data.",
        tags = { "Customer Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns timeseries data and all sdk versions.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MAU.class))
            }),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usage/mau",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MAU> getMAU(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : [ { \"sdk\" : \"ruby\", \"source\" : \"server\", \"version\" : \"5.4.3\" }, { \"sdk\" : \"ruby\", \"source\" : \"server\", \"version\" : \"5.4.3\" } ], \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"subseries\" : [ { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } ] }, \"series\" : [ { \"0\" : 0, \"time\" : 1551740400000 }, { \"0\" : 0, \"time\" : 1551740400000 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /usage/mau/bycategory : Get monthly active user data by category.
     *
     * @return Returns timeseries data and all sdk versions. (status code 200)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     */
    @Operation(
        operationId = "getMAUByCategory",
        summary = "Get monthly active user data by category.",
        tags = { "Customer Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns timeseries data and all sdk versions.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MAUbyCategory.class))
            }),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usage/mau/bycategory",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MAUbyCategory> getMAUByCategory(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : [ null, null ], \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"series\" : [ { \"0\" : 0, \"time\" : 1551740400000 }, { \"0\" : 0, \"time\" : 1551740400000 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /usage/streams/{source} : Get a stream endpoint and return timeseries data.
     *
     * @param source The source of where the stream comes from. (required)
     * @return Responds with time series data on stream usage. (status code 200)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     *         or The stream source you requested could not be found (status code 404)
     */
    @Operation(
        operationId = "getStream",
        summary = "Get a stream endpoint and return timeseries data.",
        tags = { "Customer Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Responds with time series data on stream usage.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Stream.class))
            }),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            }),
            @ApiResponse(responseCode = "404", description = "The stream source you requested could not be found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamUsageError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usage/streams/{source}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Stream> getStream(
        @Parameter(name = "source", description = "The source of where the stream comes from.", required = true, in = ParameterIn.PATH) @PathVariable("source") String source
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : [ { \"sdk\" : \"ruby\", \"source\" : \"server\", \"version\" : \"5.4.3\" }, { \"sdk\" : \"ruby\", \"source\" : \"server\", \"version\" : \"5.4.3\" } ], \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"subseries\" : [ { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } ] }, \"series\" : [ { \"0\" : 0, \"time\" : 1551740400000 }, { \"0\" : 0, \"time\" : 1551740400000 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /usage/streams/{source}/bysdkversion : Get a stream timeseries data by source show sdk version metadata.
     *
     * @param source The source of where the stream comes from. (required)
     * @return Returns timeseries data and metadata on sdk version. (status code 200)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     *         or The stream source you requested could not be found (status code 404)
     */
    @Operation(
        operationId = "getStreamBySDK",
        summary = "Get a stream timeseries data by source show sdk version metadata.",
        tags = { "Customer Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns timeseries data and metadata on sdk version.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamBySDK.class))
            }),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            }),
            @ApiResponse(responseCode = "404", description = "The stream source you requested could not be found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamUsageError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usage/streams/{source}/bysdkversion",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StreamBySDK> getStreamBySDK(
        @Parameter(name = "source", description = "The source of where the stream comes from.", required = true, in = ParameterIn.PATH) @PathVariable("source") String source
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : [ { \"sdk\" : \"ruby\", \"source\" : \"server\", \"version\" : \"5.4.3\" }, { \"sdk\" : \"ruby\", \"source\" : \"server\", \"version\" : \"5.4.3\" } ], \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"series\" : [ { \"0\" : 0, \"time\" : 1551740400000 }, { \"0\" : 0, \"time\" : 1551740400000 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /usage/streams/{source}/sdkversions : Get a stream timeseries data by source and show all sdk version associated.
     *
     * @param source The source of where the stream comes from. (required)
     * @return Returns timeseries data and all sdk versions. (status code 200)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     *         or The stream source you requested could not be found (status code 404)
     */
    @Operation(
        operationId = "getStreamSDKVersion",
        summary = "Get a stream timeseries data by source and show all sdk version associated.",
        tags = { "Customer Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns timeseries data and all sdk versions.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamSDKVersion.class))
            }),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            }),
            @ApiResponse(responseCode = "404", description = "The stream source you requested could not be found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StreamUsageError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usage/streams/{source}/sdkversions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StreamSDKVersion> getStreamSDKVersion(
        @Parameter(name = "source", description = "The source of where the stream comes from.", required = true, in = ParameterIn.PATH) @PathVariable("source") String source
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"sdkVersions\" : [ { \"sdk\" : \"ruby\", \"version\" : \"5.4.3\" }, { \"sdk\" : \"ruby\", \"version\" : \"5.4.3\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /usage/streams : Returns a list of all streams.
     *
     * @return Stream usage endpoints (status code 200)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     */
    @Operation(
        operationId = "getStreams",
        summary = "Returns a list of all streams.",
        tags = { "Customer Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Stream usage endpoints", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Streams.class))
            }),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usage/streams",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Streams> getStreams(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"subseries\" : [ { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } ] } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /usage : Returns of the usage endpoints available.
     *
     * @return Usage endpoints (status code 200)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     */
    @Operation(
        operationId = "getUsage",
        summary = "Returns of the usage endpoints available.",
        tags = { "Customer Metrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Usage endpoints", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Usage.class))
            }),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/usage",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Usage> getUsage(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"subseries\" : [ { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } ] }, \"series\" : [ { \"0\" : 0, \"time\" : 1551740400000 }, { \"0\" : 0, \"time\" : 1551740400000 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
