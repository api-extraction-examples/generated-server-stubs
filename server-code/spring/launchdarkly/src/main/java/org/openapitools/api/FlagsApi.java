/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import org.openapitools.model.CopyFeatureFlagRequest;
import org.openapitools.model.DependentFlagsByEnvironment;
import org.openapitools.model.FeatureFlag;
import org.openapitools.model.FeatureFlags;
import org.openapitools.model.MultiEnvironmentDependentFlags;
import org.openapitools.model.PatchFeatureFlagRequest;
import org.openapitools.model.PostFeatureFlagRequest;
import org.openapitools.model.SemanticPatchOperation;
import org.openapitools.model.UsageError;
import org.openapitools.model.UserTargetingExpirationForFlags;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:38.380306-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Feature flags", description = "the Feature flags API")
public interface FlagsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /flags/{projectKey}/{featureFlagKey}/copy : Copies the feature flag configuration from one environment to the same feature flag in another environment.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param featureFlagCopyBody Copy feature flag configurations between environments. (required)
     * @return Flag configuration copy response. (status code 201)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "copyFeatureFlag",
        summary = "Copies the feature flag configuration from one environment to the same feature flag in another environment.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Flag configuration copy response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeatureFlag.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/flags/{projectKey}/{featureFlagKey}/copy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FeatureFlag> copyFeatureFlag(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "featureFlagCopyBody", description = "Copy feature flag configurations between environments.", required = true) @Valid @RequestBody CopyFeatureFlagRequest featureFlagCopyBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archivedDate\" : 1443652232590, \"temporary\" : false, \"_maintainer\" : { \"firstName\" : \"Alan\", \"lastName\" : \"Turing\", \"_verified\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_pendingInvite\" : true, \"_lastSeen\" : 1469326565348, \"isBeta\" : true, \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_lastSeenMetadata\" : { \"tokenId\" : \"5fd2a1ee05600316d5cb3e96\" }, \"email\" : \"user@launchdarkly.com\", \"customRoles\" : [ \"5a580a01b4ff89217bdf9dc1\", \"5a580a01b4ff89217bdf9dc1\" ] }, \"clientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : { \"key\" : { \"salt\" : \"YWx0ZXJuYXRlLnBhZ2U=\", \"rules\" : [ { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 }, { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 } ], \"targets\" : [ { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 }, { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 } ], \"version\" : 65, \"prerequisites\" : [ { \"key\" : \"key\", \"variation\" : 7 }, { \"key\" : \"key\", \"variation\" : 7 } ], \"archived\" : true, \"trackEventsFallthrough\" : true, \"_environmentName\" : \"_environmentName\", \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"true\" : true, \"lastModified\" : 1469326565348, \"sel\" : \"45501b9314dc4641841af774cb038b96\", \"trackEvents\" : false, \"fallthrough\" : { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"variation\" : 5 }, \"offVariation\" : 2 } }, \"kind\" : \"boolean\", \"description\" : \"This flag controls whether test feature is turned on or not.\", \"creationDate\" : 1443652232590, \"tags\" : [ ], \"archived\" : false, \"goalIds\" : [ \"d7239405bd89c930e885aa76\", \"405bc930e88d7239d895aa76\" ], \"includeInSnippet\" : false, \"maintainerId\" : \"561c579cd8fd5c2704000001\", \"customProperties\" : { \"bugs\" : { \"name\" : \"Issue tracker ids\", \"value\" : [ \"123\", \"456\" ] }, \"deprecated\" : { \"name\" : \"Deprecated Date\", \"value\" : [ ] } }, \"defaults\" : { \"onVariation\" : 6, \"offVariation\" : 0 }, \"variations\" : [ { \"value\" : \"a\" }, { \"value\" : \"b\" } ], \"name\" : \"Test Feature\", \"_version\" : 23, \"key\" : \"test-feature\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /flags/{projectKey}/{featureFlagKey} : Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @return Action completed successfully. (status code 204)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "deleteFeatureFlag",
        summary = "Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Action completed successfully."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/flags/{projectKey}/{featureFlagKey}"
    )
    
    default ResponseEntity<Void> deleteFeatureFlag(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /flags/{projectKey}/{environmentKey}/{featureFlagKey}/dependent-flags : Get dependent flags for the flag in the environment specified in path parameters
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @return Dependent flags in a single envrionemnt response (status code 200)
     *         or Invalid access token. (status code 401)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "flagsProjectKeyEnvironmentKeyFeatureFlagKeyDependentFlagsGet",
        summary = "Get dependent flags for the flag in the environment specified in path parameters",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dependent flags in a single envrionemnt response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DependentFlagsByEnvironment.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/flags/{projectKey}/{environmentKey}/{featureFlagKey}/dependent-flags",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DependentFlagsByEnvironment> flagsProjectKeyEnvironmentKeyFeatureFlagKeyDependentFlagsGet(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"items\" : [ { \"_links\" : { \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" }, { \"_links\" : { \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /flags/{projectKey}/{featureFlagKey}/dependent-flags : Get dependent flags across all environments for the flag specified in the path parameters
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @return Dependent flags accross all environemnts in the project response (status code 200)
     *         or Invalid access token. (status code 401)
     *         or This is a beta API, you must pass beta in the LD-API-Version header to use it. (status code 403)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "flagsProjectKeyFeatureFlagKeyDependentFlagsGet",
        summary = "Get dependent flags across all environments for the flag specified in the path parameters",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dependent flags accross all environemnts in the project response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MultiEnvironmentDependentFlags.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "403", description = "This is a beta API, you must pass beta in the LD-API-Version header to use it.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsageError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/flags/{projectKey}/{featureFlagKey}/dependent-flags",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MultiEnvironmentDependentFlags> flagsProjectKeyFeatureFlagKeyDependentFlagsGet(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"items\" : [ { \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : [ { \"_links\" : { \"flagLink\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" }, { \"_links\" : { \"flagLink\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" } ], \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" }, { \"_links\" : { \"parent\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : [ { \"_links\" : { \"flagLink\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" }, { \"_links\" : { \"flagLink\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" } ], \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"name\" : \"name\", \"key\" : \"key\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey} : Get expiring user targets for feature flag
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @return User targets of the requested feature flag. (status code 200)
     *         or Invalid access token. (status code 401)
     */
    @Operation(
        operationId = "getExpiringUserTargets",
        summary = "Get expiring user targets for feature flag",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User targets of the requested feature flag.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserTargetingExpirationForFlags.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserTargetingExpirationForFlags> getExpiringUserTargets(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"_resourceId\" : { \"projectKey\" : \"projectKey\", \"kind\" : \"kind\", \"flagKey\" : \"flagKey\", \"key\" : \"key\", \"environmentKey\" : \"environmentKey\" }, \"variationId\" : \"variationId\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_id\" : \"_id\", \"_version\" : 0, \"userKey\" : \"userKey\", \"expirationDate\" : 1735689600000 }, { \"_resourceId\" : { \"projectKey\" : \"projectKey\", \"kind\" : \"kind\", \"flagKey\" : \"flagKey\", \"key\" : \"key\", \"environmentKey\" : \"environmentKey\" }, \"variationId\" : \"variationId\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_id\" : \"_id\", \"_version\" : 0, \"userKey\" : \"userKey\", \"expirationDate\" : 1735689600000 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /flags/{projectKey}/{featureFlagKey} : Get a single feature flag by key.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param env By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment. (optional)
     * @return Flag response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getFeatureFlag",
        summary = "Get a single feature flag by key.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Flag response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeatureFlag.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/flags/{projectKey}/{featureFlagKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FeatureFlag> getFeatureFlag(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "env", description = "By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "env", required = false) List<String> env
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archivedDate\" : 1443652232590, \"temporary\" : false, \"_maintainer\" : { \"firstName\" : \"Alan\", \"lastName\" : \"Turing\", \"_verified\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_pendingInvite\" : true, \"_lastSeen\" : 1469326565348, \"isBeta\" : true, \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_lastSeenMetadata\" : { \"tokenId\" : \"5fd2a1ee05600316d5cb3e96\" }, \"email\" : \"user@launchdarkly.com\", \"customRoles\" : [ \"5a580a01b4ff89217bdf9dc1\", \"5a580a01b4ff89217bdf9dc1\" ] }, \"clientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : { \"key\" : { \"salt\" : \"YWx0ZXJuYXRlLnBhZ2U=\", \"rules\" : [ { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 }, { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 } ], \"targets\" : [ { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 }, { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 } ], \"version\" : 65, \"prerequisites\" : [ { \"key\" : \"key\", \"variation\" : 7 }, { \"key\" : \"key\", \"variation\" : 7 } ], \"archived\" : true, \"trackEventsFallthrough\" : true, \"_environmentName\" : \"_environmentName\", \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"true\" : true, \"lastModified\" : 1469326565348, \"sel\" : \"45501b9314dc4641841af774cb038b96\", \"trackEvents\" : false, \"fallthrough\" : { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"variation\" : 5 }, \"offVariation\" : 2 } }, \"kind\" : \"boolean\", \"description\" : \"This flag controls whether test feature is turned on or not.\", \"creationDate\" : 1443652232590, \"tags\" : [ ], \"archived\" : false, \"goalIds\" : [ \"d7239405bd89c930e885aa76\", \"405bc930e88d7239d895aa76\" ], \"includeInSnippet\" : false, \"maintainerId\" : \"561c579cd8fd5c2704000001\", \"customProperties\" : { \"bugs\" : { \"name\" : \"Issue tracker ids\", \"value\" : [ \"123\", \"456\" ] }, \"deprecated\" : { \"name\" : \"Deprecated Date\", \"value\" : [ ] } }, \"defaults\" : { \"onVariation\" : 6, \"offVariation\" : 0 }, \"variations\" : [ { \"value\" : \"a\" }, { \"value\" : \"b\" } ], \"name\" : \"Test Feature\", \"_version\" : 23, \"key\" : \"test-feature\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /flags/{projectKey} : Get a list of all features in the given project.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param env By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment. (optional)
     * @param summary By default in api version &gt;&#x3D; 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary&#x3D;0 to include these fields for each flag returned. (optional)
     * @param archived When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags. (optional)
     * @param limit The number of objects to return. Defaults to -1, which returns everything. (optional)
     * @param offset Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items. (optional)
     * @param filter A comma-separated list of filters. Each filter is of the form field:value. (optional)
     * @param sort A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order. (optional)
     * @param tag Filter by tag. A tag can be used to group flags across projects. (optional)
     * @return Flags response. (status code 200)
     *         or Invalid access token. (status code 401)
     */
    @Operation(
        operationId = "getFeatureFlags",
        summary = "Get a list of all features in the given project.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Flags response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeatureFlags.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/flags/{projectKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FeatureFlags> getFeatureFlags(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "env", description = "By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "env", required = false) List<String> env,
        @Parameter(name = "summary", description = "By default in api version >= 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary=0 to include these fields for each flag returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "summary", required = false) Boolean summary,
        @Parameter(name = "archived", description = "When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "archived", required = false) Boolean archived,
        @Parameter(name = "limit", description = "The number of objects to return. Defaults to -1, which returns everything.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) BigDecimal limit,
        @Parameter(name = "offset", description = "Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) BigDecimal offset,
        @Parameter(name = "filter", description = "A comma-separated list of filters. Each filter is of the form field:value.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "sort", description = "A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "tag", description = "Filter by tag. A tag can be used to group flags across projects.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"totalCount\" : 2.027123023002322, \"items\" : [ { \"archivedDate\" : 1443652232590, \"temporary\" : false, \"_maintainer\" : { \"firstName\" : \"Alan\", \"lastName\" : \"Turing\", \"_verified\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_pendingInvite\" : true, \"_lastSeen\" : 1469326565348, \"isBeta\" : true, \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_lastSeenMetadata\" : { \"tokenId\" : \"5fd2a1ee05600316d5cb3e96\" }, \"email\" : \"user@launchdarkly.com\", \"customRoles\" : [ \"5a580a01b4ff89217bdf9dc1\", \"5a580a01b4ff89217bdf9dc1\" ] }, \"clientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : { \"key\" : { \"salt\" : \"YWx0ZXJuYXRlLnBhZ2U=\", \"rules\" : [ { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 }, { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 } ], \"targets\" : [ { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 }, { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 } ], \"version\" : 65, \"prerequisites\" : [ { \"key\" : \"key\", \"variation\" : 7 }, { \"key\" : \"key\", \"variation\" : 7 } ], \"archived\" : true, \"trackEventsFallthrough\" : true, \"_environmentName\" : \"_environmentName\", \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"true\" : true, \"lastModified\" : 1469326565348, \"sel\" : \"45501b9314dc4641841af774cb038b96\", \"trackEvents\" : false, \"fallthrough\" : { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"variation\" : 5 }, \"offVariation\" : 2 } }, \"kind\" : \"boolean\", \"description\" : \"This flag controls whether test feature is turned on or not.\", \"creationDate\" : 1443652232590, \"tags\" : [ ], \"archived\" : false, \"goalIds\" : [ \"d7239405bd89c930e885aa76\", \"405bc930e88d7239d895aa76\" ], \"includeInSnippet\" : false, \"maintainerId\" : \"561c579cd8fd5c2704000001\", \"customProperties\" : { \"bugs\" : { \"name\" : \"Issue tracker ids\", \"value\" : [ \"123\", \"456\" ] }, \"deprecated\" : { \"name\" : \"Deprecated Date\", \"value\" : [ ] } }, \"defaults\" : { \"onVariation\" : 6, \"offVariation\" : 0 }, \"variations\" : [ { \"value\" : \"a\" }, { \"value\" : \"b\" } ], \"name\" : \"Test Feature\", \"_version\" : 23, \"key\" : \"test-feature\" }, { \"archivedDate\" : 1443652232590, \"temporary\" : false, \"_maintainer\" : { \"firstName\" : \"Alan\", \"lastName\" : \"Turing\", \"_verified\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_pendingInvite\" : true, \"_lastSeen\" : 1469326565348, \"isBeta\" : true, \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_lastSeenMetadata\" : { \"tokenId\" : \"5fd2a1ee05600316d5cb3e96\" }, \"email\" : \"user@launchdarkly.com\", \"customRoles\" : [ \"5a580a01b4ff89217bdf9dc1\", \"5a580a01b4ff89217bdf9dc1\" ] }, \"clientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : { \"key\" : { \"salt\" : \"YWx0ZXJuYXRlLnBhZ2U=\", \"rules\" : [ { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 }, { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 } ], \"targets\" : [ { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 }, { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 } ], \"version\" : 65, \"prerequisites\" : [ { \"key\" : \"key\", \"variation\" : 7 }, { \"key\" : \"key\", \"variation\" : 7 } ], \"archived\" : true, \"trackEventsFallthrough\" : true, \"_environmentName\" : \"_environmentName\", \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"true\" : true, \"lastModified\" : 1469326565348, \"sel\" : \"45501b9314dc4641841af774cb038b96\", \"trackEvents\" : false, \"fallthrough\" : { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"variation\" : 5 }, \"offVariation\" : 2 } }, \"kind\" : \"boolean\", \"description\" : \"This flag controls whether test feature is turned on or not.\", \"creationDate\" : 1443652232590, \"tags\" : [ ], \"archived\" : false, \"goalIds\" : [ \"d7239405bd89c930e885aa76\", \"405bc930e88d7239d895aa76\" ], \"includeInSnippet\" : false, \"maintainerId\" : \"561c579cd8fd5c2704000001\", \"customProperties\" : { \"bugs\" : { \"name\" : \"Issue tracker ids\", \"value\" : [ \"123\", \"456\" ] }, \"deprecated\" : { \"name\" : \"Deprecated Date\", \"value\" : [ ] } }, \"defaults\" : { \"onVariation\" : 6, \"offVariation\" : 0 }, \"variations\" : [ { \"value\" : \"a\" }, { \"value\" : \"b\" } ], \"name\" : \"Test Feature\", \"_version\" : 23, \"key\" : \"test-feature\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey} : Update, add, or delete expiring user targets on feature flag
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. &#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches&#39;. The addition of comments is also supported. (required)
     * @return User targeting expirations on feature flag response. (status code 200)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "patchExpiringUserTargets",
        summary = "Update, add, or delete expiring user targets on feature flag",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User targeting expirations on feature flag response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserTargetingExpirationForFlags.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserTargetingExpirationForFlags> patchExpiringUserTargets(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "SemanticPatchWithComment", description = "Requires a Semantic Patch representation of the desired changes to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'. The addition of comments is also supported.", required = true) @Valid @RequestBody List<@Valid SemanticPatchOperation> semanticPatchWithComment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"_resourceId\" : { \"projectKey\" : \"projectKey\", \"kind\" : \"kind\", \"flagKey\" : \"flagKey\", \"key\" : \"key\", \"environmentKey\" : \"environmentKey\" }, \"variationId\" : \"variationId\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_id\" : \"_id\", \"_version\" : 0, \"userKey\" : \"userKey\", \"expirationDate\" : 1735689600000 }, { \"_resourceId\" : { \"projectKey\" : \"projectKey\", \"kind\" : \"kind\", \"flagKey\" : \"flagKey\", \"key\" : \"key\", \"environmentKey\" : \"environmentKey\" }, \"variationId\" : \"variationId\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_id\" : \"_id\", \"_version\" : 0, \"userKey\" : \"userKey\", \"expirationDate\" : 1735689600000 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /flags/{projectKey}/{featureFlagKey} : Perform a partial update to a feature.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param patchComment Requires a JSON Patch representation of the desired changes to the project, and an optional comment. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported. (required)
     * @return Feature flag response. (status code 200)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "patchFeatureFlag",
        summary = "Perform a partial update to a feature.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flag response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeatureFlag.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/flags/{projectKey}/{featureFlagKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FeatureFlag> patchFeatureFlag(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "patchComment", description = "Requires a JSON Patch representation of the desired changes to the project, and an optional comment. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.", required = true) @Valid @RequestBody PatchFeatureFlagRequest patchComment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archivedDate\" : 1443652232590, \"temporary\" : false, \"_maintainer\" : { \"firstName\" : \"Alan\", \"lastName\" : \"Turing\", \"_verified\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_pendingInvite\" : true, \"_lastSeen\" : 1469326565348, \"isBeta\" : true, \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_lastSeenMetadata\" : { \"tokenId\" : \"5fd2a1ee05600316d5cb3e96\" }, \"email\" : \"user@launchdarkly.com\", \"customRoles\" : [ \"5a580a01b4ff89217bdf9dc1\", \"5a580a01b4ff89217bdf9dc1\" ] }, \"clientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : { \"key\" : { \"salt\" : \"YWx0ZXJuYXRlLnBhZ2U=\", \"rules\" : [ { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 }, { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 } ], \"targets\" : [ { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 }, { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 } ], \"version\" : 65, \"prerequisites\" : [ { \"key\" : \"key\", \"variation\" : 7 }, { \"key\" : \"key\", \"variation\" : 7 } ], \"archived\" : true, \"trackEventsFallthrough\" : true, \"_environmentName\" : \"_environmentName\", \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"true\" : true, \"lastModified\" : 1469326565348, \"sel\" : \"45501b9314dc4641841af774cb038b96\", \"trackEvents\" : false, \"fallthrough\" : { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"variation\" : 5 }, \"offVariation\" : 2 } }, \"kind\" : \"boolean\", \"description\" : \"This flag controls whether test feature is turned on or not.\", \"creationDate\" : 1443652232590, \"tags\" : [ ], \"archived\" : false, \"goalIds\" : [ \"d7239405bd89c930e885aa76\", \"405bc930e88d7239d895aa76\" ], \"includeInSnippet\" : false, \"maintainerId\" : \"561c579cd8fd5c2704000001\", \"customProperties\" : { \"bugs\" : { \"name\" : \"Issue tracker ids\", \"value\" : [ \"123\", \"456\" ] }, \"deprecated\" : { \"name\" : \"Deprecated Date\", \"value\" : [ ] } }, \"defaults\" : { \"onVariation\" : 6, \"offVariation\" : 0 }, \"variations\" : [ { \"value\" : \"a\" }, { \"value\" : \"b\" } ], \"name\" : \"Test Feature\", \"_version\" : 23, \"key\" : \"test-feature\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /flags/{projectKey} : Creates a new feature flag.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param featureFlagBody Create a new feature flag. (required)
     * @param clone The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone&#x3D;flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag. (optional)
     * @return Flag response. (status code 201)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "postFeatureFlag",
        summary = "Creates a new feature flag.",
        tags = { "Feature flags" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Flag response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FeatureFlag.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/flags/{projectKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FeatureFlag> postFeatureFlag(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "featureFlagBody", description = "Create a new feature flag.", required = true) @Valid @RequestBody PostFeatureFlagRequest featureFlagBody,
        @Parameter(name = "clone", description = "The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone=flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "clone", required = false) String clone
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"archivedDate\" : 1443652232590, \"temporary\" : false, \"_maintainer\" : { \"firstName\" : \"Alan\", \"lastName\" : \"Turing\", \"_verified\" : true, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_pendingInvite\" : true, \"_lastSeen\" : 1469326565348, \"isBeta\" : true, \"_id\" : \"5a580a01b4ff89217bdf9dc1\", \"_lastSeenMetadata\" : { \"tokenId\" : \"5fd2a1ee05600316d5cb3e96\" }, \"email\" : \"user@launchdarkly.com\", \"customRoles\" : [ \"5a580a01b4ff89217bdf9dc1\", \"5a580a01b4ff89217bdf9dc1\" ] }, \"clientSideAvailability\" : { \"usingEnvironmentId\" : true, \"usingMobileKey\" : true }, \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"environments\" : { \"key\" : { \"salt\" : \"YWx0ZXJuYXRlLnBhZ2U=\", \"rules\" : [ { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 }, { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"clauses\" : [ { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" }, { \"op\" : \"in\", \"negate\" : true, \"values\" : [ \"Top Customers\", \"Top Customers\" ], \"_id\" : \"_id\", \"attribute\" : \"groups\" } ], \"description\" : \"description\", \"_id\" : \"_id\", \"trackEvents\" : true, \"variation\" : 9 } ], \"targets\" : [ { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 }, { \"values\" : [ \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\", \"\\"1461797806427-7-115540266\\", \\"00142875-a39d-4028-a3b7-987ccd151649\\"\" ], \"variation\" : 3 } ], \"version\" : 65, \"prerequisites\" : [ { \"key\" : \"key\", \"variation\" : 7 }, { \"key\" : \"key\", \"variation\" : 7 } ], \"archived\" : true, \"trackEventsFallthrough\" : true, \"_environmentName\" : \"_environmentName\", \"_site\" : { \"href\" : \"/features/sort.order\", \"type\" : \"text/html\" }, \"true\" : true, \"lastModified\" : 1469326565348, \"sel\" : \"45501b9314dc4641841af774cb038b96\", \"trackEvents\" : false, \"fallthrough\" : { \"rollout\" : { \"variations\" : [ { \"weight\" : 5, \"variation\" : 1 }, { \"weight\" : 5, \"variation\" : 1 } ], \"bucketBy\" : \"bucketBy\" }, \"variation\" : 5 }, \"offVariation\" : 2 } }, \"kind\" : \"boolean\", \"description\" : \"This flag controls whether test feature is turned on or not.\", \"creationDate\" : 1443652232590, \"tags\" : [ ], \"archived\" : false, \"goalIds\" : [ \"d7239405bd89c930e885aa76\", \"405bc930e88d7239d895aa76\" ], \"includeInSnippet\" : false, \"maintainerId\" : \"561c579cd8fd5c2704000001\", \"customProperties\" : { \"bugs\" : { \"name\" : \"Issue tracker ids\", \"value\" : [ \"123\", \"456\" ] }, \"deprecated\" : { \"name\" : \"Deprecated Date\", \"value\" : [ ] } }, \"defaults\" : { \"onVariation\" : 6, \"offVariation\" : 0 }, \"variations\" : [ { \"value\" : \"a\" }, { \"value\" : \"b\" } ], \"name\" : \"Test Feature\", \"_version\" : 23, \"key\" : \"test-feature\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
