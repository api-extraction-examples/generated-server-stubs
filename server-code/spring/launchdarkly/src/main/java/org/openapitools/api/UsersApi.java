/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.PutFlagSettingRequest;
import org.openapitools.model.SemanticPatchOperation;
import org.openapitools.model.UserFlagSetting;
import org.openapitools.model.UserFlagSettings;
import org.openapitools.model.UserRecord;
import org.openapitools.model.UserTargetingExpirationOnFlagsForUser;
import org.openapitools.model.Users;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:38.380306-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Users", description = "the Users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /users/{projectKey}/{environmentKey}/{userKey} : Delete a user by ID.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userKey The user&#39;s key. (required)
     * @return Action completed successfully. (status code 204)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete a user by ID.",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Action completed successfully."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{projectKey}/{environmentKey}/{userKey}"
    )
    
    default ResponseEntity<Void> deleteUser(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userKey", description = "The user's key.", required = true, in = ParameterIn.PATH) @PathVariable("userKey") String userKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey} : Get expiring dates on flags for user
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userKey The user&#39;s key. (required)
     * @return User targets of the requested feature flag. (status code 200)
     *         or Invalid access token. (status code 401)
     */
    @Operation(
        operationId = "getExpiringUserTargetsForUser",
        summary = "Get expiring dates on flags for user",
        tags = { "User settings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User targets of the requested feature flag.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserTargetingExpirationOnFlagsForUser.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserTargetingExpirationOnFlagsForUser> getExpiringUserTargetsForUser(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userKey", description = "The user's key.", required = true, in = ParameterIn.PATH) @PathVariable("userKey") String userKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"_resourceId\" : { \"projectKey\" : \"projectKey\", \"kind\" : \"kind\", \"flagKey\" : \"flagKey\", \"key\" : \"key\", \"environmentKey\" : \"environmentKey\" }, \"variationId\" : \"variationId\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_id\" : \"_id\", \"_version\" : 0, \"userKey\" : \"userKey\", \"expirationDate\" : 1735689600000 }, { \"_resourceId\" : { \"projectKey\" : \"projectKey\", \"kind\" : \"kind\", \"flagKey\" : \"flagKey\", \"key\" : \"key\", \"environmentKey\" : \"environmentKey\" }, \"variationId\" : \"variationId\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_id\" : \"_id\", \"_version\" : 0, \"userKey\" : \"userKey\", \"expirationDate\" : 1735689600000 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{projectKey}/{environmentKey}/{userKey} : Get a user by key.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userKey The user&#39;s key. (required)
     * @return User response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getUser",
        summary = "Get a user by key.",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserRecord.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{projectKey}/{environmentKey}/{userKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserRecord> getUser(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userKey", description = "The user's key.", required = true, in = ParameterIn.PATH) @PathVariable("userKey") String userKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"environmentId\" : \"54ac2d97de674204ddd61096\", \"lastPing\" : \"2015-03-03T02:37:22.492Z\", \"avatar\" : \"https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg\", \"ownerId\" : \"5a580a01b4ff89217bdf9dc1\", \"user\" : { \"secondary\" : \"secondary\", \"country\" : \"country\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"custom\" : { \"company\" : \"example.com\" }, \"ip\" : \"ip\", \"name\" : \"Bob Loblaw\", \"anonymous\" : true, \"avatar\" : \"avatar\", \"email\" : \"email\", \"key\" : \"a00bea\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey} : Fetch a single flag setting for a user by key.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userKey The user&#39;s key. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @return User flag setting response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getUserFlagSetting",
        summary = "Fetch a single flag setting for a user by key.",
        tags = { "User settings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User flag setting response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserFlagSetting.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserFlagSetting> getUserFlagSetting(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userKey", description = "The user's key.", required = true, in = ParameterIn.PATH) @PathVariable("userKey") String userKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_value\" : true, \"setting\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{projectKey}/{environmentKey}/{userKey}/flags : Fetch a single flag setting for a user by key.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userKey The user&#39;s key. (required)
     * @return User flags settings response. (status code 200)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "getUserFlagSettings",
        summary = "Fetch a single flag setting for a user by key.",
        tags = { "User settings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User flags settings response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserFlagSettings.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{projectKey}/{environmentKey}/{userKey}/flags",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserFlagSettings> getUserFlagSettings(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userKey", description = "The user's key.", required = true, in = ParameterIn.PATH) @PathVariable("userKey") String userKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : { \"alternate.page\" : { \"_links\" : { \"self\" : { \"href\" : \"/api/v2/users/lacuna/production/Abbie_Braun/flags/alternate.page\", \"type\" : \"application/json\" } }, \"_value\" : \"false,\" }, \"sort.order\" : { \"_links\" : { \"_value\" : true, \"self\" : { \"href\" : \"/api/v2/users/lacuna/production/Abbie_Braun/flags/sort.order\", \"type\" : \"application/json\" } } } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{projectKey}/{environmentKey} : List all users in the environment. Includes the total count of users. In each page, there will be up to &#39;limit&#39; users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param limit Pagination limit. (optional)
     * @param h This parameter is required when following \&quot;next\&quot; links. (optional)
     * @param scrollId This parameter is required when following \&quot;next\&quot; links. (optional)
     * @return Users response. (status code 200)
     *         or Invalid access token. (status code 401)
     */
    @Operation(
        operationId = "getUsers",
        summary = "List all users in the environment. Includes the total count of users. In each page, there will be up to 'limit' users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Users.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid access token.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{projectKey}/{environmentKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Users> getUsers(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "limit", description = "Pagination limit.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "h", description = "This parameter is required when following \"next\" links.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "h", required = false) String h,
        @Parameter(name = "scrollId", description = "This parameter is required when following \"next\" links.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "scrollId", required = false) String scrollId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"totalCount\" : 3.0, \"items\" : [ { \"environmentId\" : \"54ac2d97de674204ddd61096\", \"lastPing\" : \"2015-03-03T02:37:22.492Z\", \"avatar\" : \"https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg\", \"ownerId\" : \"5a580a01b4ff89217bdf9dc1\", \"user\" : { \"secondary\" : \"secondary\", \"country\" : \"country\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"custom\" : { \"company\" : \"example.com\" }, \"ip\" : \"ip\", \"name\" : \"Bob Loblaw\", \"anonymous\" : true, \"avatar\" : \"avatar\", \"email\" : \"email\", \"key\" : \"a00bea\" } }, { \"environmentId\" : \"54ac2d97de674204ddd61096\", \"lastPing\" : \"2015-03-03T02:37:22.492Z\", \"avatar\" : \"https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg\", \"ownerId\" : \"5a580a01b4ff89217bdf9dc1\", \"user\" : { \"secondary\" : \"secondary\", \"country\" : \"country\", \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"custom\" : { \"company\" : \"example.com\" }, \"ip\" : \"ip\", \"name\" : \"Bob Loblaw\", \"anonymous\" : true, \"avatar\" : \"avatar\", \"email\" : \"email\", \"key\" : \"a00bea\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey} : Update, add, or delete expiring user targets for a single user on all flags
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userKey The user&#39;s key. (required)
     * @param semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. &#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches&#39;. The addition of comments is also supported. (required)
     * @return User Targeting expiration for single user on all flags response. (status code 200)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     *         or Status conflict. (status code 409)
     */
    @Operation(
        operationId = "patchExpiringUserTargetsForFlags",
        summary = "Update, add, or delete expiring user targets for a single user on all flags",
        tags = { "User settings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User Targeting expiration for single user on all flags response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserTargetingExpirationOnFlagsForUser.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier."),
            @ApiResponse(responseCode = "409", description = "Status conflict.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserTargetingExpirationOnFlagsForUser> patchExpiringUserTargetsForFlags(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userKey", description = "The user's key.", required = true, in = ParameterIn.PATH) @PathVariable("userKey") String userKey,
        @Parameter(name = "SemanticPatchWithComment", description = "Requires a Semantic Patch representation of the desired changes to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'. The addition of comments is also supported.", required = true) @Valid @RequestBody List<@Valid SemanticPatchOperation> semanticPatchWithComment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"items\" : [ { \"_resourceId\" : { \"projectKey\" : \"projectKey\", \"kind\" : \"kind\", \"flagKey\" : \"flagKey\", \"key\" : \"key\", \"environmentKey\" : \"environmentKey\" }, \"variationId\" : \"variationId\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_id\" : \"_id\", \"_version\" : 0, \"userKey\" : \"userKey\", \"expirationDate\" : 1735689600000 }, { \"_resourceId\" : { \"projectKey\" : \"projectKey\", \"kind\" : \"kind\", \"flagKey\" : \"flagKey\", \"key\" : \"key\", \"environmentKey\" : \"environmentKey\" }, \"variationId\" : \"variationId\", \"_links\" : { \"next\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" }, \"self\" : { \"href\" : \"/api/v2/endpoint\", \"type\" : \"application/json\" } }, \"_id\" : \"_id\", \"_version\" : 0, \"userKey\" : \"userKey\", \"expirationDate\" : 1735689600000 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey} : Specifically enable or disable a feature flag for a user based on their key.
     *
     * @param projectKey The project key, used to tie the flags together under one project so they can be managed together. (required)
     * @param environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together. (required)
     * @param userKey The user&#39;s key. (required)
     * @param featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code. (required)
     * @param userSettingsBody  (required)
     * @return Action completed successfully. (status code 204)
     *         or Invalid request body. (status code 400)
     *         or Invalid access token. (status code 401)
     *         or Invalid resource specifier. (status code 404)
     */
    @Operation(
        operationId = "putFlagSetting",
        summary = "Specifically enable or disable a feature flag for a user based on their key.",
        tags = { "User settings" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Action completed successfully."),
            @ApiResponse(responseCode = "400", description = "Invalid request body."),
            @ApiResponse(responseCode = "401", description = "Invalid access token."),
            @ApiResponse(responseCode = "404", description = "Invalid resource specifier.")
        },
        security = {
            @SecurityRequirement(name = "Token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> putFlagSetting(
        @Parameter(name = "projectKey", description = "The project key, used to tie the flags together under one project so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("projectKey") String projectKey,
        @Parameter(name = "environmentKey", description = "The environment key, used to tie together flag configuration and users under one environment so they can be managed together.", required = true, in = ParameterIn.PATH) @PathVariable("environmentKey") String environmentKey,
        @Parameter(name = "userKey", description = "The user's key.", required = true, in = ParameterIn.PATH) @PathVariable("userKey") String userKey,
        @Parameter(name = "featureFlagKey", description = "The feature flag's key. The key identifies the flag in your code.", required = true, in = ParameterIn.PATH) @PathVariable("featureFlagKey") String featureFlagKey,
        @Parameter(name = "userSettingsBody", description = "", required = true) @Valid @RequestBody PutFlagSettingRequest userSettingsBody
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
