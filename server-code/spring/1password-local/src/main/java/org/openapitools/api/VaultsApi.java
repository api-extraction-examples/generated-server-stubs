/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ErrorResponse;
import java.io.File;
import org.openapitools.model.FullItem;
import org.openapitools.model.Item;
import org.openapitools.model.PatchInner;
import java.util.UUID;
import org.openapitools.model.Vault;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:42:26.239496-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Items", description = "Access and manage items inside 1Password Vaults")
public interface VaultsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /vaults/{vaultUuid}/items : Create a new Item
     *
     * @param vaultUuid The UUID of the Vault to create an Item in (required)
     * @param fullItem  (optional)
     * @return OK (status code 200)
     *         or Unable to create item due to invalid input (status code 400)
     *         or Invalid or missing token (status code 401)
     *         or Unauthorized access (status code 403)
     *         or Item not found (status code 404)
     */
    @Operation(
        operationId = "createVaultItem",
        summary = "Create a new Item",
        tags = { "Items" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FullItem.class))
            }),
            @ApiResponse(responseCode = "400", description = "Unable to create item due to invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vaults/{vaultUuid}/items",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FullItem> createVaultItem(
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "vaultUuid", description = "The UUID of the Vault to create an Item in", required = true, in = ParameterIn.PATH) @PathVariable("vaultUuid") String vaultUuid,
        @Parameter(name = "FullItem", description = "") @Valid @RequestBody(required = false) FullItem fullItem
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /vaults/{vaultUuid}/items/{itemUuid} : Delete an Item
     *
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @return Successfully deleted an item (status code 204)
     *         or Invalid or missing token (status code 401)
     *         or Unauthorized access (status code 403)
     *         or Item not found (status code 404)
     */
    @Operation(
        operationId = "deleteVaultItem",
        summary = "Delete an Item",
        tags = { "Items" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successfully deleted an item"),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/vaults/{vaultUuid}/items/{itemUuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteVaultItem(
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "vaultUuid", description = "The UUID of the Vault the item is in", required = true, in = ParameterIn.PATH) @PathVariable("vaultUuid") String vaultUuid,
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "itemUuid", description = "The UUID of the Item to update", required = true, in = ParameterIn.PATH) @PathVariable("itemUuid") String itemUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content : Get the content of a File
     *
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item the File is in (required)
     * @param fileUuid UUID of the file to get content from (required)
     * @return Success (status code 200)
     *         or Invalid or missing token (status code 401)
     *         or File not found (status code 404)
     */
    @Operation(
        operationId = "downloadFileByID",
        summary = "Get the content of a File",
        tags = { "Files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "File not found", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content",
        produces = { "application/octet-stream", "application/json" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> downloadFileByID(
        @Parameter(name = "vaultUuid", description = "The UUID of the Vault the item is in", required = true, in = ParameterIn.PATH) @PathVariable("vaultUuid") UUID vaultUuid,
        @Parameter(name = "itemUuid", description = "The UUID of the Item the File is in", required = true, in = ParameterIn.PATH) @PathVariable("itemUuid") UUID itemUuid,
        @Parameter(name = "fileUuid", description = "UUID of the file to get content from", required = true, in = ParameterIn.PATH) @PathVariable("fileUuid") String fileUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid} : Get the details of a File
     *
     * @param vaultUuid The UUID of the Vault to fetch Item from (required)
     * @param itemUuid The UUID of the Item to fetch File from (required)
     * @param fileUuid The UUID of the File to fetch (required)
     * @param inlineFiles Tells server to return the base64-encoded file contents in the response. (optional)
     * @return OK (status code 200)
     *         or Invalid or missing token (status code 401)
     *         or Unauthorized access (status code 403)
     *         or File not found (status code 404)
     *         or File content too large to display (status code 413)
     */
    @Operation(
        operationId = "getDetailsOfFileById",
        summary = "Get the details of a File",
        tags = { "Files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = File.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "File not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "413", description = "File content too large to display", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<File> getDetailsOfFileById(
        @Parameter(name = "vaultUuid", description = "The UUID of the Vault to fetch Item from", required = true, in = ParameterIn.PATH) @PathVariable("vaultUuid") UUID vaultUuid,
        @Parameter(name = "itemUuid", description = "The UUID of the Item to fetch File from", required = true, in = ParameterIn.PATH) @PathVariable("itemUuid") UUID itemUuid,
        @Parameter(name = "fileUuid", description = "The UUID of the File to fetch", required = true, in = ParameterIn.PATH) @PathVariable("fileUuid") UUID fileUuid,
        @Parameter(name = "inline_files", description = "Tells server to return the base64-encoded file contents in the response.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "inline_files", required = false) Boolean inlineFiles
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"content\" : \"VGhlIGZ1dHVyZSBiZWxvbmdzIHRvIHRoZSBjdXJpb3VzLgo=\", \"content_path\" : \"v1/vaults/ionaiwtdvgclrixbt6ztpqcxnq/items/p7eflcy7f5mk7vg6zrzf5rjjyu/files/6r65pjq33banznomn7q22sj44e/content\", \"id\" : \"6r65pjq33banznomn7q22sj44e\", \"name\" : \"foo.txt\", \"size\" : 35 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vaults/{vaultUuid}/items/{itemUuid}/files : Get all the files inside an Item
     *
     * @param vaultUuid The UUID of the Vault to fetch Items from (required)
     * @param itemUuid The UUID of the Item to fetch files from (required)
     * @param inlineFiles Tells server to return the base64-encoded file contents in the response. (optional)
     * @return OK (status code 200)
     *         or Invalid or missing token (status code 401)
     *         or Item not found (status code 404)
     *         or File content too large to display (status code 413)
     */
    @Operation(
        operationId = "getItemFiles",
        summary = "Get all the files inside an Item",
        tags = { "Files" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = File.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "413", description = "File content too large to display", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vaults/{vaultUuid}/items/{itemUuid}/files",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<File>> getItemFiles(
        @Parameter(name = "vaultUuid", description = "The UUID of the Vault to fetch Items from", required = true, in = ParameterIn.PATH) @PathVariable("vaultUuid") UUID vaultUuid,
        @Parameter(name = "itemUuid", description = "The UUID of the Item to fetch files from", required = true, in = ParameterIn.PATH) @PathVariable("itemUuid") UUID itemUuid,
        @Parameter(name = "inline_files", description = "Tells server to return the base64-encoded file contents in the response.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "inline_files", required = false) Boolean inlineFiles
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"content\" : \"VGhlIGZ1dHVyZSBiZWxvbmdzIHRvIHRoZSBjdXJpb3VzLgo=\", \"content_path\" : \"v1/vaults/ionaiwtdvgclrixbt6ztpqcxnq/items/p7eflcy7f5mk7vg6zrzf5rjjyu/files/6r65pjq33banznomn7q22sj44e/content\", \"id\" : \"6r65pjq33banznomn7q22sj44e\", \"name\" : \"foo.txt\", \"size\" : 35 }, { \"content\" : \"VGhlIGZ1dHVyZSBiZWxvbmdzIHRvIHRoZSBjdXJpb3VzLgo=\", \"content_path\" : \"v1/vaults/ionaiwtdvgclrixbt6ztpqcxnq/items/p7eflcy7f5mk7vg6zrzf5rjjyu/files/6r65pjq33banznomn7q22sj44e/content\", \"id\" : \"6r65pjq33banznomn7q22sj44e\", \"name\" : \"foo.txt\", \"size\" : 35 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vaults/{vaultUuid} : Get Vault details and metadata
     *
     * @param vaultUuid The UUID of the Vault to fetch Items from (required)
     * @return OK (status code 200)
     *         or Invalid or missing token (status code 401)
     *         or Unauthorized access (status code 403)
     *         or Vault not found (status code 404)
     */
    @Operation(
        operationId = "getVaultById",
        summary = "Get Vault details and metadata",
        tags = { "Vaults" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Vault.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Vault not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vaults/{vaultUuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Vault> getVaultById(
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "vaultUuid", description = "The UUID of the Vault to fetch Items from", required = true, in = ParameterIn.PATH) @PathVariable("vaultUuid") String vaultUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"attributeVersion\" : 0, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"USER_CREATED\", \"contentVersion\" : 6, \"items\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vaults/{vaultUuid}/items/{itemUuid} : Get the details of an Item
     *
     * @param vaultUuid The UUID of the Vault to fetch Item from (required)
     * @param itemUuid The UUID of the Item to fetch (required)
     * @return OK (status code 200)
     *         or Invalid or missing token (status code 401)
     *         or Unauthorized access (status code 403)
     *         or Item not found (status code 404)
     */
    @Operation(
        operationId = "getVaultItemById",
        summary = "Get the details of an Item",
        tags = { "Items" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FullItem.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vaults/{vaultUuid}/items/{itemUuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FullItem> getVaultItemById(
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "vaultUuid", description = "The UUID of the Vault to fetch Item from", required = true, in = ParameterIn.PATH) @PathVariable("vaultUuid") String vaultUuid,
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "itemUuid", description = "The UUID of the Item to fetch", required = true, in = ParameterIn.PATH) @PathVariable("itemUuid") String itemUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vaults/{vaultUuid}/items : Get all items for inside a Vault
     *
     * @param vaultUuid The UUID of the Vault to fetch Items from (required)
     * @param filter Filter the Item collection based on Item name using SCIM eq filter (optional)
     * @return OK (status code 200)
     *         or Invalid or missing token (status code 401)
     *         or Vault not found (status code 404)
     */
    @Operation(
        operationId = "getVaultItems",
        summary = "Get all items for inside a Vault",
        tags = { "Items" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Item.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Vault not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vaults/{vaultUuid}/items",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Item>> getVaultItems(
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "vaultUuid", description = "The UUID of the Vault to fetch Items from", required = true, in = ParameterIn.PATH) @PathVariable("vaultUuid") String vaultUuid,
        @Parameter(name = "filter", description = "Filter the Item collection based on Item name using SCIM eq filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"urls\" : [ { \"href\" : \"https://example.com\", \"primary\" : true }, { \"href\" : \"https://example.org\" } ], \"id\" : \"id\", \"state\" : \"ARCHIVED\", \"category\" : \"LOGIN\", \"title\" : \"title\", \"favorite\" : false, \"version\" : 0, \"lastEditedBy\" : \"lastEditedBy\", \"vault\" : { \"id\" : \"id\" }, \"tags\" : [ \"tags\", \"tags\" ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"urls\" : [ { \"href\" : \"https://example.com\", \"primary\" : true }, { \"href\" : \"https://example.org\" } ], \"id\" : \"id\", \"state\" : \"ARCHIVED\", \"category\" : \"LOGIN\", \"title\" : \"title\", \"favorite\" : false, \"version\" : 0, \"lastEditedBy\" : \"lastEditedBy\", \"vault\" : { \"id\" : \"id\" }, \"tags\" : [ \"tags\", \"tags\" ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vaults : Get all Vaults
     *
     * @param filter Filter the Vault collection based on Vault name using SCIM eq filter (optional)
     * @return OK (status code 200)
     *         or Invalid or missing token (status code 401)
     */
    @Operation(
        operationId = "getVaults",
        summary = "Get all Vaults",
        tags = { "Vaults" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Vault.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vaults",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Vault>> getVaults(
        @Parameter(name = "filter", description = "Filter the Vault collection based on Vault name using SCIM eq filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"attributeVersion\" : 0, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"USER_CREATED\", \"contentVersion\" : 6, \"items\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"attributeVersion\" : 0, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"USER_CREATED\", \"contentVersion\" : 6, \"items\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /vaults/{vaultUuid}/items/{itemUuid} : Update a subset of Item attributes
     * Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports &#x60;add&#x60;, &#x60;remove&#x60; and &#x60;replace&#x60; operations.  When modifying a specific ItemField, the ItemField&#39;s ID in the &#x60;path&#x60; attribute of the operation object: &#x60;/fields/{fieldId}&#x60; 
     *
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param patchInner  (optional)
     * @return OK - Item updated. If no Patch operations were provided, Item is unmodified. (status code 200)
     *         or Invalid or missing token (status code 401)
     *         or Unauthorized access (status code 403)
     *         or Item not found (status code 404)
     */
    @Operation(
        operationId = "patchVaultItem",
        summary = "Update a subset of Item attributes",
        description = "Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.  When modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}` ",
        tags = { "Items" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK - Item updated. If no Patch operations were provided, Item is unmodified.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FullItem.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/vaults/{vaultUuid}/items/{itemUuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FullItem> patchVaultItem(
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "vaultUuid", description = "The UUID of the Vault the item is in", required = true, in = ParameterIn.PATH) @PathVariable("vaultUuid") String vaultUuid,
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "itemUuid", description = "The UUID of the Item to update", required = true, in = ParameterIn.PATH) @PathVariable("itemUuid") String itemUuid,
        @Parameter(name = "PatchInner", description = "") @Valid @RequestBody(required = false) List<@Valid PatchInner> patchInner
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /vaults/{vaultUuid}/items/{itemUuid} : Update an Item
     *
     * @param vaultUuid The UUID of the Item&#39;s Vault (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @param fullItem  (optional)
     * @return OK (status code 200)
     *         or Unable to create item due to invalid input (status code 400)
     *         or Invalid or missing token (status code 401)
     *         or Unauthorized access (status code 403)
     *         or Item not found (status code 404)
     */
    @Operation(
        operationId = "updateVaultItem",
        summary = "Update an Item",
        tags = { "Items" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FullItem.class))
            }),
            @ApiResponse(responseCode = "400", description = "Unable to create item due to invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Item not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ConnectToken")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/vaults/{vaultUuid}/items/{itemUuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FullItem> updateVaultItem(
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "vaultUuid", description = "The UUID of the Item's Vault", required = true, in = ParameterIn.PATH) @PathVariable("vaultUuid") String vaultUuid,
        @Pattern(regexp = "^[\\da-z]{26}$") @Parameter(name = "itemUuid", description = "The UUID of the Item to update", required = true, in = ParameterIn.PATH) @PathVariable("itemUuid") String itemUuid,
        @Parameter(name = "FullItem", description = "") @Valid @RequestBody(required = false) FullItem fullItem
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
