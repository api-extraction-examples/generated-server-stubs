/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ApiHealth;
import org.openapitools.model.Error;
import org.openapitools.model.PostAspspsOKBody;
import org.openapitools.model.PostAspspsParamsBody;
import org.openapitools.model.PostPaymentsConsentsRawOKBody;
import org.openapitools.model.PostPaymentsConsentsRawParamsBody;
import org.openapitools.model.PostPaymentsCrossBorderCreditTransfersConsentsOKBody;
import org.openapitools.model.PostPaymentsCrossBorderCreditTransfersConsentsParamsBody;
import org.openapitools.model.PostPaymentsCrossBorderCreditTransfersOKBody;
import org.openapitools.model.PostPaymentsCrossBorderCreditTransfersParamsBody;
import org.openapitools.model.PostPaymentsCrossBorderCreditTransfersPaymentStatusOKBody;
import org.openapitools.model.PostPaymentsCrossBorderCreditTransfersPaymentStatusParamsBody;
import org.openapitools.model.PostPaymentsDomesticCreditTransfersConsentsOKBody;
import org.openapitools.model.PostPaymentsDomesticCreditTransfersConsentsParamsBody;
import org.openapitools.model.PostPaymentsDomesticCreditTransfersOKBody;
import org.openapitools.model.PostPaymentsDomesticCreditTransfersParamsBody;
import org.openapitools.model.PostPaymentsDomesticCreditTransfersPaymentStatusOKBody;
import org.openapitools.model.PostPaymentsDomesticCreditTransfersPaymentStatusParamsBody;
import org.openapitools.model.PostPaymentsSepaCreditTransfersConsentsOKBody;
import org.openapitools.model.PostPaymentsSepaCreditTransfersConsentsParamsBody;
import org.openapitools.model.PostPaymentsSepaCreditTransfersOKBody;
import org.openapitools.model.PostPaymentsSepaCreditTransfersParamsBody;
import org.openapitools.model.PostPaymentsSepaCreditTransfersPaymentStatusOKBody;
import org.openapitools.model.PostPaymentsSepaCreditTransfersPaymentStatusParamsBody;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:01.362611-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "ASPSPs", description = "List of account information and payment initiation providers")
public interface PaymentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /payments/aspsps : Get list of ASPSPs
     * Get the list of all active ASPSPs supported by the Open Banking Connect platform at this time with possibility to filter by id, name or country. This list is updated regularly as new ASPSPs are connected.
     *
     * @param body Request Body (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsAspspsPost",
        summary = "Get list of ASPSPs",
        description = "Get the list of all active ASPSPs supported by the Open Banking Connect platform at this time with possibility to filter by id, name or country. This list is updated regularly as new ASPSPs are connected.",
        tags = { "ASPSPs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostAspspsOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/aspsps",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostAspspsOKBody> paymentsAspspsPost(
        @Parameter(name = "body", description = "Request Body", required = true) @Valid @RequestBody PostAspspsParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"aspsps\" : [ { \"country\" : \"UK\", \"capabilities\" : { \"delete_ais_consent\" : true, \"obtain_ais_consent\" : true, \"retrieve_accounts\" : true }, \"aspspServices\" : [ \"AIS\", \"PIS\", \"COF\" ], \"profile\" : \"CMA9\", \"name\" : \"Wood bank\", \"logo\" : { \"binaryContent\" : \"binaryContent\", \"logoUrl\" : \"https://openbanking.mastercard.eu/live/imgs/16f0f635-9d94-4976-b49b-584ca231c232.svg\" }, \"id\" : \"123e4567-e89b-12d3-a456-426655440000\" }, { \"country\" : \"UK\", \"capabilities\" : { \"delete_ais_consent\" : true, \"obtain_ais_consent\" : true, \"retrieve_accounts\" : true }, \"aspspServices\" : [ \"AIS\", \"PIS\", \"COF\" ], \"profile\" : \"CMA9\", \"name\" : \"Wood bank\", \"logo\" : { \"binaryContent\" : \"binaryContent\", \"logoUrl\" : \"https://openbanking.mastercard.eu/live/imgs/16f0f635-9d94-4976-b49b-584ca231c232.svg\" }, \"id\" : \"123e4567-e89b-12d3-a456-426655440000\" } ], \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/consents/raw : Extracts the original raw consent given by the aspsp
     * Extracts the original raw consent given by the aspsp
     *
     * @param body Request Body (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsConsentsRawPost",
        summary = "Extracts the original raw consent given by the aspsp",
        description = "Extracts the original raw consent given by the aspsp",
        tags = { "PI Consents Raw" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPaymentsConsentsRawOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/consents/raw",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostPaymentsConsentsRawOKBody> paymentsConsentsRawPost(
        @Parameter(name = "body", description = "Request Body", required = true) @Valid @RequestBody PostPaymentsConsentsRawParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" }, \"rawConsent\" : \"rawConsent\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/cross-border-credit-transfers/consents : Request consent initiation via redirect
     *
     * @param body Cross border payment consent (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsCrossBorderCreditTransfersConsentsPost",
        summary = "Request consent initiation via redirect",
        tags = { "Cross border Payments Consent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPaymentsCrossBorderCreditTransfersConsentsOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/cross-border-credit-transfers/consents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostPaymentsCrossBorderCreditTransfersConsentsOKBody> paymentsCrossBorderCreditTransfersConsentsPost(
        @Parameter(name = "body", description = "Cross border payment consent", required = true) @Valid @RequestBody PostPaymentsCrossBorderCreditTransfersConsentsParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"scaRedirect\" : \"https://bank1.com/sca/login\" }, \"consentRequestId\" : \"consentRequestId\", \"additionalData\" : { \"rawConsent\" : \"rawConsent\" }, \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" }, \"aspspSCAApproach\" : \"REDIRECT\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/cross-border-credit-transfers/payment-status : Get payment status
     *
     * @param body Request Body (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsCrossBorderCreditTransfersPaymentStatusPost",
        summary = "Get payment status",
        tags = { "Cross border Payments Status" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPaymentsCrossBorderCreditTransfersPaymentStatusOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/cross-border-credit-transfers/payment-status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostPaymentsCrossBorderCreditTransfersPaymentStatusOKBody> paymentsCrossBorderCreditTransfersPaymentStatusPost(
        @Parameter(name = "body", description = "Request Body", required = true) @Valid @RequestBody PostPaymentsCrossBorderCreditTransfersPaymentStatusParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"payments\" : { \"transactionStatus\" : \"ACCP\", \"statusReasonCode\" : \"AM04\" }, \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/cross-border-credit-transfers : Redeem the payment
     *
     * @param body Request Body (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsCrossBorderCreditTransfersPost",
        summary = "Redeem the payment",
        tags = { "Cross border Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPaymentsCrossBorderCreditTransfersOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/cross-border-credit-transfers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostPaymentsCrossBorderCreditTransfersOKBody> paymentsCrossBorderCreditTransfersPost(
        @Parameter(name = "body", description = "Request Body", required = true) @Valid @RequestBody PostPaymentsCrossBorderCreditTransfersParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transfer\" : { \"transactionStatus\" : \"ACCP\", \"paymentId\" : \"trasnferIdentificaion1\", \"statusReasonCode\" : \"AM04\" }, \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" }, \"consent\" : { \"consentId\" : \"consentId\", \"consentRequestId\" : \"consentRequestId\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/domestic-credit-transfers/consents : Request consent initiation via redirect
     * Request Payment Initiation Consent for a domestic credit transfer on behalf of the PSU.
     *
     * @param body Domestic Payment consent to be wired via Faster Payment System (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsDomesticCreditTransfersConsentsPost",
        summary = "Request consent initiation via redirect",
        description = "Request Payment Initiation Consent for a domestic credit transfer on behalf of the PSU.",
        tags = { "Domestic Payments Consent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPaymentsDomesticCreditTransfersConsentsOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/domestic-credit-transfers/consents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostPaymentsDomesticCreditTransfersConsentsOKBody> paymentsDomesticCreditTransfersConsentsPost(
        @Parameter(name = "body", description = "Domestic Payment consent to be wired via Faster Payment System", required = true) @Valid @RequestBody PostPaymentsDomesticCreditTransfersConsentsParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"scaRedirect\" : \"https://bank1.com/sca/login\" }, \"consentRequestId\" : \"consentRequestId\", \"additionalData\" : { \"rawConsent\" : \"rawConsent\" }, \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" }, \"aspspSCAApproach\" : \"REDIRECT\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/domestic-credit-transfers/payment-status : Get payment status
     * Get the status for an existing domestic credit transfer payment.
     *
     * @param body Request Body (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsDomesticCreditTransfersPaymentStatusPost",
        summary = "Get payment status",
        description = "Get the status for an existing domestic credit transfer payment.",
        tags = { "Domestic Payments Status" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPaymentsDomesticCreditTransfersPaymentStatusOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/domestic-credit-transfers/payment-status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostPaymentsDomesticCreditTransfersPaymentStatusOKBody> paymentsDomesticCreditTransfersPaymentStatusPost(
        @Parameter(name = "body", description = "Request Body", required = true) @Valid @RequestBody PostPaymentsDomesticCreditTransfersPaymentStatusParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"payments\" : { \"transactionStatus\" : \"ACCP\", \"statusReasonCode\" : \"AM04\" }, \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/domestic-credit-transfers : Redeem the payment
     * Redeem the payment which was previously consented by the PSU.
     *
     * @param body Request Body (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsDomesticCreditTransfersPost",
        summary = "Redeem the payment",
        description = "Redeem the payment which was previously consented by the PSU.",
        tags = { "Domestic Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPaymentsDomesticCreditTransfersOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/domestic-credit-transfers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostPaymentsDomesticCreditTransfersOKBody> paymentsDomesticCreditTransfersPost(
        @Parameter(name = "body", description = "Request Body", required = true) @Valid @RequestBody PostPaymentsDomesticCreditTransfersParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transfer\" : { \"transactionStatus\" : \"ACCP\", \"paymentId\" : \"trasnferIdentificaion1\", \"statusReasonCode\" : \"AM04\" }, \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" }, \"consent\" : { \"consentId\" : \"consentId\", \"consentRequestId\" : \"consentRequestId\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /payments/health : Returns the status of each connectivity provider
     * Returns the status of each connectivity provider
     *
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     */
    @Operation(
        operationId = "paymentsHealthGet",
        summary = "Returns the status of each connectivity provider",
        description = "Returns the status of each connectivity provider",
        tags = { "Health" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiHealth.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payments/health",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ApiHealth> paymentsHealthGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"connectors\" : [ { \"name\" : \"Buffalo\", \"statusMessage\" : \"\", \"status\" : \"UP\" }, { \"name\" : \"Buffalo\", \"statusMessage\" : \"\", \"status\" : \"UP\" } ], \"statusMessage\" : \"\", \"status\" : \"UP\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/sepa-credit-transfers/consents : Request consent initiation via redirect
     * Request a SEPA credit transfer consent on behalf of the PSU via a URL redirect to the ASPSP.
     *
     * @param body  (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsSepaCreditTransfersConsentsPost",
        summary = "Request consent initiation via redirect",
        description = "Request a SEPA credit transfer consent on behalf of the PSU via a URL redirect to the ASPSP.",
        tags = { "SEPA Payments Consent" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPaymentsSepaCreditTransfersConsentsOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/sepa-credit-transfers/consents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostPaymentsSepaCreditTransfersConsentsOKBody> paymentsSepaCreditTransfersConsentsPost(
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody PostPaymentsSepaCreditTransfersConsentsParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"scaRedirect\" : \"https://bank1.com/sca/login\" }, \"consentRequestId\" : \"consentRequestId\", \"additionalData\" : { \"rawConsent\" : \"rawConsent\" }, \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" }, \"aspspSCAApproach\" : \"REDIRECT\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/sepa-credit-transfers/payment-status : Get payment status
     * Get the status of an existing SEPA credit transfer
     *
     * @param body Request Body (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsSepaCreditTransfersPaymentStatusPost",
        summary = "Get payment status",
        description = "Get the status of an existing SEPA credit transfer",
        tags = { "SEPA Payments Status" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPaymentsSepaCreditTransfersPaymentStatusOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/sepa-credit-transfers/payment-status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostPaymentsSepaCreditTransfersPaymentStatusOKBody> paymentsSepaCreditTransfersPaymentStatusPost(
        @Parameter(name = "body", description = "Request Body", required = true) @Valid @RequestBody PostPaymentsSepaCreditTransfersPaymentStatusParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"payments\" : { \"transactionStatus\" : \"ACCP\", \"statusReasonCode\" : \"AM04\" }, \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/sepa-credit-transfers : Redeem the payment
     * Redeem a SEPA credit transfer previously consented by the PSU.
     *
     * @param body Request Body (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Error (status code 500)
     *         or Server while acting as a gateway or proxy, cannot get a response in time. (status code 504)
     */
    @Operation(
        operationId = "paymentsSepaCreditTransfersPost",
        summary = "Redeem the payment",
        description = "Redeem a SEPA credit transfer previously consented by the PSU.",
        tags = { "SEPA Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostPaymentsSepaCreditTransfersOKBody.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "504", description = "Server while acting as a gateway or proxy, cannot get a response in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/sepa-credit-transfers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostPaymentsSepaCreditTransfersOKBody> paymentsSepaCreditTransfersPost(
        @Parameter(name = "body", description = "Request Body", required = true) @Valid @RequestBody PostPaymentsSepaCreditTransfersParamsBody body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transfer\" : { \"transactionStatus\" : \"ACCP\", \"paymentId\" : \"trasnferIdentificaion1\", \"statusReasonCode\" : \"AM04\" }, \"originalRequestInfo\" : { \"xRequestId\" : \"444e4567-e55b-12d3-a456-426655448888\" }, \"consent\" : { \"consentId\" : \"consentId\", \"consentRequestId\" : \"consentRequestId\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
