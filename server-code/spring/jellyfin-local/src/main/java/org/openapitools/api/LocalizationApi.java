/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CountryInfo;
import org.openapitools.model.CultureDto;
import org.openapitools.model.LocalizationOption;
import org.openapitools.model.ParentalRating;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Localization", description = "the Localization API")
public interface LocalizationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /Localization/Countries : Gets known countries.
     *
     * @return Known countries returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getCountries",
        summary = "Gets known countries.",
        tags = { "Localization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Known countries returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CountryInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = CountryInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = CountryInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Localization/Countries",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<CountryInfo>> getCountries(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\", \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\" }, { \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\", \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\", \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\" }, { \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\", \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\", \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\" }, { \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\", \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Localization/Cultures : Gets known cultures.
     *
     * @return Known cultures returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getCultures",
        summary = "Gets known cultures.",
        tags = { "Localization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Known cultures returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CultureDto.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = CultureDto.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = CultureDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Localization/Cultures",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<CultureDto>> getCultures(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ], \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\", \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\" }, { \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ], \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\", \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ], \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\", \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\" }, { \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ], \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\", \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ], \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\", \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\" }, { \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ], \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\", \"DisplayName\" : \"DisplayName\", \"Name\" : \"Name\", \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Localization/Options : Gets localization options.
     *
     * @return Localization options returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getLocalizationOptions",
        summary = "Gets localization options.",
        tags = { "Localization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Localization options returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LocalizationOption.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = LocalizationOption.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = LocalizationOption.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Localization/Options",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<LocalizationOption>> getLocalizationOptions(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Localization/ParentalRatings : Gets known parental ratings.
     *
     * @return Known parental ratings returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getParentalRatings",
        summary = "Gets known parental ratings.",
        tags = { "Localization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Known parental ratings returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ParentalRating.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = ParentalRating.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = ParentalRating.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Localization/ParentalRatings",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<ParentalRating>> getParentalRatings(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Value\" : 0, \"Name\" : \"Name\" }, { \"Value\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Value\" : 0, \"Name\" : \"Name\" }, { \"Value\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Value\" : 0, \"Name\" : \"Name\" }, { \"Value\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
