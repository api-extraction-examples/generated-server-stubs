/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.PackageInfo;
import org.openapitools.model.ProblemDetails;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Package", description = "the Package API")
public interface PackagesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /Packages/Installing/{packageId} : Cancels a package installation.
     *
     * @param packageId Installation Id. (required)
     * @return Installation cancelled. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "cancelPackageInstallation",
        summary = "Cancels a package installation.",
        tags = { "Package" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Installation cancelled."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/Packages/Installing/{packageId}"
    )
    
    default ResponseEntity<Void> cancelPackageInstallation(
        @Parameter(name = "packageId", description = "Installation Id.", required = true, in = ParameterIn.PATH) @PathVariable("packageId") UUID packageId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Packages/{name} : Gets a package by name or assembly GUID.
     *
     * @param name The name of the package. (required)
     * @param assemblyGuid The GUID of the associated assembly. (optional)
     * @return Package retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getPackageInfo",
        summary = "Gets a package by name or assembly GUID.",
        tags = { "Package" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Package retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PackageInfo.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = PackageInfo.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = PackageInfo.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Packages/{name}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<PackageInfo> getPackageInfo(
        @Parameter(name = "name", description = "The name of the package.", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "assemblyGuid", description = "The GUID of the associated assembly.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assemblyGuid", required = false) UUID assemblyGuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : \"owner\", \"overview\" : \"overview\", \"versions\" : [ { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" }, { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" } ], \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"description\" : \"description\", \"guid\" : \"guid\", \"category\" : \"category\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"owner\" : \"owner\", \"overview\" : \"overview\", \"versions\" : [ { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" }, { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" } ], \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"description\" : \"description\", \"guid\" : \"guid\", \"category\" : \"category\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"owner\" : \"owner\", \"overview\" : \"overview\", \"versions\" : [ { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" }, { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" } ], \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"description\" : \"description\", \"guid\" : \"guid\", \"category\" : \"category\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Packages : Gets available packages.
     *
     * @return Available packages returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getPackages",
        summary = "Gets available packages.",
        tags = { "Package" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Available packages returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PackageInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = PackageInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = PackageInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Packages",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<PackageInfo>> getPackages(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"owner\" : \"owner\", \"overview\" : \"overview\", \"versions\" : [ { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" }, { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" } ], \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"description\" : \"description\", \"guid\" : \"guid\", \"category\" : \"category\" }, { \"owner\" : \"owner\", \"overview\" : \"overview\", \"versions\" : [ { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" }, { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" } ], \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"description\" : \"description\", \"guid\" : \"guid\", \"category\" : \"category\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"owner\" : \"owner\", \"overview\" : \"overview\", \"versions\" : [ { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" }, { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" } ], \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"description\" : \"description\", \"guid\" : \"guid\", \"category\" : \"category\" }, { \"owner\" : \"owner\", \"overview\" : \"overview\", \"versions\" : [ { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" }, { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" } ], \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"description\" : \"description\", \"guid\" : \"guid\", \"category\" : \"category\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"owner\" : \"owner\", \"overview\" : \"overview\", \"versions\" : [ { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" }, { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" } ], \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"description\" : \"description\", \"guid\" : \"guid\", \"category\" : \"category\" }, { \"owner\" : \"owner\", \"overview\" : \"overview\", \"versions\" : [ { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" }, { \"sourceUrl\" : \"sourceUrl\", \"targetAbi\" : \"targetAbi\", \"checksum\" : \"checksum\", \"changelog\" : \"changelog\", \"repositoryName\" : \"repositoryName\", \"version\" : \"version\", \"VersionNumber\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"repositoryUrl\" : \"repositoryUrl\", \"timestamp\" : \"timestamp\" } ], \"imageUrl\" : \"imageUrl\", \"name\" : \"name\", \"description\" : \"description\", \"guid\" : \"guid\", \"category\" : \"category\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Packages/Installed/{name} : Installs a package.
     *
     * @param name Package name. (required)
     * @param assemblyGuid GUID of the associated assembly. (optional)
     * @param version Optional version. Defaults to latest version. (optional)
     * @param repositoryUrl Optional. Specify the repository to install from. (optional)
     * @return Package found. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Package not found. (status code 404)
     */
    @Operation(
        operationId = "installPackage",
        summary = "Installs a package.",
        tags = { "Package" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Package found."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Package not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Packages/Installed/{name}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> installPackage(
        @Parameter(name = "name", description = "Package name.", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "assemblyGuid", description = "GUID of the associated assembly.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assemblyGuid", required = false) UUID assemblyGuid,
        @Parameter(name = "version", description = "Optional version. Defaults to latest version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) String version,
        @Parameter(name = "repositoryUrl", description = "Optional. Specify the repository to install from.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "repositoryUrl", required = false) String repositoryUrl
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
