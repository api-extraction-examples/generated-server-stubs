/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.NameIdPair;
import org.openapitools.model.NotificationLevel;
import org.openapitools.model.NotificationResultDto;
import org.openapitools.model.NotificationTypeInfo;
import org.openapitools.model.NotificationsSummaryDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Notifications", description = "the Notifications API")
public interface NotificationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /Notifications/Admin : Sends a notification to all admins.
     *
     * @param url The URL of the notification. (optional)
     * @param level The level of the notification. (optional)
     * @param name The name of the notification. (optional, default to )
     * @param description The description of the notification. (optional, default to )
     * @return Notification sent. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "createAdminNotification",
        summary = "Sends a notification to all admins.",
        tags = { "Notifications" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notification sent."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Notifications/Admin"
    )
    
    default ResponseEntity<Void> createAdminNotification(
        @Parameter(name = "url", description = "The URL of the notification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "url", required = false) String url,
        @Parameter(name = "level", description = "The level of the notification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "level", required = false) NotificationLevel level,
        @Parameter(name = "name", description = "The name of the notification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false, defaultValue = "") String name,
        @Parameter(name = "description", description = "The description of the notification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "description", required = false, defaultValue = "") String description
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Notifications/Services : Gets notification services.
     *
     * @return All notification services returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getNotificationServices",
        summary = "Gets notification services.",
        tags = { "Notifications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "All notification services returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = NameIdPair.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = NameIdPair.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = NameIdPair.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Notifications/Services",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<NameIdPair>> getNotificationServices(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Notifications/Types : Gets notification types.
     *
     * @return All notification types returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getNotificationTypes",
        summary = "Gets notification types.",
        tags = { "Notifications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "All notification types returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = NotificationTypeInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = NotificationTypeInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = NotificationTypeInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Notifications/Types",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<NotificationTypeInfo>> getNotificationTypes(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Type\" : \"Type\", \"Category\" : \"Category\", \"IsBasedOnUserEvent\" : true, \"Enabled\" : true, \"Name\" : \"Name\" }, { \"Type\" : \"Type\", \"Category\" : \"Category\", \"IsBasedOnUserEvent\" : true, \"Enabled\" : true, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Type\" : \"Type\", \"Category\" : \"Category\", \"IsBasedOnUserEvent\" : true, \"Enabled\" : true, \"Name\" : \"Name\" }, { \"Type\" : \"Type\", \"Category\" : \"Category\", \"IsBasedOnUserEvent\" : true, \"Enabled\" : true, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Type\" : \"Type\", \"Category\" : \"Category\", \"IsBasedOnUserEvent\" : true, \"Enabled\" : true, \"Name\" : \"Name\" }, { \"Type\" : \"Type\", \"Category\" : \"Category\", \"IsBasedOnUserEvent\" : true, \"Enabled\" : true, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Notifications/{userId} : Gets a user&#39;s notifications.
     *
     * @param userId  (required)
     * @return Notifications returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getNotifications",
        summary = "Gets a user's notifications.",
        tags = { "Notifications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Notifications returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificationResultDto.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = NotificationResultDto.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = NotificationResultDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Notifications/{userId}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<NotificationResultDto> getNotifications(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"TotalRecordCount\" : 0, \"Notifications\" : [ { \"Description\" : \"Description\", \"UserId\" : \"UserId\", \"Id\" : \"Id\", \"IsRead\" : true, \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Url\" : \"Url\", \"Name\" : \"Name\" }, { \"Description\" : \"Description\", \"UserId\" : \"UserId\", \"Id\" : \"Id\", \"IsRead\" : true, \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Url\" : \"Url\", \"Name\" : \"Name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"TotalRecordCount\" : 0, \"Notifications\" : [ { \"Description\" : \"Description\", \"UserId\" : \"UserId\", \"Id\" : \"Id\", \"IsRead\" : true, \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Url\" : \"Url\", \"Name\" : \"Name\" }, { \"Description\" : \"Description\", \"UserId\" : \"UserId\", \"Id\" : \"Id\", \"IsRead\" : true, \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Url\" : \"Url\", \"Name\" : \"Name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"TotalRecordCount\" : 0, \"Notifications\" : [ { \"Description\" : \"Description\", \"UserId\" : \"UserId\", \"Id\" : \"Id\", \"IsRead\" : true, \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Url\" : \"Url\", \"Name\" : \"Name\" }, { \"Description\" : \"Description\", \"UserId\" : \"UserId\", \"Id\" : \"Id\", \"IsRead\" : true, \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Url\" : \"Url\", \"Name\" : \"Name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Notifications/{userId}/Summary : Gets a user&#39;s notification summary.
     *
     * @param userId  (required)
     * @return Summary of user&#39;s notifications returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getNotificationsSummary",
        summary = "Gets a user's notification summary.",
        tags = { "Notifications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Summary of user's notifications returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificationsSummaryDto.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = NotificationsSummaryDto.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = NotificationsSummaryDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Notifications/{userId}/Summary",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<NotificationsSummaryDto> getNotificationsSummary(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"UnreadCount\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"UnreadCount\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"UnreadCount\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Notifications/{userId}/Read : Sets notifications as read.
     *
     * @param userId  (required)
     * @return Notifications set as read. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "setRead",
        summary = "Sets notifications as read.",
        tags = { "Notifications" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notifications set as read."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Notifications/{userId}/Read"
    )
    
    default ResponseEntity<Void> setRead(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Notifications/{userId}/Unread : Sets notifications as unread.
     *
     * @param userId  (required)
     * @return Notifications set as unread. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "setUnread",
        summary = "Sets notifications as unread.",
        tags = { "Notifications" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Notifications set as unread."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Notifications/{userId}/Unread"
    )
    
    default ResponseEntity<Void> setUnread(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
