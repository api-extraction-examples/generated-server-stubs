/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ActivityLogEntryQueryResult;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.EndPointInfo;
import org.openapitools.model.LogFile;
import org.openapitools.model.MediaEncoderPathDto;
import org.openapitools.model.MetadataOptions;
import java.time.OffsetDateTime;
import org.openapitools.model.PublicSystemInfo;
import org.openapitools.model.ServerConfiguration;
import org.openapitools.model.SystemInfo;
import org.openapitools.model.WakeOnLanInfo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Configuration", description = "the Configuration API")
public interface SystemApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /System/Configuration : Gets application configuration.
     *
     * @return Application configuration returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getConfiguration",
        summary = "Gets application configuration.",
        tags = { "Configuration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Application configuration returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServerConfiguration.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ServerConfiguration.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ServerConfiguration.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/Configuration",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<ServerConfiguration> getConfiguration(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"EnableSlowResponseWarning\" : true, \"RemoteIPFilter\" : [ \"RemoteIPFilter\", \"RemoteIPFilter\" ], \"CorsHosts\" : [ \"CorsHosts\", \"CorsHosts\" ], \"IsPortAuthorized\" : true, \"IsStartupWizardCompleted\" : true, \"UICulture\" : \"UICulture\", \"CodecsUsed\" : [ \"CodecsUsed\", \"CodecsUsed\" ], \"AutoDiscovery\" : true, \"LocalNetworkAddresses\" : [ \"LocalNetworkAddresses\", \"LocalNetworkAddresses\" ], \"EnableUPnP\" : true, \"EnableMultiSocketBinding\" : true, \"EnableIPV4\" : true, \"MetadataCountryCode\" : \"MetadataCountryCode\", \"SaveMetadataHidden\" : true, \"EnableIPV6\" : true, \"EnableNormalizedItemByNameIds\" : true, \"UDPSendDelay\" : 5, \"LocalNetworkSubnets\" : [ \"LocalNetworkSubnets\", \"LocalNetworkSubnets\" ], \"MetadataNetworkPath\" : \"MetadataNetworkPath\", \"EnableNewOmdbSupport\" : true, \"ActivityLogRetentionDays\" : 0, \"PublishedServerUriBySubnet\" : [ \"PublishedServerUriBySubnet\", \"PublishedServerUriBySubnet\" ], \"SortRemoveCharacters\" : [ \"SortRemoveCharacters\", \"SortRemoveCharacters\" ], \"DisableLiveTvChannelUserDataName\" : true, \"MaxResumePct\" : 4, \"HttpServerPortNumber\" : 1, \"MinResumeDurationSeconds\" : 1, \"SlowResponseThresholdMs\" : 1, \"RequireHttps\" : true, \"LogFileRetentionDays\" : 3, \"LibraryScanFanoutConcurrency\" : 9, \"HDHomerunPortRange\" : \"HDHomerunPortRange\", \"SkipDeserializationForBasicTypes\" : true, \"MetadataOptions\" : [ { \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ], \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ], \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ], \"ItemType\" : \"ItemType\", \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ], \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ], \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ] }, { \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ], \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ], \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ], \"ItemType\" : \"ItemType\", \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ], \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ], \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ] } ], \"HttpsPortNumber\" : 5, \"MinResumePct\" : 1, \"CertificatePassword\" : \"CertificatePassword\", \"SSDPTracingFilter\" : \"SSDPTracingFilter\", \"RemoteClientBitrateLimit\" : 7, \"ImageExtractionTimeoutMs\" : 5, \"EnableExternalContentInSuggestions\" : true, \"RemoveOldPlugins\" : true, \"UPnPCreateHttpPortMap\" : true, \"LibraryMonitorDelay\" : 7, \"EnableCaseSensitiveItemIds\" : true, \"SortReplaceCharacters\" : [ \"SortReplaceCharacters\", \"SortReplaceCharacters\" ], \"LibraryMetadataRefreshConcurrency\" : 2, \"UDPPortRange\" : \"UDPPortRange\", \"PreviousVersionStr\" : \"PreviousVersionStr\", \"EnableSSDPTracing\" : true, \"AutoDiscoveryTracing\" : true, \"PathSubstitutions\" : [ { \"From\" : \"From\", \"To\" : \"To\" }, { \"From\" : \"From\", \"To\" : \"To\" } ], \"CachePath\" : \"CachePath\", \"MaxAudiobookResume\" : 2, \"EnableFolderView\" : true, \"BaseUrl\" : \"BaseUrl\", \"UninstalledPlugins\" : [ \"UninstalledPlugins\", \"UninstalledPlugins\" ], \"DisplaySpecialsWithinSeasons\" : true, \"EnableDashboardResponseCaching\" : true, \"EnableRemoteAccess\" : true, \"KnownProxies\" : [ \"KnownProxies\", \"KnownProxies\" ], \"MinAudiobookResume\" : 7, \"CertificatePath\" : \"CertificatePath\", \"PluginRepositories\" : [ { \"Enabled\" : true, \"Url\" : \"Url\", \"Name\" : \"Name\" }, { \"Enabled\" : true, \"Url\" : \"Url\", \"Name\" : \"Name\" } ], \"IgnoreVirtualInterfaces\" : true, \"ContentTypes\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"PreviousVersion\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"GatewayMonitorPeriod\" : 6, \"IsRemoteIPFilterBlacklist\" : true, \"MetadataPath\" : \"MetadataPath\", \"UDPSendCount\" : 4, \"EnableMetrics\" : true, \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\", \"EnableHttps\" : true, \"PublicHttpsPort\" : 1, \"TrustAllIP6Interfaces\" : true, \"ServerName\" : \"ServerName\", \"QuickConnectAvailable\" : true, \"EnableSimpleArtistDetection\" : true, \"SortRemoveWords\" : [ \"SortRemoveWords\", \"SortRemoveWords\" ], \"VirtualInterfaceNames\" : \"VirtualInterfaceNames\", \"EnableGroupingIntoCollections\" : true, \"DisablePluginImages\" : true, \"PublicPort\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"EnableSlowResponseWarning\" : true, \"RemoteIPFilter\" : [ \"RemoteIPFilter\", \"RemoteIPFilter\" ], \"CorsHosts\" : [ \"CorsHosts\", \"CorsHosts\" ], \"IsPortAuthorized\" : true, \"IsStartupWizardCompleted\" : true, \"UICulture\" : \"UICulture\", \"CodecsUsed\" : [ \"CodecsUsed\", \"CodecsUsed\" ], \"AutoDiscovery\" : true, \"LocalNetworkAddresses\" : [ \"LocalNetworkAddresses\", \"LocalNetworkAddresses\" ], \"EnableUPnP\" : true, \"EnableMultiSocketBinding\" : true, \"EnableIPV4\" : true, \"MetadataCountryCode\" : \"MetadataCountryCode\", \"SaveMetadataHidden\" : true, \"EnableIPV6\" : true, \"EnableNormalizedItemByNameIds\" : true, \"UDPSendDelay\" : 5, \"LocalNetworkSubnets\" : [ \"LocalNetworkSubnets\", \"LocalNetworkSubnets\" ], \"MetadataNetworkPath\" : \"MetadataNetworkPath\", \"EnableNewOmdbSupport\" : true, \"ActivityLogRetentionDays\" : 0, \"PublishedServerUriBySubnet\" : [ \"PublishedServerUriBySubnet\", \"PublishedServerUriBySubnet\" ], \"SortRemoveCharacters\" : [ \"SortRemoveCharacters\", \"SortRemoveCharacters\" ], \"DisableLiveTvChannelUserDataName\" : true, \"MaxResumePct\" : 4, \"HttpServerPortNumber\" : 1, \"MinResumeDurationSeconds\" : 1, \"SlowResponseThresholdMs\" : 1, \"RequireHttps\" : true, \"LogFileRetentionDays\" : 3, \"LibraryScanFanoutConcurrency\" : 9, \"HDHomerunPortRange\" : \"HDHomerunPortRange\", \"SkipDeserializationForBasicTypes\" : true, \"MetadataOptions\" : [ { \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ], \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ], \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ], \"ItemType\" : \"ItemType\", \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ], \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ], \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ] }, { \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ], \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ], \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ], \"ItemType\" : \"ItemType\", \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ], \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ], \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ] } ], \"HttpsPortNumber\" : 5, \"MinResumePct\" : 1, \"CertificatePassword\" : \"CertificatePassword\", \"SSDPTracingFilter\" : \"SSDPTracingFilter\", \"RemoteClientBitrateLimit\" : 7, \"ImageExtractionTimeoutMs\" : 5, \"EnableExternalContentInSuggestions\" : true, \"RemoveOldPlugins\" : true, \"UPnPCreateHttpPortMap\" : true, \"LibraryMonitorDelay\" : 7, \"EnableCaseSensitiveItemIds\" : true, \"SortReplaceCharacters\" : [ \"SortReplaceCharacters\", \"SortReplaceCharacters\" ], \"LibraryMetadataRefreshConcurrency\" : 2, \"UDPPortRange\" : \"UDPPortRange\", \"PreviousVersionStr\" : \"PreviousVersionStr\", \"EnableSSDPTracing\" : true, \"AutoDiscoveryTracing\" : true, \"PathSubstitutions\" : [ { \"From\" : \"From\", \"To\" : \"To\" }, { \"From\" : \"From\", \"To\" : \"To\" } ], \"CachePath\" : \"CachePath\", \"MaxAudiobookResume\" : 2, \"EnableFolderView\" : true, \"BaseUrl\" : \"BaseUrl\", \"UninstalledPlugins\" : [ \"UninstalledPlugins\", \"UninstalledPlugins\" ], \"DisplaySpecialsWithinSeasons\" : true, \"EnableDashboardResponseCaching\" : true, \"EnableRemoteAccess\" : true, \"KnownProxies\" : [ \"KnownProxies\", \"KnownProxies\" ], \"MinAudiobookResume\" : 7, \"CertificatePath\" : \"CertificatePath\", \"PluginRepositories\" : [ { \"Enabled\" : true, \"Url\" : \"Url\", \"Name\" : \"Name\" }, { \"Enabled\" : true, \"Url\" : \"Url\", \"Name\" : \"Name\" } ], \"IgnoreVirtualInterfaces\" : true, \"ContentTypes\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"PreviousVersion\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"GatewayMonitorPeriod\" : 6, \"IsRemoteIPFilterBlacklist\" : true, \"MetadataPath\" : \"MetadataPath\", \"UDPSendCount\" : 4, \"EnableMetrics\" : true, \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\", \"EnableHttps\" : true, \"PublicHttpsPort\" : 1, \"TrustAllIP6Interfaces\" : true, \"ServerName\" : \"ServerName\", \"QuickConnectAvailable\" : true, \"EnableSimpleArtistDetection\" : true, \"SortRemoveWords\" : [ \"SortRemoveWords\", \"SortRemoveWords\" ], \"VirtualInterfaceNames\" : \"VirtualInterfaceNames\", \"EnableGroupingIntoCollections\" : true, \"DisablePluginImages\" : true, \"PublicPort\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"EnableSlowResponseWarning\" : true, \"RemoteIPFilter\" : [ \"RemoteIPFilter\", \"RemoteIPFilter\" ], \"CorsHosts\" : [ \"CorsHosts\", \"CorsHosts\" ], \"IsPortAuthorized\" : true, \"IsStartupWizardCompleted\" : true, \"UICulture\" : \"UICulture\", \"CodecsUsed\" : [ \"CodecsUsed\", \"CodecsUsed\" ], \"AutoDiscovery\" : true, \"LocalNetworkAddresses\" : [ \"LocalNetworkAddresses\", \"LocalNetworkAddresses\" ], \"EnableUPnP\" : true, \"EnableMultiSocketBinding\" : true, \"EnableIPV4\" : true, \"MetadataCountryCode\" : \"MetadataCountryCode\", \"SaveMetadataHidden\" : true, \"EnableIPV6\" : true, \"EnableNormalizedItemByNameIds\" : true, \"UDPSendDelay\" : 5, \"LocalNetworkSubnets\" : [ \"LocalNetworkSubnets\", \"LocalNetworkSubnets\" ], \"MetadataNetworkPath\" : \"MetadataNetworkPath\", \"EnableNewOmdbSupport\" : true, \"ActivityLogRetentionDays\" : 0, \"PublishedServerUriBySubnet\" : [ \"PublishedServerUriBySubnet\", \"PublishedServerUriBySubnet\" ], \"SortRemoveCharacters\" : [ \"SortRemoveCharacters\", \"SortRemoveCharacters\" ], \"DisableLiveTvChannelUserDataName\" : true, \"MaxResumePct\" : 4, \"HttpServerPortNumber\" : 1, \"MinResumeDurationSeconds\" : 1, \"SlowResponseThresholdMs\" : 1, \"RequireHttps\" : true, \"LogFileRetentionDays\" : 3, \"LibraryScanFanoutConcurrency\" : 9, \"HDHomerunPortRange\" : \"HDHomerunPortRange\", \"SkipDeserializationForBasicTypes\" : true, \"MetadataOptions\" : [ { \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ], \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ], \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ], \"ItemType\" : \"ItemType\", \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ], \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ], \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ] }, { \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ], \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ], \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ], \"ItemType\" : \"ItemType\", \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ], \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ], \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ] } ], \"HttpsPortNumber\" : 5, \"MinResumePct\" : 1, \"CertificatePassword\" : \"CertificatePassword\", \"SSDPTracingFilter\" : \"SSDPTracingFilter\", \"RemoteClientBitrateLimit\" : 7, \"ImageExtractionTimeoutMs\" : 5, \"EnableExternalContentInSuggestions\" : true, \"RemoveOldPlugins\" : true, \"UPnPCreateHttpPortMap\" : true, \"LibraryMonitorDelay\" : 7, \"EnableCaseSensitiveItemIds\" : true, \"SortReplaceCharacters\" : [ \"SortReplaceCharacters\", \"SortReplaceCharacters\" ], \"LibraryMetadataRefreshConcurrency\" : 2, \"UDPPortRange\" : \"UDPPortRange\", \"PreviousVersionStr\" : \"PreviousVersionStr\", \"EnableSSDPTracing\" : true, \"AutoDiscoveryTracing\" : true, \"PathSubstitutions\" : [ { \"From\" : \"From\", \"To\" : \"To\" }, { \"From\" : \"From\", \"To\" : \"To\" } ], \"CachePath\" : \"CachePath\", \"MaxAudiobookResume\" : 2, \"EnableFolderView\" : true, \"BaseUrl\" : \"BaseUrl\", \"UninstalledPlugins\" : [ \"UninstalledPlugins\", \"UninstalledPlugins\" ], \"DisplaySpecialsWithinSeasons\" : true, \"EnableDashboardResponseCaching\" : true, \"EnableRemoteAccess\" : true, \"KnownProxies\" : [ \"KnownProxies\", \"KnownProxies\" ], \"MinAudiobookResume\" : 7, \"CertificatePath\" : \"CertificatePath\", \"PluginRepositories\" : [ { \"Enabled\" : true, \"Url\" : \"Url\", \"Name\" : \"Name\" }, { \"Enabled\" : true, \"Url\" : \"Url\", \"Name\" : \"Name\" } ], \"IgnoreVirtualInterfaces\" : true, \"ContentTypes\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"PreviousVersion\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"GatewayMonitorPeriod\" : 6, \"IsRemoteIPFilterBlacklist\" : true, \"MetadataPath\" : \"MetadataPath\", \"UDPSendCount\" : 4, \"EnableMetrics\" : true, \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\", \"EnableHttps\" : true, \"PublicHttpsPort\" : 1, \"TrustAllIP6Interfaces\" : true, \"ServerName\" : \"ServerName\", \"QuickConnectAvailable\" : true, \"EnableSimpleArtistDetection\" : true, \"SortRemoveWords\" : [ \"SortRemoveWords\", \"SortRemoveWords\" ], \"VirtualInterfaceNames\" : \"VirtualInterfaceNames\", \"EnableGroupingIntoCollections\" : true, \"DisablePluginImages\" : true, \"PublicPort\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /System/Configuration/MetadataOptions/Default : Gets a default MetadataOptions object.
     *
     * @return Metadata options returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getDefaultMetadataOptions",
        summary = "Gets a default MetadataOptions object.",
        tags = { "Configuration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Metadata options returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MetadataOptions.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = MetadataOptions.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = MetadataOptions.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/Configuration/MetadataOptions/Default",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<MetadataOptions> getDefaultMetadataOptions(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ], \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ], \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ], \"ItemType\" : \"ItemType\", \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ], \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ], \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ], \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ], \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ], \"ItemType\" : \"ItemType\", \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ], \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ], \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ], \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ], \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ], \"ItemType\" : \"ItemType\", \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ], \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ], \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /System/Endpoint : Gets information about the request endpoint.
     *
     * @return Information retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getEndpointInfo",
        summary = "Gets information about the request endpoint.",
        tags = { "System" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Information retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EndPointInfo.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = EndPointInfo.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = EndPointInfo.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/Endpoint",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<EndPointInfo> getEndpointInfo(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"IsLocal\" : true, \"IsInNetwork\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"IsLocal\" : true, \"IsInNetwork\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"IsLocal\" : true, \"IsInNetwork\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /System/ActivityLog/Entries : Gets activity log entries.
     *
     * @param startIndex Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     * @param limit Optional. The maximum number of records to return. (optional)
     * @param minDate Optional. The minimum date. Format &#x3D; ISO. (optional)
     * @param hasUserId Optional. Filter log entries if it has user id, or not. (optional)
     * @return Activity log returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getLogEntries",
        summary = "Gets activity log entries.",
        tags = { "ActivityLog" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Activity log returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ActivityLogEntryQueryResult.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ActivityLogEntryQueryResult.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ActivityLogEntryQueryResult.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/ActivityLog/Entries",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<ActivityLogEntryQueryResult> getLogEntries(
        @Parameter(name = "startIndex", description = "Optional. The record index to start at. All items with a lower index will be dropped from the results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startIndex", required = false) Integer startIndex,
        @Parameter(name = "limit", description = "Optional. The maximum number of records to return.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "minDate", description = "Optional. The minimum date. Format = ISO.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime minDate,
        @Parameter(name = "hasUserId", description = "Optional. Filter log entries if it has user id, or not.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "hasUserId", required = false) Boolean hasUserId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"TotalRecordCount\" : 1, \"StartIndex\" : 6, \"Items\" : [ { \"Type\" : \"Type\", \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Overview\" : \"Overview\", \"UserPrimaryImageTag\" : \"UserPrimaryImageTag\", \"Id\" : 0, \"ShortOverview\" : \"ShortOverview\", \"ItemId\" : \"ItemId\", \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" }, { \"Type\" : \"Type\", \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Overview\" : \"Overview\", \"UserPrimaryImageTag\" : \"UserPrimaryImageTag\", \"Id\" : 0, \"ShortOverview\" : \"ShortOverview\", \"ItemId\" : \"ItemId\", \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"TotalRecordCount\" : 1, \"StartIndex\" : 6, \"Items\" : [ { \"Type\" : \"Type\", \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Overview\" : \"Overview\", \"UserPrimaryImageTag\" : \"UserPrimaryImageTag\", \"Id\" : 0, \"ShortOverview\" : \"ShortOverview\", \"ItemId\" : \"ItemId\", \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" }, { \"Type\" : \"Type\", \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Overview\" : \"Overview\", \"UserPrimaryImageTag\" : \"UserPrimaryImageTag\", \"Id\" : 0, \"ShortOverview\" : \"ShortOverview\", \"ItemId\" : \"ItemId\", \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"TotalRecordCount\" : 1, \"StartIndex\" : 6, \"Items\" : [ { \"Type\" : \"Type\", \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Overview\" : \"Overview\", \"UserPrimaryImageTag\" : \"UserPrimaryImageTag\", \"Id\" : 0, \"ShortOverview\" : \"ShortOverview\", \"ItemId\" : \"ItemId\", \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" }, { \"Type\" : \"Type\", \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Overview\" : \"Overview\", \"UserPrimaryImageTag\" : \"UserPrimaryImageTag\", \"Id\" : 0, \"ShortOverview\" : \"ShortOverview\", \"ItemId\" : \"ItemId\", \"Date\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /System/Logs/Log : Gets a log file.
     *
     * @param name The name of the log file to get. (required)
     * @return Log file retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getLogFile",
        summary = "Gets a log file.",
        tags = { "System" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Log file retrieved.", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/Logs/Log",
        produces = { "text/plain" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getLogFile(
        @NotNull @Parameter(name = "name", description = "The name of the log file to get.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /System/Configuration/{key} : Gets a named configuration.
     *
     * @param key Configuration key. (required)
     * @return Configuration returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getNamedConfiguration",
        summary = "Gets a named configuration.",
        tags = { "Configuration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Configuration returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/Configuration/{key}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getNamedConfiguration(
        @Parameter(name = "key", description = "Configuration key.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /System/Ping : Pings the system.
     *
     * @return Information retrieved. (status code 200)
     */
    @Operation(
        operationId = "getPingSystem",
        summary = "Pings the system.",
        tags = { "System" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Information retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/Ping",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<String> getPingSystem(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /System/Info/Public : Gets public information about the server.
     *
     * @return Information retrieved. (status code 200)
     */
    @Operation(
        operationId = "getPublicSystemInfo",
        summary = "Gets public information about the server.",
        tags = { "System" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Information retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PublicSystemInfo.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = PublicSystemInfo.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = PublicSystemInfo.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/Info/Public",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<PublicSystemInfo> getPublicSystemInfo(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"OperatingSystem\" : \"OperatingSystem\", \"LocalAddress\" : \"LocalAddress\", \"ProductName\" : \"ProductName\", \"Version\" : \"Version\", \"ServerName\" : \"ServerName\", \"Id\" : \"Id\", \"StartupWizardCompleted\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"OperatingSystem\" : \"OperatingSystem\", \"LocalAddress\" : \"LocalAddress\", \"ProductName\" : \"ProductName\", \"Version\" : \"Version\", \"ServerName\" : \"ServerName\", \"Id\" : \"Id\", \"StartupWizardCompleted\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"OperatingSystem\" : \"OperatingSystem\", \"LocalAddress\" : \"LocalAddress\", \"ProductName\" : \"ProductName\", \"Version\" : \"Version\", \"ServerName\" : \"ServerName\", \"Id\" : \"Id\", \"StartupWizardCompleted\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /System/Logs : Gets a list of available server log files.
     *
     * @return Information retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getServerLogs",
        summary = "Gets a list of available server log files.",
        tags = { "System" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Information retrieved.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LogFile.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = LogFile.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = LogFile.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/Logs",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<LogFile>> getServerLogs(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Size\" : 0, \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" }, { \"Size\" : 0, \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Size\" : 0, \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" }, { \"Size\" : 0, \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Size\" : 0, \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" }, { \"Size\" : 0, \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /System/Info : Gets information about the server.
     *
     * @return Information retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getSystemInfo",
        summary = "Gets information about the server.",
        tags = { "System" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Information retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemInfo.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = SystemInfo.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = SystemInfo.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/Info",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<SystemInfo> getSystemInfo(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"OperatingSystem\" : \"OperatingSystem\", \"ProductName\" : \"ProductName\", \"PackageName\" : \"PackageName\", \"TranscodingTempPath\" : \"TranscodingTempPath\", \"CanSelfRestart\" : true, \"StartupWizardCompleted\" : true, \"Version\" : \"Version\", \"CachePath\" : \"CachePath\", \"HasPendingRestart\" : true, \"ProgramDataPath\" : \"ProgramDataPath\", \"WebPath\" : \"WebPath\", \"SupportsLibraryMonitor\" : true, \"LocalAddress\" : \"LocalAddress\", \"CanLaunchWebBrowser\" : true, \"IsShuttingDown\" : true, \"ItemsByNamePath\" : \"ItemsByNamePath\", \"CompletedInstallations\" : [ { \"SourceUrl\" : \"SourceUrl\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"Checksum\" : \"Checksum\", \"Changelog\" : \"Changelog\", \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" }, { \"SourceUrl\" : \"SourceUrl\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"Checksum\" : \"Checksum\", \"Changelog\" : \"Changelog\", \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" } ], \"WebSocketPortNumber\" : 0, \"OperatingSystemDisplayName\" : \"OperatingSystemDisplayName\", \"InternalMetadataPath\" : \"InternalMetadataPath\", \"ServerName\" : \"ServerName\", \"Id\" : \"Id\", \"HasUpdateAvailable\" : true, \"LogPath\" : \"LogPath\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"OperatingSystem\" : \"OperatingSystem\", \"ProductName\" : \"ProductName\", \"PackageName\" : \"PackageName\", \"TranscodingTempPath\" : \"TranscodingTempPath\", \"CanSelfRestart\" : true, \"StartupWizardCompleted\" : true, \"Version\" : \"Version\", \"CachePath\" : \"CachePath\", \"HasPendingRestart\" : true, \"ProgramDataPath\" : \"ProgramDataPath\", \"WebPath\" : \"WebPath\", \"SupportsLibraryMonitor\" : true, \"LocalAddress\" : \"LocalAddress\", \"CanLaunchWebBrowser\" : true, \"IsShuttingDown\" : true, \"ItemsByNamePath\" : \"ItemsByNamePath\", \"CompletedInstallations\" : [ { \"SourceUrl\" : \"SourceUrl\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"Checksum\" : \"Checksum\", \"Changelog\" : \"Changelog\", \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" }, { \"SourceUrl\" : \"SourceUrl\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"Checksum\" : \"Checksum\", \"Changelog\" : \"Changelog\", \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" } ], \"WebSocketPortNumber\" : 0, \"OperatingSystemDisplayName\" : \"OperatingSystemDisplayName\", \"InternalMetadataPath\" : \"InternalMetadataPath\", \"ServerName\" : \"ServerName\", \"Id\" : \"Id\", \"HasUpdateAvailable\" : true, \"LogPath\" : \"LogPath\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"OperatingSystem\" : \"OperatingSystem\", \"ProductName\" : \"ProductName\", \"PackageName\" : \"PackageName\", \"TranscodingTempPath\" : \"TranscodingTempPath\", \"CanSelfRestart\" : true, \"StartupWizardCompleted\" : true, \"Version\" : \"Version\", \"CachePath\" : \"CachePath\", \"HasPendingRestart\" : true, \"ProgramDataPath\" : \"ProgramDataPath\", \"WebPath\" : \"WebPath\", \"SupportsLibraryMonitor\" : true, \"LocalAddress\" : \"LocalAddress\", \"CanLaunchWebBrowser\" : true, \"IsShuttingDown\" : true, \"ItemsByNamePath\" : \"ItemsByNamePath\", \"CompletedInstallations\" : [ { \"SourceUrl\" : \"SourceUrl\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"Checksum\" : \"Checksum\", \"Changelog\" : \"Changelog\", \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" }, { \"SourceUrl\" : \"SourceUrl\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"Checksum\" : \"Checksum\", \"Changelog\" : \"Changelog\", \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" } ], \"WebSocketPortNumber\" : 0, \"OperatingSystemDisplayName\" : \"OperatingSystemDisplayName\", \"InternalMetadataPath\" : \"InternalMetadataPath\", \"ServerName\" : \"ServerName\", \"Id\" : \"Id\", \"HasUpdateAvailable\" : true, \"LogPath\" : \"LogPath\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /System/WakeOnLanInfo : Gets wake on lan information.
     *
     * @return Information retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getWakeOnLanInfo",
        summary = "Gets wake on lan information.",
        tags = { "System" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Information retrieved.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WakeOnLanInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = WakeOnLanInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = WakeOnLanInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/System/WakeOnLanInfo",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<WakeOnLanInfo>> getWakeOnLanInfo(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Port\" : 0, \"MacAddress\" : \"MacAddress\" }, { \"Port\" : 0, \"MacAddress\" : \"MacAddress\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Port\" : 0, \"MacAddress\" : \"MacAddress\" }, { \"Port\" : 0, \"MacAddress\" : \"MacAddress\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Port\" : 0, \"MacAddress\" : \"MacAddress\" }, { \"Port\" : 0, \"MacAddress\" : \"MacAddress\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /System/Ping : Pings the system.
     *
     * @return Information retrieved. (status code 200)
     */
    @Operation(
        operationId = "postPingSystem",
        summary = "Pings the system.",
        tags = { "System" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Information retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/System/Ping",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<String> postPingSystem(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /System/Restart : Restarts the application.
     *
     * @return Server restarted. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "restartApplication",
        summary = "Restarts the application.",
        tags = { "System" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Server restarted."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/System/Restart"
    )
    
    default ResponseEntity<Void> restartApplication(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /System/Shutdown : Shuts down the application.
     *
     * @return Server shut down. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "shutdownApplication",
        summary = "Shuts down the application.",
        tags = { "System" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Server shut down."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/System/Shutdown"
    )
    
    default ResponseEntity<Void> shutdownApplication(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /System/Configuration : Updates application configuration.
     *
     * @param serverConfiguration Configuration. (required)
     * @return Configuration updated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "updateConfiguration",
        summary = "Updates application configuration.",
        tags = { "Configuration" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Configuration updated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/System/Configuration",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> updateConfiguration(
        @Parameter(name = "ServerConfiguration", description = "Configuration.", required = true) @Valid @RequestBody ServerConfiguration serverConfiguration
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /System/MediaEncoder/Path : Updates the path to the media encoder.
     *
     * @param mediaEncoderPathDto Media encoder path form body. (required)
     * @return Media encoder path updated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "updateMediaEncoderPath",
        summary = "Updates the path to the media encoder.",
        tags = { "Configuration" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Media encoder path updated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/System/MediaEncoder/Path",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> updateMediaEncoderPath(
        @Parameter(name = "MediaEncoderPathDto", description = "Media encoder path form body.", required = true) @Valid @RequestBody MediaEncoderPathDto mediaEncoderPathDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /System/Configuration/{key} : Updates named configuration.
     *
     * @param key Configuration key. (required)
     * @return Named configuration updated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "updateNamedConfiguration",
        summary = "Updates named configuration.",
        tags = { "Configuration" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Named configuration updated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/System/Configuration/{key}"
    )
    
    default ResponseEntity<Void> updateNamedConfiguration(
        @Parameter(name = "key", description = "Configuration key.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
