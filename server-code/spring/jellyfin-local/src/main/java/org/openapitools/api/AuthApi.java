/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AuthenticationInfoQueryResult;
import org.openapitools.model.NameIdPair;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "ApiKey", description = "the ApiKey API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /Auth/Keys : Create a new api key.
     *
     * @param app Name of the app using the authentication key. (required)
     * @return Api key created. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "createKey",
        summary = "Create a new api key.",
        tags = { "ApiKey" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Api key created."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Auth/Keys"
    )
    
    default ResponseEntity<Void> createKey(
        @NotNull @Parameter(name = "app", description = "Name of the app using the authentication key.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "app", required = true) String app
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Auth/Providers : Get all auth providers.
     *
     * @return Auth providers retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getAuthProviders",
        summary = "Get all auth providers.",
        tags = { "Session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Auth providers retrieved.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = NameIdPair.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = NameIdPair.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = NameIdPair.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Auth/Providers",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<NameIdPair>> getAuthProviders(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Auth/Keys : Get all keys.
     *
     * @return Api keys retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getKeys",
        summary = "Get all keys.",
        tags = { "ApiKey" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Api keys retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthenticationInfoQueryResult.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = AuthenticationInfoQueryResult.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = AuthenticationInfoQueryResult.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Auth/Keys",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<AuthenticationInfoQueryResult> getKeys(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"TotalRecordCount\" : 1, \"StartIndex\" : 6, \"Items\" : [ { \"AppVersion\" : \"AppVersion\", \"UserName\" : \"UserName\", \"AccessToken\" : \"AccessToken\", \"DeviceId\" : \"DeviceId\", \"IsActive\" : true, \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"DateRevoked\" : \"2000-01-23T04:56:07.000+00:00\", \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : 0, \"DateLastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"AppName\" : \"AppName\", \"DeviceName\" : \"DeviceName\" }, { \"AppVersion\" : \"AppVersion\", \"UserName\" : \"UserName\", \"AccessToken\" : \"AccessToken\", \"DeviceId\" : \"DeviceId\", \"IsActive\" : true, \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"DateRevoked\" : \"2000-01-23T04:56:07.000+00:00\", \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : 0, \"DateLastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"AppName\" : \"AppName\", \"DeviceName\" : \"DeviceName\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"TotalRecordCount\" : 1, \"StartIndex\" : 6, \"Items\" : [ { \"AppVersion\" : \"AppVersion\", \"UserName\" : \"UserName\", \"AccessToken\" : \"AccessToken\", \"DeviceId\" : \"DeviceId\", \"IsActive\" : true, \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"DateRevoked\" : \"2000-01-23T04:56:07.000+00:00\", \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : 0, \"DateLastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"AppName\" : \"AppName\", \"DeviceName\" : \"DeviceName\" }, { \"AppVersion\" : \"AppVersion\", \"UserName\" : \"UserName\", \"AccessToken\" : \"AccessToken\", \"DeviceId\" : \"DeviceId\", \"IsActive\" : true, \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"DateRevoked\" : \"2000-01-23T04:56:07.000+00:00\", \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : 0, \"DateLastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"AppName\" : \"AppName\", \"DeviceName\" : \"DeviceName\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"TotalRecordCount\" : 1, \"StartIndex\" : 6, \"Items\" : [ { \"AppVersion\" : \"AppVersion\", \"UserName\" : \"UserName\", \"AccessToken\" : \"AccessToken\", \"DeviceId\" : \"DeviceId\", \"IsActive\" : true, \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"DateRevoked\" : \"2000-01-23T04:56:07.000+00:00\", \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : 0, \"DateLastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"AppName\" : \"AppName\", \"DeviceName\" : \"DeviceName\" }, { \"AppVersion\" : \"AppVersion\", \"UserName\" : \"UserName\", \"AccessToken\" : \"AccessToken\", \"DeviceId\" : \"DeviceId\", \"IsActive\" : true, \"UserId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"DateRevoked\" : \"2000-01-23T04:56:07.000+00:00\", \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : 0, \"DateLastActivity\" : \"2000-01-23T04:56:07.000+00:00\", \"AppName\" : \"AppName\", \"DeviceName\" : \"DeviceName\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Auth/PasswordResetProviders : Get all password reset providers.
     *
     * @return Password reset providers retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getPasswordResetProviders",
        summary = "Get all password reset providers.",
        tags = { "Session" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Password reset providers retrieved.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = NameIdPair.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = NameIdPair.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = NameIdPair.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Auth/PasswordResetProviders",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<NameIdPair>> getPasswordResetProviders(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /Auth/Keys/{key} : Remove an api key.
     *
     * @param key The access token to delete. (required)
     * @return Api key deleted. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "revokeKey",
        summary = "Remove an api key.",
        tags = { "ApiKey" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Api key deleted."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/Auth/Keys/{key}"
    )
    
    default ResponseEntity<Void> revokeKey(
        @Parameter(name = "key", description = "The access token to delete.", required = true, in = ParameterIn.PATH) @PathVariable("key") String key
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
