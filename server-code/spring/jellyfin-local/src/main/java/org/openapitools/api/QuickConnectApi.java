/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ProblemDetails;
import org.openapitools.model.QuickConnectResult;
import org.openapitools.model.QuickConnectState;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "QuickConnect", description = "the QuickConnect API")
public interface QuickConnectApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /QuickConnect/Activate : Temporarily activates quick connect for five minutes.
     *
     * @return Quick connect has been temporarily activated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Quick connect is unavailable on this server. (status code 403)
     */
    @Operation(
        operationId = "activate",
        summary = "Temporarily activates quick connect for five minutes.",
        tags = { "QuickConnect" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Quick connect has been temporarily activated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Quick connect is unavailable on this server.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/QuickConnect/Activate",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> activate(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /QuickConnect/Authorize : Authorizes a pending quick connect request.
     *
     * @param code Quick connect code to authorize. (required)
     * @return Quick connect result authorized successfully. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Unknown user id. (status code 403)
     */
    @Operation(
        operationId = "authorize",
        summary = "Authorizes a pending quick connect request.",
        tags = { "QuickConnect" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Quick connect result authorized successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Boolean.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = Boolean.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = Boolean.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Unknown user id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/QuickConnect/Authorize",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Boolean> authorize(
        @NotNull @Parameter(name = "code", description = "Quick connect code to authorize.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "code", required = true) String code
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /QuickConnect/Available : Enables or disables quick connect.
     *
     * @param status New MediaBrowser.Model.QuickConnect.QuickConnectState. (optional)
     * @return Quick connect state set successfully. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "available",
        summary = "Enables or disables quick connect.",
        tags = { "QuickConnect" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Quick connect state set successfully."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/QuickConnect/Available"
    )
    
    default ResponseEntity<Void> available(
        @Parameter(name = "status", description = "New MediaBrowser.Model.QuickConnect.QuickConnectState.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) QuickConnectState status
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /QuickConnect/Connect : Attempts to retrieve authentication information.
     *
     * @param secret Secret previously returned from the Initiate endpoint. (required)
     * @return Quick connect result returned. (status code 200)
     *         or Unknown quick connect secret. (status code 404)
     */
    @Operation(
        operationId = "connect",
        summary = "Attempts to retrieve authentication information.",
        tags = { "QuickConnect" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Quick connect result returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QuickConnectResult.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = QuickConnectResult.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = QuickConnectResult.class))
            }),
            @ApiResponse(responseCode = "404", description = "Unknown quick connect secret.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/QuickConnect/Connect",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<QuickConnectResult> connect(
        @NotNull @Parameter(name = "secret", description = "Secret previously returned from the Initiate endpoint.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "secret", required = true) String secret
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Secret\" : \"Secret\", \"Authenticated\" : true, \"Authentication\" : \"Authentication\", \"Error\" : \"Error\", \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\", \"Code\" : \"Code\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"Secret\" : \"Secret\", \"Authenticated\" : true, \"Authentication\" : \"Authentication\", \"Error\" : \"Error\", \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\", \"Code\" : \"Code\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"Secret\" : \"Secret\", \"Authenticated\" : true, \"Authentication\" : \"Authentication\", \"Error\" : \"Error\", \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\", \"Code\" : \"Code\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /QuickConnect/Deauthorize : Deauthorize all quick connect devices for the current user.
     *
     * @return All quick connect devices were deleted. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deauthorize",
        summary = "Deauthorize all quick connect devices for the current user.",
        tags = { "QuickConnect" },
        responses = {
            @ApiResponse(responseCode = "200", description = "All quick connect devices were deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = Integer.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = Integer.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/QuickConnect/Deauthorize",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Integer> deauthorize(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /QuickConnect/Status : Gets the current quick connect state.
     *
     * @return Quick connect state returned. (status code 200)
     */
    @Operation(
        operationId = "getStatus",
        summary = "Gets the current quick connect state.",
        tags = { "QuickConnect" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Quick connect state returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QuickConnectState.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = QuickConnectState.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = QuickConnectState.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/QuickConnect/Status",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<QuickConnectState> getStatus(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /QuickConnect/Initiate : Initiate a new quick connect request.
     *
     * @return Quick connect request successfully created. (status code 200)
     *         or Quick connect is not active on this server. (status code 401)
     */
    @Operation(
        operationId = "initiate",
        summary = "Initiate a new quick connect request.",
        tags = { "QuickConnect" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Quick connect request successfully created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QuickConnectResult.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = QuickConnectResult.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = QuickConnectResult.class))
            }),
            @ApiResponse(responseCode = "401", description = "Quick connect is not active on this server.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/QuickConnect/Initiate",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<QuickConnectResult> initiate(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Secret\" : \"Secret\", \"Authenticated\" : true, \"Authentication\" : \"Authentication\", \"Error\" : \"Error\", \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\", \"Code\" : \"Code\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"Secret\" : \"Secret\", \"Authenticated\" : true, \"Authentication\" : \"Authentication\", \"Error\" : \"Error\", \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\", \"Code\" : \"Code\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"Secret\" : \"Secret\", \"Authenticated\" : true, \"Authentication\" : \"Authentication\", \"Error\" : \"Error\", \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\", \"Code\" : \"Code\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
