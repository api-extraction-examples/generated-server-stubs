/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.BufferRequestDto;
import org.openapitools.model.GroupInfoDto;
import org.openapitools.model.IgnoreWaitRequestDto;
import org.openapitools.model.JoinGroupRequestDto;
import org.openapitools.model.MovePlaylistItemRequestDto;
import org.openapitools.model.NewGroupRequestDto;
import org.openapitools.model.NextItemRequestDto;
import org.openapitools.model.PingRequestDto;
import org.openapitools.model.PlayRequestDto;
import org.openapitools.model.PreviousItemRequestDto;
import org.openapitools.model.QueueRequestDto;
import org.openapitools.model.ReadyRequestDto;
import org.openapitools.model.RemoveFromPlaylistRequestDto;
import org.openapitools.model.SeekRequestDto;
import org.openapitools.model.SetPlaylistItemRequestDto;
import org.openapitools.model.SetRepeatModeRequestDto;
import org.openapitools.model.SetShuffleModeRequestDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "SyncPlay", description = "the SyncPlay API")
public interface SyncPlayApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /SyncPlay/Buffering : Notify SyncPlay group that member is buffering.
     *
     * @param bufferRequestDto The player status. (required)
     * @return Group state update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayBuffering",
        summary = "Notify SyncPlay group that member is buffering.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Group state update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/Buffering",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlayBuffering(
        @Parameter(name = "BufferRequestDto", description = "The player status.", required = true) @Valid @RequestBody BufferRequestDto bufferRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/New : Create a new SyncPlay group.
     *
     * @param newGroupRequestDto The settings of the new group. (required)
     * @return New group created. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayCreateGroup",
        summary = "Create a new SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "New group created."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/New",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlayCreateGroup(
        @Parameter(name = "NewGroupRequestDto", description = "The settings of the new group.", required = true) @Valid @RequestBody NewGroupRequestDto newGroupRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /SyncPlay/List : Gets all SyncPlay groups.
     *
     * @return Groups returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayGetGroups",
        summary = "Gets all SyncPlay groups.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Groups returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GroupInfoDto.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = GroupInfoDto.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = GroupInfoDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/SyncPlay/List",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<GroupInfoDto>> syncPlayGetGroups(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"GroupName\" : \"GroupName\", \"LastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"Participants\" : [ \"Participants\", \"Participants\" ], \"GroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"GroupName\" : \"GroupName\", \"LastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"Participants\" : [ \"Participants\", \"Participants\" ], \"GroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"GroupName\" : \"GroupName\", \"LastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"Participants\" : [ \"Participants\", \"Participants\" ], \"GroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"GroupName\" : \"GroupName\", \"LastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"Participants\" : [ \"Participants\", \"Participants\" ], \"GroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"GroupName\" : \"GroupName\", \"LastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"Participants\" : [ \"Participants\", \"Participants\" ], \"GroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"GroupName\" : \"GroupName\", \"LastUpdatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"Participants\" : [ \"Participants\", \"Participants\" ], \"GroupId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/Join : Join an existing SyncPlay group.
     *
     * @param joinGroupRequestDto The group to join. (required)
     * @return Group join successful. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayJoinGroup",
        summary = "Join an existing SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Group join successful."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/Join",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlayJoinGroup(
        @Parameter(name = "JoinGroupRequestDto", description = "The group to join.", required = true) @Valid @RequestBody JoinGroupRequestDto joinGroupRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/Leave : Leave the joined SyncPlay group.
     *
     * @return Group leave successful. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayLeaveGroup",
        summary = "Leave the joined SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Group leave successful."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/Leave"
    )
    
    default ResponseEntity<Void> syncPlayLeaveGroup(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/MovePlaylistItem : Request to move an item in the playlist in SyncPlay group.
     *
     * @param movePlaylistItemRequestDto The new position for the item. (required)
     * @return Queue update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayMovePlaylistItem",
        summary = "Request to move an item in the playlist in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Queue update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/MovePlaylistItem",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlayMovePlaylistItem(
        @Parameter(name = "MovePlaylistItemRequestDto", description = "The new position for the item.", required = true) @Valid @RequestBody MovePlaylistItemRequestDto movePlaylistItemRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/NextItem : Request next item in SyncPlay group.
     *
     * @param nextItemRequestDto The current item information. (required)
     * @return Next item update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayNextItem",
        summary = "Request next item in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Next item update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/NextItem",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlayNextItem(
        @Parameter(name = "NextItemRequestDto", description = "The current item information.", required = true) @Valid @RequestBody NextItemRequestDto nextItemRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/Pause : Request pause in SyncPlay group.
     *
     * @return Pause update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayPause",
        summary = "Request pause in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Pause update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/Pause"
    )
    
    default ResponseEntity<Void> syncPlayPause(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/Ping : Update session ping.
     *
     * @param pingRequestDto The new ping. (required)
     * @return Ping updated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayPing",
        summary = "Update session ping.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Ping updated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/Ping",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlayPing(
        @Parameter(name = "PingRequestDto", description = "The new ping.", required = true) @Valid @RequestBody PingRequestDto pingRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/PreviousItem : Request previous item in SyncPlay group.
     *
     * @param previousItemRequestDto The current item information. (required)
     * @return Previous item update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayPreviousItem",
        summary = "Request previous item in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Previous item update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/PreviousItem",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlayPreviousItem(
        @Parameter(name = "PreviousItemRequestDto", description = "The current item information.", required = true) @Valid @RequestBody PreviousItemRequestDto previousItemRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/Queue : Request to queue items to the playlist of a SyncPlay group.
     *
     * @param queueRequestDto The items to add. (required)
     * @return Queue update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayQueue",
        summary = "Request to queue items to the playlist of a SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Queue update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/Queue",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlayQueue(
        @Parameter(name = "QueueRequestDto", description = "The items to add.", required = true) @Valid @RequestBody QueueRequestDto queueRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/Ready : Notify SyncPlay group that member is ready for playback.
     *
     * @param readyRequestDto The player status. (required)
     * @return Group state update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayReady",
        summary = "Notify SyncPlay group that member is ready for playback.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Group state update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/Ready",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlayReady(
        @Parameter(name = "ReadyRequestDto", description = "The player status.", required = true) @Valid @RequestBody ReadyRequestDto readyRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/RemoveFromPlaylist : Request to remove items from the playlist in SyncPlay group.
     *
     * @param removeFromPlaylistRequestDto The items to remove. (required)
     * @return Queue update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayRemoveFromPlaylist",
        summary = "Request to remove items from the playlist in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Queue update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/RemoveFromPlaylist",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlayRemoveFromPlaylist(
        @Parameter(name = "RemoveFromPlaylistRequestDto", description = "The items to remove.", required = true) @Valid @RequestBody RemoveFromPlaylistRequestDto removeFromPlaylistRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/Seek : Request seek in SyncPlay group.
     *
     * @param seekRequestDto The new playback position. (required)
     * @return Seek update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlaySeek",
        summary = "Request seek in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Seek update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/Seek",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlaySeek(
        @Parameter(name = "SeekRequestDto", description = "The new playback position.", required = true) @Valid @RequestBody SeekRequestDto seekRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/SetIgnoreWait : Request SyncPlay group to ignore member during group-wait.
     *
     * @param ignoreWaitRequestDto The settings to set. (required)
     * @return Member state updated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlaySetIgnoreWait",
        summary = "Request SyncPlay group to ignore member during group-wait.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Member state updated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/SetIgnoreWait",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlaySetIgnoreWait(
        @Parameter(name = "IgnoreWaitRequestDto", description = "The settings to set.", required = true) @Valid @RequestBody IgnoreWaitRequestDto ignoreWaitRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/SetNewQueue : Request to set new playlist in SyncPlay group.
     *
     * @param playRequestDto The new playlist to play in the group. (required)
     * @return Queue update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlaySetNewQueue",
        summary = "Request to set new playlist in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Queue update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/SetNewQueue",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlaySetNewQueue(
        @Parameter(name = "PlayRequestDto", description = "The new playlist to play in the group.", required = true) @Valid @RequestBody PlayRequestDto playRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/SetPlaylistItem : Request to change playlist item in SyncPlay group.
     *
     * @param setPlaylistItemRequestDto The new item to play. (required)
     * @return Queue update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlaySetPlaylistItem",
        summary = "Request to change playlist item in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Queue update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/SetPlaylistItem",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlaySetPlaylistItem(
        @Parameter(name = "SetPlaylistItemRequestDto", description = "The new item to play.", required = true) @Valid @RequestBody SetPlaylistItemRequestDto setPlaylistItemRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/SetRepeatMode : Request to set repeat mode in SyncPlay group.
     *
     * @param setRepeatModeRequestDto The new repeat mode. (required)
     * @return Play queue update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlaySetRepeatMode",
        summary = "Request to set repeat mode in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Play queue update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/SetRepeatMode",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlaySetRepeatMode(
        @Parameter(name = "SetRepeatModeRequestDto", description = "The new repeat mode.", required = true) @Valid @RequestBody SetRepeatModeRequestDto setRepeatModeRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/SetShuffleMode : Request to set shuffle mode in SyncPlay group.
     *
     * @param setShuffleModeRequestDto The new shuffle mode. (required)
     * @return Play queue update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlaySetShuffleMode",
        summary = "Request to set shuffle mode in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Play queue update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/SetShuffleMode",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> syncPlaySetShuffleMode(
        @Parameter(name = "SetShuffleModeRequestDto", description = "The new shuffle mode.", required = true) @Valid @RequestBody SetShuffleModeRequestDto setShuffleModeRequestDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/Stop : Request stop in SyncPlay group.
     *
     * @return Stop update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayStop",
        summary = "Request stop in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Stop update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/Stop"
    )
    
    default ResponseEntity<Void> syncPlayStop(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /SyncPlay/Unpause : Request unpause in SyncPlay group.
     *
     * @return Unpause update sent to all group members. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "syncPlayUnpause",
        summary = "Request unpause in SyncPlay group.",
        tags = { "SyncPlay" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Unpause update sent to all group members."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SyncPlay/Unpause"
    )
    
    default ResponseEntity<Void> syncPlayUnpause(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
