/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ImageByNameInfo;
import org.openapitools.model.ProblemDetails;
import java.net.URI;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "ImageByName", description = "the ImageByName API")
public interface ImagesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /Images/General/{name}/{type} : Get General Image.
     *
     * @param name The name of the image. (required)
     * @param type Image Type (primary, backdrop, logo, etc). (required)
     * @return Image stream retrieved. (status code 200)
     *         or Image not found. (status code 404)
     */
    @Operation(
        operationId = "getGeneralImage",
        summary = "Get General Image.",
        tags = { "ImageByName" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Image stream retrieved.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Image not found.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Images/General/{name}/{type}",
        produces = { "image/*", "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase", "application/octet-stream" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getGeneralImage(
        @Parameter(name = "name", description = "The name of the image.", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "type", description = "Image Type (primary, backdrop, logo, etc).", required = true, in = ParameterIn.PATH) @PathVariable("type") String type
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Images/General : Get all general images.
     *
     * @return Retrieved list of images. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getGeneralImages",
        summary = "Get all general images.",
        tags = { "ImageByName" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Retrieved list of images.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ImageByNameInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = ImageByNameInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = ImageByNameInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Images/General",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<ImageByNameInfo>> getGeneralImages(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" }, { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" }, { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" }, { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Images/MediaInfo/{theme}/{name} : Get media info image.
     *
     * @param theme The theme to get the image from. (required)
     * @param name The name of the image. (required)
     * @return Image stream retrieved. (status code 200)
     *         or Image not found. (status code 404)
     */
    @Operation(
        operationId = "getMediaInfoImage",
        summary = "Get media info image.",
        tags = { "ImageByName" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Image stream retrieved.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Image not found.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Images/MediaInfo/{theme}/{name}",
        produces = { "image/*", "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase", "application/octet-stream" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getMediaInfoImage(
        @Parameter(name = "theme", description = "The theme to get the image from.", required = true, in = ParameterIn.PATH) @PathVariable("theme") String theme,
        @Parameter(name = "name", description = "The name of the image.", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Images/MediaInfo : Get all media info images.
     *
     * @return Image list retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getMediaInfoImages",
        summary = "Get all media info images.",
        tags = { "ImageByName" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Image list retrieved.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ImageByNameInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = ImageByNameInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = ImageByNameInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Images/MediaInfo",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<ImageByNameInfo>> getMediaInfoImages(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" }, { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" }, { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" }, { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Images/Ratings/{theme}/{name} : Get rating image.
     *
     * @param theme The theme to get the image from. (required)
     * @param name The name of the image. (required)
     * @return Image stream retrieved. (status code 200)
     *         or Image not found. (status code 404)
     */
    @Operation(
        operationId = "getRatingImage",
        summary = "Get rating image.",
        tags = { "ImageByName" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Image stream retrieved.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Image not found.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Images/Ratings/{theme}/{name}",
        produces = { "image/*", "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase", "application/octet-stream" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getRatingImage(
        @Parameter(name = "theme", description = "The theme to get the image from.", required = true, in = ParameterIn.PATH) @PathVariable("theme") String theme,
        @Parameter(name = "name", description = "The name of the image.", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Images/Ratings : Get all general images.
     *
     * @return Retrieved list of images. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getRatingImages",
        summary = "Get all general images.",
        tags = { "ImageByName" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Retrieved list of images.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ImageByNameInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = ImageByNameInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = ImageByNameInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Images/Ratings",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<ImageByNameInfo>> getRatingImages(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" }, { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" }, { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" }, { \"Context\" : \"Context\", \"Format\" : \"Format\", \"Theme\" : \"Theme\", \"FileLength\" : 0, \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Images/Remote : Gets a remote image.
     *
     * @param imageUrl The image url. (required)
     * @return Remote image returned. (status code 200)
     *         or Remote image not found. (status code 404)
     */
    @Operation(
        operationId = "getRemoteImage",
        summary = "Gets a remote image.",
        tags = { "RemoteImage" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Remote image returned.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Remote image not found.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Images/Remote",
        produces = { "image/*", "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase", "application/octet-stream" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getRemoteImage(
        @NotNull @Parameter(name = "imageUrl", description = "The image url.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "imageUrl", required = true) URI imageUrl
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
