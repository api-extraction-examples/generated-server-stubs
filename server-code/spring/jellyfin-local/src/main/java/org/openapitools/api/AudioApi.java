/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.EncodingContext;
import org.openapitools.model.SubtitleDeliveryMethod;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Audio", description = "the Audio API")
public interface AudioApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /Audio/{itemId}/stream : Gets an audio stream.
     *
     * @param itemId The item id. (required)
     * @param container The audio container. (optional)
     * @param _static Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     * @param params The streaming parameters. (optional)
     * @param tag The tag. (optional)
     * @param deviceProfileId Optional. The dlna device profile id to utilize. (optional)
     * @param playSessionId The play session id. (optional)
     * @param segmentContainer The segment container. (optional)
     * @param segmentLength The segment length. (optional)
     * @param minSegments The minimum number of segments. (optional)
     * @param mediaSourceId The media version id, if playing an alternate version. (optional)
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     * @param audioCodec Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     * @param enableAutoStreamCopy Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     * @param allowVideoStreamCopy Whether or not to allow copying of the video stream url. (optional)
     * @param allowAudioStreamCopy Whether or not to allow copying of the audio stream url. (optional)
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames. (optional)
     * @param audioSampleRate Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     * @param maxAudioBitDepth Optional. The maximum audio bit depth. (optional)
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     * @param audioChannels Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     * @param maxAudioChannels Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     * @param profile Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     * @param level Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     * @param framerate Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param maxFramerate Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param copyTimestamps Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param width Optional. The fixed horizontal resolution of the encoded video. (optional)
     * @param height Optional. The fixed vertical resolution of the encoded video. (optional)
     * @param videoBitRate Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     * @param subtitleStreamIndex Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     * @param subtitleMethod Optional. Specify the subtitle delivery method. (optional)
     * @param maxRefFrames Optional. (optional)
     * @param maxVideoBitDepth Optional. The maximum video bit depth. (optional)
     * @param requireAvc Optional. Whether to require avc. (optional)
     * @param deInterlace Optional. Whether to deinterlace the video. (optional)
     * @param requireNonAnamorphic Optional. Whether to require a non anamorphic stream. (optional)
     * @param transcodingMaxAudioChannels Optional. The maximum number of audio channels to transcode. (optional)
     * @param cpuCoreLimit Optional. The limit of how many cpu cores to use. (optional)
     * @param liveStreamId The live stream id. (optional)
     * @param enableMpegtsM2TsMode Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     * @param videoCodec Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     * @param subtitleCodec Optional. Specify a subtitle codec to encode to. (optional)
     * @param transcodeReasons Optional. The transcoding reason. (optional)
     * @param audioStreamIndex Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     * @param videoStreamIndex Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     * @param context Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     * @param streamOptions Optional. The streaming options. (optional)
     * @return Audio stream returned. (status code 200)
     */
    @Operation(
        operationId = "getAudioStream",
        summary = "Gets an audio stream.",
        tags = { "Audio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Audio stream returned.", content = {
                @Content(mediaType = "audio/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Audio/{itemId}/stream",
        produces = { "audio/*" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getAudioStream(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @Parameter(name = "container", description = "The audio container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "container", required = false) String container,
        @Parameter(name = "static", description = "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "static", required = false) Boolean _static,
        @Parameter(name = "params", description = "The streaming parameters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "params", required = false) String params,
        @Parameter(name = "tag", description = "The tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag,
        @Parameter(name = "deviceProfileId", description = "Optional. The dlna device profile id to utilize.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceProfileId", required = false) String deviceProfileId,
        @Parameter(name = "playSessionId", description = "The play session id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playSessionId", required = false) String playSessionId,
        @Parameter(name = "segmentContainer", description = "The segment container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentContainer", required = false) String segmentContainer,
        @Parameter(name = "segmentLength", description = "The segment length.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentLength", required = false) Integer segmentLength,
        @Parameter(name = "minSegments", description = "The minimum number of segments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minSegments", required = false) Integer minSegments,
        @Parameter(name = "mediaSourceId", description = "The media version id, if playing an alternate version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaSourceId", required = false) String mediaSourceId,
        @Parameter(name = "deviceId", description = "The device id of the client requesting. Used to stop encoding processes when needed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceId", required = false) String deviceId,
        @Parameter(name = "audioCodec", description = "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioCodec", required = false) String audioCodec,
        @Parameter(name = "enableAutoStreamCopy", description = "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableAutoStreamCopy", required = false) Boolean enableAutoStreamCopy,
        @Parameter(name = "allowVideoStreamCopy", description = "Whether or not to allow copying of the video stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowVideoStreamCopy", required = false) Boolean allowVideoStreamCopy,
        @Parameter(name = "allowAudioStreamCopy", description = "Whether or not to allow copying of the audio stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowAudioStreamCopy", required = false) Boolean allowAudioStreamCopy,
        @Parameter(name = "breakOnNonKeyFrames", description = "Optional. Whether to break on non key frames.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "breakOnNonKeyFrames", required = false) Boolean breakOnNonKeyFrames,
        @Parameter(name = "audioSampleRate", description = "Optional. Specify a specific audio sample rate, e.g. 44100.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioSampleRate", required = false) Integer audioSampleRate,
        @Parameter(name = "maxAudioBitDepth", description = "Optional. The maximum audio bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioBitDepth", required = false) Integer maxAudioBitDepth,
        @Parameter(name = "audioBitRate", description = "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioBitRate", required = false) Integer audioBitRate,
        @Parameter(name = "audioChannels", description = "Optional. Specify a specific number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioChannels", required = false) Integer audioChannels,
        @Parameter(name = "maxAudioChannels", description = "Optional. Specify a maximum number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioChannels", required = false) Integer maxAudioChannels,
        @Parameter(name = "profile", description = "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "profile", required = false) String profile,
        @Parameter(name = "level", description = "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "level", required = false) String level,
        @Parameter(name = "framerate", description = "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "framerate", required = false) Float framerate,
        @Parameter(name = "maxFramerate", description = "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxFramerate", required = false) Float maxFramerate,
        @Parameter(name = "copyTimestamps", description = "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "copyTimestamps", required = false) Boolean copyTimestamps,
        @Parameter(name = "startTimeTicks", description = "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startTimeTicks", required = false) Long startTimeTicks,
        @Parameter(name = "width", description = "Optional. The fixed horizontal resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "width", required = false) Integer width,
        @Parameter(name = "height", description = "Optional. The fixed vertical resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "height", required = false) Integer height,
        @Parameter(name = "videoBitRate", description = "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoBitRate", required = false) Integer videoBitRate,
        @Parameter(name = "subtitleStreamIndex", description = "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleStreamIndex", required = false) Integer subtitleStreamIndex,
        @Parameter(name = "subtitleMethod", description = "Optional. Specify the subtitle delivery method.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleMethod", required = false) SubtitleDeliveryMethod subtitleMethod,
        @Parameter(name = "maxRefFrames", description = "Optional.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxRefFrames", required = false) Integer maxRefFrames,
        @Parameter(name = "maxVideoBitDepth", description = "Optional. The maximum video bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxVideoBitDepth", required = false) Integer maxVideoBitDepth,
        @Parameter(name = "requireAvc", description = "Optional. Whether to require avc.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireAvc", required = false) Boolean requireAvc,
        @Parameter(name = "deInterlace", description = "Optional. Whether to deinterlace the video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deInterlace", required = false) Boolean deInterlace,
        @Parameter(name = "requireNonAnamorphic", description = "Optional. Whether to require a non anamorphic stream.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireNonAnamorphic", required = false) Boolean requireNonAnamorphic,
        @Parameter(name = "transcodingMaxAudioChannels", description = "Optional. The maximum number of audio channels to transcode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingMaxAudioChannels", required = false) Integer transcodingMaxAudioChannels,
        @Parameter(name = "cpuCoreLimit", description = "Optional. The limit of how many cpu cores to use.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cpuCoreLimit", required = false) Integer cpuCoreLimit,
        @Parameter(name = "liveStreamId", description = "The live stream id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "liveStreamId", required = false) String liveStreamId,
        @Parameter(name = "enableMpegtsM2TsMode", description = "Optional. Whether to enable the MpegtsM2Ts mode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableMpegtsM2TsMode", required = false) Boolean enableMpegtsM2TsMode,
        @Parameter(name = "videoCodec", description = "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoCodec", required = false) String videoCodec,
        @Parameter(name = "subtitleCodec", description = "Optional. Specify a subtitle codec to encode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleCodec", required = false) String subtitleCodec,
        @Parameter(name = "transcodeReasons", description = "Optional. The transcoding reason.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodeReasons", required = false) String transcodeReasons,
        @Parameter(name = "audioStreamIndex", description = "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioStreamIndex", required = false) Integer audioStreamIndex,
        @Parameter(name = "videoStreamIndex", description = "Optional. The index of the video stream to use. If omitted the first video stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoStreamIndex", required = false) Integer videoStreamIndex,
        @Parameter(name = "context", description = "Optional. The MediaBrowser.Model.Dlna.EncodingContext.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "context", required = false) EncodingContext context,
        @Parameter(name = "streamOptions", description = "Optional. The streaming options.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Map<String, String> streamOptions
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Audio/{itemId}/stream.{container} : Gets an audio stream.
     *
     * @param itemId The item id. (required)
     * @param container The audio container. (required)
     * @param _static Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     * @param params The streaming parameters. (optional)
     * @param tag The tag. (optional)
     * @param deviceProfileId Optional. The dlna device profile id to utilize. (optional)
     * @param playSessionId The play session id. (optional)
     * @param segmentContainer The segment container. (optional)
     * @param segmentLength The segment lenght. (optional)
     * @param minSegments The minimum number of segments. (optional)
     * @param mediaSourceId The media version id, if playing an alternate version. (optional)
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     * @param audioCodec Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     * @param enableAutoStreamCopy Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     * @param allowVideoStreamCopy Whether or not to allow copying of the video stream url. (optional)
     * @param allowAudioStreamCopy Whether or not to allow copying of the audio stream url. (optional)
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames. (optional)
     * @param audioSampleRate Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     * @param maxAudioBitDepth Optional. The maximum audio bit depth. (optional)
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     * @param audioChannels Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     * @param maxAudioChannels Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     * @param profile Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     * @param level Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     * @param framerate Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param maxFramerate Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param copyTimestamps Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param width Optional. The fixed horizontal resolution of the encoded video. (optional)
     * @param height Optional. The fixed vertical resolution of the encoded video. (optional)
     * @param videoBitRate Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     * @param subtitleStreamIndex Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     * @param subtitleMethod Optional. Specify the subtitle delivery method. (optional)
     * @param maxRefFrames Optional. (optional)
     * @param maxVideoBitDepth Optional. The maximum video bit depth. (optional)
     * @param requireAvc Optional. Whether to require avc. (optional)
     * @param deInterlace Optional. Whether to deinterlace the video. (optional)
     * @param requireNonAnamorphic Optional. Whether to require a non anamporphic stream. (optional)
     * @param transcodingMaxAudioChannels Optional. The maximum number of audio channels to transcode. (optional)
     * @param cpuCoreLimit Optional. The limit of how many cpu cores to use. (optional)
     * @param liveStreamId The live stream id. (optional)
     * @param enableMpegtsM2TsMode Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     * @param videoCodec Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     * @param subtitleCodec Optional. Specify a subtitle codec to encode to. (optional)
     * @param transcodeReasons Optional. The transcoding reason. (optional)
     * @param audioStreamIndex Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     * @param videoStreamIndex Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     * @param context Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     * @param streamOptions Optional. The streaming options. (optional)
     * @return Audio stream returned. (status code 200)
     */
    @Operation(
        operationId = "getAudioStreamByContainer",
        summary = "Gets an audio stream.",
        tags = { "Audio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Audio stream returned.", content = {
                @Content(mediaType = "audio/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Audio/{itemId}/stream.{container}",
        produces = { "audio/*" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getAudioStreamByContainer(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @Parameter(name = "container", description = "The audio container.", required = true, in = ParameterIn.PATH) @PathVariable("container") String container,
        @Parameter(name = "static", description = "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "static", required = false) Boolean _static,
        @Parameter(name = "params", description = "The streaming parameters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "params", required = false) String params,
        @Parameter(name = "tag", description = "The tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag,
        @Parameter(name = "deviceProfileId", description = "Optional. The dlna device profile id to utilize.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceProfileId", required = false) String deviceProfileId,
        @Parameter(name = "playSessionId", description = "The play session id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playSessionId", required = false) String playSessionId,
        @Parameter(name = "segmentContainer", description = "The segment container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentContainer", required = false) String segmentContainer,
        @Parameter(name = "segmentLength", description = "The segment lenght.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentLength", required = false) Integer segmentLength,
        @Parameter(name = "minSegments", description = "The minimum number of segments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minSegments", required = false) Integer minSegments,
        @Parameter(name = "mediaSourceId", description = "The media version id, if playing an alternate version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaSourceId", required = false) String mediaSourceId,
        @Parameter(name = "deviceId", description = "The device id of the client requesting. Used to stop encoding processes when needed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceId", required = false) String deviceId,
        @Parameter(name = "audioCodec", description = "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioCodec", required = false) String audioCodec,
        @Parameter(name = "enableAutoStreamCopy", description = "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableAutoStreamCopy", required = false) Boolean enableAutoStreamCopy,
        @Parameter(name = "allowVideoStreamCopy", description = "Whether or not to allow copying of the video stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowVideoStreamCopy", required = false) Boolean allowVideoStreamCopy,
        @Parameter(name = "allowAudioStreamCopy", description = "Whether or not to allow copying of the audio stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowAudioStreamCopy", required = false) Boolean allowAudioStreamCopy,
        @Parameter(name = "breakOnNonKeyFrames", description = "Optional. Whether to break on non key frames.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "breakOnNonKeyFrames", required = false) Boolean breakOnNonKeyFrames,
        @Parameter(name = "audioSampleRate", description = "Optional. Specify a specific audio sample rate, e.g. 44100.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioSampleRate", required = false) Integer audioSampleRate,
        @Parameter(name = "maxAudioBitDepth", description = "Optional. The maximum audio bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioBitDepth", required = false) Integer maxAudioBitDepth,
        @Parameter(name = "audioBitRate", description = "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioBitRate", required = false) Integer audioBitRate,
        @Parameter(name = "audioChannels", description = "Optional. Specify a specific number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioChannels", required = false) Integer audioChannels,
        @Parameter(name = "maxAudioChannels", description = "Optional. Specify a maximum number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioChannels", required = false) Integer maxAudioChannels,
        @Parameter(name = "profile", description = "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "profile", required = false) String profile,
        @Parameter(name = "level", description = "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "level", required = false) String level,
        @Parameter(name = "framerate", description = "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "framerate", required = false) Float framerate,
        @Parameter(name = "maxFramerate", description = "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxFramerate", required = false) Float maxFramerate,
        @Parameter(name = "copyTimestamps", description = "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "copyTimestamps", required = false) Boolean copyTimestamps,
        @Parameter(name = "startTimeTicks", description = "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startTimeTicks", required = false) Long startTimeTicks,
        @Parameter(name = "width", description = "Optional. The fixed horizontal resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "width", required = false) Integer width,
        @Parameter(name = "height", description = "Optional. The fixed vertical resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "height", required = false) Integer height,
        @Parameter(name = "videoBitRate", description = "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoBitRate", required = false) Integer videoBitRate,
        @Parameter(name = "subtitleStreamIndex", description = "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleStreamIndex", required = false) Integer subtitleStreamIndex,
        @Parameter(name = "subtitleMethod", description = "Optional. Specify the subtitle delivery method.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleMethod", required = false) SubtitleDeliveryMethod subtitleMethod,
        @Parameter(name = "maxRefFrames", description = "Optional.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxRefFrames", required = false) Integer maxRefFrames,
        @Parameter(name = "maxVideoBitDepth", description = "Optional. The maximum video bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxVideoBitDepth", required = false) Integer maxVideoBitDepth,
        @Parameter(name = "requireAvc", description = "Optional. Whether to require avc.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireAvc", required = false) Boolean requireAvc,
        @Parameter(name = "deInterlace", description = "Optional. Whether to deinterlace the video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deInterlace", required = false) Boolean deInterlace,
        @Parameter(name = "requireNonAnamorphic", description = "Optional. Whether to require a non anamporphic stream.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireNonAnamorphic", required = false) Boolean requireNonAnamorphic,
        @Parameter(name = "transcodingMaxAudioChannels", description = "Optional. The maximum number of audio channels to transcode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingMaxAudioChannels", required = false) Integer transcodingMaxAudioChannels,
        @Parameter(name = "cpuCoreLimit", description = "Optional. The limit of how many cpu cores to use.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cpuCoreLimit", required = false) Integer cpuCoreLimit,
        @Parameter(name = "liveStreamId", description = "The live stream id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "liveStreamId", required = false) String liveStreamId,
        @Parameter(name = "enableMpegtsM2TsMode", description = "Optional. Whether to enable the MpegtsM2Ts mode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableMpegtsM2TsMode", required = false) Boolean enableMpegtsM2TsMode,
        @Parameter(name = "videoCodec", description = "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoCodec", required = false) String videoCodec,
        @Parameter(name = "subtitleCodec", description = "Optional. Specify a subtitle codec to encode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleCodec", required = false) String subtitleCodec,
        @Parameter(name = "transcodeReasons", description = "Optional. The transcoding reason.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodeReasons", required = false) String transcodeReasons,
        @Parameter(name = "audioStreamIndex", description = "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioStreamIndex", required = false) Integer audioStreamIndex,
        @Parameter(name = "videoStreamIndex", description = "Optional. The index of the video stream to use. If omitted the first video stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoStreamIndex", required = false) Integer videoStreamIndex,
        @Parameter(name = "context", description = "Optional. The MediaBrowser.Model.Dlna.EncodingContext.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "context", required = false) EncodingContext context,
        @Parameter(name = "streamOptions", description = "Optional. The streaming options.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Map<String, String> streamOptions
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Audio/{itemId}/hls1/{playlistId}/{segmentId}.{container} : Gets a video stream using HTTP live streaming.
     *
     * @param itemId The item id. (required)
     * @param playlistId The playlist id. (required)
     * @param segmentId The segment id. (required)
     * @param container The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv. (required)
     * @param _static Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     * @param params The streaming parameters. (optional)
     * @param tag The tag. (optional)
     * @param deviceProfileId Optional. The dlna device profile id to utilize. (optional)
     * @param playSessionId The play session id. (optional)
     * @param segmentContainer The segment container. (optional)
     * @param segmentLength The segment length. (optional)
     * @param minSegments The minimum number of segments. (optional)
     * @param mediaSourceId The media version id, if playing an alternate version. (optional)
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     * @param audioCodec Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     * @param enableAutoStreamCopy Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     * @param allowVideoStreamCopy Whether or not to allow copying of the video stream url. (optional)
     * @param allowAudioStreamCopy Whether or not to allow copying of the audio stream url. (optional)
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames. (optional)
     * @param audioSampleRate Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     * @param maxAudioBitDepth Optional. The maximum audio bit depth. (optional)
     * @param maxStreamingBitrate Optional. The maximum streaming bitrate. (optional)
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     * @param audioChannels Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     * @param maxAudioChannels Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     * @param profile Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     * @param level Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     * @param framerate Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param maxFramerate Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param copyTimestamps Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param width Optional. The fixed horizontal resolution of the encoded video. (optional)
     * @param height Optional. The fixed vertical resolution of the encoded video. (optional)
     * @param videoBitRate Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     * @param subtitleStreamIndex Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     * @param subtitleMethod Optional. Specify the subtitle delivery method. (optional)
     * @param maxRefFrames Optional. (optional)
     * @param maxVideoBitDepth Optional. The maximum video bit depth. (optional)
     * @param requireAvc Optional. Whether to require avc. (optional)
     * @param deInterlace Optional. Whether to deinterlace the video. (optional)
     * @param requireNonAnamorphic Optional. Whether to require a non anamorphic stream. (optional)
     * @param transcodingMaxAudioChannels Optional. The maximum number of audio channels to transcode. (optional)
     * @param cpuCoreLimit Optional. The limit of how many cpu cores to use. (optional)
     * @param liveStreamId The live stream id. (optional)
     * @param enableMpegtsM2TsMode Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     * @param videoCodec Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     * @param subtitleCodec Optional. Specify a subtitle codec to encode to. (optional)
     * @param transcodeReasons Optional. The transcoding reason. (optional)
     * @param audioStreamIndex Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     * @param videoStreamIndex Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     * @param context Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     * @param streamOptions Optional. The streaming options. (optional)
     * @return Video stream returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getHlsAudioSegment",
        summary = "Gets a video stream using HTTP live streaming.",
        tags = { "DynamicHls" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Video stream returned.", content = {
                @Content(mediaType = "audio/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Audio/{itemId}/hls1/{playlistId}/{segmentId}.{container}",
        produces = { "audio/*" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getHlsAudioSegment(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @Parameter(name = "playlistId", description = "The playlist id.", required = true, in = ParameterIn.PATH) @PathVariable("playlistId") String playlistId,
        @Parameter(name = "segmentId", description = "The segment id.", required = true, in = ParameterIn.PATH) @PathVariable("segmentId") Integer segmentId,
        @Parameter(name = "container", description = "The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.", required = true, in = ParameterIn.PATH) @PathVariable("container") String container,
        @Parameter(name = "static", description = "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "static", required = false) Boolean _static,
        @Parameter(name = "params", description = "The streaming parameters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "params", required = false) String params,
        @Parameter(name = "tag", description = "The tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag,
        @Parameter(name = "deviceProfileId", description = "Optional. The dlna device profile id to utilize.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceProfileId", required = false) String deviceProfileId,
        @Parameter(name = "playSessionId", description = "The play session id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playSessionId", required = false) String playSessionId,
        @Parameter(name = "segmentContainer", description = "The segment container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentContainer", required = false) String segmentContainer,
        @Parameter(name = "segmentLength", description = "The segment length.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentLength", required = false) Integer segmentLength,
        @Parameter(name = "minSegments", description = "The minimum number of segments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minSegments", required = false) Integer minSegments,
        @Parameter(name = "mediaSourceId", description = "The media version id, if playing an alternate version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaSourceId", required = false) String mediaSourceId,
        @Parameter(name = "deviceId", description = "The device id of the client requesting. Used to stop encoding processes when needed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceId", required = false) String deviceId,
        @Parameter(name = "audioCodec", description = "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioCodec", required = false) String audioCodec,
        @Parameter(name = "enableAutoStreamCopy", description = "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableAutoStreamCopy", required = false) Boolean enableAutoStreamCopy,
        @Parameter(name = "allowVideoStreamCopy", description = "Whether or not to allow copying of the video stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowVideoStreamCopy", required = false) Boolean allowVideoStreamCopy,
        @Parameter(name = "allowAudioStreamCopy", description = "Whether or not to allow copying of the audio stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowAudioStreamCopy", required = false) Boolean allowAudioStreamCopy,
        @Parameter(name = "breakOnNonKeyFrames", description = "Optional. Whether to break on non key frames.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "breakOnNonKeyFrames", required = false) Boolean breakOnNonKeyFrames,
        @Parameter(name = "audioSampleRate", description = "Optional. Specify a specific audio sample rate, e.g. 44100.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioSampleRate", required = false) Integer audioSampleRate,
        @Parameter(name = "maxAudioBitDepth", description = "Optional. The maximum audio bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioBitDepth", required = false) Integer maxAudioBitDepth,
        @Parameter(name = "maxStreamingBitrate", description = "Optional. The maximum streaming bitrate.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxStreamingBitrate", required = false) Integer maxStreamingBitrate,
        @Parameter(name = "audioBitRate", description = "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioBitRate", required = false) Integer audioBitRate,
        @Parameter(name = "audioChannels", description = "Optional. Specify a specific number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioChannels", required = false) Integer audioChannels,
        @Parameter(name = "maxAudioChannels", description = "Optional. Specify a maximum number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioChannels", required = false) Integer maxAudioChannels,
        @Parameter(name = "profile", description = "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "profile", required = false) String profile,
        @Parameter(name = "level", description = "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "level", required = false) String level,
        @Parameter(name = "framerate", description = "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "framerate", required = false) Float framerate,
        @Parameter(name = "maxFramerate", description = "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxFramerate", required = false) Float maxFramerate,
        @Parameter(name = "copyTimestamps", description = "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "copyTimestamps", required = false) Boolean copyTimestamps,
        @Parameter(name = "startTimeTicks", description = "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startTimeTicks", required = false) Long startTimeTicks,
        @Parameter(name = "width", description = "Optional. The fixed horizontal resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "width", required = false) Integer width,
        @Parameter(name = "height", description = "Optional. The fixed vertical resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "height", required = false) Integer height,
        @Parameter(name = "videoBitRate", description = "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoBitRate", required = false) Integer videoBitRate,
        @Parameter(name = "subtitleStreamIndex", description = "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleStreamIndex", required = false) Integer subtitleStreamIndex,
        @Parameter(name = "subtitleMethod", description = "Optional. Specify the subtitle delivery method.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleMethod", required = false) SubtitleDeliveryMethod subtitleMethod,
        @Parameter(name = "maxRefFrames", description = "Optional.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxRefFrames", required = false) Integer maxRefFrames,
        @Parameter(name = "maxVideoBitDepth", description = "Optional. The maximum video bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxVideoBitDepth", required = false) Integer maxVideoBitDepth,
        @Parameter(name = "requireAvc", description = "Optional. Whether to require avc.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireAvc", required = false) Boolean requireAvc,
        @Parameter(name = "deInterlace", description = "Optional. Whether to deinterlace the video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deInterlace", required = false) Boolean deInterlace,
        @Parameter(name = "requireNonAnamorphic", description = "Optional. Whether to require a non anamorphic stream.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireNonAnamorphic", required = false) Boolean requireNonAnamorphic,
        @Parameter(name = "transcodingMaxAudioChannels", description = "Optional. The maximum number of audio channels to transcode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingMaxAudioChannels", required = false) Integer transcodingMaxAudioChannels,
        @Parameter(name = "cpuCoreLimit", description = "Optional. The limit of how many cpu cores to use.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cpuCoreLimit", required = false) Integer cpuCoreLimit,
        @Parameter(name = "liveStreamId", description = "The live stream id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "liveStreamId", required = false) String liveStreamId,
        @Parameter(name = "enableMpegtsM2TsMode", description = "Optional. Whether to enable the MpegtsM2Ts mode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableMpegtsM2TsMode", required = false) Boolean enableMpegtsM2TsMode,
        @Parameter(name = "videoCodec", description = "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoCodec", required = false) String videoCodec,
        @Parameter(name = "subtitleCodec", description = "Optional. Specify a subtitle codec to encode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleCodec", required = false) String subtitleCodec,
        @Parameter(name = "transcodeReasons", description = "Optional. The transcoding reason.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodeReasons", required = false) String transcodeReasons,
        @Parameter(name = "audioStreamIndex", description = "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioStreamIndex", required = false) Integer audioStreamIndex,
        @Parameter(name = "videoStreamIndex", description = "Optional. The index of the video stream to use. If omitted the first video stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoStreamIndex", required = false) Integer videoStreamIndex,
        @Parameter(name = "context", description = "Optional. The MediaBrowser.Model.Dlna.EncodingContext.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "context", required = false) EncodingContext context,
        @Parameter(name = "streamOptions", description = "Optional. The streaming options.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Map<String, String> streamOptions
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Audio/{itemId}/hls/{segmentId}/stream.aac : Gets the specified audio segment for an audio item.
     *
     * @param itemId The item id. (required)
     * @param segmentId The segment id. (required)
     * @return Hls audio segment returned. (status code 200)
     */
    @Operation(
        operationId = "getHlsAudioSegmentLegacyAac",
        summary = "Gets the specified audio segment for an audio item.",
        tags = { "HlsSegment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Hls audio segment returned.", content = {
                @Content(mediaType = "audio/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Audio/{itemId}/hls/{segmentId}/stream.aac",
        produces = { "audio/*" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getHlsAudioSegmentLegacyAac(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") String itemId,
        @Parameter(name = "segmentId", description = "The segment id.", required = true, in = ParameterIn.PATH) @PathVariable("segmentId") String segmentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Audio/{itemId}/hls/{segmentId}/stream.mp3 : Gets the specified audio segment for an audio item.
     *
     * @param itemId The item id. (required)
     * @param segmentId The segment id. (required)
     * @return Hls audio segment returned. (status code 200)
     */
    @Operation(
        operationId = "getHlsAudioSegmentLegacyMp3",
        summary = "Gets the specified audio segment for an audio item.",
        tags = { "HlsSegment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Hls audio segment returned.", content = {
                @Content(mediaType = "audio/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Audio/{itemId}/hls/{segmentId}/stream.mp3",
        produces = { "audio/*" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getHlsAudioSegmentLegacyMp3(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") String itemId,
        @Parameter(name = "segmentId", description = "The segment id.", required = true, in = ParameterIn.PATH) @PathVariable("segmentId") String segmentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Audio/{itemId}/master.m3u8 : Gets an audio hls playlist stream.
     *
     * @param itemId The item id. (required)
     * @param mediaSourceId The media version id, if playing an alternate version. (required)
     * @param _static Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     * @param params The streaming parameters. (optional)
     * @param tag The tag. (optional)
     * @param deviceProfileId Optional. The dlna device profile id to utilize. (optional)
     * @param playSessionId The play session id. (optional)
     * @param segmentContainer The segment container. (optional)
     * @param segmentLength The segment length. (optional)
     * @param minSegments The minimum number of segments. (optional)
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     * @param audioCodec Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     * @param enableAutoStreamCopy Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     * @param allowVideoStreamCopy Whether or not to allow copying of the video stream url. (optional)
     * @param allowAudioStreamCopy Whether or not to allow copying of the audio stream url. (optional)
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames. (optional)
     * @param audioSampleRate Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     * @param maxAudioBitDepth Optional. The maximum audio bit depth. (optional)
     * @param maxStreamingBitrate Optional. The maximum streaming bitrate. (optional)
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     * @param audioChannels Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     * @param maxAudioChannels Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     * @param profile Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     * @param level Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     * @param framerate Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param maxFramerate Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param copyTimestamps Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param width Optional. The fixed horizontal resolution of the encoded video. (optional)
     * @param height Optional. The fixed vertical resolution of the encoded video. (optional)
     * @param videoBitRate Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     * @param subtitleStreamIndex Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     * @param subtitleMethod Optional. Specify the subtitle delivery method. (optional)
     * @param maxRefFrames Optional. (optional)
     * @param maxVideoBitDepth Optional. The maximum video bit depth. (optional)
     * @param requireAvc Optional. Whether to require avc. (optional)
     * @param deInterlace Optional. Whether to deinterlace the video. (optional)
     * @param requireNonAnamorphic Optional. Whether to require a non anamorphic stream. (optional)
     * @param transcodingMaxAudioChannels Optional. The maximum number of audio channels to transcode. (optional)
     * @param cpuCoreLimit Optional. The limit of how many cpu cores to use. (optional)
     * @param liveStreamId The live stream id. (optional)
     * @param enableMpegtsM2TsMode Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     * @param videoCodec Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     * @param subtitleCodec Optional. Specify a subtitle codec to encode to. (optional)
     * @param transcodeReasons Optional. The transcoding reason. (optional)
     * @param audioStreamIndex Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     * @param videoStreamIndex Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     * @param context Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     * @param streamOptions Optional. The streaming options. (optional)
     * @param enableAdaptiveBitrateStreaming Enable adaptive bitrate streaming. (optional, default to true)
     * @return Audio stream returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getMasterHlsAudioPlaylist",
        summary = "Gets an audio hls playlist stream.",
        tags = { "DynamicHls" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Audio stream returned.", content = {
                @Content(mediaType = "application/x-mpegURL", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Audio/{itemId}/master.m3u8",
        produces = { "application/x-mpegURL" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getMasterHlsAudioPlaylist(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @NotNull @Parameter(name = "mediaSourceId", description = "The media version id, if playing an alternate version.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaSourceId", required = true) String mediaSourceId,
        @Parameter(name = "static", description = "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "static", required = false) Boolean _static,
        @Parameter(name = "params", description = "The streaming parameters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "params", required = false) String params,
        @Parameter(name = "tag", description = "The tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag,
        @Parameter(name = "deviceProfileId", description = "Optional. The dlna device profile id to utilize.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceProfileId", required = false) String deviceProfileId,
        @Parameter(name = "playSessionId", description = "The play session id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playSessionId", required = false) String playSessionId,
        @Parameter(name = "segmentContainer", description = "The segment container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentContainer", required = false) String segmentContainer,
        @Parameter(name = "segmentLength", description = "The segment length.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentLength", required = false) Integer segmentLength,
        @Parameter(name = "minSegments", description = "The minimum number of segments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minSegments", required = false) Integer minSegments,
        @Parameter(name = "deviceId", description = "The device id of the client requesting. Used to stop encoding processes when needed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceId", required = false) String deviceId,
        @Parameter(name = "audioCodec", description = "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioCodec", required = false) String audioCodec,
        @Parameter(name = "enableAutoStreamCopy", description = "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableAutoStreamCopy", required = false) Boolean enableAutoStreamCopy,
        @Parameter(name = "allowVideoStreamCopy", description = "Whether or not to allow copying of the video stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowVideoStreamCopy", required = false) Boolean allowVideoStreamCopy,
        @Parameter(name = "allowAudioStreamCopy", description = "Whether or not to allow copying of the audio stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowAudioStreamCopy", required = false) Boolean allowAudioStreamCopy,
        @Parameter(name = "breakOnNonKeyFrames", description = "Optional. Whether to break on non key frames.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "breakOnNonKeyFrames", required = false) Boolean breakOnNonKeyFrames,
        @Parameter(name = "audioSampleRate", description = "Optional. Specify a specific audio sample rate, e.g. 44100.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioSampleRate", required = false) Integer audioSampleRate,
        @Parameter(name = "maxAudioBitDepth", description = "Optional. The maximum audio bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioBitDepth", required = false) Integer maxAudioBitDepth,
        @Parameter(name = "maxStreamingBitrate", description = "Optional. The maximum streaming bitrate.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxStreamingBitrate", required = false) Integer maxStreamingBitrate,
        @Parameter(name = "audioBitRate", description = "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioBitRate", required = false) Integer audioBitRate,
        @Parameter(name = "audioChannels", description = "Optional. Specify a specific number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioChannels", required = false) Integer audioChannels,
        @Parameter(name = "maxAudioChannels", description = "Optional. Specify a maximum number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioChannels", required = false) Integer maxAudioChannels,
        @Parameter(name = "profile", description = "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "profile", required = false) String profile,
        @Parameter(name = "level", description = "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "level", required = false) String level,
        @Parameter(name = "framerate", description = "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "framerate", required = false) Float framerate,
        @Parameter(name = "maxFramerate", description = "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxFramerate", required = false) Float maxFramerate,
        @Parameter(name = "copyTimestamps", description = "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "copyTimestamps", required = false) Boolean copyTimestamps,
        @Parameter(name = "startTimeTicks", description = "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startTimeTicks", required = false) Long startTimeTicks,
        @Parameter(name = "width", description = "Optional. The fixed horizontal resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "width", required = false) Integer width,
        @Parameter(name = "height", description = "Optional. The fixed vertical resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "height", required = false) Integer height,
        @Parameter(name = "videoBitRate", description = "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoBitRate", required = false) Integer videoBitRate,
        @Parameter(name = "subtitleStreamIndex", description = "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleStreamIndex", required = false) Integer subtitleStreamIndex,
        @Parameter(name = "subtitleMethod", description = "Optional. Specify the subtitle delivery method.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleMethod", required = false) SubtitleDeliveryMethod subtitleMethod,
        @Parameter(name = "maxRefFrames", description = "Optional.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxRefFrames", required = false) Integer maxRefFrames,
        @Parameter(name = "maxVideoBitDepth", description = "Optional. The maximum video bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxVideoBitDepth", required = false) Integer maxVideoBitDepth,
        @Parameter(name = "requireAvc", description = "Optional. Whether to require avc.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireAvc", required = false) Boolean requireAvc,
        @Parameter(name = "deInterlace", description = "Optional. Whether to deinterlace the video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deInterlace", required = false) Boolean deInterlace,
        @Parameter(name = "requireNonAnamorphic", description = "Optional. Whether to require a non anamorphic stream.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireNonAnamorphic", required = false) Boolean requireNonAnamorphic,
        @Parameter(name = "transcodingMaxAudioChannels", description = "Optional. The maximum number of audio channels to transcode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingMaxAudioChannels", required = false) Integer transcodingMaxAudioChannels,
        @Parameter(name = "cpuCoreLimit", description = "Optional. The limit of how many cpu cores to use.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cpuCoreLimit", required = false) Integer cpuCoreLimit,
        @Parameter(name = "liveStreamId", description = "The live stream id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "liveStreamId", required = false) String liveStreamId,
        @Parameter(name = "enableMpegtsM2TsMode", description = "Optional. Whether to enable the MpegtsM2Ts mode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableMpegtsM2TsMode", required = false) Boolean enableMpegtsM2TsMode,
        @Parameter(name = "videoCodec", description = "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoCodec", required = false) String videoCodec,
        @Parameter(name = "subtitleCodec", description = "Optional. Specify a subtitle codec to encode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleCodec", required = false) String subtitleCodec,
        @Parameter(name = "transcodeReasons", description = "Optional. The transcoding reason.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodeReasons", required = false) String transcodeReasons,
        @Parameter(name = "audioStreamIndex", description = "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioStreamIndex", required = false) Integer audioStreamIndex,
        @Parameter(name = "videoStreamIndex", description = "Optional. The index of the video stream to use. If omitted the first video stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoStreamIndex", required = false) Integer videoStreamIndex,
        @Parameter(name = "context", description = "Optional. The MediaBrowser.Model.Dlna.EncodingContext.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "context", required = false) EncodingContext context,
        @Parameter(name = "streamOptions", description = "Optional. The streaming options.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Map<String, String> streamOptions,
        @Parameter(name = "enableAdaptiveBitrateStreaming", description = "Enable adaptive bitrate streaming.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableAdaptiveBitrateStreaming", required = false, defaultValue = "true") Boolean enableAdaptiveBitrateStreaming
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Audio/{itemId}/universal : Gets an audio stream.
     *
     * @param itemId The item id. (required)
     * @param container Optional. The audio container. (optional)
     * @param mediaSourceId The media version id, if playing an alternate version. (optional)
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     * @param userId Optional. The user id. (optional)
     * @param audioCodec Optional. The audio codec to transcode to. (optional)
     * @param maxAudioChannels Optional. The maximum number of audio channels. (optional)
     * @param transcodingAudioChannels Optional. The number of how many audio channels to transcode to. (optional)
     * @param maxStreamingBitrate Optional. The maximum streaming bitrate. (optional)
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param transcodingContainer Optional. The container to transcode to. (optional)
     * @param transcodingProtocol Optional. The transcoding protocol. (optional)
     * @param maxAudioSampleRate Optional. The maximum audio sample rate. (optional)
     * @param maxAudioBitDepth Optional. The maximum audio bit depth. (optional)
     * @param enableRemoteMedia Optional. Whether to enable remote media. (optional)
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames. (optional)
     * @param enableRedirection Whether to enable redirection. Defaults to true. (optional, default to true)
     * @return Audio stream returned. (status code 200)
     *         or Redirected to remote audio stream. (status code 302)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getUniversalAudioStream",
        summary = "Gets an audio stream.",
        tags = { "UniversalAudio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Audio stream returned.", content = {
                @Content(mediaType = "audio/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "302", description = "Redirected to remote audio stream."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Audio/{itemId}/universal",
        produces = { "audio/*" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getUniversalAudioStream(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @Parameter(name = "container", description = "Optional. The audio container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "container", required = false) List<String> container,
        @Parameter(name = "mediaSourceId", description = "The media version id, if playing an alternate version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaSourceId", required = false) String mediaSourceId,
        @Parameter(name = "deviceId", description = "The device id of the client requesting. Used to stop encoding processes when needed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceId", required = false) String deviceId,
        @Parameter(name = "userId", description = "Optional. The user id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) UUID userId,
        @Parameter(name = "audioCodec", description = "Optional. The audio codec to transcode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioCodec", required = false) String audioCodec,
        @Parameter(name = "maxAudioChannels", description = "Optional. The maximum number of audio channels.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioChannels", required = false) Integer maxAudioChannels,
        @Parameter(name = "transcodingAudioChannels", description = "Optional. The number of how many audio channels to transcode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingAudioChannels", required = false) Integer transcodingAudioChannels,
        @Parameter(name = "maxStreamingBitrate", description = "Optional. The maximum streaming bitrate.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxStreamingBitrate", required = false) Integer maxStreamingBitrate,
        @Parameter(name = "audioBitRate", description = "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioBitRate", required = false) Integer audioBitRate,
        @Parameter(name = "startTimeTicks", description = "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startTimeTicks", required = false) Long startTimeTicks,
        @Parameter(name = "transcodingContainer", description = "Optional. The container to transcode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingContainer", required = false) String transcodingContainer,
        @Parameter(name = "transcodingProtocol", description = "Optional. The transcoding protocol.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingProtocol", required = false) String transcodingProtocol,
        @Parameter(name = "maxAudioSampleRate", description = "Optional. The maximum audio sample rate.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioSampleRate", required = false) Integer maxAudioSampleRate,
        @Parameter(name = "maxAudioBitDepth", description = "Optional. The maximum audio bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioBitDepth", required = false) Integer maxAudioBitDepth,
        @Parameter(name = "enableRemoteMedia", description = "Optional. Whether to enable remote media.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableRemoteMedia", required = false) Boolean enableRemoteMedia,
        @Parameter(name = "breakOnNonKeyFrames", description = "Optional. Whether to break on non key frames.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "breakOnNonKeyFrames", required = false) Boolean breakOnNonKeyFrames,
        @Parameter(name = "enableRedirection", description = "Whether to enable redirection. Defaults to true.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableRedirection", required = false, defaultValue = "true") Boolean enableRedirection
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Audio/{itemId}/main.m3u8 : Gets an audio stream using HTTP live streaming.
     *
     * @param itemId The item id. (required)
     * @param _static Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     * @param params The streaming parameters. (optional)
     * @param tag The tag. (optional)
     * @param deviceProfileId Optional. The dlna device profile id to utilize. (optional)
     * @param playSessionId The play session id. (optional)
     * @param segmentContainer The segment container. (optional)
     * @param segmentLength The segment length. (optional)
     * @param minSegments The minimum number of segments. (optional)
     * @param mediaSourceId The media version id, if playing an alternate version. (optional)
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     * @param audioCodec Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     * @param enableAutoStreamCopy Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     * @param allowVideoStreamCopy Whether or not to allow copying of the video stream url. (optional)
     * @param allowAudioStreamCopy Whether or not to allow copying of the audio stream url. (optional)
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames. (optional)
     * @param audioSampleRate Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     * @param maxAudioBitDepth Optional. The maximum audio bit depth. (optional)
     * @param maxStreamingBitrate Optional. The maximum streaming bitrate. (optional)
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     * @param audioChannels Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     * @param maxAudioChannels Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     * @param profile Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     * @param level Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     * @param framerate Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param maxFramerate Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param copyTimestamps Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param width Optional. The fixed horizontal resolution of the encoded video. (optional)
     * @param height Optional. The fixed vertical resolution of the encoded video. (optional)
     * @param videoBitRate Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     * @param subtitleStreamIndex Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     * @param subtitleMethod Optional. Specify the subtitle delivery method. (optional)
     * @param maxRefFrames Optional. (optional)
     * @param maxVideoBitDepth Optional. The maximum video bit depth. (optional)
     * @param requireAvc Optional. Whether to require avc. (optional)
     * @param deInterlace Optional. Whether to deinterlace the video. (optional)
     * @param requireNonAnamorphic Optional. Whether to require a non anamorphic stream. (optional)
     * @param transcodingMaxAudioChannels Optional. The maximum number of audio channels to transcode. (optional)
     * @param cpuCoreLimit Optional. The limit of how many cpu cores to use. (optional)
     * @param liveStreamId The live stream id. (optional)
     * @param enableMpegtsM2TsMode Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     * @param videoCodec Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     * @param subtitleCodec Optional. Specify a subtitle codec to encode to. (optional)
     * @param transcodeReasons Optional. The transcoding reason. (optional)
     * @param audioStreamIndex Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     * @param videoStreamIndex Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     * @param context Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     * @param streamOptions Optional. The streaming options. (optional)
     * @return Audio stream returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getVariantHlsAudioPlaylist",
        summary = "Gets an audio stream using HTTP live streaming.",
        tags = { "DynamicHls" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Audio stream returned.", content = {
                @Content(mediaType = "application/x-mpegURL", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Audio/{itemId}/main.m3u8",
        produces = { "application/x-mpegURL" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getVariantHlsAudioPlaylist(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @Parameter(name = "static", description = "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "static", required = false) Boolean _static,
        @Parameter(name = "params", description = "The streaming parameters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "params", required = false) String params,
        @Parameter(name = "tag", description = "The tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag,
        @Parameter(name = "deviceProfileId", description = "Optional. The dlna device profile id to utilize.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceProfileId", required = false) String deviceProfileId,
        @Parameter(name = "playSessionId", description = "The play session id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playSessionId", required = false) String playSessionId,
        @Parameter(name = "segmentContainer", description = "The segment container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentContainer", required = false) String segmentContainer,
        @Parameter(name = "segmentLength", description = "The segment length.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentLength", required = false) Integer segmentLength,
        @Parameter(name = "minSegments", description = "The minimum number of segments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minSegments", required = false) Integer minSegments,
        @Parameter(name = "mediaSourceId", description = "The media version id, if playing an alternate version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaSourceId", required = false) String mediaSourceId,
        @Parameter(name = "deviceId", description = "The device id of the client requesting. Used to stop encoding processes when needed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceId", required = false) String deviceId,
        @Parameter(name = "audioCodec", description = "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioCodec", required = false) String audioCodec,
        @Parameter(name = "enableAutoStreamCopy", description = "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableAutoStreamCopy", required = false) Boolean enableAutoStreamCopy,
        @Parameter(name = "allowVideoStreamCopy", description = "Whether or not to allow copying of the video stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowVideoStreamCopy", required = false) Boolean allowVideoStreamCopy,
        @Parameter(name = "allowAudioStreamCopy", description = "Whether or not to allow copying of the audio stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowAudioStreamCopy", required = false) Boolean allowAudioStreamCopy,
        @Parameter(name = "breakOnNonKeyFrames", description = "Optional. Whether to break on non key frames.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "breakOnNonKeyFrames", required = false) Boolean breakOnNonKeyFrames,
        @Parameter(name = "audioSampleRate", description = "Optional. Specify a specific audio sample rate, e.g. 44100.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioSampleRate", required = false) Integer audioSampleRate,
        @Parameter(name = "maxAudioBitDepth", description = "Optional. The maximum audio bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioBitDepth", required = false) Integer maxAudioBitDepth,
        @Parameter(name = "maxStreamingBitrate", description = "Optional. The maximum streaming bitrate.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxStreamingBitrate", required = false) Integer maxStreamingBitrate,
        @Parameter(name = "audioBitRate", description = "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioBitRate", required = false) Integer audioBitRate,
        @Parameter(name = "audioChannels", description = "Optional. Specify a specific number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioChannels", required = false) Integer audioChannels,
        @Parameter(name = "maxAudioChannels", description = "Optional. Specify a maximum number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioChannels", required = false) Integer maxAudioChannels,
        @Parameter(name = "profile", description = "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "profile", required = false) String profile,
        @Parameter(name = "level", description = "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "level", required = false) String level,
        @Parameter(name = "framerate", description = "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "framerate", required = false) Float framerate,
        @Parameter(name = "maxFramerate", description = "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxFramerate", required = false) Float maxFramerate,
        @Parameter(name = "copyTimestamps", description = "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "copyTimestamps", required = false) Boolean copyTimestamps,
        @Parameter(name = "startTimeTicks", description = "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startTimeTicks", required = false) Long startTimeTicks,
        @Parameter(name = "width", description = "Optional. The fixed horizontal resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "width", required = false) Integer width,
        @Parameter(name = "height", description = "Optional. The fixed vertical resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "height", required = false) Integer height,
        @Parameter(name = "videoBitRate", description = "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoBitRate", required = false) Integer videoBitRate,
        @Parameter(name = "subtitleStreamIndex", description = "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleStreamIndex", required = false) Integer subtitleStreamIndex,
        @Parameter(name = "subtitleMethod", description = "Optional. Specify the subtitle delivery method.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleMethod", required = false) SubtitleDeliveryMethod subtitleMethod,
        @Parameter(name = "maxRefFrames", description = "Optional.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxRefFrames", required = false) Integer maxRefFrames,
        @Parameter(name = "maxVideoBitDepth", description = "Optional. The maximum video bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxVideoBitDepth", required = false) Integer maxVideoBitDepth,
        @Parameter(name = "requireAvc", description = "Optional. Whether to require avc.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireAvc", required = false) Boolean requireAvc,
        @Parameter(name = "deInterlace", description = "Optional. Whether to deinterlace the video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deInterlace", required = false) Boolean deInterlace,
        @Parameter(name = "requireNonAnamorphic", description = "Optional. Whether to require a non anamorphic stream.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireNonAnamorphic", required = false) Boolean requireNonAnamorphic,
        @Parameter(name = "transcodingMaxAudioChannels", description = "Optional. The maximum number of audio channels to transcode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingMaxAudioChannels", required = false) Integer transcodingMaxAudioChannels,
        @Parameter(name = "cpuCoreLimit", description = "Optional. The limit of how many cpu cores to use.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cpuCoreLimit", required = false) Integer cpuCoreLimit,
        @Parameter(name = "liveStreamId", description = "The live stream id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "liveStreamId", required = false) String liveStreamId,
        @Parameter(name = "enableMpegtsM2TsMode", description = "Optional. Whether to enable the MpegtsM2Ts mode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableMpegtsM2TsMode", required = false) Boolean enableMpegtsM2TsMode,
        @Parameter(name = "videoCodec", description = "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoCodec", required = false) String videoCodec,
        @Parameter(name = "subtitleCodec", description = "Optional. Specify a subtitle codec to encode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleCodec", required = false) String subtitleCodec,
        @Parameter(name = "transcodeReasons", description = "Optional. The transcoding reason.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodeReasons", required = false) String transcodeReasons,
        @Parameter(name = "audioStreamIndex", description = "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioStreamIndex", required = false) Integer audioStreamIndex,
        @Parameter(name = "videoStreamIndex", description = "Optional. The index of the video stream to use. If omitted the first video stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoStreamIndex", required = false) Integer videoStreamIndex,
        @Parameter(name = "context", description = "Optional. The MediaBrowser.Model.Dlna.EncodingContext.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "context", required = false) EncodingContext context,
        @Parameter(name = "streamOptions", description = "Optional. The streaming options.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Map<String, String> streamOptions
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * HEAD /Audio/{itemId}/stream : Gets an audio stream.
     *
     * @param itemId The item id. (required)
     * @param container The audio container. (optional)
     * @param _static Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     * @param params The streaming parameters. (optional)
     * @param tag The tag. (optional)
     * @param deviceProfileId Optional. The dlna device profile id to utilize. (optional)
     * @param playSessionId The play session id. (optional)
     * @param segmentContainer The segment container. (optional)
     * @param segmentLength The segment length. (optional)
     * @param minSegments The minimum number of segments. (optional)
     * @param mediaSourceId The media version id, if playing an alternate version. (optional)
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     * @param audioCodec Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     * @param enableAutoStreamCopy Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     * @param allowVideoStreamCopy Whether or not to allow copying of the video stream url. (optional)
     * @param allowAudioStreamCopy Whether or not to allow copying of the audio stream url. (optional)
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames. (optional)
     * @param audioSampleRate Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     * @param maxAudioBitDepth Optional. The maximum audio bit depth. (optional)
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     * @param audioChannels Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     * @param maxAudioChannels Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     * @param profile Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     * @param level Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     * @param framerate Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param maxFramerate Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param copyTimestamps Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param width Optional. The fixed horizontal resolution of the encoded video. (optional)
     * @param height Optional. The fixed vertical resolution of the encoded video. (optional)
     * @param videoBitRate Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     * @param subtitleStreamIndex Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     * @param subtitleMethod Optional. Specify the subtitle delivery method. (optional)
     * @param maxRefFrames Optional. (optional)
     * @param maxVideoBitDepth Optional. The maximum video bit depth. (optional)
     * @param requireAvc Optional. Whether to require avc. (optional)
     * @param deInterlace Optional. Whether to deinterlace the video. (optional)
     * @param requireNonAnamorphic Optional. Whether to require a non anamorphic stream. (optional)
     * @param transcodingMaxAudioChannels Optional. The maximum number of audio channels to transcode. (optional)
     * @param cpuCoreLimit Optional. The limit of how many cpu cores to use. (optional)
     * @param liveStreamId The live stream id. (optional)
     * @param enableMpegtsM2TsMode Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     * @param videoCodec Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     * @param subtitleCodec Optional. Specify a subtitle codec to encode to. (optional)
     * @param transcodeReasons Optional. The transcoding reason. (optional)
     * @param audioStreamIndex Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     * @param videoStreamIndex Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     * @param context Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     * @param streamOptions Optional. The streaming options. (optional)
     * @return Audio stream returned. (status code 200)
     */
    @Operation(
        operationId = "headAudioStream",
        summary = "Gets an audio stream.",
        tags = { "Audio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Audio stream returned.", content = {
                @Content(mediaType = "audio/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.HEAD,
        value = "/Audio/{itemId}/stream",
        produces = { "audio/*" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> headAudioStream(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @Parameter(name = "container", description = "The audio container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "container", required = false) String container,
        @Parameter(name = "static", description = "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "static", required = false) Boolean _static,
        @Parameter(name = "params", description = "The streaming parameters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "params", required = false) String params,
        @Parameter(name = "tag", description = "The tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag,
        @Parameter(name = "deviceProfileId", description = "Optional. The dlna device profile id to utilize.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceProfileId", required = false) String deviceProfileId,
        @Parameter(name = "playSessionId", description = "The play session id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playSessionId", required = false) String playSessionId,
        @Parameter(name = "segmentContainer", description = "The segment container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentContainer", required = false) String segmentContainer,
        @Parameter(name = "segmentLength", description = "The segment length.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentLength", required = false) Integer segmentLength,
        @Parameter(name = "minSegments", description = "The minimum number of segments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minSegments", required = false) Integer minSegments,
        @Parameter(name = "mediaSourceId", description = "The media version id, if playing an alternate version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaSourceId", required = false) String mediaSourceId,
        @Parameter(name = "deviceId", description = "The device id of the client requesting. Used to stop encoding processes when needed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceId", required = false) String deviceId,
        @Parameter(name = "audioCodec", description = "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioCodec", required = false) String audioCodec,
        @Parameter(name = "enableAutoStreamCopy", description = "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableAutoStreamCopy", required = false) Boolean enableAutoStreamCopy,
        @Parameter(name = "allowVideoStreamCopy", description = "Whether or not to allow copying of the video stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowVideoStreamCopy", required = false) Boolean allowVideoStreamCopy,
        @Parameter(name = "allowAudioStreamCopy", description = "Whether or not to allow copying of the audio stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowAudioStreamCopy", required = false) Boolean allowAudioStreamCopy,
        @Parameter(name = "breakOnNonKeyFrames", description = "Optional. Whether to break on non key frames.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "breakOnNonKeyFrames", required = false) Boolean breakOnNonKeyFrames,
        @Parameter(name = "audioSampleRate", description = "Optional. Specify a specific audio sample rate, e.g. 44100.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioSampleRate", required = false) Integer audioSampleRate,
        @Parameter(name = "maxAudioBitDepth", description = "Optional. The maximum audio bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioBitDepth", required = false) Integer maxAudioBitDepth,
        @Parameter(name = "audioBitRate", description = "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioBitRate", required = false) Integer audioBitRate,
        @Parameter(name = "audioChannels", description = "Optional. Specify a specific number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioChannels", required = false) Integer audioChannels,
        @Parameter(name = "maxAudioChannels", description = "Optional. Specify a maximum number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioChannels", required = false) Integer maxAudioChannels,
        @Parameter(name = "profile", description = "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "profile", required = false) String profile,
        @Parameter(name = "level", description = "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "level", required = false) String level,
        @Parameter(name = "framerate", description = "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "framerate", required = false) Float framerate,
        @Parameter(name = "maxFramerate", description = "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxFramerate", required = false) Float maxFramerate,
        @Parameter(name = "copyTimestamps", description = "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "copyTimestamps", required = false) Boolean copyTimestamps,
        @Parameter(name = "startTimeTicks", description = "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startTimeTicks", required = false) Long startTimeTicks,
        @Parameter(name = "width", description = "Optional. The fixed horizontal resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "width", required = false) Integer width,
        @Parameter(name = "height", description = "Optional. The fixed vertical resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "height", required = false) Integer height,
        @Parameter(name = "videoBitRate", description = "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoBitRate", required = false) Integer videoBitRate,
        @Parameter(name = "subtitleStreamIndex", description = "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleStreamIndex", required = false) Integer subtitleStreamIndex,
        @Parameter(name = "subtitleMethod", description = "Optional. Specify the subtitle delivery method.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleMethod", required = false) SubtitleDeliveryMethod subtitleMethod,
        @Parameter(name = "maxRefFrames", description = "Optional.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxRefFrames", required = false) Integer maxRefFrames,
        @Parameter(name = "maxVideoBitDepth", description = "Optional. The maximum video bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxVideoBitDepth", required = false) Integer maxVideoBitDepth,
        @Parameter(name = "requireAvc", description = "Optional. Whether to require avc.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireAvc", required = false) Boolean requireAvc,
        @Parameter(name = "deInterlace", description = "Optional. Whether to deinterlace the video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deInterlace", required = false) Boolean deInterlace,
        @Parameter(name = "requireNonAnamorphic", description = "Optional. Whether to require a non anamorphic stream.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireNonAnamorphic", required = false) Boolean requireNonAnamorphic,
        @Parameter(name = "transcodingMaxAudioChannels", description = "Optional. The maximum number of audio channels to transcode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingMaxAudioChannels", required = false) Integer transcodingMaxAudioChannels,
        @Parameter(name = "cpuCoreLimit", description = "Optional. The limit of how many cpu cores to use.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cpuCoreLimit", required = false) Integer cpuCoreLimit,
        @Parameter(name = "liveStreamId", description = "The live stream id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "liveStreamId", required = false) String liveStreamId,
        @Parameter(name = "enableMpegtsM2TsMode", description = "Optional. Whether to enable the MpegtsM2Ts mode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableMpegtsM2TsMode", required = false) Boolean enableMpegtsM2TsMode,
        @Parameter(name = "videoCodec", description = "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoCodec", required = false) String videoCodec,
        @Parameter(name = "subtitleCodec", description = "Optional. Specify a subtitle codec to encode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleCodec", required = false) String subtitleCodec,
        @Parameter(name = "transcodeReasons", description = "Optional. The transcoding reason.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodeReasons", required = false) String transcodeReasons,
        @Parameter(name = "audioStreamIndex", description = "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioStreamIndex", required = false) Integer audioStreamIndex,
        @Parameter(name = "videoStreamIndex", description = "Optional. The index of the video stream to use. If omitted the first video stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoStreamIndex", required = false) Integer videoStreamIndex,
        @Parameter(name = "context", description = "Optional. The MediaBrowser.Model.Dlna.EncodingContext.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "context", required = false) EncodingContext context,
        @Parameter(name = "streamOptions", description = "Optional. The streaming options.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Map<String, String> streamOptions
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * HEAD /Audio/{itemId}/stream.{container} : Gets an audio stream.
     *
     * @param itemId The item id. (required)
     * @param container The audio container. (required)
     * @param _static Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     * @param params The streaming parameters. (optional)
     * @param tag The tag. (optional)
     * @param deviceProfileId Optional. The dlna device profile id to utilize. (optional)
     * @param playSessionId The play session id. (optional)
     * @param segmentContainer The segment container. (optional)
     * @param segmentLength The segment lenght. (optional)
     * @param minSegments The minimum number of segments. (optional)
     * @param mediaSourceId The media version id, if playing an alternate version. (optional)
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     * @param audioCodec Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     * @param enableAutoStreamCopy Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     * @param allowVideoStreamCopy Whether or not to allow copying of the video stream url. (optional)
     * @param allowAudioStreamCopy Whether or not to allow copying of the audio stream url. (optional)
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames. (optional)
     * @param audioSampleRate Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     * @param maxAudioBitDepth Optional. The maximum audio bit depth. (optional)
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     * @param audioChannels Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     * @param maxAudioChannels Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     * @param profile Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     * @param level Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     * @param framerate Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param maxFramerate Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param copyTimestamps Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param width Optional. The fixed horizontal resolution of the encoded video. (optional)
     * @param height Optional. The fixed vertical resolution of the encoded video. (optional)
     * @param videoBitRate Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     * @param subtitleStreamIndex Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     * @param subtitleMethod Optional. Specify the subtitle delivery method. (optional)
     * @param maxRefFrames Optional. (optional)
     * @param maxVideoBitDepth Optional. The maximum video bit depth. (optional)
     * @param requireAvc Optional. Whether to require avc. (optional)
     * @param deInterlace Optional. Whether to deinterlace the video. (optional)
     * @param requireNonAnamorphic Optional. Whether to require a non anamporphic stream. (optional)
     * @param transcodingMaxAudioChannels Optional. The maximum number of audio channels to transcode. (optional)
     * @param cpuCoreLimit Optional. The limit of how many cpu cores to use. (optional)
     * @param liveStreamId The live stream id. (optional)
     * @param enableMpegtsM2TsMode Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     * @param videoCodec Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     * @param subtitleCodec Optional. Specify a subtitle codec to encode to. (optional)
     * @param transcodeReasons Optional. The transcoding reason. (optional)
     * @param audioStreamIndex Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     * @param videoStreamIndex Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     * @param context Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     * @param streamOptions Optional. The streaming options. (optional)
     * @return Audio stream returned. (status code 200)
     */
    @Operation(
        operationId = "headAudioStreamByContainer",
        summary = "Gets an audio stream.",
        tags = { "Audio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Audio stream returned.", content = {
                @Content(mediaType = "audio/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.HEAD,
        value = "/Audio/{itemId}/stream.{container}",
        produces = { "audio/*" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> headAudioStreamByContainer(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @Parameter(name = "container", description = "The audio container.", required = true, in = ParameterIn.PATH) @PathVariable("container") String container,
        @Parameter(name = "static", description = "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "static", required = false) Boolean _static,
        @Parameter(name = "params", description = "The streaming parameters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "params", required = false) String params,
        @Parameter(name = "tag", description = "The tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag,
        @Parameter(name = "deviceProfileId", description = "Optional. The dlna device profile id to utilize.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceProfileId", required = false) String deviceProfileId,
        @Parameter(name = "playSessionId", description = "The play session id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playSessionId", required = false) String playSessionId,
        @Parameter(name = "segmentContainer", description = "The segment container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentContainer", required = false) String segmentContainer,
        @Parameter(name = "segmentLength", description = "The segment lenght.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentLength", required = false) Integer segmentLength,
        @Parameter(name = "minSegments", description = "The minimum number of segments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minSegments", required = false) Integer minSegments,
        @Parameter(name = "mediaSourceId", description = "The media version id, if playing an alternate version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaSourceId", required = false) String mediaSourceId,
        @Parameter(name = "deviceId", description = "The device id of the client requesting. Used to stop encoding processes when needed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceId", required = false) String deviceId,
        @Parameter(name = "audioCodec", description = "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioCodec", required = false) String audioCodec,
        @Parameter(name = "enableAutoStreamCopy", description = "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableAutoStreamCopy", required = false) Boolean enableAutoStreamCopy,
        @Parameter(name = "allowVideoStreamCopy", description = "Whether or not to allow copying of the video stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowVideoStreamCopy", required = false) Boolean allowVideoStreamCopy,
        @Parameter(name = "allowAudioStreamCopy", description = "Whether or not to allow copying of the audio stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowAudioStreamCopy", required = false) Boolean allowAudioStreamCopy,
        @Parameter(name = "breakOnNonKeyFrames", description = "Optional. Whether to break on non key frames.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "breakOnNonKeyFrames", required = false) Boolean breakOnNonKeyFrames,
        @Parameter(name = "audioSampleRate", description = "Optional. Specify a specific audio sample rate, e.g. 44100.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioSampleRate", required = false) Integer audioSampleRate,
        @Parameter(name = "maxAudioBitDepth", description = "Optional. The maximum audio bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioBitDepth", required = false) Integer maxAudioBitDepth,
        @Parameter(name = "audioBitRate", description = "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioBitRate", required = false) Integer audioBitRate,
        @Parameter(name = "audioChannels", description = "Optional. Specify a specific number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioChannels", required = false) Integer audioChannels,
        @Parameter(name = "maxAudioChannels", description = "Optional. Specify a maximum number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioChannels", required = false) Integer maxAudioChannels,
        @Parameter(name = "profile", description = "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "profile", required = false) String profile,
        @Parameter(name = "level", description = "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "level", required = false) String level,
        @Parameter(name = "framerate", description = "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "framerate", required = false) Float framerate,
        @Parameter(name = "maxFramerate", description = "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxFramerate", required = false) Float maxFramerate,
        @Parameter(name = "copyTimestamps", description = "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "copyTimestamps", required = false) Boolean copyTimestamps,
        @Parameter(name = "startTimeTicks", description = "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startTimeTicks", required = false) Long startTimeTicks,
        @Parameter(name = "width", description = "Optional. The fixed horizontal resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "width", required = false) Integer width,
        @Parameter(name = "height", description = "Optional. The fixed vertical resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "height", required = false) Integer height,
        @Parameter(name = "videoBitRate", description = "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoBitRate", required = false) Integer videoBitRate,
        @Parameter(name = "subtitleStreamIndex", description = "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleStreamIndex", required = false) Integer subtitleStreamIndex,
        @Parameter(name = "subtitleMethod", description = "Optional. Specify the subtitle delivery method.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleMethod", required = false) SubtitleDeliveryMethod subtitleMethod,
        @Parameter(name = "maxRefFrames", description = "Optional.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxRefFrames", required = false) Integer maxRefFrames,
        @Parameter(name = "maxVideoBitDepth", description = "Optional. The maximum video bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxVideoBitDepth", required = false) Integer maxVideoBitDepth,
        @Parameter(name = "requireAvc", description = "Optional. Whether to require avc.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireAvc", required = false) Boolean requireAvc,
        @Parameter(name = "deInterlace", description = "Optional. Whether to deinterlace the video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deInterlace", required = false) Boolean deInterlace,
        @Parameter(name = "requireNonAnamorphic", description = "Optional. Whether to require a non anamporphic stream.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireNonAnamorphic", required = false) Boolean requireNonAnamorphic,
        @Parameter(name = "transcodingMaxAudioChannels", description = "Optional. The maximum number of audio channels to transcode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingMaxAudioChannels", required = false) Integer transcodingMaxAudioChannels,
        @Parameter(name = "cpuCoreLimit", description = "Optional. The limit of how many cpu cores to use.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cpuCoreLimit", required = false) Integer cpuCoreLimit,
        @Parameter(name = "liveStreamId", description = "The live stream id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "liveStreamId", required = false) String liveStreamId,
        @Parameter(name = "enableMpegtsM2TsMode", description = "Optional. Whether to enable the MpegtsM2Ts mode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableMpegtsM2TsMode", required = false) Boolean enableMpegtsM2TsMode,
        @Parameter(name = "videoCodec", description = "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoCodec", required = false) String videoCodec,
        @Parameter(name = "subtitleCodec", description = "Optional. Specify a subtitle codec to encode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleCodec", required = false) String subtitleCodec,
        @Parameter(name = "transcodeReasons", description = "Optional. The transcoding reason.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodeReasons", required = false) String transcodeReasons,
        @Parameter(name = "audioStreamIndex", description = "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioStreamIndex", required = false) Integer audioStreamIndex,
        @Parameter(name = "videoStreamIndex", description = "Optional. The index of the video stream to use. If omitted the first video stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoStreamIndex", required = false) Integer videoStreamIndex,
        @Parameter(name = "context", description = "Optional. The MediaBrowser.Model.Dlna.EncodingContext.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "context", required = false) EncodingContext context,
        @Parameter(name = "streamOptions", description = "Optional. The streaming options.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Map<String, String> streamOptions
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * HEAD /Audio/{itemId}/master.m3u8 : Gets an audio hls playlist stream.
     *
     * @param itemId The item id. (required)
     * @param mediaSourceId The media version id, if playing an alternate version. (required)
     * @param _static Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false. (optional)
     * @param params The streaming parameters. (optional)
     * @param tag The tag. (optional)
     * @param deviceProfileId Optional. The dlna device profile id to utilize. (optional)
     * @param playSessionId The play session id. (optional)
     * @param segmentContainer The segment container. (optional)
     * @param segmentLength The segment length. (optional)
     * @param minSegments The minimum number of segments. (optional)
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     * @param audioCodec Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma. (optional)
     * @param enableAutoStreamCopy Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true. (optional)
     * @param allowVideoStreamCopy Whether or not to allow copying of the video stream url. (optional)
     * @param allowAudioStreamCopy Whether or not to allow copying of the audio stream url. (optional)
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames. (optional)
     * @param audioSampleRate Optional. Specify a specific audio sample rate, e.g. 44100. (optional)
     * @param maxAudioBitDepth Optional. The maximum audio bit depth. (optional)
     * @param maxStreamingBitrate Optional. The maximum streaming bitrate. (optional)
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     * @param audioChannels Optional. Specify a specific number of audio channels to encode to, e.g. 2. (optional)
     * @param maxAudioChannels Optional. Specify a maximum number of audio channels to encode to, e.g. 2. (optional)
     * @param profile Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high. (optional)
     * @param level Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1. (optional)
     * @param framerate Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param maxFramerate Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements. (optional)
     * @param copyTimestamps Whether or not to copy timestamps when transcoding with an offset. Defaults to false. (optional)
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param width Optional. The fixed horizontal resolution of the encoded video. (optional)
     * @param height Optional. The fixed vertical resolution of the encoded video. (optional)
     * @param videoBitRate Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults. (optional)
     * @param subtitleStreamIndex Optional. The index of the subtitle stream to use. If omitted no subtitles will be used. (optional)
     * @param subtitleMethod Optional. Specify the subtitle delivery method. (optional)
     * @param maxRefFrames Optional. (optional)
     * @param maxVideoBitDepth Optional. The maximum video bit depth. (optional)
     * @param requireAvc Optional. Whether to require avc. (optional)
     * @param deInterlace Optional. Whether to deinterlace the video. (optional)
     * @param requireNonAnamorphic Optional. Whether to require a non anamorphic stream. (optional)
     * @param transcodingMaxAudioChannels Optional. The maximum number of audio channels to transcode. (optional)
     * @param cpuCoreLimit Optional. The limit of how many cpu cores to use. (optional)
     * @param liveStreamId The live stream id. (optional)
     * @param enableMpegtsM2TsMode Optional. Whether to enable the MpegtsM2Ts mode. (optional)
     * @param videoCodec Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv. (optional)
     * @param subtitleCodec Optional. Specify a subtitle codec to encode to. (optional)
     * @param transcodeReasons Optional. The transcoding reason. (optional)
     * @param audioStreamIndex Optional. The index of the audio stream to use. If omitted the first audio stream will be used. (optional)
     * @param videoStreamIndex Optional. The index of the video stream to use. If omitted the first video stream will be used. (optional)
     * @param context Optional. The MediaBrowser.Model.Dlna.EncodingContext. (optional)
     * @param streamOptions Optional. The streaming options. (optional)
     * @param enableAdaptiveBitrateStreaming Enable adaptive bitrate streaming. (optional, default to true)
     * @return Audio stream returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "headMasterHlsAudioPlaylist",
        summary = "Gets an audio hls playlist stream.",
        tags = { "DynamicHls" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Audio stream returned.", content = {
                @Content(mediaType = "application/x-mpegURL", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.HEAD,
        value = "/Audio/{itemId}/master.m3u8",
        produces = { "application/x-mpegURL" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> headMasterHlsAudioPlaylist(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @NotNull @Parameter(name = "mediaSourceId", description = "The media version id, if playing an alternate version.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaSourceId", required = true) String mediaSourceId,
        @Parameter(name = "static", description = "Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "static", required = false) Boolean _static,
        @Parameter(name = "params", description = "The streaming parameters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "params", required = false) String params,
        @Parameter(name = "tag", description = "The tag.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tag", required = false) String tag,
        @Parameter(name = "deviceProfileId", description = "Optional. The dlna device profile id to utilize.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceProfileId", required = false) String deviceProfileId,
        @Parameter(name = "playSessionId", description = "The play session id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "playSessionId", required = false) String playSessionId,
        @Parameter(name = "segmentContainer", description = "The segment container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentContainer", required = false) String segmentContainer,
        @Parameter(name = "segmentLength", description = "The segment length.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "segmentLength", required = false) Integer segmentLength,
        @Parameter(name = "minSegments", description = "The minimum number of segments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minSegments", required = false) Integer minSegments,
        @Parameter(name = "deviceId", description = "The device id of the client requesting. Used to stop encoding processes when needed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceId", required = false) String deviceId,
        @Parameter(name = "audioCodec", description = "Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url's extension. Options: aac, mp3, vorbis, wma.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioCodec", required = false) String audioCodec,
        @Parameter(name = "enableAutoStreamCopy", description = "Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableAutoStreamCopy", required = false) Boolean enableAutoStreamCopy,
        @Parameter(name = "allowVideoStreamCopy", description = "Whether or not to allow copying of the video stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowVideoStreamCopy", required = false) Boolean allowVideoStreamCopy,
        @Parameter(name = "allowAudioStreamCopy", description = "Whether or not to allow copying of the audio stream url.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "allowAudioStreamCopy", required = false) Boolean allowAudioStreamCopy,
        @Parameter(name = "breakOnNonKeyFrames", description = "Optional. Whether to break on non key frames.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "breakOnNonKeyFrames", required = false) Boolean breakOnNonKeyFrames,
        @Parameter(name = "audioSampleRate", description = "Optional. Specify a specific audio sample rate, e.g. 44100.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioSampleRate", required = false) Integer audioSampleRate,
        @Parameter(name = "maxAudioBitDepth", description = "Optional. The maximum audio bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioBitDepth", required = false) Integer maxAudioBitDepth,
        @Parameter(name = "maxStreamingBitrate", description = "Optional. The maximum streaming bitrate.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxStreamingBitrate", required = false) Integer maxStreamingBitrate,
        @Parameter(name = "audioBitRate", description = "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioBitRate", required = false) Integer audioBitRate,
        @Parameter(name = "audioChannels", description = "Optional. Specify a specific number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioChannels", required = false) Integer audioChannels,
        @Parameter(name = "maxAudioChannels", description = "Optional. Specify a maximum number of audio channels to encode to, e.g. 2.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioChannels", required = false) Integer maxAudioChannels,
        @Parameter(name = "profile", description = "Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "profile", required = false) String profile,
        @Parameter(name = "level", description = "Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "level", required = false) String level,
        @Parameter(name = "framerate", description = "Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "framerate", required = false) Float framerate,
        @Parameter(name = "maxFramerate", description = "Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxFramerate", required = false) Float maxFramerate,
        @Parameter(name = "copyTimestamps", description = "Whether or not to copy timestamps when transcoding with an offset. Defaults to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "copyTimestamps", required = false) Boolean copyTimestamps,
        @Parameter(name = "startTimeTicks", description = "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startTimeTicks", required = false) Long startTimeTicks,
        @Parameter(name = "width", description = "Optional. The fixed horizontal resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "width", required = false) Integer width,
        @Parameter(name = "height", description = "Optional. The fixed vertical resolution of the encoded video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "height", required = false) Integer height,
        @Parameter(name = "videoBitRate", description = "Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoBitRate", required = false) Integer videoBitRate,
        @Parameter(name = "subtitleStreamIndex", description = "Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleStreamIndex", required = false) Integer subtitleStreamIndex,
        @Parameter(name = "subtitleMethod", description = "Optional. Specify the subtitle delivery method.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleMethod", required = false) SubtitleDeliveryMethod subtitleMethod,
        @Parameter(name = "maxRefFrames", description = "Optional.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxRefFrames", required = false) Integer maxRefFrames,
        @Parameter(name = "maxVideoBitDepth", description = "Optional. The maximum video bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxVideoBitDepth", required = false) Integer maxVideoBitDepth,
        @Parameter(name = "requireAvc", description = "Optional. Whether to require avc.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireAvc", required = false) Boolean requireAvc,
        @Parameter(name = "deInterlace", description = "Optional. Whether to deinterlace the video.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deInterlace", required = false) Boolean deInterlace,
        @Parameter(name = "requireNonAnamorphic", description = "Optional. Whether to require a non anamorphic stream.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireNonAnamorphic", required = false) Boolean requireNonAnamorphic,
        @Parameter(name = "transcodingMaxAudioChannels", description = "Optional. The maximum number of audio channels to transcode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingMaxAudioChannels", required = false) Integer transcodingMaxAudioChannels,
        @Parameter(name = "cpuCoreLimit", description = "Optional. The limit of how many cpu cores to use.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cpuCoreLimit", required = false) Integer cpuCoreLimit,
        @Parameter(name = "liveStreamId", description = "The live stream id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "liveStreamId", required = false) String liveStreamId,
        @Parameter(name = "enableMpegtsM2TsMode", description = "Optional. Whether to enable the MpegtsM2Ts mode.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableMpegtsM2TsMode", required = false) Boolean enableMpegtsM2TsMode,
        @Parameter(name = "videoCodec", description = "Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url's extension. Options: h265, h264, mpeg4, theora, vpx, wmv.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoCodec", required = false) String videoCodec,
        @Parameter(name = "subtitleCodec", description = "Optional. Specify a subtitle codec to encode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtitleCodec", required = false) String subtitleCodec,
        @Parameter(name = "transcodeReasons", description = "Optional. The transcoding reason.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodeReasons", required = false) String transcodeReasons,
        @Parameter(name = "audioStreamIndex", description = "Optional. The index of the audio stream to use. If omitted the first audio stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioStreamIndex", required = false) Integer audioStreamIndex,
        @Parameter(name = "videoStreamIndex", description = "Optional. The index of the video stream to use. If omitted the first video stream will be used.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "videoStreamIndex", required = false) Integer videoStreamIndex,
        @Parameter(name = "context", description = "Optional. The MediaBrowser.Model.Dlna.EncodingContext.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "context", required = false) EncodingContext context,
        @Parameter(name = "streamOptions", description = "Optional. The streaming options.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Map<String, String> streamOptions,
        @Parameter(name = "enableAdaptiveBitrateStreaming", description = "Enable adaptive bitrate streaming.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableAdaptiveBitrateStreaming", required = false, defaultValue = "true") Boolean enableAdaptiveBitrateStreaming
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * HEAD /Audio/{itemId}/universal : Gets an audio stream.
     *
     * @param itemId The item id. (required)
     * @param container Optional. The audio container. (optional)
     * @param mediaSourceId The media version id, if playing an alternate version. (optional)
     * @param deviceId The device id of the client requesting. Used to stop encoding processes when needed. (optional)
     * @param userId Optional. The user id. (optional)
     * @param audioCodec Optional. The audio codec to transcode to. (optional)
     * @param maxAudioChannels Optional. The maximum number of audio channels. (optional)
     * @param transcodingAudioChannels Optional. The number of how many audio channels to transcode to. (optional)
     * @param maxStreamingBitrate Optional. The maximum streaming bitrate. (optional)
     * @param audioBitRate Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults. (optional)
     * @param startTimeTicks Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms. (optional)
     * @param transcodingContainer Optional. The container to transcode to. (optional)
     * @param transcodingProtocol Optional. The transcoding protocol. (optional)
     * @param maxAudioSampleRate Optional. The maximum audio sample rate. (optional)
     * @param maxAudioBitDepth Optional. The maximum audio bit depth. (optional)
     * @param enableRemoteMedia Optional. Whether to enable remote media. (optional)
     * @param breakOnNonKeyFrames Optional. Whether to break on non key frames. (optional)
     * @param enableRedirection Whether to enable redirection. Defaults to true. (optional, default to true)
     * @return Audio stream returned. (status code 200)
     *         or Redirected to remote audio stream. (status code 302)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "headUniversalAudioStream",
        summary = "Gets an audio stream.",
        tags = { "UniversalAudio" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Audio stream returned.", content = {
                @Content(mediaType = "audio/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "302", description = "Redirected to remote audio stream."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.HEAD,
        value = "/Audio/{itemId}/universal",
        produces = { "audio/*" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> headUniversalAudioStream(
        @Parameter(name = "itemId", description = "The item id.", required = true, in = ParameterIn.PATH) @PathVariable("itemId") UUID itemId,
        @Parameter(name = "container", description = "Optional. The audio container.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "container", required = false) List<String> container,
        @Parameter(name = "mediaSourceId", description = "The media version id, if playing an alternate version.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "mediaSourceId", required = false) String mediaSourceId,
        @Parameter(name = "deviceId", description = "The device id of the client requesting. Used to stop encoding processes when needed.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deviceId", required = false) String deviceId,
        @Parameter(name = "userId", description = "Optional. The user id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) UUID userId,
        @Parameter(name = "audioCodec", description = "Optional. The audio codec to transcode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioCodec", required = false) String audioCodec,
        @Parameter(name = "maxAudioChannels", description = "Optional. The maximum number of audio channels.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioChannels", required = false) Integer maxAudioChannels,
        @Parameter(name = "transcodingAudioChannels", description = "Optional. The number of how many audio channels to transcode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingAudioChannels", required = false) Integer transcodingAudioChannels,
        @Parameter(name = "maxStreamingBitrate", description = "Optional. The maximum streaming bitrate.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxStreamingBitrate", required = false) Integer maxStreamingBitrate,
        @Parameter(name = "audioBitRate", description = "Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "audioBitRate", required = false) Integer audioBitRate,
        @Parameter(name = "startTimeTicks", description = "Optional. Specify a starting offset, in ticks. 1 tick = 10000 ms.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startTimeTicks", required = false) Long startTimeTicks,
        @Parameter(name = "transcodingContainer", description = "Optional. The container to transcode to.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingContainer", required = false) String transcodingContainer,
        @Parameter(name = "transcodingProtocol", description = "Optional. The transcoding protocol.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "transcodingProtocol", required = false) String transcodingProtocol,
        @Parameter(name = "maxAudioSampleRate", description = "Optional. The maximum audio sample rate.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioSampleRate", required = false) Integer maxAudioSampleRate,
        @Parameter(name = "maxAudioBitDepth", description = "Optional. The maximum audio bit depth.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAudioBitDepth", required = false) Integer maxAudioBitDepth,
        @Parameter(name = "enableRemoteMedia", description = "Optional. Whether to enable remote media.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableRemoteMedia", required = false) Boolean enableRemoteMedia,
        @Parameter(name = "breakOnNonKeyFrames", description = "Optional. Whether to break on non key frames.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "breakOnNonKeyFrames", required = false) Boolean breakOnNonKeyFrames,
        @Parameter(name = "enableRedirection", description = "Whether to enable redirection. Defaults to true.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableRedirection", required = false, defaultValue = "true") Boolean enableRedirection
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
