/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.DisplayPreferencesDto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "DisplayPreferences", description = "the DisplayPreferences API")
public interface DisplayPreferencesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /DisplayPreferences/{displayPreferencesId} : Get Display Preferences.
     *
     * @param displayPreferencesId Display preferences id. (required)
     * @param userId User id. (required)
     * @param client Client. (required)
     * @return Display preferences retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getDisplayPreferences",
        summary = "Get Display Preferences.",
        tags = { "DisplayPreferences" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Display preferences retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DisplayPreferencesDto.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = DisplayPreferencesDto.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = DisplayPreferencesDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/DisplayPreferences/{displayPreferencesId}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<DisplayPreferencesDto> getDisplayPreferences(
        @Parameter(name = "displayPreferencesId", description = "Display preferences id.", required = true, in = ParameterIn.PATH) @PathVariable("displayPreferencesId") String displayPreferencesId,
        @NotNull @Parameter(name = "userId", description = "User id.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) UUID userId,
        @NotNull @Parameter(name = "client", description = "Client.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "client", required = true) String client
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"RememberSorting\" : true, \"RememberIndexing\" : true, \"PrimaryImageWidth\" : 6, \"IndexBy\" : \"IndexBy\", \"ShowBackdrop\" : true, \"SortBy\" : \"SortBy\", \"ShowSidebar\" : true, \"PrimaryImageHeight\" : 0, \"Id\" : \"Id\", \"Client\" : \"Client\", \"CustomPrefs\" : { \"key\" : \"CustomPrefs\" }, \"ViewType\" : \"ViewType\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"RememberSorting\" : true, \"RememberIndexing\" : true, \"PrimaryImageWidth\" : 6, \"IndexBy\" : \"IndexBy\", \"ShowBackdrop\" : true, \"SortBy\" : \"SortBy\", \"ShowSidebar\" : true, \"PrimaryImageHeight\" : 0, \"Id\" : \"Id\", \"Client\" : \"Client\", \"CustomPrefs\" : { \"key\" : \"CustomPrefs\" }, \"ViewType\" : \"ViewType\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"RememberSorting\" : true, \"RememberIndexing\" : true, \"PrimaryImageWidth\" : 6, \"IndexBy\" : \"IndexBy\", \"ShowBackdrop\" : true, \"SortBy\" : \"SortBy\", \"ShowSidebar\" : true, \"PrimaryImageHeight\" : 0, \"Id\" : \"Id\", \"Client\" : \"Client\", \"CustomPrefs\" : { \"key\" : \"CustomPrefs\" }, \"ViewType\" : \"ViewType\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /DisplayPreferences/{displayPreferencesId} : Update Display Preferences.
     *
     * @param displayPreferencesId Display preferences id. (required)
     * @param userId User Id. (required)
     * @param client Client. (required)
     * @param displayPreferencesDto New Display Preferences object. (required)
     * @return Display preferences updated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "updateDisplayPreferences",
        summary = "Update Display Preferences.",
        tags = { "DisplayPreferences" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Display preferences updated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/DisplayPreferences/{displayPreferencesId}",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> updateDisplayPreferences(
        @Parameter(name = "displayPreferencesId", description = "Display preferences id.", required = true, in = ParameterIn.PATH) @PathVariable("displayPreferencesId") String displayPreferencesId,
        @NotNull @Parameter(name = "userId", description = "User Id.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) UUID userId,
        @NotNull @Parameter(name = "client", description = "Client.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "client", required = true) String client,
        @Parameter(name = "DisplayPreferencesDto", description = "New Display Preferences object.", required = true) @Valid @RequestBody DisplayPreferencesDto displayPreferencesDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
