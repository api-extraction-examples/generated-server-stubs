/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.PluginInfo;
import org.openapitools.model.PluginSecurityInfo;
import org.openapitools.model.ProblemDetails;
import java.util.UUID;
import org.openapitools.model.Version;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Plugins", description = "the Plugins API")
public interface PluginsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /Plugins/{pluginId}/{version}/Disable : Disable a plugin.
     *
     * @param pluginId Plugin id. (required)
     * @param version Plugin version. (required)
     * @return Plugin disabled. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Plugin not found. (status code 404)
     */
    @Operation(
        operationId = "disablePlugin",
        summary = "Disable a plugin.",
        tags = { "Plugins" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Plugin disabled."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Plugin not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Plugins/{pluginId}/{version}/Disable",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> disablePlugin(
        @Parameter(name = "pluginId", description = "Plugin id.", required = true, in = ParameterIn.PATH) @PathVariable("pluginId") UUID pluginId,
        @Parameter(name = "version", description = "Plugin version.", required = true, in = ParameterIn.PATH) @PathVariable("version") Version version
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Plugins/{pluginId}/{version}/Enable : Enables a disabled plugin.
     *
     * @param pluginId Plugin id. (required)
     * @param version Plugin version. (required)
     * @return Plugin enabled. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Plugin not found. (status code 404)
     */
    @Operation(
        operationId = "enablePlugin",
        summary = "Enables a disabled plugin.",
        tags = { "Plugins" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Plugin enabled."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Plugin not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Plugins/{pluginId}/{version}/Enable",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> enablePlugin(
        @Parameter(name = "pluginId", description = "Plugin id.", required = true, in = ParameterIn.PATH) @PathVariable("pluginId") UUID pluginId,
        @Parameter(name = "version", description = "Plugin version.", required = true, in = ParameterIn.PATH) @PathVariable("version") Version version
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Plugins/{pluginId}/Configuration : Gets plugin configuration.
     *
     * @param pluginId Plugin id. (required)
     * @return Plugin configuration returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Plugin not found or plugin configuration not found. (status code 404)
     */
    @Operation(
        operationId = "getPluginConfiguration",
        summary = "Gets plugin configuration.",
        tags = { "Plugins" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Plugin configuration returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = Object.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Plugin not found or plugin configuration not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Plugins/{pluginId}/Configuration",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Object> getPluginConfiguration(
        @Parameter(name = "pluginId", description = "Plugin id.", required = true, in = ParameterIn.PATH) @PathVariable("pluginId") UUID pluginId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Plugins/{pluginId}/{version}/Image : Gets a plugin&#39;s image.
     *
     * @param pluginId Plugin id. (required)
     * @param version Plugin version. (required)
     * @return Plugin image returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getPluginImage",
        summary = "Gets a plugin's image.",
        tags = { "Plugins" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Plugin image returned.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Plugins/{pluginId}/{version}/Image",
        produces = { "image/*", "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getPluginImage(
        @Parameter(name = "pluginId", description = "Plugin id.", required = true, in = ParameterIn.PATH) @PathVariable("pluginId") UUID pluginId,
        @Parameter(name = "version", description = "Plugin version.", required = true, in = ParameterIn.PATH) @PathVariable("version") Version version
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Plugins/{pluginId}/Manifest : Gets a plugin&#39;s manifest.
     *
     * @param pluginId Plugin id. (required)
     * @return Plugin manifest returned. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Plugin not found. (status code 404)
     */
    @Operation(
        operationId = "getPluginManifest",
        summary = "Gets a plugin's manifest.",
        tags = { "Plugins" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Plugin manifest returned."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Plugin not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Plugins/{pluginId}/Manifest",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> getPluginManifest(
        @Parameter(name = "pluginId", description = "Plugin id.", required = true, in = ParameterIn.PATH) @PathVariable("pluginId") UUID pluginId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Plugins : Gets a list of currently installed plugins.
     *
     * @return Installed plugins returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getPlugins",
        summary = "Gets a list of currently installed plugins.",
        tags = { "Plugins" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Installed plugins returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PluginInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = PluginInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = PluginInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Plugins",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<PluginInfo>> getPlugins(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Description\" : \"Description\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"HasImage\" : true, \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"CanUninstall\" : true, \"ConfigurationFileName\" : \"ConfigurationFileName\", \"Name\" : \"Name\" }, { \"Description\" : \"Description\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"HasImage\" : true, \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"CanUninstall\" : true, \"ConfigurationFileName\" : \"ConfigurationFileName\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Description\" : \"Description\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"HasImage\" : true, \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"CanUninstall\" : true, \"ConfigurationFileName\" : \"ConfigurationFileName\", \"Name\" : \"Name\" }, { \"Description\" : \"Description\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"HasImage\" : true, \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"CanUninstall\" : true, \"ConfigurationFileName\" : \"ConfigurationFileName\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Description\" : \"Description\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"HasImage\" : true, \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"CanUninstall\" : true, \"ConfigurationFileName\" : \"ConfigurationFileName\", \"Name\" : \"Name\" }, { \"Description\" : \"Description\", \"Version\" : { \"Major\" : 6, \"Revision\" : 2, \"Build\" : 0, \"Minor\" : 5, \"MinorRevision\" : 5, \"MajorRevision\" : 1 }, \"HasImage\" : true, \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"CanUninstall\" : true, \"ConfigurationFileName\" : \"ConfigurationFileName\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /Plugins/{pluginId} : Uninstalls a plugin.
     *
     * @param pluginId Plugin id. (required)
     * @return Plugin uninstalled. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Plugin not found. (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "uninstallPlugin",
        summary = "Uninstalls a plugin.",
        deprecated = true,
        tags = { "Plugins" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Plugin uninstalled."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Plugin not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/Plugins/{pluginId}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> uninstallPlugin(
        @Parameter(name = "pluginId", description = "Plugin id.", required = true, in = ParameterIn.PATH) @PathVariable("pluginId") UUID pluginId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /Plugins/{pluginId}/{version} : Uninstalls a plugin by version.
     *
     * @param pluginId Plugin id. (required)
     * @param version Plugin version. (required)
     * @return Plugin uninstalled. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Plugin not found. (status code 404)
     */
    @Operation(
        operationId = "uninstallPluginByVersion",
        summary = "Uninstalls a plugin by version.",
        tags = { "Plugins" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Plugin uninstalled."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Plugin not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/Plugins/{pluginId}/{version}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> uninstallPluginByVersion(
        @Parameter(name = "pluginId", description = "Plugin id.", required = true, in = ParameterIn.PATH) @PathVariable("pluginId") UUID pluginId,
        @Parameter(name = "version", description = "Plugin version.", required = true, in = ParameterIn.PATH) @PathVariable("version") Version version
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Plugins/{pluginId}/Configuration : Updates plugin configuration.
     * Accepts plugin configuration as JSON body.
     *
     * @param pluginId Plugin id. (required)
     * @return Plugin configuration updated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Plugin not found or plugin does not have configuration. (status code 404)
     */
    @Operation(
        operationId = "updatePluginConfiguration",
        summary = "Updates plugin configuration.",
        description = "Accepts plugin configuration as JSON body.",
        tags = { "Plugins" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Plugin configuration updated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Plugin not found or plugin does not have configuration.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Plugins/{pluginId}/Configuration",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> updatePluginConfiguration(
        @Parameter(name = "pluginId", description = "Plugin id.", required = true, in = ParameterIn.PATH) @PathVariable("pluginId") UUID pluginId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Plugins/SecurityInfo : Updates plugin security info.
     *
     * @param pluginSecurityInfo Plugin security info. (required)
     * @return Plugin security info updated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "updatePluginSecurityInfo",
        summary = "Updates plugin security info.",
        deprecated = true,
        tags = { "Plugins" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Plugin security info updated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Plugins/SecurityInfo",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> updatePluginSecurityInfo(
        @Parameter(name = "PluginSecurityInfo", description = "Plugin security info.", required = true) @Valid @RequestBody PluginSecurityInfo pluginSecurityInfo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
