/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ProblemDetails;
import org.openapitools.model.TaskInfo;
import org.openapitools.model.TaskTriggerInfo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "ScheduledTasks", description = "the ScheduledTasks API")
public interface ScheduledTasksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /ScheduledTasks/{taskId} : Get task by id.
     *
     * @param taskId Task Id. (required)
     * @return Task retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Task not found. (status code 404)
     */
    @Operation(
        operationId = "getTask",
        summary = "Get task by id.",
        tags = { "ScheduledTasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInfo.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = TaskInfo.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = TaskInfo.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Task not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ScheduledTasks/{taskId}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<TaskInfo> getTask(
        @Parameter(name = "taskId", description = "Task Id.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"IsHidden\" : true, \"Category\" : \"Category\", \"Description\" : \"Description\", \"CurrentProgressPercentage\" : 0.8008281904610115, \"Triggers\" : [ { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 }, { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 } ], \"Id\" : \"Id\", \"LastExecutionResult\" : { \"LongErrorMessage\" : \"LongErrorMessage\", \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : \"Id\", \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"ErrorMessage\" : \"ErrorMessage\", \"Key\" : \"Key\", \"Name\" : \"Name\" }, \"Key\" : \"Key\", \"Name\" : \"Name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"IsHidden\" : true, \"Category\" : \"Category\", \"Description\" : \"Description\", \"CurrentProgressPercentage\" : 0.8008281904610115, \"Triggers\" : [ { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 }, { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 } ], \"Id\" : \"Id\", \"LastExecutionResult\" : { \"LongErrorMessage\" : \"LongErrorMessage\", \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : \"Id\", \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"ErrorMessage\" : \"ErrorMessage\", \"Key\" : \"Key\", \"Name\" : \"Name\" }, \"Key\" : \"Key\", \"Name\" : \"Name\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"IsHidden\" : true, \"Category\" : \"Category\", \"Description\" : \"Description\", \"CurrentProgressPercentage\" : 0.8008281904610115, \"Triggers\" : [ { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 }, { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 } ], \"Id\" : \"Id\", \"LastExecutionResult\" : { \"LongErrorMessage\" : \"LongErrorMessage\", \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : \"Id\", \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"ErrorMessage\" : \"ErrorMessage\", \"Key\" : \"Key\", \"Name\" : \"Name\" }, \"Key\" : \"Key\", \"Name\" : \"Name\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ScheduledTasks : Get tasks.
     *
     * @param isHidden Optional filter tasks that are hidden, or not. (optional)
     * @param isEnabled Optional filter tasks that are enabled, or not. (optional)
     * @return Scheduled tasks retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getTasks",
        summary = "Get tasks.",
        tags = { "ScheduledTasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Scheduled tasks retrieved.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = TaskInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = TaskInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ScheduledTasks",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<TaskInfo>> getTasks(
        @Parameter(name = "isHidden", description = "Optional filter tasks that are hidden, or not.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isHidden", required = false) Boolean isHidden,
        @Parameter(name = "isEnabled", description = "Optional filter tasks that are enabled, or not.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isEnabled", required = false) Boolean isEnabled
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"IsHidden\" : true, \"Category\" : \"Category\", \"Description\" : \"Description\", \"CurrentProgressPercentage\" : 0.8008281904610115, \"Triggers\" : [ { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 }, { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 } ], \"Id\" : \"Id\", \"LastExecutionResult\" : { \"LongErrorMessage\" : \"LongErrorMessage\", \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : \"Id\", \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"ErrorMessage\" : \"ErrorMessage\", \"Key\" : \"Key\", \"Name\" : \"Name\" }, \"Key\" : \"Key\", \"Name\" : \"Name\" }, { \"IsHidden\" : true, \"Category\" : \"Category\", \"Description\" : \"Description\", \"CurrentProgressPercentage\" : 0.8008281904610115, \"Triggers\" : [ { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 }, { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 } ], \"Id\" : \"Id\", \"LastExecutionResult\" : { \"LongErrorMessage\" : \"LongErrorMessage\", \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : \"Id\", \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"ErrorMessage\" : \"ErrorMessage\", \"Key\" : \"Key\", \"Name\" : \"Name\" }, \"Key\" : \"Key\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"IsHidden\" : true, \"Category\" : \"Category\", \"Description\" : \"Description\", \"CurrentProgressPercentage\" : 0.8008281904610115, \"Triggers\" : [ { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 }, { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 } ], \"Id\" : \"Id\", \"LastExecutionResult\" : { \"LongErrorMessage\" : \"LongErrorMessage\", \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : \"Id\", \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"ErrorMessage\" : \"ErrorMessage\", \"Key\" : \"Key\", \"Name\" : \"Name\" }, \"Key\" : \"Key\", \"Name\" : \"Name\" }, { \"IsHidden\" : true, \"Category\" : \"Category\", \"Description\" : \"Description\", \"CurrentProgressPercentage\" : 0.8008281904610115, \"Triggers\" : [ { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 }, { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 } ], \"Id\" : \"Id\", \"LastExecutionResult\" : { \"LongErrorMessage\" : \"LongErrorMessage\", \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : \"Id\", \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"ErrorMessage\" : \"ErrorMessage\", \"Key\" : \"Key\", \"Name\" : \"Name\" }, \"Key\" : \"Key\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"IsHidden\" : true, \"Category\" : \"Category\", \"Description\" : \"Description\", \"CurrentProgressPercentage\" : 0.8008281904610115, \"Triggers\" : [ { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 }, { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 } ], \"Id\" : \"Id\", \"LastExecutionResult\" : { \"LongErrorMessage\" : \"LongErrorMessage\", \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : \"Id\", \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"ErrorMessage\" : \"ErrorMessage\", \"Key\" : \"Key\", \"Name\" : \"Name\" }, \"Key\" : \"Key\", \"Name\" : \"Name\" }, { \"IsHidden\" : true, \"Category\" : \"Category\", \"Description\" : \"Description\", \"CurrentProgressPercentage\" : 0.8008281904610115, \"Triggers\" : [ { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 }, { \"Type\" : \"Type\", \"IntervalTicks\" : 6, \"TimeOfDayTicks\" : 5, \"MaxRuntimeTicks\" : 1 } ], \"Id\" : \"Id\", \"LastExecutionResult\" : { \"LongErrorMessage\" : \"LongErrorMessage\", \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"Id\" : \"Id\", \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\", \"ErrorMessage\" : \"ErrorMessage\", \"Key\" : \"Key\", \"Name\" : \"Name\" }, \"Key\" : \"Key\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /ScheduledTasks/Running/{taskId} : Start specified task.
     *
     * @param taskId Task Id. (required)
     * @return Task started. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Task not found. (status code 404)
     */
    @Operation(
        operationId = "startTask",
        summary = "Start specified task.",
        tags = { "ScheduledTasks" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Task started."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Task not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ScheduledTasks/Running/{taskId}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> startTask(
        @Parameter(name = "taskId", description = "Task Id.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /ScheduledTasks/Running/{taskId} : Stop specified task.
     *
     * @param taskId Task Id. (required)
     * @return Task stopped. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Task not found. (status code 404)
     */
    @Operation(
        operationId = "stopTask",
        summary = "Stop specified task.",
        tags = { "ScheduledTasks" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Task stopped."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Task not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/ScheduledTasks/Running/{taskId}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> stopTask(
        @Parameter(name = "taskId", description = "Task Id.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /ScheduledTasks/{taskId}/Triggers : Update specified task triggers.
     *
     * @param taskId Task Id. (required)
     * @param taskTriggerInfo Triggers. (required)
     * @return Task triggers updated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Task not found. (status code 404)
     */
    @Operation(
        operationId = "updateTask",
        summary = "Update specified task triggers.",
        tags = { "ScheduledTasks" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Task triggers updated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Task not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ScheduledTasks/{taskId}/Triggers",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" },
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> updateTask(
        @Parameter(name = "taskId", description = "Task Id.", required = true, in = ParameterIn.PATH) @PathVariable("taskId") String taskId,
        @Parameter(name = "TaskTriggerInfo", description = "Triggers.", required = true) @Valid @RequestBody List<@Valid TaskTriggerInfo> taskTriggerInfo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
