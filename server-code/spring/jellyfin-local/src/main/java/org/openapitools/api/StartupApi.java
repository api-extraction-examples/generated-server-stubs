/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.StartupConfigurationDto;
import org.openapitools.model.StartupRemoteAccessDto;
import org.openapitools.model.StartupUserDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Startup", description = "the Startup API")
public interface StartupApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /Startup/Complete : Completes the startup wizard.
     *
     * @return Startup wizard completed. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "completeWizard",
        summary = "Completes the startup wizard.",
        tags = { "Startup" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Startup wizard completed."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Startup/Complete"
    )
    
    default ResponseEntity<Void> completeWizard(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Startup/User : Gets the first user.
     *
     * @return Initial user retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getFirstUser",
        summary = "Gets the first user.",
        tags = { "Startup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Initial user retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StartupUserDto.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = StartupUserDto.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = StartupUserDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Startup/User",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<StartupUserDto> getFirstUser(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Name\" : \"Name\", \"Password\" : \"Password\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"Name\" : \"Name\", \"Password\" : \"Password\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"Name\" : \"Name\", \"Password\" : \"Password\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Startup/FirstUser : Gets the first user.
     *
     * @return Initial user retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getFirstUser2",
        summary = "Gets the first user.",
        tags = { "Startup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Initial user retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StartupUserDto.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = StartupUserDto.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = StartupUserDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Startup/FirstUser",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<StartupUserDto> getFirstUser2(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Name\" : \"Name\", \"Password\" : \"Password\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"Name\" : \"Name\", \"Password\" : \"Password\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"Name\" : \"Name\", \"Password\" : \"Password\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Startup/Configuration : Gets the initial startup wizard configuration.
     *
     * @return Initial startup wizard configuration retrieved. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getStartupConfiguration",
        summary = "Gets the initial startup wizard configuration.",
        tags = { "Startup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Initial startup wizard configuration retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StartupConfigurationDto.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = StartupConfigurationDto.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = StartupConfigurationDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Startup/Configuration",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<StartupConfigurationDto> getStartupConfiguration(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\", \"UICulture\" : \"UICulture\", \"MetadataCountryCode\" : \"MetadataCountryCode\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\", \"UICulture\" : \"UICulture\", \"MetadataCountryCode\" : \"MetadataCountryCode\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\", \"UICulture\" : \"UICulture\", \"MetadataCountryCode\" : \"MetadataCountryCode\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Startup/RemoteAccess : Sets remote access and UPnP.
     *
     * @param startupRemoteAccessDto The startup remote access dto. (required)
     * @return Configuration saved. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "setRemoteAccess",
        summary = "Sets remote access and UPnP.",
        tags = { "Startup" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Configuration saved."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Startup/RemoteAccess",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> setRemoteAccess(
        @Parameter(name = "StartupRemoteAccessDto", description = "The startup remote access dto.", required = true) @Valid @RequestBody StartupRemoteAccessDto startupRemoteAccessDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Startup/Configuration : Sets the initial startup wizard configuration.
     *
     * @param startupConfigurationDto The updated startup configuration. (required)
     * @return Configuration saved. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "updateInitialConfiguration",
        summary = "Sets the initial startup wizard configuration.",
        tags = { "Startup" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Configuration saved."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Startup/Configuration",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> updateInitialConfiguration(
        @Parameter(name = "StartupConfigurationDto", description = "The updated startup configuration.", required = true) @Valid @RequestBody StartupConfigurationDto startupConfigurationDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Startup/User : Sets the user name and password.
     *
     * @param startupUserDto The DTO containing username and password. (optional)
     * @return Updated user name and password. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "updateStartupUser",
        summary = "Sets the user name and password.",
        tags = { "Startup" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Updated user name and password."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Startup/User",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> updateStartupUser(
        @Parameter(name = "StartupUserDto", description = "The DTO containing username and password.") @Valid @RequestBody(required = false) StartupUserDto startupUserDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
