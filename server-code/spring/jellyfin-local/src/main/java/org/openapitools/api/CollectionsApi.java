/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CollectionCreationResult;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Collection", description = "the Collection API")
public interface CollectionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /Collections/{collectionId}/Items : Adds items to a collection.
     *
     * @param collectionId The collection id. (required)
     * @param ids Item ids, comma delimited. (required)
     * @return Items added to collection. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "addToCollection",
        summary = "Adds items to a collection.",
        tags = { "Collection" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Items added to collection."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Collections/{collectionId}/Items"
    )
    
    default ResponseEntity<Void> addToCollection(
        @Parameter(name = "collectionId", description = "The collection id.", required = true, in = ParameterIn.PATH) @PathVariable("collectionId") UUID collectionId,
        @NotNull @Parameter(name = "ids", description = "Item ids, comma delimited.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = true) List<UUID> ids
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Collections : Creates a new collection.
     *
     * @param name The name of the collection. (optional)
     * @param ids Item Ids to add to the collection. (optional)
     * @param parentId Optional. Create the collection within a specific folder. (optional)
     * @param isLocked Whether or not to lock the new collection. (optional, default to false)
     * @return Collection created. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "createCollection",
        summary = "Creates a new collection.",
        tags = { "Collection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Collection created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CollectionCreationResult.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = CollectionCreationResult.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = CollectionCreationResult.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Collections",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<CollectionCreationResult> createCollection(
        @Parameter(name = "name", description = "The name of the collection.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "ids", description = "Item Ids to add to the collection.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = false) List<String> ids,
        @Parameter(name = "parentId", description = "Optional. Create the collection within a specific folder.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "parentId", required = false) UUID parentId,
        @Parameter(name = "isLocked", description = "Whether or not to lock the new collection.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isLocked", required = false, defaultValue = "false") Boolean isLocked
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /Collections/{collectionId}/Items : Removes items from a collection.
     *
     * @param collectionId The collection id. (required)
     * @param ids Item ids, comma delimited. (required)
     * @return Items removed from collection. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "removeFromCollection",
        summary = "Removes items from a collection.",
        tags = { "Collection" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Items removed from collection."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/Collections/{collectionId}/Items"
    )
    
    default ResponseEntity<Void> removeFromCollection(
        @Parameter(name = "collectionId", description = "The collection id.", required = true, in = ParameterIn.PATH) @PathVariable("collectionId") UUID collectionId,
        @NotNull @Parameter(name = "ids", description = "Item ids, comma delimited.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = true) List<UUID> ids
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
