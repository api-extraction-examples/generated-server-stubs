/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ConfigurationPageInfo;
import org.openapitools.model.ConfigurationPageType;
import org.openapitools.model.ProblemDetails;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Dashboard", description = "the Dashboard API")
public interface WebApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /web/ConfigurationPages : Gets the configuration pages.
     *
     * @param enableInMainMenu Whether to enable in the main menu. (optional)
     * @param pageType The Jellyfin.Api.Models.ConfigurationPageInfo. (optional)
     * @return ConfigurationPages returned. (status code 200)
     *         or Server still loading. (status code 404)
     */
    @Operation(
        operationId = "getConfigurationPages",
        summary = "Gets the configuration pages.",
        tags = { "Dashboard" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ConfigurationPages returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ConfigurationPageInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = ConfigurationPageInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = ConfigurationPageInfo.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Server still loading.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/web/ConfigurationPages",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<ConfigurationPageInfo>> getConfigurationPages(
        @Parameter(name = "enableInMainMenu", description = "Whether to enable in the main menu.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "enableInMainMenu", required = false) Boolean enableInMainMenu,
        @Parameter(name = "pageType", description = "The Jellyfin.Api.Models.ConfigurationPageInfo.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageType", required = false) ConfigurationPageType pageType
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"MenuIcon\" : \"MenuIcon\", \"EnableInMainMenu\" : true, \"DisplayName\" : \"DisplayName\", \"MenuSection\" : \"MenuSection\", \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" }, { \"MenuIcon\" : \"MenuIcon\", \"EnableInMainMenu\" : true, \"DisplayName\" : \"DisplayName\", \"MenuSection\" : \"MenuSection\", \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"MenuIcon\" : \"MenuIcon\", \"EnableInMainMenu\" : true, \"DisplayName\" : \"DisplayName\", \"MenuSection\" : \"MenuSection\", \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" }, { \"MenuIcon\" : \"MenuIcon\", \"EnableInMainMenu\" : true, \"DisplayName\" : \"DisplayName\", \"MenuSection\" : \"MenuSection\", \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"MenuIcon\" : \"MenuIcon\", \"EnableInMainMenu\" : true, \"DisplayName\" : \"DisplayName\", \"MenuSection\" : \"MenuSection\", \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" }, { \"MenuIcon\" : \"MenuIcon\", \"EnableInMainMenu\" : true, \"DisplayName\" : \"DisplayName\", \"MenuSection\" : \"MenuSection\", \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /web/ConfigurationPage : Gets a dashboard configuration page.
     *
     * @param name The name of the page. (optional)
     * @return ConfigurationPage returned. (status code 200)
     *         or Plugin configuration page not found. (status code 404)
     */
    @Operation(
        operationId = "getDashboardConfigurationPage",
        summary = "Gets a dashboard configuration page.",
        tags = { "Dashboard" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ConfigurationPage returned.", content = {
                @Content(mediaType = "application/x-javascript", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "text/html", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Plugin configuration page not found.", content = {
                @Content(mediaType = "application/x-javascript", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "text/html", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/web/ConfigurationPage",
        produces = { "application/x-javascript", "text/html", "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getDashboardConfigurationPage(
        @Parameter(name = "name", description = "The name of the page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
