/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.DeviceProfile;
import org.openapitools.model.DeviceProfileInfo;
import org.openapitools.model.ProblemDetails;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Dlna", description = "the Dlna API")
public interface DlnaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /Dlna/Profiles : Creates a profile.
     *
     * @param deviceProfile Device profile. (optional)
     * @return Device profile created. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "createProfile",
        summary = "Creates a profile.",
        tags = { "Dlna" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Device profile created."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Dlna/Profiles",
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> createProfile(
        @Parameter(name = "DeviceProfile", description = "Device profile.") @Valid @RequestBody(required = false) DeviceProfile deviceProfile
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /Dlna/Profiles/{profileId} : Deletes a profile.
     *
     * @param profileId Profile id. (required)
     * @return Device profile deleted. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Device profile not found. (status code 404)
     */
    @Operation(
        operationId = "deleteProfile",
        summary = "Deletes a profile.",
        tags = { "Dlna" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Device profile deleted."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Device profile not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/Dlna/Profiles/{profileId}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<Void> deleteProfile(
        @Parameter(name = "profileId", description = "Profile id.", required = true, in = ParameterIn.PATH) @PathVariable("profileId") String profileId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/ConnectionManager : Gets Dlna media receiver registrar xml.
     *
     * @param serverId Server UUID. (required)
     * @return Dlna media receiver registrar xml returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getConnectionManager",
        summary = "Gets Dlna media receiver registrar xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dlna media receiver registrar xml returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/ConnectionManager",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getConnectionManager(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/ConnectionManager/ConnectionManager : Gets Dlna media receiver registrar xml.
     *
     * @param serverId Server UUID. (required)
     * @return Dlna media receiver registrar xml returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getConnectionManager2",
        summary = "Gets Dlna media receiver registrar xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dlna media receiver registrar xml returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/ConnectionManager/ConnectionManager",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getConnectionManager2(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/ConnectionManager/ConnectionManager.xml : Gets Dlna media receiver registrar xml.
     *
     * @param serverId Server UUID. (required)
     * @return Dlna media receiver registrar xml returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getConnectionManager3",
        summary = "Gets Dlna media receiver registrar xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dlna media receiver registrar xml returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getConnectionManager3(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/ContentDirectory : Gets Dlna content directory xml.
     *
     * @param serverId Server UUID. (required)
     * @return Dlna content directory returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getContentDirectory",
        summary = "Gets Dlna content directory xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dlna content directory returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/ContentDirectory",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getContentDirectory(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/ContentDirectory/ContentDirectory : Gets Dlna content directory xml.
     *
     * @param serverId Server UUID. (required)
     * @return Dlna content directory returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getContentDirectory2",
        summary = "Gets Dlna content directory xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dlna content directory returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/ContentDirectory/ContentDirectory",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getContentDirectory2(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/ContentDirectory/ContentDirectory.xml : Gets Dlna content directory xml.
     *
     * @param serverId Server UUID. (required)
     * @return Dlna content directory returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getContentDirectory3",
        summary = "Gets Dlna content directory xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dlna content directory returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getContentDirectory3(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/Profiles/Default : Gets the default profile.
     *
     * @return Default device profile returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getDefaultProfile",
        summary = "Gets the default profile.",
        tags = { "Dlna" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Default device profile returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceProfile.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = DeviceProfile.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = DeviceProfile.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/Profiles/Default",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<DeviceProfile> getDefaultProfile(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"EnableSingleAlbumArtLimit\" : true, \"ManufacturerUrl\" : \"ManufacturerUrl\", \"MusicStreamingTranscodingBitrate\" : 9, \"AlbumArtPn\" : \"AlbumArtPn\", \"TranscodingProfiles\" : [ { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" }, { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" } ], \"Identification\" : { \"ManufacturerUrl\" : \"ManufacturerUrl\", \"ModelNumber\" : \"ModelNumber\", \"ModelUrl\" : \"ModelUrl\", \"ModelName\" : \"ModelName\", \"SerialNumber\" : \"SerialNumber\", \"FriendlyName\" : \"FriendlyName\", \"Headers\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"Manufacturer\" : \"Manufacturer\", \"ModelDescription\" : \"ModelDescription\" }, \"MaxStreamingBitrate\" : 7, \"IgnoreTranscodeByteRangeRequests\" : true, \"Name\" : \"Name\", \"ResponseProfiles\" : [ { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" }, { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" } ], \"ModelUrl\" : \"ModelUrl\", \"MaxStaticBitrate\" : 5, \"Manufacturer\" : \"Manufacturer\", \"ProtocolInfo\" : \"ProtocolInfo\", \"RequiresPlainVideoItems\" : true, \"ModelDescription\" : \"ModelDescription\", \"MaxAlbumArtWidth\" : 6, \"ModelNumber\" : \"ModelNumber\", \"XmlRootAttributes\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"ModelName\" : \"ModelName\", \"FriendlyName\" : \"FriendlyName\", \"MaxIconHeight\" : 1, \"RequiresPlainFolders\" : true, \"EnableSingleSubtitleLimit\" : true, \"SubtitleProfiles\" : [ { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" }, { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" } ], \"MaxAlbumArtHeight\" : 0, \"EnableAlbumArtInDidl\" : true, \"EnableMSMediaReceiverRegistrar\" : true, \"CodecProfiles\" : [ { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"SerialNumber\" : \"SerialNumber\", \"SupportedMediaTypes\" : \"SupportedMediaTypes\", \"SonyAggregationFlags\" : \"SonyAggregationFlags\", \"MaxIconWidth\" : 5, \"UserId\" : \"UserId\", \"TimelineOffsetSeconds\" : 3, \"ContainerProfiles\" : [ { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"DirectPlayProfiles\" : [ { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" }, { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" } ], \"MaxStaticMusicBitrate\" : 2, \"Id\" : \"Id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"EnableSingleAlbumArtLimit\" : true, \"ManufacturerUrl\" : \"ManufacturerUrl\", \"MusicStreamingTranscodingBitrate\" : 9, \"AlbumArtPn\" : \"AlbumArtPn\", \"TranscodingProfiles\" : [ { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" }, { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" } ], \"Identification\" : { \"ManufacturerUrl\" : \"ManufacturerUrl\", \"ModelNumber\" : \"ModelNumber\", \"ModelUrl\" : \"ModelUrl\", \"ModelName\" : \"ModelName\", \"SerialNumber\" : \"SerialNumber\", \"FriendlyName\" : \"FriendlyName\", \"Headers\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"Manufacturer\" : \"Manufacturer\", \"ModelDescription\" : \"ModelDescription\" }, \"MaxStreamingBitrate\" : 7, \"IgnoreTranscodeByteRangeRequests\" : true, \"Name\" : \"Name\", \"ResponseProfiles\" : [ { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" }, { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" } ], \"ModelUrl\" : \"ModelUrl\", \"MaxStaticBitrate\" : 5, \"Manufacturer\" : \"Manufacturer\", \"ProtocolInfo\" : \"ProtocolInfo\", \"RequiresPlainVideoItems\" : true, \"ModelDescription\" : \"ModelDescription\", \"MaxAlbumArtWidth\" : 6, \"ModelNumber\" : \"ModelNumber\", \"XmlRootAttributes\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"ModelName\" : \"ModelName\", \"FriendlyName\" : \"FriendlyName\", \"MaxIconHeight\" : 1, \"RequiresPlainFolders\" : true, \"EnableSingleSubtitleLimit\" : true, \"SubtitleProfiles\" : [ { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" }, { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" } ], \"MaxAlbumArtHeight\" : 0, \"EnableAlbumArtInDidl\" : true, \"EnableMSMediaReceiverRegistrar\" : true, \"CodecProfiles\" : [ { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"SerialNumber\" : \"SerialNumber\", \"SupportedMediaTypes\" : \"SupportedMediaTypes\", \"SonyAggregationFlags\" : \"SonyAggregationFlags\", \"MaxIconWidth\" : 5, \"UserId\" : \"UserId\", \"TimelineOffsetSeconds\" : 3, \"ContainerProfiles\" : [ { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"DirectPlayProfiles\" : [ { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" }, { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" } ], \"MaxStaticMusicBitrate\" : 2, \"Id\" : \"Id\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"EnableSingleAlbumArtLimit\" : true, \"ManufacturerUrl\" : \"ManufacturerUrl\", \"MusicStreamingTranscodingBitrate\" : 9, \"AlbumArtPn\" : \"AlbumArtPn\", \"TranscodingProfiles\" : [ { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" }, { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" } ], \"Identification\" : { \"ManufacturerUrl\" : \"ManufacturerUrl\", \"ModelNumber\" : \"ModelNumber\", \"ModelUrl\" : \"ModelUrl\", \"ModelName\" : \"ModelName\", \"SerialNumber\" : \"SerialNumber\", \"FriendlyName\" : \"FriendlyName\", \"Headers\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"Manufacturer\" : \"Manufacturer\", \"ModelDescription\" : \"ModelDescription\" }, \"MaxStreamingBitrate\" : 7, \"IgnoreTranscodeByteRangeRequests\" : true, \"Name\" : \"Name\", \"ResponseProfiles\" : [ { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" }, { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" } ], \"ModelUrl\" : \"ModelUrl\", \"MaxStaticBitrate\" : 5, \"Manufacturer\" : \"Manufacturer\", \"ProtocolInfo\" : \"ProtocolInfo\", \"RequiresPlainVideoItems\" : true, \"ModelDescription\" : \"ModelDescription\", \"MaxAlbumArtWidth\" : 6, \"ModelNumber\" : \"ModelNumber\", \"XmlRootAttributes\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"ModelName\" : \"ModelName\", \"FriendlyName\" : \"FriendlyName\", \"MaxIconHeight\" : 1, \"RequiresPlainFolders\" : true, \"EnableSingleSubtitleLimit\" : true, \"SubtitleProfiles\" : [ { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" }, { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" } ], \"MaxAlbumArtHeight\" : 0, \"EnableAlbumArtInDidl\" : true, \"EnableMSMediaReceiverRegistrar\" : true, \"CodecProfiles\" : [ { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"SerialNumber\" : \"SerialNumber\", \"SupportedMediaTypes\" : \"SupportedMediaTypes\", \"SonyAggregationFlags\" : \"SonyAggregationFlags\", \"MaxIconWidth\" : 5, \"UserId\" : \"UserId\", \"TimelineOffsetSeconds\" : 3, \"ContainerProfiles\" : [ { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"DirectPlayProfiles\" : [ { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" }, { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" } ], \"MaxStaticMusicBitrate\" : 2, \"Id\" : \"Id\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/description : Get Description Xml.
     *
     * @param serverId Server UUID. (required)
     * @return Description xml returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getDescriptionXml",
        summary = "Get Description Xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Description xml returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/description",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getDescriptionXml(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/description.xml : Get Description Xml.
     *
     * @param serverId Server UUID. (required)
     * @return Description xml returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getDescriptionXml2",
        summary = "Get Description Xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Description xml returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/description.xml",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getDescriptionXml2(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/icons/{fileName} : Gets a server icon.
     *
     * @param fileName The icon filename. (required)
     * @return Request processed. (status code 200)
     *         or Not Found. (status code 404)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getIcon",
        summary = "Gets a server icon.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request processed.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/icons/{fileName}",
        produces = { "image/*", "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getIcon(
        @Parameter(name = "fileName", description = "The icon filename.", required = true, in = ParameterIn.PATH) @PathVariable("fileName") String fileName
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/icons/{fileName} : Gets a server icon.
     *
     * @param serverId Server UUID. (required)
     * @param fileName The icon filename. (required)
     * @return Request processed. (status code 200)
     *         or Not Found. (status code 404)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getIconId",
        summary = "Gets a server icon.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request processed.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/icons/{fileName}",
        produces = { "image/*", "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getIconId(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId,
        @Parameter(name = "fileName", description = "The icon filename.", required = true, in = ParameterIn.PATH) @PathVariable("fileName") String fileName
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/MediaReceiverRegistrar : Gets Dlna media receiver registrar xml.
     *
     * @param serverId Server UUID. (required)
     * @return Dlna media receiver registrar xml returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getMediaReceiverRegistrar",
        summary = "Gets Dlna media receiver registrar xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dlna media receiver registrar xml returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/MediaReceiverRegistrar",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getMediaReceiverRegistrar(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar : Gets Dlna media receiver registrar xml.
     *
     * @param serverId Server UUID. (required)
     * @return Dlna media receiver registrar xml returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getMediaReceiverRegistrar2",
        summary = "Gets Dlna media receiver registrar xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dlna media receiver registrar xml returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getMediaReceiverRegistrar2(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml : Gets Dlna media receiver registrar xml.
     *
     * @param serverId Server UUID. (required)
     * @return Dlna media receiver registrar xml returned. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "getMediaReceiverRegistrar3",
        summary = "Gets Dlna media receiver registrar xml.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dlna media receiver registrar xml returned.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getMediaReceiverRegistrar3(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/Profiles/{profileId} : Gets a single profile.
     *
     * @param profileId Profile Id. (required)
     * @return Device profile returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Device profile not found. (status code 404)
     */
    @Operation(
        operationId = "getProfile",
        summary = "Gets a single profile.",
        tags = { "Dlna" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Device profile returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceProfile.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = DeviceProfile.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = DeviceProfile.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Device profile not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/Profiles/{profileId}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<DeviceProfile> getProfile(
        @Parameter(name = "profileId", description = "Profile Id.", required = true, in = ParameterIn.PATH) @PathVariable("profileId") String profileId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"EnableSingleAlbumArtLimit\" : true, \"ManufacturerUrl\" : \"ManufacturerUrl\", \"MusicStreamingTranscodingBitrate\" : 9, \"AlbumArtPn\" : \"AlbumArtPn\", \"TranscodingProfiles\" : [ { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" }, { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" } ], \"Identification\" : { \"ManufacturerUrl\" : \"ManufacturerUrl\", \"ModelNumber\" : \"ModelNumber\", \"ModelUrl\" : \"ModelUrl\", \"ModelName\" : \"ModelName\", \"SerialNumber\" : \"SerialNumber\", \"FriendlyName\" : \"FriendlyName\", \"Headers\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"Manufacturer\" : \"Manufacturer\", \"ModelDescription\" : \"ModelDescription\" }, \"MaxStreamingBitrate\" : 7, \"IgnoreTranscodeByteRangeRequests\" : true, \"Name\" : \"Name\", \"ResponseProfiles\" : [ { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" }, { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" } ], \"ModelUrl\" : \"ModelUrl\", \"MaxStaticBitrate\" : 5, \"Manufacturer\" : \"Manufacturer\", \"ProtocolInfo\" : \"ProtocolInfo\", \"RequiresPlainVideoItems\" : true, \"ModelDescription\" : \"ModelDescription\", \"MaxAlbumArtWidth\" : 6, \"ModelNumber\" : \"ModelNumber\", \"XmlRootAttributes\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"ModelName\" : \"ModelName\", \"FriendlyName\" : \"FriendlyName\", \"MaxIconHeight\" : 1, \"RequiresPlainFolders\" : true, \"EnableSingleSubtitleLimit\" : true, \"SubtitleProfiles\" : [ { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" }, { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" } ], \"MaxAlbumArtHeight\" : 0, \"EnableAlbumArtInDidl\" : true, \"EnableMSMediaReceiverRegistrar\" : true, \"CodecProfiles\" : [ { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"SerialNumber\" : \"SerialNumber\", \"SupportedMediaTypes\" : \"SupportedMediaTypes\", \"SonyAggregationFlags\" : \"SonyAggregationFlags\", \"MaxIconWidth\" : 5, \"UserId\" : \"UserId\", \"TimelineOffsetSeconds\" : 3, \"ContainerProfiles\" : [ { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"DirectPlayProfiles\" : [ { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" }, { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" } ], \"MaxStaticMusicBitrate\" : 2, \"Id\" : \"Id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"EnableSingleAlbumArtLimit\" : true, \"ManufacturerUrl\" : \"ManufacturerUrl\", \"MusicStreamingTranscodingBitrate\" : 9, \"AlbumArtPn\" : \"AlbumArtPn\", \"TranscodingProfiles\" : [ { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" }, { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" } ], \"Identification\" : { \"ManufacturerUrl\" : \"ManufacturerUrl\", \"ModelNumber\" : \"ModelNumber\", \"ModelUrl\" : \"ModelUrl\", \"ModelName\" : \"ModelName\", \"SerialNumber\" : \"SerialNumber\", \"FriendlyName\" : \"FriendlyName\", \"Headers\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"Manufacturer\" : \"Manufacturer\", \"ModelDescription\" : \"ModelDescription\" }, \"MaxStreamingBitrate\" : 7, \"IgnoreTranscodeByteRangeRequests\" : true, \"Name\" : \"Name\", \"ResponseProfiles\" : [ { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" }, { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" } ], \"ModelUrl\" : \"ModelUrl\", \"MaxStaticBitrate\" : 5, \"Manufacturer\" : \"Manufacturer\", \"ProtocolInfo\" : \"ProtocolInfo\", \"RequiresPlainVideoItems\" : true, \"ModelDescription\" : \"ModelDescription\", \"MaxAlbumArtWidth\" : 6, \"ModelNumber\" : \"ModelNumber\", \"XmlRootAttributes\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"ModelName\" : \"ModelName\", \"FriendlyName\" : \"FriendlyName\", \"MaxIconHeight\" : 1, \"RequiresPlainFolders\" : true, \"EnableSingleSubtitleLimit\" : true, \"SubtitleProfiles\" : [ { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" }, { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" } ], \"MaxAlbumArtHeight\" : 0, \"EnableAlbumArtInDidl\" : true, \"EnableMSMediaReceiverRegistrar\" : true, \"CodecProfiles\" : [ { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"SerialNumber\" : \"SerialNumber\", \"SupportedMediaTypes\" : \"SupportedMediaTypes\", \"SonyAggregationFlags\" : \"SonyAggregationFlags\", \"MaxIconWidth\" : 5, \"UserId\" : \"UserId\", \"TimelineOffsetSeconds\" : 3, \"ContainerProfiles\" : [ { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"DirectPlayProfiles\" : [ { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" }, { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" } ], \"MaxStaticMusicBitrate\" : 2, \"Id\" : \"Id\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"EnableSingleAlbumArtLimit\" : true, \"ManufacturerUrl\" : \"ManufacturerUrl\", \"MusicStreamingTranscodingBitrate\" : 9, \"AlbumArtPn\" : \"AlbumArtPn\", \"TranscodingProfiles\" : [ { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" }, { \"BreakOnNonKeyFrames\" : true, \"EnableSubtitlesInManifest\" : true, \"CopyTimestamps\" : true, \"MinSegments\" : 2, \"EnableMpegtsM2TsMode\" : true, \"MaxAudioChannels\" : \"MaxAudioChannels\", \"VideoCodec\" : \"VideoCodec\", \"Container\" : \"Container\", \"EstimateContentLength\" : true, \"SegmentLength\" : 4, \"Protocol\" : \"Protocol\", \"AudioCodec\" : \"AudioCodec\" } ], \"Identification\" : { \"ManufacturerUrl\" : \"ManufacturerUrl\", \"ModelNumber\" : \"ModelNumber\", \"ModelUrl\" : \"ModelUrl\", \"ModelName\" : \"ModelName\", \"SerialNumber\" : \"SerialNumber\", \"FriendlyName\" : \"FriendlyName\", \"Headers\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"Manufacturer\" : \"Manufacturer\", \"ModelDescription\" : \"ModelDescription\" }, \"MaxStreamingBitrate\" : 7, \"IgnoreTranscodeByteRangeRequests\" : true, \"Name\" : \"Name\", \"ResponseProfiles\" : [ { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" }, { \"Container\" : \"Container\", \"OrgPn\" : \"OrgPn\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"MimeType\" : \"MimeType\" } ], \"ModelUrl\" : \"ModelUrl\", \"MaxStaticBitrate\" : 5, \"Manufacturer\" : \"Manufacturer\", \"ProtocolInfo\" : \"ProtocolInfo\", \"RequiresPlainVideoItems\" : true, \"ModelDescription\" : \"ModelDescription\", \"MaxAlbumArtWidth\" : 6, \"ModelNumber\" : \"ModelNumber\", \"XmlRootAttributes\" : [ { \"Value\" : \"Value\", \"Name\" : \"Name\" }, { \"Value\" : \"Value\", \"Name\" : \"Name\" } ], \"ModelName\" : \"ModelName\", \"FriendlyName\" : \"FriendlyName\", \"MaxIconHeight\" : 1, \"RequiresPlainFolders\" : true, \"EnableSingleSubtitleLimit\" : true, \"SubtitleProfiles\" : [ { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" }, { \"Container\" : \"Container\", \"Format\" : \"Format\", \"Language\" : \"Language\", \"DidlMode\" : \"DidlMode\" } ], \"MaxAlbumArtHeight\" : 0, \"EnableAlbumArtInDidl\" : true, \"EnableMSMediaReceiverRegistrar\" : true, \"CodecProfiles\" : [ { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Codec\" : \"Codec\", \"Container\" : \"Container\", \"ApplyConditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ], \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"SerialNumber\" : \"SerialNumber\", \"SupportedMediaTypes\" : \"SupportedMediaTypes\", \"SonyAggregationFlags\" : \"SonyAggregationFlags\", \"MaxIconWidth\" : 5, \"UserId\" : \"UserId\", \"TimelineOffsetSeconds\" : 3, \"ContainerProfiles\" : [ { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] }, { \"Container\" : \"Container\", \"Conditions\" : [ { \"IsRequired\" : true, \"Value\" : \"Value\" }, { \"IsRequired\" : true, \"Value\" : \"Value\" } ] } ], \"DirectPlayProfiles\" : [ { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" }, { \"Container\" : \"Container\", \"VideoCodec\" : \"VideoCodec\", \"AudioCodec\" : \"AudioCodec\" } ], \"MaxStaticMusicBitrate\" : 2, \"Id\" : \"Id\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Dlna/ProfileInfos : Get profile infos.
     *
     * @return Device profile infos returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getProfileInfos",
        summary = "Get profile infos.",
        tags = { "Dlna" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Device profile infos returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DeviceProfileInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = DeviceProfileInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = DeviceProfileInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Dlna/ProfileInfos",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<DeviceProfileInfo>> getProfileInfos(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Id\" : \"Id\", \"Name\" : \"Name\" }, { \"Id\" : \"Id\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Dlna/{serverId}/ConnectionManager/Control : Process a connection manager control request.
     *
     * @param serverId Server UUID. (required)
     * @return Request processed. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "processConnectionManagerControlRequest",
        summary = "Process a connection manager control request.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request processed.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Dlna/{serverId}/ConnectionManager/Control",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> processConnectionManagerControlRequest(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Dlna/{serverId}/ContentDirectory/Control : Process a content directory control request.
     *
     * @param serverId Server UUID. (required)
     * @return Request processed. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "processContentDirectoryControlRequest",
        summary = "Process a content directory control request.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request processed.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Dlna/{serverId}/ContentDirectory/Control",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> processContentDirectoryControlRequest(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Dlna/{serverId}/MediaReceiverRegistrar/Control : Process a media receiver registrar control request.
     *
     * @param serverId Server UUID. (required)
     * @return Request processed. (status code 200)
     *         or DLNA is disabled. (status code 503)
     */
    @Operation(
        operationId = "processMediaReceiverRegistrarControlRequest",
        summary = "Process a media receiver registrar control request.",
        tags = { "DlnaServer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request processed.", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "503", description = "DLNA is disabled.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Dlna/{serverId}/MediaReceiverRegistrar/Control",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> processMediaReceiverRegistrarControlRequest(
        @Parameter(name = "serverId", description = "Server UUID.", required = true, in = ParameterIn.PATH) @PathVariable("serverId") String serverId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Dlna/Profiles/{profileId} : Updates a profile.
     *
     * @param profileId Profile id. (required)
     * @param deviceProfile Device profile. (optional)
     * @return Device profile updated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Device profile not found. (status code 404)
     */
    @Operation(
        operationId = "updateProfile",
        summary = "Updates a profile.",
        tags = { "Dlna" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Device profile updated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Device profile not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Dlna/Profiles/{profileId}",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" },
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> updateProfile(
        @Parameter(name = "profileId", description = "Profile id.", required = true, in = ParameterIn.PATH) @PathVariable("profileId") String profileId,
        @Parameter(name = "DeviceProfile", description = "Device profile.") @Valid @RequestBody(required = false) DeviceProfile deviceProfile
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
