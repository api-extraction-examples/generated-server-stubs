/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.DefaultDirectoryBrowserInfoDto;
import org.openapitools.model.FileSystemEntryInfo;
import org.openapitools.model.ProblemDetails;
import org.openapitools.model.ValidatePathDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:51:28.311925-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Environment", description = "the Environment API")
public interface EnvironmentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /Environment/DefaultDirectoryBrowser : Get Default directory browser.
     *
     * @return Default directory browser returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getDefaultDirectoryBrowser",
        summary = "Get Default directory browser.",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Default directory browser returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DefaultDirectoryBrowserInfoDto.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = DefaultDirectoryBrowserInfoDto.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = DefaultDirectoryBrowserInfoDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Environment/DefaultDirectoryBrowser",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<DefaultDirectoryBrowserInfoDto> getDefaultDirectoryBrowser(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Path\" : \"Path\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "{ \"Path\" : \"Path\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "{ \"Path\" : \"Path\" }";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Environment/DirectoryContents : Gets the contents of a given directory in the file system.
     *
     * @param path The path. (required)
     * @param includeFiles An optional filter to include or exclude files from the results. true/false. (optional, default to false)
     * @param includeDirectories An optional filter to include or exclude folders from the results. true/false. (optional, default to false)
     * @return Directory contents returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getDirectoryContents",
        summary = "Gets the contents of a given directory in the file system.",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Directory contents returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FileSystemEntryInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = FileSystemEntryInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = FileSystemEntryInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Environment/DirectoryContents",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<FileSystemEntryInfo>> getDirectoryContents(
        @NotNull @Parameter(name = "path", description = "The path.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "path", required = true) String path,
        @Parameter(name = "includeFiles", description = "An optional filter to include or exclude files from the results. true/false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeFiles", required = false, defaultValue = "false") Boolean includeFiles,
        @Parameter(name = "includeDirectories", description = "An optional filter to include or exclude folders from the results. true/false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeDirectories", required = false, defaultValue = "false") Boolean includeDirectories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Path\" : \"Path\", \"Name\" : \"Name\" }, { \"Path\" : \"Path\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Path\" : \"Path\", \"Name\" : \"Name\" }, { \"Path\" : \"Path\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Path\" : \"Path\", \"Name\" : \"Name\" }, { \"Path\" : \"Path\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Environment/Drives : Gets available drives from the server&#39;s file system.
     *
     * @return List of entries returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getDrives",
        summary = "Gets available drives from the server's file system.",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of entries returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FileSystemEntryInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = FileSystemEntryInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = FileSystemEntryInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Environment/Drives",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<FileSystemEntryInfo>> getDrives(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Path\" : \"Path\", \"Name\" : \"Name\" }, { \"Path\" : \"Path\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Path\" : \"Path\", \"Name\" : \"Name\" }, { \"Path\" : \"Path\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Path\" : \"Path\", \"Name\" : \"Name\" }, { \"Path\" : \"Path\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Environment/NetworkShares : Gets network paths.
     *
     * @return Empty array returned. (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "getNetworkShares",
        summary = "Gets network paths.",
        deprecated = true,
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Empty array returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FileSystemEntryInfo.class))),
                @Content(mediaType = "application/json; profile=CamelCase", array = @ArraySchema(schema = @Schema(implementation = FileSystemEntryInfo.class))),
                @Content(mediaType = "application/json; profile=PascalCase", array = @ArraySchema(schema = @Schema(implementation = FileSystemEntryInfo.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Environment/NetworkShares",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<List<FileSystemEntryInfo>> getNetworkShares(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"Path\" : \"Path\", \"Name\" : \"Name\" }, { \"Path\" : \"Path\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="CamelCase""))) {
                    String exampleString = "[ { \"Path\" : \"Path\", \"Name\" : \"Name\" }, { \"Path\" : \"Path\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="CamelCase"", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; profile="PascalCase""))) {
                    String exampleString = "[ { \"Path\" : \"Path\", \"Name\" : \"Name\" }, { \"Path\" : \"Path\", \"Name\" : \"Name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json; profile="PascalCase"", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /Environment/ParentPath : Gets the parent path of a given path.
     *
     * @param path The path. (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getParentPath",
        summary = "Gets the parent path of a given path.",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Environment/ParentPath",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" }
    )
    
    default ResponseEntity<String> getParentPath(
        @NotNull @Parameter(name = "path", description = "The path.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "path", required = true) String path
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /Environment/ValidatePath : Validates path.
     *
     * @param validatePathDto Validate request object. (required)
     * @return Path validated. (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Path not found. (status code 404)
     */
    @Operation(
        operationId = "validatePath",
        summary = "Validates path.",
        tags = { "Environment" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Path validated."),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Path not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=CamelCase", schema = @Schema(implementation = ProblemDetails.class)),
                @Content(mediaType = "application/json; profile=PascalCase", schema = @Schema(implementation = ProblemDetails.class))
            })
        },
        security = {
            @SecurityRequirement(name = "CustomAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Environment/ValidatePath",
        produces = { "application/json", "application/json; profile=CamelCase", "application/json; profile=PascalCase" },
        consumes = { "application/*+json", "application/json", "text/json" }
    )
    
    default ResponseEntity<Void> validatePath(
        @Parameter(name = "ValidatePathDto", description = "Validate request object.", required = true) @Valid @RequestBody ValidatePathDto validatePathDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
