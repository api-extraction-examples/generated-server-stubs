/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ArticleArticleIdContentGet200Response;
import org.openapitools.model.ArticleArticleIdFansGet200Response;
import org.openapitools.model.ArticleArticleIdGet200Response;
import org.openapitools.model.ArticleArticleIdMarkdownGet200Response;
import org.openapitools.model.ArticleArticleIdRelatedGet200Response;
import org.openapitools.model.ArticleArticleIdResponsesGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:18.237558-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Article", description = "the Article API")
public interface ArticleApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /article/{article_id}/content : Get Article&#39;s Content
     * Returns the content of an article/story, for the corresponding &#x60;article_id&#x60; 
     *
     * @param articleId It&#39;s a unique hash id assigned to every Medium Article. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "articleArticleIdContentGet",
        summary = "Get Article's Content",
        description = "Returns the content of an article/story, for the corresponding `article_id` ",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticleArticleIdContentGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/article/{article_id}/content",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ArticleArticleIdContentGet200Response> articleArticleIdContentGet(
        @Parameter(name = "article_id", description = "It's a unique hash id assigned to every Medium Article.", required = true, in = ParameterIn.PATH) @PathVariable("article_id") String articleId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"content\" : \"Article title\nArticle Subtitle\nArticle Content ....\n\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /article/{article_id}/fans : Get Article Fans
     * Returns a list of &#x60;user_ids&#x60; of the people who clapped on the article (a.k.a &#x60;voters&#x60;). 
     *
     * @param articleId It&#39;s a unique hash id assigned to every Medium Article. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "articleArticleIdFansGet",
        summary = "Get Article Fans",
        description = "Returns a list of `user_ids` of the people who clapped on the article (a.k.a `voters`). ",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticleArticleIdFansGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/article/{article_id}/fans",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ArticleArticleIdFansGet200Response> articleArticleIdFansGet(
        @Parameter(name = "article_id", description = "It's a unique hash id assigned to every Medium Article.", required = true, in = ParameterIn.PATH) @PathVariable("article_id") String articleId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"article_id\" : \"67fa62fc1971\", \"voters\" : [ \"fa40650a485\", \"fa40650a485\" ], \"count\" : 145 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /article/{article_id} : Get Article Info
     * Returns the article related information such as *Title, Subtitle, Tags,  Topics* (assigned by Medium), *Publication, Published date and time,  Clap Count, Voter Count, Word Count, Reading Time, Language, etc…* 
     *
     * @param articleId It&#39;s a unique hash id assigned to every Medium Article. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "articleArticleIdGet",
        summary = "Get Article Info",
        description = "Returns the article related information such as *Title, Subtitle, Tags,  Topics* (assigned by Medium), *Publication, Published date and time,  Clap Count, Voter Count, Word Count, Reading Time, Language, etc…* ",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticleArticleIdGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/article/{article_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ArticleArticleIdGet200Response> articleArticleIdGet(
        @Parameter(name = "article_id", description = "It's a unique hash id assigned to every Medium Article.", required = true, in = ParameterIn.PATH) @PathVariable("article_id") String articleId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"is_locked\" : true, \"reading_time\" : 3.5720125786164, \"responses_count\" : 10, \"voters\" : 3, \"author\" : \"1985b61817c3\", \"image_url\" : \"https://miro.medium.com/1*W0wM9xIeeIR3_Oo0E_thaA.png\", \"is_series\" : false, \"topics\" : [ \"mental-health\", \"mental-health\" ], \"title\" : \"4 Tips to Strengthen Your Bonds — Now\", \"url\" : \"https://medium.com/age-of-awareness/re-energizing-your-relationship-in-the-midst-of-a-crisis-f06086080568\", \"last_modified_at\" : \"2021-05-28 04:22:48\", \"tags\" : [ \"relationships\", \"relationships\" ], \"publication_id\" : \"e7040e67514c\", \"word_count\" : 845, \"subtitle\" : \"Re-energize your relationship in the midst of a crisis\", \"id\" : \"f06086080568\", \"lang\" : \"en\", \"published_at\" : \"2020-08-25 11:08:18\", \"claps\" : 53 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /article/{article_id}/markdown : Get Article&#39;s Markdown
     * Returns the markdown of an article/story from Medium, for the corresponding &#x60;article_id&#x60; 
     *
     * @param articleId It&#39;s a unique hash id assigned to every Medium Article. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "articleArticleIdMarkdownGet",
        summary = "Get Article's Markdown",
        description = "Returns the markdown of an article/story from Medium, for the corresponding `article_id` ",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticleArticleIdMarkdownGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/article/{article_id}/markdown",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ArticleArticleIdMarkdownGet200Response> articleArticleIdMarkdownGet(
        @Parameter(name = "article_id", description = "It's a unique hash id assigned to every Medium Article.", required = true, in = ParameterIn.PATH) @PathVariable("article_id") String articleId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"markdown\" : \"# Article title\n## Article Subtitle\nArticle **Content** with lot of _markups_ ....\n![Images Alt](Image URL)\n\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /article/{article_id}/related : Get Related Articles
     * Returns a list of &#x60;article_ids&#x60; of the related posts. (Length &#x3D; 5)  **Note:** If the given article is self-published, related posts will belong to the same author,  else related posts will belong to the publication in which the article is published. 
     *
     * @param articleId It&#39;s a unique hash id assigned to every Medium Article. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "articleArticleIdRelatedGet",
        summary = "Get Related Articles",
        description = "Returns a list of `article_ids` of the related posts. (Length = 5)  **Note:** If the given article is self-published, related posts will belong to the same author,  else related posts will belong to the publication in which the article is published. ",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticleArticleIdRelatedGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/article/{article_id}/related",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ArticleArticleIdRelatedGet200Response> articleArticleIdRelatedGet(
        @Parameter(name = "article_id", description = "It's a unique hash id assigned to every Medium Article.", required = true, in = ParameterIn.PATH) @PathVariable("article_id") String articleId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"related_articles\" : [ \"f393206c6626\", \"f393206c6626\" ], \"id\" : \"67fa62fc1971\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /article/{article_id}/responses : Get Article Responses
     * Returns a list of responses (&#x60;response_ids&#x60;, same as &#x60;article_ids&#x60;) for a given article (&#x60;article_id&#x60;) Note: To see the content of the response, use the \&quot;Get Article&#39;s Content\&quot; endpoint 
     *
     * @param articleId It&#39;s a unique hash id assigned to every Medium Article. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "articleArticleIdResponsesGet",
        summary = "Get Article Responses",
        description = "Returns a list of responses (`response_ids`, same as `article_ids`) for a given article (`article_id`) Note: To see the content of the response, use the \"Get Article's Content\" endpoint ",
        tags = { "Article" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArticleArticleIdResponsesGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/article/{article_id}/responses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ArticleArticleIdResponsesGet200Response> articleArticleIdResponsesGet(
        @Parameter(name = "article_id", description = "It's a unique hash id assigned to every Medium Article.", required = true, in = ParameterIn.PATH) @PathVariable("article_id") String articleId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"responses\" : [ \"a9bbc22aa1e6\", \"a9bbc22aa1e6\" ], \"id\" : \"67fa62fc1971\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
