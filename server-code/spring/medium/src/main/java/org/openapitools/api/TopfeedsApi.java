/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.TopfeedsTagModeGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:18.237558-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "Misc", description = "the Misc API")
public interface TopfeedsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /topfeeds/{tag}/{mode} : Get Topfeeds
     * Returns a list of &#x60;article_ids&#x60; (length: 25) for the given &#x60;tag&#x60; and &#x60;mode&#x60;. 
     *
     * @param tag It&#39;s a unique string, usually hyphen-separated, representing a class of content. (required)
     * @param mode Mode:    - &#x60;hot&#x60; : For getting trending articles   - &#x60;new&#x60; : For getting latest articles   - &#x60;top_year&#x60; : For getting best articles of the year   - &#x60;top_month&#x60; : For getting best articles of the month   - &#x60;top_week&#x60; : For getting best articles of the week   - &#x60;top_all_time&#x60;: For getting best article of all time  (required)
     * @param after To get the subsequent top feeds. (&#x60;after&#x60; &amp;lt; 250) (optional, default to 0)
     * @param count To limit the number of top feeds. (&#x60;count&#x60; &amp;lt; 25) (optional, default to 25)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "topfeedsTagModeGet",
        summary = "Get Topfeeds",
        description = "Returns a list of `article_ids` (length: 25) for the given `tag` and `mode`. ",
        tags = { "Misc" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TopfeedsTagModeGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/topfeeds/{tag}/{mode}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TopfeedsTagModeGet200Response> topfeedsTagModeGet(
        @Parameter(name = "tag", description = "It's a unique string, usually hyphen-separated, representing a class of content.", required = true, in = ParameterIn.PATH) @PathVariable("tag") String tag,
        @Parameter(name = "mode", description = "Mode:    - `hot` : For getting trending articles   - `new` : For getting latest articles   - `top_year` : For getting best articles of the year   - `top_month` : For getting best articles of the month   - `top_week` : For getting best articles of the week   - `top_all_time`: For getting best article of all time ", required = true, in = ParameterIn.PATH) @PathVariable("mode") String mode,
        @Parameter(name = "after", description = "To get the subsequent top feeds. (`after` &lt; 250)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "after", required = false, defaultValue = "0") Integer after,
        @Parameter(name = "count", description = "To limit the number of top feeds. (`count` &lt; 25)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false, defaultValue = "25") Integer count
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"topfeeds\" : [ \"b2076afc4930\", \"b2076afc4930\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
