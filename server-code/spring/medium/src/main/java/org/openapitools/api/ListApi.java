/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ListListIdArticlesGet200Response;
import org.openapitools.model.ListListIdGet200Response;
import org.openapitools.model.ListListIdResponsesGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:52:18.237558-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "List", description = "the List API")
public interface ListApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /list/{list_id}/articles : Get List Articles
     * Returns an array of &#x60;articles_ids&#x60; present in the given Medium List. 
     *
     * @param listId It&#39;s a unique hash id assigned to every Medium List. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listListIdArticlesGet",
        summary = "Get List Articles",
        description = "Returns an array of `articles_ids` present in the given Medium List. ",
        tags = { "List" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListListIdArticlesGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/list/{list_id}/articles",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListListIdArticlesGet200Response> listListIdArticlesGet(
        @Parameter(name = "list_id", description = "It's a unique hash id assigned to every Medium List.", required = true, in = ParameterIn.PATH) @PathVariable("list_id") String listId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"list_articles\" : [ \"90a01549d8db\", \"90a01549d8db\" ], \"id\" : \"38f9e0f9bea6\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /list/{list_id} : Get List Info
     * Returns the list-related information such as *id, name, author, description,  thumbnail image url, creation datetime, last article inserted datetime,  number of articles in the list, claps, voters, and comments/responses*. 
     *
     * @param listId It&#39;s a unique hash id assigned to every Medium List. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listListIdGet",
        summary = "Get List Info",
        description = "Returns the list-related information such as *id, name, author, description,  thumbnail image url, creation datetime, last article inserted datetime,  number of articles in the list, claps, voters, and comments/responses*. ",
        tags = { "List" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListListIdGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/list/{list_id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListListIdGet200Response> listListIdGet(
        @Parameter(name = "list_id", description = "It's a unique hash id assigned to every Medium List.", required = true, in = ParameterIn.PATH) @PathVariable("list_id") String listId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"last_item_inserted_at\" : \"2023-03-12 06:53:02\", \"thumbnail\" : \"https://miro.medium.com/0*8f634a2860234802375db89fbfcccb5cc717f3fd.jpeg\", \"responses_count\" : 1, \"voters\" : 1, \"author\" : \"1985b61817c3\", \"count\" : 18, \"name\" : \"Medium API\", \"created_at\" : \"2023-03-12 06:46:46\", \"description\" : \"Collections of all the articles and resources related to Medium API\", \"id\" : \"38f9e0f9bea6\", \"claps\" : 48 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /list/{list_id}/responses : Get List Responses
     * Returns an array of &#x60;response_ids&#x60; of the comments (same as &#x60;article_ids&#x60;) on the given Medium List. 
     *
     * @param listId It&#39;s a unique hash id assigned to every Medium List. (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listListIdResponsesGet",
        summary = "Get List Responses",
        description = "Returns an array of `response_ids` of the comments (same as `article_ids`) on the given Medium List. ",
        tags = { "List" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListListIdResponsesGet200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/list/{list_id}/responses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListListIdResponsesGet200Response> listListIdResponsesGet(
        @Parameter(name = "list_id", description = "It's a unique hash id assigned to every Medium List.", required = true, in = ParameterIn.PATH) @PathVariable("list_id") String listId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"responses\" : [ \"f31a257b42e8\", \"f31a257b42e8\" ], \"id\" : \"38f9e0f9bea6\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
