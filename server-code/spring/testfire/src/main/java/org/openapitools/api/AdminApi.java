/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ChangePassword;
import org.openapitools.model.NewUser;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:55:43.475854-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "5. Admin", description = "Add and change user details")
public interface AdminApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /admin/addUser
     * Add new user
     *
     * @param authorization Authorization token (provided upon successful login) (required)
     * @param body Details of a new user including first name, last name, desired username and a password (required)
     * @return Successful operation (status code 200)
     *         or Unauthorized request (status code 400)
     *         or Unauthorized request (status code 401)
     *         or Error creating user (status code 500)
     */
    @Operation(
        operationId = "addUser",
        description = "Add new user",
        tags = { "5. Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Unauthorized request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized request"),
            @ApiResponse(responseCode = "500", description = "Error creating user")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/admin/addUser",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> addUser(
        @NotNull @Parameter(name = "Authorization", description = "Authorization token (provided upon successful login)", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true) String authorization,
        @Parameter(name = "body", description = "Details of a new user including first name, last name, desired username and a password", required = true) @Valid @RequestBody NewUser body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /admin/changePassword
     * Change user password
     *
     * @param authorization Authorization token (provided upon successful login) (required)
     * @param body Information about the user password to be changed including id and new password (required)
     * @return Successful operation (status code 200)
     *         or Unauthorized request (status code 400)
     *         or Unauthorized request (status code 401)
     *         or Error in changing the username password (status code 500)
     */
    @Operation(
        operationId = "changePassword",
        description = "Change user password",
        tags = { "5. Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Unauthorized request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized request"),
            @ApiResponse(responseCode = "500", description = "Error in changing the username password")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/admin/changePassword",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> changePassword(
        @NotNull @Parameter(name = "Authorization", description = "Authorization token (provided upon successful login)", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true) String authorization,
        @Parameter(name = "body", description = "Information about the user password to be changed including id and new password", required = true) @Valid @RequestBody ChangePassword body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
