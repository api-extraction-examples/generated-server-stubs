/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Login;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:55:43.475854-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "1. Login", description = "Login mechanism")
public interface LoginApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /login : Check if any user is logged in
     * If a user is loggedin the username will be returned
     *
     * @param authorization Authorization token (provided upon successful login) (required)
     * @return Logged in (status code 200)
     *         or Logged out (status code 401)
     */
    @Operation(
        operationId = "checkLogin",
        summary = "Check if any user is logged in",
        description = "If a user is loggedin the username will be returned",
        tags = { "1. Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Logged in"),
            @ApiResponse(responseCode = "401", description = "Logged out")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/login"
    )
    
    default ResponseEntity<Void> checkLogin(
        @NotNull @Parameter(name = "Authorization", description = "Authorization token (provided upon successful login)", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true) String authorization
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /login : Login method
     * After a successful login a token is returned. This is a Bearer token. To authenticate with it use the Authorization header and set value to Bearer empty space and the token value.
     *
     * @param body Username and password combination to allow users to log-in (required)
     * @return Success message when login is complete (status code 200)
     *         or Bad parameters: Please check provided values (status code 400)
     *         or Internal server error: Please see error message or logs for details (status code 500)
     */
    @Operation(
        operationId = "login",
        summary = "Login method",
        description = "After a successful login a token is returned. This is a Bearer token. To authenticate with it use the Authorization header and set value to Bearer empty space and the token value.",
        tags = { "1. Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success message when login is complete"),
            @ApiResponse(responseCode = "400", description = "Bad parameters: Please check provided values"),
            @ApiResponse(responseCode = "500", description = "Internal server error: Please see error message or logs for details")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/login",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> login(
        @Parameter(name = "body", description = "Username and password combination to allow users to log-in", required = true) @Valid @RequestBody Login body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
