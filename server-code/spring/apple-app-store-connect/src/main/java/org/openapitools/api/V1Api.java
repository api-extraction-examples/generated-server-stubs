/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AgeRatingDeclarationResponse;
import org.openapitools.model.AgeRatingDeclarationUpdateRequest;
import org.openapitools.model.AppBetaTestersLinkagesRequest;
import org.openapitools.model.AppCategoriesResponse;
import org.openapitools.model.AppCategoryResponse;
import org.openapitools.model.AppEncryptionDeclarationBuildsLinkagesRequest;
import org.openapitools.model.AppEncryptionDeclarationResponse;
import org.openapitools.model.AppEncryptionDeclarationsResponse;
import org.openapitools.model.AppInfoLocalizationCreateRequest;
import org.openapitools.model.AppInfoLocalizationResponse;
import org.openapitools.model.AppInfoLocalizationUpdateRequest;
import org.openapitools.model.AppInfoLocalizationsResponse;
import org.openapitools.model.AppInfoResponse;
import org.openapitools.model.AppInfoUpdateRequest;
import org.openapitools.model.AppInfosResponse;
import org.openapitools.model.AppPreOrderCreateRequest;
import org.openapitools.model.AppPreOrderResponse;
import org.openapitools.model.AppPreOrderUpdateRequest;
import org.openapitools.model.AppPreviewCreateRequest;
import org.openapitools.model.AppPreviewResponse;
import org.openapitools.model.AppPreviewSetAppPreviewsLinkagesRequest;
import org.openapitools.model.AppPreviewSetAppPreviewsLinkagesResponse;
import org.openapitools.model.AppPreviewSetCreateRequest;
import org.openapitools.model.AppPreviewSetResponse;
import org.openapitools.model.AppPreviewSetsResponse;
import org.openapitools.model.AppPreviewUpdateRequest;
import org.openapitools.model.AppPreviewsResponse;
import org.openapitools.model.AppPricePointResponse;
import org.openapitools.model.AppPricePointsResponse;
import org.openapitools.model.AppPriceResponse;
import org.openapitools.model.AppPriceTierResponse;
import org.openapitools.model.AppPriceTiersResponse;
import org.openapitools.model.AppPricesResponse;
import org.openapitools.model.AppResponse;
import org.openapitools.model.AppScreenshotCreateRequest;
import org.openapitools.model.AppScreenshotResponse;
import org.openapitools.model.AppScreenshotSetAppScreenshotsLinkagesRequest;
import org.openapitools.model.AppScreenshotSetAppScreenshotsLinkagesResponse;
import org.openapitools.model.AppScreenshotSetCreateRequest;
import org.openapitools.model.AppScreenshotSetResponse;
import org.openapitools.model.AppScreenshotSetsResponse;
import org.openapitools.model.AppScreenshotUpdateRequest;
import org.openapitools.model.AppScreenshotsResponse;
import org.openapitools.model.AppStoreReviewAttachmentCreateRequest;
import org.openapitools.model.AppStoreReviewAttachmentResponse;
import org.openapitools.model.AppStoreReviewAttachmentUpdateRequest;
import org.openapitools.model.AppStoreReviewAttachmentsResponse;
import org.openapitools.model.AppStoreReviewDetailCreateRequest;
import org.openapitools.model.AppStoreReviewDetailResponse;
import org.openapitools.model.AppStoreReviewDetailUpdateRequest;
import org.openapitools.model.AppStoreVersionBuildLinkageRequest;
import org.openapitools.model.AppStoreVersionBuildLinkageResponse;
import org.openapitools.model.AppStoreVersionCreateRequest;
import org.openapitools.model.AppStoreVersionLocalizationCreateRequest;
import org.openapitools.model.AppStoreVersionLocalizationResponse;
import org.openapitools.model.AppStoreVersionLocalizationUpdateRequest;
import org.openapitools.model.AppStoreVersionLocalizationsResponse;
import org.openapitools.model.AppStoreVersionPhasedReleaseCreateRequest;
import org.openapitools.model.AppStoreVersionPhasedReleaseResponse;
import org.openapitools.model.AppStoreVersionPhasedReleaseUpdateRequest;
import org.openapitools.model.AppStoreVersionResponse;
import org.openapitools.model.AppStoreVersionSubmissionCreateRequest;
import org.openapitools.model.AppStoreVersionSubmissionResponse;
import org.openapitools.model.AppStoreVersionUpdateRequest;
import org.openapitools.model.AppStoreVersionsResponse;
import org.openapitools.model.AppUpdateRequest;
import org.openapitools.model.AppsResponse;
import org.openapitools.model.BetaAppLocalizationCreateRequest;
import org.openapitools.model.BetaAppLocalizationResponse;
import org.openapitools.model.BetaAppLocalizationUpdateRequest;
import org.openapitools.model.BetaAppLocalizationsResponse;
import org.openapitools.model.BetaAppReviewDetailResponse;
import org.openapitools.model.BetaAppReviewDetailUpdateRequest;
import org.openapitools.model.BetaAppReviewDetailsResponse;
import org.openapitools.model.BetaAppReviewSubmissionCreateRequest;
import org.openapitools.model.BetaAppReviewSubmissionResponse;
import org.openapitools.model.BetaAppReviewSubmissionsResponse;
import org.openapitools.model.BetaBuildLocalizationCreateRequest;
import org.openapitools.model.BetaBuildLocalizationResponse;
import org.openapitools.model.BetaBuildLocalizationUpdateRequest;
import org.openapitools.model.BetaBuildLocalizationsResponse;
import org.openapitools.model.BetaGroupBetaTestersLinkagesRequest;
import org.openapitools.model.BetaGroupBetaTestersLinkagesResponse;
import org.openapitools.model.BetaGroupBuildsLinkagesRequest;
import org.openapitools.model.BetaGroupBuildsLinkagesResponse;
import org.openapitools.model.BetaGroupCreateRequest;
import org.openapitools.model.BetaGroupResponse;
import org.openapitools.model.BetaGroupUpdateRequest;
import org.openapitools.model.BetaGroupsResponse;
import org.openapitools.model.BetaLicenseAgreementResponse;
import org.openapitools.model.BetaLicenseAgreementUpdateRequest;
import org.openapitools.model.BetaLicenseAgreementsResponse;
import org.openapitools.model.BetaTesterAppsLinkagesRequest;
import org.openapitools.model.BetaTesterAppsLinkagesResponse;
import org.openapitools.model.BetaTesterBetaGroupsLinkagesRequest;
import org.openapitools.model.BetaTesterBetaGroupsLinkagesResponse;
import org.openapitools.model.BetaTesterBuildsLinkagesRequest;
import org.openapitools.model.BetaTesterBuildsLinkagesResponse;
import org.openapitools.model.BetaTesterCreateRequest;
import org.openapitools.model.BetaTesterInvitationCreateRequest;
import org.openapitools.model.BetaTesterInvitationResponse;
import org.openapitools.model.BetaTesterResponse;
import org.openapitools.model.BetaTestersResponse;
import org.openapitools.model.BuildAppEncryptionDeclarationLinkageRequest;
import org.openapitools.model.BuildAppEncryptionDeclarationLinkageResponse;
import org.openapitools.model.BuildBetaDetailResponse;
import org.openapitools.model.BuildBetaDetailUpdateRequest;
import org.openapitools.model.BuildBetaDetailsResponse;
import org.openapitools.model.BuildBetaGroupsLinkagesRequest;
import org.openapitools.model.BuildBetaNotificationCreateRequest;
import org.openapitools.model.BuildBetaNotificationResponse;
import org.openapitools.model.BuildIconsResponse;
import org.openapitools.model.BuildIndividualTestersLinkagesRequest;
import org.openapitools.model.BuildIndividualTestersLinkagesResponse;
import org.openapitools.model.BuildResponse;
import org.openapitools.model.BuildUpdateRequest;
import org.openapitools.model.BuildsResponse;
import org.openapitools.model.BundleIdCapabilitiesResponse;
import org.openapitools.model.BundleIdCapabilityCreateRequest;
import org.openapitools.model.BundleIdCapabilityResponse;
import org.openapitools.model.BundleIdCapabilityUpdateRequest;
import org.openapitools.model.BundleIdCreateRequest;
import org.openapitools.model.BundleIdResponse;
import org.openapitools.model.BundleIdUpdateRequest;
import org.openapitools.model.BundleIdsResponse;
import org.openapitools.model.CertificateCreateRequest;
import org.openapitools.model.CertificateResponse;
import org.openapitools.model.CertificatesResponse;
import org.openapitools.model.DeviceCreateRequest;
import org.openapitools.model.DeviceResponse;
import org.openapitools.model.DeviceUpdateRequest;
import org.openapitools.model.DevicesResponse;
import org.openapitools.model.DiagnosticLogsResponse;
import org.openapitools.model.DiagnosticSignaturesResponse;
import org.openapitools.model.EndUserLicenseAgreementCreateRequest;
import org.openapitools.model.EndUserLicenseAgreementResponse;
import org.openapitools.model.EndUserLicenseAgreementUpdateRequest;
import org.openapitools.model.ErrorResponse;
import org.openapitools.model.GameCenterEnabledVersionCompatibleVersionsLinkagesRequest;
import org.openapitools.model.GameCenterEnabledVersionCompatibleVersionsLinkagesResponse;
import org.openapitools.model.GameCenterEnabledVersionsResponse;
import org.openapitools.model.IdfaDeclarationCreateRequest;
import org.openapitools.model.IdfaDeclarationResponse;
import org.openapitools.model.IdfaDeclarationUpdateRequest;
import org.openapitools.model.InAppPurchaseResponse;
import org.openapitools.model.InAppPurchasesResponse;
import org.openapitools.model.PerfPowerMetricsResponse;
import org.openapitools.model.PreReleaseVersionsResponse;
import org.openapitools.model.PrereleaseVersionResponse;
import org.openapitools.model.ProfileCreateRequest;
import org.openapitools.model.ProfileResponse;
import org.openapitools.model.ProfilesResponse;
import org.openapitools.model.RoutingAppCoverageCreateRequest;
import org.openapitools.model.RoutingAppCoverageResponse;
import org.openapitools.model.RoutingAppCoverageUpdateRequest;
import org.openapitools.model.TerritoriesResponse;
import org.openapitools.model.TerritoryResponse;
import org.openapitools.model.UserInvitationCreateRequest;
import org.openapitools.model.UserInvitationResponse;
import org.openapitools.model.UserInvitationsResponse;
import org.openapitools.model.UserResponse;
import org.openapitools.model.UserUpdateRequest;
import org.openapitools.model.UserVisibleAppsLinkagesRequest;
import org.openapitools.model.UserVisibleAppsLinkagesResponse;
import org.openapitools.model.UsersResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-06T13:43:20.254092-04:00[America/Lower_Princes]")
@Validated
@Tag(name = "AgeRatingDeclarations", description = "the AgeRatingDeclarations API")
public interface V1Api {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PATCH /v1/ageRatingDeclarations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param ageRatingDeclarationUpdateRequest AgeRatingDeclaration representation (required)
     * @return Single AgeRatingDeclaration (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "ageRatingDeclarationsUpdateInstance",
        tags = { "AgeRatingDeclarations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AgeRatingDeclaration", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AgeRatingDeclarationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/ageRatingDeclarations/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AgeRatingDeclarationResponse> ageRatingDeclarationsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AgeRatingDeclarationUpdateRequest", description = "AgeRatingDeclaration representation", required = true) @Valid @RequestBody AgeRatingDeclarationUpdateRequest ageRatingDeclarationUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"alcoholTobaccoOrDrugUseOrReferences\" : \"NONE\", \"gamblingAndContests\" : true, \"gamblingSimulated\" : \"NONE\", \"sexualContentGraphicAndNudity\" : \"NONE\", \"violenceRealistic\" : \"NONE\", \"gambling\" : true, \"horrorOrFearThemes\" : \"NONE\", \"profanityOrCrudeHumor\" : \"NONE\", \"seventeenPlus\" : true, \"violenceRealisticProlongedGraphicOrSadistic\" : \"NONE\", \"contests\" : \"NONE\", \"matureOrSuggestiveThemes\" : \"NONE\", \"unrestrictedWebAccess\" : true, \"violenceCartoonOrFantasy\" : \"NONE\", \"medicalOrTreatmentInformation\" : \"NONE\", \"sexualContentOrNudity\" : \"NONE\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appCategories
     *
     * @param filterPlatforms filter by attribute &#39;platforms&#39; (optional)
     * @param existsParent filter by existence or non-existence of related &#39;parent&#39; (optional)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param limitSubcategories maximum number of related subcategories returned (when they are included) (optional)
     * @return List of AppCategories (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "appCategoriesGetCollection",
        tags = { "AppCategories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of AppCategories", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppCategoriesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appCategories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppCategoriesResponse> appCategoriesGetCollection(
        @Parameter(name = "filter[platforms]", description = "filter by attribute 'platforms'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[platforms]", required = false) List<String> filterPlatforms,
        @Parameter(name = "exists[parent]", description = "filter by existence or non-existence of related 'parent'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "exists[parent]", required = false) List<String> existsParent,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Max(50) @Parameter(name = "limit[subcategories]", description = "maximum number of related subcategories returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[subcategories]", required = false) Integer limitSubcategories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appCategories/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param limitSubcategories maximum number of related subcategories returned (when they are included) (optional)
     * @return Single AppCategory (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appCategoriesGetInstance",
        tags = { "AppCategories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppCategory", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppCategoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appCategories/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppCategoryResponse> appCategoriesGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Max(50) @Parameter(name = "limit[subcategories]", description = "maximum number of related subcategories returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[subcategories]", required = false) Integer limitSubcategories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appCategories/{id}/parent
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appCategoriesParentGetToOneRelated",
        tags = { "AppCategories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppCategoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appCategories/{id}/parent",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppCategoryResponse> appCategoriesParentGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appCategories/{id}/subcategories
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appCategoriesSubcategoriesGetToManyRelated",
        tags = { "AppCategories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppCategoriesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appCategories/{id}/subcategories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppCategoriesResponse> appCategoriesSubcategoriesGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appEncryptionDeclarations/{id}/app
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appEncryptionDeclarationsAppGetToOneRelated",
        tags = { "AppEncryptionDeclarations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appEncryptionDeclarations/{id}/app",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppResponse> appEncryptionDeclarationsAppGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appEncryptionDeclarations/{id}/relationships/builds
     *
     * @param id the id of the requested resource (required)
     * @param appEncryptionDeclarationBuildsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appEncryptionDeclarationsBuildsCreateToManyRelationship",
        tags = { "AppEncryptionDeclarations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appEncryptionDeclarations/{id}/relationships/builds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> appEncryptionDeclarationsBuildsCreateToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppEncryptionDeclarationBuildsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody AppEncryptionDeclarationBuildsLinkagesRequest appEncryptionDeclarationBuildsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appEncryptionDeclarations
     *
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return List of AppEncryptionDeclarations (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "appEncryptionDeclarationsGetCollection",
        tags = { "AppEncryptionDeclarations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of AppEncryptionDeclarations", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppEncryptionDeclarationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appEncryptionDeclarations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppEncryptionDeclarationsResponse> appEncryptionDeclarationsGetCollection(
        @Parameter(name = "filter[platform]", description = "filter by attribute 'platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[platform]", required = false) List<String> filterPlatform,
        @Parameter(name = "filter[app]", description = "filter by id(s) of related 'app'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[app]", required = false) List<String> filterApp,
        @Parameter(name = "filter[builds]", description = "filter by id(s) of related 'builds'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[builds]", required = false) List<String> filterBuilds,
        @Parameter(name = "fields[appEncryptionDeclarations]", description = "the fields to include for returned resources of type appEncryptionDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appEncryptionDeclarations]", required = false) List<String> fieldsAppEncryptionDeclarations,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"availableOnFrenchStore\" : true, \"documentType\" : \"documentType\", \"documentUrl\" : \"documentUrl\", \"containsThirdPartyCryptography\" : true, \"documentName\" : \"documentName\", \"exempt\" : true, \"usesEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"codeValue\" : \"codeValue\", \"containsProprietaryCryptography\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"availableOnFrenchStore\" : true, \"documentType\" : \"documentType\", \"documentUrl\" : \"documentUrl\", \"containsThirdPartyCryptography\" : true, \"documentName\" : \"documentName\", \"exempt\" : true, \"usesEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"codeValue\" : \"codeValue\", \"containsProprietaryCryptography\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appEncryptionDeclarations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Single AppEncryptionDeclaration (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appEncryptionDeclarationsGetInstance",
        tags = { "AppEncryptionDeclarations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppEncryptionDeclaration", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppEncryptionDeclarationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appEncryptionDeclarations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppEncryptionDeclarationResponse> appEncryptionDeclarationsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appEncryptionDeclarations]", description = "the fields to include for returned resources of type appEncryptionDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appEncryptionDeclarations]", required = false) List<String> fieldsAppEncryptionDeclarations,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"availableOnFrenchStore\" : true, \"documentType\" : \"documentType\", \"documentUrl\" : \"documentUrl\", \"containsThirdPartyCryptography\" : true, \"documentName\" : \"documentName\", \"exempt\" : true, \"usesEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"codeValue\" : \"codeValue\", \"containsProprietaryCryptography\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appInfoLocalizations
     *
     * @param appInfoLocalizationCreateRequest AppInfoLocalization representation (required)
     * @return Single AppInfoLocalization (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appInfoLocalizationsCreateInstance",
        tags = { "AppInfoLocalizations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppInfoLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppInfoLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appInfoLocalizations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppInfoLocalizationResponse> appInfoLocalizationsCreateInstance(
        @Parameter(name = "AppInfoLocalizationCreateRequest", description = "AppInfoLocalization representation", required = true) @Valid @RequestBody AppInfoLocalizationCreateRequest appInfoLocalizationCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appInfo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appInfos\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"subtitle\" : \"subtitle\", \"name\" : \"name\", \"privacyPolicyText\" : \"privacyPolicyText\", \"locale\" : \"locale\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appInfoLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appInfoLocalizationsDeleteInstance",
        tags = { "AppInfoLocalizations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appInfoLocalizations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appInfoLocalizationsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appInfoLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppInfoLocalizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return Single AppInfoLocalization (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appInfoLocalizationsGetInstance",
        tags = { "AppInfoLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppInfoLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppInfoLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appInfoLocalizations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppInfoLocalizationResponse> appInfoLocalizationsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appInfoLocalizations]", description = "the fields to include for returned resources of type appInfoLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appInfoLocalizations]", required = false) List<String> fieldsAppInfoLocalizations,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appInfo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appInfos\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"subtitle\" : \"subtitle\", \"name\" : \"name\", \"privacyPolicyText\" : \"privacyPolicyText\", \"locale\" : \"locale\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appInfoLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appInfoLocalizationUpdateRequest AppInfoLocalization representation (required)
     * @return Single AppInfoLocalization (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appInfoLocalizationsUpdateInstance",
        tags = { "AppInfoLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppInfoLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppInfoLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appInfoLocalizations/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppInfoLocalizationResponse> appInfoLocalizationsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppInfoLocalizationUpdateRequest", description = "AppInfoLocalization representation", required = true) @Valid @RequestBody AppInfoLocalizationUpdateRequest appInfoLocalizationUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appInfo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appInfos\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"subtitle\" : \"subtitle\", \"name\" : \"name\", \"privacyPolicyText\" : \"privacyPolicyText\", \"locale\" : \"locale\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appInfos/{id}/ageRatingDeclaration
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appInfosAgeRatingDeclarationGetToOneRelated",
        tags = { "AppInfos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AgeRatingDeclarationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appInfos/{id}/ageRatingDeclaration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AgeRatingDeclarationResponse> appInfosAgeRatingDeclarationGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[ageRatingDeclarations]", description = "the fields to include for returned resources of type ageRatingDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[ageRatingDeclarations]", required = false) List<String> fieldsAgeRatingDeclarations
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"alcoholTobaccoOrDrugUseOrReferences\" : \"NONE\", \"gamblingAndContests\" : true, \"gamblingSimulated\" : \"NONE\", \"sexualContentGraphicAndNudity\" : \"NONE\", \"violenceRealistic\" : \"NONE\", \"gambling\" : true, \"horrorOrFearThemes\" : \"NONE\", \"profanityOrCrudeHumor\" : \"NONE\", \"seventeenPlus\" : true, \"violenceRealisticProlongedGraphicOrSadistic\" : \"NONE\", \"contests\" : \"NONE\", \"matureOrSuggestiveThemes\" : \"NONE\", \"unrestrictedWebAccess\" : true, \"violenceCartoonOrFantasy\" : \"NONE\", \"medicalOrTreatmentInformation\" : \"NONE\", \"sexualContentOrNudity\" : \"NONE\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appInfos/{id}/appInfoLocalizations
     *
     * @param id the id of the requested resource (required)
     * @param filterLocale filter by attribute &#39;locale&#39; (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppInfoLocalizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appInfosAppInfoLocalizationsGetToManyRelated",
        tags = { "AppInfos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppInfoLocalizationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appInfos/{id}/appInfoLocalizations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppInfoLocalizationsResponse> appInfosAppInfoLocalizationsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "filter[locale]", description = "filter by attribute 'locale'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[locale]", required = false) List<String> filterLocale,
        @Parameter(name = "fields[appInfos]", description = "the fields to include for returned resources of type appInfos", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appInfos]", required = false) List<String> fieldsAppInfos,
        @Parameter(name = "fields[appInfoLocalizations]", description = "the fields to include for returned resources of type appInfoLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appInfoLocalizations]", required = false) List<String> fieldsAppInfoLocalizations,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"appInfo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appInfos\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"subtitle\" : \"subtitle\", \"name\" : \"name\", \"privacyPolicyText\" : \"privacyPolicyText\", \"locale\" : \"locale\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" }, { \"relationships\" : { \"appInfo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appInfos\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"subtitle\" : \"subtitle\", \"name\" : \"name\", \"privacyPolicyText\" : \"privacyPolicyText\", \"locale\" : \"locale\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appInfos/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @param fieldsAppInfoLocalizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param limitAppInfoLocalizations maximum number of related appInfoLocalizations returned (when they are included) (optional)
     * @return Single AppInfo (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appInfosGetInstance",
        tags = { "AppInfos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppInfo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppInfoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appInfos/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppInfoResponse> appInfosGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appInfos]", description = "the fields to include for returned resources of type appInfos", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appInfos]", required = false) List<String> fieldsAppInfos,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[ageRatingDeclarations]", description = "the fields to include for returned resources of type ageRatingDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[ageRatingDeclarations]", required = false) List<String> fieldsAgeRatingDeclarations,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories,
        @Parameter(name = "fields[appInfoLocalizations]", description = "the fields to include for returned resources of type appInfoLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appInfoLocalizations]", required = false) List<String> fieldsAppInfoLocalizations,
        @Max(50) @Parameter(name = "limit[appInfoLocalizations]", description = "maximum number of related appInfoLocalizations returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appInfoLocalizations]", required = false) Integer limitAppInfoLocalizations
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondaryCategory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primaryCategory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondarySubcategoryOne\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primarySubcategoryTwo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"ageRatingDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfoLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" }, { \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondarySubcategoryTwo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primarySubcategoryOne\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appInfos\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appInfos/{id}/primaryCategory
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appInfosPrimaryCategoryGetToOneRelated",
        tags = { "AppInfos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppCategoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appInfos/{id}/primaryCategory",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppCategoryResponse> appInfosPrimaryCategoryGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appInfos/{id}/primarySubcategoryOne
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appInfosPrimarySubcategoryOneGetToOneRelated",
        tags = { "AppInfos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppCategoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appInfos/{id}/primarySubcategoryOne",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppCategoryResponse> appInfosPrimarySubcategoryOneGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appInfos/{id}/primarySubcategoryTwo
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appInfosPrimarySubcategoryTwoGetToOneRelated",
        tags = { "AppInfos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppCategoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appInfos/{id}/primarySubcategoryTwo",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppCategoryResponse> appInfosPrimarySubcategoryTwoGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appInfos/{id}/secondaryCategory
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appInfosSecondaryCategoryGetToOneRelated",
        tags = { "AppInfos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppCategoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appInfos/{id}/secondaryCategory",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppCategoryResponse> appInfosSecondaryCategoryGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appInfos/{id}/secondarySubcategoryOne
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appInfosSecondarySubcategoryOneGetToOneRelated",
        tags = { "AppInfos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppCategoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appInfos/{id}/secondarySubcategoryOne",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppCategoryResponse> appInfosSecondarySubcategoryOneGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appInfos/{id}/secondarySubcategoryTwo
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appInfosSecondarySubcategoryTwoGetToOneRelated",
        tags = { "AppInfos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppCategoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appInfos/{id}/secondarySubcategoryTwo",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppCategoryResponse> appInfosSecondarySubcategoryTwoGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"parent\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"subcategories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appCategories\" }, { \"id\" : \"id\", \"type\" : \"appCategories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"platforms\" : [ null, null ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appInfos/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appInfoUpdateRequest AppInfo representation (required)
     * @return Single AppInfo (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appInfosUpdateInstance",
        tags = { "AppInfos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppInfo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppInfoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appInfos/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppInfoResponse> appInfosUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppInfoUpdateRequest", description = "AppInfo representation", required = true) @Valid @RequestBody AppInfoUpdateRequest appInfoUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondaryCategory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primaryCategory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondarySubcategoryOne\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primarySubcategoryTwo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"ageRatingDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfoLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" }, { \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondarySubcategoryTwo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primarySubcategoryOne\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appInfos\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appPreOrders
     *
     * @param appPreOrderCreateRequest AppPreOrder representation (required)
     * @return Single AppPreOrder (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appPreOrdersCreateInstance",
        tags = { "AppPreOrders" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppPreOrder", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreOrderResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appPreOrders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppPreOrderResponse> appPreOrdersCreateInstance(
        @Parameter(name = "AppPreOrderCreateRequest", description = "AppPreOrder representation", required = true) @Valid @RequestBody AppPreOrderCreateRequest appPreOrderCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"preOrderAvailableDate\" : \"2000-01-23\", \"appReleaseDate\" : \"2000-01-23\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appPreOrders/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appPreOrdersDeleteInstance",
        tags = { "AppPreOrders" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appPreOrders/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appPreOrdersDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPreOrders/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return Single AppPreOrder (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appPreOrdersGetInstance",
        tags = { "AppPreOrders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppPreOrder", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreOrderResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPreOrders/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPreOrderResponse> appPreOrdersGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appPreOrders]", description = "the fields to include for returned resources of type appPreOrders", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreOrders]", required = false) List<String> fieldsAppPreOrders,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"preOrderAvailableDate\" : \"2000-01-23\", \"appReleaseDate\" : \"2000-01-23\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appPreOrders/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appPreOrderUpdateRequest AppPreOrder representation (required)
     * @return Single AppPreOrder (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appPreOrdersUpdateInstance",
        tags = { "AppPreOrders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppPreOrder", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreOrderResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appPreOrders/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppPreOrderResponse> appPreOrdersUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppPreOrderUpdateRequest", description = "AppPreOrder representation", required = true) @Valid @RequestBody AppPreOrderUpdateRequest appPreOrderUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"preOrderAvailableDate\" : \"2000-01-23\", \"appReleaseDate\" : \"2000-01-23\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPreviewSets/{id}/appPreviews
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppPreviews the fields to include for returned resources of type appPreviews (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appPreviewSetsAppPreviewsGetToManyRelated",
        tags = { "AppPreviewSets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreviewsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPreviewSets/{id}/appPreviews",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPreviewsResponse> appPreviewSetsAppPreviewsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appPreviews]", description = "the fields to include for returned resources of type appPreviews", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreviews]", required = false) List<String> fieldsAppPreviews,
        @Parameter(name = "fields[appPreviewSets]", description = "the fields to include for returned resources of type appPreviewSets", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreviewSets]", required = false) List<String> fieldsAppPreviewSets,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" }, { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPreviewSets/{id}/relationships/appPreviews
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related linkages (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appPreviewSetsAppPreviewsGetToManyRelationship",
        tags = { "AppPreviewSets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related linkages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreviewSetAppPreviewsLinkagesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPreviewSets/{id}/relationships/appPreviews",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPreviewSetAppPreviewsLinkagesResponse> appPreviewSetsAppPreviewsGetToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPreviews\" }, { \"id\" : \"id\", \"type\" : \"appPreviews\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appPreviewSets/{id}/relationships/appPreviews
     *
     * @param id the id of the requested resource (required)
     * @param appPreviewSetAppPreviewsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appPreviewSetsAppPreviewsReplaceToManyRelationship",
        tags = { "AppPreviewSets" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appPreviewSets/{id}/relationships/appPreviews",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> appPreviewSetsAppPreviewsReplaceToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppPreviewSetAppPreviewsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody AppPreviewSetAppPreviewsLinkagesRequest appPreviewSetAppPreviewsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appPreviewSets
     *
     * @param appPreviewSetCreateRequest AppPreviewSet representation (required)
     * @return Single AppPreviewSet (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appPreviewSetsCreateInstance",
        tags = { "AppPreviewSets" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppPreviewSet", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreviewSetResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appPreviewSets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppPreviewSetResponse> appPreviewSetsCreateInstance(
        @Parameter(name = "AppPreviewSetCreateRequest", description = "AppPreviewSet representation", required = true) @Valid @RequestBody AppPreviewSetCreateRequest appPreviewSetCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appPreviews\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPreviews\" }, { \"id\" : \"id\", \"type\" : \"appPreviews\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalization\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" }, { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appPreviewSets/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appPreviewSetsDeleteInstance",
        tags = { "AppPreviewSets" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appPreviewSets/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appPreviewSetsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPreviewSets/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppPreviews the fields to include for returned resources of type appPreviews (optional)
     * @param limitAppPreviews maximum number of related appPreviews returned (when they are included) (optional)
     * @return Single AppPreviewSet (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appPreviewSetsGetInstance",
        tags = { "AppPreviewSets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppPreviewSet", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreviewSetResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPreviewSets/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPreviewSetResponse> appPreviewSetsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appPreviewSets]", description = "the fields to include for returned resources of type appPreviewSets", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreviewSets]", required = false) List<String> fieldsAppPreviewSets,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[appPreviews]", description = "the fields to include for returned resources of type appPreviews", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreviews]", required = false) List<String> fieldsAppPreviews,
        @Max(50) @Parameter(name = "limit[appPreviews]", description = "maximum number of related appPreviews returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appPreviews]", required = false) Integer limitAppPreviews
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appPreviews\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPreviews\" }, { \"id\" : \"id\", \"type\" : \"appPreviews\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalization\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" }, { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appPreviews
     *
     * @param appPreviewCreateRequest AppPreview representation (required)
     * @return Single AppPreview (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appPreviewsCreateInstance",
        tags = { "AppPreviews" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppPreview", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreviewResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appPreviews",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppPreviewResponse> appPreviewsCreateInstance(
        @Parameter(name = "AppPreviewCreateRequest", description = "AppPreview representation", required = true) @Valid @RequestBody AppPreviewCreateRequest appPreviewCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appPreviews/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appPreviewsDeleteInstance",
        tags = { "AppPreviews" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appPreviews/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appPreviewsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPreviews/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppPreviews the fields to include for returned resources of type appPreviews (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return Single AppPreview (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appPreviewsGetInstance",
        tags = { "AppPreviews" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppPreview", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreviewResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPreviews/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPreviewResponse> appPreviewsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appPreviews]", description = "the fields to include for returned resources of type appPreviews", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreviews]", required = false) List<String> fieldsAppPreviews,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appPreviews/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appPreviewUpdateRequest AppPreview representation (required)
     * @return Single AppPreview (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appPreviewsUpdateInstance",
        tags = { "AppPreviews" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppPreview", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreviewResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appPreviews/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppPreviewResponse> appPreviewsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppPreviewUpdateRequest", description = "AppPreview representation", required = true) @Valid @RequestBody AppPreviewUpdateRequest appPreviewUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPricePoints
     *
     * @param filterPriceTier filter by id(s) of related &#39;priceTier&#39; (optional)
     * @param filterTerritory filter by id(s) of related &#39;territory&#39; (optional)
     * @param fieldsAppPricePoints the fields to include for returned resources of type appPricePoints (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @return List of AppPricePoints (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "appPricePointsGetCollection",
        tags = { "AppPricePoints" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of AppPricePoints", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPricePointsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPricePoints",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPricePointsResponse> appPricePointsGetCollection(
        @Parameter(name = "filter[priceTier]", description = "filter by id(s) of related 'priceTier'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[priceTier]", required = false) List<String> filterPriceTier,
        @Parameter(name = "filter[territory]", description = "filter by id(s) of related 'territory'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[territory]", required = false) List<String> filterTerritory,
        @Parameter(name = "fields[appPricePoints]", description = "the fields to include for returned resources of type appPricePoints", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPricePoints]", required = false) List<String> fieldsAppPricePoints,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[territories]", description = "the fields to include for returned resources of type territories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[territories]", required = false) List<String> fieldsTerritories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"territories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"proceeds\" : \"proceeds\", \"customerPrice\" : \"customerPrice\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPricePoints\" }, { \"relationships\" : { \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"territories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"proceeds\" : \"proceeds\", \"customerPrice\" : \"customerPrice\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPricePoints\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPricePoints/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppPricePoints the fields to include for returned resources of type appPricePoints (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @return Single AppPricePoint (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appPricePointsGetInstance",
        tags = { "AppPricePoints" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppPricePoint", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPricePointResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPricePoints/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPricePointResponse> appPricePointsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appPricePoints]", description = "the fields to include for returned resources of type appPricePoints", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPricePoints]", required = false) List<String> fieldsAppPricePoints,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[territories]", description = "the fields to include for returned resources of type territories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[territories]", required = false) List<String> fieldsTerritories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"territories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"proceeds\" : \"proceeds\", \"customerPrice\" : \"customerPrice\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPricePoints\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPricePoints/{id}/territory
     *
     * @param id the id of the requested resource (required)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appPricePointsTerritoryGetToOneRelated",
        tags = { "AppPricePoints" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TerritoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPricePoints/{id}/territory",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TerritoryResponse> appPricePointsTerritoryGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[territories]", description = "the fields to include for returned resources of type territories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[territories]", required = false) List<String> fieldsTerritories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPriceTiers
     *
     * @param filterId filter by id(s) (optional)
     * @param fieldsAppPriceTiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppPricePoints the fields to include for returned resources of type appPricePoints (optional)
     * @param limitPricePoints maximum number of related pricePoints returned (when they are included) (optional)
     * @return List of AppPriceTiers (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "appPriceTiersGetCollection",
        tags = { "AppPriceTiers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of AppPriceTiers", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPriceTiersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPriceTiers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPriceTiersResponse> appPriceTiersGetCollection(
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "fields[appPriceTiers]", description = "the fields to include for returned resources of type appPriceTiers", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPriceTiers]", required = false) List<String> fieldsAppPriceTiers,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[appPricePoints]", description = "the fields to include for returned resources of type appPricePoints", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPricePoints]", required = false) List<String> fieldsAppPricePoints,
        @Max(50) @Parameter(name = "limit[pricePoints]", description = "maximum number of related pricePoints returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[pricePoints]", required = false) Integer limitPricePoints
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"pricePoints\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPricePoints\" }, { \"id\" : \"id\", \"type\" : \"appPricePoints\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, { \"relationships\" : { \"pricePoints\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPricePoints\" }, { \"id\" : \"id\", \"type\" : \"appPricePoints\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPriceTiers\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"territories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"proceeds\" : \"proceeds\", \"customerPrice\" : \"customerPrice\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPricePoints\" }, { \"relationships\" : { \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"territories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"proceeds\" : \"proceeds\", \"customerPrice\" : \"customerPrice\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPricePoints\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPriceTiers/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppPriceTiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppPricePoints the fields to include for returned resources of type appPricePoints (optional)
     * @param limitPricePoints maximum number of related pricePoints returned (when they are included) (optional)
     * @return Single AppPriceTier (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appPriceTiersGetInstance",
        tags = { "AppPriceTiers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppPriceTier", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPriceTierResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPriceTiers/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPriceTierResponse> appPriceTiersGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appPriceTiers]", description = "the fields to include for returned resources of type appPriceTiers", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPriceTiers]", required = false) List<String> fieldsAppPriceTiers,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[appPricePoints]", description = "the fields to include for returned resources of type appPricePoints", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPricePoints]", required = false) List<String> fieldsAppPricePoints,
        @Max(50) @Parameter(name = "limit[pricePoints]", description = "maximum number of related pricePoints returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[pricePoints]", required = false) Integer limitPricePoints
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"pricePoints\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPricePoints\" }, { \"id\" : \"id\", \"type\" : \"appPricePoints\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"territories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"proceeds\" : \"proceeds\", \"customerPrice\" : \"customerPrice\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPricePoints\" }, { \"relationships\" : { \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"territories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"proceeds\" : \"proceeds\", \"customerPrice\" : \"customerPrice\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPricePoints\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPriceTiers/{id}/pricePoints
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppPricePoints the fields to include for returned resources of type appPricePoints (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appPriceTiersPricePointsGetToManyRelated",
        tags = { "AppPriceTiers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPricePointsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPriceTiers/{id}/pricePoints",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPricePointsResponse> appPriceTiersPricePointsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appPricePoints]", description = "the fields to include for returned resources of type appPricePoints", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPricePoints]", required = false) List<String> fieldsAppPricePoints,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"territories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"proceeds\" : \"proceeds\", \"customerPrice\" : \"customerPrice\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPricePoints\" }, { \"relationships\" : { \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"territories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"proceeds\" : \"proceeds\", \"customerPrice\" : \"customerPrice\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPricePoints\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appPrices/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return Single AppPrice (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appPricesGetInstance",
        tags = { "AppPrices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppPrice", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPriceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appPrices/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPriceResponse> appPricesGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appPrices]", description = "the fields to include for returned resources of type appPrices", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPrices]", required = false) List<String> fieldsAppPrices,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPrices\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appScreenshotSets/{id}/appScreenshots
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appScreenshotSetsAppScreenshotsGetToManyRelated",
        tags = { "AppScreenshotSets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppScreenshotsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appScreenshotSets/{id}/appScreenshots",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppScreenshotsResponse> appScreenshotSetsAppScreenshotsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appScreenshotSets]", description = "the fields to include for returned resources of type appScreenshotSets", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appScreenshotSets]", required = false) List<String> fieldsAppScreenshotSets,
        @Parameter(name = "fields[appScreenshots]", description = "the fields to include for returned resources of type appScreenshots", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appScreenshots]", required = false) List<String> fieldsAppScreenshots,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" }, { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appScreenshotSets/{id}/relationships/appScreenshots
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related linkages (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appScreenshotSetsAppScreenshotsGetToManyRelationship",
        tags = { "AppScreenshotSets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related linkages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppScreenshotSetAppScreenshotsLinkagesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appScreenshotSets/{id}/relationships/appScreenshots",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppScreenshotSetAppScreenshotsLinkagesResponse> appScreenshotSetsAppScreenshotsGetToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"id\" : \"id\", \"type\" : \"appScreenshots\" }, { \"id\" : \"id\", \"type\" : \"appScreenshots\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appScreenshotSets/{id}/relationships/appScreenshots
     *
     * @param id the id of the requested resource (required)
     * @param appScreenshotSetAppScreenshotsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appScreenshotSetsAppScreenshotsReplaceToManyRelationship",
        tags = { "AppScreenshotSets" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appScreenshotSets/{id}/relationships/appScreenshots",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> appScreenshotSetsAppScreenshotsReplaceToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppScreenshotSetAppScreenshotsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody AppScreenshotSetAppScreenshotsLinkagesRequest appScreenshotSetAppScreenshotsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appScreenshotSets
     *
     * @param appScreenshotSetCreateRequest AppScreenshotSet representation (required)
     * @return Single AppScreenshotSet (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appScreenshotSetsCreateInstance",
        tags = { "AppScreenshotSets" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppScreenshotSet", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppScreenshotSetResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appScreenshotSets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppScreenshotSetResponse> appScreenshotSetsCreateInstance(
        @Parameter(name = "AppScreenshotSetCreateRequest", description = "AppScreenshotSet representation", required = true) @Valid @RequestBody AppScreenshotSetCreateRequest appScreenshotSetCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appScreenshots\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appScreenshots\" }, { \"id\" : \"id\", \"type\" : \"appScreenshots\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalization\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" }, { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appScreenshotSets/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appScreenshotSetsDeleteInstance",
        tags = { "AppScreenshotSets" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appScreenshotSets/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appScreenshotSetsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appScreenshotSets/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limitAppScreenshots maximum number of related appScreenshots returned (when they are included) (optional)
     * @return Single AppScreenshotSet (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appScreenshotSetsGetInstance",
        tags = { "AppScreenshotSets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppScreenshotSet", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppScreenshotSetResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appScreenshotSets/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppScreenshotSetResponse> appScreenshotSetsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appScreenshotSets]", description = "the fields to include for returned resources of type appScreenshotSets", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appScreenshotSets]", required = false) List<String> fieldsAppScreenshotSets,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[appScreenshots]", description = "the fields to include for returned resources of type appScreenshots", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appScreenshots]", required = false) List<String> fieldsAppScreenshots,
        @Max(50) @Parameter(name = "limit[appScreenshots]", description = "maximum number of related appScreenshots returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appScreenshots]", required = false) Integer limitAppScreenshots
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appScreenshots\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appScreenshots\" }, { \"id\" : \"id\", \"type\" : \"appScreenshots\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalization\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" }, { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appScreenshots
     *
     * @param appScreenshotCreateRequest AppScreenshot representation (required)
     * @return Single AppScreenshot (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appScreenshotsCreateInstance",
        tags = { "AppScreenshots" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppScreenshot", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppScreenshotResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appScreenshots",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppScreenshotResponse> appScreenshotsCreateInstance(
        @Parameter(name = "AppScreenshotCreateRequest", description = "AppScreenshot representation", required = true) @Valid @RequestBody AppScreenshotCreateRequest appScreenshotCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appScreenshots/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appScreenshotsDeleteInstance",
        tags = { "AppScreenshots" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appScreenshots/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appScreenshotsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appScreenshots/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return Single AppScreenshot (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appScreenshotsGetInstance",
        tags = { "AppScreenshots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppScreenshot", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppScreenshotResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appScreenshots/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppScreenshotResponse> appScreenshotsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appScreenshots]", description = "the fields to include for returned resources of type appScreenshots", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appScreenshots]", required = false) List<String> fieldsAppScreenshots,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appScreenshots/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appScreenshotUpdateRequest AppScreenshot representation (required)
     * @return Single AppScreenshot (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appScreenshotsUpdateInstance",
        tags = { "AppScreenshots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppScreenshot", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppScreenshotResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appScreenshots/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppScreenshotResponse> appScreenshotsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppScreenshotUpdateRequest", description = "AppScreenshot representation", required = true) @Valid @RequestBody AppScreenshotUpdateRequest appScreenshotUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appStoreReviewAttachments
     *
     * @param appStoreReviewAttachmentCreateRequest AppStoreReviewAttachment representation (required)
     * @return Single AppStoreReviewAttachment (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreReviewAttachmentsCreateInstance",
        tags = { "AppStoreReviewAttachments" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppStoreReviewAttachment", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreReviewAttachmentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appStoreReviewAttachments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreReviewAttachmentResponse> appStoreReviewAttachmentsCreateInstance(
        @Parameter(name = "AppStoreReviewAttachmentCreateRequest", description = "AppStoreReviewAttachment representation", required = true) @Valid @RequestBody AppStoreReviewAttachmentCreateRequest appStoreReviewAttachmentCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appStoreReviewAttachments/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreReviewAttachmentsDeleteInstance",
        tags = { "AppStoreReviewAttachments" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appStoreReviewAttachments/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appStoreReviewAttachmentsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreReviewAttachments/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return Single AppStoreReviewAttachment (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreReviewAttachmentsGetInstance",
        tags = { "AppStoreReviewAttachments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppStoreReviewAttachment", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreReviewAttachmentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreReviewAttachments/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreReviewAttachmentResponse> appStoreReviewAttachmentsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appStoreReviewAttachments]", description = "the fields to include for returned resources of type appStoreReviewAttachments", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreReviewAttachments]", required = false) List<String> fieldsAppStoreReviewAttachments,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appStoreReviewAttachments/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appStoreReviewAttachmentUpdateRequest AppStoreReviewAttachment representation (required)
     * @return Single AppStoreReviewAttachment (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreReviewAttachmentsUpdateInstance",
        tags = { "AppStoreReviewAttachments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppStoreReviewAttachment", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreReviewAttachmentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appStoreReviewAttachments/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreReviewAttachmentResponse> appStoreReviewAttachmentsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppStoreReviewAttachmentUpdateRequest", description = "AppStoreReviewAttachment representation", required = true) @Valid @RequestBody AppStoreReviewAttachmentUpdateRequest appStoreReviewAttachmentUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreReviewDetails/{id}/appStoreReviewAttachments
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated",
        tags = { "AppStoreReviewDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreReviewAttachmentsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreReviewDetails/{id}/appStoreReviewAttachments",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreReviewAttachmentsResponse> appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appStoreReviewDetails]", description = "the fields to include for returned resources of type appStoreReviewDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreReviewDetails]", required = false) List<String> fieldsAppStoreReviewDetails,
        @Parameter(name = "fields[appStoreReviewAttachments]", description = "the fields to include for returned resources of type appStoreReviewAttachments", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreReviewAttachments]", required = false) List<String> fieldsAppStoreReviewAttachments,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appStoreReviewDetails
     *
     * @param appStoreReviewDetailCreateRequest AppStoreReviewDetail representation (required)
     * @return Single AppStoreReviewDetail (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreReviewDetailsCreateInstance",
        tags = { "AppStoreReviewDetails" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppStoreReviewDetail", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreReviewDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appStoreReviewDetails",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreReviewDetailResponse> appStoreReviewDetailsCreateInstance(
        @Parameter(name = "AppStoreReviewDetailCreateRequest", description = "AppStoreReviewDetail representation", required = true) @Valid @RequestBody AppStoreReviewDetailCreateRequest appStoreReviewDetailCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreReviewAttachments\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, { \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"demoAccountPassword\" : \"demoAccountPassword\", \"notes\" : \"notes\", \"contactEmail\" : \"contactEmail\", \"contactFirstName\" : \"contactFirstName\", \"demoAccountRequired\" : true, \"demoAccountName\" : \"demoAccountName\", \"contactLastName\" : \"contactLastName\", \"contactPhone\" : \"contactPhone\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreReviewDetails/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param limitAppStoreReviewAttachments maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     * @return Single AppStoreReviewDetail (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreReviewDetailsGetInstance",
        tags = { "AppStoreReviewDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppStoreReviewDetail", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreReviewDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreReviewDetails/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreReviewDetailResponse> appStoreReviewDetailsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appStoreReviewDetails]", description = "the fields to include for returned resources of type appStoreReviewDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreReviewDetails]", required = false) List<String> fieldsAppStoreReviewDetails,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[appStoreReviewAttachments]", description = "the fields to include for returned resources of type appStoreReviewAttachments", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreReviewAttachments]", required = false) List<String> fieldsAppStoreReviewAttachments,
        @Max(50) @Parameter(name = "limit[appStoreReviewAttachments]", description = "maximum number of related appStoreReviewAttachments returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appStoreReviewAttachments]", required = false) Integer limitAppStoreReviewAttachments
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreReviewAttachments\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, { \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"demoAccountPassword\" : \"demoAccountPassword\", \"notes\" : \"notes\", \"contactEmail\" : \"contactEmail\", \"contactFirstName\" : \"contactFirstName\", \"demoAccountRequired\" : true, \"demoAccountName\" : \"demoAccountName\", \"contactLastName\" : \"contactLastName\", \"contactPhone\" : \"contactPhone\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appStoreReviewDetails/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appStoreReviewDetailUpdateRequest AppStoreReviewDetail representation (required)
     * @return Single AppStoreReviewDetail (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreReviewDetailsUpdateInstance",
        tags = { "AppStoreReviewDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppStoreReviewDetail", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreReviewDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appStoreReviewDetails/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreReviewDetailResponse> appStoreReviewDetailsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppStoreReviewDetailUpdateRequest", description = "AppStoreReviewDetail representation", required = true) @Valid @RequestBody AppStoreReviewDetailUpdateRequest appStoreReviewDetailUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreReviewAttachments\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, { \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"demoAccountPassword\" : \"demoAccountPassword\", \"notes\" : \"notes\", \"contactEmail\" : \"contactEmail\", \"contactFirstName\" : \"contactFirstName\", \"demoAccountRequired\" : true, \"demoAccountName\" : \"demoAccountName\", \"contactLastName\" : \"contactLastName\", \"contactPhone\" : \"contactPhone\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersionLocalizations/{id}/appPreviewSets
     *
     * @param id the id of the requested resource (required)
     * @param filterPreviewType filter by attribute &#39;previewType&#39; (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsAppPreviews the fields to include for returned resources of type appPreviews (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionLocalizationsAppPreviewSetsGetToManyRelated",
        tags = { "AppStoreVersionLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreviewSetsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersionLocalizations/{id}/appPreviewSets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPreviewSetsResponse> appStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "filter[previewType]", description = "filter by attribute 'previewType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[previewType]", required = false) List<String> filterPreviewType,
        @Parameter(name = "fields[appStoreVersionLocalizations]", description = "the fields to include for returned resources of type appStoreVersionLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionLocalizations]", required = false) List<String> fieldsAppStoreVersionLocalizations,
        @Parameter(name = "fields[appPreviews]", description = "the fields to include for returned resources of type appPreviews", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreviews]", required = false) List<String> fieldsAppPreviews,
        @Parameter(name = "fields[appPreviewSets]", description = "the fields to include for returned resources of type appPreviewSets", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreviewSets]", required = false) List<String> fieldsAppPreviewSets,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"appPreviews\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPreviews\" }, { \"id\" : \"id\", \"type\" : \"appPreviews\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalization\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, { \"relationships\" : { \"appPreviews\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPreviews\" }, { \"id\" : \"id\", \"type\" : \"appPreviews\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalization\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviewSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" }, { \"relationships\" : { \"appPreviewSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"videoUrl\" : \"videoUrl\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"mimeType\" : \"mimeType\", \"previewFrameTimeCode\" : \"previewFrameTimeCode\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"previewImage\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreviews\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersionLocalizations/{id}/appScreenshotSets
     *
     * @param id the id of the requested resource (required)
     * @param filterScreenshotDisplayType filter by attribute &#39;screenshotDisplayType&#39; (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppScreenshots the fields to include for returned resources of type appScreenshots (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated",
        tags = { "AppStoreVersionLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppScreenshotSetsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersionLocalizations/{id}/appScreenshotSets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppScreenshotSetsResponse> appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "filter[screenshotDisplayType]", description = "filter by attribute 'screenshotDisplayType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[screenshotDisplayType]", required = false) List<String> filterScreenshotDisplayType,
        @Parameter(name = "fields[appStoreVersionLocalizations]", description = "the fields to include for returned resources of type appStoreVersionLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionLocalizations]", required = false) List<String> fieldsAppStoreVersionLocalizations,
        @Parameter(name = "fields[appScreenshotSets]", description = "the fields to include for returned resources of type appScreenshotSets", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appScreenshotSets]", required = false) List<String> fieldsAppScreenshotSets,
        @Parameter(name = "fields[appScreenshots]", description = "the fields to include for returned resources of type appScreenshots", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appScreenshots]", required = false) List<String> fieldsAppScreenshots,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"appScreenshots\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appScreenshots\" }, { \"id\" : \"id\", \"type\" : \"appScreenshots\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalization\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, { \"relationships\" : { \"appScreenshots\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appScreenshots\" }, { \"id\" : \"id\", \"type\" : \"appScreenshots\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalization\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshotSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" }, { \"relationships\" : { \"appScreenshotSet\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"imageAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"assetToken\" : \"assetToken\", \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ], \"assetType\" : \"assetType\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appScreenshots\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appStoreVersionLocalizations
     *
     * @param appStoreVersionLocalizationCreateRequest AppStoreVersionLocalization representation (required)
     * @return Single AppStoreVersionLocalization (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionLocalizationsCreateInstance",
        tags = { "AppStoreVersionLocalizations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppStoreVersionLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appStoreVersionLocalizations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionLocalizationResponse> appStoreVersionLocalizationsCreateInstance(
        @Parameter(name = "AppStoreVersionLocalizationCreateRequest", description = "AppStoreVersionLocalization representation", required = true) @Valid @RequestBody AppStoreVersionLocalizationCreateRequest appStoreVersionLocalizationCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appScreenshotSets\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appPreviewSets\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, { \"id\" : \"id\", \"type\" : \"appPreviewSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"keywords\" : \"keywords\", \"marketingUrl\" : \"https://openapi-generator.tech\", \"supportUrl\" : \"https://openapi-generator.tech\", \"description\" : \"description\", \"locale\" : \"locale\", \"promotionalText\" : \"promotionalText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appStoreVersionLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionLocalizationsDeleteInstance",
        tags = { "AppStoreVersionLocalizations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appStoreVersionLocalizations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appStoreVersionLocalizationsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersionLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppScreenshotSets the fields to include for returned resources of type appScreenshotSets (optional)
     * @param fieldsAppPreviewSets the fields to include for returned resources of type appPreviewSets (optional)
     * @param limitAppPreviewSets maximum number of related appPreviewSets returned (when they are included) (optional)
     * @param limitAppScreenshotSets maximum number of related appScreenshotSets returned (when they are included) (optional)
     * @return Single AppStoreVersionLocalization (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionLocalizationsGetInstance",
        tags = { "AppStoreVersionLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppStoreVersionLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersionLocalizations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionLocalizationResponse> appStoreVersionLocalizationsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appStoreVersionLocalizations]", description = "the fields to include for returned resources of type appStoreVersionLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionLocalizations]", required = false) List<String> fieldsAppStoreVersionLocalizations,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[appScreenshotSets]", description = "the fields to include for returned resources of type appScreenshotSets", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appScreenshotSets]", required = false) List<String> fieldsAppScreenshotSets,
        @Parameter(name = "fields[appPreviewSets]", description = "the fields to include for returned resources of type appPreviewSets", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreviewSets]", required = false) List<String> fieldsAppPreviewSets,
        @Max(50) @Parameter(name = "limit[appPreviewSets]", description = "maximum number of related appPreviewSets returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appPreviewSets]", required = false) Integer limitAppPreviewSets,
        @Max(50) @Parameter(name = "limit[appScreenshotSets]", description = "maximum number of related appScreenshotSets returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appScreenshotSets]", required = false) Integer limitAppScreenshotSets
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appScreenshotSets\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appPreviewSets\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, { \"id\" : \"id\", \"type\" : \"appPreviewSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"keywords\" : \"keywords\", \"marketingUrl\" : \"https://openapi-generator.tech\", \"supportUrl\" : \"https://openapi-generator.tech\", \"description\" : \"description\", \"locale\" : \"locale\", \"promotionalText\" : \"promotionalText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appStoreVersionLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appStoreVersionLocalizationUpdateRequest AppStoreVersionLocalization representation (required)
     * @return Single AppStoreVersionLocalization (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionLocalizationsUpdateInstance",
        tags = { "AppStoreVersionLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppStoreVersionLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appStoreVersionLocalizations/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionLocalizationResponse> appStoreVersionLocalizationsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppStoreVersionLocalizationUpdateRequest", description = "AppStoreVersionLocalization representation", required = true) @Valid @RequestBody AppStoreVersionLocalizationUpdateRequest appStoreVersionLocalizationUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appScreenshotSets\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appPreviewSets\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, { \"id\" : \"id\", \"type\" : \"appPreviewSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"keywords\" : \"keywords\", \"marketingUrl\" : \"https://openapi-generator.tech\", \"supportUrl\" : \"https://openapi-generator.tech\", \"description\" : \"description\", \"locale\" : \"locale\", \"promotionalText\" : \"promotionalText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appStoreVersionPhasedReleases
     *
     * @param appStoreVersionPhasedReleaseCreateRequest AppStoreVersionPhasedRelease representation (required)
     * @return Single AppStoreVersionPhasedRelease (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionPhasedReleasesCreateInstance",
        tags = { "AppStoreVersionPhasedReleases" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppStoreVersionPhasedRelease", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionPhasedReleaseResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appStoreVersionPhasedReleases",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionPhasedReleaseResponse> appStoreVersionPhasedReleasesCreateInstance(
        @Parameter(name = "AppStoreVersionPhasedReleaseCreateRequest", description = "AppStoreVersionPhasedRelease representation", required = true) @Valid @RequestBody AppStoreVersionPhasedReleaseCreateRequest appStoreVersionPhasedReleaseCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"currentDayNumber\" : 0, \"totalPauseDuration\" : 6, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersionPhasedReleases\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appStoreVersionPhasedReleases/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionPhasedReleasesDeleteInstance",
        tags = { "AppStoreVersionPhasedReleases" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appStoreVersionPhasedReleases/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appStoreVersionPhasedReleasesDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appStoreVersionPhasedReleases/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appStoreVersionPhasedReleaseUpdateRequest AppStoreVersionPhasedRelease representation (required)
     * @return Single AppStoreVersionPhasedRelease (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionPhasedReleasesUpdateInstance",
        tags = { "AppStoreVersionPhasedReleases" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppStoreVersionPhasedRelease", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionPhasedReleaseResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appStoreVersionPhasedReleases/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionPhasedReleaseResponse> appStoreVersionPhasedReleasesUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppStoreVersionPhasedReleaseUpdateRequest", description = "AppStoreVersionPhasedRelease representation", required = true) @Valid @RequestBody AppStoreVersionPhasedReleaseUpdateRequest appStoreVersionPhasedReleaseUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"currentDayNumber\" : 0, \"totalPauseDuration\" : 6, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersionPhasedReleases\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appStoreVersionSubmissions
     *
     * @param appStoreVersionSubmissionCreateRequest AppStoreVersionSubmission representation (required)
     * @return Single AppStoreVersionSubmission (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionSubmissionsCreateInstance",
        tags = { "AppStoreVersionSubmissions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppStoreVersionSubmission", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionSubmissionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appStoreVersionSubmissions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionSubmissionResponse> appStoreVersionSubmissionsCreateInstance(
        @Parameter(name = "AppStoreVersionSubmissionCreateRequest", description = "AppStoreVersionSubmission representation", required = true) @Valid @RequestBody AppStoreVersionSubmissionCreateRequest appStoreVersionSubmissionCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersionSubmissions\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appStoreVersionSubmissions/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionSubmissionsDeleteInstance",
        tags = { "AppStoreVersionSubmissions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appStoreVersionSubmissions/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appStoreVersionSubmissionsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersions/{id}/ageRatingDeclaration
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     * @deprecated
     */
    @Deprecated
    @Operation(
        operationId = "appStoreVersionsAgeRatingDeclarationGetToOneRelated",
        deprecated = true,
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AgeRatingDeclarationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersions/{id}/ageRatingDeclaration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AgeRatingDeclarationResponse> appStoreVersionsAgeRatingDeclarationGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[ageRatingDeclarations]", deprecated = true, description = "the fields to include for returned resources of type ageRatingDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[ageRatingDeclarations]", required = false) @Deprecated List<String> fieldsAgeRatingDeclarations
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"alcoholTobaccoOrDrugUseOrReferences\" : \"NONE\", \"gamblingAndContests\" : true, \"gamblingSimulated\" : \"NONE\", \"sexualContentGraphicAndNudity\" : \"NONE\", \"violenceRealistic\" : \"NONE\", \"gambling\" : true, \"horrorOrFearThemes\" : \"NONE\", \"profanityOrCrudeHumor\" : \"NONE\", \"seventeenPlus\" : true, \"violenceRealisticProlongedGraphicOrSadistic\" : \"NONE\", \"contests\" : \"NONE\", \"matureOrSuggestiveThemes\" : \"NONE\", \"unrestrictedWebAccess\" : true, \"violenceCartoonOrFantasy\" : \"NONE\", \"medicalOrTreatmentInformation\" : \"NONE\", \"sexualContentOrNudity\" : \"NONE\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersions/{id}/appStoreReviewDetail
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsAppStoreReviewAttachments the fields to include for returned resources of type appStoreReviewAttachments (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionsAppStoreReviewDetailGetToOneRelated",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreReviewDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersions/{id}/appStoreReviewDetail",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreReviewDetailResponse> appStoreVersionsAppStoreReviewDetailGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appStoreReviewDetails]", description = "the fields to include for returned resources of type appStoreReviewDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreReviewDetails]", required = false) List<String> fieldsAppStoreReviewDetails,
        @Parameter(name = "fields[appStoreVersions]", description = "the fields to include for returned resources of type appStoreVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersions]", required = false) List<String> fieldsAppStoreVersions,
        @Parameter(name = "fields[appStoreReviewAttachments]", description = "the fields to include for returned resources of type appStoreReviewAttachments", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreReviewAttachments]", required = false) List<String> fieldsAppStoreReviewAttachments,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreReviewAttachments\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, { \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"demoAccountPassword\" : \"demoAccountPassword\", \"notes\" : \"notes\", \"contactEmail\" : \"contactEmail\", \"contactFirstName\" : \"contactFirstName\", \"demoAccountRequired\" : true, \"demoAccountName\" : \"demoAccountName\", \"contactLastName\" : \"contactLastName\", \"contactPhone\" : \"contactPhone\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" }, { \"relationships\" : { \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreReviewAttachments\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersions/{id}/appStoreVersionLocalizations
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionLocalizationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersions/{id}/appStoreVersionLocalizations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionLocalizationsResponse> appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appStoreVersionLocalizations]", description = "the fields to include for returned resources of type appStoreVersionLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionLocalizations]", required = false) List<String> fieldsAppStoreVersionLocalizations,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"appScreenshotSets\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appPreviewSets\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, { \"id\" : \"id\", \"type\" : \"appPreviewSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"keywords\" : \"keywords\", \"marketingUrl\" : \"https://openapi-generator.tech\", \"supportUrl\" : \"https://openapi-generator.tech\", \"description\" : \"description\", \"locale\" : \"locale\", \"promotionalText\" : \"promotionalText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, { \"relationships\" : { \"appScreenshotSets\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" }, { \"id\" : \"id\", \"type\" : \"appScreenshotSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appPreviewSets\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPreviewSets\" }, { \"id\" : \"id\", \"type\" : \"appPreviewSets\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"keywords\" : \"keywords\", \"marketingUrl\" : \"https://openapi-generator.tech\", \"supportUrl\" : \"https://openapi-generator.tech\", \"description\" : \"description\", \"locale\" : \"locale\", \"promotionalText\" : \"promotionalText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersions/{id}/appStoreVersionPhasedRelease
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersionPhasedReleases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionPhasedReleaseResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionPhasedReleaseResponse> appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appStoreVersionPhasedReleases]", description = "the fields to include for returned resources of type appStoreVersionPhasedReleases", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionPhasedReleases]", required = false) List<String> fieldsAppStoreVersionPhasedReleases
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"currentDayNumber\" : 0, \"totalPauseDuration\" : 6, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersionPhasedReleases\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersions/{id}/appStoreVersionSubmission
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsAppStoreVersionSubmissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionsAppStoreVersionSubmissionGetToOneRelated",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionSubmissionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersions/{id}/appStoreVersionSubmission",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionSubmissionResponse> appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appStoreVersions]", description = "the fields to include for returned resources of type appStoreVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersions]", required = false) List<String> fieldsAppStoreVersions,
        @Parameter(name = "fields[appStoreVersionSubmissions]", description = "the fields to include for returned resources of type appStoreVersionSubmissions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionSubmissions]", required = false) List<String> fieldsAppStoreVersionSubmissions,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersionSubmissions\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersions/{id}/build
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionsBuildGetToOneRelated",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersions/{id}/build",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildResponse> appStoreVersionsBuildGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersions/{id}/relationships/build
     *
     * @param id the id of the requested resource (required)
     * @return Related linkage (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionsBuildGetToOneRelationship",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related linkage", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionBuildLinkageResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersions/{id}/relationships/build",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionBuildLinkageResponse> appStoreVersionsBuildGetToOneRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appStoreVersions/{id}/relationships/build
     *
     * @param id the id of the requested resource (required)
     * @param appStoreVersionBuildLinkageRequest Related linkage (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionsBuildUpdateToOneRelationship",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appStoreVersions/{id}/relationships/build",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> appStoreVersionsBuildUpdateToOneRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppStoreVersionBuildLinkageRequest", description = "Related linkage", required = true) @Valid @RequestBody AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/appStoreVersions
     *
     * @param appStoreVersionCreateRequest AppStoreVersion representation (required)
     * @return Single AppStoreVersion (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionsCreateInstance",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single AppStoreVersion", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/appStoreVersions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionResponse> appStoreVersionsCreateInstance(
        @Parameter(name = "AppStoreVersionCreateRequest", description = "AppStoreVersion representation", required = true) @Valid @RequestBody AppStoreVersionCreateRequest appStoreVersionCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionPhasedRelease\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionPhasedReleases\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"idfaDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"idfaDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"ageRatingDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"routingAppCoverage\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"routingAppCoverages\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"copyright\" : \"copyright\", \"downloadable\" : true, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"earliestReleaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"usesIdfa\" : true, \"versionString\" : \"versionString\", \"releaseType\" : \"MANUAL\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/appStoreVersions/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionsDeleteInstance",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/appStoreVersions/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> appStoreVersionsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersions/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsIdfaDeclarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param fieldsRoutingAppCoverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param fieldsAppStoreVersionPhasedReleases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsAppStoreVersionSubmissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param limitAppStoreVersionLocalizations maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     * @return Single AppStoreVersion (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionsGetInstance",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppStoreVersion", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersions/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionResponse> appStoreVersionsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appStoreVersions]", description = "the fields to include for returned resources of type appStoreVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersions]", required = false) List<String> fieldsAppStoreVersions,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[appStoreVersionLocalizations]", description = "the fields to include for returned resources of type appStoreVersionLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionLocalizations]", required = false) List<String> fieldsAppStoreVersionLocalizations,
        @Parameter(name = "fields[idfaDeclarations]", description = "the fields to include for returned resources of type idfaDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[idfaDeclarations]", required = false) List<String> fieldsIdfaDeclarations,
        @Parameter(name = "fields[routingAppCoverages]", description = "the fields to include for returned resources of type routingAppCoverages", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[routingAppCoverages]", required = false) List<String> fieldsRoutingAppCoverages,
        @Parameter(name = "fields[appStoreVersionPhasedReleases]", description = "the fields to include for returned resources of type appStoreVersionPhasedReleases", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionPhasedReleases]", required = false) List<String> fieldsAppStoreVersionPhasedReleases,
        @Parameter(name = "fields[ageRatingDeclarations]", deprecated = true, description = "the fields to include for returned resources of type ageRatingDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[ageRatingDeclarations]", required = false) @Deprecated List<String> fieldsAgeRatingDeclarations,
        @Parameter(name = "fields[appStoreReviewDetails]", description = "the fields to include for returned resources of type appStoreReviewDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreReviewDetails]", required = false) List<String> fieldsAppStoreReviewDetails,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "fields[appStoreVersionSubmissions]", description = "the fields to include for returned resources of type appStoreVersionSubmissions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionSubmissions]", required = false) List<String> fieldsAppStoreVersionSubmissions,
        @Max(50) @Parameter(name = "limit[appStoreVersionLocalizations]", description = "maximum number of related appStoreVersionLocalizations returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appStoreVersionLocalizations]", required = false) Integer limitAppStoreVersionLocalizations
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionPhasedRelease\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionPhasedReleases\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"idfaDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"idfaDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"ageRatingDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"routingAppCoverage\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"routingAppCoverages\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"copyright\" : \"copyright\", \"downloadable\" : true, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"earliestReleaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"usesIdfa\" : true, \"versionString\" : \"versionString\", \"releaseType\" : \"MANUAL\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersions/{id}/idfaDeclaration
     *
     * @param id the id of the requested resource (required)
     * @param fieldsIdfaDeclarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionsIdfaDeclarationGetToOneRelated",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IdfaDeclarationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersions/{id}/idfaDeclaration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IdfaDeclarationResponse> appStoreVersionsIdfaDeclarationGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[idfaDeclarations]", description = "the fields to include for returned resources of type idfaDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[idfaDeclarations]", required = false) List<String> fieldsIdfaDeclarations
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"attributesAppInstallationToPreviousAd\" : true, \"attributesActionWithPreviousAd\" : true, \"servesAds\" : true, \"honorsLimitedAdTracking\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"idfaDeclarations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/appStoreVersions/{id}/routingAppCoverage
     *
     * @param id the id of the requested resource (required)
     * @param fieldsRoutingAppCoverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appStoreVersionsRoutingAppCoverageGetToOneRelated",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoutingAppCoverageResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/appStoreVersions/{id}/routingAppCoverage",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RoutingAppCoverageResponse> appStoreVersionsRoutingAppCoverageGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[routingAppCoverages]", description = "the fields to include for returned resources of type routingAppCoverages", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[routingAppCoverages]", required = false) List<String> fieldsRoutingAppCoverages
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"routingAppCoverages\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/appStoreVersions/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appStoreVersionUpdateRequest AppStoreVersion representation (required)
     * @return Single AppStoreVersion (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appStoreVersionsUpdateInstance",
        tags = { "AppStoreVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single AppStoreVersion", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/appStoreVersions/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionResponse> appStoreVersionsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppStoreVersionUpdateRequest", description = "AppStoreVersion representation", required = true) @Valid @RequestBody AppStoreVersionUpdateRequest appStoreVersionUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionPhasedRelease\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionPhasedReleases\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"idfaDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"idfaDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"ageRatingDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"routingAppCoverage\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"routingAppCoverages\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"copyright\" : \"copyright\", \"downloadable\" : true, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"earliestReleaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"usesIdfa\" : true, \"versionString\" : \"versionString\", \"releaseType\" : \"MANUAL\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/appInfos
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppCategories the fields to include for returned resources of type appCategories (optional)
     * @param fieldsAppInfoLocalizations the fields to include for returned resources of type appInfoLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsAppInfosGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppInfosResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/appInfos",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppInfosResponse> appsAppInfosGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[ageRatingDeclarations]", description = "the fields to include for returned resources of type ageRatingDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[ageRatingDeclarations]", required = false) List<String> fieldsAgeRatingDeclarations,
        @Parameter(name = "fields[appInfos]", description = "the fields to include for returned resources of type appInfos", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appInfos]", required = false) List<String> fieldsAppInfos,
        @Parameter(name = "fields[appCategories]", description = "the fields to include for returned resources of type appCategories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appCategories]", required = false) List<String> fieldsAppCategories,
        @Parameter(name = "fields[appInfoLocalizations]", description = "the fields to include for returned resources of type appInfoLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appInfoLocalizations]", required = false) List<String> fieldsAppInfoLocalizations,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondaryCategory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primaryCategory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondarySubcategoryOne\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primarySubcategoryTwo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"ageRatingDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfoLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" }, { \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondarySubcategoryTwo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primarySubcategoryOne\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondaryCategory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primaryCategory\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondarySubcategoryOne\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primarySubcategoryTwo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"ageRatingDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfoLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" }, { \"id\" : \"id\", \"type\" : \"appInfoLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"secondarySubcategoryTwo\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"primarySubcategoryOne\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appCategories\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/appStoreVersions
     *
     * @param id the id of the requested resource (required)
     * @param filterAppStoreState filter by attribute &#39;appStoreState&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param fieldsIdfaDeclarations the fields to include for returned resources of type idfaDeclarations (optional)
     * @param fieldsAppStoreVersionLocalizations the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     * @param fieldsRoutingAppCoverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param fieldsAppStoreVersionPhasedReleases the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     * @param fieldsAgeRatingDeclarations the fields to include for returned resources of type ageRatingDeclarations (optional)
     * @param fieldsAppStoreReviewDetails the fields to include for returned resources of type appStoreReviewDetails (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsAppStoreVersionSubmissions the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsAppStoreVersionsGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/appStoreVersions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionsResponse> appsAppStoreVersionsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "filter[appStoreState]", description = "filter by attribute 'appStoreState'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[appStoreState]", required = false) List<String> filterAppStoreState,
        @Parameter(name = "filter[platform]", description = "filter by attribute 'platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[platform]", required = false) List<String> filterPlatform,
        @Parameter(name = "filter[versionString]", description = "filter by attribute 'versionString'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[versionString]", required = false) List<String> filterVersionString,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "fields[idfaDeclarations]", description = "the fields to include for returned resources of type idfaDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[idfaDeclarations]", required = false) List<String> fieldsIdfaDeclarations,
        @Parameter(name = "fields[appStoreVersionLocalizations]", description = "the fields to include for returned resources of type appStoreVersionLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionLocalizations]", required = false) List<String> fieldsAppStoreVersionLocalizations,
        @Parameter(name = "fields[routingAppCoverages]", description = "the fields to include for returned resources of type routingAppCoverages", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[routingAppCoverages]", required = false) List<String> fieldsRoutingAppCoverages,
        @Parameter(name = "fields[appStoreVersionPhasedReleases]", description = "the fields to include for returned resources of type appStoreVersionPhasedReleases", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionPhasedReleases]", required = false) List<String> fieldsAppStoreVersionPhasedReleases,
        @Parameter(name = "fields[ageRatingDeclarations]", description = "the fields to include for returned resources of type ageRatingDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[ageRatingDeclarations]", required = false) List<String> fieldsAgeRatingDeclarations,
        @Parameter(name = "fields[appStoreReviewDetails]", description = "the fields to include for returned resources of type appStoreReviewDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreReviewDetails]", required = false) List<String> fieldsAppStoreReviewDetails,
        @Parameter(name = "fields[appStoreVersions]", description = "the fields to include for returned resources of type appStoreVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersions]", required = false) List<String> fieldsAppStoreVersions,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "fields[appStoreVersionSubmissions]", description = "the fields to include for returned resources of type appStoreVersionSubmissions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersionSubmissions]", required = false) List<String> fieldsAppStoreVersionSubmissions,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionPhasedRelease\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionPhasedReleases\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"idfaDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"idfaDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"ageRatingDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"routingAppCoverage\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"routingAppCoverages\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"copyright\" : \"copyright\", \"downloadable\" : true, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"earliestReleaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"usesIdfa\" : true, \"versionString\" : \"versionString\", \"releaseType\" : \"MANUAL\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionPhasedRelease\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionPhasedReleases\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"idfaDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"idfaDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"ageRatingDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"routingAppCoverage\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"routingAppCoverages\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"copyright\" : \"copyright\", \"downloadable\" : true, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"earliestReleaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"usesIdfa\" : true, \"versionString\" : \"versionString\", \"releaseType\" : \"MANUAL\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/availableTerritories
     *
     * @param id the id of the requested resource (required)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsAvailableTerritoriesGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TerritoriesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/availableTerritories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TerritoriesResponse> appsAvailableTerritoriesGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[territories]", description = "the fields to include for returned resources of type territories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[territories]", required = false) List<String> fieldsTerritories,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/betaAppLocalizations
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsBetaAppLocalizationsGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppLocalizationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/betaAppLocalizations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaAppLocalizationsResponse> appsBetaAppLocalizationsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaAppLocalizations]", description = "the fields to include for returned resources of type betaAppLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppLocalizations]", required = false) List<String> fieldsBetaAppLocalizations,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"marketingUrl\" : \"marketingUrl\", \"description\" : \"description\", \"locale\" : \"locale\", \"tvOsPrivacyPolicy\" : \"tvOsPrivacyPolicy\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\", \"feedbackEmail\" : \"feedbackEmail\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"marketingUrl\" : \"marketingUrl\", \"description\" : \"description\", \"locale\" : \"locale\", \"tvOsPrivacyPolicy\" : \"tvOsPrivacyPolicy\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\", \"feedbackEmail\" : \"feedbackEmail\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/betaAppReviewDetail
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsBetaAppReviewDetailGetToOneRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppReviewDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/betaAppReviewDetail",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaAppReviewDetailResponse> appsBetaAppReviewDetailGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaAppReviewDetails]", description = "the fields to include for returned resources of type betaAppReviewDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppReviewDetails]", required = false) List<String> fieldsBetaAppReviewDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"demoAccountPassword\" : \"demoAccountPassword\", \"notes\" : \"notes\", \"contactEmail\" : \"contactEmail\", \"contactFirstName\" : \"contactFirstName\", \"demoAccountRequired\" : true, \"demoAccountName\" : \"demoAccountName\", \"contactLastName\" : \"contactLastName\", \"contactPhone\" : \"contactPhone\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/betaGroups
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsBetaGroupsGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaGroupsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/betaGroups",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaGroupsResponse> appsBetaGroupsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaGroups]", description = "the fields to include for returned resources of type betaGroups", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaGroups]", required = false) List<String> fieldsBetaGroups,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"publicLinkLimit\" : 0, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicLink\" : \"publicLink\", \"publicLinkEnabled\" : true, \"publicLinkId\" : \"publicLinkId\", \"isInternalGroup\" : true, \"name\" : \"name\", \"feedbackEnabled\" : true, \"publicLinkLimitEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"publicLinkLimit\" : 0, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicLink\" : \"publicLink\", \"publicLinkEnabled\" : true, \"publicLinkId\" : \"publicLinkId\", \"isInternalGroup\" : true, \"name\" : \"name\", \"feedbackEnabled\" : true, \"publicLinkLimitEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/betaLicenseAgreement
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsBetaLicenseAgreementGetToOneRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaLicenseAgreementResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/betaLicenseAgreement",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaLicenseAgreementResponse> appsBetaLicenseAgreementGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaLicenseAgreements]", description = "the fields to include for returned resources of type betaLicenseAgreements", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaLicenseAgreements]", required = false) List<String> fieldsBetaLicenseAgreements
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"agreementText\" : \"agreementText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/apps/{id}/relationships/betaTesters
     *
     * @param id the id of the requested resource (required)
     * @param appBetaTestersLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appsBetaTestersDeleteToManyRelationship",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/apps/{id}/relationships/betaTesters",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> appsBetaTestersDeleteToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppBetaTestersLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/builds
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsBuildsGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/builds",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildsResponse> appsBuildsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/endUserLicenseAgreement
     *
     * @param id the id of the requested resource (required)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsEndUserLicenseAgreementGetToOneRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EndUserLicenseAgreementResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/endUserLicenseAgreement",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EndUserLicenseAgreementResponse> appsEndUserLicenseAgreementGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[endUserLicenseAgreements]", description = "the fields to include for returned resources of type endUserLicenseAgreements", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[endUserLicenseAgreements]", required = false) List<String> fieldsEndUserLicenseAgreements
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"agreementText\" : \"agreementText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/gameCenterEnabledVersions
     *
     * @param id the id of the requested resource (required)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsGameCenterEnabledVersionsGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GameCenterEnabledVersionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/gameCenterEnabledVersions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GameCenterEnabledVersionsResponse> appsGameCenterEnabledVersionsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "filter[platform]", description = "filter by attribute 'platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[platform]", required = false) List<String> filterPlatform,
        @Parameter(name = "filter[versionString]", description = "filter by attribute 'versionString'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[versionString]", required = false) List<String> filterVersionString,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[gameCenterEnabledVersions]", description = "the fields to include for returned resources of type gameCenterEnabledVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[gameCenterEnabledVersions]", required = false) List<String> fieldsGameCenterEnabledVersions,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"compatibleVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"versionString\" : \"versionString\", \"iconAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"compatibleVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"versionString\" : \"versionString\", \"iconAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"compatibleVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"versionString\" : \"versionString\", \"iconAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"compatibleVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"versionString\" : \"versionString\", \"iconAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps
     *
     * @param filterAppStoreVersionsAppStoreState filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)
     * @param filterAppStoreVersionsPlatform filter by attribute &#39;appStoreVersions.platform&#39; (optional)
     * @param filterBundleId filter by attribute &#39;bundleId&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterSku filter by attribute &#39;sku&#39; (optional)
     * @param filterAppStoreVersions filter by id(s) of related &#39;appStoreVersions&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param existsGameCenterEnabledVersions filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param limitAppInfos maximum number of related appInfos returned (when they are included) (optional)
     * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param limitPrices maximum number of related prices returned (when they are included) (optional)
     * @return List of Apps (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "appsGetCollection",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Apps", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppsResponse> appsGetCollection(
        @Parameter(name = "filter[appStoreVersions.appStoreState]", description = "filter by attribute 'appStoreVersions.appStoreState'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[appStoreVersions.appStoreState]", required = false) List<String> filterAppStoreVersionsAppStoreState,
        @Parameter(name = "filter[appStoreVersions.platform]", description = "filter by attribute 'appStoreVersions.platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[appStoreVersions.platform]", required = false) List<String> filterAppStoreVersionsPlatform,
        @Parameter(name = "filter[bundleId]", description = "filter by attribute 'bundleId'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[bundleId]", required = false) List<String> filterBundleId,
        @Parameter(name = "filter[name]", description = "filter by attribute 'name'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[name]", required = false) List<String> filterName,
        @Parameter(name = "filter[sku]", description = "filter by attribute 'sku'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[sku]", required = false) List<String> filterSku,
        @Parameter(name = "filter[appStoreVersions]", description = "filter by id(s) of related 'appStoreVersions'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[appStoreVersions]", required = false) List<String> filterAppStoreVersions,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "exists[gameCenterEnabledVersions]", description = "filter by existence or non-existence of related 'gameCenterEnabledVersions'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "exists[gameCenterEnabledVersions]", required = false) List<String> existsGameCenterEnabledVersions,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[betaGroups]", description = "the fields to include for returned resources of type betaGroups", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaGroups]", required = false) List<String> fieldsBetaGroups,
        @Parameter(name = "fields[perfPowerMetrics]", description = "the fields to include for returned resources of type perfPowerMetrics", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[perfPowerMetrics]", required = false) List<String> fieldsPerfPowerMetrics,
        @Parameter(name = "fields[appInfos]", description = "the fields to include for returned resources of type appInfos", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appInfos]", required = false) List<String> fieldsAppInfos,
        @Parameter(name = "fields[appPreOrders]", description = "the fields to include for returned resources of type appPreOrders", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreOrders]", required = false) List<String> fieldsAppPreOrders,
        @Parameter(name = "fields[preReleaseVersions]", description = "the fields to include for returned resources of type preReleaseVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[preReleaseVersions]", required = false) List<String> fieldsPreReleaseVersions,
        @Parameter(name = "fields[appPrices]", description = "the fields to include for returned resources of type appPrices", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPrices]", required = false) List<String> fieldsAppPrices,
        @Parameter(name = "fields[inAppPurchases]", description = "the fields to include for returned resources of type inAppPurchases", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[inAppPurchases]", required = false) List<String> fieldsInAppPurchases,
        @Parameter(name = "fields[betaAppReviewDetails]", description = "the fields to include for returned resources of type betaAppReviewDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppReviewDetails]", required = false) List<String> fieldsBetaAppReviewDetails,
        @Parameter(name = "fields[territories]", description = "the fields to include for returned resources of type territories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[territories]", required = false) List<String> fieldsTerritories,
        @Parameter(name = "fields[gameCenterEnabledVersions]", description = "the fields to include for returned resources of type gameCenterEnabledVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[gameCenterEnabledVersions]", required = false) List<String> fieldsGameCenterEnabledVersions,
        @Parameter(name = "fields[appStoreVersions]", description = "the fields to include for returned resources of type appStoreVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersions]", required = false) List<String> fieldsAppStoreVersions,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "fields[betaAppLocalizations]", description = "the fields to include for returned resources of type betaAppLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppLocalizations]", required = false) List<String> fieldsBetaAppLocalizations,
        @Parameter(name = "fields[betaLicenseAgreements]", description = "the fields to include for returned resources of type betaLicenseAgreements", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaLicenseAgreements]", required = false) List<String> fieldsBetaLicenseAgreements,
        @Parameter(name = "fields[endUserLicenseAgreements]", description = "the fields to include for returned resources of type endUserLicenseAgreements", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[endUserLicenseAgreements]", required = false) List<String> fieldsEndUserLicenseAgreements,
        @Max(50) @Parameter(name = "limit[appInfos]", description = "maximum number of related appInfos returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appInfos]", required = false) Integer limitAppInfos,
        @Max(50) @Parameter(name = "limit[appStoreVersions]", description = "maximum number of related appStoreVersions returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appStoreVersions]", required = false) Integer limitAppStoreVersions,
        @Max(50) @Parameter(name = "limit[availableTerritories]", description = "maximum number of related availableTerritories returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[availableTerritories]", required = false) Integer limitAvailableTerritories,
        @Max(50) @Parameter(name = "limit[betaAppLocalizations]", description = "maximum number of related betaAppLocalizations returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[betaAppLocalizations]", required = false) Integer limitBetaAppLocalizations,
        @Max(50) @Parameter(name = "limit[betaGroups]", description = "maximum number of related betaGroups returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[betaGroups]", required = false) Integer limitBetaGroups,
        @Max(50) @Parameter(name = "limit[builds]", description = "maximum number of related builds returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[builds]", required = false) Integer limitBuilds,
        @Max(50) @Parameter(name = "limit[gameCenterEnabledVersions]", description = "maximum number of related gameCenterEnabledVersions returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[gameCenterEnabledVersions]", required = false) Integer limitGameCenterEnabledVersions,
        @Max(50) @Parameter(name = "limit[inAppPurchases]", description = "maximum number of related inAppPurchases returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[inAppPurchases]", required = false) Integer limitInAppPurchases,
        @Max(50) @Parameter(name = "limit[preReleaseVersions]", description = "maximum number of related preReleaseVersions returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[preReleaseVersions]", required = false) Integer limitPreReleaseVersions,
        @Max(50) @Parameter(name = "limit[prices]", description = "maximum number of related prices returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[prices]", required = false) Integer limitPrices
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsAppInfos the fields to include for returned resources of type appInfos (optional)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param limitAppInfos maximum number of related appInfos returned (when they are included) (optional)
     * @param limitAppStoreVersions maximum number of related appStoreVersions returned (when they are included) (optional)
     * @param limitAvailableTerritories maximum number of related availableTerritories returned (when they are included) (optional)
     * @param limitBetaAppLocalizations maximum number of related betaAppLocalizations returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @param limitGameCenterEnabledVersions maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     * @param limitInAppPurchases maximum number of related inAppPurchases returned (when they are included) (optional)
     * @param limitPreReleaseVersions maximum number of related preReleaseVersions returned (when they are included) (optional)
     * @param limitPrices maximum number of related prices returned (when they are included) (optional)
     * @return Single App (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsGetInstance",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single App", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppResponse> appsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[betaGroups]", description = "the fields to include for returned resources of type betaGroups", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaGroups]", required = false) List<String> fieldsBetaGroups,
        @Parameter(name = "fields[perfPowerMetrics]", description = "the fields to include for returned resources of type perfPowerMetrics", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[perfPowerMetrics]", required = false) List<String> fieldsPerfPowerMetrics,
        @Parameter(name = "fields[appInfos]", description = "the fields to include for returned resources of type appInfos", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appInfos]", required = false) List<String> fieldsAppInfos,
        @Parameter(name = "fields[appPreOrders]", description = "the fields to include for returned resources of type appPreOrders", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreOrders]", required = false) List<String> fieldsAppPreOrders,
        @Parameter(name = "fields[preReleaseVersions]", description = "the fields to include for returned resources of type preReleaseVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[preReleaseVersions]", required = false) List<String> fieldsPreReleaseVersions,
        @Parameter(name = "fields[appPrices]", description = "the fields to include for returned resources of type appPrices", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPrices]", required = false) List<String> fieldsAppPrices,
        @Parameter(name = "fields[inAppPurchases]", description = "the fields to include for returned resources of type inAppPurchases", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[inAppPurchases]", required = false) List<String> fieldsInAppPurchases,
        @Parameter(name = "fields[betaAppReviewDetails]", description = "the fields to include for returned resources of type betaAppReviewDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppReviewDetails]", required = false) List<String> fieldsBetaAppReviewDetails,
        @Parameter(name = "fields[territories]", description = "the fields to include for returned resources of type territories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[territories]", required = false) List<String> fieldsTerritories,
        @Parameter(name = "fields[gameCenterEnabledVersions]", description = "the fields to include for returned resources of type gameCenterEnabledVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[gameCenterEnabledVersions]", required = false) List<String> fieldsGameCenterEnabledVersions,
        @Parameter(name = "fields[appStoreVersions]", description = "the fields to include for returned resources of type appStoreVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersions]", required = false) List<String> fieldsAppStoreVersions,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "fields[betaAppLocalizations]", description = "the fields to include for returned resources of type betaAppLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppLocalizations]", required = false) List<String> fieldsBetaAppLocalizations,
        @Parameter(name = "fields[betaLicenseAgreements]", description = "the fields to include for returned resources of type betaLicenseAgreements", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaLicenseAgreements]", required = false) List<String> fieldsBetaLicenseAgreements,
        @Parameter(name = "fields[endUserLicenseAgreements]", description = "the fields to include for returned resources of type endUserLicenseAgreements", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[endUserLicenseAgreements]", required = false) List<String> fieldsEndUserLicenseAgreements,
        @Max(50) @Parameter(name = "limit[appInfos]", description = "maximum number of related appInfos returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appInfos]", required = false) Integer limitAppInfos,
        @Max(50) @Parameter(name = "limit[appStoreVersions]", description = "maximum number of related appStoreVersions returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[appStoreVersions]", required = false) Integer limitAppStoreVersions,
        @Max(50) @Parameter(name = "limit[availableTerritories]", description = "maximum number of related availableTerritories returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[availableTerritories]", required = false) Integer limitAvailableTerritories,
        @Max(50) @Parameter(name = "limit[betaAppLocalizations]", description = "maximum number of related betaAppLocalizations returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[betaAppLocalizations]", required = false) Integer limitBetaAppLocalizations,
        @Max(50) @Parameter(name = "limit[betaGroups]", description = "maximum number of related betaGroups returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[betaGroups]", required = false) Integer limitBetaGroups,
        @Max(50) @Parameter(name = "limit[builds]", description = "maximum number of related builds returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[builds]", required = false) Integer limitBuilds,
        @Max(50) @Parameter(name = "limit[gameCenterEnabledVersions]", description = "maximum number of related gameCenterEnabledVersions returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[gameCenterEnabledVersions]", required = false) Integer limitGameCenterEnabledVersions,
        @Max(50) @Parameter(name = "limit[inAppPurchases]", description = "maximum number of related inAppPurchases returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[inAppPurchases]", required = false) Integer limitInAppPurchases,
        @Max(50) @Parameter(name = "limit[preReleaseVersions]", description = "maximum number of related preReleaseVersions returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[preReleaseVersions]", required = false) Integer limitPreReleaseVersions,
        @Max(50) @Parameter(name = "limit[prices]", description = "maximum number of related prices returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[prices]", required = false) Integer limitPrices
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/inAppPurchases
     *
     * @param id the id of the requested resource (required)
     * @param filterInAppPurchaseType filter by attribute &#39;inAppPurchaseType&#39; (optional)
     * @param filterCanBeSubmitted filter by canBeSubmitted (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsInAppPurchasesGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InAppPurchasesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/inAppPurchases",
        produces = { "application/json" }
    )
    
    default ResponseEntity<InAppPurchasesResponse> appsInAppPurchasesGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "filter[inAppPurchaseType]", description = "filter by attribute 'inAppPurchaseType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[inAppPurchaseType]", required = false) List<String> filterInAppPurchaseType,
        @Parameter(name = "filter[canBeSubmitted]", description = "filter by canBeSubmitted", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[canBeSubmitted]", required = false) List<String> filterCanBeSubmitted,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[inAppPurchases]", description = "the fields to include for returned resources of type inAppPurchases", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[inAppPurchases]", required = false) List<String> fieldsInAppPurchases,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"productId\" : \"productId\", \"state\" : \"CREATED\", \"inAppPurchaseType\" : \"AUTOMATICALLY_RENEWABLE_SUBSCRIPTION\", \"referenceName\" : \"referenceName\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"relationships\" : { \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"productId\" : \"productId\", \"state\" : \"CREATED\", \"inAppPurchaseType\" : \"AUTOMATICALLY_RENEWABLE_SUBSCRIPTION\", \"referenceName\" : \"referenceName\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/perfPowerMetrics
     *
     * @param id the id of the requested resource (required)
     * @param filterDeviceType filter by attribute &#39;deviceType&#39; (optional)
     * @param filterMetricType filter by attribute &#39;metricType&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsPerfPowerMetricsGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PerfPowerMetricsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/perfPowerMetrics",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PerfPowerMetricsResponse> appsPerfPowerMetricsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "filter[deviceType]", description = "filter by attribute 'deviceType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[deviceType]", required = false) List<String> filterDeviceType,
        @Parameter(name = "filter[metricType]", description = "filter by attribute 'metricType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[metricType]", required = false) List<String> filterMetricType,
        @Parameter(name = "filter[platform]", description = "filter by attribute 'platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[platform]", required = false) List<String> filterPlatform
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"deviceType\" : \"deviceType\", \"metricType\" : \"DISK\", \"platform\" : \"IOS\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"perfPowerMetrics\" }, { \"attributes\" : { \"deviceType\" : \"deviceType\", \"metricType\" : \"DISK\", \"platform\" : \"IOS\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"perfPowerMetrics\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/preOrder
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppPreOrders the fields to include for returned resources of type appPreOrders (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsPreOrderGetToOneRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPreOrderResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/preOrder",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPreOrderResponse> appsPreOrderGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appPreOrders]", description = "the fields to include for returned resources of type appPreOrders", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPreOrders]", required = false) List<String> fieldsAppPreOrders
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"preOrderAvailableDate\" : \"2000-01-23\", \"appReleaseDate\" : \"2000-01-23\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/preReleaseVersions
     *
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsPreReleaseVersionsGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PreReleaseVersionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/preReleaseVersions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PreReleaseVersionsResponse> appsPreReleaseVersionsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[preReleaseVersions]", description = "the fields to include for returned resources of type preReleaseVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[preReleaseVersions]", required = false) List<String> fieldsPreReleaseVersions,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"version\" : \"version\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"version\" : \"version\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/apps/{id}/prices
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppPrices the fields to include for returned resources of type appPrices (optional)
     * @param fieldsAppPriceTiers the fields to include for returned resources of type appPriceTiers (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "appsPricesGetToManyRelated",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppPricesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/apps/{id}/prices",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppPricesResponse> appsPricesGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appPrices]", description = "the fields to include for returned resources of type appPrices", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPrices]", required = false) List<String> fieldsAppPrices,
        @Parameter(name = "fields[appPriceTiers]", description = "the fields to include for returned resources of type appPriceTiers", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appPriceTiers]", required = false) List<String> fieldsAppPriceTiers,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"priceTier\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPriceTiers\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/apps/{id}
     *
     * @param id the id of the requested resource (required)
     * @param appUpdateRequest App representation (required)
     * @return Single App (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "appsUpdateInstance",
        tags = { "Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single App", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/apps/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AppResponse> appsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "AppUpdateRequest", description = "App representation", required = true) @Valid @RequestBody AppUpdateRequest appUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaAppLocalizations/{id}/app
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaAppLocalizationsAppGetToOneRelated",
        tags = { "BetaAppLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaAppLocalizations/{id}/app",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppResponse> betaAppLocalizationsAppGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/betaAppLocalizations
     *
     * @param betaAppLocalizationCreateRequest BetaAppLocalization representation (required)
     * @return Single BetaAppLocalization (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaAppLocalizationsCreateInstance",
        tags = { "BetaAppLocalizations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single BetaAppLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/betaAppLocalizations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaAppLocalizationResponse> betaAppLocalizationsCreateInstance(
        @Parameter(name = "BetaAppLocalizationCreateRequest", description = "BetaAppLocalization representation", required = true) @Valid @RequestBody BetaAppLocalizationCreateRequest betaAppLocalizationCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"marketingUrl\" : \"marketingUrl\", \"description\" : \"description\", \"locale\" : \"locale\", \"tvOsPrivacyPolicy\" : \"tvOsPrivacyPolicy\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\", \"feedbackEmail\" : \"feedbackEmail\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/betaAppLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaAppLocalizationsDeleteInstance",
        tags = { "BetaAppLocalizations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/betaAppLocalizations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> betaAppLocalizationsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaAppLocalizations
     *
     * @param filterLocale filter by attribute &#39;locale&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return List of BetaAppLocalizations (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "betaAppLocalizationsGetCollection",
        tags = { "BetaAppLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of BetaAppLocalizations", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppLocalizationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaAppLocalizations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaAppLocalizationsResponse> betaAppLocalizationsGetCollection(
        @Parameter(name = "filter[locale]", description = "filter by attribute 'locale'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[locale]", required = false) List<String> filterLocale,
        @Parameter(name = "filter[app]", description = "filter by id(s) of related 'app'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[app]", required = false) List<String> filterApp,
        @Parameter(name = "fields[betaAppLocalizations]", description = "the fields to include for returned resources of type betaAppLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppLocalizations]", required = false) List<String> fieldsBetaAppLocalizations,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"marketingUrl\" : \"marketingUrl\", \"description\" : \"description\", \"locale\" : \"locale\", \"tvOsPrivacyPolicy\" : \"tvOsPrivacyPolicy\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\", \"feedbackEmail\" : \"feedbackEmail\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"marketingUrl\" : \"marketingUrl\", \"description\" : \"description\", \"locale\" : \"locale\", \"tvOsPrivacyPolicy\" : \"tvOsPrivacyPolicy\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\", \"feedbackEmail\" : \"feedbackEmail\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaAppLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppLocalizations the fields to include for returned resources of type betaAppLocalizations (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Single BetaAppLocalization (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaAppLocalizationsGetInstance",
        tags = { "BetaAppLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaAppLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaAppLocalizations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaAppLocalizationResponse> betaAppLocalizationsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaAppLocalizations]", description = "the fields to include for returned resources of type betaAppLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppLocalizations]", required = false) List<String> fieldsBetaAppLocalizations,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"marketingUrl\" : \"marketingUrl\", \"description\" : \"description\", \"locale\" : \"locale\", \"tvOsPrivacyPolicy\" : \"tvOsPrivacyPolicy\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\", \"feedbackEmail\" : \"feedbackEmail\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/betaAppLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param betaAppLocalizationUpdateRequest BetaAppLocalization representation (required)
     * @return Single BetaAppLocalization (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaAppLocalizationsUpdateInstance",
        tags = { "BetaAppLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaAppLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/betaAppLocalizations/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaAppLocalizationResponse> betaAppLocalizationsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaAppLocalizationUpdateRequest", description = "BetaAppLocalization representation", required = true) @Valid @RequestBody BetaAppLocalizationUpdateRequest betaAppLocalizationUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"marketingUrl\" : \"marketingUrl\", \"description\" : \"description\", \"locale\" : \"locale\", \"tvOsPrivacyPolicy\" : \"tvOsPrivacyPolicy\", \"privacyPolicyUrl\" : \"privacyPolicyUrl\", \"feedbackEmail\" : \"feedbackEmail\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaAppReviewDetails/{id}/app
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaAppReviewDetailsAppGetToOneRelated",
        tags = { "BetaAppReviewDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaAppReviewDetails/{id}/app",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppResponse> betaAppReviewDetailsAppGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaAppReviewDetails
     *
     * @param filterApp filter by id(s) of related &#39;app&#39; (required)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return List of BetaAppReviewDetails (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "betaAppReviewDetailsGetCollection",
        tags = { "BetaAppReviewDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of BetaAppReviewDetails", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppReviewDetailsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaAppReviewDetails",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaAppReviewDetailsResponse> betaAppReviewDetailsGetCollection(
        @NotNull @Parameter(name = "filter[app]", description = "filter by id(s) of related 'app'", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[app]", required = true) List<String> filterApp,
        @Parameter(name = "fields[betaAppReviewDetails]", description = "the fields to include for returned resources of type betaAppReviewDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppReviewDetails]", required = false) List<String> fieldsBetaAppReviewDetails,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"demoAccountPassword\" : \"demoAccountPassword\", \"notes\" : \"notes\", \"contactEmail\" : \"contactEmail\", \"contactFirstName\" : \"contactFirstName\", \"demoAccountRequired\" : true, \"demoAccountName\" : \"demoAccountName\", \"contactLastName\" : \"contactLastName\", \"contactPhone\" : \"contactPhone\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"demoAccountPassword\" : \"demoAccountPassword\", \"notes\" : \"notes\", \"contactEmail\" : \"contactEmail\", \"contactFirstName\" : \"contactFirstName\", \"demoAccountRequired\" : true, \"demoAccountName\" : \"demoAccountName\", \"contactLastName\" : \"contactLastName\", \"contactPhone\" : \"contactPhone\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaAppReviewDetails/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewDetails the fields to include for returned resources of type betaAppReviewDetails (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Single BetaAppReviewDetail (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaAppReviewDetailsGetInstance",
        tags = { "BetaAppReviewDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaAppReviewDetail", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppReviewDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaAppReviewDetails/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaAppReviewDetailResponse> betaAppReviewDetailsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaAppReviewDetails]", description = "the fields to include for returned resources of type betaAppReviewDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppReviewDetails]", required = false) List<String> fieldsBetaAppReviewDetails,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"demoAccountPassword\" : \"demoAccountPassword\", \"notes\" : \"notes\", \"contactEmail\" : \"contactEmail\", \"contactFirstName\" : \"contactFirstName\", \"demoAccountRequired\" : true, \"demoAccountName\" : \"demoAccountName\", \"contactLastName\" : \"contactLastName\", \"contactPhone\" : \"contactPhone\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/betaAppReviewDetails/{id}
     *
     * @param id the id of the requested resource (required)
     * @param betaAppReviewDetailUpdateRequest BetaAppReviewDetail representation (required)
     * @return Single BetaAppReviewDetail (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaAppReviewDetailsUpdateInstance",
        tags = { "BetaAppReviewDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaAppReviewDetail", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppReviewDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/betaAppReviewDetails/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaAppReviewDetailResponse> betaAppReviewDetailsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaAppReviewDetailUpdateRequest", description = "BetaAppReviewDetail representation", required = true) @Valid @RequestBody BetaAppReviewDetailUpdateRequest betaAppReviewDetailUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"demoAccountPassword\" : \"demoAccountPassword\", \"notes\" : \"notes\", \"contactEmail\" : \"contactEmail\", \"contactFirstName\" : \"contactFirstName\", \"demoAccountRequired\" : true, \"demoAccountName\" : \"demoAccountName\", \"contactLastName\" : \"contactLastName\", \"contactPhone\" : \"contactPhone\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaAppReviewSubmissions/{id}/build
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaAppReviewSubmissionsBuildGetToOneRelated",
        tags = { "BetaAppReviewSubmissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaAppReviewSubmissions/{id}/build",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildResponse> betaAppReviewSubmissionsBuildGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/betaAppReviewSubmissions
     *
     * @param betaAppReviewSubmissionCreateRequest BetaAppReviewSubmission representation (required)
     * @return Single BetaAppReviewSubmission (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaAppReviewSubmissionsCreateInstance",
        tags = { "BetaAppReviewSubmissions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single BetaAppReviewSubmission", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppReviewSubmissionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/betaAppReviewSubmissions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaAppReviewSubmissionResponse> betaAppReviewSubmissionsCreateInstance(
        @Parameter(name = "BetaAppReviewSubmissionCreateRequest", description = "BetaAppReviewSubmission representation", required = true) @Valid @RequestBody BetaAppReviewSubmissionCreateRequest betaAppReviewSubmissionCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaAppReviewSubmissions
     *
     * @param filterBuild filter by id(s) of related &#39;build&#39; (required)
     * @param filterBetaReviewState filter by attribute &#39;betaReviewState&#39; (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @return List of BetaAppReviewSubmissions (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "betaAppReviewSubmissionsGetCollection",
        tags = { "BetaAppReviewSubmissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of BetaAppReviewSubmissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppReviewSubmissionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaAppReviewSubmissions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaAppReviewSubmissionsResponse> betaAppReviewSubmissionsGetCollection(
        @NotNull @Parameter(name = "filter[build]", description = "filter by id(s) of related 'build'", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[build]", required = true) List<String> filterBuild,
        @Parameter(name = "filter[betaReviewState]", description = "filter by attribute 'betaReviewState'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[betaReviewState]", required = false) List<String> filterBetaReviewState,
        @Parameter(name = "fields[betaAppReviewSubmissions]", description = "the fields to include for returned resources of type betaAppReviewSubmissions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppReviewSubmissions]", required = false) List<String> fieldsBetaAppReviewSubmissions,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaAppReviewSubmissions/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @return Single BetaAppReviewSubmission (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaAppReviewSubmissionsGetInstance",
        tags = { "BetaAppReviewSubmissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaAppReviewSubmission", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppReviewSubmissionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaAppReviewSubmissions/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaAppReviewSubmissionResponse> betaAppReviewSubmissionsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaAppReviewSubmissions]", description = "the fields to include for returned resources of type betaAppReviewSubmissions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppReviewSubmissions]", required = false) List<String> fieldsBetaAppReviewSubmissions,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaBuildLocalizations/{id}/build
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaBuildLocalizationsBuildGetToOneRelated",
        tags = { "BetaBuildLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaBuildLocalizations/{id}/build",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildResponse> betaBuildLocalizationsBuildGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/betaBuildLocalizations
     *
     * @param betaBuildLocalizationCreateRequest BetaBuildLocalization representation (required)
     * @return Single BetaBuildLocalization (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaBuildLocalizationsCreateInstance",
        tags = { "BetaBuildLocalizations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single BetaBuildLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaBuildLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/betaBuildLocalizations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaBuildLocalizationResponse> betaBuildLocalizationsCreateInstance(
        @Parameter(name = "BetaBuildLocalizationCreateRequest", description = "BetaBuildLocalization representation", required = true) @Valid @RequestBody BetaBuildLocalizationCreateRequest betaBuildLocalizationCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"locale\" : \"locale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/betaBuildLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaBuildLocalizationsDeleteInstance",
        tags = { "BetaBuildLocalizations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/betaBuildLocalizations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> betaBuildLocalizationsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaBuildLocalizations
     *
     * @param filterLocale filter by attribute &#39;locale&#39; (optional)
     * @param filterBuild filter by id(s) of related &#39;build&#39; (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @return List of BetaBuildLocalizations (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "betaBuildLocalizationsGetCollection",
        tags = { "BetaBuildLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of BetaBuildLocalizations", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaBuildLocalizationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaBuildLocalizations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaBuildLocalizationsResponse> betaBuildLocalizationsGetCollection(
        @Parameter(name = "filter[locale]", description = "filter by attribute 'locale'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[locale]", required = false) List<String> filterLocale,
        @Parameter(name = "filter[build]", description = "filter by id(s) of related 'build'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[build]", required = false) List<String> filterBuild,
        @Parameter(name = "fields[betaBuildLocalizations]", description = "the fields to include for returned resources of type betaBuildLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaBuildLocalizations]", required = false) List<String> fieldsBetaBuildLocalizations,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"locale\" : \"locale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"locale\" : \"locale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaBuildLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @return Single BetaBuildLocalization (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaBuildLocalizationsGetInstance",
        tags = { "BetaBuildLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaBuildLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaBuildLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaBuildLocalizations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaBuildLocalizationResponse> betaBuildLocalizationsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaBuildLocalizations]", description = "the fields to include for returned resources of type betaBuildLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaBuildLocalizations]", required = false) List<String> fieldsBetaBuildLocalizations,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"locale\" : \"locale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/betaBuildLocalizations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param betaBuildLocalizationUpdateRequest BetaBuildLocalization representation (required)
     * @return Single BetaBuildLocalization (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaBuildLocalizationsUpdateInstance",
        tags = { "BetaBuildLocalizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaBuildLocalization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaBuildLocalizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/betaBuildLocalizations/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaBuildLocalizationResponse> betaBuildLocalizationsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaBuildLocalizationUpdateRequest", description = "BetaBuildLocalization representation", required = true) @Valid @RequestBody BetaBuildLocalizationUpdateRequest betaBuildLocalizationUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"locale\" : \"locale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaGroups/{id}/app
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaGroupsAppGetToOneRelated",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaGroups/{id}/app",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppResponse> betaGroupsAppGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/betaGroups/{id}/relationships/betaTesters
     *
     * @param id the id of the requested resource (required)
     * @param betaGroupBetaTestersLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaGroupsBetaTestersCreateToManyRelationship",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/betaGroups/{id}/relationships/betaTesters",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> betaGroupsBetaTestersCreateToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaGroupBetaTestersLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BetaGroupBetaTestersLinkagesRequest betaGroupBetaTestersLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/betaGroups/{id}/relationships/betaTesters
     *
     * @param id the id of the requested resource (required)
     * @param betaGroupBetaTestersLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaGroupsBetaTestersDeleteToManyRelationship",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/betaGroups/{id}/relationships/betaTesters",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> betaGroupsBetaTestersDeleteToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaGroupBetaTestersLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BetaGroupBetaTestersLinkagesRequest betaGroupBetaTestersLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaGroups/{id}/betaTesters
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaGroupsBetaTestersGetToManyRelated",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaTestersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaGroups/{id}/betaTesters",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaTestersResponse> betaGroupsBetaTestersGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaTesters]", description = "the fields to include for returned resources of type betaTesters", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaTesters]", required = false) List<String> fieldsBetaTesters,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"email\" : \"email\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"email\" : \"email\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaGroups/{id}/relationships/betaTesters
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related linkages (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaGroupsBetaTestersGetToManyRelationship",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related linkages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaGroupBetaTestersLinkagesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaGroups/{id}/relationships/betaTesters",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaGroupBetaTestersLinkagesResponse> betaGroupsBetaTestersGetToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/betaGroups/{id}/relationships/builds
     *
     * @param id the id of the requested resource (required)
     * @param betaGroupBuildsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaGroupsBuildsCreateToManyRelationship",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/betaGroups/{id}/relationships/builds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> betaGroupsBuildsCreateToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaGroupBuildsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BetaGroupBuildsLinkagesRequest betaGroupBuildsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/betaGroups/{id}/relationships/builds
     *
     * @param id the id of the requested resource (required)
     * @param betaGroupBuildsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaGroupsBuildsDeleteToManyRelationship",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/betaGroups/{id}/relationships/builds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> betaGroupsBuildsDeleteToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaGroupBuildsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BetaGroupBuildsLinkagesRequest betaGroupBuildsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaGroups/{id}/builds
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaGroupsBuildsGetToManyRelated",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaGroups/{id}/builds",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildsResponse> betaGroupsBuildsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaGroups/{id}/relationships/builds
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related linkages (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaGroupsBuildsGetToManyRelationship",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related linkages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaGroupBuildsLinkagesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaGroups/{id}/relationships/builds",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaGroupBuildsLinkagesResponse> betaGroupsBuildsGetToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/betaGroups
     *
     * @param betaGroupCreateRequest BetaGroup representation (required)
     * @return Single BetaGroup (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaGroupsCreateInstance",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single BetaGroup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaGroupResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/betaGroups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaGroupResponse> betaGroupsCreateInstance(
        @Parameter(name = "BetaGroupCreateRequest", description = "BetaGroup representation", required = true) @Valid @RequestBody BetaGroupCreateRequest betaGroupCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"publicLinkLimit\" : 0, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicLink\" : \"publicLink\", \"publicLinkEnabled\" : true, \"publicLinkId\" : \"publicLinkId\", \"isInternalGroup\" : true, \"name\" : \"name\", \"feedbackEnabled\" : true, \"publicLinkLimitEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaGroups\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/betaGroups/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaGroupsDeleteInstance",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/betaGroups/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> betaGroupsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaGroups
     *
     * @param filterIsInternalGroup filter by attribute &#39;isInternalGroup&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPublicLink filter by attribute &#39;publicLink&#39; (optional)
     * @param filterPublicLinkEnabled filter by attribute &#39;publicLinkEnabled&#39; (optional)
     * @param filterPublicLinkLimitEnabled filter by attribute &#39;publicLinkLimitEnabled&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaTesters maximum number of related betaTesters returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return List of BetaGroups (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "betaGroupsGetCollection",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of BetaGroups", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaGroupsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaGroups",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaGroupsResponse> betaGroupsGetCollection(
        @Parameter(name = "filter[isInternalGroup]", description = "filter by attribute 'isInternalGroup'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[isInternalGroup]", required = false) List<String> filterIsInternalGroup,
        @Parameter(name = "filter[name]", description = "filter by attribute 'name'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[name]", required = false) List<String> filterName,
        @Parameter(name = "filter[publicLink]", description = "filter by attribute 'publicLink'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[publicLink]", required = false) List<String> filterPublicLink,
        @Parameter(name = "filter[publicLinkEnabled]", description = "filter by attribute 'publicLinkEnabled'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[publicLinkEnabled]", required = false) List<String> filterPublicLinkEnabled,
        @Parameter(name = "filter[publicLinkLimitEnabled]", description = "filter by attribute 'publicLinkLimitEnabled'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[publicLinkLimitEnabled]", required = false) List<String> filterPublicLinkLimitEnabled,
        @Parameter(name = "filter[app]", description = "filter by id(s) of related 'app'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[app]", required = false) List<String> filterApp,
        @Parameter(name = "filter[builds]", description = "filter by id(s) of related 'builds'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[builds]", required = false) List<String> filterBuilds,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[betaGroups]", description = "the fields to include for returned resources of type betaGroups", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaGroups]", required = false) List<String> fieldsBetaGroups,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "fields[betaTesters]", description = "the fields to include for returned resources of type betaTesters", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaTesters]", required = false) List<String> fieldsBetaTesters,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[betaTesters]", description = "maximum number of related betaTesters returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[betaTesters]", required = false) Integer limitBetaTesters,
        @Max(1000) @Parameter(name = "limit[builds]", description = "maximum number of related builds returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[builds]", required = false) Integer limitBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"publicLinkLimit\" : 0, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicLink\" : \"publicLink\", \"publicLinkEnabled\" : true, \"publicLinkId\" : \"publicLinkId\", \"isInternalGroup\" : true, \"name\" : \"name\", \"feedbackEnabled\" : true, \"publicLinkLimitEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"publicLinkLimit\" : 0, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicLink\" : \"publicLink\", \"publicLinkEnabled\" : true, \"publicLinkId\" : \"publicLinkId\", \"isInternalGroup\" : true, \"name\" : \"name\", \"feedbackEnabled\" : true, \"publicLinkLimitEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaGroups/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaTesters maximum number of related betaTesters returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return Single BetaGroup (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaGroupsGetInstance",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaGroup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaGroupResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaGroups/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaGroupResponse> betaGroupsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaGroups]", description = "the fields to include for returned resources of type betaGroups", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaGroups]", required = false) List<String> fieldsBetaGroups,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "fields[betaTesters]", description = "the fields to include for returned resources of type betaTesters", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaTesters]", required = false) List<String> fieldsBetaTesters,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[betaTesters]", description = "maximum number of related betaTesters returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[betaTesters]", required = false) Integer limitBetaTesters,
        @Max(1000) @Parameter(name = "limit[builds]", description = "maximum number of related builds returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[builds]", required = false) Integer limitBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"publicLinkLimit\" : 0, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicLink\" : \"publicLink\", \"publicLinkEnabled\" : true, \"publicLinkId\" : \"publicLinkId\", \"isInternalGroup\" : true, \"name\" : \"name\", \"feedbackEnabled\" : true, \"publicLinkLimitEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaGroups\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/betaGroups/{id}
     *
     * @param id the id of the requested resource (required)
     * @param betaGroupUpdateRequest BetaGroup representation (required)
     * @return Single BetaGroup (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaGroupsUpdateInstance",
        tags = { "BetaGroups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaGroup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaGroupResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/betaGroups/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaGroupResponse> betaGroupsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaGroupUpdateRequest", description = "BetaGroup representation", required = true) @Valid @RequestBody BetaGroupUpdateRequest betaGroupUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"publicLinkLimit\" : 0, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicLink\" : \"publicLink\", \"publicLinkEnabled\" : true, \"publicLinkId\" : \"publicLinkId\", \"isInternalGroup\" : true, \"name\" : \"name\", \"feedbackEnabled\" : true, \"publicLinkLimitEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaGroups\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaLicenseAgreements/{id}/app
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaLicenseAgreementsAppGetToOneRelated",
        tags = { "BetaLicenseAgreements" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaLicenseAgreements/{id}/app",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppResponse> betaLicenseAgreementsAppGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaLicenseAgreements
     *
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return List of BetaLicenseAgreements (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "betaLicenseAgreementsGetCollection",
        tags = { "BetaLicenseAgreements" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of BetaLicenseAgreements", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaLicenseAgreementsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaLicenseAgreements",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaLicenseAgreementsResponse> betaLicenseAgreementsGetCollection(
        @Parameter(name = "filter[app]", description = "filter by id(s) of related 'app'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[app]", required = false) List<String> filterApp,
        @Parameter(name = "fields[betaLicenseAgreements]", description = "the fields to include for returned resources of type betaLicenseAgreements", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaLicenseAgreements]", required = false) List<String> fieldsBetaLicenseAgreements,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"agreementText\" : \"agreementText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"agreementText\" : \"agreementText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaLicenseAgreements/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaLicenseAgreements the fields to include for returned resources of type betaLicenseAgreements (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Single BetaLicenseAgreement (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaLicenseAgreementsGetInstance",
        tags = { "BetaLicenseAgreements" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaLicenseAgreement", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaLicenseAgreementResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaLicenseAgreements/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaLicenseAgreementResponse> betaLicenseAgreementsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaLicenseAgreements]", description = "the fields to include for returned resources of type betaLicenseAgreements", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaLicenseAgreements]", required = false) List<String> fieldsBetaLicenseAgreements,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"agreementText\" : \"agreementText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/betaLicenseAgreements/{id}
     *
     * @param id the id of the requested resource (required)
     * @param betaLicenseAgreementUpdateRequest BetaLicenseAgreement representation (required)
     * @return Single BetaLicenseAgreement (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaLicenseAgreementsUpdateInstance",
        tags = { "BetaLicenseAgreements" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaLicenseAgreement", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaLicenseAgreementResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/betaLicenseAgreements/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaLicenseAgreementResponse> betaLicenseAgreementsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaLicenseAgreementUpdateRequest", description = "BetaLicenseAgreement representation", required = true) @Valid @RequestBody BetaLicenseAgreementUpdateRequest betaLicenseAgreementUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"agreementText\" : \"agreementText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/betaTesterInvitations
     *
     * @param betaTesterInvitationCreateRequest BetaTesterInvitation representation (required)
     * @return Single BetaTesterInvitation (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaTesterInvitationsCreateInstance",
        tags = { "BetaTesterInvitations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single BetaTesterInvitation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaTesterInvitationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/betaTesterInvitations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaTesterInvitationResponse> betaTesterInvitationsCreateInstance(
        @Parameter(name = "BetaTesterInvitationCreateRequest", description = "BetaTesterInvitation representation", required = true) @Valid @RequestBody BetaTesterInvitationCreateRequest betaTesterInvitationCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaTesterInvitations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/betaTesters/{id}/relationships/apps
     *
     * @param id the id of the requested resource (required)
     * @param betaTesterAppsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaTestersAppsDeleteToManyRelationship",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/betaTesters/{id}/relationships/apps",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> betaTestersAppsDeleteToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaTesterAppsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BetaTesterAppsLinkagesRequest betaTesterAppsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaTesters/{id}/apps
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaTestersAppsGetToManyRelated",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaTesters/{id}/apps",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppsResponse> betaTestersAppsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaTesters/{id}/relationships/apps
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related linkages (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaTestersAppsGetToManyRelationship",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related linkages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaTesterAppsLinkagesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaTesters/{id}/relationships/apps",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaTesterAppsLinkagesResponse> betaTestersAppsGetToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/betaTesters/{id}/relationships/betaGroups
     *
     * @param id the id of the requested resource (required)
     * @param betaTesterBetaGroupsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaTestersBetaGroupsCreateToManyRelationship",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/betaTesters/{id}/relationships/betaGroups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> betaTestersBetaGroupsCreateToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaTesterBetaGroupsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/betaTesters/{id}/relationships/betaGroups
     *
     * @param id the id of the requested resource (required)
     * @param betaTesterBetaGroupsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaTestersBetaGroupsDeleteToManyRelationship",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/betaTesters/{id}/relationships/betaGroups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> betaTestersBetaGroupsDeleteToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaTesterBetaGroupsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BetaTesterBetaGroupsLinkagesRequest betaTesterBetaGroupsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaTesters/{id}/betaGroups
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaTestersBetaGroupsGetToManyRelated",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaGroupsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaTesters/{id}/betaGroups",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaGroupsResponse> betaTestersBetaGroupsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaGroups]", description = "the fields to include for returned resources of type betaGroups", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaGroups]", required = false) List<String> fieldsBetaGroups,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"publicLinkLimit\" : 0, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicLink\" : \"publicLink\", \"publicLinkEnabled\" : true, \"publicLinkId\" : \"publicLinkId\", \"isInternalGroup\" : true, \"name\" : \"name\", \"feedbackEnabled\" : true, \"publicLinkLimitEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"publicLinkLimit\" : 0, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publicLink\" : \"publicLink\", \"publicLinkEnabled\" : true, \"publicLinkId\" : \"publicLinkId\", \"isInternalGroup\" : true, \"name\" : \"name\", \"feedbackEnabled\" : true, \"publicLinkLimitEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaTesters/{id}/relationships/betaGroups
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related linkages (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaTestersBetaGroupsGetToManyRelationship",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related linkages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaTesterBetaGroupsLinkagesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaTesters/{id}/relationships/betaGroups",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaTesterBetaGroupsLinkagesResponse> betaTestersBetaGroupsGetToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/betaTesters/{id}/relationships/builds
     *
     * @param id the id of the requested resource (required)
     * @param betaTesterBuildsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaTestersBuildsCreateToManyRelationship",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/betaTesters/{id}/relationships/builds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> betaTestersBuildsCreateToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaTesterBuildsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/betaTesters/{id}/relationships/builds
     *
     * @param id the id of the requested resource (required)
     * @param betaTesterBuildsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaTestersBuildsDeleteToManyRelationship",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/betaTesters/{id}/relationships/builds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> betaTestersBuildsDeleteToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BetaTesterBuildsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BetaTesterBuildsLinkagesRequest betaTesterBuildsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaTesters/{id}/builds
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaTestersBuildsGetToManyRelated",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaTesters/{id}/builds",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildsResponse> betaTestersBuildsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaTesters/{id}/relationships/builds
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related linkages (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaTestersBuildsGetToManyRelationship",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related linkages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaTesterBuildsLinkagesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaTesters/{id}/relationships/builds",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaTesterBuildsLinkagesResponse> betaTestersBuildsGetToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/betaTesters
     *
     * @param betaTesterCreateRequest BetaTester representation (required)
     * @return Single BetaTester (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaTestersCreateInstance",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single BetaTester", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaTesterResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/betaTesters",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BetaTesterResponse> betaTestersCreateInstance(
        @Parameter(name = "BetaTesterCreateRequest", description = "BetaTester representation", required = true) @Valid @RequestBody BetaTesterCreateRequest betaTesterCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"email\" : \"email\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaTesters\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/betaTesters/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "betaTestersDeleteInstance",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/betaTesters/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> betaTestersDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaTesters
     *
     * @param filterEmail filter by attribute &#39;email&#39; (optional)
     * @param filterFirstName filter by attribute &#39;firstName&#39; (optional)
     * @param filterInviteType filter by attribute &#39;inviteType&#39; (optional)
     * @param filterLastName filter by attribute &#39;lastName&#39; (optional)
     * @param filterApps filter by id(s) of related &#39;apps&#39; (optional)
     * @param filterBetaGroups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return List of BetaTesters (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "betaTestersGetCollection",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of BetaTesters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaTestersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaTesters",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaTestersResponse> betaTestersGetCollection(
        @Parameter(name = "filter[email]", description = "filter by attribute 'email'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[email]", required = false) List<String> filterEmail,
        @Parameter(name = "filter[firstName]", description = "filter by attribute 'firstName'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[firstName]", required = false) List<String> filterFirstName,
        @Parameter(name = "filter[inviteType]", description = "filter by attribute 'inviteType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[inviteType]", required = false) List<String> filterInviteType,
        @Parameter(name = "filter[lastName]", description = "filter by attribute 'lastName'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[lastName]", required = false) List<String> filterLastName,
        @Parameter(name = "filter[apps]", description = "filter by id(s) of related 'apps'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[apps]", required = false) List<String> filterApps,
        @Parameter(name = "filter[betaGroups]", description = "filter by id(s) of related 'betaGroups'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[betaGroups]", required = false) List<String> filterBetaGroups,
        @Parameter(name = "filter[builds]", description = "filter by id(s) of related 'builds'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[builds]", required = false) List<String> filterBuilds,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[betaTesters]", description = "the fields to include for returned resources of type betaTesters", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaTesters]", required = false) List<String> fieldsBetaTesters,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[betaGroups]", description = "the fields to include for returned resources of type betaGroups", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaGroups]", required = false) List<String> fieldsBetaGroups,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[apps]", description = "maximum number of related apps returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[apps]", required = false) Integer limitApps,
        @Max(50) @Parameter(name = "limit[betaGroups]", description = "maximum number of related betaGroups returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[betaGroups]", required = false) Integer limitBetaGroups,
        @Max(50) @Parameter(name = "limit[builds]", description = "maximum number of related builds returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[builds]", required = false) Integer limitBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"email\" : \"email\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"email\" : \"email\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/betaTesters/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBetaGroups the fields to include for returned resources of type betaGroups (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @param limitBetaGroups maximum number of related betaGroups returned (when they are included) (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return Single BetaTester (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "betaTestersGetInstance",
        tags = { "BetaTesters" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BetaTester", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaTesterResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/betaTesters/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaTesterResponse> betaTestersGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaTesters]", description = "the fields to include for returned resources of type betaTesters", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaTesters]", required = false) List<String> fieldsBetaTesters,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[betaGroups]", description = "the fields to include for returned resources of type betaGroups", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaGroups]", required = false) List<String> fieldsBetaGroups,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[apps]", description = "maximum number of related apps returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[apps]", required = false) Integer limitApps,
        @Max(50) @Parameter(name = "limit[betaGroups]", description = "maximum number of related betaGroups returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[betaGroups]", required = false) Integer limitBetaGroups,
        @Max(50) @Parameter(name = "limit[builds]", description = "maximum number of related builds returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[builds]", required = false) Integer limitBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"email\" : \"email\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaTesters\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/buildBetaDetails/{id}/build
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildBetaDetailsBuildGetToOneRelated",
        tags = { "BuildBetaDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/buildBetaDetails/{id}/build",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildResponse> buildBetaDetailsBuildGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/buildBetaDetails
     *
     * @param filterBuild filter by id(s) of related &#39;build&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @return List of BuildBetaDetails (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "buildBetaDetailsGetCollection",
        tags = { "BuildBetaDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of BuildBetaDetails", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildBetaDetailsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/buildBetaDetails",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildBetaDetailsResponse> buildBetaDetailsGetCollection(
        @Parameter(name = "filter[build]", description = "filter by id(s) of related 'build'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[build]", required = false) List<String> filterBuild,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "fields[buildBetaDetails]", description = "the fields to include for returned resources of type buildBetaDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[buildBetaDetails]", required = false) List<String> fieldsBuildBetaDetails,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"autoNotifyEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"autoNotifyEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"buildBetaDetails\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/buildBetaDetails/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @return Single BuildBetaDetail (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildBetaDetailsGetInstance",
        tags = { "BuildBetaDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BuildBetaDetail", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildBetaDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/buildBetaDetails/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildBetaDetailResponse> buildBetaDetailsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[buildBetaDetails]", description = "the fields to include for returned resources of type buildBetaDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[buildBetaDetails]", required = false) List<String> fieldsBuildBetaDetails,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"autoNotifyEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/buildBetaDetails/{id}
     *
     * @param id the id of the requested resource (required)
     * @param buildBetaDetailUpdateRequest BuildBetaDetail representation (required)
     * @return Single BuildBetaDetail (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "buildBetaDetailsUpdateInstance",
        tags = { "BuildBetaDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BuildBetaDetail", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildBetaDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/buildBetaDetails/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BuildBetaDetailResponse> buildBetaDetailsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BuildBetaDetailUpdateRequest", description = "BuildBetaDetail representation", required = true) @Valid @RequestBody BuildBetaDetailUpdateRequest buildBetaDetailUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"autoNotifyEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/buildBetaNotifications
     *
     * @param buildBetaNotificationCreateRequest BuildBetaNotification representation (required)
     * @return Single BuildBetaNotification (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "buildBetaNotificationsCreateInstance",
        tags = { "BuildBetaNotifications" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single BuildBetaNotification", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildBetaNotificationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/buildBetaNotifications",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BuildBetaNotificationResponse> buildBetaNotificationsCreateInstance(
        @Parameter(name = "BuildBetaNotificationCreateRequest", description = "BuildBetaNotification representation", required = true) @Valid @RequestBody BuildBetaNotificationCreateRequest buildBetaNotificationCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"buildBetaNotifications\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/appEncryptionDeclaration
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsAppEncryptionDeclarationGetToOneRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppEncryptionDeclarationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/appEncryptionDeclaration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppEncryptionDeclarationResponse> buildsAppEncryptionDeclarationGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appEncryptionDeclarations]", description = "the fields to include for returned resources of type appEncryptionDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appEncryptionDeclarations]", required = false) List<String> fieldsAppEncryptionDeclarations
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"availableOnFrenchStore\" : true, \"documentType\" : \"documentType\", \"documentUrl\" : \"documentUrl\", \"containsThirdPartyCryptography\" : true, \"documentName\" : \"documentName\", \"exempt\" : true, \"usesEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"codeValue\" : \"codeValue\", \"containsProprietaryCryptography\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/relationships/appEncryptionDeclaration
     *
     * @param id the id of the requested resource (required)
     * @return Related linkage (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsAppEncryptionDeclarationGetToOneRelationship",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related linkage", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildAppEncryptionDeclarationLinkageResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/relationships/appEncryptionDeclaration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildAppEncryptionDeclarationLinkageResponse> buildsAppEncryptionDeclarationGetToOneRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/builds/{id}/relationships/appEncryptionDeclaration
     *
     * @param id the id of the requested resource (required)
     * @param buildAppEncryptionDeclarationLinkageRequest Related linkage (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "buildsAppEncryptionDeclarationUpdateToOneRelationship",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/builds/{id}/relationships/appEncryptionDeclaration",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> buildsAppEncryptionDeclarationUpdateToOneRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BuildAppEncryptionDeclarationLinkageRequest", description = "Related linkage", required = true) @Valid @RequestBody BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/app
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsAppGetToOneRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/app",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppResponse> buildsAppGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/appStoreVersion
     *
     * @param id the id of the requested resource (required)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsAppStoreVersionGetToOneRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppStoreVersionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/appStoreVersion",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppStoreVersionResponse> buildsAppStoreVersionGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[appStoreVersions]", description = "the fields to include for returned resources of type appStoreVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersions]", required = false) List<String> fieldsAppStoreVersions
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersionLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionPhasedRelease\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionPhasedReleases\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"idfaDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"idfaDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"ageRatingDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"ageRatingDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"routingAppCoverage\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"routingAppCoverages\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersionSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersionSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"copyright\" : \"copyright\", \"downloadable\" : true, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"earliestReleaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"usesIdfa\" : true, \"versionString\" : \"versionString\", \"releaseType\" : \"MANUAL\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/betaAppReviewSubmission
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsBetaAppReviewSubmissionGetToOneRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaAppReviewSubmissionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/betaAppReviewSubmission",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaAppReviewSubmissionResponse> buildsBetaAppReviewSubmissionGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaAppReviewSubmissions]", description = "the fields to include for returned resources of type betaAppReviewSubmissions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppReviewSubmissions]", required = false) List<String> fieldsBetaAppReviewSubmissions
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/betaBuildLocalizations
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsBetaBuildLocalizationsGetToManyRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaBuildLocalizationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/betaBuildLocalizations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaBuildLocalizationsResponse> buildsBetaBuildLocalizationsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaBuildLocalizations]", description = "the fields to include for returned resources of type betaBuildLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaBuildLocalizations]", required = false) List<String> fieldsBetaBuildLocalizations,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"locale\" : \"locale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"whatsNew\" : \"whatsNew\", \"locale\" : \"locale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/builds/{id}/relationships/betaGroups
     *
     * @param id the id of the requested resource (required)
     * @param buildBetaGroupsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "buildsBetaGroupsCreateToManyRelationship",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/builds/{id}/relationships/betaGroups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> buildsBetaGroupsCreateToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BuildBetaGroupsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/builds/{id}/relationships/betaGroups
     *
     * @param id the id of the requested resource (required)
     * @param buildBetaGroupsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "buildsBetaGroupsDeleteToManyRelationship",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/builds/{id}/relationships/betaGroups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> buildsBetaGroupsDeleteToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BuildBetaGroupsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/buildBetaDetail
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsBuildBetaDetailGetToOneRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildBetaDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/buildBetaDetail",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildBetaDetailResponse> buildsBuildBetaDetailGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[buildBetaDetails]", description = "the fields to include for returned resources of type buildBetaDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[buildBetaDetails]", required = false) List<String> fieldsBuildBetaDetails
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"build\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"autoNotifyEnabled\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/diagnosticSignatures
     *
     * @param id the id of the requested resource (required)
     * @param filterDiagnosticType filter by attribute &#39;diagnosticType&#39; (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsDiagnosticSignaturesGetToManyRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DiagnosticSignaturesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/diagnosticSignatures",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DiagnosticSignaturesResponse> buildsDiagnosticSignaturesGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "filter[diagnosticType]", description = "filter by attribute 'diagnosticType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[diagnosticType]", required = false) List<String> filterDiagnosticType,
        @Parameter(name = "fields[diagnosticSignatures]", description = "the fields to include for returned resources of type diagnosticSignatures", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[diagnosticSignatures]", required = false) List<String> fieldsDiagnosticSignatures,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"diagnosticType\" : \"DISK_WRITES\", \"signature\" : \"signature\", \"weight\" : 0.8008281904610115 }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"diagnosticSignatures\" }, { \"attributes\" : { \"diagnosticType\" : \"DISK_WRITES\", \"signature\" : \"signature\", \"weight\" : 0.8008281904610115 }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"diagnosticSignatures\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"diagnosticLogs\" }, { \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"diagnosticLogs\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds
     *
     * @param filterBetaAppReviewSubmissionBetaReviewState filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)
     * @param filterExpired filter by attribute &#39;expired&#39; (optional)
     * @param filterPreReleaseVersionPlatform filter by attribute &#39;preReleaseVersion.platform&#39; (optional)
     * @param filterPreReleaseVersionVersion filter by attribute &#39;preReleaseVersion.version&#39; (optional)
     * @param filterProcessingState filter by attribute &#39;processingState&#39; (optional)
     * @param filterUsesNonExemptEncryption filter by attribute &#39;usesNonExemptEncryption&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterAppStoreVersion filter by id(s) of related &#39;appStoreVersion&#39; (optional)
     * @param filterBetaGroups filter by id(s) of related &#39;betaGroups&#39; (optional)
     * @param filterPreReleaseVersion filter by id(s) of related &#39;preReleaseVersion&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param limitIcons maximum number of related icons returned (when they are included) (optional)
     * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included) (optional)
     * @return List of Builds (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "buildsGetCollection",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Builds", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildsResponse> buildsGetCollection(
        @Parameter(name = "filter[betaAppReviewSubmission.betaReviewState]", description = "filter by attribute 'betaAppReviewSubmission.betaReviewState'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[betaAppReviewSubmission.betaReviewState]", required = false) List<String> filterBetaAppReviewSubmissionBetaReviewState,
        @Parameter(name = "filter[expired]", description = "filter by attribute 'expired'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[expired]", required = false) List<String> filterExpired,
        @Parameter(name = "filter[preReleaseVersion.platform]", description = "filter by attribute 'preReleaseVersion.platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[preReleaseVersion.platform]", required = false) List<String> filterPreReleaseVersionPlatform,
        @Parameter(name = "filter[preReleaseVersion.version]", description = "filter by attribute 'preReleaseVersion.version'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[preReleaseVersion.version]", required = false) List<String> filterPreReleaseVersionVersion,
        @Parameter(name = "filter[processingState]", description = "filter by attribute 'processingState'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[processingState]", required = false) List<String> filterProcessingState,
        @Parameter(name = "filter[usesNonExemptEncryption]", description = "filter by attribute 'usesNonExemptEncryption'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[usesNonExemptEncryption]", required = false) List<String> filterUsesNonExemptEncryption,
        @Parameter(name = "filter[version]", description = "filter by attribute 'version'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[version]", required = false) List<String> filterVersion,
        @Parameter(name = "filter[app]", description = "filter by id(s) of related 'app'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[app]", required = false) List<String> filterApp,
        @Parameter(name = "filter[appStoreVersion]", description = "filter by id(s) of related 'appStoreVersion'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[appStoreVersion]", required = false) List<String> filterAppStoreVersion,
        @Parameter(name = "filter[betaGroups]", description = "filter by id(s) of related 'betaGroups'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[betaGroups]", required = false) List<String> filterBetaGroups,
        @Parameter(name = "filter[preReleaseVersion]", description = "filter by id(s) of related 'preReleaseVersion'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[preReleaseVersion]", required = false) List<String> filterPreReleaseVersion,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[appEncryptionDeclarations]", description = "the fields to include for returned resources of type appEncryptionDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appEncryptionDeclarations]", required = false) List<String> fieldsAppEncryptionDeclarations,
        @Parameter(name = "fields[betaAppReviewSubmissions]", description = "the fields to include for returned resources of type betaAppReviewSubmissions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppReviewSubmissions]", required = false) List<String> fieldsBetaAppReviewSubmissions,
        @Parameter(name = "fields[buildBetaDetails]", description = "the fields to include for returned resources of type buildBetaDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[buildBetaDetails]", required = false) List<String> fieldsBuildBetaDetails,
        @Parameter(name = "fields[buildIcons]", description = "the fields to include for returned resources of type buildIcons", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[buildIcons]", required = false) List<String> fieldsBuildIcons,
        @Parameter(name = "fields[perfPowerMetrics]", description = "the fields to include for returned resources of type perfPowerMetrics", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[perfPowerMetrics]", required = false) List<String> fieldsPerfPowerMetrics,
        @Parameter(name = "fields[preReleaseVersions]", description = "the fields to include for returned resources of type preReleaseVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[preReleaseVersions]", required = false) List<String> fieldsPreReleaseVersions,
        @Parameter(name = "fields[appStoreVersions]", description = "the fields to include for returned resources of type appStoreVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersions]", required = false) List<String> fieldsAppStoreVersions,
        @Parameter(name = "fields[diagnosticSignatures]", description = "the fields to include for returned resources of type diagnosticSignatures", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[diagnosticSignatures]", required = false) List<String> fieldsDiagnosticSignatures,
        @Parameter(name = "fields[betaTesters]", description = "the fields to include for returned resources of type betaTesters", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaTesters]", required = false) List<String> fieldsBetaTesters,
        @Parameter(name = "fields[betaBuildLocalizations]", description = "the fields to include for returned resources of type betaBuildLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaBuildLocalizations]", required = false) List<String> fieldsBetaBuildLocalizations,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[betaBuildLocalizations]", description = "maximum number of related betaBuildLocalizations returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[betaBuildLocalizations]", required = false) Integer limitBetaBuildLocalizations,
        @Max(50) @Parameter(name = "limit[icons]", description = "maximum number of related icons returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[icons]", required = false) Integer limitIcons,
        @Max(50) @Parameter(name = "limit[individualTesters]", description = "maximum number of related individualTesters returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[individualTesters]", required = false) Integer limitIndividualTesters
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsAppEncryptionDeclarations the fields to include for returned resources of type appEncryptionDeclarations (optional)
     * @param fieldsBetaAppReviewSubmissions the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     * @param fieldsBuildBetaDetails the fields to include for returned resources of type buildBetaDetails (optional)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param fieldsPerfPowerMetrics the fields to include for returned resources of type perfPowerMetrics (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param fieldsAppStoreVersions the fields to include for returned resources of type appStoreVersions (optional)
     * @param fieldsDiagnosticSignatures the fields to include for returned resources of type diagnosticSignatures (optional)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param fieldsBetaBuildLocalizations the fields to include for returned resources of type betaBuildLocalizations (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBetaBuildLocalizations maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     * @param limitIcons maximum number of related icons returned (when they are included) (optional)
     * @param limitIndividualTesters maximum number of related individualTesters returned (when they are included) (optional)
     * @return Single Build (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsGetInstance",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single Build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildResponse> buildsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[appEncryptionDeclarations]", description = "the fields to include for returned resources of type appEncryptionDeclarations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appEncryptionDeclarations]", required = false) List<String> fieldsAppEncryptionDeclarations,
        @Parameter(name = "fields[betaAppReviewSubmissions]", description = "the fields to include for returned resources of type betaAppReviewSubmissions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaAppReviewSubmissions]", required = false) List<String> fieldsBetaAppReviewSubmissions,
        @Parameter(name = "fields[buildBetaDetails]", description = "the fields to include for returned resources of type buildBetaDetails", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[buildBetaDetails]", required = false) List<String> fieldsBuildBetaDetails,
        @Parameter(name = "fields[buildIcons]", description = "the fields to include for returned resources of type buildIcons", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[buildIcons]", required = false) List<String> fieldsBuildIcons,
        @Parameter(name = "fields[perfPowerMetrics]", description = "the fields to include for returned resources of type perfPowerMetrics", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[perfPowerMetrics]", required = false) List<String> fieldsPerfPowerMetrics,
        @Parameter(name = "fields[preReleaseVersions]", description = "the fields to include for returned resources of type preReleaseVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[preReleaseVersions]", required = false) List<String> fieldsPreReleaseVersions,
        @Parameter(name = "fields[appStoreVersions]", description = "the fields to include for returned resources of type appStoreVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[appStoreVersions]", required = false) List<String> fieldsAppStoreVersions,
        @Parameter(name = "fields[diagnosticSignatures]", description = "the fields to include for returned resources of type diagnosticSignatures", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[diagnosticSignatures]", required = false) List<String> fieldsDiagnosticSignatures,
        @Parameter(name = "fields[betaTesters]", description = "the fields to include for returned resources of type betaTesters", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaTesters]", required = false) List<String> fieldsBetaTesters,
        @Parameter(name = "fields[betaBuildLocalizations]", description = "the fields to include for returned resources of type betaBuildLocalizations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaBuildLocalizations]", required = false) List<String> fieldsBetaBuildLocalizations,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[betaBuildLocalizations]", description = "maximum number of related betaBuildLocalizations returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[betaBuildLocalizations]", required = false) Integer limitBetaBuildLocalizations,
        @Max(50) @Parameter(name = "limit[icons]", description = "maximum number of related icons returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[icons]", required = false) Integer limitIcons,
        @Max(50) @Parameter(name = "limit[individualTesters]", description = "maximum number of related individualTesters returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[individualTesters]", required = false) Integer limitIndividualTesters
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/icons
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuildIcons the fields to include for returned resources of type buildIcons (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsIconsGetToManyRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildIconsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/icons",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildIconsResponse> buildsIconsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[buildIcons]", description = "the fields to include for returned resources of type buildIcons", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[buildIcons]", required = false) List<String> fieldsBuildIcons,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"iconAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"attributes\" : { \"iconAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/builds/{id}/relationships/individualTesters
     *
     * @param id the id of the requested resource (required)
     * @param buildIndividualTestersLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "buildsIndividualTestersCreateToManyRelationship",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/builds/{id}/relationships/individualTesters",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> buildsIndividualTestersCreateToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BuildIndividualTestersLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/builds/{id}/relationships/individualTesters
     *
     * @param id the id of the requested resource (required)
     * @param buildIndividualTestersLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "buildsIndividualTestersDeleteToManyRelationship",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/builds/{id}/relationships/individualTesters",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> buildsIndividualTestersDeleteToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BuildIndividualTestersLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/individualTesters
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBetaTesters the fields to include for returned resources of type betaTesters (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsIndividualTestersGetToManyRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BetaTestersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/individualTesters",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BetaTestersResponse> buildsIndividualTestersGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[betaTesters]", description = "the fields to include for returned resources of type betaTesters", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[betaTesters]", required = false) List<String> fieldsBetaTesters,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"email\" : \"email\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"email\" : \"email\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/relationships/individualTesters
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related linkages (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsIndividualTestersGetToManyRelationship",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related linkages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildIndividualTestersLinkagesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/relationships/individualTesters",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildIndividualTestersLinkagesResponse> buildsIndividualTestersGetToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/perfPowerMetrics
     *
     * @param id the id of the requested resource (required)
     * @param filterDeviceType filter by attribute &#39;deviceType&#39; (optional)
     * @param filterMetricType filter by attribute &#39;metricType&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsPerfPowerMetricsGetToManyRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PerfPowerMetricsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/perfPowerMetrics",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PerfPowerMetricsResponse> buildsPerfPowerMetricsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "filter[deviceType]", description = "filter by attribute 'deviceType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[deviceType]", required = false) List<String> filterDeviceType,
        @Parameter(name = "filter[metricType]", description = "filter by attribute 'metricType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[metricType]", required = false) List<String> filterMetricType,
        @Parameter(name = "filter[platform]", description = "filter by attribute 'platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[platform]", required = false) List<String> filterPlatform
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"deviceType\" : \"deviceType\", \"metricType\" : \"DISK\", \"platform\" : \"IOS\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"perfPowerMetrics\" }, { \"attributes\" : { \"deviceType\" : \"deviceType\", \"metricType\" : \"DISK\", \"platform\" : \"IOS\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"perfPowerMetrics\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/builds/{id}/preReleaseVersion
     *
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "buildsPreReleaseVersionGetToOneRelated",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PrereleaseVersionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/builds/{id}/preReleaseVersion",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PrereleaseVersionResponse> buildsPreReleaseVersionGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[preReleaseVersions]", description = "the fields to include for returned resources of type preReleaseVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[preReleaseVersions]", required = false) List<String> fieldsPreReleaseVersions
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"version\" : \"version\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/builds/{id}
     *
     * @param id the id of the requested resource (required)
     * @param buildUpdateRequest Build representation (required)
     * @return Single Build (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "buildsUpdateInstance",
        tags = { "Builds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single Build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/builds/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BuildResponse> buildsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BuildUpdateRequest", description = "Build representation", required = true) @Valid @RequestBody BuildUpdateRequest buildUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/bundleIdCapabilities
     *
     * @param bundleIdCapabilityCreateRequest BundleIdCapability representation (required)
     * @return Single BundleIdCapability (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "bundleIdCapabilitiesCreateInstance",
        tags = { "BundleIdCapabilities" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single BundleIdCapability", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BundleIdCapabilityResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/bundleIdCapabilities",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BundleIdCapabilityResponse> bundleIdCapabilitiesCreateInstance(
        @Parameter(name = "BundleIdCapabilityCreateRequest", description = "BundleIdCapability representation", required = true) @Valid @RequestBody BundleIdCapabilityCreateRequest bundleIdCapabilityCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"settings\" : [ { \"minInstances\" : 0, \"visible\" : true, \"allowedInstances\" : \"ENTRY\", \"enabledByDefault\" : true, \"name\" : \"name\", \"options\" : [ { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" }, { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" } ], \"description\" : \"description\", \"key\" : \"ICLOUD_VERSION\" }, { \"minInstances\" : 0, \"visible\" : true, \"allowedInstances\" : \"ENTRY\", \"enabledByDefault\" : true, \"name\" : \"name\", \"options\" : [ { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" }, { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" } ], \"description\" : \"description\", \"key\" : \"ICLOUD_VERSION\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/bundleIdCapabilities/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "bundleIdCapabilitiesDeleteInstance",
        tags = { "BundleIdCapabilities" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/bundleIdCapabilities/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> bundleIdCapabilitiesDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/bundleIdCapabilities/{id}
     *
     * @param id the id of the requested resource (required)
     * @param bundleIdCapabilityUpdateRequest BundleIdCapability representation (required)
     * @return Single BundleIdCapability (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "bundleIdCapabilitiesUpdateInstance",
        tags = { "BundleIdCapabilities" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BundleIdCapability", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BundleIdCapabilityResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/bundleIdCapabilities/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BundleIdCapabilityResponse> bundleIdCapabilitiesUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BundleIdCapabilityUpdateRequest", description = "BundleIdCapability representation", required = true) @Valid @RequestBody BundleIdCapabilityUpdateRequest bundleIdCapabilityUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"settings\" : [ { \"minInstances\" : 0, \"visible\" : true, \"allowedInstances\" : \"ENTRY\", \"enabledByDefault\" : true, \"name\" : \"name\", \"options\" : [ { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" }, { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" } ], \"description\" : \"description\", \"key\" : \"ICLOUD_VERSION\" }, { \"minInstances\" : 0, \"visible\" : true, \"allowedInstances\" : \"ENTRY\", \"enabledByDefault\" : true, \"name\" : \"name\", \"options\" : [ { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" }, { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" } ], \"description\" : \"description\", \"key\" : \"ICLOUD_VERSION\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/bundleIds/{id}/app
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "bundleIdsAppGetToOneRelated",
        tags = { "BundleIds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/bundleIds/{id}/app",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppResponse> bundleIdsAppGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/bundleIds/{id}/bundleIdCapabilities
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "bundleIdsBundleIdCapabilitiesGetToManyRelated",
        tags = { "BundleIds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BundleIdCapabilitiesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/bundleIds/{id}/bundleIdCapabilities",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BundleIdCapabilitiesResponse> bundleIdsBundleIdCapabilitiesGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[bundleIdCapabilities]", description = "the fields to include for returned resources of type bundleIdCapabilities", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[bundleIdCapabilities]", required = false) List<String> fieldsBundleIdCapabilities,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"settings\" : [ { \"minInstances\" : 0, \"visible\" : true, \"allowedInstances\" : \"ENTRY\", \"enabledByDefault\" : true, \"name\" : \"name\", \"options\" : [ { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" }, { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" } ], \"description\" : \"description\", \"key\" : \"ICLOUD_VERSION\" }, { \"minInstances\" : 0, \"visible\" : true, \"allowedInstances\" : \"ENTRY\", \"enabledByDefault\" : true, \"name\" : \"name\", \"options\" : [ { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" }, { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" } ], \"description\" : \"description\", \"key\" : \"ICLOUD_VERSION\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" }, { \"attributes\" : { \"settings\" : [ { \"minInstances\" : 0, \"visible\" : true, \"allowedInstances\" : \"ENTRY\", \"enabledByDefault\" : true, \"name\" : \"name\", \"options\" : [ { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" }, { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" } ], \"description\" : \"description\", \"key\" : \"ICLOUD_VERSION\" }, { \"minInstances\" : 0, \"visible\" : true, \"allowedInstances\" : \"ENTRY\", \"enabledByDefault\" : true, \"name\" : \"name\", \"options\" : [ { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" }, { \"supportsWildcard\" : true, \"enabledByDefault\" : true, \"name\" : \"name\", \"description\" : \"description\", \"enabled\" : true, \"key\" : \"XCODE_5\" } ], \"description\" : \"description\", \"key\" : \"ICLOUD_VERSION\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/bundleIds
     *
     * @param bundleIdCreateRequest BundleId representation (required)
     * @return Single BundleId (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "bundleIdsCreateInstance",
        tags = { "BundleIds" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single BundleId", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BundleIdResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/bundleIds",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BundleIdResponse> bundleIdsCreateInstance(
        @Parameter(name = "BundleIdCreateRequest", description = "BundleId representation", required = true) @Valid @RequestBody BundleIdCreateRequest bundleIdCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleIdCapabilities\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" }, { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"profiles\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"profiles\" }, { \"id\" : \"id\", \"type\" : \"profiles\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"identifier\" : \"identifier\", \"seedId\" : \"seedId\", \"name\" : \"name\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"bundleIds\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/bundleIds/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "bundleIdsDeleteInstance",
        tags = { "BundleIds" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/bundleIds/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> bundleIdsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/bundleIds
     *
     * @param filterIdentifier filter by attribute &#39;identifier&#39; (optional)
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterSeedId filter by attribute &#39;seedId&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBundleIdCapabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param limitProfiles maximum number of related profiles returned (when they are included) (optional)
     * @return List of BundleIds (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "bundleIdsGetCollection",
        tags = { "BundleIds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of BundleIds", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BundleIdsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/bundleIds",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BundleIdsResponse> bundleIdsGetCollection(
        @Parameter(name = "filter[identifier]", description = "filter by attribute 'identifier'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[identifier]", required = false) List<String> filterIdentifier,
        @Parameter(name = "filter[name]", description = "filter by attribute 'name'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[name]", required = false) List<String> filterName,
        @Parameter(name = "filter[platform]", description = "filter by attribute 'platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[platform]", required = false) List<String> filterPlatform,
        @Parameter(name = "filter[seedId]", description = "filter by attribute 'seedId'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[seedId]", required = false) List<String> filterSeedId,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[bundleIds]", description = "the fields to include for returned resources of type bundleIds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[bundleIds]", required = false) List<String> fieldsBundleIds,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[bundleIdCapabilities]", description = "the fields to include for returned resources of type bundleIdCapabilities", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[bundleIdCapabilities]", required = false) List<String> fieldsBundleIdCapabilities,
        @Parameter(name = "fields[profiles]", description = "the fields to include for returned resources of type profiles", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[profiles]", required = false) List<String> fieldsProfiles,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[bundleIdCapabilities]", description = "maximum number of related bundleIdCapabilities returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[bundleIdCapabilities]", required = false) Integer limitBundleIdCapabilities,
        @Max(50) @Parameter(name = "limit[profiles]", description = "maximum number of related profiles returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[profiles]", required = false) Integer limitProfiles
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleIdCapabilities\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" }, { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"profiles\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"profiles\" }, { \"id\" : \"id\", \"type\" : \"profiles\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"identifier\" : \"identifier\", \"seedId\" : \"seedId\", \"name\" : \"name\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"bundleIds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleIdCapabilities\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" }, { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"profiles\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"profiles\" }, { \"id\" : \"id\", \"type\" : \"profiles\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"identifier\" : \"identifier\", \"seedId\" : \"seedId\", \"name\" : \"name\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"bundleIds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/bundleIds/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBundleIdCapabilities the fields to include for returned resources of type bundleIdCapabilities (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBundleIdCapabilities maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     * @param limitProfiles maximum number of related profiles returned (when they are included) (optional)
     * @return Single BundleId (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "bundleIdsGetInstance",
        tags = { "BundleIds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BundleId", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BundleIdResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/bundleIds/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BundleIdResponse> bundleIdsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[bundleIds]", description = "the fields to include for returned resources of type bundleIds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[bundleIds]", required = false) List<String> fieldsBundleIds,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[bundleIdCapabilities]", description = "the fields to include for returned resources of type bundleIdCapabilities", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[bundleIdCapabilities]", required = false) List<String> fieldsBundleIdCapabilities,
        @Parameter(name = "fields[profiles]", description = "the fields to include for returned resources of type profiles", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[profiles]", required = false) List<String> fieldsProfiles,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[bundleIdCapabilities]", description = "maximum number of related bundleIdCapabilities returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[bundleIdCapabilities]", required = false) Integer limitBundleIdCapabilities,
        @Max(50) @Parameter(name = "limit[profiles]", description = "maximum number of related profiles returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[profiles]", required = false) Integer limitProfiles
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleIdCapabilities\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" }, { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"profiles\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"profiles\" }, { \"id\" : \"id\", \"type\" : \"profiles\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"identifier\" : \"identifier\", \"seedId\" : \"seedId\", \"name\" : \"name\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"bundleIds\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/bundleIds/{id}/profiles
     *
     * @param id the id of the requested resource (required)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "bundleIdsProfilesGetToManyRelated",
        tags = { "BundleIds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProfilesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/bundleIds/{id}/profiles",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProfilesResponse> bundleIdsProfilesGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[profiles]", description = "the fields to include for returned resources of type profiles", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[profiles]", required = false) List<String> fieldsProfiles,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"certificates\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"certificates\" }, { \"id\" : \"id\", \"type\" : \"certificates\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"devices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"devices\" }, { \"id\" : \"id\", \"type\" : \"devices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleId\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"bundleIds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"profileState\" : \"ACTIVE\", \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"profileType\" : \"IOS_APP_DEVELOPMENT\", \"name\" : \"name\", \"profileContent\" : \"profileContent\", \"uuid\" : \"uuid\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"profiles\" }, { \"relationships\" : { \"certificates\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"certificates\" }, { \"id\" : \"id\", \"type\" : \"certificates\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"devices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"devices\" }, { \"id\" : \"id\", \"type\" : \"devices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleId\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"bundleIds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"profileState\" : \"ACTIVE\", \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"profileType\" : \"IOS_APP_DEVELOPMENT\", \"name\" : \"name\", \"profileContent\" : \"profileContent\", \"uuid\" : \"uuid\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"profiles\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/bundleIds/{id}
     *
     * @param id the id of the requested resource (required)
     * @param bundleIdUpdateRequest BundleId representation (required)
     * @return Single BundleId (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "bundleIdsUpdateInstance",
        tags = { "BundleIds" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single BundleId", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BundleIdResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/bundleIds/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BundleIdResponse> bundleIdsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BundleIdUpdateRequest", description = "BundleId representation", required = true) @Valid @RequestBody BundleIdUpdateRequest bundleIdUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleIdCapabilities\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" }, { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"profiles\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"profiles\" }, { \"id\" : \"id\", \"type\" : \"profiles\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"identifier\" : \"identifier\", \"seedId\" : \"seedId\", \"name\" : \"name\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"bundleIds\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/certificates
     *
     * @param certificateCreateRequest Certificate representation (required)
     * @return Single Certificate (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "certificatesCreateInstance",
        tags = { "Certificates" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single Certificate", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CertificateResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/certificates",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CertificateResponse> certificatesCreateInstance(
        @Parameter(name = "CertificateCreateRequest", description = "Certificate representation", required = true) @Valid @RequestBody CertificateCreateRequest certificateCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"serialNumber\" : \"serialNumber\", \"certificateContent\" : \"certificateContent\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"certificates\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/certificates/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "certificatesDeleteInstance",
        tags = { "Certificates" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/certificates/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> certificatesDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/certificates
     *
     * @param filterCertificateType filter by attribute &#39;certificateType&#39; (optional)
     * @param filterDisplayName filter by attribute &#39;displayName&#39; (optional)
     * @param filterSerialNumber filter by attribute &#39;serialNumber&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param limit maximum resources per page (optional)
     * @return List of Certificates (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "certificatesGetCollection",
        tags = { "Certificates" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Certificates", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CertificatesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/certificates",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CertificatesResponse> certificatesGetCollection(
        @Parameter(name = "filter[certificateType]", description = "filter by attribute 'certificateType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[certificateType]", required = false) List<String> filterCertificateType,
        @Parameter(name = "filter[displayName]", description = "filter by attribute 'displayName'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[displayName]", required = false) List<String> filterDisplayName,
        @Parameter(name = "filter[serialNumber]", description = "filter by attribute 'serialNumber'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[serialNumber]", required = false) List<String> filterSerialNumber,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[certificates]", description = "the fields to include for returned resources of type certificates", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[certificates]", required = false) List<String> fieldsCertificates,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"serialNumber\" : \"serialNumber\", \"certificateContent\" : \"certificateContent\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"certificates\" }, { \"attributes\" : { \"serialNumber\" : \"serialNumber\", \"certificateContent\" : \"certificateContent\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"certificates\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/certificates/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @return Single Certificate (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "certificatesGetInstance",
        tags = { "Certificates" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single Certificate", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CertificateResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/certificates/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CertificateResponse> certificatesGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[certificates]", description = "the fields to include for returned resources of type certificates", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[certificates]", required = false) List<String> fieldsCertificates
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"serialNumber\" : \"serialNumber\", \"certificateContent\" : \"certificateContent\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"certificates\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/devices
     *
     * @param deviceCreateRequest Device representation (required)
     * @return Single Device (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "devicesCreateInstance",
        tags = { "Devices" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single Device", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/devices",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeviceResponse> devicesCreateInstance(
        @Parameter(name = "DeviceCreateRequest", description = "Device representation", required = true) @Valid @RequestBody DeviceCreateRequest deviceCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"deviceClass\" : \"APPLE_WATCH\", \"model\" : \"model\", \"udid\" : \"udid\", \"status\" : \"ENABLED\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"devices\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/devices
     *
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterStatus filter by attribute &#39;status&#39; (optional)
     * @param filterUdid filter by attribute &#39;udid&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param limit maximum resources per page (optional)
     * @return List of Devices (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "devicesGetCollection",
        tags = { "Devices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Devices", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DevicesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/devices",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DevicesResponse> devicesGetCollection(
        @Parameter(name = "filter[name]", description = "filter by attribute 'name'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[name]", required = false) List<String> filterName,
        @Parameter(name = "filter[platform]", description = "filter by attribute 'platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[platform]", required = false) List<String> filterPlatform,
        @Parameter(name = "filter[status]", description = "filter by attribute 'status'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[status]", required = false) List<String> filterStatus,
        @Parameter(name = "filter[udid]", description = "filter by attribute 'udid'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[udid]", required = false) List<String> filterUdid,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[devices]", description = "the fields to include for returned resources of type devices", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[devices]", required = false) List<String> fieldsDevices,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"deviceClass\" : \"APPLE_WATCH\", \"model\" : \"model\", \"udid\" : \"udid\", \"status\" : \"ENABLED\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"devices\" }, { \"attributes\" : { \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"deviceClass\" : \"APPLE_WATCH\", \"model\" : \"model\", \"udid\" : \"udid\", \"status\" : \"ENABLED\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"devices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/devices/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @return Single Device (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "devicesGetInstance",
        tags = { "Devices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single Device", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/devices/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DeviceResponse> devicesGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[devices]", description = "the fields to include for returned resources of type devices", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[devices]", required = false) List<String> fieldsDevices
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"deviceClass\" : \"APPLE_WATCH\", \"model\" : \"model\", \"udid\" : \"udid\", \"status\" : \"ENABLED\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"devices\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/devices/{id}
     *
     * @param id the id of the requested resource (required)
     * @param deviceUpdateRequest Device representation (required)
     * @return Single Device (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "devicesUpdateInstance",
        tags = { "Devices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single Device", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/devices/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeviceResponse> devicesUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "DeviceUpdateRequest", description = "Device representation", required = true) @Valid @RequestBody DeviceUpdateRequest deviceUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"attributes\" : { \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"deviceClass\" : \"APPLE_WATCH\", \"model\" : \"model\", \"udid\" : \"udid\", \"status\" : \"ENABLED\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"devices\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/diagnosticSignatures/{id}/logs
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "diagnosticSignaturesLogsGetToManyRelated",
        tags = { "DiagnosticSignatures" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DiagnosticLogsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/diagnosticSignatures/{id}/logs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DiagnosticLogsResponse> diagnosticSignaturesLogsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"diagnosticLogs\" }, { \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"diagnosticLogs\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/endUserLicenseAgreements
     *
     * @param endUserLicenseAgreementCreateRequest EndUserLicenseAgreement representation (required)
     * @return Single EndUserLicenseAgreement (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "endUserLicenseAgreementsCreateInstance",
        tags = { "EndUserLicenseAgreements" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single EndUserLicenseAgreement", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EndUserLicenseAgreementResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/endUserLicenseAgreements",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EndUserLicenseAgreementResponse> endUserLicenseAgreementsCreateInstance(
        @Parameter(name = "EndUserLicenseAgreementCreateRequest", description = "EndUserLicenseAgreement representation", required = true) @Valid @RequestBody EndUserLicenseAgreementCreateRequest endUserLicenseAgreementCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"agreementText\" : \"agreementText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/endUserLicenseAgreements/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "endUserLicenseAgreementsDeleteInstance",
        tags = { "EndUserLicenseAgreements" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/endUserLicenseAgreements/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> endUserLicenseAgreementsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/endUserLicenseAgreements/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsEndUserLicenseAgreements the fields to include for returned resources of type endUserLicenseAgreements (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param limitTerritories maximum number of related territories returned (when they are included) (optional)
     * @return Single EndUserLicenseAgreement (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "endUserLicenseAgreementsGetInstance",
        tags = { "EndUserLicenseAgreements" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single EndUserLicenseAgreement", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EndUserLicenseAgreementResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/endUserLicenseAgreements/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<EndUserLicenseAgreementResponse> endUserLicenseAgreementsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[endUserLicenseAgreements]", description = "the fields to include for returned resources of type endUserLicenseAgreements", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[endUserLicenseAgreements]", required = false) List<String> fieldsEndUserLicenseAgreements,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[territories]", description = "the fields to include for returned resources of type territories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[territories]", required = false) List<String> fieldsTerritories,
        @Max(50) @Parameter(name = "limit[territories]", description = "maximum number of related territories returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[territories]", required = false) Integer limitTerritories
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"agreementText\" : \"agreementText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/endUserLicenseAgreements/{id}/territories
     *
     * @param id the id of the requested resource (required)
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "endUserLicenseAgreementsTerritoriesGetToManyRelated",
        tags = { "EndUserLicenseAgreements" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TerritoriesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/endUserLicenseAgreements/{id}/territories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TerritoriesResponse> endUserLicenseAgreementsTerritoriesGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[territories]", description = "the fields to include for returned resources of type territories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[territories]", required = false) List<String> fieldsTerritories,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/endUserLicenseAgreements/{id}
     *
     * @param id the id of the requested resource (required)
     * @param endUserLicenseAgreementUpdateRequest EndUserLicenseAgreement representation (required)
     * @return Single EndUserLicenseAgreement (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "endUserLicenseAgreementsUpdateInstance",
        tags = { "EndUserLicenseAgreements" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single EndUserLicenseAgreement", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EndUserLicenseAgreementResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/endUserLicenseAgreements/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EndUserLicenseAgreementResponse> endUserLicenseAgreementsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "EndUserLicenseAgreementUpdateRequest", description = "EndUserLicenseAgreement representation", required = true) @Valid @RequestBody EndUserLicenseAgreementUpdateRequest endUserLicenseAgreementUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"territories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"agreementText\" : \"agreementText\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/financeReports
     *
     * @param filterRegionCode filter by attribute &#39;regionCode&#39; (required)
     * @param filterReportDate filter by attribute &#39;reportDate&#39; (required)
     * @param filterReportType filter by attribute &#39;reportType&#39; (required)
     * @param filterVendorNumber filter by attribute &#39;vendorNumber&#39; (required)
     * @return List of FinanceReports (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "financeReportsGetCollection",
        tags = { "FinanceReports" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of FinanceReports", content = {
                @Content(mediaType = "gzip", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "gzip", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "gzip", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/financeReports",
        produces = { "gzip", "application/json" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> financeReportsGetCollection(
        @NotNull @Parameter(name = "filter[regionCode]", description = "filter by attribute 'regionCode'", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[regionCode]", required = true) List<String> filterRegionCode,
        @NotNull @Parameter(name = "filter[reportDate]", description = "filter by attribute 'reportDate'", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[reportDate]", required = true) List<String> filterReportDate,
        @NotNull @Parameter(name = "filter[reportType]", description = "filter by attribute 'reportType'", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[reportType]", required = true) List<String> filterReportType,
        @NotNull @Parameter(name = "filter[vendorNumber]", description = "filter by attribute 'vendorNumber'", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[vendorNumber]", required = true) List<String> filterVendorNumber
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
     *
     * @param id the id of the requested resource (required)
     * @param gameCenterEnabledVersionCompatibleVersionsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship",
        tags = { "GameCenterEnabledVersions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "GameCenterEnabledVersionCompatibleVersionsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody GameCenterEnabledVersionCompatibleVersionsLinkagesRequest gameCenterEnabledVersionCompatibleVersionsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
     *
     * @param id the id of the requested resource (required)
     * @param gameCenterEnabledVersionCompatibleVersionsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship",
        tags = { "GameCenterEnabledVersions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "GameCenterEnabledVersionCompatibleVersionsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody GameCenterEnabledVersionCompatibleVersionsLinkagesRequest gameCenterEnabledVersionCompatibleVersionsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/gameCenterEnabledVersions/{id}/compatibleVersions
     *
     * @param id the id of the requested resource (required)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersionString filter by attribute &#39;versionString&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsGameCenterEnabledVersions the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated",
        tags = { "GameCenterEnabledVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GameCenterEnabledVersionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/gameCenterEnabledVersions/{id}/compatibleVersions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GameCenterEnabledVersionsResponse> gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "filter[platform]", description = "filter by attribute 'platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[platform]", required = false) List<String> filterPlatform,
        @Parameter(name = "filter[versionString]", description = "filter by attribute 'versionString'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[versionString]", required = false) List<String> filterVersionString,
        @Parameter(name = "filter[app]", description = "filter by id(s) of related 'app'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[app]", required = false) List<String> filterApp,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[gameCenterEnabledVersions]", description = "the fields to include for returned resources of type gameCenterEnabledVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[gameCenterEnabledVersions]", required = false) List<String> fieldsGameCenterEnabledVersions,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"compatibleVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"versionString\" : \"versionString\", \"iconAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"compatibleVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"versionString\" : \"versionString\", \"iconAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"compatibleVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"versionString\" : \"versionString\", \"iconAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"compatibleVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"versionString\" : \"versionString\", \"iconAsset\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" } }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related linkages (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship",
        tags = { "GameCenterEnabledVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related linkages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GameCenterEnabledVersionCompatibleVersionsLinkagesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GameCenterEnabledVersionCompatibleVersionsLinkagesResponse> gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
     *
     * @param id the id of the requested resource (required)
     * @param gameCenterEnabledVersionCompatibleVersionsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship",
        tags = { "GameCenterEnabledVersions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "GameCenterEnabledVersionCompatibleVersionsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody GameCenterEnabledVersionCompatibleVersionsLinkagesRequest gameCenterEnabledVersionCompatibleVersionsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/idfaDeclarations
     *
     * @param idfaDeclarationCreateRequest IdfaDeclaration representation (required)
     * @return Single IdfaDeclaration (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "idfaDeclarationsCreateInstance",
        tags = { "IdfaDeclarations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single IdfaDeclaration", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IdfaDeclarationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/idfaDeclarations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IdfaDeclarationResponse> idfaDeclarationsCreateInstance(
        @Parameter(name = "IdfaDeclarationCreateRequest", description = "IdfaDeclaration representation", required = true) @Valid @RequestBody IdfaDeclarationCreateRequest idfaDeclarationCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"attributesAppInstallationToPreviousAd\" : true, \"attributesActionWithPreviousAd\" : true, \"servesAds\" : true, \"honorsLimitedAdTracking\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"idfaDeclarations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/idfaDeclarations/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "idfaDeclarationsDeleteInstance",
        tags = { "IdfaDeclarations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/idfaDeclarations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> idfaDeclarationsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/idfaDeclarations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param idfaDeclarationUpdateRequest IdfaDeclaration representation (required)
     * @return Single IdfaDeclaration (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "idfaDeclarationsUpdateInstance",
        tags = { "IdfaDeclarations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single IdfaDeclaration", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IdfaDeclarationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/idfaDeclarations/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IdfaDeclarationResponse> idfaDeclarationsUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "IdfaDeclarationUpdateRequest", description = "IdfaDeclaration representation", required = true) @Valid @RequestBody IdfaDeclarationUpdateRequest idfaDeclarationUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"attributesAppInstallationToPreviousAd\" : true, \"attributesActionWithPreviousAd\" : true, \"servesAds\" : true, \"honorsLimitedAdTracking\" : true }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"idfaDeclarations\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/inAppPurchases/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsInAppPurchases the fields to include for returned resources of type inAppPurchases (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param limitApps maximum number of related apps returned (when they are included) (optional)
     * @return Single InAppPurchase (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "inAppPurchasesGetInstance",
        tags = { "InAppPurchases" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single InAppPurchase", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InAppPurchaseResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/inAppPurchases/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<InAppPurchaseResponse> inAppPurchasesGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[inAppPurchases]", description = "the fields to include for returned resources of type inAppPurchases", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[inAppPurchases]", required = false) List<String> fieldsInAppPurchases,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Max(50) @Parameter(name = "limit[apps]", description = "maximum number of related apps returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[apps]", required = false) Integer limitApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"apps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"productId\" : \"productId\", \"state\" : \"CREATED\", \"inAppPurchaseType\" : \"AUTOMATICALLY_RENEWABLE_SUBSCRIPTION\", \"referenceName\" : \"referenceName\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/preReleaseVersions/{id}/app
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "preReleaseVersionsAppGetToOneRelated",
        tags = { "PreReleaseVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/preReleaseVersions/{id}/app",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppResponse> preReleaseVersionsAppGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/preReleaseVersions/{id}/builds
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "preReleaseVersionsBuildsGetToManyRelated",
        tags = { "PreReleaseVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/preReleaseVersions/{id}/builds",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildsResponse> preReleaseVersionsBuildsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"individualTesters\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaTesters\" }, { \"id\" : \"id\", \"type\" : \"betaTesters\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewSubmission\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewSubmissions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appEncryptionDeclaration\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appEncryptionDeclarations\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"buildBetaDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"buildBetaDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"icons\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"buildIcons\" }, { \"id\" : \"id\", \"type\" : \"buildIcons\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaBuildLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaBuildLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"minOsVersion\" : \"minOsVersion\", \"processingState\" : \"PROCESSING\", \"expired\" : true, \"iconAssetToken\" : { \"width\" : 1, \"height\" : 6, \"templateUrl\" : \"templateUrl\" }, \"usesNonExemptEncryption\" : true, \"uploadedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/preReleaseVersions
     *
     * @param filterBuildsExpired filter by attribute &#39;builds.expired&#39; (optional)
     * @param filterBuildsProcessingState filter by attribute &#39;builds.processingState&#39; (optional)
     * @param filterPlatform filter by attribute &#39;platform&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @param filterApp filter by id(s) of related &#39;app&#39; (optional)
     * @param filterBuilds filter by id(s) of related &#39;builds&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return List of PreReleaseVersions (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "preReleaseVersionsGetCollection",
        tags = { "PreReleaseVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of PreReleaseVersions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PreReleaseVersionsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/preReleaseVersions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PreReleaseVersionsResponse> preReleaseVersionsGetCollection(
        @Parameter(name = "filter[builds.expired]", description = "filter by attribute 'builds.expired'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[builds.expired]", required = false) List<String> filterBuildsExpired,
        @Parameter(name = "filter[builds.processingState]", description = "filter by attribute 'builds.processingState'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[builds.processingState]", required = false) List<String> filterBuildsProcessingState,
        @Parameter(name = "filter[platform]", description = "filter by attribute 'platform'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[platform]", required = false) List<String> filterPlatform,
        @Parameter(name = "filter[version]", description = "filter by attribute 'version'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[version]", required = false) List<String> filterVersion,
        @Parameter(name = "filter[app]", description = "filter by id(s) of related 'app'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[app]", required = false) List<String> filterApp,
        @Parameter(name = "filter[builds]", description = "filter by id(s) of related 'builds'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[builds]", required = false) List<String> filterBuilds,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[preReleaseVersions]", description = "the fields to include for returned resources of type preReleaseVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[preReleaseVersions]", required = false) List<String> fieldsPreReleaseVersions,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[builds]", description = "maximum number of related builds returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[builds]", required = false) Integer limitBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"version\" : \"version\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"version\" : \"version\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/preReleaseVersions/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsPreReleaseVersions the fields to include for returned resources of type preReleaseVersions (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsBuilds the fields to include for returned resources of type builds (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitBuilds maximum number of related builds returned (when they are included) (optional)
     * @return Single PrereleaseVersion (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "preReleaseVersionsGetInstance",
        tags = { "PreReleaseVersions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single PrereleaseVersion", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PrereleaseVersionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/preReleaseVersions/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PrereleaseVersionResponse> preReleaseVersionsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[preReleaseVersions]", description = "the fields to include for returned resources of type preReleaseVersions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[preReleaseVersions]", required = false) List<String> fieldsPreReleaseVersions,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[builds]", description = "the fields to include for returned resources of type builds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[builds]", required = false) List<String> fieldsBuilds,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[builds]", description = "maximum number of related builds returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[builds]", required = false) Integer limitBuilds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"version\" : \"version\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/profiles/{id}/bundleId
     *
     * @param id the id of the requested resource (required)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @return Related resource (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "profilesBundleIdGetToOneRelated",
        tags = { "Profiles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Related resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BundleIdResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/profiles/{id}/bundleId",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BundleIdResponse> profilesBundleIdGetToOneRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[bundleIds]", description = "the fields to include for returned resources of type bundleIds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[bundleIds]", required = false) List<String> fieldsBundleIds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"app\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"apps\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleIdCapabilities\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" }, { \"id\" : \"id\", \"type\" : \"bundleIdCapabilities\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"profiles\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"profiles\" }, { \"id\" : \"id\", \"type\" : \"profiles\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"identifier\" : \"identifier\", \"seedId\" : \"seedId\", \"name\" : \"name\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"bundleIds\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/profiles/{id}/certificates
     *
     * @param id the id of the requested resource (required)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "profilesCertificatesGetToManyRelated",
        tags = { "Profiles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CertificatesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/profiles/{id}/certificates",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CertificatesResponse> profilesCertificatesGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[certificates]", description = "the fields to include for returned resources of type certificates", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[certificates]", required = false) List<String> fieldsCertificates,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"serialNumber\" : \"serialNumber\", \"certificateContent\" : \"certificateContent\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"certificates\" }, { \"attributes\" : { \"serialNumber\" : \"serialNumber\", \"certificateContent\" : \"certificateContent\", \"displayName\" : \"displayName\", \"name\" : \"name\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"certificates\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/profiles
     *
     * @param profileCreateRequest Profile representation (required)
     * @return Single Profile (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "profilesCreateInstance",
        tags = { "Profiles" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single Profile", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProfileResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/profiles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProfileResponse> profilesCreateInstance(
        @Parameter(name = "ProfileCreateRequest", description = "Profile representation", required = true) @Valid @RequestBody ProfileCreateRequest profileCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"certificates\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"certificates\" }, { \"id\" : \"id\", \"type\" : \"certificates\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"devices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"devices\" }, { \"id\" : \"id\", \"type\" : \"devices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleId\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"bundleIds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"profileState\" : \"ACTIVE\", \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"profileType\" : \"IOS_APP_DEVELOPMENT\", \"name\" : \"name\", \"profileContent\" : \"profileContent\", \"uuid\" : \"uuid\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"profiles\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/profiles/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "profilesDeleteInstance",
        tags = { "Profiles" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/profiles/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> profilesDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/profiles/{id}/devices
     *
     * @param id the id of the requested resource (required)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "profilesDevicesGetToManyRelated",
        tags = { "Profiles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DevicesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/profiles/{id}/devices",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DevicesResponse> profilesDevicesGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[devices]", description = "the fields to include for returned resources of type devices", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[devices]", required = false) List<String> fieldsDevices,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"deviceClass\" : \"APPLE_WATCH\", \"model\" : \"model\", \"udid\" : \"udid\", \"status\" : \"ENABLED\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"devices\" }, { \"attributes\" : { \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"deviceClass\" : \"APPLE_WATCH\", \"model\" : \"model\", \"udid\" : \"udid\", \"status\" : \"ENABLED\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"devices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/profiles
     *
     * @param filterName filter by attribute &#39;name&#39; (optional)
     * @param filterProfileState filter by attribute &#39;profileState&#39; (optional)
     * @param filterProfileType filter by attribute &#39;profileType&#39; (optional)
     * @param filterId filter by id(s) (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limitCertificates maximum number of related certificates returned (when they are included) (optional)
     * @param limitDevices maximum number of related devices returned (when they are included) (optional)
     * @return List of Profiles (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "profilesGetCollection",
        tags = { "Profiles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Profiles", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProfilesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/profiles",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProfilesResponse> profilesGetCollection(
        @Parameter(name = "filter[name]", description = "filter by attribute 'name'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[name]", required = false) List<String> filterName,
        @Parameter(name = "filter[profileState]", description = "filter by attribute 'profileState'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[profileState]", required = false) List<String> filterProfileState,
        @Parameter(name = "filter[profileType]", description = "filter by attribute 'profileType'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[profileType]", required = false) List<String> filterProfileType,
        @Parameter(name = "filter[id]", description = "filter by id(s)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[id]", required = false) List<String> filterId,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[profiles]", description = "the fields to include for returned resources of type profiles", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[profiles]", required = false) List<String> fieldsProfiles,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[certificates]", description = "the fields to include for returned resources of type certificates", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[certificates]", required = false) List<String> fieldsCertificates,
        @Parameter(name = "fields[devices]", description = "the fields to include for returned resources of type devices", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[devices]", required = false) List<String> fieldsDevices,
        @Parameter(name = "fields[bundleIds]", description = "the fields to include for returned resources of type bundleIds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[bundleIds]", required = false) List<String> fieldsBundleIds,
        @Max(50) @Parameter(name = "limit[certificates]", description = "maximum number of related certificates returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[certificates]", required = false) Integer limitCertificates,
        @Max(50) @Parameter(name = "limit[devices]", description = "maximum number of related devices returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[devices]", required = false) Integer limitDevices
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"certificates\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"certificates\" }, { \"id\" : \"id\", \"type\" : \"certificates\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"devices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"devices\" }, { \"id\" : \"id\", \"type\" : \"devices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleId\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"bundleIds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"profileState\" : \"ACTIVE\", \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"profileType\" : \"IOS_APP_DEVELOPMENT\", \"name\" : \"name\", \"profileContent\" : \"profileContent\", \"uuid\" : \"uuid\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"profiles\" }, { \"relationships\" : { \"certificates\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"certificates\" }, { \"id\" : \"id\", \"type\" : \"certificates\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"devices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"devices\" }, { \"id\" : \"id\", \"type\" : \"devices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleId\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"bundleIds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"profileState\" : \"ACTIVE\", \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"profileType\" : \"IOS_APP_DEVELOPMENT\", \"name\" : \"name\", \"profileContent\" : \"profileContent\", \"uuid\" : \"uuid\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"profiles\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/profiles/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsProfiles the fields to include for returned resources of type profiles (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsCertificates the fields to include for returned resources of type certificates (optional)
     * @param fieldsDevices the fields to include for returned resources of type devices (optional)
     * @param fieldsBundleIds the fields to include for returned resources of type bundleIds (optional)
     * @param limitCertificates maximum number of related certificates returned (when they are included) (optional)
     * @param limitDevices maximum number of related devices returned (when they are included) (optional)
     * @return Single Profile (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "profilesGetInstance",
        tags = { "Profiles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single Profile", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProfileResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/profiles/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProfileResponse> profilesGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[profiles]", description = "the fields to include for returned resources of type profiles", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[profiles]", required = false) List<String> fieldsProfiles,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[certificates]", description = "the fields to include for returned resources of type certificates", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[certificates]", required = false) List<String> fieldsCertificates,
        @Parameter(name = "fields[devices]", description = "the fields to include for returned resources of type devices", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[devices]", required = false) List<String> fieldsDevices,
        @Parameter(name = "fields[bundleIds]", description = "the fields to include for returned resources of type bundleIds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[bundleIds]", required = false) List<String> fieldsBundleIds,
        @Max(50) @Parameter(name = "limit[certificates]", description = "maximum number of related certificates returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[certificates]", required = false) Integer limitCertificates,
        @Max(50) @Parameter(name = "limit[devices]", description = "maximum number of related devices returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[devices]", required = false) Integer limitDevices
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"certificates\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"certificates\" }, { \"id\" : \"id\", \"type\" : \"certificates\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"devices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"devices\" }, { \"id\" : \"id\", \"type\" : \"devices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"bundleId\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"bundleIds\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"profileState\" : \"ACTIVE\", \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"profileType\" : \"IOS_APP_DEVELOPMENT\", \"name\" : \"name\", \"profileContent\" : \"profileContent\", \"uuid\" : \"uuid\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"profiles\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/routingAppCoverages
     *
     * @param routingAppCoverageCreateRequest RoutingAppCoverage representation (required)
     * @return Single RoutingAppCoverage (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "routingAppCoveragesCreateInstance",
        tags = { "RoutingAppCoverages" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single RoutingAppCoverage", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoutingAppCoverageResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/routingAppCoverages",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RoutingAppCoverageResponse> routingAppCoveragesCreateInstance(
        @Parameter(name = "RoutingAppCoverageCreateRequest", description = "RoutingAppCoverage representation", required = true) @Valid @RequestBody RoutingAppCoverageCreateRequest routingAppCoverageCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"routingAppCoverages\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/routingAppCoverages/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "routingAppCoveragesDeleteInstance",
        tags = { "RoutingAppCoverages" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/routingAppCoverages/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> routingAppCoveragesDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/routingAppCoverages/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsRoutingAppCoverages the fields to include for returned resources of type routingAppCoverages (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @return Single RoutingAppCoverage (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "routingAppCoveragesGetInstance",
        tags = { "RoutingAppCoverages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single RoutingAppCoverage", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoutingAppCoverageResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/routingAppCoverages/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RoutingAppCoverageResponse> routingAppCoveragesGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[routingAppCoverages]", description = "the fields to include for returned resources of type routingAppCoverages", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[routingAppCoverages]", required = false) List<String> fieldsRoutingAppCoverages,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"routingAppCoverages\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/routingAppCoverages/{id}
     *
     * @param id the id of the requested resource (required)
     * @param routingAppCoverageUpdateRequest RoutingAppCoverage representation (required)
     * @return Single RoutingAppCoverage (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "routingAppCoveragesUpdateInstance",
        tags = { "RoutingAppCoverages" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single RoutingAppCoverage", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoutingAppCoverageResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/routingAppCoverages/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RoutingAppCoverageResponse> routingAppCoveragesUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "RoutingAppCoverageUpdateRequest", description = "RoutingAppCoverage representation", required = true) @Valid @RequestBody RoutingAppCoverageUpdateRequest routingAppCoverageUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"appStoreVersion\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"fileName\" : \"fileName\", \"fileSize\" : 0, \"assetDeliveryState\" : { \"warnings\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ], \"state\" : \"AWAITING_UPLOAD\", \"errors\" : [ { \"code\" : \"code\", \"description\" : \"description\" }, { \"code\" : \"code\", \"description\" : \"description\" } ] }, \"sourceFileChecksum\" : \"sourceFileChecksum\", \"uploadOperations\" : [ { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" }, { \"requestHeaders\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ], \"method\" : \"method\", \"offset\" : 5, \"length\" : 5, \"url\" : \"url\" } ] }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"routingAppCoverages\" }, \"links\" : { \"self\" : \"self\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/salesReports
     *
     * @param filterFrequency filter by attribute &#39;frequency&#39; (required)
     * @param filterReportSubType filter by attribute &#39;reportSubType&#39; (required)
     * @param filterReportType filter by attribute &#39;reportType&#39; (required)
     * @param filterVendorNumber filter by attribute &#39;vendorNumber&#39; (required)
     * @param filterReportDate filter by attribute &#39;reportDate&#39; (optional)
     * @param filterVersion filter by attribute &#39;version&#39; (optional)
     * @return List of SalesReports (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "salesReportsGetCollection",
        tags = { "SalesReports" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of SalesReports", content = {
                @Content(mediaType = "gzip", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "gzip", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "gzip", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/salesReports",
        produces = { "gzip", "application/json" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> salesReportsGetCollection(
        @NotNull @Parameter(name = "filter[frequency]", description = "filter by attribute 'frequency'", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[frequency]", required = true) List<String> filterFrequency,
        @NotNull @Parameter(name = "filter[reportSubType]", description = "filter by attribute 'reportSubType'", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[reportSubType]", required = true) List<String> filterReportSubType,
        @NotNull @Parameter(name = "filter[reportType]", description = "filter by attribute 'reportType'", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[reportType]", required = true) List<String> filterReportType,
        @NotNull @Parameter(name = "filter[vendorNumber]", description = "filter by attribute 'vendorNumber'", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[vendorNumber]", required = true) List<String> filterVendorNumber,
        @Parameter(name = "filter[reportDate]", description = "filter by attribute 'reportDate'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[reportDate]", required = false) List<String> filterReportDate,
        @Parameter(name = "filter[version]", description = "filter by attribute 'version'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[version]", required = false) List<String> filterVersion
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/territories
     *
     * @param fieldsTerritories the fields to include for returned resources of type territories (optional)
     * @param limit maximum resources per page (optional)
     * @return List of Territories (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "territoriesGetCollection",
        tags = { "Territories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Territories", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TerritoriesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/territories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TerritoriesResponse> territoriesGetCollection(
        @Parameter(name = "fields[territories]", description = "the fields to include for returned resources of type territories", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[territories]", required = false) List<String> fieldsTerritories,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" }, { \"attributes\" : { \"currency\" : \"currency\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/userInvitations
     *
     * @param userInvitationCreateRequest UserInvitation representation (required)
     * @return Single UserInvitation (status code 201)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "userInvitationsCreateInstance",
        tags = { "UserInvitations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Single UserInvitation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserInvitationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/userInvitations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserInvitationResponse> userInvitationsCreateInstance(
        @Parameter(name = "UserInvitationCreateRequest", description = "UserInvitation representation", required = true) @Valid @RequestBody UserInvitationCreateRequest userInvitationCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"visibleApps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ null, null ], \"allAppsVisible\" : true, \"email\" : \"email\", \"provisioningAllowed\" : true, \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"userInvitations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/userInvitations/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "userInvitationsDeleteInstance",
        tags = { "UserInvitations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/userInvitations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> userInvitationsDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/userInvitations
     *
     * @param filterEmail filter by attribute &#39;email&#39; (optional)
     * @param filterRoles filter by attribute &#39;roles&#39; (optional)
     * @param filterVisibleApps filter by id(s) of related &#39;visibleApps&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsUserInvitations the fields to include for returned resources of type userInvitations (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitVisibleApps maximum number of related visibleApps returned (when they are included) (optional)
     * @return List of UserInvitations (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "userInvitationsGetCollection",
        tags = { "UserInvitations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of UserInvitations", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserInvitationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/userInvitations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserInvitationsResponse> userInvitationsGetCollection(
        @Parameter(name = "filter[email]", description = "filter by attribute 'email'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[email]", required = false) List<String> filterEmail,
        @Parameter(name = "filter[roles]", description = "filter by attribute 'roles'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[roles]", required = false) List<String> filterRoles,
        @Parameter(name = "filter[visibleApps]", description = "filter by id(s) of related 'visibleApps'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[visibleApps]", required = false) List<String> filterVisibleApps,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[userInvitations]", description = "the fields to include for returned resources of type userInvitations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[userInvitations]", required = false) List<String> fieldsUserInvitations,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[visibleApps]", description = "maximum number of related visibleApps returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[visibleApps]", required = false) Integer limitVisibleApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"visibleApps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ null, null ], \"allAppsVisible\" : true, \"email\" : \"email\", \"provisioningAllowed\" : true, \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"userInvitations\" }, { \"relationships\" : { \"visibleApps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ null, null ], \"allAppsVisible\" : true, \"email\" : \"email\", \"provisioningAllowed\" : true, \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"userInvitations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/userInvitations/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsUserInvitations the fields to include for returned resources of type userInvitations (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitVisibleApps maximum number of related visibleApps returned (when they are included) (optional)
     * @return Single UserInvitation (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "userInvitationsGetInstance",
        tags = { "UserInvitations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single UserInvitation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserInvitationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/userInvitations/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserInvitationResponse> userInvitationsGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[userInvitations]", description = "the fields to include for returned resources of type userInvitations", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[userInvitations]", required = false) List<String> fieldsUserInvitations,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[visibleApps]", description = "maximum number of related visibleApps returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[visibleApps]", required = false) Integer limitVisibleApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"visibleApps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ null, null ], \"allAppsVisible\" : true, \"email\" : \"email\", \"provisioningAllowed\" : true, \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"userInvitations\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/userInvitations/{id}/visibleApps
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "userInvitationsVisibleAppsGetToManyRelated",
        tags = { "UserInvitations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/userInvitations/{id}/visibleApps",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppsResponse> userInvitationsVisibleAppsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/users/{id}
     *
     * @param id the id of the requested resource (required)
     * @return Success (no content) (status code 204)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "usersDeleteInstance",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/users/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> usersDeleteInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/users
     *
     * @param filterRoles filter by attribute &#39;roles&#39; (optional)
     * @param filterUsername filter by attribute &#39;username&#39; (optional)
     * @param filterVisibleApps filter by id(s) of related &#39;visibleApps&#39; (optional)
     * @param sort comma-separated list of sort expressions; resources will be sorted as specified (optional)
     * @param fieldsUsers the fields to include for returned resources of type users (optional)
     * @param limit maximum resources per page (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitVisibleApps maximum number of related visibleApps returned (when they are included) (optional)
     * @return List of Users (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     */
    @Operation(
        operationId = "usersGetCollection",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Users", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UsersResponse> usersGetCollection(
        @Parameter(name = "filter[roles]", description = "filter by attribute 'roles'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[roles]", required = false) List<String> filterRoles,
        @Parameter(name = "filter[username]", description = "filter by attribute 'username'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[username]", required = false) List<String> filterUsername,
        @Parameter(name = "filter[visibleApps]", description = "filter by id(s) of related 'visibleApps'", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter[visibleApps]", required = false) List<String> filterVisibleApps,
        @Parameter(name = "sort", description = "comma-separated list of sort expressions; resources will be sorted as specified", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @Parameter(name = "fields[users]", description = "the fields to include for returned resources of type users", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[users]", required = false) List<String> fieldsUsers,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[visibleApps]", description = "maximum number of related visibleApps returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[visibleApps]", required = false) Integer limitVisibleApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"visibleApps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ null, null ], \"allAppsVisible\" : true, \"provisioningAllowed\" : true, \"username\" : \"username\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"users\" }, { \"relationships\" : { \"visibleApps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ null, null ], \"allAppsVisible\" : true, \"provisioningAllowed\" : true, \"username\" : \"username\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"users\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/users/{id}
     *
     * @param id the id of the requested resource (required)
     * @param fieldsUsers the fields to include for returned resources of type users (optional)
     * @param include comma-separated list of relationships to include (optional)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limitVisibleApps maximum number of related visibleApps returned (when they are included) (optional)
     * @return Single User (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "usersGetInstance",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single User", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserResponse> usersGetInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[users]", description = "the fields to include for returned resources of type users", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[users]", required = false) List<String> fieldsUsers,
        @Parameter(name = "include", description = "comma-separated list of relationships to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include", required = false) List<String> include,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(50) @Parameter(name = "limit[visibleApps]", description = "maximum number of related visibleApps returned (when they are included)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit[visibleApps]", required = false) Integer limitVisibleApps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"visibleApps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ null, null ], \"allAppsVisible\" : true, \"provisioningAllowed\" : true, \"username\" : \"username\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"users\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/users/{id}
     *
     * @param id the id of the requested resource (required)
     * @param userUpdateRequest User representation (required)
     * @return Single User (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "usersUpdateInstance",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Single User", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserResponse> usersUpdateInstance(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UserUpdateRequest", description = "User representation", required = true) @Valid @RequestBody UserUpdateRequest userUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"relationships\" : { \"visibleApps\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"roles\" : [ null, null ], \"allAppsVisible\" : true, \"provisioningAllowed\" : true, \"username\" : \"username\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"users\" }, \"links\" : { \"self\" : \"self\" }, \"included\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/users/{id}/relationships/visibleApps
     *
     * @param id the id of the requested resource (required)
     * @param userVisibleAppsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "usersVisibleAppsCreateToManyRelationship",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/users/{id}/relationships/visibleApps",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> usersVisibleAppsCreateToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UserVisibleAppsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody UserVisibleAppsLinkagesRequest userVisibleAppsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/users/{id}/relationships/visibleApps
     *
     * @param id the id of the requested resource (required)
     * @param userVisibleAppsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "usersVisibleAppsDeleteToManyRelationship",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/users/{id}/relationships/visibleApps",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> usersVisibleAppsDeleteToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UserVisibleAppsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody UserVisibleAppsLinkagesRequest userVisibleAppsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/users/{id}/visibleApps
     *
     * @param id the id of the requested resource (required)
     * @param fieldsApps the fields to include for returned resources of type apps (optional)
     * @param limit maximum resources per page (optional)
     * @return List of related resources (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "usersVisibleAppsGetToManyRelated",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related resources", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/{id}/visibleApps",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AppsResponse> usersVisibleAppsGetToManyRelated(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "fields[apps]", description = "the fields to include for returned resources of type apps", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields[apps]", required = false) List<String> fieldsApps,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" }, { \"relationships\" : { \"betaGroups\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaGroups\" }, { \"id\" : \"id\", \"type\" : \"betaGroups\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"endUserLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"endUserLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appInfos\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appInfos\" }, { \"id\" : \"id\", \"type\" : \"appInfos\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preReleaseVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" }, { \"id\" : \"id\", \"type\" : \"preReleaseVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"inAppPurchases\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"inAppPurchases\" }, { \"id\" : \"id\", \"type\" : \"inAppPurchases\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppReviewDetail\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaAppReviewDetails\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaLicenseAgreement\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"betaLicenseAgreements\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"gameCenterEnabledVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" }, { \"id\" : \"id\", \"type\" : \"gameCenterEnabledVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"appStoreVersions\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appStoreVersions\" }, { \"id\" : \"id\", \"type\" : \"appStoreVersions\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"builds\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"builds\" }, { \"id\" : \"id\", \"type\" : \"builds\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"preOrder\" : { \"data\" : { \"id\" : \"id\", \"type\" : \"appPreOrders\" }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"availableTerritories\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"territories\" }, { \"id\" : \"id\", \"type\" : \"territories\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"betaAppLocalizations\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" }, { \"id\" : \"id\", \"type\" : \"betaAppLocalizations\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } }, \"prices\" : { \"data\" : [ { \"id\" : \"id\", \"type\" : \"appPrices\" }, { \"id\" : \"id\", \"type\" : \"appPrices\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"related\" : \"related\", \"self\" : \"self\" } } }, \"attributes\" : { \"bundleId\" : \"bundleId\", \"name\" : \"name\", \"isOrEverWasMadeForKids\" : true, \"sku\" : \"sku\", \"availableInNewTerritories\" : true, \"contentRightsDeclaration\" : \"DOES_NOT_USE_THIRD_PARTY_CONTENT\", \"primaryLocale\" : \"primaryLocale\" }, \"links\" : { \"self\" : \"self\" }, \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" }, \"included\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/users/{id}/relationships/visibleApps
     *
     * @param id the id of the requested resource (required)
     * @param limit maximum resources per page (optional)
     * @return List of related linkages (status code 200)
     *         or Parameter error(s) (status code 400)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     */
    @Operation(
        operationId = "usersVisibleAppsGetToManyRelationship",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of related linkages", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserVisibleAppsLinkagesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Parameter error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/{id}/relationships/visibleApps",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserVisibleAppsLinkagesResponse> usersVisibleAppsGetToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Max(200) @Parameter(name = "limit", description = "maximum resources per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"id\" : \"id\", \"type\" : \"apps\" }, { \"id\" : \"id\", \"type\" : \"apps\" } ], \"meta\" : { \"paging\" : { \"total\" : 6, \"limit\" : 0 } }, \"links\" : { \"next\" : \"next\", \"self\" : \"self\", \"first\" : \"first\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /v1/users/{id}/relationships/visibleApps
     *
     * @param id the id of the requested resource (required)
     * @param userVisibleAppsLinkagesRequest List of related linkages (required)
     * @return Success (no content) (status code 204)
     *         or Forbidden error (status code 403)
     *         or Not found error (status code 404)
     *         or Request entity error(s) (status code 409)
     */
    @Operation(
        operationId = "usersVisibleAppsReplaceToManyRelationship",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success (no content)"),
            @ApiResponse(responseCode = "403", description = "Forbidden error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request entity error(s)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "itc-bearer-token")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/users/{id}/relationships/visibleApps",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> usersVisibleAppsReplaceToManyRelationship(
        @Parameter(name = "id", description = "the id of the requested resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "UserVisibleAppsLinkagesRequest", description = "List of related linkages", required = true) @Valid @RequestBody UserVisibleAppsLinkagesRequest userVisibleAppsLinkagesRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
