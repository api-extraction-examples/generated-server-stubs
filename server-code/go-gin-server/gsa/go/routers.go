/*
 * Discovery Market Research
 *
 * <p>This API drives the <a href=\"https://discovery.gsa.gov\">Discovery Market Research Tool</a>. It contains information on the vendors that are part of the OASIS and OASIS Small Business contracting vehicles, such as their contracting history, their elligibility for contract awards, and their small business designations. To learn more about the tool, please visit <a href=\"https://discovery.gsa.gov\">Discovery</a> or see the README on our <a href=\"https://github.com/PSHCDevOps/discovery\">GitHub repository</a>.</p> <p><strong>Please note that the base path for this API is <code>https://api.data.gov/gsa/discovery/</code></strong></p> <p>It requires an API key, obtainable at <a href=\"http://api.data.gov/\">api.data.gov</a>. It must be passed in the <code>api_key</code> parameter with each request.</p>
 *
 * API version: 0.1
 * Contact: discovery-18f@gsa.gov
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	router := gin.Default()
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the ContractsAPI part of the API
	ContractsAPI ContractsAPI
	// Routes for the MetadataAPI part of the API
	MetadataAPI MetadataAPI
	// Routes for the NaicsAPI part of the API
	NaicsAPI NaicsAPI
	// Routes for the VendorAPI part of the API
	VendorAPI VendorAPI
	// Routes for the VendorsAPI part of the API
	VendorsAPI VendorsAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{ 
		{
			"ListContractsGET",
			http.MethodGet,
			"/api/contracts/",
			handleFunctions.ContractsAPI.ListContractsGET,
		},
		{
			"MetadataGET",
			http.MethodGet,
			"/api/metadata/",
			handleFunctions.MetadataAPI.MetadataGET,
		},
		{
			"ListNaicsGET",
			http.MethodGet,
			"/api/naics/",
			handleFunctions.NaicsAPI.ListNaicsGET,
		},
		{
			"GetVendorGET",
			http.MethodGet,
			"/api/vendor/:duns",
			handleFunctions.VendorAPI.GetVendorGET,
		},
		{
			"ListVendorsGET",
			http.MethodGet,
			"/api/vendors/",
			handleFunctions.VendorsAPI.ListVendorsGET,
		},
	}
}
