/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type WorkflowSchemeDraftsAPI struct {
}

// Post /rest/api/3/workflowscheme/:id/createdraft
// Create draft workflow scheme 
func (api *WorkflowSchemeDraftsAPI) CreateWorkflowSchemeDraftFromParent(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/workflowscheme/:id/draft/default
// Delete draft default workflow 
func (api *WorkflowSchemeDraftsAPI) DeleteDraftDefaultWorkflow(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/workflowscheme/:id/draft/workflow
// Delete issue types for workflow in draft workflow scheme 
func (api *WorkflowSchemeDraftsAPI) DeleteDraftWorkflowMapping(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/workflowscheme/:id/draft
// Delete draft workflow scheme 
func (api *WorkflowSchemeDraftsAPI) DeleteWorkflowSchemeDraft(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/workflowscheme/:id/draft/issuetype/:issueType
// Delete workflow for issue type in draft workflow scheme 
func (api *WorkflowSchemeDraftsAPI) DeleteWorkflowSchemeDraftIssueType(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/workflowscheme/:id/draft/default
// Get draft default workflow 
func (api *WorkflowSchemeDraftsAPI) GetDraftDefaultWorkflow(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/workflowscheme/:id/draft/workflow
// Get issue types for workflows in draft workflow scheme 
func (api *WorkflowSchemeDraftsAPI) GetDraftWorkflow(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/workflowscheme/:id/draft
// Get draft workflow scheme 
func (api *WorkflowSchemeDraftsAPI) GetWorkflowSchemeDraft(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/workflowscheme/:id/draft/issuetype/:issueType
// Get workflow for issue type in draft workflow scheme 
func (api *WorkflowSchemeDraftsAPI) GetWorkflowSchemeDraftIssueType(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /rest/api/3/workflowscheme/:id/draft/publish
// Publish draft workflow scheme 
func (api *WorkflowSchemeDraftsAPI) PublishDraftWorkflowScheme(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/workflowscheme/:id/draft/issuetype/:issueType
// Set workflow for issue type in draft workflow scheme 
func (api *WorkflowSchemeDraftsAPI) SetWorkflowSchemeDraftIssueType(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/workflowscheme/:id/draft/default
// Update draft default workflow 
func (api *WorkflowSchemeDraftsAPI) UpdateDraftDefaultWorkflow(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/workflowscheme/:id/draft/workflow
// Set issue types for workflow in workflow scheme 
func (api *WorkflowSchemeDraftsAPI) UpdateDraftWorkflowMapping(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/workflowscheme/:id/draft
// Update draft workflow scheme 
func (api *WorkflowSchemeDraftsAPI) UpdateWorkflowSchemeDraft(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

