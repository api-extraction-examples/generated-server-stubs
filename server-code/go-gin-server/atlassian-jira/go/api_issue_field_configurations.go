/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type IssueFieldConfigurationsAPI struct {
}

// Put /rest/api/3/fieldconfigurationscheme/project
// Assign field configuration scheme to project 
func (api *IssueFieldConfigurationsAPI) AssignFieldConfigurationSchemeToProject(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /rest/api/3/fieldconfiguration
// Create field configuration 
func (api *IssueFieldConfigurationsAPI) CreateFieldConfiguration(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /rest/api/3/fieldconfigurationscheme
// Create field configuration scheme 
func (api *IssueFieldConfigurationsAPI) CreateFieldConfigurationScheme(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/fieldconfiguration/:id
// Delete field configuration 
func (api *IssueFieldConfigurationsAPI) DeleteFieldConfiguration(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/fieldconfigurationscheme/:id
// Delete field configuration scheme 
func (api *IssueFieldConfigurationsAPI) DeleteFieldConfigurationScheme(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/fieldconfigurationscheme
// Get all field configuration schemes 
func (api *IssueFieldConfigurationsAPI) GetAllFieldConfigurationSchemes(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/fieldconfiguration
// Get all field configurations 
func (api *IssueFieldConfigurationsAPI) GetAllFieldConfigurations(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/fieldconfiguration/:id/fields
// Get field configuration items 
func (api *IssueFieldConfigurationsAPI) GetFieldConfigurationItems(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/fieldconfigurationscheme/mapping
// Get field configuration issue type items 
func (api *IssueFieldConfigurationsAPI) GetFieldConfigurationSchemeMappings(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/fieldconfigurationscheme/project
// Get field configuration schemes for projects 
func (api *IssueFieldConfigurationsAPI) GetFieldConfigurationSchemeProjectMapping(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /rest/api/3/fieldconfigurationscheme/:id/mapping/delete
// Remove issue types from field configuration scheme 
func (api *IssueFieldConfigurationsAPI) RemoveIssueTypesFromGlobalFieldConfigurationScheme(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/fieldconfigurationscheme/:id/mapping
// Assign issue types to field configurations 
func (api *IssueFieldConfigurationsAPI) SetFieldConfigurationSchemeMapping(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/fieldconfiguration/:id
// Update field configuration 
func (api *IssueFieldConfigurationsAPI) UpdateFieldConfiguration(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/fieldconfiguration/:id/fields
// Update field configuration items 
func (api *IssueFieldConfigurationsAPI) UpdateFieldConfigurationItems(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/fieldconfigurationscheme/:id
// Update field configuration scheme 
func (api *IssueFieldConfigurationsAPI) UpdateFieldConfigurationScheme(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

