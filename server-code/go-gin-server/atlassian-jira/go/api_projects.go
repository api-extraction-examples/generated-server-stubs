/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type ProjectsAPI struct {
}

// Post /rest/api/3/project/:projectIdOrKey/archive
// Archive project 
func (api *ProjectsAPI) ArchiveProject(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /rest/api/3/project
// Create project 
func (api *ProjectsAPI) CreateProject(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/project/:projectIdOrKey
// Delete project 
func (api *ProjectsAPI) DeleteProject(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /rest/api/3/project/:projectIdOrKey/delete
// Delete project asynchronously 
func (api *ProjectsAPI) DeleteProjectAsynchronously(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/project
// Get all projects 
// Deprecated
func (api *ProjectsAPI) GetAllProjects(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/project/:projectIdOrKey/statuses
// Get all statuses for project 
func (api *ProjectsAPI) GetAllStatuses(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/project/:projectId/hierarchy
// Get project issue type hierarchy 
// Deprecated
func (api *ProjectsAPI) GetHierarchy(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/project/:projectKeyOrId/notificationscheme
// Get project notification scheme 
// Deprecated
func (api *ProjectsAPI) GetNotificationSchemeForProject(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/project/:projectIdOrKey
// Get project 
func (api *ProjectsAPI) GetProject(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/project/recent
// Get recent projects 
func (api *ProjectsAPI) GetRecent(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /rest/api/3/project/:projectIdOrKey/restore
// Restore deleted or archived project 
func (api *ProjectsAPI) Restore(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/project/search
// Get projects paginated 
func (api *ProjectsAPI) SearchProjects(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/project/:projectIdOrKey
// Update project 
func (api *ProjectsAPI) UpdateProject(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/project/:projectIdOrKey/type/:newProjectTypeKey
// Update project type 
// Deprecated
func (api *ProjectsAPI) UpdateProjectType(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

