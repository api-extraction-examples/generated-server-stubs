/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type FiltersAPI struct {
}

// Put /rest/api/3/filter/:id/owner
// Change filter owner 
func (api *FiltersAPI) ChangeFilterOwner(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /rest/api/3/filter
// Create filter 
func (api *FiltersAPI) CreateFilter(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/filter/:id/favourite
// Remove filter as favorite 
func (api *FiltersAPI) DeleteFavouriteForFilter(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/filter/:id
// Delete filter 
func (api *FiltersAPI) DeleteFilter(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/filter/:id/columns
// Get columns 
func (api *FiltersAPI) GetColumns(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/filter/favourite
// Get favorite filters 
func (api *FiltersAPI) GetFavouriteFilters(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/filter/:id
// Get filter 
func (api *FiltersAPI) GetFilter(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/filter/search
// Search for filters 
func (api *FiltersAPI) GetFiltersPaginated(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/filter/my
// Get my filters 
func (api *FiltersAPI) GetMyFilters(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/filter/:id/columns
// Reset columns 
func (api *FiltersAPI) ResetColumns(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/filter/:id/columns
// Set columns 
func (api *FiltersAPI) SetColumns(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/filter/:id/favourite
// Add filter as favorite 
func (api *FiltersAPI) SetFavouriteForFilter(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/filter/:id
// Update filter 
func (api *FiltersAPI) UpdateFilter(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

