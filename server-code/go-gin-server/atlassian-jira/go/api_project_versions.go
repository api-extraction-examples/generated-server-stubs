/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type ProjectVersionsAPI struct {
}

// Post /rest/api/3/version
// Create version 
func (api *ProjectVersionsAPI) CreateVersion(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /rest/api/3/version/:id/removeAndSwap
// Delete and replace version 
func (api *ProjectVersionsAPI) DeleteAndReplaceVersion(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/version/:id
// Delete version 
// Deprecated
func (api *ProjectVersionsAPI) DeleteVersion(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/project/:projectIdOrKey/versions
// Get project versions 
func (api *ProjectVersionsAPI) GetProjectVersions(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/project/:projectIdOrKey/version
// Get project versions paginated 
func (api *ProjectVersionsAPI) GetProjectVersionsPaginated(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/version/:id
// Get version 
func (api *ProjectVersionsAPI) GetVersion(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/version/:id/relatedIssueCounts
// Get version's related issues count 
func (api *ProjectVersionsAPI) GetVersionRelatedIssues(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/version/:id/unresolvedIssueCount
// Get version's unresolved issues count 
func (api *ProjectVersionsAPI) GetVersionUnresolvedIssues(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/version/:id/mergeto/:moveIssuesTo
// Merge versions 
func (api *ProjectVersionsAPI) MergeVersions(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /rest/api/3/version/:id/move
// Move version 
func (api *ProjectVersionsAPI) MoveVersion(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/version/:id
// Update version 
func (api *ProjectVersionsAPI) UpdateVersion(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

