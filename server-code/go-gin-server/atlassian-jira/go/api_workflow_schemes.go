/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type WorkflowSchemesAPI struct {
}

// Post /rest/api/3/workflowscheme
// Create workflow scheme 
func (api *WorkflowSchemesAPI) CreateWorkflowScheme(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/workflowscheme/:id/default
// Delete default workflow 
func (api *WorkflowSchemesAPI) DeleteDefaultWorkflow(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/workflowscheme/:id/workflow
// Delete issue types for workflow in workflow scheme 
func (api *WorkflowSchemesAPI) DeleteWorkflowMapping(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/workflowscheme/:id
// Delete workflow scheme 
func (api *WorkflowSchemesAPI) DeleteWorkflowScheme(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /rest/api/3/workflowscheme/:id/issuetype/:issueType
// Delete workflow for issue type in workflow scheme 
func (api *WorkflowSchemesAPI) DeleteWorkflowSchemeIssueType(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/workflowscheme
// Get all workflow schemes 
func (api *WorkflowSchemesAPI) GetAllWorkflowSchemes(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/workflowscheme/:id/default
// Get default workflow 
func (api *WorkflowSchemesAPI) GetDefaultWorkflow(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/workflowscheme/:id/workflow
// Get issue types for workflows in workflow scheme 
func (api *WorkflowSchemesAPI) GetWorkflow(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/workflowscheme/:id
// Get workflow scheme 
func (api *WorkflowSchemesAPI) GetWorkflowScheme(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /rest/api/3/workflowscheme/:id/issuetype/:issueType
// Get workflow for issue type in workflow scheme 
func (api *WorkflowSchemesAPI) GetWorkflowSchemeIssueType(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/workflowscheme/:id/issuetype/:issueType
// Set workflow for issue type in workflow scheme 
func (api *WorkflowSchemesAPI) SetWorkflowSchemeIssueType(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/workflowscheme/:id/default
// Update default workflow 
func (api *WorkflowSchemesAPI) UpdateDefaultWorkflow(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/workflowscheme/:id/workflow
// Set issue types for workflow in workflow scheme 
func (api *WorkflowSchemesAPI) UpdateWorkflowMapping(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /rest/api/3/workflowscheme/:id
// Update workflow scheme 
func (api *WorkflowSchemesAPI) UpdateWorkflowScheme(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

