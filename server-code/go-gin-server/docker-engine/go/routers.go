/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes ----------------|-------------|--------- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * API version: 1.33
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	router := gin.Default()
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the ConfigAPI part of the API
	ConfigAPI ConfigAPI
	// Routes for the ContainerAPI part of the API
	ContainerAPI ContainerAPI
	// Routes for the DefaultAPI part of the API
	DefaultAPI DefaultAPI
	// Routes for the DistributionAPI part of the API
	DistributionAPI DistributionAPI
	// Routes for the ExecAPI part of the API
	ExecAPI ExecAPI
	// Routes for the ImageAPI part of the API
	ImageAPI ImageAPI
	// Routes for the NetworkAPI part of the API
	NetworkAPI NetworkAPI
	// Routes for the NodeAPI part of the API
	NodeAPI NodeAPI
	// Routes for the PluginAPI part of the API
	PluginAPI PluginAPI
	// Routes for the SecretAPI part of the API
	SecretAPI SecretAPI
	// Routes for the ServiceAPI part of the API
	ServiceAPI ServiceAPI
	// Routes for the SessionExperimentalAPI part of the API
	SessionExperimentalAPI SessionExperimentalAPI
	// Routes for the SwarmAPI part of the API
	SwarmAPI SwarmAPI
	// Routes for the SystemAPI part of the API
	SystemAPI SystemAPI
	// Routes for the TaskAPI part of the API
	TaskAPI TaskAPI
	// Routes for the VolumeAPI part of the API
	VolumeAPI VolumeAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{ 
		{
			"ConfigCreate",
			http.MethodPost,
			"/v1.33/configs/create",
			handleFunctions.ConfigAPI.ConfigCreate,
		},
		{
			"ConfigDelete",
			http.MethodDelete,
			"/v1.33/configs/:id",
			handleFunctions.ConfigAPI.ConfigDelete,
		},
		{
			"ConfigInspect",
			http.MethodGet,
			"/v1.33/configs/:id",
			handleFunctions.ConfigAPI.ConfigInspect,
		},
		{
			"ConfigList",
			http.MethodGet,
			"/v1.33/configs",
			handleFunctions.ConfigAPI.ConfigList,
		},
		{
			"ConfigUpdate",
			http.MethodPost,
			"/v1.33/configs/:id/update",
			handleFunctions.ConfigAPI.ConfigUpdate,
		},
		{
			"ContainerArchive",
			http.MethodGet,
			"/v1.33/containers/:id/archive",
			handleFunctions.ContainerAPI.ContainerArchive,
		},
		{
			"ContainerArchiveInfo",
			http.MethodHead,
			"/v1.33/containers/:id/archive",
			handleFunctions.ContainerAPI.ContainerArchiveInfo,
		},
		{
			"ContainerAttach",
			http.MethodPost,
			"/v1.33/containers/:id/attach",
			handleFunctions.ContainerAPI.ContainerAttach,
		},
		{
			"ContainerAttachWebsocket",
			http.MethodGet,
			"/v1.33/containers/:id/attach/ws",
			handleFunctions.ContainerAPI.ContainerAttachWebsocket,
		},
		{
			"ContainerChanges",
			http.MethodGet,
			"/v1.33/containers/:id/changes",
			handleFunctions.ContainerAPI.ContainerChanges,
		},
		{
			"ContainerCreate",
			http.MethodPost,
			"/v1.33/containers/create",
			handleFunctions.ContainerAPI.ContainerCreate,
		},
		{
			"ContainerDelete",
			http.MethodDelete,
			"/v1.33/containers/:id",
			handleFunctions.ContainerAPI.ContainerDelete,
		},
		{
			"ContainerExport",
			http.MethodGet,
			"/v1.33/containers/:id/export",
			handleFunctions.ContainerAPI.ContainerExport,
		},
		{
			"ContainerInspect",
			http.MethodGet,
			"/v1.33/containers/:id/json",
			handleFunctions.ContainerAPI.ContainerInspect,
		},
		{
			"ContainerKill",
			http.MethodPost,
			"/v1.33/containers/:id/kill",
			handleFunctions.ContainerAPI.ContainerKill,
		},
		{
			"ContainerList",
			http.MethodGet,
			"/v1.33/containers/json",
			handleFunctions.ContainerAPI.ContainerList,
		},
		{
			"ContainerLogs",
			http.MethodGet,
			"/v1.33/containers/:id/logs",
			handleFunctions.ContainerAPI.ContainerLogs,
		},
		{
			"ContainerPause",
			http.MethodPost,
			"/v1.33/containers/:id/pause",
			handleFunctions.ContainerAPI.ContainerPause,
		},
		{
			"ContainerPrune",
			http.MethodPost,
			"/v1.33/containers/prune",
			handleFunctions.ContainerAPI.ContainerPrune,
		},
		{
			"ContainerRename",
			http.MethodPost,
			"/v1.33/containers/:id/rename",
			handleFunctions.ContainerAPI.ContainerRename,
		},
		{
			"ContainerResize",
			http.MethodPost,
			"/v1.33/containers/:id/resize",
			handleFunctions.ContainerAPI.ContainerResize,
		},
		{
			"ContainerRestart",
			http.MethodPost,
			"/v1.33/containers/:id/restart",
			handleFunctions.ContainerAPI.ContainerRestart,
		},
		{
			"ContainerStart",
			http.MethodPost,
			"/v1.33/containers/:id/start",
			handleFunctions.ContainerAPI.ContainerStart,
		},
		{
			"ContainerStats",
			http.MethodGet,
			"/v1.33/containers/:id/stats",
			handleFunctions.ContainerAPI.ContainerStats,
		},
		{
			"ContainerStop",
			http.MethodPost,
			"/v1.33/containers/:id/stop",
			handleFunctions.ContainerAPI.ContainerStop,
		},
		{
			"ContainerTop",
			http.MethodGet,
			"/v1.33/containers/:id/top",
			handleFunctions.ContainerAPI.ContainerTop,
		},
		{
			"ContainerUnpause",
			http.MethodPost,
			"/v1.33/containers/:id/unpause",
			handleFunctions.ContainerAPI.ContainerUnpause,
		},
		{
			"ContainerUpdate",
			http.MethodPost,
			"/v1.33/containers/:id/update",
			handleFunctions.ContainerAPI.ContainerUpdate,
		},
		{
			"ContainerWait",
			http.MethodPost,
			"/v1.33/containers/:id/wait",
			handleFunctions.ContainerAPI.ContainerWait,
		},
		{
			"PutContainerArchive",
			http.MethodPut,
			"/v1.33/containers/:id/archive",
			handleFunctions.ContainerAPI.PutContainerArchive,
		},
		{
			"TaskLogs",
			http.MethodGet,
			"/v1.33/tasks/:id/logs",
			handleFunctions.DefaultAPI.TaskLogs,
		},
		{
			"DistributionInspect",
			http.MethodGet,
			"/v1.33/distribution/:name/json",
			handleFunctions.DistributionAPI.DistributionInspect,
		},
		{
			"ContainerExec",
			http.MethodPost,
			"/v1.33/containers/:id/exec",
			handleFunctions.ExecAPI.ContainerExec,
		},
		{
			"ExecInspect",
			http.MethodGet,
			"/v1.33/exec/:id/json",
			handleFunctions.ExecAPI.ExecInspect,
		},
		{
			"ExecResize",
			http.MethodPost,
			"/v1.33/exec/:id/resize",
			handleFunctions.ExecAPI.ExecResize,
		},
		{
			"ExecStart",
			http.MethodPost,
			"/v1.33/exec/:id/start",
			handleFunctions.ExecAPI.ExecStart,
		},
		{
			"BuildPrune",
			http.MethodPost,
			"/v1.33/build/prune",
			handleFunctions.ImageAPI.BuildPrune,
		},
		{
			"ImageBuild",
			http.MethodPost,
			"/v1.33/build",
			handleFunctions.ImageAPI.ImageBuild,
		},
		{
			"ImageCommit",
			http.MethodPost,
			"/v1.33/commit",
			handleFunctions.ImageAPI.ImageCommit,
		},
		{
			"ImageCreate",
			http.MethodPost,
			"/v1.33/images/create",
			handleFunctions.ImageAPI.ImageCreate,
		},
		{
			"ImageDelete",
			http.MethodDelete,
			"/v1.33/images/:name",
			handleFunctions.ImageAPI.ImageDelete,
		},
		{
			"ImageGet",
			http.MethodGet,
			"/v1.33/images/:name/get",
			handleFunctions.ImageAPI.ImageGet,
		},
		{
			"ImageGetAll",
			http.MethodGet,
			"/v1.33/images/get",
			handleFunctions.ImageAPI.ImageGetAll,
		},
		{
			"ImageHistory",
			http.MethodGet,
			"/v1.33/images/:name/history",
			handleFunctions.ImageAPI.ImageHistory,
		},
		{
			"ImageInspect",
			http.MethodGet,
			"/v1.33/images/:name/json",
			handleFunctions.ImageAPI.ImageInspect,
		},
		{
			"ImageList",
			http.MethodGet,
			"/v1.33/images/json",
			handleFunctions.ImageAPI.ImageList,
		},
		{
			"ImageLoad",
			http.MethodPost,
			"/v1.33/images/load",
			handleFunctions.ImageAPI.ImageLoad,
		},
		{
			"ImagePrune",
			http.MethodPost,
			"/v1.33/images/prune",
			handleFunctions.ImageAPI.ImagePrune,
		},
		{
			"ImagePush",
			http.MethodPost,
			"/v1.33/images/:name/push",
			handleFunctions.ImageAPI.ImagePush,
		},
		{
			"ImageSearch",
			http.MethodGet,
			"/v1.33/images/search",
			handleFunctions.ImageAPI.ImageSearch,
		},
		{
			"ImageTag",
			http.MethodPost,
			"/v1.33/images/:name/tag",
			handleFunctions.ImageAPI.ImageTag,
		},
		{
			"NetworkConnect",
			http.MethodPost,
			"/v1.33/networks/:id/connect",
			handleFunctions.NetworkAPI.NetworkConnect,
		},
		{
			"NetworkCreate",
			http.MethodPost,
			"/v1.33/networks/create",
			handleFunctions.NetworkAPI.NetworkCreate,
		},
		{
			"NetworkDelete",
			http.MethodDelete,
			"/v1.33/networks/:id",
			handleFunctions.NetworkAPI.NetworkDelete,
		},
		{
			"NetworkDisconnect",
			http.MethodPost,
			"/v1.33/networks/:id/disconnect",
			handleFunctions.NetworkAPI.NetworkDisconnect,
		},
		{
			"NetworkInspect",
			http.MethodGet,
			"/v1.33/networks/:id",
			handleFunctions.NetworkAPI.NetworkInspect,
		},
		{
			"NetworkList",
			http.MethodGet,
			"/v1.33/networks",
			handleFunctions.NetworkAPI.NetworkList,
		},
		{
			"NetworkPrune",
			http.MethodPost,
			"/v1.33/networks/prune",
			handleFunctions.NetworkAPI.NetworkPrune,
		},
		{
			"NodeDelete",
			http.MethodDelete,
			"/v1.33/nodes/:id",
			handleFunctions.NodeAPI.NodeDelete,
		},
		{
			"NodeInspect",
			http.MethodGet,
			"/v1.33/nodes/:id",
			handleFunctions.NodeAPI.NodeInspect,
		},
		{
			"NodeList",
			http.MethodGet,
			"/v1.33/nodes",
			handleFunctions.NodeAPI.NodeList,
		},
		{
			"NodeUpdate",
			http.MethodPost,
			"/v1.33/nodes/:id/update",
			handleFunctions.NodeAPI.NodeUpdate,
		},
		{
			"GetPluginPrivileges",
			http.MethodGet,
			"/v1.33/plugins/privileges",
			handleFunctions.PluginAPI.GetPluginPrivileges,
		},
		{
			"PluginCreate",
			http.MethodPost,
			"/v1.33/plugins/create",
			handleFunctions.PluginAPI.PluginCreate,
		},
		{
			"PluginDelete",
			http.MethodDelete,
			"/v1.33/plugins/:name",
			handleFunctions.PluginAPI.PluginDelete,
		},
		{
			"PluginDisable",
			http.MethodPost,
			"/v1.33/plugins/:name/disable",
			handleFunctions.PluginAPI.PluginDisable,
		},
		{
			"PluginEnable",
			http.MethodPost,
			"/v1.33/plugins/:name/enable",
			handleFunctions.PluginAPI.PluginEnable,
		},
		{
			"PluginInspect",
			http.MethodGet,
			"/v1.33/plugins/:name/json",
			handleFunctions.PluginAPI.PluginInspect,
		},
		{
			"PluginList",
			http.MethodGet,
			"/v1.33/plugins",
			handleFunctions.PluginAPI.PluginList,
		},
		{
			"PluginPull",
			http.MethodPost,
			"/v1.33/plugins/pull",
			handleFunctions.PluginAPI.PluginPull,
		},
		{
			"PluginPush",
			http.MethodPost,
			"/v1.33/plugins/:name/push",
			handleFunctions.PluginAPI.PluginPush,
		},
		{
			"PluginSet",
			http.MethodPost,
			"/v1.33/plugins/:name/set",
			handleFunctions.PluginAPI.PluginSet,
		},
		{
			"PluginUpgrade",
			http.MethodPost,
			"/v1.33/plugins/:name/upgrade",
			handleFunctions.PluginAPI.PluginUpgrade,
		},
		{
			"SecretCreate",
			http.MethodPost,
			"/v1.33/secrets/create",
			handleFunctions.SecretAPI.SecretCreate,
		},
		{
			"SecretDelete",
			http.MethodDelete,
			"/v1.33/secrets/:id",
			handleFunctions.SecretAPI.SecretDelete,
		},
		{
			"SecretInspect",
			http.MethodGet,
			"/v1.33/secrets/:id",
			handleFunctions.SecretAPI.SecretInspect,
		},
		{
			"SecretList",
			http.MethodGet,
			"/v1.33/secrets",
			handleFunctions.SecretAPI.SecretList,
		},
		{
			"SecretUpdate",
			http.MethodPost,
			"/v1.33/secrets/:id/update",
			handleFunctions.SecretAPI.SecretUpdate,
		},
		{
			"ServiceCreate",
			http.MethodPost,
			"/v1.33/services/create",
			handleFunctions.ServiceAPI.ServiceCreate,
		},
		{
			"ServiceDelete",
			http.MethodDelete,
			"/v1.33/services/:id",
			handleFunctions.ServiceAPI.ServiceDelete,
		},
		{
			"ServiceInspect",
			http.MethodGet,
			"/v1.33/services/:id",
			handleFunctions.ServiceAPI.ServiceInspect,
		},
		{
			"ServiceList",
			http.MethodGet,
			"/v1.33/services",
			handleFunctions.ServiceAPI.ServiceList,
		},
		{
			"ServiceLogs",
			http.MethodGet,
			"/v1.33/services/:id/logs",
			handleFunctions.ServiceAPI.ServiceLogs,
		},
		{
			"ServiceUpdate",
			http.MethodPost,
			"/v1.33/services/:id/update",
			handleFunctions.ServiceAPI.ServiceUpdate,
		},
		{
			"Session",
			http.MethodPost,
			"/v1.33/session",
			handleFunctions.SessionExperimentalAPI.Session,
		},
		{
			"SwarmInit",
			http.MethodPost,
			"/v1.33/swarm/init",
			handleFunctions.SwarmAPI.SwarmInit,
		},
		{
			"SwarmInspect",
			http.MethodGet,
			"/v1.33/swarm",
			handleFunctions.SwarmAPI.SwarmInspect,
		},
		{
			"SwarmJoin",
			http.MethodPost,
			"/v1.33/swarm/join",
			handleFunctions.SwarmAPI.SwarmJoin,
		},
		{
			"SwarmLeave",
			http.MethodPost,
			"/v1.33/swarm/leave",
			handleFunctions.SwarmAPI.SwarmLeave,
		},
		{
			"SwarmUnlock",
			http.MethodPost,
			"/v1.33/swarm/unlock",
			handleFunctions.SwarmAPI.SwarmUnlock,
		},
		{
			"SwarmUnlockkey",
			http.MethodGet,
			"/v1.33/swarm/unlockkey",
			handleFunctions.SwarmAPI.SwarmUnlockkey,
		},
		{
			"SwarmUpdate",
			http.MethodPost,
			"/v1.33/swarm/update",
			handleFunctions.SwarmAPI.SwarmUpdate,
		},
		{
			"SystemAuth",
			http.MethodPost,
			"/v1.33/auth",
			handleFunctions.SystemAPI.SystemAuth,
		},
		{
			"SystemDataUsage",
			http.MethodGet,
			"/v1.33/system/df",
			handleFunctions.SystemAPI.SystemDataUsage,
		},
		{
			"SystemEvents",
			http.MethodGet,
			"/v1.33/events",
			handleFunctions.SystemAPI.SystemEvents,
		},
		{
			"SystemInfo",
			http.MethodGet,
			"/v1.33/info",
			handleFunctions.SystemAPI.SystemInfo,
		},
		{
			"SystemPing",
			http.MethodGet,
			"/v1.33/_ping",
			handleFunctions.SystemAPI.SystemPing,
		},
		{
			"SystemVersion",
			http.MethodGet,
			"/v1.33/version",
			handleFunctions.SystemAPI.SystemVersion,
		},
		{
			"TaskInspect",
			http.MethodGet,
			"/v1.33/tasks/:id",
			handleFunctions.TaskAPI.TaskInspect,
		},
		{
			"TaskList",
			http.MethodGet,
			"/v1.33/tasks",
			handleFunctions.TaskAPI.TaskList,
		},
		{
			"VolumeCreate",
			http.MethodPost,
			"/v1.33/volumes/create",
			handleFunctions.VolumeAPI.VolumeCreate,
		},
		{
			"VolumeDelete",
			http.MethodDelete,
			"/v1.33/volumes/:name",
			handleFunctions.VolumeAPI.VolumeDelete,
		},
		{
			"VolumeInspect",
			http.MethodGet,
			"/v1.33/volumes/:name",
			handleFunctions.VolumeAPI.VolumeInspect,
		},
		{
			"VolumeList",
			http.MethodGet,
			"/v1.33/volumes",
			handleFunctions.VolumeAPI.VolumeList,
		},
		{
			"VolumePrune",
			http.MethodPost,
			"/v1.33/volumes/prune",
			handleFunctions.VolumeAPI.VolumePrune,
		},
	}
}
