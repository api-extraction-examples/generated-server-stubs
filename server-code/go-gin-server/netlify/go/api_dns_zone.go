/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * API version: 2.16.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type DnsZoneAPI struct {
}

// Put /api/v1/sites/:site_id/dns
func (api *DnsZoneAPI) ConfigureDNSForSite(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v1/dns_zones/:zone_id/dns_records
func (api *DnsZoneAPI) CreateDnsRecord(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v1/dns_zones
func (api *DnsZoneAPI) CreateDnsZone(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /api/v1/dns_zones/:zone_id/dns_records/:dns_record_id
func (api *DnsZoneAPI) DeleteDnsRecord(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /api/v1/dns_zones/:zone_id
func (api *DnsZoneAPI) DeleteDnsZone(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/sites/:site_id/dns
func (api *DnsZoneAPI) GetDNSForSite(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/dns_zones/:zone_id/dns_records
func (api *DnsZoneAPI) GetDnsRecords(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/dns_zones/:zone_id
func (api *DnsZoneAPI) GetDnsZone(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/dns_zones
func (api *DnsZoneAPI) GetDnsZones(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/dns_zones/:zone_id/dns_records/:dns_record_id
func (api *DnsZoneAPI) GetIndividualDnsRecord(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /api/v1/dns_zones/:zone_id/transfer
func (api *DnsZoneAPI) TransferDnsZone(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

