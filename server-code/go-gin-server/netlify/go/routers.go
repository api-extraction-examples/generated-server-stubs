/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * API version: 2.16.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	router := gin.Default()
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the AccessTokenAPI part of the API
	AccessTokenAPI AccessTokenAPI
	// Routes for the AccountMembershipAPI part of the API
	AccountMembershipAPI AccountMembershipAPI
	// Routes for the AccountTypeAPI part of the API
	AccountTypeAPI AccountTypeAPI
	// Routes for the AssetAPI part of the API
	AssetAPI AssetAPI
	// Routes for the AssetPublicSignatureAPI part of the API
	AssetPublicSignatureAPI AssetPublicSignatureAPI
	// Routes for the AuditLogAPI part of the API
	AuditLogAPI AuditLogAPI
	// Routes for the BuildAPI part of the API
	BuildAPI BuildAPI
	// Routes for the BuildHookAPI part of the API
	BuildHookAPI BuildHookAPI
	// Routes for the BuildLogMsgAPI part of the API
	BuildLogMsgAPI BuildLogMsgAPI
	// Routes for the DeployAPI part of the API
	DeployAPI DeployAPI
	// Routes for the DeployKeyAPI part of the API
	DeployKeyAPI DeployKeyAPI
	// Routes for the DeployedBranchAPI part of the API
	DeployedBranchAPI DeployedBranchAPI
	// Routes for the DnsZoneAPI part of the API
	DnsZoneAPI DnsZoneAPI
	// Routes for the EnvironmentVariablesAPI part of the API
	EnvironmentVariablesAPI EnvironmentVariablesAPI
	// Routes for the FileAPI part of the API
	FileAPI FileAPI
	// Routes for the FormAPI part of the API
	FormAPI FormAPI
	// Routes for the FunctionAPI part of the API
	FunctionAPI FunctionAPI
	// Routes for the HookAPI part of the API
	HookAPI HookAPI
	// Routes for the HookTypeAPI part of the API
	HookTypeAPI HookTypeAPI
	// Routes for the MemberAPI part of the API
	MemberAPI MemberAPI
	// Routes for the MetadataAPI part of the API
	MetadataAPI MetadataAPI
	// Routes for the PaymentMethodAPI part of the API
	PaymentMethodAPI PaymentMethodAPI
	// Routes for the ServiceAPI part of the API
	ServiceAPI ServiceAPI
	// Routes for the ServiceInstanceAPI part of the API
	ServiceInstanceAPI ServiceInstanceAPI
	// Routes for the SiteAPI part of the API
	SiteAPI SiteAPI
	// Routes for the SniCertificateAPI part of the API
	SniCertificateAPI SniCertificateAPI
	// Routes for the SnippetAPI part of the API
	SnippetAPI SnippetAPI
	// Routes for the SplitTestAPI part of the API
	SplitTestAPI SplitTestAPI
	// Routes for the SubmissionAPI part of the API
	SubmissionAPI SubmissionAPI
	// Routes for the TicketAPI part of the API
	TicketAPI TicketAPI
	// Routes for the UserAPI part of the API
	UserAPI UserAPI
	// Routes for the XInternalAPI part of the API
	XInternalAPI XInternalAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{ 
		{
			"ExchangeTicket",
			http.MethodPost,
			"/api/v1/oauth/tickets/:ticket_id/exchange",
			handleFunctions.AccessTokenAPI.ExchangeTicket,
		},
		{
			"CancelAccount",
			http.MethodDelete,
			"/api/v1/accounts/:account_id",
			handleFunctions.AccountMembershipAPI.CancelAccount,
		},
		{
			"CreateAccount",
			http.MethodPost,
			"/api/v1/accounts",
			handleFunctions.AccountMembershipAPI.CreateAccount,
		},
		{
			"GetAccount",
			http.MethodGet,
			"/api/v1/accounts/:account_id",
			handleFunctions.AccountMembershipAPI.GetAccount,
		},
		{
			"ListAccountsForUser",
			http.MethodGet,
			"/api/v1/accounts",
			handleFunctions.AccountMembershipAPI.ListAccountsForUser,
		},
		{
			"UpdateAccount",
			http.MethodPut,
			"/api/v1/accounts/:account_id",
			handleFunctions.AccountMembershipAPI.UpdateAccount,
		},
		{
			"ListAccountTypesForUser",
			http.MethodGet,
			"/api/v1/accounts/types",
			handleFunctions.AccountTypeAPI.ListAccountTypesForUser,
		},
		{
			"CreateSiteAsset",
			http.MethodPost,
			"/api/v1/sites/:site_id/assets",
			handleFunctions.AssetAPI.CreateSiteAsset,
		},
		{
			"DeleteSiteAsset",
			http.MethodDelete,
			"/api/v1/sites/:site_id/assets/:asset_id",
			handleFunctions.AssetAPI.DeleteSiteAsset,
		},
		{
			"GetSiteAssetInfo",
			http.MethodGet,
			"/api/v1/sites/:site_id/assets/:asset_id",
			handleFunctions.AssetAPI.GetSiteAssetInfo,
		},
		{
			"ListSiteAssets",
			http.MethodGet,
			"/api/v1/sites/:site_id/assets",
			handleFunctions.AssetAPI.ListSiteAssets,
		},
		{
			"UpdateSiteAsset",
			http.MethodPut,
			"/api/v1/sites/:site_id/assets/:asset_id",
			handleFunctions.AssetAPI.UpdateSiteAsset,
		},
		{
			"GetSiteAssetPublicSignature",
			http.MethodGet,
			"/api/v1/sites/:site_id/assets/:asset_id/public_signature",
			handleFunctions.AssetPublicSignatureAPI.GetSiteAssetPublicSignature,
		},
		{
			"ListAccountAuditEvents",
			http.MethodGet,
			"/api/v1/accounts/:account_id/audit",
			handleFunctions.AuditLogAPI.ListAccountAuditEvents,
		},
		{
			"CreateSiteBuild",
			http.MethodPost,
			"/api/v1/sites/:site_id/builds",
			handleFunctions.BuildAPI.CreateSiteBuild,
		},
		{
			"GetAccountBuildStatus",
			http.MethodGet,
			"/api/v1/:account_id/builds/status",
			handleFunctions.BuildAPI.GetAccountBuildStatus,
		},
		{
			"GetSiteBuild",
			http.MethodGet,
			"/api/v1/builds/:build_id",
			handleFunctions.BuildAPI.GetSiteBuild,
		},
		{
			"ListSiteBuilds",
			http.MethodGet,
			"/api/v1/sites/:site_id/builds",
			handleFunctions.BuildAPI.ListSiteBuilds,
		},
		{
			"NotifyBuildStart",
			http.MethodPost,
			"/api/v1/builds/:build_id/start",
			handleFunctions.BuildAPI.NotifyBuildStart,
		},
		{
			"CreateSiteBuildHook",
			http.MethodPost,
			"/api/v1/sites/:site_id/build_hooks",
			handleFunctions.BuildHookAPI.CreateSiteBuildHook,
		},
		{
			"DeleteSiteBuildHook",
			http.MethodDelete,
			"/api/v1/sites/:site_id/build_hooks/:id",
			handleFunctions.BuildHookAPI.DeleteSiteBuildHook,
		},
		{
			"GetSiteBuildHook",
			http.MethodGet,
			"/api/v1/sites/:site_id/build_hooks/:id",
			handleFunctions.BuildHookAPI.GetSiteBuildHook,
		},
		{
			"ListSiteBuildHooks",
			http.MethodGet,
			"/api/v1/sites/:site_id/build_hooks",
			handleFunctions.BuildHookAPI.ListSiteBuildHooks,
		},
		{
			"UpdateSiteBuildHook",
			http.MethodPut,
			"/api/v1/sites/:site_id/build_hooks/:id",
			handleFunctions.BuildHookAPI.UpdateSiteBuildHook,
		},
		{
			"UpdateSiteBuildLog",
			http.MethodPost,
			"/api/v1/builds/:build_id/log",
			handleFunctions.BuildLogMsgAPI.UpdateSiteBuildLog,
		},
		{
			"CancelSiteDeploy",
			http.MethodPost,
			"/api/v1/deploys/:deploy_id/cancel",
			handleFunctions.DeployAPI.CancelSiteDeploy,
		},
		{
			"CreateSiteDeploy",
			http.MethodPost,
			"/api/v1/sites/:site_id/deploys",
			handleFunctions.DeployAPI.CreateSiteDeploy,
		},
		{
			"DeleteDeploy",
			http.MethodDelete,
			"/api/v1/deploys/:deploy_id",
			handleFunctions.DeployAPI.DeleteDeploy,
		},
		{
			"DeleteSiteDeploy",
			http.MethodDelete,
			"/api/v1/sites/:site_id/deploys/:deploy_id",
			handleFunctions.DeployAPI.DeleteSiteDeploy,
		},
		{
			"GetDeploy",
			http.MethodGet,
			"/api/v1/deploys/:deploy_id",
			handleFunctions.DeployAPI.GetDeploy,
		},
		{
			"GetSiteDeploy",
			http.MethodGet,
			"/api/v1/sites/:site_id/deploys/:deploy_id",
			handleFunctions.DeployAPI.GetSiteDeploy,
		},
		{
			"ListSiteDeploys",
			http.MethodGet,
			"/api/v1/sites/:site_id/deploys",
			handleFunctions.DeployAPI.ListSiteDeploys,
		},
		{
			"LockDeploy",
			http.MethodPost,
			"/api/v1/deploys/:deploy_id/lock",
			handleFunctions.DeployAPI.LockDeploy,
		},
		{
			"RestoreSiteDeploy",
			http.MethodPost,
			"/api/v1/sites/:site_id/deploys/:deploy_id/restore",
			handleFunctions.DeployAPI.RestoreSiteDeploy,
		},
		{
			"RollbackSiteDeploy",
			http.MethodPut,
			"/api/v1/sites/:site_id/rollback",
			handleFunctions.DeployAPI.RollbackSiteDeploy,
		},
		{
			"UnlockDeploy",
			http.MethodPost,
			"/api/v1/deploys/:deploy_id/unlock",
			handleFunctions.DeployAPI.UnlockDeploy,
		},
		{
			"UpdateSiteDeploy",
			http.MethodPut,
			"/api/v1/sites/:site_id/deploys/:deploy_id",
			handleFunctions.DeployAPI.UpdateSiteDeploy,
		},
		{
			"CreateDeployKey",
			http.MethodPost,
			"/api/v1/deploy_keys",
			handleFunctions.DeployKeyAPI.CreateDeployKey,
		},
		{
			"DeleteDeployKey",
			http.MethodDelete,
			"/api/v1/deploy_keys/:key_id",
			handleFunctions.DeployKeyAPI.DeleteDeployKey,
		},
		{
			"GetDeployKey",
			http.MethodGet,
			"/api/v1/deploy_keys/:key_id",
			handleFunctions.DeployKeyAPI.GetDeployKey,
		},
		{
			"ListDeployKeys",
			http.MethodGet,
			"/api/v1/deploy_keys",
			handleFunctions.DeployKeyAPI.ListDeployKeys,
		},
		{
			"ListSiteDeployedBranches",
			http.MethodGet,
			"/api/v1/sites/:site_id/deployed-branches",
			handleFunctions.DeployedBranchAPI.ListSiteDeployedBranches,
		},
		{
			"ConfigureDNSForSite",
			http.MethodPut,
			"/api/v1/sites/:site_id/dns",
			handleFunctions.DnsZoneAPI.ConfigureDNSForSite,
		},
		{
			"CreateDnsRecord",
			http.MethodPost,
			"/api/v1/dns_zones/:zone_id/dns_records",
			handleFunctions.DnsZoneAPI.CreateDnsRecord,
		},
		{
			"CreateDnsZone",
			http.MethodPost,
			"/api/v1/dns_zones",
			handleFunctions.DnsZoneAPI.CreateDnsZone,
		},
		{
			"DeleteDnsRecord",
			http.MethodDelete,
			"/api/v1/dns_zones/:zone_id/dns_records/:dns_record_id",
			handleFunctions.DnsZoneAPI.DeleteDnsRecord,
		},
		{
			"DeleteDnsZone",
			http.MethodDelete,
			"/api/v1/dns_zones/:zone_id",
			handleFunctions.DnsZoneAPI.DeleteDnsZone,
		},
		{
			"GetDNSForSite",
			http.MethodGet,
			"/api/v1/sites/:site_id/dns",
			handleFunctions.DnsZoneAPI.GetDNSForSite,
		},
		{
			"GetDnsRecords",
			http.MethodGet,
			"/api/v1/dns_zones/:zone_id/dns_records",
			handleFunctions.DnsZoneAPI.GetDnsRecords,
		},
		{
			"GetDnsZone",
			http.MethodGet,
			"/api/v1/dns_zones/:zone_id",
			handleFunctions.DnsZoneAPI.GetDnsZone,
		},
		{
			"GetDnsZones",
			http.MethodGet,
			"/api/v1/dns_zones",
			handleFunctions.DnsZoneAPI.GetDnsZones,
		},
		{
			"GetIndividualDnsRecord",
			http.MethodGet,
			"/api/v1/dns_zones/:zone_id/dns_records/:dns_record_id",
			handleFunctions.DnsZoneAPI.GetIndividualDnsRecord,
		},
		{
			"TransferDnsZone",
			http.MethodPut,
			"/api/v1/dns_zones/:zone_id/transfer",
			handleFunctions.DnsZoneAPI.TransferDnsZone,
		},
		{
			"CreateEnvVars",
			http.MethodPost,
			"/api/v1/accounts/:account_id/env",
			handleFunctions.EnvironmentVariablesAPI.CreateEnvVars,
		},
		{
			"DeleteEnvVar",
			http.MethodDelete,
			"/api/v1/accounts/:account_id/env/:key",
			handleFunctions.EnvironmentVariablesAPI.DeleteEnvVar,
		},
		{
			"DeleteEnvVarValue",
			http.MethodDelete,
			"/api/v1/accounts/:account_id/env/:key/value/:id",
			handleFunctions.EnvironmentVariablesAPI.DeleteEnvVarValue,
		},
		{
			"GetEnvVar",
			http.MethodGet,
			"/api/v1/accounts/:account_id/env/:key",
			handleFunctions.EnvironmentVariablesAPI.GetEnvVar,
		},
		{
			"GetEnvVars",
			http.MethodGet,
			"/api/v1/accounts/:account_id/env",
			handleFunctions.EnvironmentVariablesAPI.GetEnvVars,
		},
		{
			"SetEnvVarValue",
			http.MethodPatch,
			"/api/v1/accounts/:account_id/env/:key",
			handleFunctions.EnvironmentVariablesAPI.SetEnvVarValue,
		},
		{
			"UpdateEnvVar",
			http.MethodPut,
			"/api/v1/accounts/:account_id/env/:key",
			handleFunctions.EnvironmentVariablesAPI.UpdateEnvVar,
		},
		{
			"GetSiteFileByPathName",
			http.MethodGet,
			"/api/v1/sites/:site_id/files/:file_path",
			handleFunctions.FileAPI.GetSiteFileByPathName,
		},
		{
			"ListSiteFiles",
			http.MethodGet,
			"/api/v1/sites/:site_id/files",
			handleFunctions.FileAPI.ListSiteFiles,
		},
		{
			"UploadDeployFile",
			http.MethodPut,
			"/api/v1/deploys/:deploy_id/files/:path",
			handleFunctions.FileAPI.UploadDeployFile,
		},
		{
			"DeleteSiteForm",
			http.MethodDelete,
			"/api/v1/sites/:site_id/forms/:form_id",
			handleFunctions.FormAPI.DeleteSiteForm,
		},
		{
			"ListSiteForms",
			http.MethodGet,
			"/api/v1/sites/:site_id/forms",
			handleFunctions.FormAPI.ListSiteForms,
		},
		{
			"UploadDeployFunction",
			http.MethodPut,
			"/api/v1/deploys/:deploy_id/functions/:name",
			handleFunctions.FunctionAPI.UploadDeployFunction,
		},
		{
			"CreateHookBySiteId",
			http.MethodPost,
			"/api/v1/hooks",
			handleFunctions.HookAPI.CreateHookBySiteId,
		},
		{
			"DeleteHook",
			http.MethodDelete,
			"/api/v1/hooks/:hook_id",
			handleFunctions.HookAPI.DeleteHook,
		},
		{
			"EnableHook",
			http.MethodPost,
			"/api/v1/hooks/:hook_id/enable",
			handleFunctions.HookAPI.EnableHook,
		},
		{
			"GetHook",
			http.MethodGet,
			"/api/v1/hooks/:hook_id",
			handleFunctions.HookAPI.GetHook,
		},
		{
			"ListHooksBySiteId",
			http.MethodGet,
			"/api/v1/hooks",
			handleFunctions.HookAPI.ListHooksBySiteId,
		},
		{
			"UpdateHook",
			http.MethodPut,
			"/api/v1/hooks/:hook_id",
			handleFunctions.HookAPI.UpdateHook,
		},
		{
			"ListHookTypes",
			http.MethodGet,
			"/api/v1/hooks/types",
			handleFunctions.HookTypeAPI.ListHookTypes,
		},
		{
			"AddMemberToAccount",
			http.MethodPost,
			"/api/v1/:account_slug/members",
			handleFunctions.MemberAPI.AddMemberToAccount,
		},
		{
			"GetAccountMember",
			http.MethodGet,
			"/api/v1/:account_slug/members/:member_id",
			handleFunctions.MemberAPI.GetAccountMember,
		},
		{
			"ListMembersForAccount",
			http.MethodGet,
			"/api/v1/:account_slug/members",
			handleFunctions.MemberAPI.ListMembersForAccount,
		},
		{
			"RemoveAccountMember",
			http.MethodDelete,
			"/api/v1/:account_slug/members/:member_id",
			handleFunctions.MemberAPI.RemoveAccountMember,
		},
		{
			"UpdateAccountMember",
			http.MethodPut,
			"/api/v1/:account_slug/members/:member_id",
			handleFunctions.MemberAPI.UpdateAccountMember,
		},
		{
			"GetSiteMetadata",
			http.MethodGet,
			"/api/v1/sites/:site_id/metadata",
			handleFunctions.MetadataAPI.GetSiteMetadata,
		},
		{
			"UpdateSiteMetadata",
			http.MethodPut,
			"/api/v1/sites/:site_id/metadata",
			handleFunctions.MetadataAPI.UpdateSiteMetadata,
		},
		{
			"ListPaymentMethodsForUser",
			http.MethodGet,
			"/api/v1/billing/payment_methods",
			handleFunctions.PaymentMethodAPI.ListPaymentMethodsForUser,
		},
		{
			"GetServices",
			http.MethodGet,
			"/api/v1/services/",
			handleFunctions.ServiceAPI.GetServices,
		},
		{
			"ShowService",
			http.MethodGet,
			"/api/v1/services/:addonName",
			handleFunctions.ServiceAPI.ShowService,
		},
		{
			"ShowServiceManifest",
			http.MethodGet,
			"/api/v1/services/:addonName/manifest",
			handleFunctions.ServiceAPI.ShowServiceManifest,
		},
		{
			"CreateServiceInstance",
			http.MethodPost,
			"/api/v1/sites/:site_id/services/:addon/instances",
			handleFunctions.ServiceInstanceAPI.CreateServiceInstance,
		},
		{
			"DeleteServiceInstance",
			http.MethodDelete,
			"/api/v1/sites/:site_id/services/:addon/instances/:instance_id",
			handleFunctions.ServiceInstanceAPI.DeleteServiceInstance,
		},
		{
			"ListServiceInstancesForSite",
			http.MethodGet,
			"/api/v1/sites/:site_id/service-instances",
			handleFunctions.ServiceInstanceAPI.ListServiceInstancesForSite,
		},
		{
			"ShowServiceInstance",
			http.MethodGet,
			"/api/v1/sites/:site_id/services/:addon/instances/:instance_id",
			handleFunctions.ServiceInstanceAPI.ShowServiceInstance,
		},
		{
			"UpdateServiceInstance",
			http.MethodPut,
			"/api/v1/sites/:site_id/services/:addon/instances/:instance_id",
			handleFunctions.ServiceInstanceAPI.UpdateServiceInstance,
		},
		{
			"CreateSite",
			http.MethodPost,
			"/api/v1/sites",
			handleFunctions.SiteAPI.CreateSite,
		},
		{
			"CreateSiteInTeam",
			http.MethodPost,
			"/api/v1/:account_slug/sites",
			handleFunctions.SiteAPI.CreateSiteInTeam,
		},
		{
			"DeleteSite",
			http.MethodDelete,
			"/api/v1/sites/:site_id",
			handleFunctions.SiteAPI.DeleteSite,
		},
		{
			"GetSite",
			http.MethodGet,
			"/api/v1/sites/:site_id",
			handleFunctions.SiteAPI.GetSite,
		},
		{
			"ListSites",
			http.MethodGet,
			"/api/v1/sites",
			handleFunctions.SiteAPI.ListSites,
		},
		{
			"ListSitesForAccount",
			http.MethodGet,
			"/api/v1/:account_slug/sites",
			handleFunctions.SiteAPI.ListSitesForAccount,
		},
		{
			"UnlinkSiteRepo",
			http.MethodPut,
			"/api/v1/sites/:site_id/unlink_repo",
			handleFunctions.SiteAPI.UnlinkSiteRepo,
		},
		{
			"UpdateSite",
			http.MethodPatch,
			"/api/v1/sites/:site_id",
			handleFunctions.SiteAPI.UpdateSite,
		},
		{
			"ProvisionSiteTLSCertificate",
			http.MethodPost,
			"/api/v1/sites/:site_id/ssl",
			handleFunctions.SniCertificateAPI.ProvisionSiteTLSCertificate,
		},
		{
			"ShowSiteTLSCertificate",
			http.MethodGet,
			"/api/v1/sites/:site_id/ssl",
			handleFunctions.SniCertificateAPI.ShowSiteTLSCertificate,
		},
		{
			"CreateSiteSnippet",
			http.MethodPost,
			"/api/v1/sites/:site_id/snippets",
			handleFunctions.SnippetAPI.CreateSiteSnippet,
		},
		{
			"DeleteSiteSnippet",
			http.MethodDelete,
			"/api/v1/sites/:site_id/snippets/:snippet_id",
			handleFunctions.SnippetAPI.DeleteSiteSnippet,
		},
		{
			"GetSiteSnippet",
			http.MethodGet,
			"/api/v1/sites/:site_id/snippets/:snippet_id",
			handleFunctions.SnippetAPI.GetSiteSnippet,
		},
		{
			"ListSiteSnippets",
			http.MethodGet,
			"/api/v1/sites/:site_id/snippets",
			handleFunctions.SnippetAPI.ListSiteSnippets,
		},
		{
			"UpdateSiteSnippet",
			http.MethodPut,
			"/api/v1/sites/:site_id/snippets/:snippet_id",
			handleFunctions.SnippetAPI.UpdateSiteSnippet,
		},
		{
			"CreateSplitTest",
			http.MethodPost,
			"/api/v1/sites/:site_id/traffic_splits",
			handleFunctions.SplitTestAPI.CreateSplitTest,
		},
		{
			"DisableSplitTest",
			http.MethodPost,
			"/api/v1/sites/:site_id/traffic_splits/:split_test_id/unpublish",
			handleFunctions.SplitTestAPI.DisableSplitTest,
		},
		{
			"EnableSplitTest",
			http.MethodPost,
			"/api/v1/sites/:site_id/traffic_splits/:split_test_id/publish",
			handleFunctions.SplitTestAPI.EnableSplitTest,
		},
		{
			"GetSplitTest",
			http.MethodGet,
			"/api/v1/sites/:site_id/traffic_splits/:split_test_id",
			handleFunctions.SplitTestAPI.GetSplitTest,
		},
		{
			"GetSplitTests",
			http.MethodGet,
			"/api/v1/sites/:site_id/traffic_splits",
			handleFunctions.SplitTestAPI.GetSplitTests,
		},
		{
			"UpdateSplitTest",
			http.MethodPut,
			"/api/v1/sites/:site_id/traffic_splits/:split_test_id",
			handleFunctions.SplitTestAPI.UpdateSplitTest,
		},
		{
			"DeleteSubmission",
			http.MethodDelete,
			"/api/v1/submissions/:submission_id",
			handleFunctions.SubmissionAPI.DeleteSubmission,
		},
		{
			"ListFormSubmission",
			http.MethodGet,
			"/api/v1/submissions/:submission_id",
			handleFunctions.SubmissionAPI.ListFormSubmission,
		},
		{
			"ListFormSubmissions",
			http.MethodGet,
			"/api/v1/forms/:form_id/submissions",
			handleFunctions.SubmissionAPI.ListFormSubmissions,
		},
		{
			"ListSiteSubmissions",
			http.MethodGet,
			"/api/v1/sites/:site_id/submissions",
			handleFunctions.SubmissionAPI.ListSiteSubmissions,
		},
		{
			"CreateTicket",
			http.MethodPost,
			"/api/v1/oauth/tickets",
			handleFunctions.TicketAPI.CreateTicket,
		},
		{
			"ShowTicket",
			http.MethodGet,
			"/api/v1/oauth/tickets/:ticket_id",
			handleFunctions.TicketAPI.ShowTicket,
		},
		{
			"GetCurrentUser",
			http.MethodGet,
			"/api/v1/user",
			handleFunctions.UserAPI.GetCurrentUser,
		},
		{
			"CreatePluginRun",
			http.MethodPost,
			"/api/v1/deploys/:deploy_id/plugin_runs",
			handleFunctions.XInternalAPI.CreatePluginRun,
		},
		{
			"GetLatestPluginRuns",
			http.MethodGet,
			"/api/v1/sites/:site_id/plugin_runs/latest",
			handleFunctions.XInternalAPI.GetLatestPluginRuns,
		},
		{
			"UpdatePlugin",
			http.MethodPut,
			"/api/v1/sites/:site_id/plugins/:package",
			handleFunctions.XInternalAPI.UpdatePlugin,
		},
	}
}
