/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type RadioAPI struct {
}

// Delete /my/radio/favourites/:type/:pid
// Favourite Episode or Clip 
func (api *RadioAPI) DeletePersonalisedRadioByActivityTypeById(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /my/radio/follows/:type/:pid
// Followed Brand or Series 
func (api *RadioAPI) DeletePersonalisedRadioFollowsByTypeById(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /my/radio/favourites/:type/:pid
// Favourite Episode or Clip 
func (api *RadioAPI) GetPersonalisedRadioByActivityTypeById(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /my/radio/favourites
// Favourite Episodes and Clips 
func (api *RadioAPI) GetPersonalisedRadioFavourites(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /my/radio/favourites/:type
// Favourite Episodes and Clips by Type 
func (api *RadioAPI) GetPersonalisedRadioFavouritesByType(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /my/radio/follows
// Followed Brands and Series 
func (api *RadioAPI) GetPersonalisedRadioFollows(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /my/radio/follows/:type
// Followed Brands or Series by Type 
func (api *RadioAPI) GetPersonalisedRadioFollowsByType(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /my/radio/follows/:type/:pid
// Followed Brand or Series 
func (api *RadioAPI) GetPersonalisedRadioFollowsByTypeById(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /my/radio/plays
// Played Episode or Clip 
func (api *RadioAPI) GetPersonalisedRadioPlays(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /my/radio/favourites
// Favourite Episodes and Clips 
func (api *RadioAPI) PostPersonalisedRadioBatch(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /my/radio/favourites/:type/:pid
// Favourite Episode or Clip 
func (api *RadioAPI) PostPersonalisedRadioByActivityTypeById(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /my/radio/follows
// Followed Brands and Series 
func (api *RadioAPI) PostPersonalisedRadioFollowsBatch(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /my/radio/follows/:type/:pid
// Followed Brand or Series 
func (api *RadioAPI) PostPersonalisedRadioFollowsByTypeById(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /my/radio/favourites
// Favourite Episodes and Clips 
func (api *RadioAPI) PutPersonalisedRadioBatch(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /my/radio/favourites/:type/:pid
// Favourite Episode or Clip 
func (api *RadioAPI) PutPersonalisedRadioByActivityTypeById(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /my/radio/follows
// Followed Brands and Series 
func (api *RadioAPI) PutPersonalisedRadioFollowsBatch(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /my/radio/follows/:type/:pid
// Followed Brand or Series 
func (api *RadioAPI) PutPersonalisedRadioFollowsByTypeById(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

