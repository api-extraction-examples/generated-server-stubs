/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type DefaultAPI struct {
}

// Get /api/v1/me
func (api *DefaultAPI) MeGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /api/v1/project/:username/:project/build-cache
func (api *DefaultAPI) ProjectUsernameProjectBuildCacheDelete(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/project/:username/:project/:build_num/artifacts
func (api *DefaultAPI) ProjectUsernameProjectBuildNumArtifactsGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v1/project/:username/:project/:build_num/cancel
func (api *DefaultAPI) ProjectUsernameProjectBuildNumCancelPost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/project/:username/:project/:build_num
func (api *DefaultAPI) ProjectUsernameProjectBuildNumGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v1/project/:username/:project/:build_num/retry
func (api *DefaultAPI) ProjectUsernameProjectBuildNumRetryPost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/project/:username/:project/:build_num/tests
func (api *DefaultAPI) ProjectUsernameProjectBuildNumTestsGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /api/v1/project/:username/:project/checkout-key/:fingerprint
func (api *DefaultAPI) ProjectUsernameProjectCheckoutKeyFingerprintDelete(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/project/:username/:project/checkout-key/:fingerprint
func (api *DefaultAPI) ProjectUsernameProjectCheckoutKeyFingerprintGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/project/:username/:project/checkout-key
func (api *DefaultAPI) ProjectUsernameProjectCheckoutKeyGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v1/project/:username/:project/checkout-key
func (api *DefaultAPI) ProjectUsernameProjectCheckoutKeyPost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/project/:username/:project/envvar
func (api *DefaultAPI) ProjectUsernameProjectEnvvarGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /api/v1/project/:username/:project/envvar/:name
func (api *DefaultAPI) ProjectUsernameProjectEnvvarNameDelete(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/project/:username/:project/envvar/:name
func (api *DefaultAPI) ProjectUsernameProjectEnvvarNameGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v1/project/:username/:project/envvar
func (api *DefaultAPI) ProjectUsernameProjectEnvvarPost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/project/:username/:project
func (api *DefaultAPI) ProjectUsernameProjectGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v1/project/:username/:project
func (api *DefaultAPI) ProjectUsernameProjectPost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v1/project/:username/:project/ssh-key
func (api *DefaultAPI) ProjectUsernameProjectSshKeyPost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v1/project/:username/:project/tree/:branch
func (api *DefaultAPI) ProjectUsernameProjectTreeBranchPost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/projects
func (api *DefaultAPI) ProjectsGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v1/recent-builds
func (api *DefaultAPI) RecentBuildsGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v1/user/heroku-key
func (api *DefaultAPI) UserHerokuKeyPost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

