/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type EnvironmentsAPI struct {
}

// Delete /api/v2/projects/:projectKey/environments/:environmentKey
// Delete an environment in a specific project. 
func (api *EnvironmentsAPI) DeleteEnvironment(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/projects/:projectKey/environments/:environmentKey
// Get an environment given a project and key. 
func (api *EnvironmentsAPI) GetEnvironment(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Patch /api/v2/projects/:projectKey/environments/:environmentKey
// Modify an environment by ID. If you try to patch the environment by setting both required and requiredApprovalTags, it will result in an error. Users can specify either required approvals for all flags in an environment or those with specific tags, but not both. Only customers on an Enterprise plan can require approval for flag updates with either mechanism. 
func (api *EnvironmentsAPI) PatchEnvironment(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v2/projects/:projectKey/environments
// Create a new environment in a specified project with a given name, key, and swatch color. 
func (api *EnvironmentsAPI) PostEnvironment(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v2/projects/:projectKey/environments/:environmentKey/mobileKey
// Reset an environment's mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately. 
func (api *EnvironmentsAPI) ResetEnvironmentMobileKey(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v2/projects/:projectKey/environments/:environmentKey/apiKey
// Reset an environment's SDK key with an optional expiry time for the old key. 
func (api *EnvironmentsAPI) ResetEnvironmentSDKKey(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

