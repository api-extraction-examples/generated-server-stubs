/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type FeatureFlagsAPI struct {
}

// Post /api/v2/flags/:projectKey/:featureFlagKey/copy
// Copies the feature flag configuration from one environment to the same feature flag in another environment. 
func (api *FeatureFlagsAPI) CopyFeatureFlag(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/approval-requests/:approvalRequestId
// Delete an approval request for a feature flag config 
func (api *FeatureFlagsAPI) DeleteApprovalRequest(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /api/v2/flags/:projectKey/:featureFlagKey
// Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application. 
func (api *FeatureFlagsAPI) DeleteFeatureFlag(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/scheduled-changes/:scheduledChangeId
// Delete a scheduled change on a feature flag in an environment. 
func (api *FeatureFlagsAPI) DeleteFlagConfigScheduledChanges(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/flags/:projectKey/:environmentKey/:featureFlagKey/dependent-flags
// Get dependent flags for the flag in the environment specified in path parameters 
func (api *FeatureFlagsAPI) FlagsProjectKeyEnvironmentKeyFeatureFlagKeyDependentFlagsGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/flags/:projectKey/:featureFlagKey/dependent-flags
// Get dependent flags across all environments for the flag specified in the path parameters 
func (api *FeatureFlagsAPI) FlagsProjectKeyFeatureFlagKeyDependentFlagsGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/approval-requests/:approvalRequestId
// Get a single approval request for a feature flag config 
func (api *FeatureFlagsAPI) GetApprovalRequest(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/approval-requests
// Get all approval requests for a feature flag config 
func (api *FeatureFlagsAPI) GetApprovalRequests(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/flags/:projectKey/:featureFlagKey/expiring-user-targets/:environmentKey
// Get expiring user targets for feature flag 
func (api *FeatureFlagsAPI) GetExpiringUserTargets(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/flags/:projectKey/:featureFlagKey
// Get a single feature flag by key. 
func (api *FeatureFlagsAPI) GetFeatureFlag(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/flag-statuses/:projectKey/:environmentKey/:featureFlagKey
// Get the status for a particular feature flag. 
func (api *FeatureFlagsAPI) GetFeatureFlagStatus(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/flag-status/:projectKey/:featureFlagKey
// Get the status for a particular feature flag across environments 
func (api *FeatureFlagsAPI) GetFeatureFlagStatusAcrossEnvironments(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/flag-statuses/:projectKey/:environmentKey
// Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag. 
func (api *FeatureFlagsAPI) GetFeatureFlagStatuses(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/flags/:projectKey
// Get a list of all features in the given project. 
func (api *FeatureFlagsAPI) GetFeatureFlags(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/scheduled-changes/:scheduledChangeId
// Get a scheduled change on a feature flag by id. 
func (api *FeatureFlagsAPI) GetFlagConfigScheduledChange(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/scheduled-changes
// Get all scheduled workflows for a feature flag by key. 
func (api *FeatureFlagsAPI) GetFlagConfigScheduledChanges(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/scheduled-changes-conflicts
// Lists conflicts between the given instructions and any existing scheduled changes for the feature flag. The actual HTTP verb should be REPORT, not POST. 
func (api *FeatureFlagsAPI) GetFlagConfigScheduledChangesConflicts(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Patch /api/v2/flags/:projectKey/:featureFlagKey/expiring-user-targets/:environmentKey
// Update, add, or delete expiring user targets on feature flag 
func (api *FeatureFlagsAPI) PatchExpiringUserTargets(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Patch /api/v2/flags/:projectKey/:featureFlagKey
// Perform a partial update to a feature. 
func (api *FeatureFlagsAPI) PatchFeatureFlag(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Patch /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/scheduled-changes/:scheduledChangeId
// Updates an existing scheduled-change on a feature flag in an environment. 
func (api *FeatureFlagsAPI) PatchFlagConfigScheduledChange(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/approval-requests/:approvalRequestId/apply
// Apply approval request for a feature flag config 
func (api *FeatureFlagsAPI) PostApplyApprovalRequest(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/approval-requests/:approvalRequestId
// Create an approval request for a feature flag config 
func (api *FeatureFlagsAPI) PostApprovalRequest(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v2/flags/:projectKey
// Creates a new feature flag. 
func (api *FeatureFlagsAPI) PostFeatureFlag(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/scheduled-changes
// Creates a new scheduled change for a feature flag. 
func (api *FeatureFlagsAPI) PostFlagConfigScheduledChanges(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/v2/projects/:projectKey/flags/:featureFlagKey/environments/:environmentKey/approval-requests/:approvalRequestId/review
// Review approval request for a feature flag config 
func (api *FeatureFlagsAPI) PostReviewApprovalRequest(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

