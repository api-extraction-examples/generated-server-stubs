/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	router := gin.Default()
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the CommentsAPI part of the API
	CommentsAPI CommentsAPI
	// Routes for the GeographiesAPI part of the API
	GeographiesAPI GeographiesAPI
	// Routes for the LikesAPI part of the API
	LikesAPI LikesAPI
	// Routes for the LocationsAPI part of the API
	LocationsAPI LocationsAPI
	// Routes for the MediaAPI part of the API
	MediaAPI MediaAPI
	// Routes for the RelationshipsAPI part of the API
	RelationshipsAPI RelationshipsAPI
	// Routes for the TagsAPI part of the API
	TagsAPI TagsAPI
	// Routes for the UsersAPI part of the API
	UsersAPI UsersAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{ 
		{
			"MediaMediaIdCommentsCommentIdDelete",
			http.MethodDelete,
			"/v1/media/:media-id/comments/:comment-id",
			handleFunctions.CommentsAPI.MediaMediaIdCommentsCommentIdDelete,
		},
		{
			"MediaMediaIdCommentsGet",
			http.MethodGet,
			"/v1/media/:media-id/comments",
			handleFunctions.CommentsAPI.MediaMediaIdCommentsGet,
		},
		{
			"MediaMediaIdCommentsPost",
			http.MethodPost,
			"/v1/media/:media-id/comments",
			handleFunctions.CommentsAPI.MediaMediaIdCommentsPost,
		},
		{
			"GeographiesGeoIdMediaRecentGet",
			http.MethodGet,
			"/v1/geographies/:geo-id/media/recent",
			handleFunctions.GeographiesAPI.GeographiesGeoIdMediaRecentGet,
		},
		{
			"MediaMediaIdLikesDelete",
			http.MethodDelete,
			"/v1/media/:media-id/likes",
			handleFunctions.LikesAPI.MediaMediaIdLikesDelete,
		},
		{
			"MediaMediaIdLikesGet",
			http.MethodGet,
			"/v1/media/:media-id/likes",
			handleFunctions.LikesAPI.MediaMediaIdLikesGet,
		},
		{
			"MediaMediaIdLikesPost",
			http.MethodPost,
			"/v1/media/:media-id/likes",
			handleFunctions.LikesAPI.MediaMediaIdLikesPost,
		},
		{
			"LocationsLocationIdGet",
			http.MethodGet,
			"/v1/locations/:location-id",
			handleFunctions.LocationsAPI.LocationsLocationIdGet,
		},
		{
			"LocationsLocationIdMediaRecentGet",
			http.MethodGet,
			"/v1/locations/:location-id/media/recent",
			handleFunctions.LocationsAPI.LocationsLocationIdMediaRecentGet,
		},
		{
			"LocationsSearchGet",
			http.MethodGet,
			"/v1/locations/search",
			handleFunctions.LocationsAPI.LocationsSearchGet,
		},
		{
			"MediaMediaIdGet",
			http.MethodGet,
			"/v1/media/:media-id",
			handleFunctions.MediaAPI.MediaMediaIdGet,
		},
		{
			"MediaPopularGet",
			http.MethodGet,
			"/v1/media/popular",
			handleFunctions.MediaAPI.MediaPopularGet,
		},
		{
			"MediaSearchGet",
			http.MethodGet,
			"/v1/media/search",
			handleFunctions.MediaAPI.MediaSearchGet,
		},
		{
			"MediaShortcodeShortcodeGet",
			http.MethodGet,
			"/v1/media/shortcode/:shortcode",
			handleFunctions.MediaAPI.MediaShortcodeShortcodeGet,
		},
		{
			"UsersSelfRequestedByGet",
			http.MethodGet,
			"/v1/users/self/requested-by",
			handleFunctions.RelationshipsAPI.UsersSelfRequestedByGet,
		},
		{
			"UsersUserIdFollowedByGet",
			http.MethodGet,
			"/v1/users/:user-id/followed-by",
			handleFunctions.RelationshipsAPI.UsersUserIdFollowedByGet,
		},
		{
			"UsersUserIdFollowsGet",
			http.MethodGet,
			"/v1/users/:user-id/follows",
			handleFunctions.RelationshipsAPI.UsersUserIdFollowsGet,
		},
		{
			"UsersUserIdRelationshipGet",
			http.MethodGet,
			"/v1/users/:user-id/relationship",
			handleFunctions.RelationshipsAPI.UsersUserIdRelationshipGet,
		},
		{
			"UsersUserIdRelationshipPost",
			http.MethodPost,
			"/v1/users/:user-id/relationship",
			handleFunctions.RelationshipsAPI.UsersUserIdRelationshipPost,
		},
		{
			"TagsSearchGet",
			http.MethodGet,
			"/v1/tags/search",
			handleFunctions.TagsAPI.TagsSearchGet,
		},
		{
			"TagsTagNameGet",
			http.MethodGet,
			"/v1/tags/:tag-name",
			handleFunctions.TagsAPI.TagsTagNameGet,
		},
		{
			"TagsTagNameMediaRecentGet",
			http.MethodGet,
			"/v1/tags/:tag-name/media/recent",
			handleFunctions.TagsAPI.TagsTagNameMediaRecentGet,
		},
		{
			"UsersSearchGet",
			http.MethodGet,
			"/v1/users/search",
			handleFunctions.UsersAPI.UsersSearchGet,
		},
		{
			"UsersSelfFeedGet",
			http.MethodGet,
			"/v1/users/self/feed",
			handleFunctions.UsersAPI.UsersSelfFeedGet,
		},
		{
			"UsersSelfMediaLikedGet",
			http.MethodGet,
			"/v1/users/self/media/liked",
			handleFunctions.UsersAPI.UsersSelfMediaLikedGet,
		},
		{
			"UsersUserIdGet",
			http.MethodGet,
			"/v1/users/:user-id",
			handleFunctions.UsersAPI.UsersUserIdGet,
		},
		{
			"UsersUserIdMediaRecentGet",
			http.MethodGet,
			"/v1/users/:user-id/media/recent",
			handleFunctions.UsersAPI.UsersUserIdMediaRecentGet,
		},
	}
}
