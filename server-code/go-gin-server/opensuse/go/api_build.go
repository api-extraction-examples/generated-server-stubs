/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * API version: 2.10.50
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type BuildAPI struct {
}

// Get /build
// Get a simple directory listing of all projects 
func (api *BuildAPI) BuildGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name
// Get a simple directory listing of all repositories for the specified project 
func (api *BuildAPI) BuildProjectNameGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /build/:project_name
// Apply different actions on builds/build processes of the specified project 
func (api *BuildAPI) BuildProjectNamePost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/_builddepinfo
// Show the build dependencies of packages that are part of the project. 
func (api *BuildAPI) BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/:package_name
// List binaries built by the sources of the specified package. 
func (api *BuildAPI) BuildProjectNameRepositoryNameArchitectureNamePackageNameGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/:package_name/_jobstatus
// Show the build status of a currently running build job. 
func (api *BuildAPI) BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/:package_name/_reason
// Show the reason for the lastly triggered build. 
func (api *BuildAPI) BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/_repository
// List all binaries (produced by all packages of the given project). 
func (api *BuildAPI) BuildProjectNameRepositoryNameArchitectureNameRepositoryGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/_buildconfig
// Show the build configuration for the specified repository. 
func (api *BuildAPI) BuildProjectNameRepositoryNameBuildconfigGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name
// List of all architectures the specified project builds against a given repository. 
func (api *BuildAPI) BuildProjectNameRepositoryNameGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/_result
// Get the build results for packages, architectures and repositories of the specified project. 
func (api *BuildAPI) BuildProjectNameResultGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/:package_name/_buildinfo
func (api *BuildAPI) GetBuildProjectRepositoryArchPackageBuildinfo(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/:package_name/_history
func (api *BuildAPI) GetBuildProjectRepositoryArchPackageHistory(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/:package_name/_log
func (api *BuildAPI) GetBuildProjectRepositoryArchPackageLog(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/:package_name/_status
func (api *BuildAPI) GetBuildProjectRepositoryArchPackageStatus(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/:package_name/:file_name
// Return a specific artifact file contents 
func (api *BuildAPI) GetBuildProjectRepositoryArchitecturePackageFile(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /build/:project_name/:repository_name/:architecture_name/:package_name/:file_name?view=fileinfo
// This endpoint returns details about an specific artifact 
func (api *BuildAPI) GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /build/:project_name/:repository_name/:architecture_name/:package_name/:file_name
// Update a specific artifact file contents 
func (api *BuildAPI) PutBuildProjectRepositoryArchitecturePackageFile(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

