/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * API version: 2.10.50
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type PublishedBinariesAPI struct {
}

// Get /published
// List all the published projects. 
func (api *PublishedBinariesAPI) PublishedGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /published/:project_name
// List the repositories of a project with published binaries 
func (api *PublishedBinariesAPI) PublishedProjectNameGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /published/:project_name/:repository_name/:architecture_name/:binary_filename
// Return the binary file itself. 
func (api *PublishedBinariesAPI) PublishedProjectNameRepositoryNameArchitectureNameBinaryFilenameGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /published/:project_name/:repository_name/:architecture_name/:binary_filename?view=ymp
// Generate a ymp pattern that includes the needed repositories to install the given binary. 
func (api *PublishedBinariesAPI) PublishedProjectNameRepositoryNameArchitectureNameBinaryFilenameviewympGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /published/:project_name/:repository_name/:architecture_name
// List the content of the directory tree where the binaries are published at the level project/repository/architecture. 
func (api *PublishedBinariesAPI) PublishedProjectNameRepositoryNameArchitectureNameGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /published/:project_name/:repository_name
// List the content of the directory tree where the binaries are published at the level project/repository. 
func (api *PublishedBinariesAPI) PublishedProjectNameRepositoryNameGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /published/:project_name/:repository_name?view=status
// Present information about the last publication of the pair project and repository. 
func (api *PublishedBinariesAPI) PublishedProjectNameRepositoryNameviewstatusGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

