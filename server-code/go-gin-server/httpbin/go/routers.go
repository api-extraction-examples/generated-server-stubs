/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * API version: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	router := gin.Default()
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the AnythingAPI part of the API
	AnythingAPI AnythingAPI
	// Routes for the AuthAPI part of the API
	AuthAPI AuthAPI
	// Routes for the CookiesAPI part of the API
	CookiesAPI CookiesAPI
	// Routes for the DynamicDataAPI part of the API
	DynamicDataAPI DynamicDataAPI
	// Routes for the HTTPMethodsAPI part of the API
	HTTPMethodsAPI HTTPMethodsAPI
	// Routes for the ImagesAPI part of the API
	ImagesAPI ImagesAPI
	// Routes for the RedirectsAPI part of the API
	RedirectsAPI RedirectsAPI
	// Routes for the RequestInspectionAPI part of the API
	RequestInspectionAPI RequestInspectionAPI
	// Routes for the ResponseFormatsAPI part of the API
	ResponseFormatsAPI ResponseFormatsAPI
	// Routes for the ResponseInspectionAPI part of the API
	ResponseInspectionAPI ResponseInspectionAPI
	// Routes for the StatusCodesAPI part of the API
	StatusCodesAPI StatusCodesAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{ 
		{
			"AnythingAnythingDelete",
			http.MethodDelete,
			"/anything/:anything",
			handleFunctions.AnythingAPI.AnythingAnythingDelete,
		},
		{
			"AnythingAnythingGet",
			http.MethodGet,
			"/anything/:anything",
			handleFunctions.AnythingAPI.AnythingAnythingGet,
		},
		{
			"AnythingAnythingPatch",
			http.MethodPatch,
			"/anything/:anything",
			handleFunctions.AnythingAPI.AnythingAnythingPatch,
		},
		{
			"AnythingAnythingPost",
			http.MethodPost,
			"/anything/:anything",
			handleFunctions.AnythingAPI.AnythingAnythingPost,
		},
		{
			"AnythingAnythingPut",
			http.MethodPut,
			"/anything/:anything",
			handleFunctions.AnythingAPI.AnythingAnythingPut,
		},
		{
			"AnythingAnythingTrace",
			http.MethodTrace,
			"/anything/:anything",
			handleFunctions.AnythingAPI.AnythingAnythingTrace,
		},
		{
			"AnythingDelete",
			http.MethodDelete,
			"/anything",
			handleFunctions.AnythingAPI.AnythingDelete,
		},
		{
			"AnythingGet",
			http.MethodGet,
			"/anything",
			handleFunctions.AnythingAPI.AnythingGet,
		},
		{
			"AnythingPatch",
			http.MethodPatch,
			"/anything",
			handleFunctions.AnythingAPI.AnythingPatch,
		},
		{
			"AnythingPost",
			http.MethodPost,
			"/anything",
			handleFunctions.AnythingAPI.AnythingPost,
		},
		{
			"AnythingPut",
			http.MethodPut,
			"/anything",
			handleFunctions.AnythingAPI.AnythingPut,
		},
		{
			"AnythingTrace",
			http.MethodTrace,
			"/anything",
			handleFunctions.AnythingAPI.AnythingTrace,
		},
		{
			"BasicAuthUserPasswdGet",
			http.MethodGet,
			"/basic-auth/:user/:passwd",
			handleFunctions.AuthAPI.BasicAuthUserPasswdGet,
		},
		{
			"BearerGet",
			http.MethodGet,
			"/bearer",
			handleFunctions.AuthAPI.BearerGet,
		},
		{
			"DigestAuthQopUserPasswdAlgorithmGet",
			http.MethodGet,
			"/digest-auth/:qop/:user/:passwd/:algorithm",
			handleFunctions.AuthAPI.DigestAuthQopUserPasswdAlgorithmGet,
		},
		{
			"DigestAuthQopUserPasswdAlgorithmStaleAfterGet",
			http.MethodGet,
			"/digest-auth/:qop/:user/:passwd/:algorithm/:stale_after",
			handleFunctions.AuthAPI.DigestAuthQopUserPasswdAlgorithmStaleAfterGet,
		},
		{
			"DigestAuthQopUserPasswdGet",
			http.MethodGet,
			"/digest-auth/:qop/:user/:passwd",
			handleFunctions.AuthAPI.DigestAuthQopUserPasswdGet,
		},
		{
			"HiddenBasicAuthUserPasswdGet",
			http.MethodGet,
			"/hidden-basic-auth/:user/:passwd",
			handleFunctions.AuthAPI.HiddenBasicAuthUserPasswdGet,
		},
		{
			"CookiesDeleteGet",
			http.MethodGet,
			"/cookies/delete",
			handleFunctions.CookiesAPI.CookiesDeleteGet,
		},
		{
			"CookiesGet",
			http.MethodGet,
			"/cookies",
			handleFunctions.CookiesAPI.CookiesGet,
		},
		{
			"CookiesSetGet",
			http.MethodGet,
			"/cookies/set",
			handleFunctions.CookiesAPI.CookiesSetGet,
		},
		{
			"CookiesSetNameValueGet",
			http.MethodGet,
			"/cookies/set/:name/:value",
			handleFunctions.CookiesAPI.CookiesSetNameValueGet,
		},
		{
			"Base64ValueGet",
			http.MethodGet,
			"/base64/:value",
			handleFunctions.DynamicDataAPI.Base64ValueGet,
		},
		{
			"BytesNGet",
			http.MethodGet,
			"/bytes/:n",
			handleFunctions.DynamicDataAPI.BytesNGet,
		},
		{
			"DelayDelayDelete",
			http.MethodDelete,
			"/delay/:delay",
			handleFunctions.DynamicDataAPI.DelayDelayDelete,
		},
		{
			"DelayDelayGet",
			http.MethodGet,
			"/delay/:delay",
			handleFunctions.DynamicDataAPI.DelayDelayGet,
		},
		{
			"DelayDelayPatch",
			http.MethodPatch,
			"/delay/:delay",
			handleFunctions.DynamicDataAPI.DelayDelayPatch,
		},
		{
			"DelayDelayPost",
			http.MethodPost,
			"/delay/:delay",
			handleFunctions.DynamicDataAPI.DelayDelayPost,
		},
		{
			"DelayDelayPut",
			http.MethodPut,
			"/delay/:delay",
			handleFunctions.DynamicDataAPI.DelayDelayPut,
		},
		{
			"DelayDelayTrace",
			http.MethodTrace,
			"/delay/:delay",
			handleFunctions.DynamicDataAPI.DelayDelayTrace,
		},
		{
			"DripGet",
			http.MethodGet,
			"/drip",
			handleFunctions.DynamicDataAPI.DripGet,
		},
		{
			"LinksNOffsetGet",
			http.MethodGet,
			"/links/:n/:offset",
			handleFunctions.DynamicDataAPI.LinksNOffsetGet,
		},
		{
			"RangeNumbytesGet",
			http.MethodGet,
			"/range/:numbytes",
			handleFunctions.DynamicDataAPI.RangeNumbytesGet,
		},
		{
			"StreamBytesNGet",
			http.MethodGet,
			"/stream-bytes/:n",
			handleFunctions.DynamicDataAPI.StreamBytesNGet,
		},
		{
			"StreamNGet",
			http.MethodGet,
			"/stream/:n",
			handleFunctions.DynamicDataAPI.StreamNGet,
		},
		{
			"UuidGet",
			http.MethodGet,
			"/uuid",
			handleFunctions.DynamicDataAPI.UuidGet,
		},
		{
			"DeleteDelete",
			http.MethodDelete,
			"/delete",
			handleFunctions.HTTPMethodsAPI.DeleteDelete,
		},
		{
			"GetGet",
			http.MethodGet,
			"/get",
			handleFunctions.HTTPMethodsAPI.GetGet,
		},
		{
			"PatchPatch",
			http.MethodPatch,
			"/patch",
			handleFunctions.HTTPMethodsAPI.PatchPatch,
		},
		{
			"PostPost",
			http.MethodPost,
			"/post",
			handleFunctions.HTTPMethodsAPI.PostPost,
		},
		{
			"PutPut",
			http.MethodPut,
			"/put",
			handleFunctions.HTTPMethodsAPI.PutPut,
		},
		{
			"ImageGet",
			http.MethodGet,
			"/image",
			handleFunctions.ImagesAPI.ImageGet,
		},
		{
			"ImageJpegGet",
			http.MethodGet,
			"/image/jpeg",
			handleFunctions.ImagesAPI.ImageJpegGet,
		},
		{
			"ImagePngGet",
			http.MethodGet,
			"/image/png",
			handleFunctions.ImagesAPI.ImagePngGet,
		},
		{
			"ImageSvgGet",
			http.MethodGet,
			"/image/svg",
			handleFunctions.ImagesAPI.ImageSvgGet,
		},
		{
			"ImageWebpGet",
			http.MethodGet,
			"/image/webp",
			handleFunctions.ImagesAPI.ImageWebpGet,
		},
		{
			"AbsoluteRedirectNGet",
			http.MethodGet,
			"/absolute-redirect/:n",
			handleFunctions.RedirectsAPI.AbsoluteRedirectNGet,
		},
		{
			"RedirectNGet",
			http.MethodGet,
			"/redirect/:n",
			handleFunctions.RedirectsAPI.RedirectNGet,
		},
		{
			"RedirectToDelete",
			http.MethodDelete,
			"/redirect-to",
			handleFunctions.RedirectsAPI.RedirectToDelete,
		},
		{
			"RedirectToGet",
			http.MethodGet,
			"/redirect-to",
			handleFunctions.RedirectsAPI.RedirectToGet,
		},
		{
			"RedirectToPatch",
			http.MethodPatch,
			"/redirect-to",
			handleFunctions.RedirectsAPI.RedirectToPatch,
		},
		{
			"RedirectToPost",
			http.MethodPost,
			"/redirect-to",
			handleFunctions.RedirectsAPI.RedirectToPost,
		},
		{
			"RedirectToPut",
			http.MethodPut,
			"/redirect-to",
			handleFunctions.RedirectsAPI.RedirectToPut,
		},
		{
			"RedirectToTrace",
			http.MethodTrace,
			"/redirect-to",
			handleFunctions.RedirectsAPI.RedirectToTrace,
		},
		{
			"RelativeRedirectNGet",
			http.MethodGet,
			"/relative-redirect/:n",
			handleFunctions.RedirectsAPI.RelativeRedirectNGet,
		},
		{
			"HeadersGet",
			http.MethodGet,
			"/headers",
			handleFunctions.RequestInspectionAPI.HeadersGet,
		},
		{
			"IpGet",
			http.MethodGet,
			"/ip",
			handleFunctions.RequestInspectionAPI.IpGet,
		},
		{
			"UserAgentGet",
			http.MethodGet,
			"/user-agent",
			handleFunctions.RequestInspectionAPI.UserAgentGet,
		},
		{
			"BrotliGet",
			http.MethodGet,
			"/brotli",
			handleFunctions.ResponseFormatsAPI.BrotliGet,
		},
		{
			"DeflateGet",
			http.MethodGet,
			"/deflate",
			handleFunctions.ResponseFormatsAPI.DeflateGet,
		},
		{
			"DenyGet",
			http.MethodGet,
			"/deny",
			handleFunctions.ResponseFormatsAPI.DenyGet,
		},
		{
			"EncodingUtf8Get",
			http.MethodGet,
			"/encoding/utf8",
			handleFunctions.ResponseFormatsAPI.EncodingUtf8Get,
		},
		{
			"GzipGet",
			http.MethodGet,
			"/gzip",
			handleFunctions.ResponseFormatsAPI.GzipGet,
		},
		{
			"HtmlGet",
			http.MethodGet,
			"/html",
			handleFunctions.ResponseFormatsAPI.HtmlGet,
		},
		{
			"JsonGet",
			http.MethodGet,
			"/json",
			handleFunctions.ResponseFormatsAPI.JsonGet,
		},
		{
			"RobotsTxtGet",
			http.MethodGet,
			"/robots.txt",
			handleFunctions.ResponseFormatsAPI.RobotsTxtGet,
		},
		{
			"XmlGet",
			http.MethodGet,
			"/xml",
			handleFunctions.ResponseFormatsAPI.XmlGet,
		},
		{
			"CacheGet",
			http.MethodGet,
			"/cache",
			handleFunctions.ResponseInspectionAPI.CacheGet,
		},
		{
			"CacheValueGet",
			http.MethodGet,
			"/cache/:value",
			handleFunctions.ResponseInspectionAPI.CacheValueGet,
		},
		{
			"EtagEtagGet",
			http.MethodGet,
			"/etag/:etag",
			handleFunctions.ResponseInspectionAPI.EtagEtagGet,
		},
		{
			"ResponseHeadersGet",
			http.MethodGet,
			"/response-headers",
			handleFunctions.ResponseInspectionAPI.ResponseHeadersGet,
		},
		{
			"ResponseHeadersPost",
			http.MethodPost,
			"/response-headers",
			handleFunctions.ResponseInspectionAPI.ResponseHeadersPost,
		},
		{
			"StatusCodesDelete",
			http.MethodDelete,
			"/status/:codes",
			handleFunctions.StatusCodesAPI.StatusCodesDelete,
		},
		{
			"StatusCodesGet",
			http.MethodGet,
			"/status/:codes",
			handleFunctions.StatusCodesAPI.StatusCodesGet,
		},
		{
			"StatusCodesPatch",
			http.MethodPatch,
			"/status/:codes",
			handleFunctions.StatusCodesAPI.StatusCodesPatch,
		},
		{
			"StatusCodesPost",
			http.MethodPost,
			"/status/:codes",
			handleFunctions.StatusCodesAPI.StatusCodesPost,
		},
		{
			"StatusCodesPut",
			http.MethodPut,
			"/status/:codes",
			handleFunctions.StatusCodesAPI.StatusCodesPut,
		},
		{
			"StatusCodesTrace",
			http.MethodTrace,
			"/status/:codes",
			handleFunctions.StatusCodesAPI.StatusCodesTrace,
		},
	}
}
