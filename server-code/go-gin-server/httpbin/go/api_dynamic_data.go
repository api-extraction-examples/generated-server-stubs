/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * API version: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type DynamicDataAPI struct {
}

// Get /base64/:value
// Decodes base64url-encoded string. 
func (api *DynamicDataAPI) Base64ValueGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /bytes/:n
// Returns n random bytes generated with given seed 
func (api *DynamicDataAPI) BytesNGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /delay/:delay
// Returns a delayed response (max of 10 seconds). 
func (api *DynamicDataAPI) DelayDelayDelete(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /delay/:delay
// Returns a delayed response (max of 10 seconds). 
func (api *DynamicDataAPI) DelayDelayGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Patch /delay/:delay
// Returns a delayed response (max of 10 seconds). 
func (api *DynamicDataAPI) DelayDelayPatch(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /delay/:delay
// Returns a delayed response (max of 10 seconds). 
func (api *DynamicDataAPI) DelayDelayPost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /delay/:delay
// Returns a delayed response (max of 10 seconds). 
func (api *DynamicDataAPI) DelayDelayPut(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Trace /delay/:delay
// Returns a delayed response (max of 10 seconds). 
func (api *DynamicDataAPI) DelayDelayTrace(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /drip
// Drips data over a duration after an optional initial delay. 
func (api *DynamicDataAPI) DripGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /links/:n/:offset
// Generate a page containing n links to other pages which do the same. 
func (api *DynamicDataAPI) LinksNOffsetGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /range/:numbytes
// Streams n random bytes generated with given seed, at given chunk size per packet. 
func (api *DynamicDataAPI) RangeNumbytesGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /stream-bytes/:n
// Streams n random bytes generated with given seed, at given chunk size per packet. 
func (api *DynamicDataAPI) StreamBytesNGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /stream/:n
// Stream n JSON responses 
func (api *DynamicDataAPI) StreamNGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /uuid
// Return a UUID4. 
func (api *DynamicDataAPI) UuidGet(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

