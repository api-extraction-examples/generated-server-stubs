/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type TasksAPI struct {
}

// Post /api/1.0/tasks/:task_gid/addDependencies
// Set dependencies for a task 
func (api *TasksAPI) AddDependenciesForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/addDependents
// Set dependents for a task 
func (api *TasksAPI) AddDependentsForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/addFollowers
// Add followers to a task 
func (api *TasksAPI) AddFollowersForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/addProject
// Add a project to a task 
func (api *TasksAPI) AddProjectForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/addTag
// Add a tag to a task 
func (api *TasksAPI) AddTagForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/subtasks
// Create a subtask 
func (api *TasksAPI) CreateSubtaskForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks
// Create a task 
func (api *TasksAPI) CreateTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /api/1.0/tasks/:task_gid
// Delete a task 
func (api *TasksAPI) DeleteTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/duplicate
// Duplicate a task 
func (api *TasksAPI) DuplicateTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/1.0/tasks/:task_gid/dependencies
// Get dependencies from a task 
func (api *TasksAPI) GetDependenciesForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/1.0/tasks/:task_gid/dependents
// Get dependents from a task 
func (api *TasksAPI) GetDependentsForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/1.0/tasks/:task_gid/subtasks
// Get subtasks from a task 
func (api *TasksAPI) GetSubtasksForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/1.0/tasks/:task_gid
// Get a task 
func (api *TasksAPI) GetTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/1.0/tasks
// Get multiple tasks 
func (api *TasksAPI) GetTasks(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/1.0/projects/:project_gid/tasks
// Get tasks from a project 
func (api *TasksAPI) GetTasksForProject(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/1.0/sections/:section_gid/tasks
// Get tasks from a section 
func (api *TasksAPI) GetTasksForSection(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/1.0/tags/:tag_gid/tasks
// Get tasks from a tag 
func (api *TasksAPI) GetTasksForTag(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/1.0/user_task_lists/:user_task_list_gid/tasks
// Get tasks from a user task list 
func (api *TasksAPI) GetTasksForUserTaskList(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/removeDependencies
// Unlink dependencies from a task 
func (api *TasksAPI) RemoveDependenciesForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/removeDependents
// Unlink dependents from a task 
func (api *TasksAPI) RemoveDependentsForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/removeFollowers
// Remove followers from a task 
func (api *TasksAPI) RemoveFollowerForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/removeProject
// Remove a project from a task 
func (api *TasksAPI) RemoveProjectForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/removeTag
// Remove a tag from a task 
func (api *TasksAPI) RemoveTagForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/1.0/workspaces/:workspace_gid/tasks/search
// Search tasks in a workspace 
func (api *TasksAPI) SearchTasksForWorkspace(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /api/1.0/tasks/:task_gid/setParent
// Set the parent of a task 
func (api *TasksAPI) SetParentForTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /api/1.0/tasks/:task_gid
// Update a task 
func (api *TasksAPI) UpdateTask(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

