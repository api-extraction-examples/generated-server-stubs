/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type UserAPI struct {
}

// Post /Users/:userId/Authenticate
// Authenticates a user. 
func (api *UserAPI) AuthenticateUser(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/AuthenticateByName
// Authenticates a user by name. 
func (api *UserAPI) AuthenticateUserByName(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/AuthenticateWithQuickConnect
// Authenticates a user with quick connect. 
func (api *UserAPI) AuthenticateWithQuickConnect(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/New
// Creates a user. 
func (api *UserAPI) CreateUserByName(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /Users/:userId
// Deletes a user. 
func (api *UserAPI) DeleteUser(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/ForgotPassword
// Initiates the forgot password process for a local user. 
func (api *UserAPI) ForgotPassword(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/ForgotPassword/Pin
// Redeems a forgot password pin. 
func (api *UserAPI) ForgotPasswordPin(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Users/Me
// Gets the user based on auth token. 
func (api *UserAPI) GetCurrentUser(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Users/Public
// Gets a list of publicly visible users for display on a login screen. 
func (api *UserAPI) GetPublicUsers(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Users/:userId
// Gets a user by Id. 
func (api *UserAPI) GetUserById(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Users
// Gets a list of users. 
func (api *UserAPI) GetUsers(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/:userId
// Updates a user. 
func (api *UserAPI) UpdateUser(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/:userId/Configuration
// Updates a user configuration. 
func (api *UserAPI) UpdateUserConfiguration(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/:userId/EasyPassword
// Updates a user's easy password. 
func (api *UserAPI) UpdateUserEasyPassword(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/:userId/Password
// Updates a user's password. 
func (api *UserAPI) UpdateUserPassword(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/:userId/Policy
// Updates a user policy. 
func (api *UserAPI) UpdateUserPolicy(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

