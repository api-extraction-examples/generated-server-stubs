/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type LiveTvAPI struct {
}

// Post /LiveTv/ListingProviders
// Adds a listings provider. 
func (api *LiveTvAPI) AddListingProvider(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /LiveTv/TunerHosts
// Adds a tuner host. 
func (api *LiveTvAPI) AddTunerHost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /LiveTv/SeriesTimers/:timerId
// Cancels a live tv series timer. 
func (api *LiveTvAPI) CancelSeriesTimer(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /LiveTv/Timers/:timerId
// Cancels a live tv timer. 
func (api *LiveTvAPI) CancelTimer(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /LiveTv/SeriesTimers
// Creates a live tv series timer. 
func (api *LiveTvAPI) CreateSeriesTimer(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /LiveTv/Timers
// Creates a live tv timer. 
func (api *LiveTvAPI) CreateTimer(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /LiveTv/ListingProviders
// Delete listing provider. 
func (api *LiveTvAPI) DeleteListingProvider(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /LiveTv/Recordings/:recordingId
// Deletes a live tv recording. 
func (api *LiveTvAPI) DeleteRecording(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /LiveTv/TunerHosts
// Deletes a tuner host. 
func (api *LiveTvAPI) DeleteTunerHost(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Tuners/Discover
// Discover tuners. 
func (api *LiveTvAPI) DiscoverTuners(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Tuners/Discvover
// Discover tuners. 
func (api *LiveTvAPI) DiscvoverTuners(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Channels/:channelId
// Gets a live tv channel. 
func (api *LiveTvAPI) GetChannel(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/ChannelMappingOptions
// Get channel mapping options. 
func (api *LiveTvAPI) GetChannelMappingOptions(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/ListingProviders/Default
// Gets default listings provider info. 
func (api *LiveTvAPI) GetDefaultListingProvider(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Timers/Defaults
// Gets the default values for a new timer. 
func (api *LiveTvAPI) GetDefaultTimer(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/GuideInfo
// Get guid info. 
func (api *LiveTvAPI) GetGuideInfo(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/ListingProviders/Lineups
// Gets available lineups. 
func (api *LiveTvAPI) GetLineups(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/LiveRecordings/:recordingId/stream
// Gets a live tv recording stream. 
func (api *LiveTvAPI) GetLiveRecordingFile(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/LiveStreamFiles/:streamId/stream.:container
// Gets a live tv channel stream. 
func (api *LiveTvAPI) GetLiveStreamFile(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Channels
// Gets available live tv channels. 
func (api *LiveTvAPI) GetLiveTvChannels(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Info
// Gets available live tv services. 
func (api *LiveTvAPI) GetLiveTvInfo(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Programs
// Gets available live tv epgs. 
func (api *LiveTvAPI) GetLiveTvPrograms(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Programs/:programId
// Gets a live tv program. 
func (api *LiveTvAPI) GetProgram(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /LiveTv/Programs
// Gets available live tv epgs. 
func (api *LiveTvAPI) GetPrograms(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Programs/Recommended
// Gets recommended live tv epgs. 
func (api *LiveTvAPI) GetRecommendedPrograms(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Recordings/:recordingId
// Gets a live tv recording. 
func (api *LiveTvAPI) GetRecording(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Recordings/Folders
// Gets recording folders. 
func (api *LiveTvAPI) GetRecordingFolders(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Recordings/Groups/:groupId
// Get recording group. 
// Deprecated
func (api *LiveTvAPI) GetRecordingGroup(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Recordings/Groups
// Gets live tv recording groups. 
// Deprecated
func (api *LiveTvAPI) GetRecordingGroups(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Recordings
// Gets live tv recordings. 
func (api *LiveTvAPI) GetRecordings(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Recordings/Series
// Gets live tv recording series. 
// Deprecated
func (api *LiveTvAPI) GetRecordingsSeries(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/ListingProviders/SchedulesDirect/Countries
// Gets available countries. 
func (api *LiveTvAPI) GetSchedulesDirectCountries(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/SeriesTimers/:timerId
// Gets a live tv series timer. 
func (api *LiveTvAPI) GetSeriesTimer(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/SeriesTimers
// Gets live tv series timers. 
func (api *LiveTvAPI) GetSeriesTimers(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Timers/:timerId
// Gets a timer. 
func (api *LiveTvAPI) GetTimer(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/Timers
// Gets the live tv timers. 
func (api *LiveTvAPI) GetTimers(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /LiveTv/TunerHosts/Types
// Get tuner host types. 
func (api *LiveTvAPI) GetTunerHostTypes(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /LiveTv/Tuners/:tunerId/Reset
// Resets a tv tuner. 
func (api *LiveTvAPI) ResetTuner(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /LiveTv/ChannelMappings
// Set channel mappings. 
func (api *LiveTvAPI) SetChannelMapping(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /LiveTv/SeriesTimers/:timerId
// Updates a live tv series timer. 
func (api *LiveTvAPI) UpdateSeriesTimer(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /LiveTv/Timers/:timerId
// Updates a live tv timer. 
func (api *LiveTvAPI) UpdateTimer(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

