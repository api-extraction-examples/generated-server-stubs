/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type ImageAPI struct {
}

// Delete /Items/:itemId/Images/:imageType
// Delete an item's image. 
func (api *ImageAPI) DeleteItemImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /Items/:itemId/Images/:imageType/:imageIndex
// Delete an item's image. 
func (api *ImageAPI) DeleteItemImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /Users/:userId/Images/:imageType
// Delete the user's image. 
func (api *ImageAPI) DeleteUserImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /Users/:userId/Images/:imageType/:index
// Delete the user's image. 
func (api *ImageAPI) DeleteUserImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Artists/:name/Images/:imageType/:imageIndex
// Get artist image by name. 
func (api *ImageAPI) GetArtistImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Genres/:name/Images/:imageType
// Get genre image by name. 
func (api *ImageAPI) GetGenreImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Genres/:name/Images/:imageType/:imageIndex
// Get genre image by name. 
func (api *ImageAPI) GetGenreImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Items/:itemId/Images/:imageType
// Gets the item's image. 
func (api *ImageAPI) GetItemImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Items/:itemId/Images/:imageType/:imageIndex/:tag/:format/:maxWidth/:maxHeight/:percentPlayed/:unplayedCount
// Gets the item's image. 
func (api *ImageAPI) GetItemImage2(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Items/:itemId/Images/:imageType/:imageIndex
// Gets the item's image. 
func (api *ImageAPI) GetItemImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Items/:itemId/Images
// Get item image infos. 
func (api *ImageAPI) GetItemImageInfos(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /MusicGenres/:name/Images/:imageType
// Get music genre image by name. 
func (api *ImageAPI) GetMusicGenreImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /MusicGenres/:name/Images/:imageType/:imageIndex
// Get music genre image by name. 
func (api *ImageAPI) GetMusicGenreImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Persons/:name/Images/:imageType
// Get person image by name. 
func (api *ImageAPI) GetPersonImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Persons/:name/Images/:imageType/:imageIndex
// Get person image by name. 
func (api *ImageAPI) GetPersonImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Studios/:name/Images/:imageType
// Get studio image by name. 
func (api *ImageAPI) GetStudioImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Studios/:name/Images/:imageType/:imageIndex
// Get studio image by name. 
func (api *ImageAPI) GetStudioImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Users/:userId/Images/:imageType
// Get user profile image. 
func (api *ImageAPI) GetUserImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /Users/:userId/Images/:imageType/:imageIndex
// Get user profile image. 
func (api *ImageAPI) GetUserImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Artists/:name/Images/:imageType/:imageIndex
// Get artist image by name. 
func (api *ImageAPI) HeadArtistImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Genres/:name/Images/:imageType
// Get genre image by name. 
func (api *ImageAPI) HeadGenreImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Genres/:name/Images/:imageType/:imageIndex
// Get genre image by name. 
func (api *ImageAPI) HeadGenreImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Items/:itemId/Images/:imageType
// Gets the item's image. 
func (api *ImageAPI) HeadItemImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Items/:itemId/Images/:imageType/:imageIndex/:tag/:format/:maxWidth/:maxHeight/:percentPlayed/:unplayedCount
// Gets the item's image. 
func (api *ImageAPI) HeadItemImage2(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Items/:itemId/Images/:imageType/:imageIndex
// Gets the item's image. 
func (api *ImageAPI) HeadItemImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /MusicGenres/:name/Images/:imageType
// Get music genre image by name. 
func (api *ImageAPI) HeadMusicGenreImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /MusicGenres/:name/Images/:imageType/:imageIndex
// Get music genre image by name. 
func (api *ImageAPI) HeadMusicGenreImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Persons/:name/Images/:imageType
// Get person image by name. 
func (api *ImageAPI) HeadPersonImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Persons/:name/Images/:imageType/:imageIndex
// Get person image by name. 
func (api *ImageAPI) HeadPersonImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Studios/:name/Images/:imageType
// Get studio image by name. 
func (api *ImageAPI) HeadStudioImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Studios/:name/Images/:imageType/:imageIndex
// Get studio image by name. 
func (api *ImageAPI) HeadStudioImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Users/:userId/Images/:imageType
// Get user profile image. 
func (api *ImageAPI) HeadUserImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Head /Users/:userId/Images/:imageType/:imageIndex
// Get user profile image. 
func (api *ImageAPI) HeadUserImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/:userId/Images/:imageType
// Sets the user image. 
func (api *ImageAPI) PostUserImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Users/:userId/Images/:imageType/:index
// Sets the user image. 
func (api *ImageAPI) PostUserImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Items/:itemId/Images/:imageType
// Set item image. 
func (api *ImageAPI) SetItemImage(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Items/:itemId/Images/:imageType/:imageIndex
// Set item image. 
func (api *ImageAPI) SetItemImageByIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /Items/:itemId/Images/:imageType/:imageIndex/Index
// Updates the index for an item image. 
func (api *ImageAPI) UpdateItemImageIndex(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

