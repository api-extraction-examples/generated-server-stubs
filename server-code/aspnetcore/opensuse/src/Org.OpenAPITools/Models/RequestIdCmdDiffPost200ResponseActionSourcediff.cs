/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RequestIdCmdDiffPost200ResponseActionSourcediff : IEquatable<RequestIdCmdDiffPost200ResponseActionSourcediff>
    {
        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<RequestIdCmdDiffPost200ResponseActionSourcediffFilesInner> Files { get; set; }

        /// <summary>
        /// Gets or Sets Issues
        /// </summary>
        [DataMember(Name="issues", EmitDefaultValue=false)]
        public List<RequestIdCmdDiffPost200ResponseActionSourcediffIssuesInner> Issues { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        /// <example>9dbe9eb1767c5e12c69839af893dc239</example>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets VarNew
        /// </summary>
        [DataMember(Name="new", EmitDefaultValue=false)]
        public Object VarNew { get; set; }

        /// <summary>
        /// Gets or Sets Old
        /// </summary>
        [DataMember(Name="old", EmitDefaultValue=false)]
        public RequestIdCmdDiffPost200ResponseActionSourcediffOld Old { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestIdCmdDiffPost200ResponseActionSourcediff {\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  VarNew: ").Append(VarNew).Append("\n");
            sb.Append("  Old: ").Append(Old).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RequestIdCmdDiffPost200ResponseActionSourcediff)obj);
        }

        /// <summary>
        /// Returns true if RequestIdCmdDiffPost200ResponseActionSourcediff instances are equal
        /// </summary>
        /// <param name="other">Instance of RequestIdCmdDiffPost200ResponseActionSourcediff to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestIdCmdDiffPost200ResponseActionSourcediff other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Files == other.Files ||
                    Files != null &&
                    other.Files != null &&
                    Files.SequenceEqual(other.Files)
                ) && 
                (
                    Issues == other.Issues ||
                    Issues != null &&
                    other.Issues != null &&
                    Issues.SequenceEqual(other.Issues)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    VarNew == other.VarNew ||
                    VarNew != null &&
                    VarNew.Equals(other.VarNew)
                ) && 
                (
                    Old == other.Old ||
                    Old != null &&
                    Old.Equals(other.Old)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Files != null)
                    hashCode = hashCode * 59 + Files.GetHashCode();
                    if (Issues != null)
                    hashCode = hashCode * 59 + Issues.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (VarNew != null)
                    hashCode = hashCode * 59 + VarNew.GetHashCode();
                    if (Old != null)
                    hashCode = hashCode * 59 + Old.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RequestIdCmdDiffPost200ResponseActionSourcediff left, RequestIdCmdDiffPost200ResponseActionSourcediff right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RequestIdCmdDiffPost200ResponseActionSourcediff left, RequestIdCmdDiffPost200ResponseActionSourcediff right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
