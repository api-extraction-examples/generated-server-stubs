/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner : IEquatable<BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner>
    {
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>memcached</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Pkgdep
        /// </summary>
        [DataMember(Name="pkgdep", EmitDefaultValue=false)]
        public List<string> Pkgdep { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        /// <example>memcached</example>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Subpkg
        /// </summary>
        [DataMember(Name="subpkg", EmitDefaultValue=false)]
        public List<string> Subpkg { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pkgdep: ").Append(Pkgdep).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Subpkg: ").Append(Subpkg).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner)obj);
        }

        /// <summary>
        /// Returns true if BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner instances are equal
        /// </summary>
        /// <param name="other">Instance of BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Pkgdep == other.Pkgdep ||
                    Pkgdep != null &&
                    other.Pkgdep != null &&
                    Pkgdep.SequenceEqual(other.Pkgdep)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    Subpkg == other.Subpkg ||
                    Subpkg != null &&
                    other.Subpkg != null &&
                    Subpkg.SequenceEqual(other.Subpkg)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Pkgdep != null)
                    hashCode = hashCode * 59 + Pkgdep.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (Subpkg != null)
                    hashCode = hashCode * 59 + Subpkg.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner left, BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner left, BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200ResponsePackageInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
