/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetBuildProjectRepositoryArchPackageBuildinfo200Response : IEquatable<GetBuildProjectRepositoryArchPackageBuildinfo200Response>
    {
        /// <summary>
        /// Gets or Sets Arch
        /// </summary>
        /// <example>i586</example>
        [DataMember(Name="arch", EmitDefaultValue=false)]
        public string Arch { get; set; }

        /// <summary>
        /// Gets or Sets Bcnt
        /// </summary>
        /// <example>2</example>
        [DataMember(Name="bcnt", EmitDefaultValue=false)]
        public string Bcnt { get; set; }

        /// <summary>
        /// Gets or Sets Bdep
        /// </summary>
        [DataMember(Name="bdep", EmitDefaultValue=false)]
        public GetBuildProjectRepositoryArchPackageBuildinfo200ResponseBdep Bdep { get; set; }

        /// <summary>
        /// Gets or Sets Debuginfo
        /// </summary>
        /// <example>0</example>
        [DataMember(Name="debuginfo", EmitDefaultValue=true)]
        public int Debuginfo { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        /// <example>ctris.spec</example>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public string File { get; set; }

        /// <summary>
        /// Gets or Sets Package
        /// </summary>
        /// <example>ctris</example>
        [DataMember(Name="package", EmitDefaultValue=false)]
        public string Package { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=true)]
        public Object Path { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        /// <example>home:Admin</example>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public string Project { get; set; }

        /// <summary>
        /// Gets or Sets Release
        /// </summary>
        /// <example>3.2</example>
        [DataMember(Name="release", EmitDefaultValue=false)]
        public string Release { get; set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        /// <example>openSUSE_Tumbleweed</example>
        [DataMember(Name="repository", EmitDefaultValue=false)]
        public string Repository { get; set; }

        /// <summary>
        /// Gets or Sets Rev
        /// </summary>
        /// <example>3</example>
        [DataMember(Name="rev", EmitDefaultValue=true)]
        public int Rev { get; set; }

        /// <summary>
        /// Gets or Sets Specfile
        /// </summary>
        /// <example>ctris.spec</example>
        [DataMember(Name="specfile", EmitDefaultValue=false)]
        public string Specfile { get; set; }

        /// <summary>
        /// Gets or Sets Srcmd5
        /// </summary>
        /// <example>6b7c8d9cb5c5d36453c1dc8e102016b1</example>
        [DataMember(Name="srcmd5", EmitDefaultValue=false)]
        public string Srcmd5 { get; set; }

        /// <summary>
        /// Gets or Sets Subpack
        /// </summary>
        /// <example>ctris</example>
        [DataMember(Name="subpack", EmitDefaultValue=false)]
        public string Subpack { get; set; }

        /// <summary>
        /// Gets or Sets Verifymd5
        /// </summary>
        /// <example>6b7c8d9cb5c5d36453c1dc8e102016b1</example>
        [DataMember(Name="verifymd5", EmitDefaultValue=false)]
        public string Verifymd5 { get; set; }

        /// <summary>
        /// Gets or Sets Versrel
        /// </summary>
        /// <example>0.42.1-3</example>
        [DataMember(Name="versrel", EmitDefaultValue=false)]
        public string Versrel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetBuildProjectRepositoryArchPackageBuildinfo200Response {\n");
            sb.Append("  Arch: ").Append(Arch).Append("\n");
            sb.Append("  Bcnt: ").Append(Bcnt).Append("\n");
            sb.Append("  Bdep: ").Append(Bdep).Append("\n");
            sb.Append("  Debuginfo: ").Append(Debuginfo).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  Rev: ").Append(Rev).Append("\n");
            sb.Append("  Specfile: ").Append(Specfile).Append("\n");
            sb.Append("  Srcmd5: ").Append(Srcmd5).Append("\n");
            sb.Append("  Subpack: ").Append(Subpack).Append("\n");
            sb.Append("  Verifymd5: ").Append(Verifymd5).Append("\n");
            sb.Append("  Versrel: ").Append(Versrel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetBuildProjectRepositoryArchPackageBuildinfo200Response)obj);
        }

        /// <summary>
        /// Returns true if GetBuildProjectRepositoryArchPackageBuildinfo200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of GetBuildProjectRepositoryArchPackageBuildinfo200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetBuildProjectRepositoryArchPackageBuildinfo200Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Arch == other.Arch ||
                    Arch != null &&
                    Arch.Equals(other.Arch)
                ) && 
                (
                    Bcnt == other.Bcnt ||
                    Bcnt != null &&
                    Bcnt.Equals(other.Bcnt)
                ) && 
                (
                    Bdep == other.Bdep ||
                    Bdep != null &&
                    Bdep.Equals(other.Bdep)
                ) && 
                (
                    Debuginfo == other.Debuginfo ||
                    
                    Debuginfo.Equals(other.Debuginfo)
                ) && 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                ) && 
                (
                    Package == other.Package ||
                    Package != null &&
                    Package.Equals(other.Package)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    Project == other.Project ||
                    Project != null &&
                    Project.Equals(other.Project)
                ) && 
                (
                    Release == other.Release ||
                    Release != null &&
                    Release.Equals(other.Release)
                ) && 
                (
                    Repository == other.Repository ||
                    Repository != null &&
                    Repository.Equals(other.Repository)
                ) && 
                (
                    Rev == other.Rev ||
                    
                    Rev.Equals(other.Rev)
                ) && 
                (
                    Specfile == other.Specfile ||
                    Specfile != null &&
                    Specfile.Equals(other.Specfile)
                ) && 
                (
                    Srcmd5 == other.Srcmd5 ||
                    Srcmd5 != null &&
                    Srcmd5.Equals(other.Srcmd5)
                ) && 
                (
                    Subpack == other.Subpack ||
                    Subpack != null &&
                    Subpack.Equals(other.Subpack)
                ) && 
                (
                    Verifymd5 == other.Verifymd5 ||
                    Verifymd5 != null &&
                    Verifymd5.Equals(other.Verifymd5)
                ) && 
                (
                    Versrel == other.Versrel ||
                    Versrel != null &&
                    Versrel.Equals(other.Versrel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Arch != null)
                    hashCode = hashCode * 59 + Arch.GetHashCode();
                    if (Bcnt != null)
                    hashCode = hashCode * 59 + Bcnt.GetHashCode();
                    if (Bdep != null)
                    hashCode = hashCode * 59 + Bdep.GetHashCode();
                    
                    hashCode = hashCode * 59 + Debuginfo.GetHashCode();
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                    if (Package != null)
                    hashCode = hashCode * 59 + Package.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (Project != null)
                    hashCode = hashCode * 59 + Project.GetHashCode();
                    if (Release != null)
                    hashCode = hashCode * 59 + Release.GetHashCode();
                    if (Repository != null)
                    hashCode = hashCode * 59 + Repository.GetHashCode();
                    
                    hashCode = hashCode * 59 + Rev.GetHashCode();
                    if (Specfile != null)
                    hashCode = hashCode * 59 + Specfile.GetHashCode();
                    if (Srcmd5 != null)
                    hashCode = hashCode * 59 + Srcmd5.GetHashCode();
                    if (Subpack != null)
                    hashCode = hashCode * 59 + Subpack.GetHashCode();
                    if (Verifymd5 != null)
                    hashCode = hashCode * 59 + Verifymd5.GetHashCode();
                    if (Versrel != null)
                    hashCode = hashCode * 59 + Versrel.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetBuildProjectRepositoryArchPackageBuildinfo200Response left, GetBuildProjectRepositoryArchPackageBuildinfo200Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetBuildProjectRepositoryArchPackageBuildinfo200Response left, GetBuildProjectRepositoryArchPackageBuildinfo200Response right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
