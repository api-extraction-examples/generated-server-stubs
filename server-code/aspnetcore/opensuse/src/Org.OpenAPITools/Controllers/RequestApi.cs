/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RequestApiController : ControllerBase
    { 
        /// <summary>
        /// Get a simple directory listing of all requests
        /// </summary>
        /// <remarks>Get a simple directory listing of all requests</remarks>
        /// <response code="200">OK  XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) </response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("/request")]
        [ValidateModelState]
        [SwaggerOperation("RequestGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK  XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) ")]
        public virtual IActionResult RequestGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a given request.
        /// </summary>
        /// <remarks>Delete a given request.</remarks>
        /// <response code="200"></response>
        /// <response code="401"></response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("/request/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RequestIdDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found")]
        public virtual IActionResult RequestIdDelete()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Show details about a specified request.
        /// </summary>
        /// <remarks>Show details about a specified request.</remarks>
        /// <param name="id">Id of the choosen request.</param>
        /// <response code="200"></response>
        /// <response code="401"></response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/request/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RequestIdGet")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found")]
        public virtual IActionResult RequestIdGet([FromRoute (Name = "id")][Required]int id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Apply certain actions on a specified request.
        /// </summary>
        /// <remarks>Apply certain actions on a specified request.</remarks>
        /// <param name="cmd">- &#x60;addreview&#x60;:   Add a review to a request. **NOTE:** You need to specify who has to address   the review by providing an additional paramter. Possible options are:   * by_user   * by_group   * by_project  - &#x60;assignreview&#x60;:   Accept a review for a given group and assign a new review to a specific user.   **NOTE:** You need to pass the group name in the &#x60;by_group&#x60; parameter   and the new reviewer in the &#x60;reviewer&#x60; parameter.  - &#x60;changestate&#x60;: Modify the state of a given request.   **NOTE:** You need to pass the new state throug the &#x60;newstate&#x60; parameter. Changing   from one state to another is in certain cases not allowed. You can still force   the operation by using the &#x60;force&#x3D;1&#x60; parameter.  - &#x60;changereviewstate&#x60;:   Change the state of a review inside a given request.  - &#x60;setpriority&#x60;:   Change the priority of a given request. You have to pass the choosen priority through   the &#x60;priority&#x60; parameter. Possible values are:   * low   * moderate   * important   * critical  - &#x60;setincident&#x60;: Change the target incident for maintenance_incident actions   **NOTE:** You need to provide the incident number through the &#x60;incident&#x60;   parameter.  - &#x60;setacceptat&#x60;: Set or modify the accept_at time. Either specified by the &#x60;time&#x60;   parameter or by default set to now.  - &#x60;approve&#x60;: Pre-approve a request in the review state. It will turn into state &#x60;accepted&#x60;   after the last review.  - &#x60;cancelapproval&#x60;: Reset the approval of a request </param>
        /// <param name="newstate">Define the new state</param>
        /// <param name="priority">Define the new priority</param>
        /// <param name="byUser">Specify the user of a new review</param>
        /// <param name="byGroup">Specify the group of the new review</param>
        /// <param name="byProject">Specify the project of the new review</param>
        /// <param name="byPackage">Specify the package of the new review</param>
        /// <param name="incident">Specify the incident number for &#x60;setincident&#x60;</param>
        /// <param name="time">Specify the time for &#x60;setacceptat&#x60;</param>
        /// <param name="comment">Add a comment to one of the actions</param>
        /// <response code="200"></response>
        /// <response code="400">Bad Request</response>
        /// <response code="401"></response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/request/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RequestIdPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found")]
        public virtual IActionResult RequestIdPost([FromQuery (Name = "cmd")]string cmd, [FromQuery (Name = "newstate")]string newstate, [FromQuery (Name = "priority")]string priority, [FromQuery (Name = "by_user")]string byUser, [FromQuery (Name = "by_group")]string byGroup, [FromQuery (Name = "by_project")]string byProject, [FromQuery (Name = "by_package")]string byPackage, [FromQuery (Name = "incident")]string incident, [FromQuery (Name = "time")]string time, [FromQuery (Name = "comment")]string comment)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Modify a given request.
        /// </summary>
        /// <remarks>Modify a given request.  **NOTE:** Certain parts of a request can only be changed by admins. </remarks>
        /// <param name="body">Request XML  **NOTE:** You cannot pass the request id in the xml. You can pass the history in the xml, but it will be simply ignored.  XML Schema used for body validation: [request.rng](../schema/request.rng) </param>
        /// <response code="200"></response>
        /// <response code="400">Bad Request</response>
        /// <response code="401"></response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/request/{id}")]
        [Consumes("application/xml; charset=utf-8")]
        [ValidateModelState]
        [SwaggerOperation("RequestIdPut")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Bad Request")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found")]
        public virtual IActionResult RequestIdPut([FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get the diff for all packages affected by the request.
        /// </summary>
        /// <remarks>Get the diff for all packages affected by the request. </remarks>
        /// <param name="diffToSuperseded">Diff relative to a given superseded request. State the id of the corresponding superseded request. </param>
        /// <param name="view">Set this parameter to xml in order to receive a structured diff instead of plain text.</param>
        /// <param name="withissues">Include parsed issues</param>
        /// <response code="200">OK</response>
        /// <response code="401"></response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/request/{id}/cmd=diff")]
        [ValidateModelState]
        [SwaggerOperation("RequestIdcmddiffPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(RequestIdCmdDiffPost200Response), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found")]
        public virtual IActionResult RequestIdcmddiffPost([FromQuery (Name = "diff_to_superseded")]string diffToSuperseded, [FromQuery (Name = "view")]string view, [FromQuery (Name = "withissues")]string withissues)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RequestIdCmdDiffPost200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<diff actions=\"0\" id=\"12\">\n</diff>";
            exampleJson = "Custom MIME type example not yet supported: text/plain; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RequestIdCmdDiffPost200Response>(exampleJson)
            : default(RequestIdCmdDiffPost200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a request
        /// </summary>
        /// <remarks>Create a request</remarks>
        /// <param name="cmd">This endpoint will refuse the creation of a new request if this parameter is not set.</param>
        /// <param name="requestPostRequest">Request XML  **NOTE:** You cannot pass the request id in the xml. You can pass the history in the xml, but it will be simply ignored. </param>
        /// <param name="addrevision">Ask the server to add revisions of the current sources to the request.</param>
        /// <param name="ignoreDelegate">Enforce a new package instance in a project which has OBS:DelegateRequestTarget set</param>
        /// <param name="ignoreBuildState">Skip the build state check</param>
        /// <response code="200">OK.  XML Schema used for body validation: [request.rng](../schema/request.rng) </response>
        /// <response code="400">Bad Request</response>
        /// <response code="401"></response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/request")]
        [Consumes("application/xml; charset=utf-8")]
        [ValidateModelState]
        [SwaggerOperation("RequestPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK.  XML Schema used for body validation: [request.rng](../schema/request.rng) ")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(Object), description: "Forbidden")]
        public virtual IActionResult RequestPost([FromQuery (Name = "cmd")][Required()]string cmd, [FromBody]RequestPostRequest requestPostRequest, [FromQuery (Name = "addrevision")]string addrevision, [FromQuery (Name = "ignore_delegate")]string ignoreDelegate, [FromQuery (Name = "ignore_build_state")]string ignoreBuildState)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a collection of requests for a specified target
        /// </summary>
        /// <remarks>Get a collection of requests for a specified target. **NOTE:** You need to set at least one of the following parameters in order to use this endpoint:  * &#x60;user&#x60; * &#x60;project&#x60; * &#x60;package&#x60; * &#x60;states&#x60; * &#x60;types&#x60; * &#x60;ids&#x60; </remarks>
        /// <param name="user">Filter the results of requests and open reviews for a certain user. If no other parameters are applied, it will include requests where the user is maintainer of the target or the creator of the request. </param>
        /// <param name="project">Limit the results of requests and open review requests to the specified target project.</param>
        /// <param name="package">Limit the results of requests and open review requests to the specified target package.</param>
        /// <param name="states">Limit results to a given request state. Multiple states can be provided as a comma separated list.</param>
        /// <param name="types">Limit the results to certain action types. Multiple types can be provided as a comma separated list.</param>
        /// <param name="roles">Limit the results to a given role. Multiple roles can be provided as a comma separated list.</param>
        /// <param name="withhistory">Include the request history in the results.</param>
        /// <param name="withfullhistory">Includes both, request and review history in the results.</param>
        /// <param name="limit">Limit the results to the specified amount of requests.</param>
        /// <param name="ids">Limit the result to specified request id&#39;s. Multiple id&#39;s can be provided as a comma separated list.</param>
        /// <response code="200">OK</response>
        /// <response code="401"></response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/request/view=collection")]
        [ValidateModelState]
        [SwaggerOperation("RequestviewcollectionGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(RequestViewCollectionGet200Response), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found")]
        public virtual IActionResult RequestviewcollectionGet([FromQuery (Name = "user")]string user, [FromQuery (Name = "project")]string project, [FromQuery (Name = "package")]string package, [FromQuery (Name = "states")]string states, [FromQuery (Name = "types")]string types, [FromQuery (Name = "roles")]string roles, [FromQuery (Name = "withhistory")]string withhistory, [FromQuery (Name = "withfullhistory")]string withfullhistory, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "ids")]string ids)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RequestViewCollectionGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<collection matches=\"7\">\n</collection>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RequestViewCollectionGet200Response>(exampleJson)
            : default(RequestViewCollectionGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
