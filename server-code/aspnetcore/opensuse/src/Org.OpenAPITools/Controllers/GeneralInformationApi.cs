/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class GeneralInformationApiController : ControllerBase
    { 
        /// <summary>
        /// Get information about API.
        /// </summary>
        /// <remarks>Get generic information about the API.</remarks>
        /// <response code="200">OK. The request has succeeded.  XML Schema used for body validation: [about.xsd](../schema/about.xsd) </response>
        [HttpGet]
        [Route("/about")]
        [ValidateModelState]
        [SwaggerOperation("AboutGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(AboutGet200Response), description: "OK. The request has succeeded.  XML Schema used for body validation: [about.xsd](../schema/about.xsd) ")]
        public virtual IActionResult AboutGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AboutGet200Response));
            string exampleJson = null;
            exampleJson = "<about>\n  <commit>7b5d82e6143442a8eb8459f35cc94d2fbe263ebe</commit>\n  <description>API to the Open Build Service</description>\n  <last_deployment>2020-11-10 15:07:02 +0000</last_deployment>\n  <revision>2.11~alpha.20201110T101235.7b5d82e614</revision>\n  <title>Open Build Service API</title>\n</about>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AboutGet200Response>(exampleJson)
            : default(AboutGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Show one architecture.
        /// </summary>
        /// <remarks>Show information about one architecture.</remarks>
        /// <param name="architectureName">Architecture name</param>
        /// <response code="200">OK. The request has succeeded.</response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.</response>
        [HttpGet]
        [Route("/architectures/{architecture_name}")]
        [ValidateModelState]
        [SwaggerOperation("ArchitecturesArchitectureNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArchitecturesArchitectureNameGet200Response), description: "OK. The request has succeeded.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.")]
        public virtual IActionResult ArchitecturesArchitectureNameGet([FromRoute (Name = "architecture_name")][Required]string architectureName)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArchitecturesArchitectureNameGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<architecture name=\"aeiou\">\n</architecture>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArchitecturesArchitectureNameGet200Response>(exampleJson)
            : default(ArchitecturesArchitectureNameGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List all known architectures.
        /// </summary>
        /// <remarks>Get a list of all known architectures known to OBS in general. This is not the list of architectures provided by this instance. Check the schedulers element from the &#x60;/configuration&#x60; route for this. </remarks>
        /// <response code="200">OK. The request has succeeded.</response>
        /// <response code="401">Unauthorized.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/architectures")]
        [ValidateModelState]
        [SwaggerOperation("ArchitecturesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArchitecturesGet200Response), description: "OK. The request has succeeded.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ArchitecturesGet401Response), description: "Unauthorized.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult ArchitecturesGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArchitecturesGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ArchitecturesGet401Response));
            string exampleJson = null;
            exampleJson = "<directory count=\"123\">\n</directory>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArchitecturesGet200Response>(exampleJson)
            : default(ArchitecturesGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
