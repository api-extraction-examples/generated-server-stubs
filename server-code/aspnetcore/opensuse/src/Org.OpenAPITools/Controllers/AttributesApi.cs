/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AttributesApiController : ControllerBase
    { 
        /// <summary>
        /// Delete an attribute and all its values in projects or packages.
        /// </summary>
        /// <remarks>Delete an attribute and all its values in projects or packages.  This operation is the same as the one defined with [DELETE /attribute/{namespace}/{attribute_name}/_meta](#/Attributes/delete_attribute__namespace___attribute_name___meta) </remarks>
        /// <param name="attributeName">The name of the attribute</param>
        /// <response code="200"></response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.</response>
        [HttpDelete]
        [Route("/attribute/{namespace}/{attribute_name}")]
        [ValidateModelState]
        [SwaggerOperation("AttributeNamespaceAttributeNameDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.")]
        public virtual IActionResult AttributeNamespaceAttributeNameDelete([FromRoute (Name = "attribute_name")][Required]string attributeName)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete an attribute and all its values in projects or packages.
        /// </summary>
        /// <remarks>Delete an attribute and all its values in projects or packages.  This operation is the same as the one defined with [DELETE /attribute/{namespace}/{attribute_name}](#/Attributes/delete_attribute__namespace___attribute_name_) </remarks>
        /// <response code="200"></response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.</response>
        [HttpDelete]
        [Route("/attribute/{namespace}/{attribute_name}/_meta")]
        [ValidateModelState]
        [SwaggerOperation("AttributeNamespaceAttributeNameMetaDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.")]
        public virtual IActionResult AttributeNamespaceAttributeNameMetaDelete()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Shows attribute.
        /// </summary>
        /// <remarks>Shows attribute.</remarks>
        /// <response code="200">OK. The request has succeeded.</response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.</response>
        [HttpGet]
        [Route("/attribute/{namespace}/{attribute_name}/_meta")]
        [ValidateModelState]
        [SwaggerOperation("AttributeNamespaceAttributeNameMetaGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(AttributeNamespaceAttributeNameMetaGet200Response), description: "OK. The request has succeeded.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.")]
        public virtual IActionResult AttributeNamespaceAttributeNameMetaGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AttributeNamespaceAttributeNameMetaGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<definition name=\"OBS_TEST\" namespace=\"OwnerRootProjectTest\">\n  <count>0</count>\n  <description>An example description for an attribute.</description>\n</definition>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AttributeNamespaceAttributeNameMetaGet200Response>(exampleJson)
            : default(AttributeNamespaceAttributeNameMetaGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Change attribute data. Create an attribute if it doesn&#39;t exist.
        /// </summary>
        /// <remarks>This endpoint can be used for both, creating an attribute and updating it:   * If the attribute passed as parameter doesn&#39;t exist, it will create the attribute.   * If the attribute passed as parameter already exists, it will update the attribute.  This operation is the same as the one defined with [PUT](#/Attributes/put_attribute__namespace___attribute_name___meta). </remarks>
        /// <param name="body">Attribute definition.</param>
        /// <response code="200"></response>
        /// <response code="400">Validation Failed.</response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.</response>
        [HttpPost]
        [Route("/attribute/{namespace}/{attribute_name}/_meta")]
        [Consumes("application/xml; charset=utf-8")]
        [ValidateModelState]
        [SwaggerOperation("AttributeNamespaceAttributeNameMetaPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Validation Failed.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.")]
        public virtual IActionResult AttributeNamespaceAttributeNameMetaPost([FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Change attribute data. Create an attribute if it doesn&#39;t exist.
        /// </summary>
        /// <remarks>This endpoint can be used for both, creating an attribute and updating it:   * If the attribute passed as parameter doesn&#39;t exist, it will create the attribute.   * If the attribute passed as parameter already exists, it will update the attribute.  This operation is the same as the one defined with [POST](#/Attributes/post_attribute__namespace___attribute_name___meta). </remarks>
        /// <param name="body">Attribute definition.</param>
        /// <response code="200"></response>
        /// <response code="400">Validation Failed.</response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.</response>
        [HttpPut]
        [Route("/attribute/{namespace}/{attribute_name}/_meta")]
        [Consumes("application/xml; charset=utf-8")]
        [ValidateModelState]
        [SwaggerOperation("AttributeNamespaceAttributeNameMetaPut")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Validation Failed.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.")]
        public virtual IActionResult AttributeNamespaceAttributeNameMetaPut([FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }
    }
}
