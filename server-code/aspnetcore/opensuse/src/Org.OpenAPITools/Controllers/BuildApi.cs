/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BuildApiController : ControllerBase
    { 
        /// <summary>
        /// Get a simple directory listing of all projects
        /// </summary>
        /// <remarks>Get a simple directory listing of all projects</remarks>
        /// <response code="200">OK  XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) </response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("/build")]
        [ValidateModelState]
        [SwaggerOperation("BuildGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK  XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) ")]
        public virtual IActionResult BuildGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a simple directory listing of all repositories for the specified project
        /// </summary>
        /// <remarks>Get a simple directory listing of all repositories for the specified project</remarks>
        /// <param name="projectName">Project name</param>
        /// <response code="200">OK  XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) </response>
        /// <response code="401"></response>
        /// <response code="404">Unknown project.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/build/{project_name}")]
        [ValidateModelState]
        [SwaggerOperation("BuildProjectNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK  XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Unknown project.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult BuildProjectNameGet([FromRoute (Name = "project_name")][Required]string projectName)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Apply different actions on builds/build processes of the specified project
        /// </summary>
        /// <remarks>Apply different actions on builds/build processes of the specified project</remarks>
        /// <param name="cmd">**NOTE**: All commands described below, can be scoped to a package within the project by setting the &#x60;package&#x60; parameter.  * &#x60;wipe&#x60;: Delete all binaries build by the project. * &#x60;restartbuild&#x60;: Restart all running build processes inside the project. * &#x60;rebuild&#x60;: Trigger a rebuild of all packages inside the project. * &#x60;abortbuild&#x60;: Abort all running build processes for the specified project, marking them as failed. * &#x60;killbuild&#x60;: Alias for &#x60;abortbuild&#x60;. * &#x60;unpublish&#x60;: Delete all published package binaries, for the specified project, from the download repository. * &#x60;sendsysrq&#x60;: Send a single sysrq character to the kernel of a running build. Character need to be specified                through the &#x60;sysrq&#x60; parameter. Only a subset of debugging requests are supported (eg. 9, t or w). </param>
        /// <param name="package">Name of the package. Scope the commands to the specified package.</param>
        /// <param name="arch">Name of the build architecture. Scope the commands to the specified architectures.</param>
        /// <param name="repository">Name of the repository. Scope the commands to the specified repository.</param>
        /// <response code="200"></response>
        /// <response code="400">Illegal request.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="403">Execute command no permission.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="404"></response>
        [HttpPost]
        [Route("/build/{project_name}")]
        [ValidateModelState]
        [SwaggerOperation("BuildProjectNamePost")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Illegal request.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        [SwaggerResponse(statusCode: 403, type: typeof(Object), description: "Execute command no permission.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult BuildProjectNamePost([FromQuery (Name = "cmd")][Required()]string cmd, [FromQuery (Name = "package")]string package, [FromQuery (Name = "arch")]string arch, [FromQuery (Name = "repository")]string repository)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Object));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Show the build dependencies of packages that are part of the project.
        /// </summary>
        /// <remarks>Show the build dependencies of packages that are part of the project, for a given repository and architecture. </remarks>
        /// <param name="package">Name of the package. Limit results to the specified package.</param>
        /// <param name="view">* &#x60;pkgnames&#x60;: Show whole package dependencies, instead of individual binaries. * &#x60;revpkgnames&#x60;: Show which packages depend on the provided project/package for   the given repository/architecture, and therefore a rebuild gets triggered on change. * &#x60;order&#x60;: Show packages ordered by dependencies. </param>
        /// <response code="200">OK</response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/_builddepinfo")]
        [ValidateModelState]
        [SwaggerOperation("BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200Response), description: "OK")]
        public virtual IActionResult BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet([FromQuery (Name = "package")]string package, [FromQuery (Name = "view")]string view)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "<builddepinfo>\n</builddepinfo>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200Response>(exampleJson)
            : default(BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List binaries built by the sources of the specified package.
        /// </summary>
        /// <remarks>List binaries built by the sources of the specified package.</remarks>
        /// <param name="packageName">Package name</param>
        /// <response code="200">OK.</response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/{package_name}")]
        [ValidateModelState]
        [SwaggerOperation("BuildProjectNameRepositoryNameArchitectureNamePackageNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK.")]
        public virtual IActionResult BuildProjectNameRepositoryNameArchitectureNamePackageNameGet([FromRoute (Name = "package_name")][Required]string packageName)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Show the build status of a currently running build job.
        /// </summary>
        /// <remarks>Show the build status of a currently running build job. Shows an empty result if no build job is running. </remarks>
        /// <response code="200">OK.  XML Schema used for body validation: [jobstatus.rng](../schema/jobstatus.rng) </response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_jobstatus")]
        [ValidateModelState]
        [SwaggerOperation("BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet200Response), description: "OK.  XML Schema used for body validation: [jobstatus.rng](../schema/jobstatus.rng) ")]
        public virtual IActionResult BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "<jobstatus code=\"building\">\n  <hostarch>x86_64</hostarch>\n  <jobid>17c8d25b92da67f6ec428ea51a9b5342</jobid>\n  <lastduration>43</lastduration>\n  <starttime>1618222900</starttime>\n  <uri>http://172.18.0.5:38963</uri>\n</jobstatus>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet200Response>(exampleJson)
            : default(BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Show the reason for the lastly triggered build.
        /// </summary>
        /// <remarks>Details about the reason of the lastly triggered build.</remarks>
        /// <response code="200">OK</response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_reason")]
        [ValidateModelState]
        [SwaggerOperation("BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet200Response), description: "OK")]
        public virtual IActionResult BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "<reason>\n  <explain>source change</explain>\n  <oldsource>da9ebc6a12b6da45f9ead3fc2f924889</oldsource>\n  <time>1617982407</time>\n</reason>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet200Response>(exampleJson)
            : default(BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List all binaries (produced by all packages of the given project).
        /// </summary>
        /// <remarks>List all binaries (produced by all packages of the given project) for the specified repository and architecture. </remarks>
        /// <response code="200">OK.</response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/_repository")]
        [ValidateModelState]
        [SwaggerOperation("BuildProjectNameRepositoryNameArchitectureNameRepositoryGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BuildProjectNameRepositoryNameArchitectureNameRepositoryGet200Response), description: "OK.")]
        public virtual IActionResult BuildProjectNameRepositoryNameArchitectureNameRepositoryGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BuildProjectNameRepositoryNameArchitectureNameRepositoryGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "<binarylist>\n</binarylist>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BuildProjectNameRepositoryNameArchitectureNameRepositoryGet200Response>(exampleJson)
            : default(BuildProjectNameRepositoryNameArchitectureNameRepositoryGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Show the build configuration for the specified repository.
        /// </summary>
        /// <remarks>Show the build configuration for the specified repository. Includes all base package requirements, mappings and macros. </remarks>
        /// <response code="200">OK</response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/_buildconfig")]
        [ValidateModelState]
        [SwaggerOperation("BuildProjectNameRepositoryNameBuildconfigGet")]
        public virtual IActionResult BuildProjectNameRepositoryNameBuildconfigGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// List of all architectures the specified project builds against a given repository.
        /// </summary>
        /// <remarks>List of all architectures the specified project builds against a given repository.</remarks>
        /// <param name="repositoryName">Repository name</param>
        /// <response code="200">OK  XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) </response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.</response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}")]
        [ValidateModelState]
        [SwaggerOperation("BuildProjectNameRepositoryNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK  XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.")]
        public virtual IActionResult BuildProjectNameRepositoryNameGet([FromRoute (Name = "repository_name")][Required]string repositoryName)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the build results for packages, architectures and repositories of the specified project.
        /// </summary>
        /// <remarks>Get the build results for packages, architectures and repositories of the specified project.</remarks>
        /// <param name="view">Specify which sections should be included in the result list.  * &#x60;status&#x60;: Include detailed infos about the build status. **Default** * &#x60;summary&#x60;: Include the summary of the status values. * &#x60;binarylist&#x60;: Include a list of generated binary files. </param>
        /// <param name="package">Name of the package. Limit results to the specified package.</param>
        /// <param name="arch">Name of the build architecture. Limit results to the specified build architecture.</param>
        /// <param name="repository">Name of the repository. Limit results to the specified repository.</param>
        /// <param name="lastbuild">Show the last build result (excludes current building job states).</param>
        /// <param name="locallink">Include build results from packages with project local links.</param>
        /// <param name="multibuild">Include build results from _multibuild definitions.</param>
        /// <response code="200">OK.  XML Schema used for body validation: [buildresult.rng](../schema/buildresult.rng) </response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpGet]
        [Route("/build/{project_name}/_result")]
        [ValidateModelState]
        [SwaggerOperation("BuildProjectNameResultGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BuildProjectNameResultGet200Response), description: "OK.  XML Schema used for body validation: [buildresult.rng](../schema/buildresult.rng) ")]
        public virtual IActionResult BuildProjectNameResultGet([FromQuery (Name = "view")]string view, [FromQuery (Name = "package")]string package, [FromQuery (Name = "arch")]string arch, [FromQuery (Name = "repository")]string repository, [FromQuery (Name = "lastbuild")]bool? lastbuild, [FromQuery (Name = "locallink")]bool? locallink, [FromQuery (Name = "multibuild")]bool? multibuild)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BuildProjectNameResultGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "<resultlist state=\"e096d16554264fa553ca0aa3226cf189\">\n</resultlist>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BuildProjectNameResultGet200Response>(exampleJson)
            : default(BuildProjectNameResultGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This endpoint returns information about some specific artifact</remarks>
        /// <response code="200">Returns the artifact building information.</response>
        /// <response code="401"></response>
        /// <response code="404">Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_buildinfo")]
        [ValidateModelState]
        [SwaggerOperation("GetBuildProjectRepositoryArchPackageBuildinfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetBuildProjectRepositoryArchPackageBuildinfo200Response), description: "Returns the artifact building information.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult GetBuildProjectRepositoryArchPackageBuildinfo()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetBuildProjectRepositoryArchPackageBuildinfo200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<buildinfo package=\"ctris\" project=\"home:Admin\" repository=\"openSUSE_Tumbleweed\">\n  <arch>i586</arch>\n  <bcnt>2</bcnt>\n  <debuginfo>0</debuginfo>\n  <file>ctris.spec</file>\n  <path>UNDEFINED_EXAMPLE_VALUE</path>\n  <release>3.2</release>\n  <rev>3</rev>\n  <specfile>ctris.spec</specfile>\n  <srcmd5>6b7c8d9cb5c5d36453c1dc8e102016b1</srcmd5>\n  <subpack>ctris</subpack>\n  <verifymd5>6b7c8d9cb5c5d36453c1dc8e102016b1</verifymd5>\n  <versrel>0.42.1-3</versrel>\n</buildinfo>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetBuildProjectRepositoryArchPackageBuildinfo200Response>(exampleJson)
            : default(GetBuildProjectRepositoryArchPackageBuildinfo200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This endpoint returns the build history for a specific artifact</remarks>
        /// <response code="200">Returns ok when the build status is ok</response>
        /// <response code="401"></response>
        /// <response code="404">Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_history")]
        [ValidateModelState]
        [SwaggerOperation("GetBuildProjectRepositoryArchPackageHistory")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetBuildProjectRepositoryArchPackageHistory200Response), description: "Returns ok when the build status is ok")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult GetBuildProjectRepositoryArchPackageHistory()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetBuildProjectRepositoryArchPackageHistory200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<buildhistory>\n</buildhistory>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetBuildProjectRepositoryArchPackageHistory200Response>(exampleJson)
            : default(GetBuildProjectRepositoryArchPackageHistory200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This endpoint returns the last log file for a specific build artifact</remarks>
        /// <response code="200">This endpoint returns the log file content </response>
        /// <response code="401"></response>
        /// <response code="403">Error: Not Acceptable  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="404">Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_log")]
        [ValidateModelState]
        [SwaggerOperation("GetBuildProjectRepositoryArchPackageLog")]
        [SwaggerResponse(statusCode: 403, type: typeof(Object), description: "Error: Not Acceptable  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult GetBuildProjectRepositoryArchPackageLog()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Object));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This endpoint returns the building status for a specific artifact</remarks>
        /// <response code="200">Returns ok when the build status is ok</response>
        /// <response code="401"></response>
        /// <response code="404">Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_status")]
        [ValidateModelState]
        [SwaggerOperation("GetBuildProjectRepositoryArchPackageStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetBuildProjectRepositoryArchPackageStatus200Response), description: "Returns ok when the build status is ok")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult GetBuildProjectRepositoryArchPackageStatus()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetBuildProjectRepositoryArchPackageStatus200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<status code=\"failed\" package=\"ctris\">\n</status>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetBuildProjectRepositoryArchPackageStatus200Response>(exampleJson)
            : default(GetBuildProjectRepositoryArchPackageStatus200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return a specific artifact file contents
        /// </summary>
        /// <remarks>Given a project, repository, architecture and package, retrieve the given file&#39;s content. </remarks>
        /// <param name="fileName">The file name</param>
        /// <response code="200">Returns the artifact&#39;s actual file contents</response>
        /// <response code="401"></response>
        /// <response code="404">Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}")]
        [ValidateModelState]
        [SwaggerOperation("GetBuildProjectRepositoryArchitecturePackageFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Returns the artifact&#39;s actual file contents")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult GetBuildProjectRepositoryArchitecturePackageFile([FromRoute (Name = "file_name")][Required]string fileName)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// This endpoint returns details about an specific artifact
        /// </summary>
        /// <remarks>Given a project, repository, architecture and package, retrieve the given artifact&#39;s details. </remarks>
        /// <param name="view"></param>
        /// <response code="200">Returns details about the artifact</response>
        /// <response code="401"></response>
        /// <response code="404">Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}/view=fileinfo")]
        [ValidateModelState]
        [SwaggerOperation("GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo200Response), description: "Returns details about the artifact")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo([FromQuery (Name = "view")][Required()]List<string> view)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<fileinfo filename=\"aeiou\">\n  <arch>aeiou</arch>\n  <description>aeiou</description>\n  <mtime>aeiou</mtime>\n  <name>aeiou</name>\n  <provides>aeiou</provides>\n  <release>aeiou</release>\n  <requires>aeiou</requires>\n  <size>aeiou</size>\n  <source>aeiou</source>\n  <summary>aeiou</summary>\n  <version>aeiou</version>\n</fileinfo>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo200Response>(exampleJson)
            : default(GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update a specific artifact file contents
        /// </summary>
        /// <remarks>Given a project, repository, architecture and package, update the given file&#39;s content.  This is for Admins only. </remarks>
        /// <param name="packageName">Package name</param>
        /// <param name="body"></param>
        /// <response code="200">Updates the artifact&#39;s file contents</response>
        /// <response code="401"></response>
        /// <response code="403">No permission to upload binaries for this project </response>
        /// <response code="404">Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpPut]
        [Route("/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}")]
        [Consumes("plain/text")]
        [ValidateModelState]
        [SwaggerOperation("PutBuildProjectRepositoryArchitecturePackageFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Updates the artifact&#39;s file contents")]
        [SwaggerResponse(statusCode: 403, type: typeof(Object), description: "No permission to upload binaries for this project ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Error: Not Found  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult PutBuildProjectRepositoryArchitecturePackageFile([FromRoute (Name = "package_name")][Required]List<string> packageName, [FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Object));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
