/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WorkersApiController : ControllerBase
    { 
        /// <summary>
        /// Lists capabilites of a worker.
        /// </summary>
        /// <remarks>Lists capabilites of a worker.  This can be useful when checking for constraints.  This operation is the same as &#x60;GET /worker/capability/{architecture_name}:{worker_id}&#x60;. </remarks>
        /// <param name="workerId">Worker id.</param>
        /// <response code="200">OK</response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.</response>
        [HttpGet]
        [Route("/worker/{architecture_name}:{worker_id}")]
        [ValidateModelState]
        [SwaggerOperation("WorkerArchitectureNameworkerIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkerArchitectureNameWorkerIdGet200Response), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.")]
        public virtual IActionResult WorkerArchitectureNameworkerIdGet([FromRoute (Name = "worker_id")][Required]string workerId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WorkerArchitectureNameWorkerIdGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<worker hostarch=\"aeiou\" registerserver=\"aeiou\" workerid=\"aeiou\">\n  <hostlabel>aeiou</hostlabel>\n  <sandbox>aeiou</sandbox>\n</worker>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<WorkerArchitectureNameWorkerIdGet200Response>(exampleJson)
            : default(WorkerArchitectureNameWorkerIdGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Lists status of workers, jobs, backend services and general statistics.
        /// </summary>
        /// <remarks>Lists status of workers, running jobs, waiting jobs, status of the backend services and general statistics.  Other ways to obtain the same information as with this endpoint are:   * &#x60;GET /worker/_status&#x60;   * &#x60;GET /status/workerstatus&#x60;   * &#x60;GET /build/_workerstatus&#x60; </remarks>
        /// <response code="200">OK</response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("/worker/status")]
        [ValidateModelState]
        [SwaggerOperation("WorkerStatusGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkerStatusGet200Response), description: "OK")]
        public virtual IActionResult WorkerStatusGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WorkerStatusGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "<workerstatus clients=\"123\">\n</workerstatus>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<WorkerStatusGet200Response>(exampleJson)
            : default(WorkerStatusGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Lists workers which match a constraints filter.
        /// </summary>
        /// <remarks>Given a project, package, repository and architecture, list workers which can build with that restrictions, and also match a constraints filter.  This endpoint doesn&#39;t create or modify any data.  More information about constraints can be found in the [user guide](https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.build_job_constraints.html).  This operation is the same as &#x60;POST /worker/command/run?cmd&#x3D;checkconstraints&#x60;. </remarks>
        /// <param name="project">Project name.</param>
        /// <param name="repository">Repository name.</param>
        /// <param name="arch">Architecture name.</param>
        /// <param name="package">Package name.</param>
        /// <param name="workerCmdCheckconstraintsPostRequest">Constraints XML filter</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.</response>
        [HttpPost]
        [Route("/worker/cmd=checkconstraints")]
        [Consumes("application/xml; charset=utf-8")]
        [ValidateModelState]
        [SwaggerOperation("WorkercmdcheckconstraintsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Bad Request.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.")]
        public virtual IActionResult WorkercmdcheckconstraintsPost([FromQuery (Name = "project")][Required()]string project, [FromQuery (Name = "repository")][Required()]string repository, [FromQuery (Name = "arch")][Required()]string arch, [FromQuery (Name = "package")][Required()]string package, [FromBody]WorkerCmdCheckconstraintsPostRequest workerCmdCheckconstraintsPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
