/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IssueTrackersApiController : ControllerBase
    { 
        /// <summary>
        /// Get the list of issue trackers.
        /// </summary>
        /// <remarks>Get the list of issue trackers.</remarks>
        /// <response code="200">List of issue trackers.  XML Schema used for body validation: [issue_trackers.rng](../schema/issue_trackers.rng) </response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("/issue_trackers")]
        [ValidateModelState]
        [SwaggerOperation("IssueTrackersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<IssueTrackersGet200ResponseInner>), description: "List of issue trackers.  XML Schema used for body validation: [issue_trackers.rng](../schema/issue_trackers.rng) ")]
        public virtual IActionResult IssueTrackersGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<IssueTrackersGet200ResponseInner>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "  <issue-tracker>\n    <description>openSUSE Feature Database</description>\n    <enable-fetch>false</enable-fetch>\n    <kind>fate</kind>\n    <label>fate#@@@</label>\n    <name>fate</name>\n    <regex>(?:fate|Fate|FATE)\s*#\s*(\d+)</regex>\n    <show-url>https://features.opensuse.org/@@@</show-url>\n    <url>https://features.opensuse.org/</url>\n  </issue-tracker>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<IssueTrackersGet200ResponseInner>>(exampleJson)
            : default(List<IssueTrackersGet200ResponseInner>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete an issue tracker.
        /// </summary>
        /// <remarks>Delete an issue tracker.</remarks>
        /// <response code="200"></response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpDelete]
        [Route("/issue_trackers/{issue_tracker_name}")]
        [ValidateModelState]
        [SwaggerOperation("IssueTrackersIssueTrackerNameDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult IssueTrackersIssueTrackerNameDelete()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Show an issue tracker.
        /// </summary>
        /// <remarks>Show an issue tracker.</remarks>
        /// <param name="issueTrackerName">Issue tracker name</param>
        /// <response code="200">Issue tracker definition.  XML Schema used for body validation: [issue_tracker.rng](../schema/issue_tracker.rng) </response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/issue_trackers/{issue_tracker_name}")]
        [ValidateModelState]
        [SwaggerOperation("IssueTrackersIssueTrackerNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Issue tracker definition.  XML Schema used for body validation: [issue_tracker.rng](../schema/issue_tracker.rng) ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult IssueTrackersIssueTrackerNameGet([FromRoute (Name = "issue_tracker_name")][Required]string issueTrackerName)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Show an issue of an issue tracker.
        /// </summary>
        /// <remarks>Show an issue of an issue tracker.</remarks>
        /// <param name="issueName">Issue name.</param>
        /// <response code="200">Issue definition.  XML Schema used for body validation: [issue.rng](../schema/issue.rng) </response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/issue_trackers/{issue_tracker_name}/issues/{issue_name}")]
        [ValidateModelState]
        [SwaggerOperation("IssueTrackersIssueTrackerNameIssuesIssueNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(IssueTrackersIssueTrackerNameIssuesIssueNameGet200Response), description: "Issue definition.  XML Schema used for body validation: [issue.rng](../schema/issue.rng) ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult IssueTrackersIssueTrackerNameIssuesIssueNameGet([FromRoute (Name = "issue_name")][Required]string issueName)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IssueTrackersIssueTrackerNameIssuesIssueNameGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<issue>\n  <created_at>2021-01-18 19:17:51 UTC</created_at>\n  <label>fate#12345</label>\n  <name>12345</name>\n  <tracker>fate</tracker>\n  <updated_at>2021-01-18 19:17:51 UTC</updated_at>\n  <url>https://features.opensuse.org/12345</url>\n</issue>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<IssueTrackersIssueTrackerNameIssuesIssueNameGet200Response>(exampleJson)
            : default(IssueTrackersIssueTrackerNameIssuesIssueNameGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update or create an issue tracker.
        /// </summary>
        /// <remarks>Update the issue tracker given as path parameter. If it is not found, create it.</remarks>
        /// <param name="body">Issue tracker definition.  XML Schema used for body validation: [issue_tracker.rng](../schema/issue_tracker.rng) </param>
        /// <response code="200"></response>
        /// <response code="400">Validation failed.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="401"></response>
        [HttpPut]
        [Route("/issue_trackers/{issue_tracker_name}")]
        [Consumes("application/xml; charset=utf-8")]
        [ValidateModelState]
        [SwaggerOperation("IssueTrackersIssueTrackerNamePut")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Validation failed.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult IssueTrackersIssueTrackerNamePut([FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Create an issue tracker.
        /// </summary>
        /// <remarks>Create an issue tracker.</remarks>
        /// <param name="body">Issue tracker definition.  XML Schema used for body validation: [issue_tracker.rng](../schema/issue_tracker.rng) </param>
        /// <response code="200"></response>
        /// <response code="400">Validation failed.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="401"></response>
        [HttpPost]
        [Route("/issue_trackers")]
        [Consumes("application/xml; charset=utf-8")]
        [ValidateModelState]
        [SwaggerOperation("IssueTrackersPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Validation failed.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult IssueTrackersPost([FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }
    }
}
