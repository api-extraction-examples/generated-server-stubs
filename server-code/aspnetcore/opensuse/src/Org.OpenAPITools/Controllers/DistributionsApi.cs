/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DistributionsApiController : ControllerBase
    { 
        /// <summary>
        /// Bulk replace all distributions.
        /// </summary>
        /// <remarks>Bulk replace all distributions.  This is only for admins. </remarks>
        /// <param name="body">Distributions definition</param>
        /// <response code="200">OK. The Request has succeeded.  XML Schema used for body validation: [distributions.rng](../schema/distributions.rng) </response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401"></response>
        [HttpPut]
        [Route("/distributions/bulk_replace")]
        [Consumes("application/xml; charset=utf-8")]
        [ValidateModelState]
        [SwaggerOperation("DistributionsBulkReplacePut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK. The Request has succeeded.  XML Schema used for body validation: [distributions.rng](../schema/distributions.rng) ")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Bad Request.")]
        public virtual IActionResult DistributionsBulkReplacePut([FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a distribution.
        /// </summary>
        /// <remarks>Delete a distribution.  This is only for admins. </remarks>
        /// <response code="200">OK. The request has succeded. </response>
        /// <response code="401"></response>
        /// <response code="404">Not found.</response>
        [HttpDelete]
        [Route("/distributions/{distribution_id}")]
        [ValidateModelState]
        [SwaggerOperation("DistributionsDistributionIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK. The request has succeded. ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not found.")]
        public virtual IActionResult DistributionsDistributionIdDelete()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Show a distribution.
        /// </summary>
        /// <remarks>Show a distribution that can be build against. </remarks>
        /// <param name="distributionId">The id of the distribution</param>
        /// <response code="200">OK. The request has succeded. </response>
        /// <response code="401"></response>
        /// <response code="404">Not found.</response>
        [HttpGet]
        [Route("/distributions/{distribution_id}")]
        [ValidateModelState]
        [SwaggerOperation("DistributionsDistributionIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK. The request has succeded. ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not found.")]
        public virtual IActionResult DistributionsDistributionIdGet([FromRoute (Name = "distribution_id")][Required]int distributionId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update a distribution.
        /// </summary>
        /// <remarks>Update the data of a distribution.</remarks>
        /// <param name="body">Distribution definition</param>
        /// <response code="200">OK. The Request has succeeded.  XML Schema used for body validation: [distribution.rng](../schema/distribution.rng) </response>
        /// <response code="401"></response>
        /// <response code="404">Not found.</response>
        [HttpPut]
        [Route("/distributions/{distribution_id}")]
        [Consumes("application/xml; charset=utf-8")]
        [ValidateModelState]
        [SwaggerOperation("DistributionsDistributionIdPut")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not found.")]
        public virtual IActionResult DistributionsDistributionIdPut([FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// List all distributions.
        /// </summary>
        /// <remarks>List all distributions that can be build against. This will not list distributions that are available via [interconnect](https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.concepts.html#id-1.5.10.3.5). Check /distributions/include_remotes for this. </remarks>
        /// <response code="200">OK. The request has succeeded.  XML Schema used for body validation: [distributions.rng](../schema/distributions.rng) </response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("/distributions")]
        [ValidateModelState]
        [SwaggerOperation("DistributionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(DistributionsGet200Response), description: "OK. The request has succeeded.  XML Schema used for body validation: [distributions.rng](../schema/distributions.rng) ")]
        public virtual IActionResult DistributionsGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DistributionsGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "<distributions>\n</distributions>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DistributionsGet200Response>(exampleJson)
            : default(DistributionsGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List all distributions including remote.
        /// </summary>
        /// <remarks>List all distributions that can be build against, including the ones provided by the interconnect. </remarks>
        /// <response code="200"></response>
        /// <response code="401"></response>
        [HttpGet]
        [Route("/distributions/include_remotes")]
        [ValidateModelState]
        [SwaggerOperation("DistributionsIncludeRemotesGet")]
        public virtual IActionResult DistributionsIncludeRemotesGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Create a distribution.
        /// </summary>
        /// <remarks>Create a distribution.  This is only for admins. </remarks>
        /// <param name="distributionsPostRequest">Distribution definition</param>
        /// <response code="200">OK. The request has succeeded.  XML Schema used for body validation: [distribution.rng](../schema/distribution.rng) </response>
        /// <response code="401"></response>
        [HttpPost]
        [Route("/distributions")]
        [Consumes("application/xml; charset=utf-8")]
        [ValidateModelState]
        [SwaggerOperation("DistributionsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK. The request has succeeded.  XML Schema used for body validation: [distribution.rng](../schema/distribution.rng) ")]
        public virtual IActionResult DistributionsPost([FromBody]DistributionsPostRequest distributionsPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
