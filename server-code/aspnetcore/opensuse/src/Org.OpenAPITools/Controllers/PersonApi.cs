/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * The version of the OpenAPI document: 2.10.50
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PersonApiController : ControllerBase
    { 
        /// <summary>
        /// List all people.
        /// </summary>
        /// <remarks>List all people. </remarks>
        /// <param name="prefix">A prefix to filter the people to look for</param>
        /// <response code="200">OK. The request has succeeded. XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) </response>
        [HttpGet]
        [Route("/person")]
        [ValidateModelState]
        [SwaggerOperation("PersonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK. The request has succeeded. XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) ")]
        public virtual IActionResult PersonGet([FromQuery (Name = "prefix")]string prefix)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get details about a person
        /// </summary>
        /// <param name="login">Person login.</param>
        /// <response code="200">OK. The request has succeeded. XML Schema used for body validation: [user.rng](../schema/user.rng) </response>
        /// <response code="401"></response>
        /// <response code="404">Not found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/person/{login}")]
        [ValidateModelState]
        [SwaggerOperation("PersonLoginGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonLoginGet200Response), description: "OK. The request has succeeded. XML Schema used for body validation: [user.rng](../schema/user.rng) ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult PersonLoginGet([FromRoute (Name = "login")][Required]string login)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonLoginGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "<person>\n  <email>unconfigured@openbuildservice.org</email>\n  <globalrole>aeiou</globalrole>\n  <ignore_auth_services>true</ignore_auth_services>\n  <login>user_1</login>\n  <realname>User1</realname>\n  <state>confirmed</state>\n</person>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonLoginGet200Response>(exampleJson)
            : default(PersonLoginGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List the groups of a person
        /// </summary>
        /// <remarks>List the groups the person belongs to.</remarks>
        /// <response code="200">OK. The request has succeeded. XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) </response>
        /// <response code="401"></response>
        /// <response code="404">Not Found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/person/{login}/group")]
        [ValidateModelState]
        [SwaggerOperation("PersonLoginGroupGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK. The request has succeeded. XML Schema used for body validation: [directory.xsd](../schema/directory.xsd) ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult PersonLoginGroupGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Perform changes on a registered person
        /// </summary>
        /// <param name="cmd">The command to execute against the provided person.</param>
        /// <param name="body">The password in plain text when the cmd param is &#39;change_password&#39;.</param>
        /// <response code="200">OK. The request has succeeded. XML Schema used for body validation: [api_response.xsd](../schema/api_response.xsd) </response>
        /// <response code="400">Bad request. XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="401"></response>
        /// <response code="403">Forbidden.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="404"></response>
        [HttpPost]
        [Route("/person/{login}")]
        [Consumes("text/plain")]
        [ValidateModelState]
        [SwaggerOperation("PersonLoginPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK. The request has succeeded. XML Schema used for body validation: [api_response.xsd](../schema/api_response.xsd) ")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Bad request. XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        [SwaggerResponse(statusCode: 403, type: typeof(Object), description: "Forbidden.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult PersonLoginPost([FromQuery (Name = "cmd")][Required()]string cmd, [FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Object));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update person
        /// </summary>
        /// <param name="body">The new data for the person referred in the login parameter.</param>
        /// <response code="200"></response>
        /// <response code="400">Bad request.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="401"></response>
        /// <response code="403">Unauthorized.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="404">Not found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpPut]
        [Route("/person/{login}")]
        [Consumes("application/xml")]
        [ValidateModelState]
        [SwaggerOperation("PersonLoginPut")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Bad request.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        [SwaggerResponse(statusCode: 403, type: typeof(Object), description: "Unauthorized.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult PersonLoginPut([FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Object));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// List the authentication tokens of a person.
        /// </summary>
        /// <remarks>List the authentication tokens of a person.</remarks>
        /// <response code="200">OK. The request has succeeded.  XML Schema used for body validation: [tokenlist.rng](../schema/tokenlist.rng) </response>
        /// <response code="401"></response>
        /// <response code="403">Forbidden.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpGet]
        [Route("/person/{login}/token")]
        [ValidateModelState]
        [SwaggerOperation("PersonLoginTokenGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonLoginTokenGet200Response), description: "OK. The request has succeeded.  XML Schema used for body validation: [tokenlist.rng](../schema/tokenlist.rng) ")]
        [SwaggerResponse(statusCode: 403, type: typeof(Object), description: "Forbidden.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult PersonLoginTokenGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonLoginTokenGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Object));
            string exampleJson = null;
            exampleJson = "<directory count=\"123\">\n</directory>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonLoginTokenGet200Response>(exampleJson)
            : default(PersonLoginTokenGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a token of a person.
        /// </summary>
        /// <remarks>Delete a token of the specified person.</remarks>
        /// <param name="id">Id of the token to be removed.</param>
        /// <response code="200">OK. The request has succeeded.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="401"></response>
        /// <response code="403">Forbidden.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        /// <response code="404">Not Found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpDelete]
        [Route("/person/{login}/token/{id}")]
        [ValidateModelState]
        [SwaggerOperation("PersonLoginTokenIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK. The request has succeeded.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        [SwaggerResponse(statusCode: 403, type: typeof(Object), description: "Forbidden.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        [SwaggerResponse(statusCode: 404, type: typeof(Object), description: "Not Found.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult PersonLoginTokenIdDelete([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Object));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a new authentication token for a person.
        /// </summary>
        /// <remarks>Create a new authentication token for a person.  The token may be limited to a specific package. In this case the query parameters &#x60;project&#x60; and &#x60;package&#x60; should be provided.  With an empty request body, a token of the default kind &#39;runservice&#39; is created. </remarks>
        /// <param name="project">Project name. Should be provided, together with the package query parameter, to limit the token to a specific package. </param>
        /// <param name="package">Package name. Should be provided, together with the project query parameter, to limit the token to a specific package. </param>
        /// <param name="operation">Operation indicates the kind of token that is going to be created.  When operation is not specified, &#39;runservice&#39; is the default value. </param>
        /// <param name="scmToken">**(Beta/Unstable)**  SCM token used in OBS workflows to report back the workflow status, when the operation is workflow.  It&#39;s normally possible to generate SCM tokens directly on the SCM&#39;s website like GitHub or GitLab. </param>
        /// <response code="200">OK. The request has succeeded.  XML Schema used for body validation: [status.xsd](../schema/status.xsd)  **NOTE:** This is an example of a valid response. It should include the attribute &#39;name&#39; in every &#39;data&#39; tag, which is missing in the example using the schema. &#x60;&#x60;&#x60;   &lt;status code&#x3D;\&quot;ok\&quot;&gt;     &lt;summary&gt;Ok&lt;/summary&gt;     &lt;data name&#x3D;\&quot;token\&quot;&gt;i6iF4M5cn&lt;/data&gt;     &lt;data name&#x3D;\&quot;id\&quot;&gt;5&lt;/data&gt;   &lt;/status&gt; &#x60;&#x60;&#x60; </response>
        /// <response code="401"></response>
        /// <response code="403">Forbidden.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpPost]
        [Route("/person/{login}/token")]
        [ValidateModelState]
        [SwaggerOperation("PersonLoginTokenPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK. The request has succeeded.  XML Schema used for body validation: [status.xsd](../schema/status.xsd)  **NOTE:** This is an example of a valid response. It should include the attribute &#39;name&#39; in every &#39;data&#39; tag, which is missing in the example using the schema. &#x60;&#x60;&#x60;   &lt;status code&#x3D;\&quot;ok\&quot;&gt;     &lt;summary&gt;Ok&lt;/summary&gt;     &lt;data name&#x3D;\&quot;token\&quot;&gt;i6iF4M5cn&lt;/data&gt;     &lt;data name&#x3D;\&quot;id\&quot;&gt;5&lt;/data&gt;   &lt;/status&gt; &#x60;&#x60;&#x60; ")]
        [SwaggerResponse(statusCode: 403, type: typeof(Object), description: "Forbidden.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult PersonLoginTokenPost([FromQuery (Name = "project")]string project, [FromQuery (Name = "package")]string package, [FromQuery (Name = "operation")]string operation, [FromQuery (Name = "scm_token")]string scmToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Object));
            string exampleJson = null;
            exampleJson = "Custom MIME type example not yet supported: application/xml; charset=utf-8";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Executes a command on the person endpoint.
        /// </summary>
        /// <remarks>Allows executing command on the person endpoint.  As of now, the only command allowed is &#39;register&#39;. </remarks>
        /// <param name="cmd">The command to execute</param>
        /// <param name="personPostRequest">The data for the person to register.</param>
        /// <response code="200"></response>
        /// <response code="400">Bad request.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) </response>
        [HttpPost]
        [Route("/person")]
        [Consumes("application/xml")]
        [ValidateModelState]
        [SwaggerOperation("PersonPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(Object), description: "Bad request.  XML Schema used for body validation: [status.xsd](../schema/status.xsd) ")]
        public virtual IActionResult PersonPost([FromQuery (Name = "cmd")][Required()]string cmd, [FromBody]PersonPostRequest personPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Object));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Registers a new person
        /// </summary>
        /// <param name="body">Data for the person to register.</param>
        /// <response code="200"></response>
        /// <response code="401"></response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/person/register")]
        [Consumes("application/xml")]
        [ValidateModelState]
        [SwaggerOperation("PersonRegisterPost")]
        [SwaggerResponse(statusCode: 403, type: typeof(Object), description: "Forbidden")]
        public virtual IActionResult PersonRegisterPost([FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Object));

            throw new NotImplementedException();
        }
    }
}
