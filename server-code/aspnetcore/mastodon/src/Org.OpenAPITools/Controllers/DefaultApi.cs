/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>OEmbed as JSON</remarks>
        /// <param name="url">URL of a status</param>
        /// <param name="maxwidth">width of the iframe. Defaults to 400</param>
        /// <param name="maxheight">height of the iframe. Defaults to null</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/oembed")]
        [ValidateModelState]
        [SwaggerOperation("ApiOembedGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Card), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        public virtual IActionResult ApiOembedGet([FromQuery (Name = "url")]string url, [FromQuery (Name = "maxwidth")]int? maxwidth, [FromQuery (Name = "maxheight")]int? maxheight)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Card));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"author_name\" : \"author_name\",\n  \"image\" : \"image\",\n  \"blurhash\" : \"blurhash\",\n  \"description\" : \"description\",\n  \"provider_url\" : \"provider_url\",\n  \"title\" : \"title\",\n  \"type\" : \"link\",\n  \"url\" : \"url\",\n  \"author_url\" : \"author_url\",\n  \"width\" : 6,\n  \"html\" : \"html\",\n  \"provider_name\" : \"provider_name\",\n  \"height\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Card>(exampleJson)
            : default(Card);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View identity proof</remarks>
        /// <param name="provider">The identity provider to be looked up. Currently only supports keybase (case-sensitive)</param>
        /// <param name="username">The username on the selected identity provider</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/proofs")]
        [ValidateModelState]
        [SwaggerOperation("ApiProofsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(IdentityProof), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        public virtual IActionResult ApiProofsGet([FromQuery (Name = "provider")]string provider, [FromQuery (Name = "username")]string username)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IdentityProof));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_at\" : \"updated_at\",\n  \"profile_url\" : \"profile_url\",\n  \"provider\" : \"provider\",\n  \"provider_username\" : \"provider_username\",\n  \"proof_url\" : \"proof_url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<IdentityProof>(exampleJson)
            : default(IdentityProof);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View accounts matching certain criteria for filtering, up to 100 at a time. Pagination may be done with the HTTP Link header in the response.</remarks>
        /// <param name="local">Filter for local accounts?</param>
        /// <param name="remote">Filter for remote accounts?</param>
        /// <param name="byDomain">Filter by the given domain</param>
        /// <param name="active">Filter for currently active accounts?</param>
        /// <param name="pending">Filter for currently pending accounts?</param>
        /// <param name="disabled">Filter for currently disabled accounts?</param>
        /// <param name="silenced">Filter for currently silenced accounts?</param>
        /// <param name="suspended">Filter for currently suspended accounts?</param>
        /// <param name="staff">Filter for staff accounts?</param>
        /// <param name="username">Username to search for</param>
        /// <param name="displayName">Display name to search for</param>
        /// <param name="email">Lookup a user with this email</param>
        /// <param name="ip">Lookup a user with this IP</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/v1/admin/accounts")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminAccountsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AdminAccount>), description: "Success")]
        public virtual IActionResult ApiV1AdminAccountsGet([FromQuery (Name = "local")]bool? local, [FromQuery (Name = "remote")]bool? remote, [FromQuery (Name = "by_domain")]string byDomain, [FromQuery (Name = "active")]bool? active, [FromQuery (Name = "pending")]bool? pending, [FromQuery (Name = "disabled")]bool? disabled, [FromQuery (Name = "silenced")]bool? silenced, [FromQuery (Name = "suspended")]bool? suspended, [FromQuery (Name = "staff")]bool? staff, [FromQuery (Name = "username")]string username, [FromQuery (Name = "display_name")]string displayName, [FromQuery (Name = "email")]string email, [FromQuery (Name = "ip")]string ip)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AdminAccount>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"invite_request\" : \"invite_request\",\n  \"silenced\" : true,\n  \"role\" : \"role\",\n  \"ip\" : \"ip\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"locale\" : \"locale\",\n  \"confirmed\" : true,\n  \"suspended\" : true,\n  \"approved\" : true,\n  \"created_by_application_id\" : \"created_by_application_id\",\n  \"disabled\" : true,\n  \"id\" : \"id\",\n  \"invited_by_account_id\" : \"invited_by_account_id\",\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"email\" : \"email\",\n  \"username\" : \"username\"\n}, {\n  \"invite_request\" : \"invite_request\",\n  \"silenced\" : true,\n  \"role\" : \"role\",\n  \"ip\" : \"ip\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"locale\" : \"locale\",\n  \"confirmed\" : true,\n  \"suspended\" : true,\n  \"approved\" : true,\n  \"created_by_application_id\" : \"created_by_application_id\",\n  \"disabled\" : true,\n  \"id\" : \"id\",\n  \"invited_by_account_id\" : \"invited_by_account_id\",\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"email\" : \"email\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<AdminAccount>>(exampleJson)
            : default(List<AdminAccount>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Perform an action against an account and log this action in the moderation history.</remarks>
        /// <param name="id">ID of the account</param>
        /// <param name="apiV1AdminAccountsIdActionPostRequest"></param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/admin/accounts/{id}/action")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminAccountsIdActionPost")]
        public virtual IActionResult ApiV1AdminAccountsIdActionPost([FromRoute (Name = "id")][Required]string id, [FromBody]ApiV1AdminAccountsIdActionPostRequest apiV1AdminAccountsIdActionPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Approve the given local account if it is currently pending approval.</remarks>
        /// <param name="id">ID of the account</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/admin/accounts/{id}/approve")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminAccountsIdApprovePost")]
        public virtual IActionResult ApiV1AdminAccountsIdApprovePost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Re-enable a local account whose login is currently disabled.</remarks>
        /// <param name="id">ID of the account</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/admin/accounts/{id}/enable")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminAccountsIdEnablePost")]
        public virtual IActionResult ApiV1AdminAccountsIdEnablePost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View admin-level information about the given account.</remarks>
        /// <param name="id">ID of the account</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/v1/admin/accounts/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminAccountsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(AdminAccount), description: "Success")]
        public virtual IActionResult ApiV1AdminAccountsIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AdminAccount));
            string exampleJson = null;
            exampleJson = "{\n  \"invite_request\" : \"invite_request\",\n  \"silenced\" : true,\n  \"role\" : \"role\",\n  \"ip\" : \"ip\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"locale\" : \"locale\",\n  \"confirmed\" : true,\n  \"suspended\" : true,\n  \"approved\" : true,\n  \"created_by_application_id\" : \"created_by_application_id\",\n  \"disabled\" : true,\n  \"id\" : \"id\",\n  \"invited_by_account_id\" : \"invited_by_account_id\",\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"email\" : \"email\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdminAccount>(exampleJson)
            : default(AdminAccount);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Reject the given local account if it is currently pending approval.</remarks>
        /// <param name="id">ID of the account</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/admin/accounts/{id}/reject")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminAccountsIdRejectPost")]
        public virtual IActionResult ApiV1AdminAccountsIdRejectPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Unsilence a currently silenced account.</remarks>
        /// <param name="id">ID of the account</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/admin/accounts/{id}/unsilence")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminAccountsIdUnsilencePost")]
        public virtual IActionResult ApiV1AdminAccountsIdUnsilencePost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Unsuspend a currently suspended account.</remarks>
        /// <param name="id">ID of the account</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/admin/accounts/{id}/unsuspend")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminAccountsIdUnsuspendPost")]
        public virtual IActionResult ApiV1AdminAccountsIdUnsuspendPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View all reports. Pagination may be done with HTTP Link header in the response.</remarks>
        /// <param name="resolved"></param>
        /// <param name="accountId"></param>
        /// <param name="targetAccountId"></param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/v1/admin/reports")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminReportsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AdminReport>), description: "Success")]
        public virtual IActionResult ApiV1AdminReportsGet([FromQuery (Name = "resolved")]bool? resolved, [FromQuery (Name = "account_id")]string accountId, [FromQuery (Name = "target_account_id")]string targetAccountId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AdminReport>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"assigned_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"action_taken\" : \"action_taken\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses\" : [ {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }, {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  } ],\n  \"comment\" : \"comment\",\n  \"id\" : \"id\",\n  \"target_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }\n}, {\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"assigned_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"action_taken\" : \"action_taken\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses\" : [ {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }, {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  } ],\n  \"comment\" : \"comment\",\n  \"id\" : \"id\",\n  \"target_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<AdminReport>>(exampleJson)
            : default(List<AdminReport>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Claim the handling of this report to yourself.</remarks>
        /// <param name="id">ID of the report</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/admin/reports/{id}/assign_to_self")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminReportsIdAssignToSelfPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(AdminReport), description: "Success")]
        public virtual IActionResult ApiV1AdminReportsIdAssignToSelfPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AdminReport));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"assigned_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"action_taken\" : \"action_taken\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses\" : [ {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }, {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  } ],\n  \"comment\" : \"comment\",\n  \"id\" : \"id\",\n  \"target_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdminReport>(exampleJson)
            : default(AdminReport);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View information about the report with the given ID.</remarks>
        /// <param name="id">ID of the report</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/v1/admin/reports/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminReportsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(AdminReport), description: "Success")]
        public virtual IActionResult ApiV1AdminReportsIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AdminReport));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"assigned_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"action_taken\" : \"action_taken\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses\" : [ {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }, {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  } ],\n  \"comment\" : \"comment\",\n  \"id\" : \"id\",\n  \"target_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdminReport>(exampleJson)
            : default(AdminReport);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Mark a report as resolved with no further action taken.</remarks>
        /// <param name="id">ID of the report</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/admin/reports/{id}/reopen")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminReportsIdReopenPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(AdminReport), description: "Success")]
        public virtual IActionResult ApiV1AdminReportsIdReopenPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AdminReport));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"assigned_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"action_taken\" : \"action_taken\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses\" : [ {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }, {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  } ],\n  \"comment\" : \"comment\",\n  \"id\" : \"id\",\n  \"target_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdminReport>(exampleJson)
            : default(AdminReport);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Mark a report as resolved with no further action taken.</remarks>
        /// <param name="id">ID of the report</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/admin/reports/{id}/resolve")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminReportsIdResolvePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(AdminReport), description: "Success")]
        public virtual IActionResult ApiV1AdminReportsIdResolvePost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AdminReport));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"assigned_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"action_taken\" : \"action_taken\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses\" : [ {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }, {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  } ],\n  \"comment\" : \"comment\",\n  \"id\" : \"id\",\n  \"target_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdminReport>(exampleJson)
            : default(AdminReport);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Unassign a report so that someone else can claim it.</remarks>
        /// <param name="id">ID of the report</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/admin/reports/{id}/unassign")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AdminReportsIdUnassignPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(AdminReport), description: "Success")]
        public virtual IActionResult ApiV1AdminReportsIdUnassignPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AdminReport));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"assigned_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"action_taken\" : \"action_taken\",\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses\" : [ {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }, {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  } ],\n  \"comment\" : \"comment\",\n  \"id\" : \"id\",\n  \"target_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AdminReport>(exampleJson)
            : default(AdminReport);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>See all currently active announcements set by admins.</remarks>
        /// <param name="withDismissed">If true, response will include announcements dismissed by the user. Defaults to false.</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/v1/announcements")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AnnouncementsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Announcement>), description: "Success")]
        public virtual IActionResult ApiV1AnnouncementsGet([FromQuery (Name = "with_dismissed")]bool? withDismissed)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Announcement>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"starts_at\" : \"starts_at\",\n  \"read\" : true,\n  \"updated_at\" : \"updated_at\",\n  \"all_day\" : true,\n  \"created_at\" : \"created_at\",\n  \"scheduled_at\" : \"scheduled_at\",\n  \"ends_at\" : \"ends_at\",\n  \"id\" : \"id\",\n  \"published\" : true,\n  \"text\" : \"text\"\n}, {\n  \"starts_at\" : \"starts_at\",\n  \"read\" : true,\n  \"updated_at\" : \"updated_at\",\n  \"all_day\" : true,\n  \"created_at\" : \"created_at\",\n  \"scheduled_at\" : \"scheduled_at\",\n  \"ends_at\" : \"ends_at\",\n  \"id\" : \"id\",\n  \"published\" : true,\n  \"text\" : \"text\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Announcement>>(exampleJson)
            : default(List<Announcement>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Allows a user to mark the announcement as read.</remarks>
        /// <param name="id">Local ID of an announcement in the database.</param>
        /// <response code="200">Success</response>
        [HttpPost]
        [Route("/api/v1/announcements/{id}/dismiss")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AnnouncementsIdDismissPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Success")]
        public virtual IActionResult ApiV1AnnouncementsIdDismissPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Undo a react emoji to an announcement.</remarks>
        /// <param name="id">Local ID of an announcement in the database.</param>
        /// <param name="name">Unicode emoji, or shortcode of custom emoji</param>
        /// <response code="200">Success</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpDelete]
        [Route("/api/v1/announcements/{id}/reactions/{name}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AnnouncementsIdReactionsNameDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Success")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Unprocessable Entity")]
        public virtual IActionResult ApiV1AnnouncementsIdReactionsNameDelete([FromRoute (Name = "id")][Required]string id, [FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Allows a user to mark the announcement as read.</remarks>
        /// <param name="id">Local ID of an announcement in the database.</param>
        /// <param name="name">Unicode emoji, or shortcode of custom emoji</param>
        /// <response code="200">Success</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpPut]
        [Route("/api/v1/announcements/{id}/reactions/{name}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AnnouncementsIdReactionsNamePut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Success")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Unprocessable Entity")]
        public virtual IActionResult ApiV1AnnouncementsIdReactionsNamePut([FromRoute (Name = "id")][Required]string id, [FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get blocked users.</remarks>
        /// <param name="limit"></param>
        /// <param name="maxId"></param>
        /// <param name="sinceId"></param>
        /// <response code="200">success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/blocks")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1BlocksGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Account>), description: "success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1BlocksGet([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Account>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}, {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Account>>(exampleJson)
            : default(List<Account>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Statuses the user has bookmarked.</remarks>
        /// <param name="limit"></param>
        /// <param name="maxId"></param>
        /// <param name="sinceId"></param>
        /// <param name="minId"></param>
        /// <response code="200">success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/bookmarks")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1BookmarksGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Status>), description: "success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1BookmarksGet([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId, [FromQuery (Name = "min_id")]string minId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Status>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}, {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Status>>(exampleJson)
            : default(List<Status>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Show conversation.</remarks>
        /// <param name="limit">Max number of results to return. Defaults to 20.</param>
        /// <param name="maxId">Return results older than ID</param>
        /// <param name="sinceId">Return results newer than ID</param>
        /// <param name="minId">Return results immediately newer than ID</param>
        /// <response code="200">Success.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/conversations")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ConversationsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Conversation>), description: "Success.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1ConversationsGet([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId, [FromQuery (Name = "min_id")]string minId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Conversation>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"unread\" : true,\n  \"last_status\" : {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  },\n  \"accounts\" : [ {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }, {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  } ],\n  \"id\" : \"id\"\n}, {\n  \"unread\" : true,\n  \"last_status\" : {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  },\n  \"accounts\" : [ {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }, {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  } ],\n  \"id\" : \"id\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Conversation>>(exampleJson)
            : default(List<Conversation>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Remove converstation</remarks>
        /// <param name="id">ID of the conversation in the database</param>
        /// <response code="200">Success.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("/api/v1/conversations/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ConversationsIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Success.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        public virtual IActionResult ApiV1ConversationsIdDelete([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Remove converstation</remarks>
        /// <param name="id">ID of the conversation in the database</param>
        /// <response code="200">The value of unread has been changed to false..</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/api/v1/conversations/{id}/read")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ConversationsIdReadPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Conversation), description: "The value of unread has been changed to false..")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        public virtual IActionResult ApiV1ConversationsIdReadPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Conversation));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"unread\" : true,\n  \"last_status\" : {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  },\n  \"accounts\" : [ {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }, {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  } ],\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Conversation>(exampleJson)
            : default(Conversation);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns custom emojis that are available on the server.</remarks>
        /// <response code="200">List of Emojis</response>
        [HttpGet]
        [Route("/api/v1/custom_emojis")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1CustomEmojisGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Emoji>), description: "List of Emojis")]
        public virtual IActionResult ApiV1CustomEmojisGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Emoji>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"category\" : \"category\",\n  \"shortcode\" : \"shortcode\",\n  \"visible_in_picker\" : true,\n  \"url\" : \"url\",\n  \"static_url\" : \"static_url\"\n}, {\n  \"category\" : \"category\",\n  \"shortcode\" : \"shortcode\",\n  \"visible_in_picker\" : true,\n  \"url\" : \"url\",\n  \"static_url\" : \"static_url\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Emoji>>(exampleJson)
            : default(List<Emoji>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>List accounts visible in the directory.</remarks>
        /// <param name="limit">How many accounts to load. Default 40.</param>
        /// <param name="offset">How many accounts to skip before returning results. Default 0.</param>
        /// <param name="order">the &#x60;active&#x60; to sort by most recently posted statuses (default) or &#x60;new&#x60; to sort by most recently created profiles.</param>
        /// <param name="local">Only return local accounts.</param>
        /// <response code="200">List of accounts</response>
        [HttpGet]
        [Route("/api/v1/directory")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1DirectoryGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Account>), description: "List of accounts")]
        public virtual IActionResult ApiV1DirectoryGet([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "order")]string order, [FromQuery (Name = "local")]bool? local)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Account>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}, {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Account>>(exampleJson)
            : default(List<Account>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Remove a domain block, if it exists in the user&#39;s array of blocked domains.</remarks>
        /// <param name="domain">Domain to unblock.</param>
        /// <response code="200">success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="422">If &#x60;domain&#x60; is not provided or contains spaces, the request will fail.</response>
        [HttpDelete]
        [Route("/api/v1/domain_blocks")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1DomainBlocksDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "If &#x60;domain&#x60; is not provided or contains spaces, the request will fail.")]
        public virtual IActionResult ApiV1DomainBlocksDelete([FromQuery (Name = "domain")][Required()]string domain)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View domains the user has blocked.</remarks>
        /// <param name="limit"></param>
        /// <param name="maxId"></param>
        /// <param name="sinceId"></param>
        /// <response code="200">success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/domain_blocks")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1DomainBlocksGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1DomainBlocksGet([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
            : default(List<string>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>\&quot;Block a domain to: - hide all public posts from it - hide all notifications from it - remove all followers from it - prevent following new users from it (but does not remove existing follows)\&quot; </remarks>
        /// <param name="apiV1DomainBlocksPostRequest"></param>
        /// <response code="200">success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="422">If &#x60;domain&#x60; is not provided or contains spaces, the request will fail.</response>
        [HttpPost]
        [Route("/api/v1/domain_blocks")]
        [Authorize]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1DomainBlocksPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "If &#x60;domain&#x60; is not provided or contains spaces, the request will fail.")]
        public virtual IActionResult ApiV1DomainBlocksPost([FromBody]ApiV1DomainBlocksPostRequest apiV1DomainBlocksPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Accounts that the user is currently featuring on their profile.</remarks>
        /// <param name="limit">Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header.</param>
        /// <param name="maxId">Internal parameter. Use HTTP Link header from response for pagination</param>
        /// <param name="sinceId">Internal parameter. Use HTTP Link header from response for pagination.</param>
        /// <response code="200">Success. Because endorsement ids are private, you must parse the HTTP Link header to find next and previous pages.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/endorsements")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1EndorsementsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Account>), description: "Success. Because endorsement ids are private, you must parse the HTTP Link header to find next and previous pages.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1EndorsementsGet([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Account>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}, {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Account>>(exampleJson)
            : default(List<Account>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Statuses the user has favourited.</remarks>
        /// <param name="limit"></param>
        /// <param name="maxId"></param>
        /// <param name="minId"></param>
        /// <response code="200">success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/favourites")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FavouritesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Status>), description: "success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1FavouritesGet([FromQuery (Name = "limit")]string limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "min_id")]string minId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Status>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}, {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Status>>(exampleJson)
            : default(List<Status>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View your featured tags.</remarks>
        /// <response code="200">Success.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/featured_tags")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FeaturedTagsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<FeaturedTag>), description: "Success.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1FeaturedTagsGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FeaturedTag>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 0,\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"url\" : \"url\"\n}, {\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 0,\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"url\" : \"url\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<FeaturedTag>>(exampleJson)
            : default(List<FeaturedTag>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Unfeature a tag</remarks>
        /// <param name="id">The id of the FeaturedTag to be unfeatured.</param>
        /// <response code="200">An empty object will be returned if the featured tag was successfully deleted.</response>
        /// <response code="404">If the ID does not exist or is not owned by you</response>
        [HttpDelete]
        [Route("/api/v1/featured_tags/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FeaturedTagsIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "An empty object will be returned if the featured tag was successfully deleted.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "If the ID does not exist or is not owned by you")]
        public virtual IActionResult ApiV1FeaturedTagsIdDelete([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a feature a tag.</remarks>
        /// <param name="apiV1FeaturedTagsPostRequest"></param>
        /// <response code="200">Success.</response>
        /// <response code="422">If name is not a valid hashtag, e.g. contains illegal characters or only numbers</response>
        [HttpPost]
        [Route("/api/v1/featured_tags")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FeaturedTagsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(FeaturedTag), description: "Success.")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "If name is not a valid hashtag, e.g. contains illegal characters or only numbers")]
        public virtual IActionResult ApiV1FeaturedTagsPost([FromBody]ApiV1FeaturedTagsPostRequest apiV1FeaturedTagsPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FeaturedTag));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 0,\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"url\" : \"url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FeaturedTag>(exampleJson)
            : default(FeaturedTag);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Shows your 10 most-used tags, with usage history for the past week.</remarks>
        /// <response code="200">Success.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/featured_tags/suggestions")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FeaturedTagsSuggestionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<FeaturedTag>), description: "Success.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1FeaturedTagsSuggestionsGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FeaturedTag>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 0,\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"url\" : \"url\"\n}, {\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 0,\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"url\" : \"url\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<FeaturedTag>>(exampleJson)
            : default(List<FeaturedTag>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Excerpts of various filters in different contexts.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/filters")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FiltersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Filter>), description: "Excerpts of various filters in different contexts.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1FiltersGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Filter>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"whole_word\" : true,\n  \"expires_at\" : \"expires_at\",\n  \"phrase\" : \"phrase\",\n  \"context\" : [ \"home\", \"home\" ],\n  \"irreversible\" : true,\n  \"id\" : \"id\"\n}, {\n  \"whole_word\" : true,\n  \"expires_at\" : \"expires_at\",\n  \"phrase\" : \"phrase\",\n  \"context\" : [ \"home\", \"home\" ],\n  \"irreversible\" : true,\n  \"id\" : \"id\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Filter>>(exampleJson)
            : default(List<Filter>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a filter.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">The filter has been deleted successfully, so an empty object will be returned.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Filter ID does not exist, or is not owned by you</response>
        [HttpDelete]
        [Route("/api/v1/filters/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FiltersIdDelete")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Filter ID does not exist, or is not owned by you")]
        public virtual IActionResult ApiV1FiltersIdDelete([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get one filter.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Filter returned successfully.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Filter ID does not exist, or is not owned by you</response>
        [HttpGet]
        [Route("/api/v1/filters/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FiltersIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Filter), description: "Filter returned successfully.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Filter ID does not exist, or is not owned by you")]
        public virtual IActionResult ApiV1FiltersIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Filter));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"whole_word\" : true,\n  \"expires_at\" : \"expires_at\",\n  \"phrase\" : \"phrase\",\n  \"context\" : [ \"home\", \"home\" ],\n  \"irreversible\" : true,\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Filter>(exampleJson)
            : default(Filter);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a filter.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <param name="apiV1FiltersPostRequest"></param>
        /// <response code="200">Filter updated successfully.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Filter ID does not exist, or is not owned by you</response>
        /// <response code="422">If phrase or context are not provided properly</response>
        [HttpPut]
        [Route("/api/v1/filters/{id}")]
        [Authorize]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FiltersIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Filter), description: "Filter updated successfully.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Filter ID does not exist, or is not owned by you")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "If phrase or context are not provided properly")]
        public virtual IActionResult ApiV1FiltersIdPut([FromRoute (Name = "id")][Required]string id, [FromBody]ApiV1FiltersPostRequest apiV1FiltersPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Filter));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"whole_word\" : true,\n  \"expires_at\" : \"expires_at\",\n  \"phrase\" : \"phrase\",\n  \"context\" : [ \"home\", \"home\" ],\n  \"irreversible\" : true,\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Filter>(exampleJson)
            : default(Filter);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="apiV1FiltersPostRequest"></param>
        /// <response code="200">The newly-created filter will be returned.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="422">If phrase or context are not provided properly</response>
        [HttpPost]
        [Route("/api/v1/filters")]
        [Authorize]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FiltersPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Filter), description: "The newly-created filter will be returned.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "If phrase or context are not provided properly")]
        public virtual IActionResult ApiV1FiltersPost([FromBody]ApiV1FiltersPostRequest apiV1FiltersPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Filter));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"whole_word\" : true,\n  \"expires_at\" : \"expires_at\",\n  \"phrase\" : \"phrase\",\n  \"context\" : [ \"home\", \"home\" ],\n  \"irreversible\" : true,\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Filter>(exampleJson)
            : default(Filter);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Pending Follows</remarks>
        /// <param name="limit">Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header.</param>
        /// <response code="200">Accounts that are requesting a follow.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/follow_requests")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FollowRequestsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Account>), description: "Accounts that are requesting a follow.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1FollowRequestsGet([FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Account>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}, {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Account>>(exampleJson)
            : default(List<Account>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Accept Follow</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Your Relationship with this account should be updated so that you are followed_by this account.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">No pending follow request from that user ID</response>
        [HttpPost]
        [Route("/api/v1/follow_requests/{id}/authorize")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FollowRequestsIdAuthorizePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Your Relationship with this account should be updated so that you are followed_by this account.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "No pending follow request from that user ID")]
        public virtual IActionResult ApiV1FollowRequestsIdAuthorizePost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Accept Follow</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Your Relationship with this Account should be unchanged.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">No pending follow request from that user ID</response>
        [HttpPost]
        [Route("/api/v1/follow_requests/{id}/reject")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1FollowRequestsIdRejectPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Your Relationship with this Account should be unchanged.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "No pending follow request from that user ID")]
        public virtual IActionResult ApiV1FollowRequestsIdRejectPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Instance activity over the last 3 months, binned weekly.</remarks>
        /// <response code="200">Domains that this instance is aware of.</response>
        [HttpGet]
        [Route("/api/v1/instance/activity")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1InstanceActivityGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Activity>), description: "Domains that this instance is aware of.")]
        public virtual IActionResult ApiV1InstanceActivityGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Activity>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"registrations\" : \"registrations\",\n  \"week\" : \"week\",\n  \"statuses\" : \"statuses\",\n  \"logins\" : \"logins\"\n}, {\n  \"registrations\" : \"registrations\",\n  \"week\" : \"week\",\n  \"statuses\" : \"statuses\",\n  \"logins\" : \"logins\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Activity>>(exampleJson)
            : default(List<Activity>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Information about the server.</remarks>
        /// <response code="200">Result</response>
        [HttpGet]
        [Route("/api/v1/instance")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1InstanceGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Instance), description: "Result")]
        public virtual IActionResult ApiV1InstanceGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Instance));
            string exampleJson = null;
            exampleJson = "{\n  \"short_description\" : \"short_description\",\n  \"thumbnail\" : \"thumbnail\",\n  \"registrations\" : true,\n  \"languages\" : [ \"languages\", \"languages\" ],\n  \"approval_required\" : true,\n  \"invites_enabled\" : true,\n  \"description\" : \"description\",\n  \"contact_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"title\" : \"title\",\n  \"uri\" : \"uri\",\n  \"version\" : \"version\",\n  \"urls\" : \"{}\",\n  \"stats\" : \"{}\",\n  \"email\" : \"email\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Instance>(exampleJson)
            : default(Instance);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Information about the server.</remarks>
        /// <response code="200">Domains that this instance is aware of.</response>
        [HttpGet]
        [Route("/api/v1/instance/peers")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1InstancePeersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Domains that this instance is aware of.")]
        public virtual IActionResult ApiV1InstancePeersGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
            : default(List<string>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a list</remarks>
        /// <response code="200">A list was deleted successfully</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/api/v1/lists")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ListsDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "A list was deleted successfully")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not found")]
        public virtual IActionResult ApiV1ListsDelete()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Fetch all lists that the user owns.</remarks>
        /// <response code="200">Use id as a parameter for related API calls.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/lists")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ListsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<List>), description: "Use id as a parameter for related API calls.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1ListsGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<List>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"replies_policy\" : \"followed\",\n  \"id\" : \"id\",\n  \"title\" : \"title\"\n}, {\n  \"replies_policy\" : \"followed\",\n  \"id\" : \"id\",\n  \"title\" : \"title\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<List>>(exampleJson)
            : default(List<List>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Remove accounts from the given list.</remarks>
        /// <param name="id">ID of the list in the database</param>
        /// <param name="accountIds">Array of account IDs to add to the list.</param>
        /// <response code="200">Account was successfully removed from the list, or it was already not in the list.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpDelete]
        [Route("/api/v1/lists/{id}/accounts")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ListsIdAccountsDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Account was successfully removed from the list, or it was already not in the list.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Unprocessable Entity")]
        public virtual IActionResult ApiV1ListsIdAccountsDelete([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "account_ids")][Required()]List<string> accountIds)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View accounts in List</remarks>
        /// <param name="id">ID of the list in the database</param>
        /// <param name="limit">Maximum number of results. Defaults to 40. Max 40. Set to 0 in order to get all accounts without pagination. Pagination is done with the HTTP Link header.</param>
        /// <param name="maxId">Return results older than ID</param>
        /// <param name="sinceId">Return results newer than ID</param>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/v1/lists/{id}/accounts")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ListsIdAccountsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Account>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        public virtual IActionResult ApiV1ListsIdAccountsGet([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Account>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}, {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Account>>(exampleJson)
            : default(List<Account>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add accounts to the given list. Note that the user must be following these accounts.</remarks>
        /// <param name="id">ID of the list in the database</param>
        /// <param name="apiV1ListsIdAccountsPostRequest"></param>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpPost]
        [Route("/api/v1/lists/{id}/accounts")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ListsIdAccountsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Unprocessable Entity")]
        public virtual IActionResult ApiV1ListsIdAccountsPost([FromRoute (Name = "id")][Required]string id, [FromBody]ApiV1ListsIdAccountsPostRequest apiV1ListsIdAccountsPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Remove converstation</remarks>
        /// <param name="id">ID of the list in the database</param>
        /// <response code="200">The value of unread has been changed to false..</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/v1/lists/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ListsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List), description: "The value of unread has been changed to false..")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        public virtual IActionResult ApiV1ListsIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"replies_policy\" : \"followed\",\n  \"id\" : \"id\",\n  \"title\" : \"title\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List>(exampleJson)
            : default(List);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a new list.</remarks>
        /// <param name="apiV1ListsPostRequest"></param>
        /// <response code="200">A list was created successfully</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/lists")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ListsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List), description: "A list was created successfully")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1ListsPost([FromBody]ApiV1ListsPostRequest apiV1ListsPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"replies_policy\" : \"followed\",\n  \"id\" : \"id\",\n  \"title\" : \"title\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List>(exampleJson)
            : default(List);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Change the title of a list, or which replies to show.</remarks>
        /// <param name="apiV1ListsPutRequest"></param>
        /// <response code="200">A list was updated successfully</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpPut]
        [Route("/api/v1/lists")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ListsPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(List), description: "A list was updated successfully")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Unprocessable Entity")]
        public virtual IActionResult ApiV1ListsPut([FromBody]ApiV1ListsPutRequest apiV1ListsPutRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"replies_policy\" : \"followed\",\n  \"id\" : \"id\",\n  \"title\" : \"title\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List>(exampleJson)
            : default(List);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get saved timeline position</remarks>
        /// <param name="timeline">Array of markers to fetch. String enum anyOf home, notifications. If not provided, an empty object will be returned.</param>
        /// <response code="200">Account was successfully removed from the list, or it was already not in the list.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/markers")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1MarkersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Account was successfully removed from the list, or it was already not in the list.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1MarkersGet([FromQuery (Name = "timeline")][Required()]List<Object> timeline)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get saved timeline position</remarks>
        /// <param name="body"></param>
        /// <response code="200">Account was successfully removed from the list, or it was already not in the list.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="409">Conflict, If object is stale while being updated, an error will occur.</response>
        [HttpPost]
        [Route("/api/v1/markers")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1MarkersPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Account was successfully removed from the list, or it was already not in the list.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict, If object is stale while being updated, an error will occur.")]
        public virtual IActionResult ApiV1MarkersPost([FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get an attachement.</remarks>
        /// <param name="id">The id of the Attachment entity to be updated.</param>
        /// <response code="200">Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly.</response>
        /// <response code="206">Attachment is not yet ready.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Attachment does not exist, is deleted, or was not created by you</response>
        /// <response code="422">File or file type is unsupported or invalid</response>
        [HttpGet]
        [Route("/api/v1/media/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1MediaIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Attachment), description: "Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly.")]
        [SwaggerResponse(statusCode: 206, type: typeof(Attachment), description: "Attachment is not yet ready.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Attachment does not exist, is deleted, or was not created by you")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "File or file type is unsupported or invalid")]
        public virtual IActionResult ApiV1MediaIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Attachment));
            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206, default(Attachment));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"remote_url\" : \"remote_url\",\n  \"meta\" : \"{}\",\n  \"preview_url\" : \"preview_url\",\n  \"blurhash\" : \"blurhash\",\n  \"description\" : \"description\",\n  \"id\" : \"id\",\n  \"type\" : \"unknown\",\n  \"url\" : \"url\",\n  \"text_url\" : \"text_url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Attachment>(exampleJson)
            : default(Attachment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update an Attachment, before it is attached to a status and posted.</remarks>
        /// <param name="id">The id of the Attachment entity to be updated.</param>
        /// <param name="apiV1MediaPostRequest"></param>
        /// <response code="200">Attachment updated successfully.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Attachment does not exist, is deleted, or was not created by you</response>
        /// <response code="422">File or file type is unsupported or invalid</response>
        [HttpPost]
        [Route("/api/v1/media/{id}")]
        [Authorize]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1MediaIdPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Attachment), description: "Attachment updated successfully.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Attachment does not exist, is deleted, or was not created by you")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "File or file type is unsupported or invalid")]
        public virtual IActionResult ApiV1MediaIdPost([FromRoute (Name = "id")][Required]string id, [FromBody]ApiV1MediaPostRequest apiV1MediaPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Attachment));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"remote_url\" : \"remote_url\",\n  \"meta\" : \"{}\",\n  \"preview_url\" : \"preview_url\",\n  \"blurhash\" : \"blurhash\",\n  \"description\" : \"description\",\n  \"id\" : \"id\",\n  \"type\" : \"unknown\",\n  \"url\" : \"url\",\n  \"text_url\" : \"text_url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Attachment>(exampleJson)
            : default(Attachment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Creates an attachment to be used with a new status.</remarks>
        /// <param name="apiV1MediaPostRequest"></param>
        /// <response code="200">Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="422">File or file type is unsupported or invalid</response>
        [HttpPost]
        [Route("/api/v1/media")]
        [Authorize]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1MediaPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Attachment), description: "Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "File or file type is unsupported or invalid")]
        public virtual IActionResult ApiV1MediaPost([FromBody]ApiV1MediaPostRequest apiV1MediaPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Attachment));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"remote_url\" : \"remote_url\",\n  \"meta\" : \"{}\",\n  \"preview_url\" : \"preview_url\",\n  \"blurhash\" : \"blurhash\",\n  \"description\" : \"description\",\n  \"id\" : \"id\",\n  \"type\" : \"unknown\",\n  \"url\" : \"url\",\n  \"text_url\" : \"text_url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Attachment>(exampleJson)
            : default(Attachment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Accounts the user has muted.</remarks>
        /// <param name="limit"></param>
        /// <param name="maxId"></param>
        /// <param name="sinceId"></param>
        /// <response code="200">success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/mutes")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1MutesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Account>), description: "success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1MutesGet([FromQuery (Name = "limit")]string limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Account>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}, {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Account>>(exampleJson)
            : default(List<Account>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Clear all notifications from the server.</remarks>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/notifications/clear")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1NotificationsClearPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1NotificationsClearPost()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Notifications concerning the user. This API returns Link headers containing links to the next/previous page. However, the links can also be constructed dynamically using query params and id values.</remarks>
        /// <param name="limit">Max number of results to return. Defaults to 20.</param>
        /// <param name="maxId">Return results older than ID</param>
        /// <param name="sinceId">Return results newer than ID</param>
        /// <param name="minId">Return results immediately newer than ID</param>
        /// <param name="excludeTypes">Array of types to exclude (follow, favourite, reblog, mention, poll, follow_request)</param>
        /// <param name="accountId">Return only notifications received from this account</param>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/notifications")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1NotificationsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Notification>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1NotificationsGet([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId, [FromQuery (Name = "min_id")]string minId, [FromQuery (Name = "exclude_types")]List<string> excludeTypes, [FromQuery (Name = "account_id")]string accountId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Notification>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"type\" : \"follow\",\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"status\" : {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }\n}, {\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"type\" : \"follow\",\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"status\" : {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Notification>>(exampleJson)
            : default(List<Notification>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Clear a single notification from the server.</remarks>
        /// <param name="id">ID of the notification in the database.</param>
        /// <response code="200">Notification with given ID successfully dismissed</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/notifications/{id}/dismiss")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1NotificationsIdDismissPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Notification), description: "Notification with given ID successfully dismissed")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1NotificationsIdDismissPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Notification));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"type\" : \"follow\",\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"status\" : {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Notification>(exampleJson)
            : default(Notification);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View information about a notification with a given ID.</remarks>
        /// <param name="id">ID of the notification in the database.</param>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/notifications/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1NotificationsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Notification), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1NotificationsIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Notification));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"type\" : \"follow\",\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"status\" : {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Notification>(exampleJson)
            : default(Notification);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View a poll.</remarks>
        /// <param name="id">ID of the poll in the database.</param>
        /// <response code="200">Get one poll.</response>
        /// <response code="404">Poll does not exist, or poll&#39;s parent status is private</response>
        [HttpGet]
        [Route("/api/v1/polls/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1PollsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Poll), description: "Get one poll.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Poll does not exist, or poll&#39;s parent status is private")]
        public virtual IActionResult ApiV1PollsIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Poll));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"voters_count\" : 1,\n  \"votes_count\" : 5,\n  \"expired\" : true,\n  \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"own_votes\" : [ 6, 6 ],\n  \"multiple\" : true,\n  \"options\" : [ \"\", \"\" ],\n  \"voted\" : true,\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Poll>(exampleJson)
            : default(Poll);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Vote on a poll.</remarks>
        /// <param name="id">ID of the poll in the database.</param>
        /// <param name="apiV1PollsIdPostRequest"></param>
        /// <response code="200">Get one poll.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Poll does not exist, or poll&#39;s parent status is private.</response>
        /// <response code="422">Already voted or poll is expired.</response>
        [HttpPost]
        [Route("/api/v1/polls/{id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1PollsIdPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Poll), description: "Get one poll.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Poll does not exist, or poll&#39;s parent status is private.")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Already voted or poll is expired.")]
        public virtual IActionResult ApiV1PollsIdPost([FromRoute (Name = "id")][Required]string id, [FromBody]ApiV1PollsIdPostRequest apiV1PollsIdPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Poll));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"voters_count\" : 1,\n  \"votes_count\" : 5,\n  \"expired\" : true,\n  \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"own_votes\" : [ 6, 6 ],\n  \"multiple\" : true,\n  \"options\" : [ \"\", \"\" ],\n  \"voted\" : true,\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Poll>(exampleJson)
            : default(Poll);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Shows your 10 most-used tags, with usage history for the past week.</remarks>
        /// <response code="200">Success.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/preferences")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1PreferencesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Preferences), description: "Success.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1PreferencesGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Preferences));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"reading:expand:spoilers\" : true,\n  \"posting:default:language\" : \"posting:default:language\",\n  \"posting:default:sensitive\" : true,\n  \"reading:expand:media\" : \"default\",\n  \"posting:default:visibility\" : \"public\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Preferences>(exampleJson)
            : default(Preferences);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.</remarks>
        /// <response code="200">Updating a PushSubscription to only receive mention alerts</response>
        [HttpDelete]
        [Route("/api/v1/push/subscription")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1PushSubscriptionDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Updating a PushSubscription to only receive mention alerts")]
        public virtual IActionResult ApiV1PushSubscriptionDelete()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View the PushSubscription currently associated with this access token.</remarks>
        /// <response code="200">Get one PushSubscription</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/v1/push/subscription")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1PushSubscriptionGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PushSubscription), description: "Get one PushSubscription")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        public virtual IActionResult ApiV1PushSubscriptionGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PushSubscription));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"alerts\" : \"{}\",\n  \"endpoint\" : \"endpoint\",\n  \"id\" : \"id\",\n  \"server_key\" : \"server_key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PushSubscription>(exampleJson)
            : default(PushSubscription);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add a Web Push API subscription to receive notifications. Each access token can have one push subscription. If you create a new subscription, the old subscription is deleted.</remarks>
        /// <param name="apiV1PushSubscriptionPostRequest"></param>
        /// <response code="200">PushSubscription created</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/push/subscription")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1PushSubscriptionPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(PushSubscription), description: "PushSubscription created")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1PushSubscriptionPost([FromBody]ApiV1PushSubscriptionPostRequest apiV1PushSubscriptionPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PushSubscription));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"alerts\" : \"{}\",\n  \"endpoint\" : \"endpoint\",\n  \"id\" : \"id\",\n  \"server_key\" : \"server_key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PushSubscription>(exampleJson)
            : default(PushSubscription);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.</remarks>
        /// <param name="apiV1PushSubscriptionPutRequest"></param>
        /// <response code="200">Updating a PushSubscription to only receive mention alerts</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/api/v1/push/subscription")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1PushSubscriptionPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(PushSubscription), description: "Updating a PushSubscription to only receive mention alerts")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        public virtual IActionResult ApiV1PushSubscriptionPut([FromBody]ApiV1PushSubscriptionPutRequest apiV1PushSubscriptionPutRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PushSubscription));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"alerts\" : \"{}\",\n  \"endpoint\" : \"endpoint\",\n  \"id\" : \"id\",\n  \"server_key\" : \"server_key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PushSubscription>(exampleJson)
            : default(PushSubscription);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>File a report.</remarks>
        /// <param name="apiV1ReportsPostRequest"></param>
        /// <response code="200">Successfully reported.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/reports")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ReportsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Report), description: "Successfully reported.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1ReportsPost([FromBody]ApiV1ReportsPostRequest apiV1ReportsPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Report));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"rule_ids\" : [ 0, 0 ],\n  \"status_ids\" : [ 6, 6 ],\n  \"action_taken\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"comment\" : \"comment\",\n  \"action_taken_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"category\" : \"other\",\n  \"target_account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"forwarded\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Report>(exampleJson)
            : default(Report);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View scheduled statuses</remarks>
        /// <param name="limit">Max number of results to return. Defaults to 20.</param>
        /// <param name="maxId">Return results older than ID</param>
        /// <param name="sinceId">Return results newer than ID</param>
        /// <param name="minId">Return results immediately newer than ID</param>
        /// <response code="200">Get scheduled statuses.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/scheduled_statuses")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ScheduledStatusesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ScheduledStatus>), description: "Get scheduled statuses.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1ScheduledStatusesGet([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId, [FromQuery (Name = "min_id")]string minId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ScheduledStatus>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"params\" : {\n    \"media_ids\" : [ \"media_ids\", \"media_ids\" ],\n    \"visibility\" : \"visibility\",\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sensitive\" : true,\n    \"text\" : \"text\",\n    \"application_id\" : \"application_id\"\n  }\n}, {\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"params\" : {\n    \"media_ids\" : [ \"media_ids\", \"media_ids\" ],\n    \"visibility\" : \"visibility\",\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sensitive\" : true,\n    \"text\" : \"text\",\n    \"application_id\" : \"application_id\"\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ScheduledStatus>>(exampleJson)
            : default(List<ScheduledStatus>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Cancel a scheduled status</remarks>
        /// <param name="id">ID of the scheduled status in the database.</param>
        /// <response code="200">Success.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("/api/v1/scheduled_statuses/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ScheduledStatusesIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Success.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        public virtual IActionResult ApiV1ScheduledStatusesIdDelete([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View a single scheduled status</remarks>
        /// <param name="id">ID of the scheduled status in the database.</param>
        /// <response code="200">Success.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/api/v1/scheduled_statuses/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ScheduledStatusesIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ScheduledStatus), description: "Success.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        public virtual IActionResult ApiV1ScheduledStatusesIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ScheduledStatus));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"params\" : {\n    \"media_ids\" : [ \"media_ids\", \"media_ids\" ],\n    \"visibility\" : \"visibility\",\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sensitive\" : true,\n    \"text\" : \"text\",\n    \"application_id\" : \"application_id\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ScheduledStatus>(exampleJson)
            : default(ScheduledStatus);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View a single scheduled status</remarks>
        /// <param name="id">ID of the scheduled status in the database.</param>
        /// <param name="apiV1ScheduledStatusesIdPutRequest"></param>
        /// <response code="200">Success.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Not Found</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpPut]
        [Route("/api/v1/scheduled_statuses/{id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1ScheduledStatusesIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ScheduledStatus), description: "Success.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Unprocessable Entity")]
        public virtual IActionResult ApiV1ScheduledStatusesIdPut([FromRoute (Name = "id")][Required]string id, [FromBody]ApiV1ScheduledStatusesIdPutRequest apiV1ScheduledStatusesIdPutRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ScheduledStatus));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"params\" : {\n    \"media_ids\" : [ \"media_ids\", \"media_ids\" ],\n    \"visibility\" : \"visibility\",\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"scheduled_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sensitive\" : true,\n    \"text\" : \"text\",\n    \"application_id\" : \"application_id\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ScheduledStatus>(exampleJson)
            : default(ScheduledStatus);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Privately bookmark a status.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Status bookmarked</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpPost]
        [Route("/api/v1/statuses/{id}/bookmark")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdBookmarkPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Status bookmarked")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdBookmarkPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpGet]
        [Route("/api/v1/statuses/{id}/context")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdContextGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Context), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdContextGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Context));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"ancestors\" : [ {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }, {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  } ],\n  \"descendants\" : [ {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }, {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Context>(exampleJson)
            : default(Context);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private.</response>
        [HttpDelete]
        [Route("/api/v1/statuses/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private.")]
        public virtual IActionResult ApiV1StatusesIdDelete([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add a status to your favourites list.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpPost]
        [Route("/api/v1/statuses/{id}/favourite")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdFavouritePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdFavouritePost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View who favourited a given status.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpGet]
        [Route("/api/v1/statuses/{id}/favourited_by")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdFavouritedByGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdFavouritedByGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Account));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Account>(exampleJson)
            : default(Account);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private.</response>
        [HttpGet]
        [Route("/api/v1/statuses/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private.")]
        public virtual IActionResult ApiV1StatusesIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Do not receive notifications for the thread that this status is part of. Must be a thread in which you are a participant.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Status&#39;s conversation muted, or was already muted</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpPost]
        [Route("/api/v1/statuses/{id}/mute")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdMutePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Status&#39;s conversation muted, or was already muted")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdMutePost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Feature one of your own public statuses at the top of your profile.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Status pinned. Note the status is not a reblog and its authoring account is your own.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        /// <response code="422">Status is not owned by you, or is not public. You cannot pin one of your private statuses because private statuses cannot be fetched from remote sites, and must be delivered.</response>
        [HttpPost]
        [Route("/api/v1/statuses/{id}/pin")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdPinPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Status pinned. Note the status is not a reblog and its authoring account is your own.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Status is not owned by you, or is not public. You cannot pin one of your private statuses because private statuses cannot be fetched from remote sites, and must be delivered.")]
        public virtual IActionResult ApiV1StatusesIdPinPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Reshare a status.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <param name="apiV1StatusesIdReblogPostRequest"></param>
        /// <response code="200">Status has been reblogged. Note that the top-level id has changed. The id of the boosted status is now inside the reblog property. The top-level id is the id of the reblog itself. Also note that reblogs cannot be pinned.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpPost]
        [Route("/api/v1/statuses/{id}/reblog")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdReblogPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Status has been reblogged. Note that the top-level id has changed. The id of the boosted status is now inside the reblog property. The top-level id is the id of the reblog itself. Also note that reblogs cannot be pinned.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdReblogPost([FromRoute (Name = "id")][Required]string id, [FromBody]ApiV1StatusesIdReblogPostRequest apiV1StatusesIdReblogPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View who boosted a given status.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Success</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpGet]
        [Route("/api/v1/statuses/{id}/reblogged_by")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdRebloggedByGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdRebloggedByGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Account));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Account>(exampleJson)
            : default(Account);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Remove a status from your private bookmarks.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Status unbookmarked</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpPost]
        [Route("/api/v1/statuses/{id}/unbookmark")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdUnbookmarkPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Status unbookmarked")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdUnbookmarkPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Remove a status from your favourites list.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpPost]
        [Route("/api/v1/statuses/{id}/unfavourite")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdUnfavouritePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdUnfavouritePost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Status&#39;s conversation unmuted, or was already unmuted</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Status&#39;s conversation muted, or was already muted</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpPost]
        [Route("/api/v1/statuses/{id}/unmute")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdUnmutePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Status&#39;s conversation muted, or was already muted")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdUnmutePost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Unfeature a status from the top of your profile.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Status unpinned, or was already not pinned</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpPost]
        [Route("/api/v1/statuses/{id}/unpin")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdUnpinPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Status unpinned, or was already not pinned")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdUnpinPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Undo a reshare of a status.</remarks>
        /// <param name="id">Local ID of a status in the database.</param>
        /// <response code="200">Status no longer reblogged</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="404">Status does not exist, is deleted, or is private</response>
        [HttpPost]
        [Route("/api/v1/statuses/{id}/unreblog")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesIdUnreblogPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Status), description: "Status no longer reblogged")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Status does not exist, is deleted, or is private")]
        public virtual IActionResult ApiV1StatusesIdUnreblogPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Status));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Status>(exampleJson)
            : default(Status);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="idempotencyKey">Prevent duplicate submissions of the same status. Idempotency keys are stored for up to 1 hour, and can be any arbitrary string. Consider using a hash or UUID generated client-side.</param>
        /// <param name="apiV1StatusesPostRequestInner"></param>
        /// <response code="200">Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/statuses")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1StatusesPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiV1StatusesPost200Response), description: "Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1StatusesPost([FromHeader (Name = "Idempotency-Key")]string idempotencyKey, [FromBody]List<ApiV1StatusesPostRequestInner> apiV1StatusesPostRequestInner)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiV1StatusesPost200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "null";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiV1StatusesPost200Response>(exampleJson)
            : default(ApiV1StatusesPost200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Accounts the user has had past positive interactions with, but is not yet following.</remarks>
        /// <param name="limit">Maximum number of results to return. Defaults to 40.</param>
        /// <response code="200">Success.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/suggestions")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1SuggestionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Success.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1SuggestionsGet([FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Account));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Account>(exampleJson)
            : default(Account);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete user suggestion</remarks>
        /// <param name="id">id of the account in the database to be removed from suggestions</param>
        /// <response code="200">Successfully removed</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpDelete]
        [Route("/api/v1/suggestions/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1SuggestionsIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Successfully removed")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1SuggestionsIdDelete([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View statuses from followed users.</remarks>
        /// <param name="local">Show only local statuses? Defaults to false.</param>
        /// <param name="limit">Max number of results to return. Defaults to 20.</param>
        /// <param name="maxId">Return results older than ID</param>
        /// <param name="sinceId">Return results newer than ID</param>
        /// <param name="minId">Return results immediately newer than ID</param>
        /// <response code="200">Get statuses for home.</response>
        /// <response code="206">Home feed is regenerating</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/timelines/home")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1TimelinesHomeGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Status>), description: "Get statuses for home.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1TimelinesHomeGet([FromQuery (Name = "local")]bool? local, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId, [FromQuery (Name = "min_id")]string minId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Status>));
            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}, {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Status>>(exampleJson)
            : default(List<Status>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View statuses in the given list timeline.</remarks>
        /// <param name="listId">Local ID of the list in the database.</param>
        /// <param name="limit">Max number of results to return. Defaults to 20.</param>
        /// <param name="maxId">Return results older than ID</param>
        /// <param name="sinceId">Return results newer than ID</param>
        /// <param name="minId">Return results immediately newer than ID</param>
        /// <response code="200">Statuses in this list will be returned..</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v1/timelines/list/{list_id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1TimelinesListListIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Status>), description: "Statuses in this list will be returned..")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1TimelinesListListIdGet([FromRoute (Name = "list_id")][Required]string listId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId, [FromQuery (Name = "min_id")]string minId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Status>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}, {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Status>>(exampleJson)
            : default(List<Status>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Public timeline</remarks>
        /// <param name="local">Show only local statuses? Defaults to false.</param>
        /// <param name="remote">Show only local statuses? Defaults to false.</param>
        /// <param name="onlyMedia">Show only statuses with media attached? Defaults to false..</param>
        /// <param name="limit">Max number of results to return. Defaults to 20.</param>
        /// <param name="maxId">Return results older than ID</param>
        /// <param name="sinceId">Return results newer than ID</param>
        /// <param name="minId">Return results immediately newer than ID</param>
        /// <response code="200">get statuses.</response>
        [HttpGet]
        [Route("/api/v1/timelines/public")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1TimelinesPublicGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Status>), description: "get statuses.")]
        public virtual IActionResult ApiV1TimelinesPublicGet([FromQuery (Name = "local")]bool? local, [FromQuery (Name = "remote")]bool? remote, [FromQuery (Name = "only_media")]bool? onlyMedia, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId, [FromQuery (Name = "min_id")]string minId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Status>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}, {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Status>>(exampleJson)
            : default(List<Status>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>View public statuses containing the given hashtag.</remarks>
        /// <param name="hashtag">Content of a &#x60;#hashtag&#x60;&#x60;, not including &#x60;#&#x60; symbol..</param>
        /// <param name="local">Show only local statuses? Defaults to false.</param>
        /// <param name="remote">Show only local statuses? Defaults to false.</param>
        /// <param name="onlyMedia">Show only statuses with media attached? Defaults to false..</param>
        /// <param name="limit">Max number of results to return. Defaults to 20.</param>
        /// <param name="maxId">Return results older than ID</param>
        /// <param name="sinceId">Return results newer than ID</param>
        /// <param name="minId">Return results immediately newer than ID</param>
        /// <response code="200">Get statuses.</response>
        [HttpGet]
        [Route("/api/v1/timelines/tag/{hashtag}")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1TimelinesTagHashtagGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Status>), description: "Get statuses.")]
        public virtual IActionResult ApiV1TimelinesTagHashtagGet([FromRoute (Name = "hashtag")][Required]string hashtag, [FromQuery (Name = "local")]bool? local, [FromQuery (Name = "remote")]bool? remote, [FromQuery (Name = "only_media")]bool? onlyMedia, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId, [FromQuery (Name = "min_id")]string minId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Status>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}, {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Status>>(exampleJson)
            : default(List<Status>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Tags that are being used more frequently within the past week.</remarks>
        /// <param name="limit">Max number of results to return. Defaults to 10.</param>
        /// <response code="200">Domains that this instance is aware of.</response>
        [HttpGet]
        [Route("/api/v1/trends")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1TrendsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Tag>), description: "Domains that this instance is aware of.")]
        public virtual IActionResult ApiV1TrendsGet([FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Tag>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"history\" : [ {\n    \"uses\" : \"uses\",\n    \"accounts\" : \"accounts\",\n    \"day\" : \"day\"\n  }, {\n    \"uses\" : \"uses\",\n    \"accounts\" : \"accounts\",\n    \"day\" : \"day\"\n  } ],\n  \"url\" : \"url\"\n}, {\n  \"name\" : \"name\",\n  \"history\" : [ {\n    \"uses\" : \"uses\",\n    \"accounts\" : \"accounts\",\n    \"day\" : \"day\"\n  }, {\n    \"uses\" : \"uses\",\n    \"accounts\" : \"accounts\",\n    \"day\" : \"day\"\n  } ],\n  \"url\" : \"url\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Tag>>(exampleJson)
            : default(List<Tag>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Search results</remarks>
        /// <param name="q">What to search for</param>
        /// <param name="limit">Maximum number of results. Defaults to 40.</param>
        /// <param name="resolve">Attempt WebFinger lookup.</param>
        /// <param name="following">Only who the user is following. Defaults to false.</param>
        /// <param name="accountId">If provided, statuses returned will be authored only by this account</param>
        /// <param name="maxId">Return results older than this id</param>
        /// <param name="minId">Return results immediately newer than this id</param>
        /// <param name="type">Enum(accounts, hashtags, statuses)</param>
        /// <param name="excludeUnreviewed">Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags.</param>
        /// <param name="offset">Offset in search results. Used for pagination. Defaults to 0.</param>
        /// <response code="200">Result</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpGet]
        [Route("/api/v2/search")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV2SearchGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiV2SearchGet200Response), description: "Result")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV2SearchGet([FromQuery (Name = "q")][Required()]string q, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "resolve")]string resolve, [FromQuery (Name = "following")]bool? following, [FromQuery (Name = "account_id")]string accountId, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "min_id")]string minId, [FromQuery (Name = "type")]string type, [FromQuery (Name = "exclude_unreviewed")]bool? excludeUnreviewed, [FromQuery (Name = "offset")]int? offset)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiV2SearchGet200Response));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"hashtags\" : [ {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  }, {\n    \"pinned\" : true,\n    \"in_reply_to_id\" : \"in_reply_to_id\",\n    \"favourites_count\" : 0,\n    \"media_attachments\" : [ {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    }, {\n      \"remote_url\" : \"remote_url\",\n      \"meta\" : \"{}\",\n      \"preview_url\" : \"preview_url\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"type\" : \"unknown\",\n      \"url\" : \"url\",\n      \"text_url\" : \"text_url\"\n    } ],\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"replies_count\" : 2,\n    \"language\" : \"language\",\n    \"poll\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"voters_count\" : 1,\n      \"votes_count\" : 5,\n      \"expired\" : true,\n      \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"own_votes\" : [ 6, 6 ],\n      \"multiple\" : true,\n      \"options\" : [ \"\", \"\" ],\n      \"voted\" : true,\n      \"id\" : \"id\"\n    },\n    \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n    \"content\" : \"content\",\n    \"spoiler_text\" : \"spoiler_text\",\n    \"id\" : \"id\",\n    \"reblogged\" : true,\n    \"text\" : \"text\",\n    \"muted\" : true,\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"reblogs_count\" : 5,\n    \"visibility\" : \"public\",\n    \"bookmarked\" : true,\n    \"sensitive\" : true,\n    \"uri\" : \"uri\",\n    \"url\" : \"url\",\n    \"tags\" : [ {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    }, {\n      \"name\" : \"name\",\n      \"history\" : [ {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      }, {\n        \"uses\" : \"uses\",\n        \"accounts\" : \"accounts\",\n        \"day\" : \"day\"\n      } ],\n      \"url\" : \"url\"\n    } ],\n    \"application\" : {\n      \"vapid_key\" : \"vapid_key\",\n      \"website\" : \"website\",\n      \"name\" : \"name\",\n      \"client_secret\" : \"client_secret\",\n      \"client_id\" : \"client_id\"\n    },\n    \"favourited\" : true,\n    \"mentions\" : [ {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    }, {\n      \"id\" : \"id\",\n      \"acct\" : \"acct\",\n      \"url\" : \"url\",\n      \"username\" : \"username\"\n    } ],\n    \"account\" : {\n      \"emojis\" : [ {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      }, {\n        \"category\" : \"category\",\n        \"shortcode\" : \"shortcode\",\n        \"visible_in_picker\" : true,\n        \"url\" : \"url\",\n        \"static_url\" : \"static_url\"\n      } ],\n      \"note\" : \"note\",\n      \"bot\" : true,\n      \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"avatar\" : \"avatar\",\n      \"source\" : {\n        \"note\" : \"note\",\n        \"follow_requests_count\" : 1,\n        \"privacy\" : \"public\",\n        \"language\" : \"language\",\n        \"sensitive\" : true,\n        \"fields\" : [ {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      },\n      \"display_name\" : \"display_name\",\n      \"header_static\" : \"header_static\",\n      \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"suspended\" : true,\n      \"url\" : \"url\",\n      \"following_count\" : 6,\n      \"discoverable\" : true,\n      \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statuses_count\" : 5,\n      \"followers_count\" : 0,\n      \"header\" : \"header\",\n      \"id\" : \"id\",\n      \"avatar_static\" : \"avatar_static\",\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ],\n      \"locked\" : true,\n      \"acct\" : \"acct\",\n      \"username\" : \"username\"\n    },\n    \"card\" : {\n      \"author_name\" : \"author_name\",\n      \"image\" : \"image\",\n      \"blurhash\" : \"blurhash\",\n      \"description\" : \"description\",\n      \"provider_url\" : \"provider_url\",\n      \"title\" : \"title\",\n      \"type\" : \"link\",\n      \"url\" : \"url\",\n      \"author_url\" : \"author_url\",\n      \"width\" : 6,\n      \"html\" : \"html\",\n      \"provider_name\" : \"provider_name\",\n      \"height\" : 0\n    }\n  } ],\n  \"statuses\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"accounts\" : [ {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  }, {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiV2SearchGet200Response>(exampleJson)
            : default(ApiV2SearchGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
