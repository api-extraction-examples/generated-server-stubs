/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AccountsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Successfully blocked, or account was already blocked</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/accounts/{id}/block")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdBlockPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Successfully blocked, or account was already blocked")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1AccountsIdBlockPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Tags featured by this account.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user</response>
        [HttpGet]
        [Route("/api/v1/accounts/{id}/featured_tags")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdFeaturedTagsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<FeaturedTag>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user")]
        public virtual IActionResult ApiV1AccountsIdFeaturedTagsGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FeaturedTag>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 0,\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"url\" : \"url\"\n}, {\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 0,\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"url\" : \"url\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<FeaturedTag>>(exampleJson)
            : default(List<FeaturedTag>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Follow the given account. Can also be used to update whether to show reblogs or enable notifications.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <param name="apiV1AccountsIdFollowPostRequest"></param>
        /// <response code="200">Successfully followed, or account was already followed</response>
        /// <response code="403">Trying to follow someone that you block or that blocks you</response>
        [HttpPost]
        [Route("/api/v1/accounts/{id}/follow")]
        [Authorize]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdFollowPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Successfully followed, or account was already followed")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Trying to follow someone that you block or that blocks you")]
        public virtual IActionResult ApiV1AccountsIdFollowPost([FromRoute (Name = "id")][Required]string id, [FromBody]ApiV1AccountsIdFollowPostRequest apiV1AccountsIdFollowPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Accounts which follow the given account, if network is not hidden by the account owner.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <param name="maxId">Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination.</param>
        /// <param name="sinceId">Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination.</param>
        /// <param name="limit">Maximum number of results to return. Defaults to 40.</param>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user</response>
        /// <response code="404">Account is deleted or does not exist</response>
        /// <response code="410">Account is suspended</response>
        [HttpGet]
        [Route("/api/v1/accounts/{id}/followers")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdFollowersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Account>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Account is deleted or does not exist")]
        public virtual IActionResult ApiV1AccountsIdFollowersGet([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Account>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410);
            string exampleJson = null;
            exampleJson = "[ {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}, {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Account>>(exampleJson)
            : default(List<Account>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Accounts which the given account is following, if network is not hidden by the account owner.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <param name="maxId">Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination.</param>
        /// <param name="sinceId">Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination.</param>
        /// <param name="limit">Maximum number of results to return. Defaults to 40.</param>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user</response>
        /// <response code="404">Account is deleted or does not exist</response>
        /// <response code="410">Account is suspended</response>
        [HttpGet]
        [Route("/api/v1/accounts/{id}/following")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdFollowingGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Account>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Account is deleted or does not exist")]
        public virtual IActionResult ApiV1AccountsIdFollowingGet([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "max_id")]string maxId, [FromQuery (Name = "since_id")]string sinceId, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Account>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410);
            string exampleJson = null;
            exampleJson = "[ {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}, {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Account>>(exampleJson)
            : default(List<Account>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Account record will be returned. Note that &#x60;acct&#x60; of local users does not include the domain name.</response>
        /// <response code="401">If the instance is in whitelist mode and the Authorization header is missing or invalid</response>
        /// <response code="404">Account does not exist</response>
        /// <response code="410">Account is suspended</response>
        [HttpGet]
        [Route("/api/v1/accounts/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Account record will be returned. Note that &#x60;acct&#x60; of local users does not include the domain name.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "If the instance is in whitelist mode and the Authorization header is missing or invalid")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Account does not exist")]
        public virtual IActionResult ApiV1AccountsIdGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Account));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410);
            string exampleJson = null;
            exampleJson = "{\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Account>(exampleJson)
            : default(Account);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Array of IdentityProof</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Success</response>
        /// <response code="404">Account is deleted or does not exist</response>
        /// <response code="410">Account with given id is suspended</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpGet]
        [Route("/api/v1/accounts/{id}/identity_proofs")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdIdentityProofsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<IdentityProof>), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Account is deleted or does not exist")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Unprocessable Entity")]
        public virtual IActionResult ApiV1AccountsIdIdentityProofsGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<IdentityProof>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410);
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"updated_at\" : \"updated_at\",\n  \"profile_url\" : \"profile_url\",\n  \"provider\" : \"provider\",\n  \"provider_username\" : \"provider_username\",\n  \"proof_url\" : \"proof_url\"\n}, {\n  \"updated_at\" : \"updated_at\",\n  \"profile_url\" : \"profile_url\",\n  \"provider\" : \"provider\",\n  \"provider_username\" : \"provider_username\",\n  \"proof_url\" : \"proof_url\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<IdentityProof>>(exampleJson)
            : default(List<IdentityProof>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>User lists that you have added this account to.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Success</response>
        /// <response code="401">Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user</response>
        /// <response code="404">Account is deleted or does not exist</response>
        /// <response code="410">Account is suspended</response>
        [HttpGet]
        [Route("/api/v1/accounts/{id}/lists")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdListsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<List>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Account is deleted or does not exist")]
        public virtual IActionResult ApiV1AccountsIdListsGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<List>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410);
            string exampleJson = null;
            exampleJson = "[ {\n  \"replies_policy\" : \"followed\",\n  \"id\" : \"id\",\n  \"title\" : \"title\"\n}, {\n  \"replies_policy\" : \"followed\",\n  \"id\" : \"id\",\n  \"title\" : \"title\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<List>>(exampleJson)
            : default(List<List>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Mute the given account. Clients should filter statuses and notifications from this account, if received (e.g. due to a boost in the Home timeline).</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <param name="apiV1AccountsIdMutePostRequest"></param>
        /// <response code="200">Successfully muted, or account was already muted. Note that you can call this API method again with notifications&#x3D;false to update the relationship so that only statuses are muted.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/accounts/{id}/mute")]
        [Authorize]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdMutePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Successfully muted, or account was already muted. Note that you can call this API method again with notifications&#x3D;false to update the relationship so that only statuses are muted.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1AccountsIdMutePost([FromRoute (Name = "id")][Required]string id, [FromBody]ApiV1AccountsIdMutePostRequest apiV1AccountsIdMutePostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Sets a private note on a user.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <param name="apiV1AccountsIdNotePostRequest"></param>
        /// <response code="200">Successfully unmuted, or account was already unmuted.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpPost]
        [Route("/api/v1/accounts/{id}/note")]
        [Authorize]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdNotePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Successfully unmuted, or account was already unmuted.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1AccountsIdNotePost([FromRoute (Name = "id")][Required]string id, [FromBody]ApiV1AccountsIdNotePostRequest apiV1AccountsIdNotePostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add the given account to the user&#39;s featured profiles. (Featured profiles are currently shown on the user&#39;s own public profile.)</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Successfully unmuted, or account was already unmuted.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="403">Token is not authorized with a valid user or is missing a required scope</response>
        /// <response code="422">You are not following this account</response>
        /// <response code="500">Account already endorsed</response>
        [HttpPost]
        [Route("/api/v1/accounts/{id}/pin")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdPinPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Successfully unmuted, or account was already unmuted.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Token is not authorized with a valid user or is missing a required scope")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "You are not following this account")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Account already endorsed")]
        public virtual IActionResult ApiV1AccountsIdPinPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Statuses posted to the given account.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Statuses posted to the given account. Public (for public statuses only), or user token + read:statuses (for private statuses the user is authorized to see)</response>
        /// <response code="401">Instance is in whitelist mode or running a version of Mastodon older than 2.7.0, and the Authorization header is invalid or missing</response>
        /// <response code="404">Account is deleted or does not exist</response>
        /// <response code="410">Account is suspended</response>
        [HttpGet]
        [Route("/api/v1/accounts/{id}/statuses")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdStatusesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Status>), description: "Statuses posted to the given account. Public (for public statuses only), or user token + read:statuses (for private statuses the user is authorized to see)")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Instance is in whitelist mode or running a version of Mastodon older than 2.7.0, and the Authorization header is invalid or missing")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Account is deleted or does not exist")]
        public virtual IActionResult ApiV1AccountsIdStatusesGet([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Status>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410);
            string exampleJson = null;
            exampleJson = "[ {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n}, {\n  \"pinned\" : true,\n  \"in_reply_to_id\" : \"in_reply_to_id\",\n  \"favourites_count\" : 0,\n  \"media_attachments\" : [ {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  }, {\n    \"remote_url\" : \"remote_url\",\n    \"meta\" : \"{}\",\n    \"preview_url\" : \"preview_url\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"type\" : \"unknown\",\n    \"url\" : \"url\",\n    \"text_url\" : \"text_url\"\n  } ],\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"replies_count\" : 2,\n  \"language\" : \"language\",\n  \"poll\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"voters_count\" : 1,\n    \"votes_count\" : 5,\n    \"expired\" : true,\n    \"expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"own_votes\" : [ 6, 6 ],\n    \"multiple\" : true,\n    \"options\" : [ \"\", \"\" ],\n    \"voted\" : true,\n    \"id\" : \"id\"\n  },\n  \"in_reply_to_account_id\" : \"in_reply_to_account_id\",\n  \"content\" : \"content\",\n  \"spoiler_text\" : \"spoiler_text\",\n  \"id\" : \"id\",\n  \"reblogged\" : true,\n  \"text\" : \"text\",\n  \"muted\" : true,\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"reblogs_count\" : 5,\n  \"visibility\" : \"public\",\n  \"bookmarked\" : true,\n  \"sensitive\" : true,\n  \"uri\" : \"uri\",\n  \"url\" : \"url\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  }, {\n    \"name\" : \"name\",\n    \"history\" : [ {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    }, {\n      \"uses\" : \"uses\",\n      \"accounts\" : \"accounts\",\n      \"day\" : \"day\"\n    } ],\n    \"url\" : \"url\"\n  } ],\n  \"application\" : {\n    \"vapid_key\" : \"vapid_key\",\n    \"website\" : \"website\",\n    \"name\" : \"name\",\n    \"client_secret\" : \"client_secret\",\n    \"client_id\" : \"client_id\"\n  },\n  \"favourited\" : true,\n  \"mentions\" : [ {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  }, {\n    \"id\" : \"id\",\n    \"acct\" : \"acct\",\n    \"url\" : \"url\",\n    \"username\" : \"username\"\n  } ],\n  \"account\" : {\n    \"emojis\" : [ {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    }, {\n      \"category\" : \"category\",\n      \"shortcode\" : \"shortcode\",\n      \"visible_in_picker\" : true,\n      \"url\" : \"url\",\n      \"static_url\" : \"static_url\"\n    } ],\n    \"note\" : \"note\",\n    \"bot\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"avatar\" : \"avatar\",\n    \"source\" : {\n      \"note\" : \"note\",\n      \"follow_requests_count\" : 1,\n      \"privacy\" : \"public\",\n      \"language\" : \"language\",\n      \"sensitive\" : true,\n      \"fields\" : [ {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      }, {\n        \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"name\" : \"name\",\n        \"value\" : \"value\"\n      } ]\n    },\n    \"display_name\" : \"display_name\",\n    \"header_static\" : \"header_static\",\n    \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"suspended\" : true,\n    \"url\" : \"url\",\n    \"following_count\" : 6,\n    \"discoverable\" : true,\n    \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"statuses_count\" : 5,\n    \"followers_count\" : 0,\n    \"header\" : \"header\",\n    \"id\" : \"id\",\n    \"avatar_static\" : \"avatar_static\",\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ],\n    \"locked\" : true,\n    \"acct\" : \"acct\",\n    \"username\" : \"username\"\n  },\n  \"card\" : {\n    \"author_name\" : \"author_name\",\n    \"image\" : \"image\",\n    \"blurhash\" : \"blurhash\",\n    \"description\" : \"description\",\n    \"provider_url\" : \"provider_url\",\n    \"title\" : \"title\",\n    \"type\" : \"link\",\n    \"url\" : \"url\",\n    \"author_url\" : \"author_url\",\n    \"width\" : 6,\n    \"html\" : \"html\",\n    \"provider_name\" : \"provider_name\",\n    \"height\" : 0\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Status>>(exampleJson)
            : default(List<Status>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Successfully unblocked, or account was already not blocked</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/accounts/{id}/unblock")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdUnblockPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Successfully unblocked, or account was already not blocked")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1AccountsIdUnblockPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Unfollow the given account.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Successfully unfollowed, or account was already not followed</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/accounts/{id}/unfollow")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdUnfollowPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Successfully unfollowed, or account was already not followed")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1AccountsIdUnfollowPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Unmute the given account.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Successfully unmuted, or account was already unmuted.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        [HttpPost]
        [Route("/api/v1/accounts/{id}/unmute")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdUnmutePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Successfully unmuted, or account was already unmuted.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1AccountsIdUnmutePost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Remove the given account from the user&#39;s featured profiles.</remarks>
        /// <param name="id">The id of the account in the database</param>
        /// <response code="200">Successfully unmuted, or account was already unmuted.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpPost]
        [Route("/api/v1/accounts/{id}/unpin")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsIdUnpinPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Relationship), description: "Successfully unmuted, or account was already unmuted.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        public virtual IActionResult ApiV1AccountsIdUnpinPost([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Relationship));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);
            string exampleJson = null;
            exampleJson = "{\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Relationship>(exampleJson)
            : default(Relationship);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Creates a user and account records. Returns an account access token for the app that initiated the request. The app should save this token for later, and should wait for the user to confirm their account by clicking a link in their email inbox.</remarks>
        /// <param name="apiV1AccountsPostRequest"></param>
        /// <response code="200">Success</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/api/v1/accounts")]
        [Authorize]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsPost")]
        public virtual IActionResult ApiV1AccountsPost([FromBody]ApiV1AccountsPostRequest apiV1AccountsPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Sets a private note on a user.</remarks>
        /// <param name="id">Array of account IDs to check</param>
        /// <response code="200">Success.</response>
        /// <response code="401">Invalid or missing Authorization header</response>
        /// <response code="422">Unprocessable Entity</response>
        [HttpGet]
        [Route("/api/v1/accounts/relationships")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsRelationshipsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Relationship>), description: "Success.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Invalid or missing Authorization header")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "Unprocessable Entity")]
        public virtual IActionResult ApiV1AccountsRelationshipsGet([FromQuery (Name = "id")][Required()]List<string> id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Relationship>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n}, {\n  \"note\" : \"note\",\n  \"notifying\" : true,\n  \"domain_blocking\" : true,\n  \"endorsed\" : true,\n  \"followed_by\" : true,\n  \"muting\" : true,\n  \"requested\" : true,\n  \"blocked_by\" : true,\n  \"blocking\" : true,\n  \"following\" : true,\n  \"muting_notifications\" : true,\n  \"id\" : \"id\",\n  \"showing_reblogs\" : true\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Relationship>>(exampleJson)
            : default(List<Relationship>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Search for matching accounts by username or display name.</remarks>
        /// <param name="q">What to search for</param>
        /// <param name="limit">Maximum number of results. Defaults to 40.</param>
        /// <param name="resolve">Attempt WebFinger lookup. Defaults to false. Use this when &#x60;q&#x60; is an exact address.</param>
        /// <param name="following">Only who the user is following. Defaults to false.</param>
        /// <response code="200">Accounts matching &#x60;q&#x60; in username or display name</response>
        /// <response code="503">resolve&#x3D;true, but the domain part of the user@domain address is not a currently live website</response>
        [HttpGet]
        [Route("/api/v1/accounts/search")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsSearchGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Account>), description: "Accounts matching &#x60;q&#x60; in username or display name")]
        [SwaggerResponse(statusCode: 503, type: typeof(Error), description: "resolve&#x3D;true, but the domain part of the user@domain address is not a currently live website")]
        public virtual IActionResult ApiV1AccountsSearchGet([FromQuery (Name = "q")][Required()]string q, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "resolve")]string resolve, [FromQuery (Name = "following")]bool? following)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Account>));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}, {\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Account>>(exampleJson)
            : default(List<Account>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update the user&#39;s display and preferences.</remarks>
        /// <param name="apiV1AccountsUpdateCredentialsPatchRequest"></param>
        /// <response code="200">You should use &#x60;accounts/verify_credentials&#x60; to first obtain plaintext representations from within the &#x60;source&#x60; parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML.</response>
        /// <response code="401">Unauthorized</response>
        [HttpPatch]
        [Route("/api/v1/accounts/update_credentials")]
        [Authorize]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsUpdateCredentialsPatch")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "You should use &#x60;accounts/verify_credentials&#x60; to first obtain plaintext representations from within the &#x60;source&#x60; parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        public virtual IActionResult ApiV1AccountsUpdateCredentialsPatch([FromBody]ApiV1AccountsUpdateCredentialsPatchRequest apiV1AccountsUpdateCredentialsPatchRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Account));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Account>(exampleJson)
            : default(Account);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Test to make sure that the user token works.</remarks>
        /// <response code="200">Note the extra &#x60;source&#x60; property, which is not visible on accounts other than your own. Also note that plain-text is used within &#x60;source&#x60; and HTML is used for their corresponding properties such as &#x60;note&#x60; and &#x60;fields&#x60;.</response>
        /// <response code="401">Your credential verification will fail if the token is invalid or incorrect.</response>
        /// <response code="403">Your user account is currently disabled, missing a confirmed email address, or pending approval.</response>
        [HttpGet]
        [Route("/api/v1/accounts/verify_credentials")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsVerifyCredentialsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "Note the extra &#x60;source&#x60; property, which is not visible on accounts other than your own. Also note that plain-text is used within &#x60;source&#x60; and HTML is used for their corresponding properties such as &#x60;note&#x60; and &#x60;fields&#x60;.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Your credential verification will fail if the token is invalid or incorrect.")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Your user account is currently disabled, missing a confirmed email address, or pending approval.")]
        public virtual IActionResult ApiV1AccountsVerifyCredentialsGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Account));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"emojis\" : [ {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  }, {\n    \"category\" : \"category\",\n    \"shortcode\" : \"shortcode\",\n    \"visible_in_picker\" : true,\n    \"url\" : \"url\",\n    \"static_url\" : \"static_url\"\n  } ],\n  \"note\" : \"note\",\n  \"bot\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"avatar\" : \"avatar\",\n  \"source\" : {\n    \"note\" : \"note\",\n    \"follow_requests_count\" : 1,\n    \"privacy\" : \"public\",\n    \"language\" : \"language\",\n    \"sensitive\" : true,\n    \"fields\" : [ {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    }, {\n      \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"value\" : \"value\"\n    } ]\n  },\n  \"display_name\" : \"display_name\",\n  \"header_static\" : \"header_static\",\n  \"mute_expires_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"suspended\" : true,\n  \"url\" : \"url\",\n  \"following_count\" : 6,\n  \"discoverable\" : true,\n  \"last_status_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"statuses_count\" : 5,\n  \"followers_count\" : 0,\n  \"header\" : \"header\",\n  \"id\" : \"id\",\n  \"avatar_static\" : \"avatar_static\",\n  \"fields\" : [ {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  }, {\n    \"verified_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"name\" : \"name\",\n    \"value\" : \"value\"\n  } ],\n  \"locked\" : true,\n  \"acct\" : \"acct\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Account>(exampleJson)
            : default(Account);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
