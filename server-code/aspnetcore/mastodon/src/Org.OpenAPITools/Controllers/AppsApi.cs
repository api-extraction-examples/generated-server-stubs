/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AppsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a new application to obtain OAuth2 credentials.</remarks>
        /// <param name="apiV1AppsPostRequest"></param>
        /// <response code="200">Success</response>
        /// <response code="422">If a required parameter is missing or improperly formatted, the request will fail.</response>
        [HttpPost]
        [Route("/api/v1/apps")]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AppsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiV1AppsPost200Response), description: "Success")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "If a required parameter is missing or improperly formatted, the request will fail.")]
        public virtual IActionResult ApiV1AppsPost([FromBody]ApiV1AppsPostRequest apiV1AppsPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiV1AppsPost200Response));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"vapid_key\" : \"vapid_key\",\n  \"website\" : \"website\",\n  \"name\" : \"name\",\n  \"client_secret\" : \"client_secret\",\n  \"id\" : \"id\",\n  \"redirect_uri\" : \"redirect_uri\",\n  \"client_id\" : \"client_id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiV1AppsPost200Response>(exampleJson)
            : default(ApiV1AppsPost200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Confirm that the app&#39;s OAuth2 credentials work.</remarks>
        /// <response code="200">If the Authorization header was provided with a valid token, you should see your app returned as an Application entity.</response>
        /// <response code="401">If the Authorization header contains an invalid token, is malformed, or is not present, an error will be returned indicating an authorization failure.</response>
        [HttpGet]
        [Route("/api/v1/apps/verify_credentials")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AppsVerifyCredentialsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Application), description: "If the Authorization header was provided with a valid token, you should see your app returned as an Application entity.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "If the Authorization header contains an invalid token, is malformed, or is not present, an error will be returned indicating an authorization failure.")]
        public virtual IActionResult ApiV1AppsVerifyCredentialsGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Application));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"vapid_key\" : \"vapid_key\",\n  \"website\" : \"website\",\n  \"name\" : \"name\",\n  \"client_secret\" : \"client_secret\",\n  \"client_id\" : \"client_id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Application>(exampleJson)
            : default(Application);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
