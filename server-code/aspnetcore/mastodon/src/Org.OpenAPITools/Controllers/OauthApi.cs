/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class OauthApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Displays an authorization form to the user. If approved, it will create and return an authorization code, then redirect to the desired redirect_uri, or show the authorization code if urn:ietf:wg:oauth:2.0:oob was requested. The authorization code can be used while requesting a token to obtain access to user-level methods.</remarks>
        /// <param name="responseType">Should be set equal to code.</param>
        /// <param name="clientId">Client ID, obtained during app registration.</param>
        /// <param name="redirectUri">Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the authorization code will be shown instead. Must match one of the redirect URIs declared during app registration.</param>
        /// <param name="scope">List of requested OAuth scopes, separated by spaces (or by pluses, if using query parameters). Must be a subset of scopes declared during app registration. If not provided, defaults to read.</param>
        /// <param name="forceLogin">Added in 2.6.0. Forces the user to re-login, which is necessary for authorizing with multiple accounts from the same instance.</param>
        /// <response code="200">The authorization code will be returned as a query parameter named code.</response>
        /// <response code="400">If the authorization code is incorrect or has been used already, the request will fail.</response>
        [HttpGet]
        [Route("/oauth/authorize")]
        [ValidateModelState]
        [SwaggerOperation("OauthAuthorizeGet")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "If the authorization code is incorrect or has been used already, the request will fail.")]
        public virtual IActionResult OauthAuthorizeGet([FromQuery (Name = "response_type")][Required()]string responseType, [FromQuery (Name = "client_id")][Required()]string clientId, [FromQuery (Name = "redirect_uri")][Required()]string redirectUri, [FromQuery (Name = "scope")]string scope, [FromQuery (Name = "force_login")]bool? forceLogin)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Revoke an access token to make it no longer valid for use.</remarks>
        /// <param name="oauthRevokePostRequest"></param>
        /// <response code="200">If you own the provided token, the API call will provide an empty response. This operation is idempotent, so calling this API multiple times will still return OK.</response>
        /// <response code="403">If you provide a token you do not own, or no token at all, the API call will return a 403 error.</response>
        [HttpPost]
        [Route("/oauth/revoke")]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("OauthRevokePost")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "If you provide a token you do not own, or no token at all, the API call will return a 403 error.")]
        public virtual IActionResult OauthRevokePost([FromBody]OauthRevokePostRequest oauthRevokePostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns an access token, to be used during API calls that are not public.</remarks>
        /// <param name="oauthTokenPostRequest"></param>
        /// <response code="200">Store this access_token for later use with auth-required methods. The token should be passed as an HTTP Authorization header when making API calls, with the value Bearer access_token</response>
        /// <response code="400">If you try to request a scope that was not included when registering the app, the request will fail.</response>
        /// <response code="401">If client_id and client_secret do not match or are invalid, the request will fail.</response>
        [HttpPost]
        [Route("/oauth/token")]
        [Consumes("application/form-data")]
        [ValidateModelState]
        [SwaggerOperation("OauthTokenPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(OauthTokenPost200Response), description: "Store this access_token for later use with auth-required methods. The token should be passed as an HTTP Authorization header when making API calls, with the value Bearer access_token")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "If you try to request a scope that was not included when registering the app, the request will fail.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "If client_id and client_secret do not match or are invalid, the request will fail.")]
        public virtual IActionResult OauthTokenPost([FromBody]OauthTokenPostRequest oauthTokenPostRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OauthTokenPost200Response));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"access_token\" : \"ZA-Yj3aBD8U8Cm7lKUp-lm9O9BmDgdhHzDeqsY8tlL0\",\n  \"scope\" : \"read write follow push\",\n  \"created_at\" : 1573979017,\n  \"token_type\" : \"Bearer\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OauthTokenPost200Response>(exampleJson)
            : default(OauthTokenPost200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
