/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Admin-level information about a filed report.
    /// </summary>
    [DataContract]
    public partial class AdminReport : IEquatable<AdminReport>
    {
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public Account Account { get; set; }

        /// <summary>
        /// The action taken to resolve this report. Enumerable oneOf.
        /// </summary>
        /// <value>The action taken to resolve this report. Enumerable oneOf.</value>
        [DataMember(Name="action_taken", EmitDefaultValue=false)]
        public string ActionTaken { get; set; }

        /// <summary>
        /// Gets or Sets AssignedAccount
        /// </summary>
        [DataMember(Name="assigned_account", EmitDefaultValue=false)]
        public Account AssignedAccount { get; set; }

        /// <summary>
        /// An optional reason for reporting.
        /// </summary>
        /// <value>An optional reason for reporting.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// The time the report was filed.
        /// </summary>
        /// <value>The time the report was filed.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The ID of the report in the database. Cast from an integer, but not guaranteed to be a number.
        /// </summary>
        /// <value>The ID of the report in the database. Cast from an integer, but not guaranteed to be a number.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Statuses attached to the report, for context.
        /// </summary>
        /// <value>Statuses attached to the report, for context.</value>
        [DataMember(Name="statuses", EmitDefaultValue=false)]
        public List<Status> Statuses { get; set; }

        /// <summary>
        /// Gets or Sets TargetAccount
        /// </summary>
        [DataMember(Name="target_account", EmitDefaultValue=false)]
        public Account TargetAccount { get; set; }

        /// <summary>
        /// The time of last action on this report.
        /// </summary>
        /// <value>The time of last action on this report.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminReport {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  ActionTaken: ").Append(ActionTaken).Append("\n");
            sb.Append("  AssignedAccount: ").Append(AssignedAccount).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  TargetAccount: ").Append(TargetAccount).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdminReport)obj);
        }

        /// <summary>
        /// Returns true if AdminReport instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminReport other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    ActionTaken == other.ActionTaken ||
                    ActionTaken != null &&
                    ActionTaken.Equals(other.ActionTaken)
                ) && 
                (
                    AssignedAccount == other.AssignedAccount ||
                    AssignedAccount != null &&
                    AssignedAccount.Equals(other.AssignedAccount)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Statuses == other.Statuses ||
                    Statuses != null &&
                    other.Statuses != null &&
                    Statuses.SequenceEqual(other.Statuses)
                ) && 
                (
                    TargetAccount == other.TargetAccount ||
                    TargetAccount != null &&
                    TargetAccount.Equals(other.TargetAccount)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (ActionTaken != null)
                    hashCode = hashCode * 59 + ActionTaken.GetHashCode();
                    if (AssignedAccount != null)
                    hashCode = hashCode * 59 + AssignedAccount.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Statuses != null)
                    hashCode = hashCode * 59 + Statuses.GetHashCode();
                    if (TargetAccount != null)
                    hashCode = hashCode * 59 + TargetAccount.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdminReport left, AdminReport right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdminReport left, AdminReport right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
