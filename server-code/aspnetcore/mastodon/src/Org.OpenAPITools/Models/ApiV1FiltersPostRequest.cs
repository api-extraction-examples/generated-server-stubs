/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApiV1FiltersPostRequest : IEquatable<ApiV1FiltersPostRequest>
    {

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ContextEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            
            /// <summary>
            /// Enum HomeEnum for home
            /// </summary>
            [EnumMember(Value = "home")]
            HomeEnum = 1,
            
            /// <summary>
            /// Enum NotificationsEnum for notifications
            /// </summary>
            [EnumMember(Value = "notifications")]
            NotificationsEnum = 2,
            
            /// <summary>
            /// Enum PublicEnum for public
            /// </summary>
            [EnumMember(Value = "public")]
            PublicEnum = 3,
            
            /// <summary>
            /// Enum ThreadEnum for thread
            /// </summary>
            [EnumMember(Value = "thread")]
            ThreadEnum = 4
        }

        /// <summary>
        /// Array of enumerable strings &#x60;home&#x60;, &#x60;notifications&#x60;, &#x60;public&#x60;, &#x60;thread&#x60;. At least one context must be specified.
        /// </summary>
        /// <value>Array of enumerable strings &#x60;home&#x60;, &#x60;notifications&#x60;, &#x60;public&#x60;, &#x60;thread&#x60;. At least one context must be specified.</value>
        [Required]
        [DataMember(Name="context", EmitDefaultValue=false)]
        public List<ApiV1FiltersPostRequest.ContextEnum> Context { get; set; }

        /// <summary>
        /// Number of seconds from now the filter should expire. Otherwise, null for a filter that doesn&#39;t expire.
        /// </summary>
        /// <value>Number of seconds from now the filter should expire. Otherwise, null for a filter that doesn&#39;t expire.</value>
        [DataMember(Name="expires_in", EmitDefaultValue=true)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// Should the server irreversibly drop matching entities from home and notifications?
        /// </summary>
        /// <value>Should the server irreversibly drop matching entities from home and notifications?</value>
        [DataMember(Name="irreversible", EmitDefaultValue=true)]
        public bool Irreversible { get; set; }

        /// <summary>
        /// Text to be filtered.
        /// </summary>
        /// <value>Text to be filtered.</value>
        [Required]
        [DataMember(Name="phrase", EmitDefaultValue=false)]
        public string Phrase { get; set; }

        /// <summary>
        /// Consider word boundaries?
        /// </summary>
        /// <value>Consider word boundaries?</value>
        [DataMember(Name="whole_word", EmitDefaultValue=true)]
        public bool WholeWord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiV1FiltersPostRequest {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  Irreversible: ").Append(Irreversible).Append("\n");
            sb.Append("  Phrase: ").Append(Phrase).Append("\n");
            sb.Append("  WholeWord: ").Append(WholeWord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiV1FiltersPostRequest)obj);
        }

        /// <summary>
        /// Returns true if ApiV1FiltersPostRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiV1FiltersPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV1FiltersPostRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Context == other.Context ||
                    Context != null &&
                    other.Context != null &&
                    Context.SequenceEqual(other.Context)
                ) && 
                (
                    ExpiresIn == other.ExpiresIn ||
                    
                    ExpiresIn.Equals(other.ExpiresIn)
                ) && 
                (
                    Irreversible == other.Irreversible ||
                    
                    Irreversible.Equals(other.Irreversible)
                ) && 
                (
                    Phrase == other.Phrase ||
                    Phrase != null &&
                    Phrase.Equals(other.Phrase)
                ) && 
                (
                    WholeWord == other.WholeWord ||
                    
                    WholeWord.Equals(other.WholeWord)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExpiresIn.GetHashCode();
                    
                    hashCode = hashCode * 59 + Irreversible.GetHashCode();
                    if (Phrase != null)
                    hashCode = hashCode * 59 + Phrase.GetHashCode();
                    
                    hashCode = hashCode * 59 + WholeWord.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApiV1FiltersPostRequest left, ApiV1FiltersPostRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiV1FiltersPostRequest left, ApiV1FiltersPostRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
