/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Reports filed against users and/or statuses, to be taken action on by moderators.
    /// </summary>
    [DataContract]
    public partial class Report : IEquatable<Report>
    {
        /// <summary>
        /// Gets or Sets ActionTaken
        /// </summary>
        [DataMember(Name="action_taken", EmitDefaultValue=true)]
        public bool ActionTaken { get; set; }

        /// <summary>
        /// Gets or Sets ActionTakenAt
        /// </summary>
        [DataMember(Name="action_taken_at", EmitDefaultValue=false)]
        public DateTime ActionTakenAt { get; set; }


        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<CategoryEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum OtherEnum for other
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 1,
            
            /// <summary>
            /// Enum SpamEnum for spam
            /// </summary>
            [EnumMember(Value = "spam")]
            SpamEnum = 2,
            
            /// <summary>
            /// Enum ViolationEnum for violation
            /// </summary>
            [EnumMember(Value = "violation")]
            ViolationEnum = 3
        }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=true)]
        public CategoryEnum Category { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Forwarded
        /// </summary>
        [DataMember(Name="forwarded", EmitDefaultValue=true)]
        public bool Forwarded { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets RuleIds
        /// </summary>
        [DataMember(Name="rule_ids", EmitDefaultValue=false)]
        public List<int> RuleIds { get; set; }

        /// <summary>
        /// Gets or Sets StatusIds
        /// </summary>
        [DataMember(Name="status_ids", EmitDefaultValue=false)]
        public List<int> StatusIds { get; set; }

        /// <summary>
        /// Gets or Sets TargetAccount
        /// </summary>
        [DataMember(Name="target_account", EmitDefaultValue=false)]
        public Account TargetAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Report {\n");
            sb.Append("  ActionTaken: ").Append(ActionTaken).Append("\n");
            sb.Append("  ActionTakenAt: ").Append(ActionTakenAt).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Forwarded: ").Append(Forwarded).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RuleIds: ").Append(RuleIds).Append("\n");
            sb.Append("  StatusIds: ").Append(StatusIds).Append("\n");
            sb.Append("  TargetAccount: ").Append(TargetAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Report)obj);
        }

        /// <summary>
        /// Returns true if Report instances are equal
        /// </summary>
        /// <param name="other">Instance of Report to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Report other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActionTaken == other.ActionTaken ||
                    
                    ActionTaken.Equals(other.ActionTaken)
                ) && 
                (
                    ActionTakenAt == other.ActionTakenAt ||
                    ActionTakenAt != null &&
                    ActionTakenAt.Equals(other.ActionTakenAt)
                ) && 
                (
                    Category == other.Category ||
                    
                    Category.Equals(other.Category)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Forwarded == other.Forwarded ||
                    
                    Forwarded.Equals(other.Forwarded)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    RuleIds == other.RuleIds ||
                    RuleIds != null &&
                    other.RuleIds != null &&
                    RuleIds.SequenceEqual(other.RuleIds)
                ) && 
                (
                    StatusIds == other.StatusIds ||
                    StatusIds != null &&
                    other.StatusIds != null &&
                    StatusIds.SequenceEqual(other.StatusIds)
                ) && 
                (
                    TargetAccount == other.TargetAccount ||
                    TargetAccount != null &&
                    TargetAccount.Equals(other.TargetAccount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ActionTaken.GetHashCode();
                    if (ActionTakenAt != null)
                    hashCode = hashCode * 59 + ActionTakenAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Forwarded.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (RuleIds != null)
                    hashCode = hashCode * 59 + RuleIds.GetHashCode();
                    if (StatusIds != null)
                    hashCode = hashCode * 59 + StatusIds.GetHashCode();
                    if (TargetAccount != null)
                    hashCode = hashCode * 59 + TargetAccount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Report left, Report right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Report left, Report right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
