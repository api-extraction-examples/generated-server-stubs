/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents a user&#39;s preferences.
    /// </summary>
    [DataContract]
    public partial class Preferences : IEquatable<Preferences>
    {
        /// <summary>
        /// Default language for new posts. Equivalent to [Source#language](https://docs.joinmastodon.org/entities/source/#language). ISO 639-1 language two-letter code, or null
        /// </summary>
        /// <value>Default language for new posts. Equivalent to [Source#language](https://docs.joinmastodon.org/entities/source/#language). ISO 639-1 language two-letter code, or null</value>
        [DataMember(Name="posting:default:language", EmitDefaultValue=false)]
        public string Postingdefaultlanguage { get; set; }

        /// <summary>
        /// Default sensitivity flag for new posts. Equivalent to [Source#sensitive](https://docs.joinmastodon.org/entities/source/#sensitive).
        /// </summary>
        /// <value>Default sensitivity flag for new posts. Equivalent to [Source#sensitive](https://docs.joinmastodon.org/entities/source/#sensitive).</value>
        [DataMember(Name="posting:default:sensitive", EmitDefaultValue=true)]
        public bool Postingdefaultsensitive { get; set; }


        /// <summary>
        /// Default visibility for new posts. Equivalent to [Source#privacy](https://docs.joinmastodon.org/entities/source/#privacy).
        /// </summary>
        /// <value>Default visibility for new posts. Equivalent to [Source#privacy](https://docs.joinmastodon.org/entities/source/#privacy).</value>
        [TypeConverter(typeof(CustomEnumConverter<PostingdefaultvisibilityEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PostingdefaultvisibilityEnum
        {
            
            /// <summary>
            /// Enum PublicEnum for public
            /// </summary>
            [EnumMember(Value = "public")]
            PublicEnum = 1,
            
            /// <summary>
            /// Enum UnlistedEnum for unlisted
            /// </summary>
            [EnumMember(Value = "unlisted")]
            UnlistedEnum = 2,
            
            /// <summary>
            /// Enum PrivateEnum for private
            /// </summary>
            [EnumMember(Value = "private")]
            PrivateEnum = 3,
            
            /// <summary>
            /// Enum DirectEnum for direct
            /// </summary>
            [EnumMember(Value = "direct")]
            DirectEnum = 4
        }

        /// <summary>
        /// Default visibility for new posts. Equivalent to [Source#privacy](https://docs.joinmastodon.org/entities/source/#privacy).
        /// </summary>
        /// <value>Default visibility for new posts. Equivalent to [Source#privacy](https://docs.joinmastodon.org/entities/source/#privacy).</value>
        [DataMember(Name="posting:default:visibility", EmitDefaultValue=true)]
        public PostingdefaultvisibilityEnum Postingdefaultvisibility { get; set; }


        /// <summary>
        /// Whether media attachments should be automatically displayed or blurred/hidden.
        /// </summary>
        /// <value>Whether media attachments should be automatically displayed or blurred/hidden.</value>
        [TypeConverter(typeof(CustomEnumConverter<ReadingexpandmediaEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReadingexpandmediaEnum
        {
            
            /// <summary>
            /// Enum DefaultEnum for default
            /// </summary>
            [EnumMember(Value = "default")]
            DefaultEnum = 1,
            
            /// <summary>
            /// Enum ShowAllEnum for show_all
            /// </summary>
            [EnumMember(Value = "show_all")]
            ShowAllEnum = 2,
            
            /// <summary>
            /// Enum HideAllEnum for hide_all
            /// </summary>
            [EnumMember(Value = "hide_all")]
            HideAllEnum = 3
        }

        /// <summary>
        /// Whether media attachments should be automatically displayed or blurred/hidden.
        /// </summary>
        /// <value>Whether media attachments should be automatically displayed or blurred/hidden.</value>
        [DataMember(Name="reading:expand:media", EmitDefaultValue=true)]
        public ReadingexpandmediaEnum Readingexpandmedia { get; set; }

        /// <summary>
        /// Whether CWs should be expanded by default.
        /// </summary>
        /// <value>Whether CWs should be expanded by default.</value>
        [DataMember(Name="reading:expand:spoilers", EmitDefaultValue=true)]
        public bool Readingexpandspoilers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Preferences {\n");
            sb.Append("  Postingdefaultlanguage: ").Append(Postingdefaultlanguage).Append("\n");
            sb.Append("  Postingdefaultsensitive: ").Append(Postingdefaultsensitive).Append("\n");
            sb.Append("  Postingdefaultvisibility: ").Append(Postingdefaultvisibility).Append("\n");
            sb.Append("  Readingexpandmedia: ").Append(Readingexpandmedia).Append("\n");
            sb.Append("  Readingexpandspoilers: ").Append(Readingexpandspoilers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Preferences)obj);
        }

        /// <summary>
        /// Returns true if Preferences instances are equal
        /// </summary>
        /// <param name="other">Instance of Preferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Preferences other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Postingdefaultlanguage == other.Postingdefaultlanguage ||
                    Postingdefaultlanguage != null &&
                    Postingdefaultlanguage.Equals(other.Postingdefaultlanguage)
                ) && 
                (
                    Postingdefaultsensitive == other.Postingdefaultsensitive ||
                    
                    Postingdefaultsensitive.Equals(other.Postingdefaultsensitive)
                ) && 
                (
                    Postingdefaultvisibility == other.Postingdefaultvisibility ||
                    
                    Postingdefaultvisibility.Equals(other.Postingdefaultvisibility)
                ) && 
                (
                    Readingexpandmedia == other.Readingexpandmedia ||
                    
                    Readingexpandmedia.Equals(other.Readingexpandmedia)
                ) && 
                (
                    Readingexpandspoilers == other.Readingexpandspoilers ||
                    
                    Readingexpandspoilers.Equals(other.Readingexpandspoilers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Postingdefaultlanguage != null)
                    hashCode = hashCode * 59 + Postingdefaultlanguage.GetHashCode();
                    
                    hashCode = hashCode * 59 + Postingdefaultsensitive.GetHashCode();
                    
                    hashCode = hashCode * 59 + Postingdefaultvisibility.GetHashCode();
                    
                    hashCode = hashCode * 59 + Readingexpandmedia.GetHashCode();
                    
                    hashCode = hashCode * 59 + Readingexpandspoilers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Preferences left, Preferences right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Preferences left, Preferences right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
