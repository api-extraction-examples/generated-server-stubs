/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents the software instance of Mastodon running on this domain.
    /// </summary>
    [DataContract]
    public partial class Instance : IEquatable<Instance>
    {
        /// <summary>
        /// Whether registrations require moderator approval.
        /// </summary>
        /// <value>Whether registrations require moderator approval.</value>
        [Required]
        [DataMember(Name="approval_required", EmitDefaultValue=true)]
        public bool ApprovalRequired { get; set; }

        /// <summary>
        /// Gets or Sets ContactAccount
        /// </summary>
        [DataMember(Name="contact_account", EmitDefaultValue=false)]
        public Account ContactAccount { get; set; }

        /// <summary>
        /// Admin-defined description of the Mastodon site.
        /// </summary>
        /// <value>Admin-defined description of the Mastodon site.</value>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// An email that may be contacted for any inquiries.
        /// </summary>
        /// <value>An email that may be contacted for any inquiries.</value>
        [Required]
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Whether invites are enabled.
        /// </summary>
        /// <value>Whether invites are enabled.</value>
        [Required]
        [DataMember(Name="invites_enabled", EmitDefaultValue=true)]
        public bool InvitesEnabled { get; set; }

        /// <summary>
        /// Primary languages of the website and its staff. ISO 639 Part 1-5 language codes.
        /// </summary>
        /// <value>Primary languages of the website and its staff. ISO 639 Part 1-5 language codes.</value>
        [Required]
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<string> Languages { get; set; }

        /// <summary>
        /// Whether registrations are enabled.
        /// </summary>
        /// <value>Whether registrations are enabled.</value>
        [Required]
        [DataMember(Name="registrations", EmitDefaultValue=true)]
        public bool Registrations { get; set; }

        /// <summary>
        /// A shorter description defined by the admin.
        /// </summary>
        /// <value>A shorter description defined by the admin.</value>
        [Required]
        [DataMember(Name="short_description", EmitDefaultValue=false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Statistics about how much information the instance contains.
        /// </summary>
        /// <value>Statistics about how much information the instance contains.</value>
        [Required]
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public Object Stats { get; set; }

        /// <summary>
        /// Banner image for the website.
        /// </summary>
        /// <value>Banner image for the website.</value>
        [DataMember(Name="thumbnail", EmitDefaultValue=true)]
        public string Thumbnail { get; set; }

        /// <summary>
        /// The title of the website.
        /// </summary>
        /// <value>The title of the website.</value>
        [Required]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The domain name of the instance.
        /// </summary>
        /// <value>The domain name of the instance.</value>
        [Required]
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// URLs of interest for clients apps.
        /// </summary>
        /// <value>URLs of interest for clients apps.</value>
        [Required]
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public Object Urls { get; set; }

        /// <summary>
        /// The version of Mastodon installed on the instance.
        /// </summary>
        /// <value>The version of Mastodon installed on the instance.</value>
        [Required]
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Instance {\n");
            sb.Append("  ApprovalRequired: ").Append(ApprovalRequired).Append("\n");
            sb.Append("  ContactAccount: ").Append(ContactAccount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  InvitesEnabled: ").Append(InvitesEnabled).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  Registrations: ").Append(Registrations).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Instance)obj);
        }

        /// <summary>
        /// Returns true if Instance instances are equal
        /// </summary>
        /// <param name="other">Instance of Instance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Instance other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApprovalRequired == other.ApprovalRequired ||
                    
                    ApprovalRequired.Equals(other.ApprovalRequired)
                ) && 
                (
                    ContactAccount == other.ContactAccount ||
                    ContactAccount != null &&
                    ContactAccount.Equals(other.ContactAccount)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    InvitesEnabled == other.InvitesEnabled ||
                    
                    InvitesEnabled.Equals(other.InvitesEnabled)
                ) && 
                (
                    Languages == other.Languages ||
                    Languages != null &&
                    other.Languages != null &&
                    Languages.SequenceEqual(other.Languages)
                ) && 
                (
                    Registrations == other.Registrations ||
                    
                    Registrations.Equals(other.Registrations)
                ) && 
                (
                    ShortDescription == other.ShortDescription ||
                    ShortDescription != null &&
                    ShortDescription.Equals(other.ShortDescription)
                ) && 
                (
                    Stats == other.Stats ||
                    Stats != null &&
                    Stats.Equals(other.Stats)
                ) && 
                (
                    Thumbnail == other.Thumbnail ||
                    Thumbnail != null &&
                    Thumbnail.Equals(other.Thumbnail)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Uri == other.Uri ||
                    Uri != null &&
                    Uri.Equals(other.Uri)
                ) && 
                (
                    Urls == other.Urls ||
                    Urls != null &&
                    Urls.Equals(other.Urls)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ApprovalRequired.GetHashCode();
                    if (ContactAccount != null)
                    hashCode = hashCode * 59 + ContactAccount.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    
                    hashCode = hashCode * 59 + InvitesEnabled.GetHashCode();
                    if (Languages != null)
                    hashCode = hashCode * 59 + Languages.GetHashCode();
                    
                    hashCode = hashCode * 59 + Registrations.GetHashCode();
                    if (ShortDescription != null)
                    hashCode = hashCode * 59 + ShortDescription.GetHashCode();
                    if (Stats != null)
                    hashCode = hashCode * 59 + Stats.GetHashCode();
                    if (Thumbnail != null)
                    hashCode = hashCode * 59 + Thumbnail.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Uri != null)
                    hashCode = hashCode * 59 + Uri.GetHashCode();
                    if (Urls != null)
                    hashCode = hashCode * 59 + Urls.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Instance left, Instance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Instance left, Instance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
