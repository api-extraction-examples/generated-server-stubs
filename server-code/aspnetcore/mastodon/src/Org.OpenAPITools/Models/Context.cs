/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents the tree around a given status. Used for reconstructing threads of statuses.
    /// </summary>
    [DataContract]
    public partial class Context : IEquatable<Context>
    {
        /// <summary>
        /// Parents in the thread.
        /// </summary>
        /// <value>Parents in the thread.</value>
        [Required]
        [DataMember(Name="ancestors", EmitDefaultValue=false)]
        public List<Status> Ancestors { get; set; }

        /// <summary>
        /// Children in the thread.
        /// </summary>
        /// <value>Children in the thread.</value>
        [Required]
        [DataMember(Name="descendants", EmitDefaultValue=false)]
        public List<Status> Descendants { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Context {\n");
            sb.Append("  Ancestors: ").Append(Ancestors).Append("\n");
            sb.Append("  Descendants: ").Append(Descendants).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Context)obj);
        }

        /// <summary>
        /// Returns true if Context instances are equal
        /// </summary>
        /// <param name="other">Instance of Context to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Context other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Ancestors == other.Ancestors ||
                    Ancestors != null &&
                    other.Ancestors != null &&
                    Ancestors.SequenceEqual(other.Ancestors)
                ) && 
                (
                    Descendants == other.Descendants ||
                    Descendants != null &&
                    other.Descendants != null &&
                    Descendants.SequenceEqual(other.Descendants)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Ancestors != null)
                    hashCode = hashCode * 59 + Ancestors.GetHashCode();
                    if (Descendants != null)
                    hashCode = hashCode * 59 + Descendants.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Context left, Context right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Context left, Context right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
