/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents a subscription to the push streaming server.
    /// </summary>
    [DataContract]
    public partial class PushSubscription : IEquatable<PushSubscription>
    {
        /// <summary>
        /// Which alerts should be delivered to the &#x60;endpoint&#x60;.
        /// </summary>
        /// <value>Which alerts should be delivered to the &#x60;endpoint&#x60;.</value>
        [Required]
        [DataMember(Name="alerts", EmitDefaultValue=false)]
        public Object Alerts { get; set; }

        /// <summary>
        /// Where push alerts will be sent to.
        /// </summary>
        /// <value>Where push alerts will be sent to.</value>
        [Required]
        [DataMember(Name="endpoint", EmitDefaultValue=false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// The ID of the push subscription in the database. Cast from an integer, but not guaranteed to be a number.
        /// </summary>
        /// <value>The ID of the push subscription in the database. Cast from an integer, but not guaranteed to be a number.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The streaming server&#39;s VAPID key.
        /// </summary>
        /// <value>The streaming server&#39;s VAPID key.</value>
        [Required]
        [DataMember(Name="server_key", EmitDefaultValue=false)]
        public string ServerKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PushSubscription {\n");
            sb.Append("  Alerts: ").Append(Alerts).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ServerKey: ").Append(ServerKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PushSubscription)obj);
        }

        /// <summary>
        /// Returns true if PushSubscription instances are equal
        /// </summary>
        /// <param name="other">Instance of PushSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushSubscription other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Alerts == other.Alerts ||
                    Alerts != null &&
                    Alerts.Equals(other.Alerts)
                ) && 
                (
                    Endpoint == other.Endpoint ||
                    Endpoint != null &&
                    Endpoint.Equals(other.Endpoint)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ServerKey == other.ServerKey ||
                    ServerKey != null &&
                    ServerKey.Equals(other.ServerKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Alerts != null)
                    hashCode = hashCode * 59 + Alerts.GetHashCode();
                    if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ServerKey != null)
                    hashCode = hashCode * 59 + ServerKey.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PushSubscription left, PushSubscription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PushSubscription left, PushSubscription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
