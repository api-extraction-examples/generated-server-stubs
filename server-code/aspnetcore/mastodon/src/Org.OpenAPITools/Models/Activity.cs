/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents a weekly bucket of instance activity.
    /// </summary>
    [DataContract]
    public partial class Activity : IEquatable<Activity>
    {
        /// <summary>
        /// User logins since the week began, String (cast from an integer).
        /// </summary>
        /// <value>User logins since the week began, String (cast from an integer).</value>
        [DataMember(Name="logins", EmitDefaultValue=false)]
        public string Logins { get; set; }

        /// <summary>
        /// User registrations since the week began, String (cast from an integer).
        /// </summary>
        /// <value>User registrations since the week began, String (cast from an integer).</value>
        [DataMember(Name="registrations", EmitDefaultValue=false)]
        public string Registrations { get; set; }

        /// <summary>
        /// Statuses created since the week began, String (cast from an integer).
        /// </summary>
        /// <value>Statuses created since the week began, String (cast from an integer).</value>
        [DataMember(Name="statuses", EmitDefaultValue=false)]
        public string Statuses { get; set; }

        /// <summary>
        /// Midnight at the first day of the week.  (UNIX Timestamp).
        /// </summary>
        /// <value>Midnight at the first day of the week.  (UNIX Timestamp).</value>
        [DataMember(Name="week", EmitDefaultValue=false)]
        public string Week { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Activity {\n");
            sb.Append("  Logins: ").Append(Logins).Append("\n");
            sb.Append("  Registrations: ").Append(Registrations).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Activity)obj);
        }

        /// <summary>
        /// Returns true if Activity instances are equal
        /// </summary>
        /// <param name="other">Instance of Activity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Activity other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Logins == other.Logins ||
                    Logins != null &&
                    Logins.Equals(other.Logins)
                ) && 
                (
                    Registrations == other.Registrations ||
                    Registrations != null &&
                    Registrations.Equals(other.Registrations)
                ) && 
                (
                    Statuses == other.Statuses ||
                    Statuses != null &&
                    Statuses.Equals(other.Statuses)
                ) && 
                (
                    Week == other.Week ||
                    Week != null &&
                    Week.Equals(other.Week)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Logins != null)
                    hashCode = hashCode * 59 + Logins.GetHashCode();
                    if (Registrations != null)
                    hashCode = hashCode * 59 + Registrations.GetHashCode();
                    if (Statuses != null)
                    hashCode = hashCode * 59 + Statuses.GetHashCode();
                    if (Week != null)
                    hashCode = hashCode * 59 + Week.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Activity left, Activity right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Activity left, Activity right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
