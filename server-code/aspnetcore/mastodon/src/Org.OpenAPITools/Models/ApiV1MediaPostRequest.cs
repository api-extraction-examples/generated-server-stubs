/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApiV1MediaPostRequest : IEquatable<ApiV1MediaPostRequest>
    {
        /// <summary>
        /// A plain-text description of the media, for accessibility purposes.
        /// </summary>
        /// <value>A plain-text description of the media, for accessibility purposes.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The file to be attached, using multipart form data.
        /// </summary>
        /// <value>The file to be attached, using multipart form data.</value>
        [Required]
        [DataMember(Name="file", EmitDefaultValue=false)]
        public System.IO.Stream File { get; set; }

        /// <summary>
        /// Two floating points (x,y), comma-delimited, ranging from -1.0 to 1.0 (see “Focal points” below)
        /// </summary>
        /// <value>Two floating points (x,y), comma-delimited, ranging from -1.0 to 1.0 (see “Focal points” below)</value>
        [DataMember(Name="focus", EmitDefaultValue=false)]
        public string Focus { get; set; }

        /// <summary>
        /// The custom thumbnail of the media to be attached, using multipart form data.
        /// </summary>
        /// <value>The custom thumbnail of the media to be attached, using multipart form data.</value>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public System.IO.Stream Thumbnail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiV1MediaPostRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Focus: ").Append(Focus).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiV1MediaPostRequest)obj);
        }

        /// <summary>
        /// Returns true if ApiV1MediaPostRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiV1MediaPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV1MediaPostRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                ) && 
                (
                    Focus == other.Focus ||
                    Focus != null &&
                    Focus.Equals(other.Focus)
                ) && 
                (
                    Thumbnail == other.Thumbnail ||
                    Thumbnail != null &&
                    Thumbnail.Equals(other.Thumbnail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                    if (Focus != null)
                    hashCode = hashCode * 59 + Focus.GetHashCode();
                    if (Thumbnail != null)
                    hashCode = hashCode * 59 + Thumbnail.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApiV1MediaPostRequest left, ApiV1MediaPostRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiV1MediaPostRequest left, ApiV1MediaPostRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
