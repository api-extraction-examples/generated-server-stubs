/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApiV1ReportsPostRequest : IEquatable<ApiV1ReportsPostRequest>
    {
        /// <summary>
        /// ID of the account to report
        /// </summary>
        /// <value>ID of the account to report</value>
        [Required]
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Reason for the report (default max 1000 characters)
        /// </summary>
        /// <value>Reason for the report (default max 1000 characters)</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// If the account is remote, should the report be forwarded to the remote admin?
        /// </summary>
        /// <value>If the account is remote, should the report be forwarded to the remote admin?</value>
        [DataMember(Name="forward", EmitDefaultValue=true)]
        public bool Forward { get; set; }

        /// <summary>
        /// Array of Statuses to attach to the report, for context
        /// </summary>
        /// <value>Array of Statuses to attach to the report, for context</value>
        [DataMember(Name="status_ids", EmitDefaultValue=false)]
        public List<string> StatusIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiV1ReportsPostRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Forward: ").Append(Forward).Append("\n");
            sb.Append("  StatusIds: ").Append(StatusIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiV1ReportsPostRequest)obj);
        }

        /// <summary>
        /// Returns true if ApiV1ReportsPostRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiV1ReportsPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV1ReportsPostRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    Forward == other.Forward ||
                    
                    Forward.Equals(other.Forward)
                ) && 
                (
                    StatusIds == other.StatusIds ||
                    StatusIds != null &&
                    other.StatusIds != null &&
                    StatusIds.SequenceEqual(other.StatusIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    
                    hashCode = hashCode * 59 + Forward.GetHashCode();
                    if (StatusIds != null)
                    hashCode = hashCode * 59 + StatusIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApiV1ReportsPostRequest left, ApiV1ReportsPostRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiV1ReportsPostRequest left, ApiV1ReportsPostRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
