/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents a file or media attachment that can be added to a status.
    /// </summary>
    [DataContract]
    public partial class Attachment : IEquatable<Attachment>
    {
        /// <summary>
        /// A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.
        /// </summary>
        /// <value>A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.</value>
        [DataMember(Name="blurhash", EmitDefaultValue=false)]
        public string Blurhash { get; set; }

        /// <summary>
        /// Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.
        /// </summary>
        /// <value>Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the attachment in the database. Cast from an integer but not guaranteed to be a number
        /// </summary>
        /// <value>The ID of the attachment in the database. Cast from an integer but not guaranteed to be a number</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Metadata returned by Paperclip.
        /// </summary>
        /// <value>Metadata returned by Paperclip.</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Object Meta { get; set; }

        /// <summary>
        /// The location of a scaled-down preview of the attachment.
        /// </summary>
        /// <value>The location of a scaled-down preview of the attachment.</value>
        [Required]
        [DataMember(Name="preview_url", EmitDefaultValue=false)]
        public string PreviewUrl { get; set; }

        /// <summary>
        /// The location of the full-size original attachment on the remote website. String or null if the attachment is local.
        /// </summary>
        /// <value>The location of the full-size original attachment on the remote website. String or null if the attachment is local.</value>
        [DataMember(Name="remote_url", EmitDefaultValue=false)]
        public string RemoteUrl { get; set; }

        /// <summary>
        /// A shorter URL for the attachment.
        /// </summary>
        /// <value>A shorter URL for the attachment.</value>
        [DataMember(Name="text_url", EmitDefaultValue=false)]
        public string TextUrl { get; set; }


        /// <summary>
        /// The type of the attachment.
        /// </summary>
        /// <value>The type of the attachment.</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum UnknownEnum for unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            UnknownEnum = 1,
            
            /// <summary>
            /// Enum ImageEnum for image
            /// </summary>
            [EnumMember(Value = "image")]
            ImageEnum = 2,
            
            /// <summary>
            /// Enum GifvEnum for gifv
            /// </summary>
            [EnumMember(Value = "gifv")]
            GifvEnum = 3,
            
            /// <summary>
            /// Enum VideoEnum for video
            /// </summary>
            [EnumMember(Value = "video")]
            VideoEnum = 4,
            
            /// <summary>
            /// Enum AudioEnum for audio
            /// </summary>
            [EnumMember(Value = "audio")]
            AudioEnum = 5
        }

        /// <summary>
        /// The type of the attachment.
        /// </summary>
        /// <value>The type of the attachment.</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The location of the original full-size attachment.
        /// </summary>
        /// <value>The location of the original full-size attachment.</value>
        [Required]
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Attachment {\n");
            sb.Append("  Blurhash: ").Append(Blurhash).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  PreviewUrl: ").Append(PreviewUrl).Append("\n");
            sb.Append("  RemoteUrl: ").Append(RemoteUrl).Append("\n");
            sb.Append("  TextUrl: ").Append(TextUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Attachment)obj);
        }

        /// <summary>
        /// Returns true if Attachment instances are equal
        /// </summary>
        /// <param name="other">Instance of Attachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attachment other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Blurhash == other.Blurhash ||
                    Blurhash != null &&
                    Blurhash.Equals(other.Blurhash)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Meta == other.Meta ||
                    Meta != null &&
                    Meta.Equals(other.Meta)
                ) && 
                (
                    PreviewUrl == other.PreviewUrl ||
                    PreviewUrl != null &&
                    PreviewUrl.Equals(other.PreviewUrl)
                ) && 
                (
                    RemoteUrl == other.RemoteUrl ||
                    RemoteUrl != null &&
                    RemoteUrl.Equals(other.RemoteUrl)
                ) && 
                (
                    TextUrl == other.TextUrl ||
                    TextUrl != null &&
                    TextUrl.Equals(other.TextUrl)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Blurhash != null)
                    hashCode = hashCode * 59 + Blurhash.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Meta != null)
                    hashCode = hashCode * 59 + Meta.GetHashCode();
                    if (PreviewUrl != null)
                    hashCode = hashCode * 59 + PreviewUrl.GetHashCode();
                    if (RemoteUrl != null)
                    hashCode = hashCode * 59 + RemoteUrl.GetHashCode();
                    if (TextUrl != null)
                    hashCode = hashCode * 59 + TextUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Attachment left, Attachment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Attachment left, Attachment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
