/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApiV1AccountsUpdateCredentialsPatchRequest : IEquatable<ApiV1AccountsUpdateCredentialsPatchRequest>
    {
        /// <summary>
        /// Avatar image encoded using multipart/form-data
        /// </summary>
        /// <value>Avatar image encoded using multipart/form-data</value>
        [DataMember(Name="avatar", EmitDefaultValue=false)]
        public string Avatar { get; set; }

        /// <summary>
        /// Whether the account has a bot flag.
        /// </summary>
        /// <value>Whether the account has a bot flag.</value>
        [DataMember(Name="bot", EmitDefaultValue=true)]
        public bool Bot { get; set; }

        /// <summary>
        /// Whether the account should be shown in the profile directory.
        /// </summary>
        /// <value>Whether the account should be shown in the profile directory.</value>
        [DataMember(Name="discoverable", EmitDefaultValue=false)]
        public string Discoverable { get; set; }

        /// <summary>
        /// The display name to use for the profile.
        /// </summary>
        /// <value>The display name to use for the profile.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Profile metadata &#x60;name&#x60; and &#x60;value&#x60;. (By default, max 4 fields and 255 characters per property/value)
        /// </summary>
        /// <value>Profile metadata &#x60;name&#x60; and &#x60;value&#x60;. (By default, max 4 fields and 255 characters per property/value)</value>
        [DataMember(Name="fields_attributes", EmitDefaultValue=false)]
        public Object FieldsAttributes { get; set; }

        /// <summary>
        /// Header image encoded using multipart/form-data
        /// </summary>
        /// <value>Header image encoded using multipart/form-data</value>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }

        /// <summary>
        /// Whether manual approval of follow requests is required.
        /// </summary>
        /// <value>Whether manual approval of follow requests is required.</value>
        [DataMember(Name="locked", EmitDefaultValue=true)]
        public bool Locked { get; set; }

        /// <summary>
        /// The account bio.
        /// </summary>
        /// <value>The account bio.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public ApiV1AccountsUpdateCredentialsPatchRequestSource Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiV1AccountsUpdateCredentialsPatchRequest {\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Bot: ").Append(Bot).Append("\n");
            sb.Append("  Discoverable: ").Append(Discoverable).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FieldsAttributes: ").Append(FieldsAttributes).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiV1AccountsUpdateCredentialsPatchRequest)obj);
        }

        /// <summary>
        /// Returns true if ApiV1AccountsUpdateCredentialsPatchRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiV1AccountsUpdateCredentialsPatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV1AccountsUpdateCredentialsPatchRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Avatar == other.Avatar ||
                    Avatar != null &&
                    Avatar.Equals(other.Avatar)
                ) && 
                (
                    Bot == other.Bot ||
                    
                    Bot.Equals(other.Bot)
                ) && 
                (
                    Discoverable == other.Discoverable ||
                    Discoverable != null &&
                    Discoverable.Equals(other.Discoverable)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    FieldsAttributes == other.FieldsAttributes ||
                    FieldsAttributes != null &&
                    FieldsAttributes.Equals(other.FieldsAttributes)
                ) && 
                (
                    Header == other.Header ||
                    Header != null &&
                    Header.Equals(other.Header)
                ) && 
                (
                    Locked == other.Locked ||
                    
                    Locked.Equals(other.Locked)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Avatar != null)
                    hashCode = hashCode * 59 + Avatar.GetHashCode();
                    
                    hashCode = hashCode * 59 + Bot.GetHashCode();
                    if (Discoverable != null)
                    hashCode = hashCode * 59 + Discoverable.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (FieldsAttributes != null)
                    hashCode = hashCode * 59 + FieldsAttributes.GetHashCode();
                    if (Header != null)
                    hashCode = hashCode * 59 + Header.GetHashCode();
                    
                    hashCode = hashCode * 59 + Locked.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApiV1AccountsUpdateCredentialsPatchRequest left, ApiV1AccountsUpdateCredentialsPatchRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiV1AccountsUpdateCredentialsPatchRequest left, ApiV1AccountsUpdateCredentialsPatchRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
