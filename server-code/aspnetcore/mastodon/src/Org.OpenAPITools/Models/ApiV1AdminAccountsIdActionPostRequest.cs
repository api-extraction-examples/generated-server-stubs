/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApiV1AdminAccountsIdActionPostRequest : IEquatable<ApiV1AdminAccountsIdActionPostRequest>
    {
        /// <summary>
        /// ID of an associated report that caused this action to be taken
        /// </summary>
        /// <value>ID of an associated report that caused this action to be taken</value>
        [DataMember(Name="report_id", EmitDefaultValue=false)]
        public string ReportId { get; set; }

        /// <summary>
        /// Whether an email should be sent to the user with the above information.
        /// </summary>
        /// <value>Whether an email should be sent to the user with the above information.</value>
        [DataMember(Name="send_email_notification", EmitDefaultValue=true)]
        public bool SendEmailNotification { get; set; }

        /// <summary>
        /// Additional text for clarification of why this action was taken
        /// </summary>
        /// <value>Additional text for clarification of why this action was taken</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }


        /// <summary>
        /// Type of action to be taken. Enumerable oneOf: none disable silence suspend
        /// </summary>
        /// <value>Type of action to be taken. Enumerable oneOf: none disable silence suspend</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 1,
            
            /// <summary>
            /// Enum DisableEnum for disable
            /// </summary>
            [EnumMember(Value = "disable")]
            DisableEnum = 2,
            
            /// <summary>
            /// Enum SilenceEnum for silence
            /// </summary>
            [EnumMember(Value = "silence")]
            SilenceEnum = 3,
            
            /// <summary>
            /// Enum SuspendEnum for suspend
            /// </summary>
            [EnumMember(Value = "suspend")]
            SuspendEnum = 4
        }

        /// <summary>
        /// Type of action to be taken. Enumerable oneOf: none disable silence suspend
        /// </summary>
        /// <value>Type of action to be taken. Enumerable oneOf: none disable silence suspend</value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// ID of a preset warning
        /// </summary>
        /// <value>ID of a preset warning</value>
        [DataMember(Name="warning_preset_id", EmitDefaultValue=false)]
        public string WarningPresetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiV1AdminAccountsIdActionPostRequest {\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  SendEmailNotification: ").Append(SendEmailNotification).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WarningPresetId: ").Append(WarningPresetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiV1AdminAccountsIdActionPostRequest)obj);
        }

        /// <summary>
        /// Returns true if ApiV1AdminAccountsIdActionPostRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiV1AdminAccountsIdActionPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV1AdminAccountsIdActionPostRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReportId == other.ReportId ||
                    ReportId != null &&
                    ReportId.Equals(other.ReportId)
                ) && 
                (
                    SendEmailNotification == other.SendEmailNotification ||
                    
                    SendEmailNotification.Equals(other.SendEmailNotification)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    WarningPresetId == other.WarningPresetId ||
                    WarningPresetId != null &&
                    WarningPresetId.Equals(other.WarningPresetId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReportId != null)
                    hashCode = hashCode * 59 + ReportId.GetHashCode();
                    
                    hashCode = hashCode * 59 + SendEmailNotification.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (WarningPresetId != null)
                    hashCode = hashCode * 59 + WarningPresetId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApiV1AdminAccountsIdActionPostRequest left, ApiV1AdminAccountsIdActionPostRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiV1AdminAccountsIdActionPostRequest left, ApiV1AdminAccountsIdActionPostRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
