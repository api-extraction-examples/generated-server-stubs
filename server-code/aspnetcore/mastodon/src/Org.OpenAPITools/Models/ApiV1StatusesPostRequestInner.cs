/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApiV1StatusesPostRequestInner : IEquatable<ApiV1StatusesPostRequestInner>
    {
        /// <summary>
        /// ID of the status being replied to, if status is a reply
        /// </summary>
        /// <value>ID of the status being replied to, if status is a reply</value>
        [DataMember(Name="in_reply_to_id", EmitDefaultValue=false)]
        public string InReplyToId { get; set; }

        /// <summary>
        /// ISO 639 language code for this status.
        /// </summary>
        /// <value>ISO 639 language code for this status.</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Array of Attachment ids to be attached as media. If provided, &#x60;status&#x60; becomes optional, and &#x60;poll&#x60; cannot be used.
        /// </summary>
        /// <value>Array of Attachment ids to be attached as media. If provided, &#x60;status&#x60; becomes optional, and &#x60;poll&#x60; cannot be used.</value>
        [DataMember(Name="media_ids", EmitDefaultValue=false)]
        public List<string> MediaIds { get; set; }

        /// <summary>
        /// Gets or Sets Poll
        /// </summary>
        [DataMember(Name="poll", EmitDefaultValue=false)]
        public List<Object> Poll { get; set; }

        /// <summary>
        /// ISO 8601 Datetime at which to schedule a status. Providing this paramter will cause ScheduledStatus to be returned instead of Status. Must be at least 5 minutes in the future.
        /// </summary>
        /// <value>ISO 8601 Datetime at which to schedule a status. Providing this paramter will cause ScheduledStatus to be returned instead of Status. Must be at least 5 minutes in the future.</value>
        [DataMember(Name="scheduled_at", EmitDefaultValue=false)]
        public string ScheduledAt { get; set; }

        /// <summary>
        /// Mark status and attached media as sensitive?
        /// </summary>
        /// <value>Mark status and attached media as sensitive?</value>
        [DataMember(Name="sensitive", EmitDefaultValue=true)]
        public bool Sensitive { get; set; }

        /// <summary>
        /// Text to be shown as a warning or subject before the actual content. Statuses are generally collapsed behind this field.
        /// </summary>
        /// <value>Text to be shown as a warning or subject before the actual content. Statuses are generally collapsed behind this field.</value>
        [DataMember(Name="spoiler_text", EmitDefaultValue=false)]
        public string SpoilerText { get; set; }

        /// <summary>
        /// Text content of the status. If &#x60;media_ids&#x60; is provided, this becomes optional. Attaching a &#x60;poll&#x60; is optional while &#x60;status&#x60; is provided.
        /// </summary>
        /// <value>Text content of the status. If &#x60;media_ids&#x60; is provided, this becomes optional. Attaching a &#x60;poll&#x60; is optional while &#x60;status&#x60; is provided.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }


        /// <summary>
        /// Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.
        /// </summary>
        /// <value>Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.</value>
        [TypeConverter(typeof(CustomEnumConverter<VisibilityEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum VisibilityEnum
        {
            
            /// <summary>
            /// Enum PublicEnum for public
            /// </summary>
            [EnumMember(Value = "public")]
            PublicEnum = 1,
            
            /// <summary>
            /// Enum UnlistedEnum for unlisted
            /// </summary>
            [EnumMember(Value = "unlisted")]
            UnlistedEnum = 2,
            
            /// <summary>
            /// Enum PrivateEnum for private
            /// </summary>
            [EnumMember(Value = "private")]
            PrivateEnum = 3,
            
            /// <summary>
            /// Enum DirectEnum for direct
            /// </summary>
            [EnumMember(Value = "direct")]
            DirectEnum = 4
        }

        /// <summary>
        /// Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.
        /// </summary>
        /// <value>Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.</value>
        [DataMember(Name="visibility", EmitDefaultValue=true)]
        public VisibilityEnum Visibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiV1StatusesPostRequestInner {\n");
            sb.Append("  InReplyToId: ").Append(InReplyToId).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MediaIds: ").Append(MediaIds).Append("\n");
            sb.Append("  Poll: ").Append(Poll).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("  Sensitive: ").Append(Sensitive).Append("\n");
            sb.Append("  SpoilerText: ").Append(SpoilerText).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiV1StatusesPostRequestInner)obj);
        }

        /// <summary>
        /// Returns true if ApiV1StatusesPostRequestInner instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiV1StatusesPostRequestInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV1StatusesPostRequestInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InReplyToId == other.InReplyToId ||
                    InReplyToId != null &&
                    InReplyToId.Equals(other.InReplyToId)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    MediaIds == other.MediaIds ||
                    MediaIds != null &&
                    other.MediaIds != null &&
                    MediaIds.SequenceEqual(other.MediaIds)
                ) && 
                (
                    Poll == other.Poll ||
                    Poll != null &&
                    other.Poll != null &&
                    Poll.SequenceEqual(other.Poll)
                ) && 
                (
                    ScheduledAt == other.ScheduledAt ||
                    ScheduledAt != null &&
                    ScheduledAt.Equals(other.ScheduledAt)
                ) && 
                (
                    Sensitive == other.Sensitive ||
                    
                    Sensitive.Equals(other.Sensitive)
                ) && 
                (
                    SpoilerText == other.SpoilerText ||
                    SpoilerText != null &&
                    SpoilerText.Equals(other.SpoilerText)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Visibility == other.Visibility ||
                    
                    Visibility.Equals(other.Visibility)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InReplyToId != null)
                    hashCode = hashCode * 59 + InReplyToId.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (MediaIds != null)
                    hashCode = hashCode * 59 + MediaIds.GetHashCode();
                    if (Poll != null)
                    hashCode = hashCode * 59 + Poll.GetHashCode();
                    if (ScheduledAt != null)
                    hashCode = hashCode * 59 + ScheduledAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Sensitive.GetHashCode();
                    if (SpoilerText != null)
                    hashCode = hashCode * 59 + SpoilerText.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + Visibility.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApiV1StatusesPostRequestInner left, ApiV1StatusesPostRequestInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiV1StatusesPostRequestInner left, ApiV1StatusesPostRequestInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
