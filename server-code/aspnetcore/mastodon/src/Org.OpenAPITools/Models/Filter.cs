/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents a user-defined filter for determining which statuses should not be shown to the user.
    /// </summary>
    [DataContract]
    public partial class Filter : IEquatable<Filter>
    {

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ContextEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            
            /// <summary>
            /// Enum HomeEnum for home
            /// </summary>
            [EnumMember(Value = "home")]
            HomeEnum = 1,
            
            /// <summary>
            /// Enum NotificationsEnum for notifications
            /// </summary>
            [EnumMember(Value = "notifications")]
            NotificationsEnum = 2,
            
            /// <summary>
            /// Enum PublicEnum for public
            /// </summary>
            [EnumMember(Value = "public")]
            PublicEnum = 3,
            
            /// <summary>
            /// Enum ThreadEnum for thread
            /// </summary>
            [EnumMember(Value = "thread")]
            ThreadEnum = 4
        }

        /// <summary>
        /// The contexts in which the filter should be applied.
        /// </summary>
        /// <value>The contexts in which the filter should be applied.</value>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public List<Filter.ContextEnum> Context { get; set; }

        /// <summary>
        /// When the filter should no longer be applied. ISO 8601 Datetime, or null if the filter does not expire
        /// </summary>
        /// <value>When the filter should no longer be applied. ISO 8601 Datetime, or null if the filter does not expire</value>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// The ID of the filter in the database. Cast from an integer, but not guaranteed to be a number.
        /// </summary>
        /// <value>The ID of the filter in the database. Cast from an integer, but not guaranteed to be a number.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Should matching entities in home and notifications be dropped by the server?
        /// </summary>
        /// <value>Should matching entities in home and notifications be dropped by the server?</value>
        [DataMember(Name="irreversible", EmitDefaultValue=true)]
        public bool Irreversible { get; set; }

        /// <summary>
        /// The text to be filtered.
        /// </summary>
        /// <value>The text to be filtered.</value>
        [DataMember(Name="phrase", EmitDefaultValue=false)]
        public string Phrase { get; set; }

        /// <summary>
        /// Should the filter consider word boundaries?
        /// </summary>
        /// <value>Should the filter consider word boundaries?</value>
        [DataMember(Name="whole_word", EmitDefaultValue=true)]
        public bool WholeWord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Filter {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Irreversible: ").Append(Irreversible).Append("\n");
            sb.Append("  Phrase: ").Append(Phrase).Append("\n");
            sb.Append("  WholeWord: ").Append(WholeWord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Filter)obj);
        }

        /// <summary>
        /// Returns true if Filter instances are equal
        /// </summary>
        /// <param name="other">Instance of Filter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Filter other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Context == other.Context ||
                    Context != null &&
                    other.Context != null &&
                    Context.SequenceEqual(other.Context)
                ) && 
                (
                    ExpiresAt == other.ExpiresAt ||
                    ExpiresAt != null &&
                    ExpiresAt.Equals(other.ExpiresAt)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Irreversible == other.Irreversible ||
                    
                    Irreversible.Equals(other.Irreversible)
                ) && 
                (
                    Phrase == other.Phrase ||
                    Phrase != null &&
                    Phrase.Equals(other.Phrase)
                ) && 
                (
                    WholeWord == other.WholeWord ||
                    
                    WholeWord.Equals(other.WholeWord)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                    if (ExpiresAt != null)
                    hashCode = hashCode * 59 + ExpiresAt.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Irreversible.GetHashCode();
                    if (Phrase != null)
                    hashCode = hashCode * 59 + Phrase.GetHashCode();
                    
                    hashCode = hashCode * 59 + WholeWord.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Filter left, Filter right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Filter left, Filter right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
