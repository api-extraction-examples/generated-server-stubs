/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApiV1StatusesPost200Response : IEquatable<ApiV1StatusesPost200Response>
    {
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public Account Account { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name="application", EmitDefaultValue=false)]
        public Application Application { get; set; }

        /// <summary>
        /// Have you bookmarked this status?
        /// </summary>
        /// <value>Have you bookmarked this status?</value>
        [DataMember(Name="bookmarked", EmitDefaultValue=true)]
        public bool Bookmarked { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public Card Card { get; set; }

        /// <summary>
        /// HTML-encoded status content.
        /// </summary>
        /// <value>HTML-encoded status content.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// The date when this status was created.
        /// </summary>
        /// <value>The date when this status was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Custom emoji to be used when rendering status content.
        /// </summary>
        /// <value>Custom emoji to be used when rendering status content.</value>
        [DataMember(Name="emojis", EmitDefaultValue=false)]
        public List<Emoji> Emojis { get; set; }

        /// <summary>
        /// Have you favourited this status?
        /// </summary>
        /// <value>Have you favourited this status?</value>
        [DataMember(Name="favourited", EmitDefaultValue=true)]
        public bool Favourited { get; set; }

        /// <summary>
        /// How many favourites this status has received.
        /// </summary>
        /// <value>How many favourites this status has received.</value>
        [DataMember(Name="favourites_count", EmitDefaultValue=true)]
        public int FavouritesCount { get; set; }

        /// <summary>
        /// ID of the scheduled status in the database. Cast from an integer, but not guaranteed to be a number.
        /// </summary>
        /// <value>ID of the scheduled status in the database. Cast from an integer, but not guaranteed to be a number.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// ID of the account being replied to.
        /// </summary>
        /// <value>ID of the account being replied to.</value>
        [DataMember(Name="in_reply_to_account_id", EmitDefaultValue=false)]
        public string InReplyToAccountId { get; set; }

        /// <summary>
        /// ID of the status being replied. Cast from an integer but not guaranteed to be a number.
        /// </summary>
        /// <value>ID of the status being replied. Cast from an integer but not guaranteed to be a number.</value>
        [DataMember(Name="in_reply_to_id", EmitDefaultValue=false)]
        public string InReplyToId { get; set; }

        /// <summary>
        /// Primary language of this status. ISO 639 Part 1 two-letter language code.
        /// </summary>
        /// <value>Primary language of this status. ISO 639 Part 1 two-letter language code.</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Array of attachements
        /// </summary>
        /// <value>Array of attachements</value>
        [Required]
        [DataMember(Name="media_attachments", EmitDefaultValue=false)]
        public List<Attachment> MediaAttachments { get; set; }

        /// <summary>
        /// Mentions of users within the status content.
        /// </summary>
        /// <value>Mentions of users within the status content.</value>
        [DataMember(Name="mentions", EmitDefaultValue=false)]
        public List<Mention> Mentions { get; set; }

        /// <summary>
        /// Have you muted notifications for this status&#39;s conversation?
        /// </summary>
        /// <value>Have you muted notifications for this status&#39;s conversation?</value>
        [DataMember(Name="muted", EmitDefaultValue=true)]
        public bool Muted { get; set; }

        /// <summary>
        /// Have you pinned this status? Only appears if the status is pinnable.
        /// </summary>
        /// <value>Have you pinned this status? Only appears if the status is pinnable.</value>
        [DataMember(Name="pinned", EmitDefaultValue=true)]
        public bool Pinned { get; set; }

        /// <summary>
        /// Gets or Sets Poll
        /// </summary>
        [DataMember(Name="poll", EmitDefaultValue=false)]
        public Poll Poll { get; set; }

        /// <summary>
        /// Gets or Sets Reblog
        /// </summary>
        [DataMember(Name="reblog", EmitDefaultValue=false)]
        public Status Reblog { get; set; }

        /// <summary>
        /// Have you boosted this status?
        /// </summary>
        /// <value>Have you boosted this status?</value>
        [DataMember(Name="reblogged", EmitDefaultValue=true)]
        public bool Reblogged { get; set; }

        /// <summary>
        /// How many boosts this status has received.
        /// </summary>
        /// <value>How many boosts this status has received.</value>
        [DataMember(Name="reblogs_count", EmitDefaultValue=true)]
        public int ReblogsCount { get; set; }

        /// <summary>
        /// How many replies this status has received.
        /// </summary>
        /// <value>How many replies this status has received.</value>
        [DataMember(Name="replies_count", EmitDefaultValue=true)]
        public int RepliesCount { get; set; }

        /// <summary>
        /// Is this status marked as sensitive content?
        /// </summary>
        /// <value>Is this status marked as sensitive content?</value>
        [DataMember(Name="sensitive", EmitDefaultValue=true)]
        public bool Sensitive { get; set; }

        /// <summary>
        /// Subject or summary line, below which status content is collapsed until expanded.
        /// </summary>
        /// <value>Subject or summary line, below which status content is collapsed until expanded.</value>
        [DataMember(Name="spoiler_text", EmitDefaultValue=false)]
        public string SpoilerText { get; set; }

        /// <summary>
        /// Hashtags used within the status content.
        /// </summary>
        /// <value>Hashtags used within the status content.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<Tag> Tags { get; set; }

        /// <summary>
        /// Plain-text source of a status. Returned instead of &#x60;content&#x60; when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.
        /// </summary>
        /// <value>Plain-text source of a status. Returned instead of &#x60;content&#x60; when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// URI of the status used for federation.
        /// </summary>
        /// <value>URI of the status used for federation.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// A link to the status&#39;s HTML representation.
        /// </summary>
        /// <value>A link to the status&#39;s HTML representation.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }


        /// <summary>
        /// Visibility of this status.
        /// </summary>
        /// <value>Visibility of this status.</value>
        [TypeConverter(typeof(CustomEnumConverter<VisibilityEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum VisibilityEnum
        {
            
            /// <summary>
            /// Enum PublicEnum for public
            /// </summary>
            [EnumMember(Value = "public")]
            PublicEnum = 1,
            
            /// <summary>
            /// Enum UnlistedEnum for unlisted
            /// </summary>
            [EnumMember(Value = "unlisted")]
            UnlistedEnum = 2,
            
            /// <summary>
            /// Enum PrivateEnum for private
            /// </summary>
            [EnumMember(Value = "private")]
            PrivateEnum = 3,
            
            /// <summary>
            /// Enum DirectEnum for direct
            /// </summary>
            [EnumMember(Value = "direct")]
            DirectEnum = 4
        }

        /// <summary>
        /// Visibility of this status.
        /// </summary>
        /// <value>Visibility of this status.</value>
        [DataMember(Name="visibility", EmitDefaultValue=true)]
        public VisibilityEnum Visibility { get; set; }

        /// <summary>
        /// Gets or Sets VarParams
        /// </summary>
        [Required]
        [DataMember(Name="params", EmitDefaultValue=false)]
        public StatusParams VarParams { get; set; }

        /// <summary>
        /// ID of the status in the database. ISO 8601 Datetime.
        /// </summary>
        /// <value>ID of the status in the database. ISO 8601 Datetime.</value>
        [Required]
        [DataMember(Name="scheduled_at", EmitDefaultValue=false)]
        public DateTime ScheduledAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiV1StatusesPost200Response {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Bookmarked: ").Append(Bookmarked).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Emojis: ").Append(Emojis).Append("\n");
            sb.Append("  Favourited: ").Append(Favourited).Append("\n");
            sb.Append("  FavouritesCount: ").Append(FavouritesCount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InReplyToAccountId: ").Append(InReplyToAccountId).Append("\n");
            sb.Append("  InReplyToId: ").Append(InReplyToId).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MediaAttachments: ").Append(MediaAttachments).Append("\n");
            sb.Append("  Mentions: ").Append(Mentions).Append("\n");
            sb.Append("  Muted: ").Append(Muted).Append("\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  Poll: ").Append(Poll).Append("\n");
            sb.Append("  Reblog: ").Append(Reblog).Append("\n");
            sb.Append("  Reblogged: ").Append(Reblogged).Append("\n");
            sb.Append("  ReblogsCount: ").Append(ReblogsCount).Append("\n");
            sb.Append("  RepliesCount: ").Append(RepliesCount).Append("\n");
            sb.Append("  Sensitive: ").Append(Sensitive).Append("\n");
            sb.Append("  SpoilerText: ").Append(SpoilerText).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  VarParams: ").Append(VarParams).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiV1StatusesPost200Response)obj);
        }

        /// <summary>
        /// Returns true if ApiV1StatusesPost200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiV1StatusesPost200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV1StatusesPost200Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    Application == other.Application ||
                    Application != null &&
                    Application.Equals(other.Application)
                ) && 
                (
                    Bookmarked == other.Bookmarked ||
                    
                    Bookmarked.Equals(other.Bookmarked)
                ) && 
                (
                    Card == other.Card ||
                    Card != null &&
                    Card.Equals(other.Card)
                ) && 
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Emojis == other.Emojis ||
                    Emojis != null &&
                    other.Emojis != null &&
                    Emojis.SequenceEqual(other.Emojis)
                ) && 
                (
                    Favourited == other.Favourited ||
                    
                    Favourited.Equals(other.Favourited)
                ) && 
                (
                    FavouritesCount == other.FavouritesCount ||
                    
                    FavouritesCount.Equals(other.FavouritesCount)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    InReplyToAccountId == other.InReplyToAccountId ||
                    InReplyToAccountId != null &&
                    InReplyToAccountId.Equals(other.InReplyToAccountId)
                ) && 
                (
                    InReplyToId == other.InReplyToId ||
                    InReplyToId != null &&
                    InReplyToId.Equals(other.InReplyToId)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    MediaAttachments == other.MediaAttachments ||
                    MediaAttachments != null &&
                    other.MediaAttachments != null &&
                    MediaAttachments.SequenceEqual(other.MediaAttachments)
                ) && 
                (
                    Mentions == other.Mentions ||
                    Mentions != null &&
                    other.Mentions != null &&
                    Mentions.SequenceEqual(other.Mentions)
                ) && 
                (
                    Muted == other.Muted ||
                    
                    Muted.Equals(other.Muted)
                ) && 
                (
                    Pinned == other.Pinned ||
                    
                    Pinned.Equals(other.Pinned)
                ) && 
                (
                    Poll == other.Poll ||
                    Poll != null &&
                    Poll.Equals(other.Poll)
                ) && 
                (
                    Reblog == other.Reblog ||
                    Reblog != null &&
                    Reblog.Equals(other.Reblog)
                ) && 
                (
                    Reblogged == other.Reblogged ||
                    
                    Reblogged.Equals(other.Reblogged)
                ) && 
                (
                    ReblogsCount == other.ReblogsCount ||
                    
                    ReblogsCount.Equals(other.ReblogsCount)
                ) && 
                (
                    RepliesCount == other.RepliesCount ||
                    
                    RepliesCount.Equals(other.RepliesCount)
                ) && 
                (
                    Sensitive == other.Sensitive ||
                    
                    Sensitive.Equals(other.Sensitive)
                ) && 
                (
                    SpoilerText == other.SpoilerText ||
                    SpoilerText != null &&
                    SpoilerText.Equals(other.SpoilerText)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Uri == other.Uri ||
                    Uri != null &&
                    Uri.Equals(other.Uri)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Visibility == other.Visibility ||
                    
                    Visibility.Equals(other.Visibility)
                ) && 
                (
                    VarParams == other.VarParams ||
                    VarParams != null &&
                    VarParams.Equals(other.VarParams)
                ) && 
                (
                    ScheduledAt == other.ScheduledAt ||
                    ScheduledAt != null &&
                    ScheduledAt.Equals(other.ScheduledAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (Application != null)
                    hashCode = hashCode * 59 + Application.GetHashCode();
                    
                    hashCode = hashCode * 59 + Bookmarked.GetHashCode();
                    if (Card != null)
                    hashCode = hashCode * 59 + Card.GetHashCode();
                    if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Emojis != null)
                    hashCode = hashCode * 59 + Emojis.GetHashCode();
                    
                    hashCode = hashCode * 59 + Favourited.GetHashCode();
                    
                    hashCode = hashCode * 59 + FavouritesCount.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (InReplyToAccountId != null)
                    hashCode = hashCode * 59 + InReplyToAccountId.GetHashCode();
                    if (InReplyToId != null)
                    hashCode = hashCode * 59 + InReplyToId.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (MediaAttachments != null)
                    hashCode = hashCode * 59 + MediaAttachments.GetHashCode();
                    if (Mentions != null)
                    hashCode = hashCode * 59 + Mentions.GetHashCode();
                    
                    hashCode = hashCode * 59 + Muted.GetHashCode();
                    
                    hashCode = hashCode * 59 + Pinned.GetHashCode();
                    if (Poll != null)
                    hashCode = hashCode * 59 + Poll.GetHashCode();
                    if (Reblog != null)
                    hashCode = hashCode * 59 + Reblog.GetHashCode();
                    
                    hashCode = hashCode * 59 + Reblogged.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReblogsCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + RepliesCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + Sensitive.GetHashCode();
                    if (SpoilerText != null)
                    hashCode = hashCode * 59 + SpoilerText.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Uri != null)
                    hashCode = hashCode * 59 + Uri.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    
                    hashCode = hashCode * 59 + Visibility.GetHashCode();
                    if (VarParams != null)
                    hashCode = hashCode * 59 + VarParams.GetHashCode();
                    if (ScheduledAt != null)
                    hashCode = hashCode * 59 + ScheduledAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApiV1StatusesPost200Response left, ApiV1StatusesPost200Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiV1StatusesPost200Response left, ApiV1StatusesPost200Response right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
