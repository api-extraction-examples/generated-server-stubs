/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents the relationship between accounts, such as following / blocking / muting / etc.
    /// </summary>
    [DataContract]
    public partial class Relationship : IEquatable<Relationship>
    {
        /// <summary>
        /// Is this user blocking you?
        /// </summary>
        /// <value>Is this user blocking you?</value>
        [Required]
        [DataMember(Name="blocked_by", EmitDefaultValue=true)]
        public bool BlockedBy { get; set; }

        /// <summary>
        /// Are you blocking this user?
        /// </summary>
        /// <value>Are you blocking this user?</value>
        [Required]
        [DataMember(Name="blocking", EmitDefaultValue=true)]
        public bool Blocking { get; set; }

        /// <summary>
        /// Are you blocking this user&#39;s domain?
        /// </summary>
        /// <value>Are you blocking this user&#39;s domain?</value>
        [Required]
        [DataMember(Name="domain_blocking", EmitDefaultValue=true)]
        public bool DomainBlocking { get; set; }

        /// <summary>
        /// Are you featuring this user on your profile?
        /// </summary>
        /// <value>Are you featuring this user on your profile?</value>
        [Required]
        [DataMember(Name="endorsed", EmitDefaultValue=true)]
        public bool Endorsed { get; set; }

        /// <summary>
        /// Are you followed by this user?
        /// </summary>
        /// <value>Are you followed by this user?</value>
        [Required]
        [DataMember(Name="followed_by", EmitDefaultValue=true)]
        public bool FollowedBy { get; set; }

        /// <summary>
        /// Are you following this user?
        /// </summary>
        /// <value>Are you following this user?</value>
        [Required]
        [DataMember(Name="following", EmitDefaultValue=true)]
        public bool Following { get; set; }

        /// <summary>
        /// The account id. Cast from an integer, but not guaranteed to be a number.
        /// </summary>
        /// <value>The account id. Cast from an integer, but not guaranteed to be a number.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Are you muting this user?
        /// </summary>
        /// <value>Are you muting this user?</value>
        [Required]
        [DataMember(Name="muting", EmitDefaultValue=true)]
        public bool Muting { get; set; }

        /// <summary>
        /// Are you muting notifications from this user?
        /// </summary>
        /// <value>Are you muting notifications from this user?</value>
        [Required]
        [DataMember(Name="muting_notifications", EmitDefaultValue=true)]
        public bool MutingNotifications { get; set; }

        /// <summary>
        /// This user&#39;s profile bio
        /// </summary>
        /// <value>This user&#39;s profile bio</value>
        [Required]
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Have you enabled notifications for this user?
        /// </summary>
        /// <value>Have you enabled notifications for this user?</value>
        [Required]
        [DataMember(Name="notifying", EmitDefaultValue=true)]
        public bool Notifying { get; set; }

        /// <summary>
        /// Do you have a pending follow request for this user?
        /// </summary>
        /// <value>Do you have a pending follow request for this user?</value>
        [Required]
        [DataMember(Name="requested", EmitDefaultValue=true)]
        public bool Requested { get; set; }

        /// <summary>
        /// Are you receiving this user&#39;s boosts in your home timeline?
        /// </summary>
        /// <value>Are you receiving this user&#39;s boosts in your home timeline?</value>
        [Required]
        [DataMember(Name="showing_reblogs", EmitDefaultValue=true)]
        public bool ShowingReblogs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Relationship {\n");
            sb.Append("  BlockedBy: ").Append(BlockedBy).Append("\n");
            sb.Append("  Blocking: ").Append(Blocking).Append("\n");
            sb.Append("  DomainBlocking: ").Append(DomainBlocking).Append("\n");
            sb.Append("  Endorsed: ").Append(Endorsed).Append("\n");
            sb.Append("  FollowedBy: ").Append(FollowedBy).Append("\n");
            sb.Append("  Following: ").Append(Following).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Muting: ").Append(Muting).Append("\n");
            sb.Append("  MutingNotifications: ").Append(MutingNotifications).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Notifying: ").Append(Notifying).Append("\n");
            sb.Append("  Requested: ").Append(Requested).Append("\n");
            sb.Append("  ShowingReblogs: ").Append(ShowingReblogs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Relationship)obj);
        }

        /// <summary>
        /// Returns true if Relationship instances are equal
        /// </summary>
        /// <param name="other">Instance of Relationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Relationship other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BlockedBy == other.BlockedBy ||
                    
                    BlockedBy.Equals(other.BlockedBy)
                ) && 
                (
                    Blocking == other.Blocking ||
                    
                    Blocking.Equals(other.Blocking)
                ) && 
                (
                    DomainBlocking == other.DomainBlocking ||
                    
                    DomainBlocking.Equals(other.DomainBlocking)
                ) && 
                (
                    Endorsed == other.Endorsed ||
                    
                    Endorsed.Equals(other.Endorsed)
                ) && 
                (
                    FollowedBy == other.FollowedBy ||
                    
                    FollowedBy.Equals(other.FollowedBy)
                ) && 
                (
                    Following == other.Following ||
                    
                    Following.Equals(other.Following)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Muting == other.Muting ||
                    
                    Muting.Equals(other.Muting)
                ) && 
                (
                    MutingNotifications == other.MutingNotifications ||
                    
                    MutingNotifications.Equals(other.MutingNotifications)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) && 
                (
                    Notifying == other.Notifying ||
                    
                    Notifying.Equals(other.Notifying)
                ) && 
                (
                    Requested == other.Requested ||
                    
                    Requested.Equals(other.Requested)
                ) && 
                (
                    ShowingReblogs == other.ShowingReblogs ||
                    
                    ShowingReblogs.Equals(other.ShowingReblogs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + BlockedBy.GetHashCode();
                    
                    hashCode = hashCode * 59 + Blocking.GetHashCode();
                    
                    hashCode = hashCode * 59 + DomainBlocking.GetHashCode();
                    
                    hashCode = hashCode * 59 + Endorsed.GetHashCode();
                    
                    hashCode = hashCode * 59 + FollowedBy.GetHashCode();
                    
                    hashCode = hashCode * 59 + Following.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Muting.GetHashCode();
                    
                    hashCode = hashCode * 59 + MutingNotifications.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    
                    hashCode = hashCode * 59 + Notifying.GetHashCode();
                    
                    hashCode = hashCode * 59 + Requested.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowingReblogs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Relationship left, Relationship right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Relationship left, Relationship right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
