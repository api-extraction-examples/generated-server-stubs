/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents a rich preview card that is generated using OpenGraph tags from a URL.
    /// </summary>
    [DataContract]
    public partial class Card : IEquatable<Card>
    {
        /// <summary>
        /// The author of the original resource.
        /// </summary>
        /// <value>The author of the original resource.</value>
        [DataMember(Name="author_name", EmitDefaultValue=false)]
        public string AuthorName { get; set; }

        /// <summary>
        /// A link to the author of the original resource.
        /// </summary>
        /// <value>A link to the author of the original resource.</value>
        [DataMember(Name="author_url", EmitDefaultValue=false)]
        public string AuthorUrl { get; set; }

        /// <summary>
        /// A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.
        /// </summary>
        /// <value>A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.</value>
        [DataMember(Name="blurhash", EmitDefaultValue=false)]
        public string Blurhash { get; set; }

        /// <summary>
        /// Description of preview.
        /// </summary>
        /// <value>Description of preview.</value>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Height of preview, in pixels.
        /// </summary>
        /// <value>Height of preview, in pixels.</value>
        [DataMember(Name="height", EmitDefaultValue=true)]
        public int Height { get; set; }

        /// <summary>
        /// HTML to be used for generating the preview card.
        /// </summary>
        /// <value>HTML to be used for generating the preview card.</value>
        [DataMember(Name="html", EmitDefaultValue=false)]
        public string Html { get; set; }

        /// <summary>
        /// Preview thumbnail (URL).
        /// </summary>
        /// <value>Preview thumbnail (URL).</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// The provider of the original resource.
        /// </summary>
        /// <value>The provider of the original resource.</value>
        [DataMember(Name="provider_name", EmitDefaultValue=false)]
        public string ProviderName { get; set; }

        /// <summary>
        /// A link to the provider of the original resource.
        /// </summary>
        /// <value>A link to the provider of the original resource.</value>
        [DataMember(Name="provider_url", EmitDefaultValue=false)]
        public string ProviderUrl { get; set; }

        /// <summary>
        /// Title of linked resource.
        /// </summary>
        /// <value>Title of linked resource.</value>
        [Required]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }


        /// <summary>
        /// The type of the preview card. String (Enumerable, oneOf).
        /// </summary>
        /// <value>The type of the preview card. String (Enumerable, oneOf).</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum LinkEnum for link
            /// </summary>
            [EnumMember(Value = "link")]
            LinkEnum = 1,
            
            /// <summary>
            /// Enum PhotoEnum for photo
            /// </summary>
            [EnumMember(Value = "photo")]
            PhotoEnum = 2,
            
            /// <summary>
            /// Enum VideoEnum for video
            /// </summary>
            [EnumMember(Value = "video")]
            VideoEnum = 3,
            
            /// <summary>
            /// Enum RichEnum for rich
            /// </summary>
            [EnumMember(Value = "rich")]
            RichEnum = 4
        }

        /// <summary>
        /// The type of the preview card. String (Enumerable, oneOf).
        /// </summary>
        /// <value>The type of the preview card. String (Enumerable, oneOf).</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Location of linked resource.
        /// </summary>
        /// <value>Location of linked resource.</value>
        [Required]
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Width of preview, in pixels.
        /// </summary>
        /// <value>Width of preview, in pixels.</value>
        [DataMember(Name="width", EmitDefaultValue=true)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Card {\n");
            sb.Append("  AuthorName: ").Append(AuthorName).Append("\n");
            sb.Append("  AuthorUrl: ").Append(AuthorUrl).Append("\n");
            sb.Append("  Blurhash: ").Append(Blurhash).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ProviderUrl: ").Append(ProviderUrl).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Card)obj);
        }

        /// <summary>
        /// Returns true if Card instances are equal
        /// </summary>
        /// <param name="other">Instance of Card to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Card other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AuthorName == other.AuthorName ||
                    AuthorName != null &&
                    AuthorName.Equals(other.AuthorName)
                ) && 
                (
                    AuthorUrl == other.AuthorUrl ||
                    AuthorUrl != null &&
                    AuthorUrl.Equals(other.AuthorUrl)
                ) && 
                (
                    Blurhash == other.Blurhash ||
                    Blurhash != null &&
                    Blurhash.Equals(other.Blurhash)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Height == other.Height ||
                    
                    Height.Equals(other.Height)
                ) && 
                (
                    Html == other.Html ||
                    Html != null &&
                    Html.Equals(other.Html)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.Equals(other.Image)
                ) && 
                (
                    ProviderName == other.ProviderName ||
                    ProviderName != null &&
                    ProviderName.Equals(other.ProviderName)
                ) && 
                (
                    ProviderUrl == other.ProviderUrl ||
                    ProviderUrl != null &&
                    ProviderUrl.Equals(other.ProviderUrl)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Width == other.Width ||
                    
                    Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AuthorName != null)
                    hashCode = hashCode * 59 + AuthorName.GetHashCode();
                    if (AuthorUrl != null)
                    hashCode = hashCode * 59 + AuthorUrl.GetHashCode();
                    if (Blurhash != null)
                    hashCode = hashCode * 59 + Blurhash.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + Height.GetHashCode();
                    if (Html != null)
                    hashCode = hashCode * 59 + Html.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (ProviderName != null)
                    hashCode = hashCode * 59 + ProviderName.GetHashCode();
                    if (ProviderUrl != null)
                    hashCode = hashCode * 59 + ProviderUrl.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    
                    hashCode = hashCode * 59 + Width.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Card left, Card right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Card left, Card right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
