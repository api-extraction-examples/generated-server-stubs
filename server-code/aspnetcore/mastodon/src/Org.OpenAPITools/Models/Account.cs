/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents a user of Mastodon and their associated profile.
    /// </summary>
    [DataContract]
    public partial class Account : IEquatable<Account>
    {
        /// <summary>
        /// The Webfinger account URI. Equal to &#x60;username&#x60; for local users, or &#x60;username@domain&#x60; for
        /// </summary>
        /// <value>The Webfinger account URI. Equal to &#x60;username&#x60; for local users, or &#x60;username@domain&#x60; for</value>
        [DataMember(Name="acct", EmitDefaultValue=false)]
        public string Acct { get; set; }

        /// <summary>
        /// An image icon that is shown next to statuses and in the profile. The format is URL.
        /// </summary>
        /// <value>An image icon that is shown next to statuses and in the profile. The format is URL.</value>
        [DataMember(Name="avatar", EmitDefaultValue=false)]
        public string Avatar { get; set; }

        /// <summary>
        /// A static version of the avatar. Equal to &#x60;avatar&#x60; if its value is a static image; different if &#x60;avatar&#x60; is an animated GIF. The format is URL.
        /// </summary>
        /// <value>A static version of the avatar. Equal to &#x60;avatar&#x60; if its value is a static image; different if &#x60;avatar&#x60; is an animated GIF. The format is URL.</value>
        [DataMember(Name="avatar_static", EmitDefaultValue=false)]
        public string AvatarStatic { get; set; }

        /// <summary>
        /// A presentational flag. Indicates that the account may perform automated actions, may not be monitored, or identifies as a robot.
        /// </summary>
        /// <value>A presentational flag. Indicates that the account may perform automated actions, may not be monitored, or identifies as a robot.</value>
        [DataMember(Name="bot", EmitDefaultValue=true)]
        public bool Bot { get; set; }

        /// <summary>
        /// When the account was created.
        /// </summary>
        /// <value>When the account was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Whether the account has opted into discovery features such as the profile directory.
        /// </summary>
        /// <value>Whether the account has opted into discovery features such as the profile directory.</value>
        [DataMember(Name="discoverable", EmitDefaultValue=true)]
        public bool Discoverable { get; set; }

        /// <summary>
        /// The profile&#39;s display name.
        /// </summary>
        /// <value>The profile&#39;s display name.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Custom emoji entities to be used when rendering the profile. If none, an empty array will be returned.
        /// </summary>
        /// <value>Custom emoji entities to be used when rendering the profile. If none, an empty array will be returned.</value>
        [DataMember(Name="emojis", EmitDefaultValue=false)]
        public List<Emoji> Emojis { get; set; }

        /// <summary>
        /// Additional metadata attached to a profile as name-value pairs.
        /// </summary>
        /// <value>Additional metadata attached to a profile as name-value pairs.</value>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<Field> Fields { get; set; }

        /// <summary>
        /// The reported followers of this profile.
        /// </summary>
        /// <value>The reported followers of this profile.</value>
        [DataMember(Name="followers_count", EmitDefaultValue=true)]
        public int FollowersCount { get; set; }

        /// <summary>
        /// The reported follows of this profile.
        /// </summary>
        /// <value>The reported follows of this profile.</value>
        [DataMember(Name="following_count", EmitDefaultValue=true)]
        public int FollowingCount { get; set; }

        /// <summary>
        /// An image banner that is shown above the profile and in profile cards. The format is URL.
        /// </summary>
        /// <value>An image banner that is shown above the profile and in profile cards. The format is URL.</value>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }

        /// <summary>
        /// A static version of the header. Equal to &#x60;header&#x60; if its value is a static image; different if &#x60;header&#x60; is an animated GIF. The format is URL.
        /// </summary>
        /// <value>A static version of the header. Equal to &#x60;header&#x60; if its value is a static image; different if &#x60;header&#x60; is an animated GIF. The format is URL.</value>
        [DataMember(Name="header_static", EmitDefaultValue=false)]
        public string HeaderStatic { get; set; }

        /// <summary>
        /// The account id &#x60;header&#x60;.
        /// </summary>
        /// <value>The account id &#x60;header&#x60;.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// When the most recent status was posted.
        /// </summary>
        /// <value>When the most recent status was posted.</value>
        [DataMember(Name="last_status_at", EmitDefaultValue=false)]
        public DateTime LastStatusAt { get; set; }

        /// <summary>
        /// Whether the account manually approves follow requests.
        /// </summary>
        /// <value>Whether the account manually approves follow requests.</value>
        [DataMember(Name="locked", EmitDefaultValue=true)]
        public bool Locked { get; set; }

        /// <summary>
        /// Gets or Sets Moved
        /// </summary>
        [DataMember(Name="moved", EmitDefaultValue=false)]
        public Account Moved { get; set; }

        /// <summary>
        /// When a timed mute will expire, if applicable. ISO 8601 Datetime.
        /// </summary>
        /// <value>When a timed mute will expire, if applicable. ISO 8601 Datetime.</value>
        [DataMember(Name="mute_expires_at", EmitDefaultValue=false)]
        public DateTime MuteExpiresAt { get; set; }

        /// <summary>
        /// The profile&#39;s bio / description.
        /// </summary>
        /// <value>The profile&#39;s bio / description.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public Source Source { get; set; }

        /// <summary>
        /// How many statuses are attached to this account.
        /// </summary>
        /// <value>How many statuses are attached to this account.</value>
        [DataMember(Name="statuses_count", EmitDefaultValue=true)]
        public int StatusesCount { get; set; }

        /// <summary>
        /// An extra entity returned when an account is suspended.
        /// </summary>
        /// <value>An extra entity returned when an account is suspended.</value>
        [DataMember(Name="suspended", EmitDefaultValue=true)]
        public bool Suspended { get; set; }

        /// <summary>
        /// The location of the user&#39;s profile page. (HTTPS URL)
        /// </summary>
        /// <value>The location of the user&#39;s profile page. (HTTPS URL)</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The username of the account, not including domain.
        /// </summary>
        /// <value>The username of the account, not including domain.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Acct: ").Append(Acct).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  AvatarStatic: ").Append(AvatarStatic).Append("\n");
            sb.Append("  Bot: ").Append(Bot).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Discoverable: ").Append(Discoverable).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Emojis: ").Append(Emojis).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  FollowersCount: ").Append(FollowersCount).Append("\n");
            sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  HeaderStatic: ").Append(HeaderStatic).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastStatusAt: ").Append(LastStatusAt).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Moved: ").Append(Moved).Append("\n");
            sb.Append("  MuteExpiresAt: ").Append(MuteExpiresAt).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  StatusesCount: ").Append(StatusesCount).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Account)obj);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="other">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Acct == other.Acct ||
                    Acct != null &&
                    Acct.Equals(other.Acct)
                ) && 
                (
                    Avatar == other.Avatar ||
                    Avatar != null &&
                    Avatar.Equals(other.Avatar)
                ) && 
                (
                    AvatarStatic == other.AvatarStatic ||
                    AvatarStatic != null &&
                    AvatarStatic.Equals(other.AvatarStatic)
                ) && 
                (
                    Bot == other.Bot ||
                    
                    Bot.Equals(other.Bot)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Discoverable == other.Discoverable ||
                    
                    Discoverable.Equals(other.Discoverable)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    Emojis == other.Emojis ||
                    Emojis != null &&
                    other.Emojis != null &&
                    Emojis.SequenceEqual(other.Emojis)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    other.Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    FollowersCount == other.FollowersCount ||
                    
                    FollowersCount.Equals(other.FollowersCount)
                ) && 
                (
                    FollowingCount == other.FollowingCount ||
                    
                    FollowingCount.Equals(other.FollowingCount)
                ) && 
                (
                    Header == other.Header ||
                    Header != null &&
                    Header.Equals(other.Header)
                ) && 
                (
                    HeaderStatic == other.HeaderStatic ||
                    HeaderStatic != null &&
                    HeaderStatic.Equals(other.HeaderStatic)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LastStatusAt == other.LastStatusAt ||
                    LastStatusAt != null &&
                    LastStatusAt.Equals(other.LastStatusAt)
                ) && 
                (
                    Locked == other.Locked ||
                    
                    Locked.Equals(other.Locked)
                ) && 
                (
                    Moved == other.Moved ||
                    Moved != null &&
                    Moved.Equals(other.Moved)
                ) && 
                (
                    MuteExpiresAt == other.MuteExpiresAt ||
                    MuteExpiresAt != null &&
                    MuteExpiresAt.Equals(other.MuteExpiresAt)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    StatusesCount == other.StatusesCount ||
                    
                    StatusesCount.Equals(other.StatusesCount)
                ) && 
                (
                    Suspended == other.Suspended ||
                    
                    Suspended.Equals(other.Suspended)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Acct != null)
                    hashCode = hashCode * 59 + Acct.GetHashCode();
                    if (Avatar != null)
                    hashCode = hashCode * 59 + Avatar.GetHashCode();
                    if (AvatarStatic != null)
                    hashCode = hashCode * 59 + AvatarStatic.GetHashCode();
                    
                    hashCode = hashCode * 59 + Bot.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Discoverable.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (Emojis != null)
                    hashCode = hashCode * 59 + Emojis.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    
                    hashCode = hashCode * 59 + FollowersCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + FollowingCount.GetHashCode();
                    if (Header != null)
                    hashCode = hashCode * 59 + Header.GetHashCode();
                    if (HeaderStatic != null)
                    hashCode = hashCode * 59 + HeaderStatic.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LastStatusAt != null)
                    hashCode = hashCode * 59 + LastStatusAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Locked.GetHashCode();
                    if (Moved != null)
                    hashCode = hashCode * 59 + Moved.GetHashCode();
                    if (MuteExpiresAt != null)
                    hashCode = hashCode * 59 + MuteExpiresAt.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    
                    hashCode = hashCode * 59 + StatusesCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + Suspended.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Account left, Account right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Account left, Account right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
