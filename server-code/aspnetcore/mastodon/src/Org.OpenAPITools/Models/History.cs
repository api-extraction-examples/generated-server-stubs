/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Represents daily usage history of a hashtag.
    /// </summary>
    [DataContract]
    public partial class History : IEquatable<History>
    {
        /// <summary>
        /// the total of accounts using the tag within that day. Cast from an integer.
        /// </summary>
        /// <value>the total of accounts using the tag within that day. Cast from an integer.</value>
        [Required]
        [DataMember(Name="accounts", EmitDefaultValue=false)]
        public string Accounts { get; set; }

        /// <summary>
        /// UNIX timestamp on midnight of the given day.
        /// </summary>
        /// <value>UNIX timestamp on midnight of the given day.</value>
        [Required]
        [DataMember(Name="day", EmitDefaultValue=false)]
        public string Day { get; set; }

        /// <summary>
        /// the counted usage of the tag within that day. Cast from an integer.
        /// </summary>
        /// <value>the counted usage of the tag within that day. Cast from an integer.</value>
        [Required]
        [DataMember(Name="uses", EmitDefaultValue=false)]
        public string Uses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class History {\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Uses: ").Append(Uses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((History)obj);
        }

        /// <summary>
        /// Returns true if History instances are equal
        /// </summary>
        /// <param name="other">Instance of History to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(History other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Accounts == other.Accounts ||
                    Accounts != null &&
                    Accounts.Equals(other.Accounts)
                ) && 
                (
                    Day == other.Day ||
                    Day != null &&
                    Day.Equals(other.Day)
                ) && 
                (
                    Uses == other.Uses ||
                    Uses != null &&
                    Uses.Equals(other.Uses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Accounts != null)
                    hashCode = hashCode * 59 + Accounts.GetHashCode();
                    if (Day != null)
                    hashCode = hashCode * 59 + Day.GetHashCode();
                    if (Uses != null)
                    hashCode = hashCode * 59 + Uses.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(History left, History right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(History left, History right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
