/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Provides information about the signed in user. </remarks>
        /// <response code="200">signed in user</response>
        [HttpGet]
        [Route("/api/v1/me")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("MeGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "signed in user")]
        public virtual IActionResult MeGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));
            string exampleJson = null;
            exampleJson = "{\n  \"days_left_in_trial\" : 1,\n  \"projects\" : \"{}\",\n  \"parallelism\" : 2,\n  \"admin\" : true,\n  \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"sign_in_count\" : 7,\n  \"bitbucket\" : 0,\n  \"login\" : \"login\",\n  \"pusher_id\" : \"pusher_id\",\n  \"all_emails\" : [ \"all_emails\", \"all_emails\" ],\n  \"gravatar_id\" : 5,\n  \"organization_prefs\" : \"{}\",\n  \"plan\" : \"plan\",\n  \"github_oauth_scopes\" : [ \"github_oauth_scopes\", \"github_oauth_scopes\" ],\n  \"bitbucket_authorized\" : true,\n  \"analytics_id\" : \"analytics_id\",\n  \"trial_end\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"enrolled_betas\" : [ \"enrolled_betas\", \"enrolled_betas\" ],\n  \"basic_email_prefs\" : \"basic_email_prefs\",\n  \"avatar_url\" : \"https://openapi-generator.tech\",\n  \"in_beta_program\" : true,\n  \"selected_email\" : \"selected_email\",\n  \"dev_admin\" : true,\n  \"heroku_api_key\" : \"heroku_api_key\",\n  \"name\" : \"name\",\n  \"containers\" : 6,\n  \"github_id\" : 5\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default(User);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Clears the cache for a project. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <response code="200">status message</response>
        [HttpDelete]
        [Route("/api/v1/project/{username}/{project}/build-cache")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectBuildCacheDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectUsernameProjectBuildCacheDelete200Response), description: "status message")]
        public virtual IActionResult ProjectUsernameProjectBuildCacheDelete([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectUsernameProjectBuildCacheDelete200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"status\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectUsernameProjectBuildCacheDelete200Response>(exampleJson)
            : default(ProjectUsernameProjectBuildCacheDelete200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>List the artifacts produced by a given build. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="buildNum">XXXXXXXXXX </param>
        /// <response code="200">List the artifacts produced by a given build</response>
        [HttpGet]
        [Route("/api/v1/project/{username}/{project}/{build_num}/artifacts")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectBuildNumArtifactsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Artifact>), description: "List the artifacts produced by a given build")]
        public virtual IActionResult ProjectUsernameProjectBuildNumArtifactsGet([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromRoute (Name = "build_num")][Required]int buildNum)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Artifact>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"path\" : \"path\",\n  \"node_index\" : 0,\n  \"pretty_path\" : \"pretty_path\",\n  \"url\" : \"url\"\n}, {\n  \"path\" : \"path\",\n  \"node_index\" : 0,\n  \"pretty_path\" : \"pretty_path\",\n  \"url\" : \"url\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Artifact>>(exampleJson)
            : default(List<Artifact>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Cancels the build, returns a summary of the build. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="buildNum">XXXXXXXXXX </param>
        /// <response code="200">returns a summary of the build</response>
        [HttpPost]
        [Route("/api/v1/project/{username}/{project}/{build_num}/cancel")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectBuildNumCancelPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Build), description: "returns a summary of the build")]
        public virtual IActionResult ProjectUsernameProjectBuildNumCancelPost([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromRoute (Name = "build_num")][Required]int buildNum)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Build));
            string exampleJson = null;
            exampleJson = "{\n  \"retry_of\" : 5,\n  \"committer_email\" : \"committer_email\",\n  \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"previous\" : {\n    \"build_num\" : 6,\n    \"build_time_millis\" : 1\n  },\n  \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"subject\" : \"subject\",\n  \"vcs_url\" : \"https://openapi-generator.tech\",\n  \"build_time_millis\" : 0,\n  \"dont_build\" : \"dont_build\",\n  \"why\" : \"why\",\n  \"body\" : \"body\",\n  \"branch\" : \"branch\",\n  \"committer_name\" : \"committer_name\",\n  \"start_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"reponame\" : \"reponame\",\n  \"build_url\" : \"https://openapi-generator.tech\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Build>(exampleJson)
            : default(Build);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Full details for a single build. The response includes all of the fields from the build summary. This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named &#39;payload&#39;. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="buildNum">XXXXXXXXXX </param>
        /// <response code="200">Full details for a single build</response>
        [HttpGet]
        [Route("/api/v1/project/{username}/{project}/{build_num}")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectBuildNumGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BuildDetail), description: "Full details for a single build")]
        public virtual IActionResult ProjectUsernameProjectBuildNumGet([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromRoute (Name = "build_num")][Required]int buildNum)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BuildDetail));
            string exampleJson = null;
            exampleJson = "{\n  \"all_commit_details\" : [ {\n    \"author_name\" : \"author_name\",\n    \"author_login\" : \"author_login\",\n    \"commit_url\" : \"https://openapi-generator.tech\",\n    \"committer_email\" : \"committer_email\",\n    \"committer_login\" : \"committer_login\",\n    \"subject\" : \"subject\",\n    \"author_date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"commit\" : \"commit\",\n    \"author_email\" : \"author_email\",\n    \"committer_date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"body\" : \"body\",\n    \"committer_name\" : \"committer_name\"\n  }, {\n    \"author_name\" : \"author_name\",\n    \"author_login\" : \"author_login\",\n    \"commit_url\" : \"https://openapi-generator.tech\",\n    \"committer_email\" : \"committer_email\",\n    \"committer_login\" : \"committer_login\",\n    \"subject\" : \"subject\",\n    \"author_date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"commit\" : \"commit\",\n    \"author_email\" : \"author_email\",\n    \"committer_date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"body\" : \"body\",\n    \"committer_name\" : \"committer_name\"\n  } ],\n  \"node\" : \"\",\n  \"retries\" : true,\n  \"compare\" : \"https://openapi-generator.tech\",\n  \"timedout\" : true,\n  \"job_name\" : \"job_name\",\n  \"previous_successful_build\" : {\n    \"build_num\" : 6,\n    \"build_time_millis\" : 1\n  },\n  \"ssh_enabled\" : true,\n  \"usage_queued_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"user\" : {\n    \"days_left_in_trial\" : 1,\n    \"projects\" : \"{}\",\n    \"parallelism\" : 2,\n    \"admin\" : true,\n    \"created_at\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sign_in_count\" : 7,\n    \"bitbucket\" : 0,\n    \"login\" : \"login\",\n    \"pusher_id\" : \"pusher_id\",\n    \"all_emails\" : [ \"all_emails\", \"all_emails\" ],\n    \"gravatar_id\" : 5,\n    \"organization_prefs\" : \"{}\",\n    \"plan\" : \"plan\",\n    \"github_oauth_scopes\" : [ \"github_oauth_scopes\", \"github_oauth_scopes\" ],\n    \"bitbucket_authorized\" : true,\n    \"analytics_id\" : \"analytics_id\",\n    \"trial_end\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"enrolled_betas\" : [ \"enrolled_betas\", \"enrolled_betas\" ],\n    \"basic_email_prefs\" : \"basic_email_prefs\",\n    \"avatar_url\" : \"https://openapi-generator.tech\",\n    \"in_beta_program\" : true,\n    \"selected_email\" : \"selected_email\",\n    \"dev_admin\" : true,\n    \"heroku_api_key\" : \"heroku_api_key\",\n    \"name\" : \"name\",\n    \"containers\" : 6,\n    \"github_id\" : 5\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BuildDetail>(exampleJson)
            : default(BuildDetail);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retries the build, returns a summary of the new build. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="buildNum">XXXXXXXXXX </param>
        /// <response code="200">returns a summary of the new build</response>
        [HttpPost]
        [Route("/api/v1/project/{username}/{project}/{build_num}/retry")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectBuildNumRetryPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Build), description: "returns a summary of the new build")]
        public virtual IActionResult ProjectUsernameProjectBuildNumRetryPost([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromRoute (Name = "build_num")][Required]int buildNum)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Build));
            string exampleJson = null;
            exampleJson = "{\n  \"retry_of\" : 5,\n  \"committer_email\" : \"committer_email\",\n  \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"previous\" : {\n    \"build_num\" : 6,\n    \"build_time_millis\" : 1\n  },\n  \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"subject\" : \"subject\",\n  \"vcs_url\" : \"https://openapi-generator.tech\",\n  \"build_time_millis\" : 0,\n  \"dont_build\" : \"dont_build\",\n  \"why\" : \"why\",\n  \"body\" : \"body\",\n  \"branch\" : \"branch\",\n  \"committer_name\" : \"committer_name\",\n  \"start_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"reponame\" : \"reponame\",\n  \"build_url\" : \"https://openapi-generator.tech\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Build>(exampleJson)
            : default(Build);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Provides test metadata for a build Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/) </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="buildNum">XXXXXXXXXX </param>
        /// <response code="200">test metadata for a build </response>
        [HttpGet]
        [Route("/api/v1/project/{username}/{project}/{build_num}/tests")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectBuildNumTestsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Tests), description: "test metadata for a build ")]
        public virtual IActionResult ProjectUsernameProjectBuildNumTestsGet([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromRoute (Name = "build_num")][Required]int buildNum)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Tests));
            string exampleJson = null;
            exampleJson = "{\n  \"tests\" : [ {\n    \"file\" : \"file\",\n    \"classname\" : \"classname\",\n    \"run_time\" : 0.8008281904610115,\n    \"name\" : \"name\",\n    \"source\" : \"source\",\n    \"message\" : \"message\"\n  }, {\n    \"file\" : \"file\",\n    \"classname\" : \"classname\",\n    \"run_time\" : 0.8008281904610115,\n    \"name\" : \"name\",\n    \"source\" : \"source\",\n    \"message\" : \"message\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Tests>(exampleJson)
            : default(Tests);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a checkout key. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="fingerprint">XXXXXXXXXX </param>
        /// <response code="200">status message</response>
        [HttpDelete]
        [Route("/api/v1/project/{username}/{project}/checkout-key/{fingerprint}")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectCheckoutKeyFingerprintDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response), description: "status message")]
        public virtual IActionResult ProjectUsernameProjectCheckoutKeyFingerprintDelete([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromRoute (Name = "fingerprint")][Required]string fingerprint)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response>(exampleJson)
            : default(ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a checkout key. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="fingerprint">XXXXXXXXXX </param>
        /// <response code="200">checkout key</response>
        [HttpGet]
        [Route("/api/v1/project/{username}/{project}/checkout-key/{fingerprint}")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectCheckoutKeyFingerprintGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Key), description: "checkout key")]
        public virtual IActionResult ProjectUsernameProjectCheckoutKeyFingerprintGet([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromRoute (Name = "fingerprint")][Required]string fingerprint)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Key));
            string exampleJson = null;
            exampleJson = "{\n  \"public_key\" : \"public_key\",\n  \"fingerprint\" : \"fingerprint\",\n  \"time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"type\" : \"deploy-key\",\n  \"preferred\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Key>(exampleJson)
            : default(Key);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Lists checkout keys. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <response code="200">checkout keys</response>
        [HttpGet]
        [Route("/api/v1/project/{username}/{project}/checkout-key")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectCheckoutKeyGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Key>), description: "checkout keys")]
        public virtual IActionResult ProjectUsernameProjectCheckoutKeyGet([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Key>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"public_key\" : \"public_key\",\n  \"fingerprint\" : \"fingerprint\",\n  \"time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"type\" : \"deploy-key\",\n  \"preferred\" : true\n}, {\n  \"public_key\" : \"public_key\",\n  \"fingerprint\" : \"fingerprint\",\n  \"time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"type\" : \"deploy-key\",\n  \"preferred\" : true\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Key>>(exampleJson)
            : default(List<Key>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Creates a new checkout key. Only usable with a user API token. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="body">The type of key to create. Can be &#39;deploy-key&#39; or &#39;github-user-key&#39;. </param>
        /// <response code="200">checkout key</response>
        [HttpPost]
        [Route("/api/v1/project/{username}/{project}/checkout-key")]
        [Authorize(Policy = "apikey")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectCheckoutKeyPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Key), description: "checkout key")]
        public virtual IActionResult ProjectUsernameProjectCheckoutKeyPost([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Key));
            string exampleJson = null;
            exampleJson = "{\n  \"public_key\" : \"public_key\",\n  \"fingerprint\" : \"fingerprint\",\n  \"time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"type\" : \"deploy-key\",\n  \"preferred\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Key>(exampleJson)
            : default(Key);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Lists the environment variables for :project </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <response code="200">XXX</response>
        [HttpGet]
        [Route("/api/v1/project/{username}/{project}/envvar")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectEnvvarGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Envvar>), description: "XXX")]
        public virtual IActionResult ProjectUsernameProjectEnvvarGet([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Envvar>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"value\" : \"value\"\n}, {\n  \"name\" : \"name\",\n  \"value\" : \"value\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Envvar>>(exampleJson)
            : default(List<Envvar>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Deletes the environment variable named &#39;:name&#39; </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="name">XXXXXXXXXX </param>
        /// <response code="200">Deletes the environment variable named &#39;:name&#39; </response>
        [HttpDelete]
        [Route("/api/v1/project/{username}/{project}/envvar/{name}")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectEnvvarNameDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response), description: "Deletes the environment variable named &#39;:name&#39; ")]
        public virtual IActionResult ProjectUsernameProjectEnvvarNameDelete([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response>(exampleJson)
            : default(ProjectUsernameProjectCheckoutKeyFingerprintDelete200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Gets the hidden value of environment variable :name </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="name">XXXXXXXXXX </param>
        /// <response code="200">XXX</response>
        [HttpGet]
        [Route("/api/v1/project/{username}/{project}/envvar/{name}")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectEnvvarNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Envvar), description: "XXX")]
        public virtual IActionResult ProjectUsernameProjectEnvvarNameGet([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Envvar));
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"value\" : \"value\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Envvar>(exampleJson)
            : default(Envvar);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Creates a new environment variable </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <response code="200">XXX</response>
        [HttpPost]
        [Route("/api/v1/project/{username}/{project}/envvar")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectEnvvarPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Envvar), description: "XXX")]
        public virtual IActionResult ProjectUsernameProjectEnvvarPost([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Envvar));
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"value\" : \"value\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Envvar>(exampleJson)
            : default(Envvar);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Build summary for each of the last 30 builds for a single git repo. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="limit">The number of builds to return. Maximum 100, defaults to 30. </param>
        /// <param name="offset">The API returns builds starting from this offset, defaults to 0. </param>
        /// <param name="filter">Restricts which builds are returned. Set to \&quot;completed\&quot;, \&quot;successful\&quot;, \&quot;failed\&quot;, \&quot;running\&quot;, or defaults to no filter. </param>
        /// <response code="200">Build summary for each of the last 30 builds</response>
        [HttpGet]
        [Route("/api/v1/project/{username}/{project}")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Build>), description: "Build summary for each of the last 30 builds")]
        public virtual IActionResult ProjectUsernameProjectGet([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "filter")]string filter)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Build>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"retry_of\" : 5,\n  \"committer_email\" : \"committer_email\",\n  \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"previous\" : {\n    \"build_num\" : 6,\n    \"build_time_millis\" : 1\n  },\n  \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"subject\" : \"subject\",\n  \"vcs_url\" : \"https://openapi-generator.tech\",\n  \"build_time_millis\" : 0,\n  \"dont_build\" : \"dont_build\",\n  \"why\" : \"why\",\n  \"body\" : \"body\",\n  \"branch\" : \"branch\",\n  \"committer_name\" : \"committer_name\",\n  \"start_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"reponame\" : \"reponame\",\n  \"build_url\" : \"https://openapi-generator.tech\",\n  \"username\" : \"username\"\n}, {\n  \"retry_of\" : 5,\n  \"committer_email\" : \"committer_email\",\n  \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"previous\" : {\n    \"build_num\" : 6,\n    \"build_time_millis\" : 1\n  },\n  \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"subject\" : \"subject\",\n  \"vcs_url\" : \"https://openapi-generator.tech\",\n  \"build_time_millis\" : 0,\n  \"dont_build\" : \"dont_build\",\n  \"why\" : \"why\",\n  \"body\" : \"body\",\n  \"branch\" : \"branch\",\n  \"committer_name\" : \"committer_name\",\n  \"start_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"reponame\" : \"reponame\",\n  \"build_url\" : \"https://openapi-generator.tech\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Build>>(exampleJson)
            : default(List<Build>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Triggers a new build, returns a summary of the build. </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="projectUsernameProjectPostRequest"></param>
        /// <response code="201">returns a summary of the build</response>
        [HttpPost]
        [Route("/api/v1/project/{username}/{project}")]
        [Authorize(Policy = "apikey")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(BuildSummary), description: "returns a summary of the build")]
        public virtual IActionResult ProjectUsernameProjectPost([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromBody]ProjectUsernameProjectPostRequest projectUsernameProjectPostRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(BuildSummary));
            string exampleJson = null;
            exampleJson = "{\n  \"added_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"pushed_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"build_num\" : 0,\n  \"vcs_revision\" : \"vcs_revision\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BuildSummary>(exampleJson)
            : default(BuildSummary);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create an ssh key used to access external systems that require SSH key-based authentication </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="contentType"></param>
        /// <param name="projectUsernameProjectSshKeyPostRequest"></param>
        /// <response code="0">no response expected</response>
        [HttpPost]
        [Route("/api/v1/project/{username}/{project}/ssh-key")]
        [Authorize(Policy = "apikey")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectSshKeyPost")]
        [SwaggerResponse(statusCode: 0, type: typeof(ProjectUsernameProjectSshKeyPostDefaultResponse), description: "no response expected")]
        public virtual IActionResult ProjectUsernameProjectSshKeyPost([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromHeader (Name = "Content-Type")][Required()]string contentType, [FromBody]ProjectUsernameProjectSshKeyPostRequest projectUsernameProjectSshKeyPostRequest)
        {

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ProjectUsernameProjectSshKeyPostDefaultResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"message\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectUsernameProjectSshKeyPostDefaultResponse>(exampleJson)
            : default(ProjectUsernameProjectSshKeyPostDefaultResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Triggers a new build, returns a summary of the build. Optional build parameters can be set using an experimental API.  Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/) </remarks>
        /// <param name="username">XXXXXXXXX </param>
        /// <param name="project">XXXXXXXXX </param>
        /// <param name="branch">The branch name should be url-encoded. </param>
        /// <param name="projectUsernameProjectTreeBranchPostRequest"></param>
        /// <response code="201">returns a summary of the build</response>
        [HttpPost]
        [Route("/api/v1/project/{username}/{project}/tree/{branch}")]
        [Authorize(Policy = "apikey")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ProjectUsernameProjectTreeBranchPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(Build), description: "returns a summary of the build")]
        public virtual IActionResult ProjectUsernameProjectTreeBranchPost([FromRoute (Name = "username")][Required]string username, [FromRoute (Name = "project")][Required]string project, [FromRoute (Name = "branch")][Required]string branch, [FromBody]ProjectUsernameProjectTreeBranchPostRequest projectUsernameProjectTreeBranchPostRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Build));
            string exampleJson = null;
            exampleJson = "{\n  \"retry_of\" : 5,\n  \"committer_email\" : \"committer_email\",\n  \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"previous\" : {\n    \"build_num\" : 6,\n    \"build_time_millis\" : 1\n  },\n  \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"subject\" : \"subject\",\n  \"vcs_url\" : \"https://openapi-generator.tech\",\n  \"build_time_millis\" : 0,\n  \"dont_build\" : \"dont_build\",\n  \"why\" : \"why\",\n  \"body\" : \"body\",\n  \"branch\" : \"branch\",\n  \"committer_name\" : \"committer_name\",\n  \"start_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"reponame\" : \"reponame\",\n  \"build_url\" : \"https://openapi-generator.tech\",\n  \"username\" : \"username\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Build>(exampleJson)
            : default(Build);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>List of all the projects you&#39;re following on CircleCI, with build information organized by branch. </remarks>
        /// <response code="200">List of all the projects you&#39;re following on CircleCI </response>
        [HttpGet]
        [Route("/api/v1/projects")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("ProjectsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Project>), description: "List of all the projects you&#39;re following on CircleCI ")]
        public virtual IActionResult ProjectsGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Project>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"slack_api_token\" : \"slack_api_token\",\n  \"slack_channel\" : \"slack_channel\",\n  \"vcs_url\" : \"https://openapi-generator.tech\",\n  \"slack_notify_prefs\" : \"slack_notify_prefs\",\n  \"language\" : \"language\",\n  \"slack_webhook_url\" : \"https://openapi-generator.tech\",\n  \"irc_channel\" : \"irc_channel\",\n  \"campfire_notify_prefs\" : \"campfire_notify_prefs\",\n  \"campfire_token\" : \"campfire_token\",\n  \"oss\" : true,\n  \"campfire_room\" : \"campfire_room\",\n  \"compile\" : \"compile\",\n  \"hipchat_notify_prefs\" : \"hipchat_notify_prefs\",\n  \"parallel\" : 0,\n  \"extra\" : \"extra\",\n  \"irc_server\" : \"irc_server\",\n  \"hipchat_room\" : \"hipchat_room\",\n  \"slack_subdomain\" : \"slack_subdomain\",\n  \"flowdock_api_token\" : \"flowdock_api_token\",\n  \"test\" : \"test\",\n  \"hipchat_api_token\" : \"hipchat_api_token\",\n  \"hipchat_notify\" : \"hipchat_notify\",\n  \"has_usable_key\" : true,\n  \"heroku_deploy_user\" : \"heroku_deploy_user\",\n  \"irc_password\" : \"irc_password\",\n  \"slack_channel_override\" : \"slack_channel_override\",\n  \"branches\" : \"{}\",\n  \"followed\" : true,\n  \"campfire_subdomain\" : \"campfire_subdomain\",\n  \"dependencies\" : \"dependencies\",\n  \"vcs_type\" : \"vcs_type\",\n  \"irc_username\" : \"irc_username\",\n  \"ssh_keys\" : [ \"ssh_keys\", \"ssh_keys\" ],\n  \"reponame\" : \"reponame\",\n  \"irc_notify_prefs\" : \"irc_notify_prefs\",\n  \"feature_flags\" : {\n    \"fleet\" : true,\n    \"build-fork-prs\" : true,\n    \"junit\" : true,\n    \"trusty-beta\" : true,\n    \"osx\" : true,\n    \"oss\" : true,\n    \"set-github-status\" : true\n  },\n  \"irc_keyword\" : \"irc_keyword\",\n  \"setup\" : \"setup\",\n  \"default_branch\" : \"default_branch\",\n  \"scopes\" : [ null, null ],\n  \"aws\" : {\n    \"keypair\" : \"keypair\"\n  },\n  \"username\" : \"username\"\n}, {\n  \"slack_api_token\" : \"slack_api_token\",\n  \"slack_channel\" : \"slack_channel\",\n  \"vcs_url\" : \"https://openapi-generator.tech\",\n  \"slack_notify_prefs\" : \"slack_notify_prefs\",\n  \"language\" : \"language\",\n  \"slack_webhook_url\" : \"https://openapi-generator.tech\",\n  \"irc_channel\" : \"irc_channel\",\n  \"campfire_notify_prefs\" : \"campfire_notify_prefs\",\n  \"campfire_token\" : \"campfire_token\",\n  \"oss\" : true,\n  \"campfire_room\" : \"campfire_room\",\n  \"compile\" : \"compile\",\n  \"hipchat_notify_prefs\" : \"hipchat_notify_prefs\",\n  \"parallel\" : 0,\n  \"extra\" : \"extra\",\n  \"irc_server\" : \"irc_server\",\n  \"hipchat_room\" : \"hipchat_room\",\n  \"slack_subdomain\" : \"slack_subdomain\",\n  \"flowdock_api_token\" : \"flowdock_api_token\",\n  \"test\" : \"test\",\n  \"hipchat_api_token\" : \"hipchat_api_token\",\n  \"hipchat_notify\" : \"hipchat_notify\",\n  \"has_usable_key\" : true,\n  \"heroku_deploy_user\" : \"heroku_deploy_user\",\n  \"irc_password\" : \"irc_password\",\n  \"slack_channel_override\" : \"slack_channel_override\",\n  \"branches\" : \"{}\",\n  \"followed\" : true,\n  \"campfire_subdomain\" : \"campfire_subdomain\",\n  \"dependencies\" : \"dependencies\",\n  \"vcs_type\" : \"vcs_type\",\n  \"irc_username\" : \"irc_username\",\n  \"ssh_keys\" : [ \"ssh_keys\", \"ssh_keys\" ],\n  \"reponame\" : \"reponame\",\n  \"irc_notify_prefs\" : \"irc_notify_prefs\",\n  \"feature_flags\" : {\n    \"fleet\" : true,\n    \"build-fork-prs\" : true,\n    \"junit\" : true,\n    \"trusty-beta\" : true,\n    \"osx\" : true,\n    \"oss\" : true,\n    \"set-github-status\" : true\n  },\n  \"irc_keyword\" : \"irc_keyword\",\n  \"setup\" : \"setup\",\n  \"default_branch\" : \"default_branch\",\n  \"scopes\" : [ null, null ],\n  \"aws\" : {\n    \"keypair\" : \"keypair\"\n  },\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Project>>(exampleJson)
            : default(List<Project>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Build summary for each of the last 30 recent builds, ordered by build_num. </remarks>
        /// <param name="limit">The number of builds to return. Maximum 100, defaults to 30. </param>
        /// <param name="offset">The API returns builds starting from this offset, defaults to 0. </param>
        /// <response code="200">Build summary for each of the last 30 recent builds</response>
        [HttpGet]
        [Route("/api/v1/recent-builds")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("RecentBuildsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Build>), description: "Build summary for each of the last 30 recent builds")]
        public virtual IActionResult RecentBuildsGet([FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "offset")]int? offset)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Build>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"retry_of\" : 5,\n  \"committer_email\" : \"committer_email\",\n  \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"previous\" : {\n    \"build_num\" : 6,\n    \"build_time_millis\" : 1\n  },\n  \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"subject\" : \"subject\",\n  \"vcs_url\" : \"https://openapi-generator.tech\",\n  \"build_time_millis\" : 0,\n  \"dont_build\" : \"dont_build\",\n  \"why\" : \"why\",\n  \"body\" : \"body\",\n  \"branch\" : \"branch\",\n  \"committer_name\" : \"committer_name\",\n  \"start_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"reponame\" : \"reponame\",\n  \"build_url\" : \"https://openapi-generator.tech\",\n  \"username\" : \"username\"\n}, {\n  \"retry_of\" : 5,\n  \"committer_email\" : \"committer_email\",\n  \"stop_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"previous\" : {\n    \"build_num\" : 6,\n    \"build_time_millis\" : 1\n  },\n  \"queued_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"subject\" : \"subject\",\n  \"vcs_url\" : \"https://openapi-generator.tech\",\n  \"build_time_millis\" : 0,\n  \"dont_build\" : \"dont_build\",\n  \"why\" : \"why\",\n  \"body\" : \"body\",\n  \"branch\" : \"branch\",\n  \"committer_name\" : \"committer_name\",\n  \"start_time\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"reponame\" : \"reponame\",\n  \"build_url\" : \"https://openapi-generator.tech\",\n  \"username\" : \"username\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Build>>(exampleJson)
            : default(List<Build>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Adds your Heroku API key to CircleCI, takes apikey as form param name. </remarks>
        /// <response code="403">Your Heroku API key is invalid. </response>
        [HttpPost]
        [Route("/api/v1/user/heroku-key")]
        [Authorize(Policy = "apikey")]
        [ValidateModelState]
        [SwaggerOperation("UserHerokuKeyPost")]
        [SwaggerResponse(statusCode: 403, type: typeof(ProjectUsernameProjectSshKeyPostDefaultResponse), description: "Your Heroku API key is invalid. ")]
        public virtual IActionResult UserHerokuKeyPost()
        {

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ProjectUsernameProjectSshKeyPostDefaultResponse));

            throw new NotImplementedException();
        }
    }
}
