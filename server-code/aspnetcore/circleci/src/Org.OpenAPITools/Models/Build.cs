/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Build : IEquatable<Build>
    {
        /// <summary>
        /// commit message body
        /// </summary>
        /// <value>commit message body</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets BuildTimeMillis
        /// </summary>
        [DataMember(Name="build_time_millis", EmitDefaultValue=true)]
        public int BuildTimeMillis { get; set; }

        /// <summary>
        /// Gets or Sets BuildUrl
        /// </summary>
        [DataMember(Name="build_url", EmitDefaultValue=false)]
        public string BuildUrl { get; set; }

        /// <summary>
        /// Gets or Sets CommitterEmail
        /// </summary>
        [DataMember(Name="committer_email", EmitDefaultValue=false)]
        public string CommitterEmail { get; set; }

        /// <summary>
        /// Gets or Sets CommitterName
        /// </summary>
        [DataMember(Name="committer_name", EmitDefaultValue=false)]
        public string CommitterName { get; set; }

        /// <summary>
        /// reason why we didn&#39;t build, if we didn&#39;t build
        /// </summary>
        /// <value>reason why we didn&#39;t build, if we didn&#39;t build</value>
        [DataMember(Name="dont_build", EmitDefaultValue=true)]
        public string DontBuild { get; set; }

        /// <summary>
        /// Gets or Sets Lifecycle
        /// </summary>
        [DataMember(Name="lifecycle", EmitDefaultValue=true)]
        public Lifecycle Lifecycle { get; set; }

        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name="previous", EmitDefaultValue=false)]
        public PreviousBuild Previous { get; set; }

        /// <summary>
        /// time build was queued
        /// </summary>
        /// <value>time build was queued</value>
        [DataMember(Name="queued_at", EmitDefaultValue=false)]
        public DateTime QueuedAt { get; set; }

        /// <summary>
        /// Gets or Sets Reponame
        /// </summary>
        [DataMember(Name="reponame", EmitDefaultValue=false)]
        public string Reponame { get; set; }

        /// <summary>
        /// build_num of the build this is a retry of
        /// </summary>
        /// <value>build_num of the build this is a retry of</value>
        [DataMember(Name="retry_of", EmitDefaultValue=true)]
        public int? RetryOf { get; set; }

        /// <summary>
        /// time build started
        /// </summary>
        /// <value>time build started</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// time build finished
        /// </summary>
        /// <value>time build finished</value>
        [DataMember(Name="stop_time", EmitDefaultValue=false)]
        public DateTime StopTime { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets VcsUrl
        /// </summary>
        [DataMember(Name="vcs_url", EmitDefaultValue=false)]
        public string VcsUrl { get; set; }

        /// <summary>
        /// short string explaining the reason we built
        /// </summary>
        /// <value>short string explaining the reason we built</value>
        [DataMember(Name="why", EmitDefaultValue=false)]
        public string Why { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Build {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  BuildTimeMillis: ").Append(BuildTimeMillis).Append("\n");
            sb.Append("  BuildUrl: ").Append(BuildUrl).Append("\n");
            sb.Append("  CommitterEmail: ").Append(CommitterEmail).Append("\n");
            sb.Append("  CommitterName: ").Append(CommitterName).Append("\n");
            sb.Append("  DontBuild: ").Append(DontBuild).Append("\n");
            sb.Append("  Lifecycle: ").Append(Lifecycle).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  QueuedAt: ").Append(QueuedAt).Append("\n");
            sb.Append("  Reponame: ").Append(Reponame).Append("\n");
            sb.Append("  RetryOf: ").Append(RetryOf).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StopTime: ").Append(StopTime).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  VcsUrl: ").Append(VcsUrl).Append("\n");
            sb.Append("  Why: ").Append(Why).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Build)obj);
        }

        /// <summary>
        /// Returns true if Build instances are equal
        /// </summary>
        /// <param name="other">Instance of Build to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Build other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Body == other.Body ||
                    Body != null &&
                    Body.Equals(other.Body)
                ) && 
                (
                    Branch == other.Branch ||
                    Branch != null &&
                    Branch.Equals(other.Branch)
                ) && 
                (
                    BuildTimeMillis == other.BuildTimeMillis ||
                    
                    BuildTimeMillis.Equals(other.BuildTimeMillis)
                ) && 
                (
                    BuildUrl == other.BuildUrl ||
                    BuildUrl != null &&
                    BuildUrl.Equals(other.BuildUrl)
                ) && 
                (
                    CommitterEmail == other.CommitterEmail ||
                    CommitterEmail != null &&
                    CommitterEmail.Equals(other.CommitterEmail)
                ) && 
                (
                    CommitterName == other.CommitterName ||
                    CommitterName != null &&
                    CommitterName.Equals(other.CommitterName)
                ) && 
                (
                    DontBuild == other.DontBuild ||
                    DontBuild != null &&
                    DontBuild.Equals(other.DontBuild)
                ) && 
                (
                    Lifecycle == other.Lifecycle ||
                    
                    Lifecycle.Equals(other.Lifecycle)
                ) && 
                (
                    Previous == other.Previous ||
                    Previous != null &&
                    Previous.Equals(other.Previous)
                ) && 
                (
                    QueuedAt == other.QueuedAt ||
                    QueuedAt != null &&
                    QueuedAt.Equals(other.QueuedAt)
                ) && 
                (
                    Reponame == other.Reponame ||
                    Reponame != null &&
                    Reponame.Equals(other.Reponame)
                ) && 
                (
                    RetryOf == other.RetryOf ||
                    RetryOf != null &&
                    RetryOf.Equals(other.RetryOf)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    StopTime == other.StopTime ||
                    StopTime != null &&
                    StopTime.Equals(other.StopTime)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    VcsUrl == other.VcsUrl ||
                    VcsUrl != null &&
                    VcsUrl.Equals(other.VcsUrl)
                ) && 
                (
                    Why == other.Why ||
                    Why != null &&
                    Why.Equals(other.Why)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Body != null)
                    hashCode = hashCode * 59 + Body.GetHashCode();
                    if (Branch != null)
                    hashCode = hashCode * 59 + Branch.GetHashCode();
                    
                    hashCode = hashCode * 59 + BuildTimeMillis.GetHashCode();
                    if (BuildUrl != null)
                    hashCode = hashCode * 59 + BuildUrl.GetHashCode();
                    if (CommitterEmail != null)
                    hashCode = hashCode * 59 + CommitterEmail.GetHashCode();
                    if (CommitterName != null)
                    hashCode = hashCode * 59 + CommitterName.GetHashCode();
                    if (DontBuild != null)
                    hashCode = hashCode * 59 + DontBuild.GetHashCode();
                    
                    hashCode = hashCode * 59 + Lifecycle.GetHashCode();
                    if (Previous != null)
                    hashCode = hashCode * 59 + Previous.GetHashCode();
                    if (QueuedAt != null)
                    hashCode = hashCode * 59 + QueuedAt.GetHashCode();
                    if (Reponame != null)
                    hashCode = hashCode * 59 + Reponame.GetHashCode();
                    if (RetryOf != null)
                    hashCode = hashCode * 59 + RetryOf.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (StopTime != null)
                    hashCode = hashCode * 59 + StopTime.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (VcsUrl != null)
                    hashCode = hashCode * 59 + VcsUrl.GetHashCode();
                    if (Why != null)
                    hashCode = hashCode * 59 + Why.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Build left, Build right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Build left, Build right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
