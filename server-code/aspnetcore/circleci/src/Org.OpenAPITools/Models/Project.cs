/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Project : IEquatable<Project>
    {
        /// <summary>
        /// Gets or Sets Aws
        /// </summary>
        [DataMember(Name="aws", EmitDefaultValue=false)]
        public Aws Aws { get; set; }

        /// <summary>
        /// Gets or Sets Branches
        /// </summary>
        [DataMember(Name="branches", EmitDefaultValue=false)]
        public Object Branches { get; set; }

        /// <summary>
        /// Gets or Sets CampfireNotifyPrefs
        /// </summary>
        [DataMember(Name="campfire_notify_prefs", EmitDefaultValue=true)]
        public string CampfireNotifyPrefs { get; set; }

        /// <summary>
        /// Gets or Sets CampfireRoom
        /// </summary>
        [DataMember(Name="campfire_room", EmitDefaultValue=true)]
        public string CampfireRoom { get; set; }

        /// <summary>
        /// Gets or Sets CampfireSubdomain
        /// </summary>
        [DataMember(Name="campfire_subdomain", EmitDefaultValue=true)]
        public string CampfireSubdomain { get; set; }

        /// <summary>
        /// Gets or Sets CampfireToken
        /// </summary>
        [DataMember(Name="campfire_token", EmitDefaultValue=true)]
        public string CampfireToken { get; set; }

        /// <summary>
        /// Gets or Sets Compile
        /// </summary>
        [DataMember(Name="compile", EmitDefaultValue=false)]
        public string Compile { get; set; }

        /// <summary>
        /// Gets or Sets DefaultBranch
        /// </summary>
        [DataMember(Name="default_branch", EmitDefaultValue=false)]
        public string DefaultBranch { get; set; }

        /// <summary>
        /// Gets or Sets Dependencies
        /// </summary>
        [DataMember(Name="dependencies", EmitDefaultValue=false)]
        public string Dependencies { get; set; }

        /// <summary>
        /// Gets or Sets Extra
        /// </summary>
        [DataMember(Name="extra", EmitDefaultValue=false)]
        public string Extra { get; set; }

        /// <summary>
        /// Gets or Sets FeatureFlags
        /// </summary>
        [DataMember(Name="feature_flags", EmitDefaultValue=false)]
        public ProjectFeatureFlags FeatureFlags { get; set; }

        /// <summary>
        /// Gets or Sets FlowdockApiToken
        /// </summary>
        [DataMember(Name="flowdock_api_token", EmitDefaultValue=true)]
        public string FlowdockApiToken { get; set; }

        /// <summary>
        /// Gets or Sets Followed
        /// </summary>
        [DataMember(Name="followed", EmitDefaultValue=true)]
        public bool Followed { get; set; }

        /// <summary>
        /// Gets or Sets HasUsableKey
        /// </summary>
        [DataMember(Name="has_usable_key", EmitDefaultValue=true)]
        public bool HasUsableKey { get; set; }

        /// <summary>
        /// Gets or Sets HerokuDeployUser
        /// </summary>
        [DataMember(Name="heroku_deploy_user", EmitDefaultValue=true)]
        public string HerokuDeployUser { get; set; }

        /// <summary>
        /// Gets or Sets HipchatApiToken
        /// </summary>
        [DataMember(Name="hipchat_api_token", EmitDefaultValue=true)]
        public string HipchatApiToken { get; set; }

        /// <summary>
        /// Gets or Sets HipchatNotify
        /// </summary>
        [DataMember(Name="hipchat_notify", EmitDefaultValue=true)]
        public string HipchatNotify { get; set; }

        /// <summary>
        /// Gets or Sets HipchatNotifyPrefs
        /// </summary>
        [DataMember(Name="hipchat_notify_prefs", EmitDefaultValue=true)]
        public string HipchatNotifyPrefs { get; set; }

        /// <summary>
        /// Gets or Sets HipchatRoom
        /// </summary>
        [DataMember(Name="hipchat_room", EmitDefaultValue=true)]
        public string HipchatRoom { get; set; }

        /// <summary>
        /// Gets or Sets IrcChannel
        /// </summary>
        [DataMember(Name="irc_channel", EmitDefaultValue=true)]
        public string IrcChannel { get; set; }

        /// <summary>
        /// Gets or Sets IrcKeyword
        /// </summary>
        [DataMember(Name="irc_keyword", EmitDefaultValue=true)]
        public string IrcKeyword { get; set; }

        /// <summary>
        /// Gets or Sets IrcNotifyPrefs
        /// </summary>
        [DataMember(Name="irc_notify_prefs", EmitDefaultValue=true)]
        public string IrcNotifyPrefs { get; set; }

        /// <summary>
        /// Gets or Sets IrcPassword
        /// </summary>
        [DataMember(Name="irc_password", EmitDefaultValue=true)]
        public string IrcPassword { get; set; }

        /// <summary>
        /// Gets or Sets IrcServer
        /// </summary>
        [DataMember(Name="irc_server", EmitDefaultValue=true)]
        public string IrcServer { get; set; }

        /// <summary>
        /// Gets or Sets IrcUsername
        /// </summary>
        [DataMember(Name="irc_username", EmitDefaultValue=true)]
        public string IrcUsername { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Oss
        /// </summary>
        [DataMember(Name="oss", EmitDefaultValue=true)]
        public bool Oss { get; set; }

        /// <summary>
        /// Gets or Sets Parallel
        /// </summary>
        [DataMember(Name="parallel", EmitDefaultValue=true)]
        public int Parallel { get; set; }

        /// <summary>
        /// Gets or Sets Reponame
        /// </summary>
        [DataMember(Name="reponame", EmitDefaultValue=false)]
        public string Reponame { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [DataMember(Name="scopes", EmitDefaultValue=false)]
        public List<Scope> Scopes { get; set; }

        /// <summary>
        /// Gets or Sets Setup
        /// </summary>
        [DataMember(Name="setup", EmitDefaultValue=false)]
        public string Setup { get; set; }

        /// <summary>
        /// Gets or Sets SlackApiToken
        /// </summary>
        [DataMember(Name="slack_api_token", EmitDefaultValue=true)]
        public string SlackApiToken { get; set; }

        /// <summary>
        /// Gets or Sets SlackChannel
        /// </summary>
        [DataMember(Name="slack_channel", EmitDefaultValue=true)]
        public string SlackChannel { get; set; }

        /// <summary>
        /// Gets or Sets SlackChannelOverride
        /// </summary>
        [DataMember(Name="slack_channel_override", EmitDefaultValue=true)]
        public string SlackChannelOverride { get; set; }

        /// <summary>
        /// Gets or Sets SlackNotifyPrefs
        /// </summary>
        [DataMember(Name="slack_notify_prefs", EmitDefaultValue=true)]
        public string SlackNotifyPrefs { get; set; }

        /// <summary>
        /// Gets or Sets SlackSubdomain
        /// </summary>
        [DataMember(Name="slack_subdomain", EmitDefaultValue=true)]
        public string SlackSubdomain { get; set; }

        /// <summary>
        /// Gets or Sets SlackWebhookUrl
        /// </summary>
        [DataMember(Name="slack_webhook_url", EmitDefaultValue=false)]
        public string SlackWebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets SshKeys
        /// </summary>
        [DataMember(Name="ssh_keys", EmitDefaultValue=false)]
        public List<string> SshKeys { get; set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public string Test { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets VcsType
        /// </summary>
        [DataMember(Name="vcs_type", EmitDefaultValue=false)]
        public string VcsType { get; set; }

        /// <summary>
        /// Gets or Sets VcsUrl
        /// </summary>
        [DataMember(Name="vcs_url", EmitDefaultValue=false)]
        public string VcsUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  Aws: ").Append(Aws).Append("\n");
            sb.Append("  Branches: ").Append(Branches).Append("\n");
            sb.Append("  CampfireNotifyPrefs: ").Append(CampfireNotifyPrefs).Append("\n");
            sb.Append("  CampfireRoom: ").Append(CampfireRoom).Append("\n");
            sb.Append("  CampfireSubdomain: ").Append(CampfireSubdomain).Append("\n");
            sb.Append("  CampfireToken: ").Append(CampfireToken).Append("\n");
            sb.Append("  Compile: ").Append(Compile).Append("\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("  FeatureFlags: ").Append(FeatureFlags).Append("\n");
            sb.Append("  FlowdockApiToken: ").Append(FlowdockApiToken).Append("\n");
            sb.Append("  Followed: ").Append(Followed).Append("\n");
            sb.Append("  HasUsableKey: ").Append(HasUsableKey).Append("\n");
            sb.Append("  HerokuDeployUser: ").Append(HerokuDeployUser).Append("\n");
            sb.Append("  HipchatApiToken: ").Append(HipchatApiToken).Append("\n");
            sb.Append("  HipchatNotify: ").Append(HipchatNotify).Append("\n");
            sb.Append("  HipchatNotifyPrefs: ").Append(HipchatNotifyPrefs).Append("\n");
            sb.Append("  HipchatRoom: ").Append(HipchatRoom).Append("\n");
            sb.Append("  IrcChannel: ").Append(IrcChannel).Append("\n");
            sb.Append("  IrcKeyword: ").Append(IrcKeyword).Append("\n");
            sb.Append("  IrcNotifyPrefs: ").Append(IrcNotifyPrefs).Append("\n");
            sb.Append("  IrcPassword: ").Append(IrcPassword).Append("\n");
            sb.Append("  IrcServer: ").Append(IrcServer).Append("\n");
            sb.Append("  IrcUsername: ").Append(IrcUsername).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Oss: ").Append(Oss).Append("\n");
            sb.Append("  Parallel: ").Append(Parallel).Append("\n");
            sb.Append("  Reponame: ").Append(Reponame).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Setup: ").Append(Setup).Append("\n");
            sb.Append("  SlackApiToken: ").Append(SlackApiToken).Append("\n");
            sb.Append("  SlackChannel: ").Append(SlackChannel).Append("\n");
            sb.Append("  SlackChannelOverride: ").Append(SlackChannelOverride).Append("\n");
            sb.Append("  SlackNotifyPrefs: ").Append(SlackNotifyPrefs).Append("\n");
            sb.Append("  SlackSubdomain: ").Append(SlackSubdomain).Append("\n");
            sb.Append("  SlackWebhookUrl: ").Append(SlackWebhookUrl).Append("\n");
            sb.Append("  SshKeys: ").Append(SshKeys).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  VcsType: ").Append(VcsType).Append("\n");
            sb.Append("  VcsUrl: ").Append(VcsUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Project)obj);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="other">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Aws == other.Aws ||
                    Aws != null &&
                    Aws.Equals(other.Aws)
                ) && 
                (
                    Branches == other.Branches ||
                    Branches != null &&
                    Branches.Equals(other.Branches)
                ) && 
                (
                    CampfireNotifyPrefs == other.CampfireNotifyPrefs ||
                    CampfireNotifyPrefs != null &&
                    CampfireNotifyPrefs.Equals(other.CampfireNotifyPrefs)
                ) && 
                (
                    CampfireRoom == other.CampfireRoom ||
                    CampfireRoom != null &&
                    CampfireRoom.Equals(other.CampfireRoom)
                ) && 
                (
                    CampfireSubdomain == other.CampfireSubdomain ||
                    CampfireSubdomain != null &&
                    CampfireSubdomain.Equals(other.CampfireSubdomain)
                ) && 
                (
                    CampfireToken == other.CampfireToken ||
                    CampfireToken != null &&
                    CampfireToken.Equals(other.CampfireToken)
                ) && 
                (
                    Compile == other.Compile ||
                    Compile != null &&
                    Compile.Equals(other.Compile)
                ) && 
                (
                    DefaultBranch == other.DefaultBranch ||
                    DefaultBranch != null &&
                    DefaultBranch.Equals(other.DefaultBranch)
                ) && 
                (
                    Dependencies == other.Dependencies ||
                    Dependencies != null &&
                    Dependencies.Equals(other.Dependencies)
                ) && 
                (
                    Extra == other.Extra ||
                    Extra != null &&
                    Extra.Equals(other.Extra)
                ) && 
                (
                    FeatureFlags == other.FeatureFlags ||
                    FeatureFlags != null &&
                    FeatureFlags.Equals(other.FeatureFlags)
                ) && 
                (
                    FlowdockApiToken == other.FlowdockApiToken ||
                    FlowdockApiToken != null &&
                    FlowdockApiToken.Equals(other.FlowdockApiToken)
                ) && 
                (
                    Followed == other.Followed ||
                    
                    Followed.Equals(other.Followed)
                ) && 
                (
                    HasUsableKey == other.HasUsableKey ||
                    
                    HasUsableKey.Equals(other.HasUsableKey)
                ) && 
                (
                    HerokuDeployUser == other.HerokuDeployUser ||
                    HerokuDeployUser != null &&
                    HerokuDeployUser.Equals(other.HerokuDeployUser)
                ) && 
                (
                    HipchatApiToken == other.HipchatApiToken ||
                    HipchatApiToken != null &&
                    HipchatApiToken.Equals(other.HipchatApiToken)
                ) && 
                (
                    HipchatNotify == other.HipchatNotify ||
                    HipchatNotify != null &&
                    HipchatNotify.Equals(other.HipchatNotify)
                ) && 
                (
                    HipchatNotifyPrefs == other.HipchatNotifyPrefs ||
                    HipchatNotifyPrefs != null &&
                    HipchatNotifyPrefs.Equals(other.HipchatNotifyPrefs)
                ) && 
                (
                    HipchatRoom == other.HipchatRoom ||
                    HipchatRoom != null &&
                    HipchatRoom.Equals(other.HipchatRoom)
                ) && 
                (
                    IrcChannel == other.IrcChannel ||
                    IrcChannel != null &&
                    IrcChannel.Equals(other.IrcChannel)
                ) && 
                (
                    IrcKeyword == other.IrcKeyword ||
                    IrcKeyword != null &&
                    IrcKeyword.Equals(other.IrcKeyword)
                ) && 
                (
                    IrcNotifyPrefs == other.IrcNotifyPrefs ||
                    IrcNotifyPrefs != null &&
                    IrcNotifyPrefs.Equals(other.IrcNotifyPrefs)
                ) && 
                (
                    IrcPassword == other.IrcPassword ||
                    IrcPassword != null &&
                    IrcPassword.Equals(other.IrcPassword)
                ) && 
                (
                    IrcServer == other.IrcServer ||
                    IrcServer != null &&
                    IrcServer.Equals(other.IrcServer)
                ) && 
                (
                    IrcUsername == other.IrcUsername ||
                    IrcUsername != null &&
                    IrcUsername.Equals(other.IrcUsername)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    Oss == other.Oss ||
                    
                    Oss.Equals(other.Oss)
                ) && 
                (
                    Parallel == other.Parallel ||
                    
                    Parallel.Equals(other.Parallel)
                ) && 
                (
                    Reponame == other.Reponame ||
                    Reponame != null &&
                    Reponame.Equals(other.Reponame)
                ) && 
                (
                    Scopes == other.Scopes ||
                    Scopes != null &&
                    other.Scopes != null &&
                    Scopes.SequenceEqual(other.Scopes)
                ) && 
                (
                    Setup == other.Setup ||
                    Setup != null &&
                    Setup.Equals(other.Setup)
                ) && 
                (
                    SlackApiToken == other.SlackApiToken ||
                    SlackApiToken != null &&
                    SlackApiToken.Equals(other.SlackApiToken)
                ) && 
                (
                    SlackChannel == other.SlackChannel ||
                    SlackChannel != null &&
                    SlackChannel.Equals(other.SlackChannel)
                ) && 
                (
                    SlackChannelOverride == other.SlackChannelOverride ||
                    SlackChannelOverride != null &&
                    SlackChannelOverride.Equals(other.SlackChannelOverride)
                ) && 
                (
                    SlackNotifyPrefs == other.SlackNotifyPrefs ||
                    SlackNotifyPrefs != null &&
                    SlackNotifyPrefs.Equals(other.SlackNotifyPrefs)
                ) && 
                (
                    SlackSubdomain == other.SlackSubdomain ||
                    SlackSubdomain != null &&
                    SlackSubdomain.Equals(other.SlackSubdomain)
                ) && 
                (
                    SlackWebhookUrl == other.SlackWebhookUrl ||
                    SlackWebhookUrl != null &&
                    SlackWebhookUrl.Equals(other.SlackWebhookUrl)
                ) && 
                (
                    SshKeys == other.SshKeys ||
                    SshKeys != null &&
                    other.SshKeys != null &&
                    SshKeys.SequenceEqual(other.SshKeys)
                ) && 
                (
                    Test == other.Test ||
                    Test != null &&
                    Test.Equals(other.Test)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    VcsType == other.VcsType ||
                    VcsType != null &&
                    VcsType.Equals(other.VcsType)
                ) && 
                (
                    VcsUrl == other.VcsUrl ||
                    VcsUrl != null &&
                    VcsUrl.Equals(other.VcsUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Aws != null)
                    hashCode = hashCode * 59 + Aws.GetHashCode();
                    if (Branches != null)
                    hashCode = hashCode * 59 + Branches.GetHashCode();
                    if (CampfireNotifyPrefs != null)
                    hashCode = hashCode * 59 + CampfireNotifyPrefs.GetHashCode();
                    if (CampfireRoom != null)
                    hashCode = hashCode * 59 + CampfireRoom.GetHashCode();
                    if (CampfireSubdomain != null)
                    hashCode = hashCode * 59 + CampfireSubdomain.GetHashCode();
                    if (CampfireToken != null)
                    hashCode = hashCode * 59 + CampfireToken.GetHashCode();
                    if (Compile != null)
                    hashCode = hashCode * 59 + Compile.GetHashCode();
                    if (DefaultBranch != null)
                    hashCode = hashCode * 59 + DefaultBranch.GetHashCode();
                    if (Dependencies != null)
                    hashCode = hashCode * 59 + Dependencies.GetHashCode();
                    if (Extra != null)
                    hashCode = hashCode * 59 + Extra.GetHashCode();
                    if (FeatureFlags != null)
                    hashCode = hashCode * 59 + FeatureFlags.GetHashCode();
                    if (FlowdockApiToken != null)
                    hashCode = hashCode * 59 + FlowdockApiToken.GetHashCode();
                    
                    hashCode = hashCode * 59 + Followed.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasUsableKey.GetHashCode();
                    if (HerokuDeployUser != null)
                    hashCode = hashCode * 59 + HerokuDeployUser.GetHashCode();
                    if (HipchatApiToken != null)
                    hashCode = hashCode * 59 + HipchatApiToken.GetHashCode();
                    if (HipchatNotify != null)
                    hashCode = hashCode * 59 + HipchatNotify.GetHashCode();
                    if (HipchatNotifyPrefs != null)
                    hashCode = hashCode * 59 + HipchatNotifyPrefs.GetHashCode();
                    if (HipchatRoom != null)
                    hashCode = hashCode * 59 + HipchatRoom.GetHashCode();
                    if (IrcChannel != null)
                    hashCode = hashCode * 59 + IrcChannel.GetHashCode();
                    if (IrcKeyword != null)
                    hashCode = hashCode * 59 + IrcKeyword.GetHashCode();
                    if (IrcNotifyPrefs != null)
                    hashCode = hashCode * 59 + IrcNotifyPrefs.GetHashCode();
                    if (IrcPassword != null)
                    hashCode = hashCode * 59 + IrcPassword.GetHashCode();
                    if (IrcServer != null)
                    hashCode = hashCode * 59 + IrcServer.GetHashCode();
                    if (IrcUsername != null)
                    hashCode = hashCode * 59 + IrcUsername.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    
                    hashCode = hashCode * 59 + Oss.GetHashCode();
                    
                    hashCode = hashCode * 59 + Parallel.GetHashCode();
                    if (Reponame != null)
                    hashCode = hashCode * 59 + Reponame.GetHashCode();
                    if (Scopes != null)
                    hashCode = hashCode * 59 + Scopes.GetHashCode();
                    if (Setup != null)
                    hashCode = hashCode * 59 + Setup.GetHashCode();
                    if (SlackApiToken != null)
                    hashCode = hashCode * 59 + SlackApiToken.GetHashCode();
                    if (SlackChannel != null)
                    hashCode = hashCode * 59 + SlackChannel.GetHashCode();
                    if (SlackChannelOverride != null)
                    hashCode = hashCode * 59 + SlackChannelOverride.GetHashCode();
                    if (SlackNotifyPrefs != null)
                    hashCode = hashCode * 59 + SlackNotifyPrefs.GetHashCode();
                    if (SlackSubdomain != null)
                    hashCode = hashCode * 59 + SlackSubdomain.GetHashCode();
                    if (SlackWebhookUrl != null)
                    hashCode = hashCode * 59 + SlackWebhookUrl.GetHashCode();
                    if (SshKeys != null)
                    hashCode = hashCode * 59 + SshKeys.GetHashCode();
                    if (Test != null)
                    hashCode = hashCode * 59 + Test.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (VcsType != null)
                    hashCode = hashCode * 59 + VcsType.GetHashCode();
                    if (VcsUrl != null)
                    hashCode = hashCode * 59 + VcsUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Project left, Project right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Project left, Project right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
