/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProjectFeatureFlags : IEquatable<ProjectFeatureFlags>
    {
        /// <summary>
        /// Gets or Sets BuildForkPrs
        /// </summary>
        [DataMember(Name="build-fork-prs", EmitDefaultValue=true)]
        public bool BuildForkPrs { get; set; }

        /// <summary>
        /// Gets or Sets Fleet
        /// </summary>
        [DataMember(Name="fleet", EmitDefaultValue=true)]
        public bool? Fleet { get; set; }

        /// <summary>
        /// Gets or Sets Junit
        /// </summary>
        [DataMember(Name="junit", EmitDefaultValue=true)]
        public bool Junit { get; set; }

        /// <summary>
        /// Gets or Sets Oss
        /// </summary>
        [DataMember(Name="oss", EmitDefaultValue=true)]
        public bool Oss { get; set; }

        /// <summary>
        /// Gets or Sets Osx
        /// </summary>
        [DataMember(Name="osx", EmitDefaultValue=true)]
        public bool Osx { get; set; }

        /// <summary>
        /// Gets or Sets SetGithubStatus
        /// </summary>
        [DataMember(Name="set-github-status", EmitDefaultValue=true)]
        public bool SetGithubStatus { get; set; }

        /// <summary>
        /// Gets or Sets TrustyBeta
        /// </summary>
        [DataMember(Name="trusty-beta", EmitDefaultValue=true)]
        public bool TrustyBeta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectFeatureFlags {\n");
            sb.Append("  BuildForkPrs: ").Append(BuildForkPrs).Append("\n");
            sb.Append("  Fleet: ").Append(Fleet).Append("\n");
            sb.Append("  Junit: ").Append(Junit).Append("\n");
            sb.Append("  Oss: ").Append(Oss).Append("\n");
            sb.Append("  Osx: ").Append(Osx).Append("\n");
            sb.Append("  SetGithubStatus: ").Append(SetGithubStatus).Append("\n");
            sb.Append("  TrustyBeta: ").Append(TrustyBeta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProjectFeatureFlags)obj);
        }

        /// <summary>
        /// Returns true if ProjectFeatureFlags instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectFeatureFlags to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectFeatureFlags other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BuildForkPrs == other.BuildForkPrs ||
                    
                    BuildForkPrs.Equals(other.BuildForkPrs)
                ) && 
                (
                    Fleet == other.Fleet ||
                    Fleet != null &&
                    Fleet.Equals(other.Fleet)
                ) && 
                (
                    Junit == other.Junit ||
                    
                    Junit.Equals(other.Junit)
                ) && 
                (
                    Oss == other.Oss ||
                    
                    Oss.Equals(other.Oss)
                ) && 
                (
                    Osx == other.Osx ||
                    
                    Osx.Equals(other.Osx)
                ) && 
                (
                    SetGithubStatus == other.SetGithubStatus ||
                    
                    SetGithubStatus.Equals(other.SetGithubStatus)
                ) && 
                (
                    TrustyBeta == other.TrustyBeta ||
                    
                    TrustyBeta.Equals(other.TrustyBeta)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + BuildForkPrs.GetHashCode();
                    if (Fleet != null)
                    hashCode = hashCode * 59 + Fleet.GetHashCode();
                    
                    hashCode = hashCode * 59 + Junit.GetHashCode();
                    
                    hashCode = hashCode * 59 + Oss.GetHashCode();
                    
                    hashCode = hashCode * 59 + Osx.GetHashCode();
                    
                    hashCode = hashCode * 59 + SetGithubStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + TrustyBeta.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProjectFeatureFlags left, ProjectFeatureFlags right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProjectFeatureFlags left, ProjectFeatureFlags right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
