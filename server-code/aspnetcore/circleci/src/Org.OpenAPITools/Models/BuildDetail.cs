/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// previous build
    /// </summary>
    [DataContract]
    public partial class BuildDetail : IEquatable<BuildDetail>
    {
        /// <summary>
        /// Gets or Sets AllCommitDetails
        /// </summary>
        [DataMember(Name="all_commit_details", EmitDefaultValue=false)]
        public List<CommitDetail> AllCommitDetails { get; set; }

        /// <summary>
        /// Gets or Sets Compare
        /// </summary>
        [DataMember(Name="compare", EmitDefaultValue=true)]
        public string Compare { get; set; }

        /// <summary>
        /// Gets or Sets JobName
        /// </summary>
        [DataMember(Name="job_name", EmitDefaultValue=false)]
        public string JobName { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name="node", EmitDefaultValue=true)]
        public Object Node { get; set; }

        /// <summary>
        /// Gets or Sets PreviousSuccessfulBuild
        /// </summary>
        [DataMember(Name="previous_successful_build", EmitDefaultValue=false)]
        public PreviousBuild PreviousSuccessfulBuild { get; set; }

        /// <summary>
        /// Gets or Sets Retries
        /// </summary>
        [DataMember(Name="retries", EmitDefaultValue=true)]
        public bool? Retries { get; set; }

        /// <summary>
        /// Gets or Sets SshEnabled
        /// </summary>
        [DataMember(Name="ssh_enabled", EmitDefaultValue=true)]
        public bool? SshEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Timedout
        /// </summary>
        [DataMember(Name="timedout", EmitDefaultValue=true)]
        public bool? Timedout { get; set; }

        /// <summary>
        /// Gets or Sets UsageQueuedAt
        /// </summary>
        [DataMember(Name="usage_queued_at", EmitDefaultValue=false)]
        public DateTime UsageQueuedAt { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildDetail {\n");
            sb.Append("  AllCommitDetails: ").Append(AllCommitDetails).Append("\n");
            sb.Append("  Compare: ").Append(Compare).Append("\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  PreviousSuccessfulBuild: ").Append(PreviousSuccessfulBuild).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  SshEnabled: ").Append(SshEnabled).Append("\n");
            sb.Append("  Timedout: ").Append(Timedout).Append("\n");
            sb.Append("  UsageQueuedAt: ").Append(UsageQueuedAt).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BuildDetail)obj);
        }

        /// <summary>
        /// Returns true if BuildDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of BuildDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildDetail other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllCommitDetails == other.AllCommitDetails ||
                    AllCommitDetails != null &&
                    other.AllCommitDetails != null &&
                    AllCommitDetails.SequenceEqual(other.AllCommitDetails)
                ) && 
                (
                    Compare == other.Compare ||
                    Compare != null &&
                    Compare.Equals(other.Compare)
                ) && 
                (
                    JobName == other.JobName ||
                    JobName != null &&
                    JobName.Equals(other.JobName)
                ) && 
                (
                    Node == other.Node ||
                    Node != null &&
                    Node.Equals(other.Node)
                ) && 
                (
                    PreviousSuccessfulBuild == other.PreviousSuccessfulBuild ||
                    PreviousSuccessfulBuild != null &&
                    PreviousSuccessfulBuild.Equals(other.PreviousSuccessfulBuild)
                ) && 
                (
                    Retries == other.Retries ||
                    Retries != null &&
                    Retries.Equals(other.Retries)
                ) && 
                (
                    SshEnabled == other.SshEnabled ||
                    SshEnabled != null &&
                    SshEnabled.Equals(other.SshEnabled)
                ) && 
                (
                    Timedout == other.Timedout ||
                    Timedout != null &&
                    Timedout.Equals(other.Timedout)
                ) && 
                (
                    UsageQueuedAt == other.UsageQueuedAt ||
                    UsageQueuedAt != null &&
                    UsageQueuedAt.Equals(other.UsageQueuedAt)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AllCommitDetails != null)
                    hashCode = hashCode * 59 + AllCommitDetails.GetHashCode();
                    if (Compare != null)
                    hashCode = hashCode * 59 + Compare.GetHashCode();
                    if (JobName != null)
                    hashCode = hashCode * 59 + JobName.GetHashCode();
                    if (Node != null)
                    hashCode = hashCode * 59 + Node.GetHashCode();
                    if (PreviousSuccessfulBuild != null)
                    hashCode = hashCode * 59 + PreviousSuccessfulBuild.GetHashCode();
                    if (Retries != null)
                    hashCode = hashCode * 59 + Retries.GetHashCode();
                    if (SshEnabled != null)
                    hashCode = hashCode * 59 + SshEnabled.GetHashCode();
                    if (Timedout != null)
                    hashCode = hashCode * 59 + Timedout.GetHashCode();
                    if (UsageQueuedAt != null)
                    hashCode = hashCode * 59 + UsageQueuedAt.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BuildDetail left, BuildDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BuildDetail left, BuildDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
