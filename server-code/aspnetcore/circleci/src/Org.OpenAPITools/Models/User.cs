/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class User : IEquatable<User>
    {
        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=true)]
        public bool Admin { get; set; }

        /// <summary>
        /// Gets or Sets AllEmails
        /// </summary>
        [DataMember(Name="all_emails", EmitDefaultValue=false)]
        public List<string> AllEmails { get; set; }

        /// <summary>
        /// Gets or Sets AnalyticsId
        /// </summary>
        [DataMember(Name="analytics_id", EmitDefaultValue=false)]
        public string AnalyticsId { get; set; }

        /// <summary>
        /// Gets or Sets AvatarUrl
        /// </summary>
        [DataMember(Name="avatar_url", EmitDefaultValue=false)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Gets or Sets BasicEmailPrefs
        /// </summary>
        [DataMember(Name="basic_email_prefs", EmitDefaultValue=false)]
        public string BasicEmailPrefs { get; set; }

        /// <summary>
        /// Gets or Sets Bitbucket
        /// </summary>
        [DataMember(Name="bitbucket", EmitDefaultValue=true)]
        public int? Bitbucket { get; set; }

        /// <summary>
        /// Gets or Sets BitbucketAuthorized
        /// </summary>
        [DataMember(Name="bitbucket_authorized", EmitDefaultValue=true)]
        public bool BitbucketAuthorized { get; set; }

        /// <summary>
        /// Gets or Sets Containers
        /// </summary>
        [DataMember(Name="containers", EmitDefaultValue=true)]
        public int Containers { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DaysLeftInTrial
        /// </summary>
        [DataMember(Name="days_left_in_trial", EmitDefaultValue=true)]
        public int DaysLeftInTrial { get; set; }

        /// <summary>
        /// Gets or Sets DevAdmin
        /// </summary>
        [DataMember(Name="dev_admin", EmitDefaultValue=true)]
        public bool DevAdmin { get; set; }

        /// <summary>
        /// Gets or Sets EnrolledBetas
        /// </summary>
        [DataMember(Name="enrolled_betas", EmitDefaultValue=false)]
        public List<string> EnrolledBetas { get; set; }

        /// <summary>
        /// Gets or Sets GithubId
        /// </summary>
        [DataMember(Name="github_id", EmitDefaultValue=true)]
        public int? GithubId { get; set; }

        /// <summary>
        /// Gets or Sets GithubOauthScopes
        /// </summary>
        [DataMember(Name="github_oauth_scopes", EmitDefaultValue=false)]
        public List<string> GithubOauthScopes { get; set; }

        /// <summary>
        /// Gets or Sets GravatarId
        /// </summary>
        [DataMember(Name="gravatar_id", EmitDefaultValue=true)]
        public int? GravatarId { get; set; }

        /// <summary>
        /// Gets or Sets HerokuApiKey
        /// </summary>
        [DataMember(Name="heroku_api_key", EmitDefaultValue=true)]
        public string HerokuApiKey { get; set; }

        /// <summary>
        /// Gets or Sets InBetaProgram
        /// </summary>
        [DataMember(Name="in_beta_program", EmitDefaultValue=true)]
        public bool InBetaProgram { get; set; }

        /// <summary>
        /// Gets or Sets Login
        /// </summary>
        [DataMember(Name="login", EmitDefaultValue=false)]
        public string Login { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationPrefs
        /// </summary>
        [DataMember(Name="organization_prefs", EmitDefaultValue=false)]
        public Object OrganizationPrefs { get; set; }

        /// <summary>
        /// Gets or Sets Parallelism
        /// </summary>
        [DataMember(Name="parallelism", EmitDefaultValue=true)]
        public int Parallelism { get; set; }

        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name="plan", EmitDefaultValue=true)]
        public string Plan { get; set; }

        /// <summary>
        /// Gets or Sets Projects
        /// </summary>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public Object Projects { get; set; }

        /// <summary>
        /// Gets or Sets PusherId
        /// </summary>
        [DataMember(Name="pusher_id", EmitDefaultValue=false)]
        public string PusherId { get; set; }

        /// <summary>
        /// Gets or Sets SelectedEmail
        /// </summary>
        [DataMember(Name="selected_email", EmitDefaultValue=false)]
        public string SelectedEmail { get; set; }

        /// <summary>
        /// Gets or Sets SignInCount
        /// </summary>
        [DataMember(Name="sign_in_count", EmitDefaultValue=true)]
        public int SignInCount { get; set; }

        /// <summary>
        /// Gets or Sets TrialEnd
        /// </summary>
        [DataMember(Name="trial_end", EmitDefaultValue=false)]
        public DateTime TrialEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  AllEmails: ").Append(AllEmails).Append("\n");
            sb.Append("  AnalyticsId: ").Append(AnalyticsId).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  BasicEmailPrefs: ").Append(BasicEmailPrefs).Append("\n");
            sb.Append("  Bitbucket: ").Append(Bitbucket).Append("\n");
            sb.Append("  BitbucketAuthorized: ").Append(BitbucketAuthorized).Append("\n");
            sb.Append("  Containers: ").Append(Containers).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DaysLeftInTrial: ").Append(DaysLeftInTrial).Append("\n");
            sb.Append("  DevAdmin: ").Append(DevAdmin).Append("\n");
            sb.Append("  EnrolledBetas: ").Append(EnrolledBetas).Append("\n");
            sb.Append("  GithubId: ").Append(GithubId).Append("\n");
            sb.Append("  GithubOauthScopes: ").Append(GithubOauthScopes).Append("\n");
            sb.Append("  GravatarId: ").Append(GravatarId).Append("\n");
            sb.Append("  HerokuApiKey: ").Append(HerokuApiKey).Append("\n");
            sb.Append("  InBetaProgram: ").Append(InBetaProgram).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationPrefs: ").Append(OrganizationPrefs).Append("\n");
            sb.Append("  Parallelism: ").Append(Parallelism).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  PusherId: ").Append(PusherId).Append("\n");
            sb.Append("  SelectedEmail: ").Append(SelectedEmail).Append("\n");
            sb.Append("  SignInCount: ").Append(SignInCount).Append("\n");
            sb.Append("  TrialEnd: ").Append(TrialEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Admin == other.Admin ||
                    
                    Admin.Equals(other.Admin)
                ) && 
                (
                    AllEmails == other.AllEmails ||
                    AllEmails != null &&
                    other.AllEmails != null &&
                    AllEmails.SequenceEqual(other.AllEmails)
                ) && 
                (
                    AnalyticsId == other.AnalyticsId ||
                    AnalyticsId != null &&
                    AnalyticsId.Equals(other.AnalyticsId)
                ) && 
                (
                    AvatarUrl == other.AvatarUrl ||
                    AvatarUrl != null &&
                    AvatarUrl.Equals(other.AvatarUrl)
                ) && 
                (
                    BasicEmailPrefs == other.BasicEmailPrefs ||
                    BasicEmailPrefs != null &&
                    BasicEmailPrefs.Equals(other.BasicEmailPrefs)
                ) && 
                (
                    Bitbucket == other.Bitbucket ||
                    Bitbucket != null &&
                    Bitbucket.Equals(other.Bitbucket)
                ) && 
                (
                    BitbucketAuthorized == other.BitbucketAuthorized ||
                    
                    BitbucketAuthorized.Equals(other.BitbucketAuthorized)
                ) && 
                (
                    Containers == other.Containers ||
                    
                    Containers.Equals(other.Containers)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    DaysLeftInTrial == other.DaysLeftInTrial ||
                    
                    DaysLeftInTrial.Equals(other.DaysLeftInTrial)
                ) && 
                (
                    DevAdmin == other.DevAdmin ||
                    
                    DevAdmin.Equals(other.DevAdmin)
                ) && 
                (
                    EnrolledBetas == other.EnrolledBetas ||
                    EnrolledBetas != null &&
                    other.EnrolledBetas != null &&
                    EnrolledBetas.SequenceEqual(other.EnrolledBetas)
                ) && 
                (
                    GithubId == other.GithubId ||
                    GithubId != null &&
                    GithubId.Equals(other.GithubId)
                ) && 
                (
                    GithubOauthScopes == other.GithubOauthScopes ||
                    GithubOauthScopes != null &&
                    other.GithubOauthScopes != null &&
                    GithubOauthScopes.SequenceEqual(other.GithubOauthScopes)
                ) && 
                (
                    GravatarId == other.GravatarId ||
                    GravatarId != null &&
                    GravatarId.Equals(other.GravatarId)
                ) && 
                (
                    HerokuApiKey == other.HerokuApiKey ||
                    HerokuApiKey != null &&
                    HerokuApiKey.Equals(other.HerokuApiKey)
                ) && 
                (
                    InBetaProgram == other.InBetaProgram ||
                    
                    InBetaProgram.Equals(other.InBetaProgram)
                ) && 
                (
                    Login == other.Login ||
                    Login != null &&
                    Login.Equals(other.Login)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    OrganizationPrefs == other.OrganizationPrefs ||
                    OrganizationPrefs != null &&
                    OrganizationPrefs.Equals(other.OrganizationPrefs)
                ) && 
                (
                    Parallelism == other.Parallelism ||
                    
                    Parallelism.Equals(other.Parallelism)
                ) && 
                (
                    Plan == other.Plan ||
                    Plan != null &&
                    Plan.Equals(other.Plan)
                ) && 
                (
                    Projects == other.Projects ||
                    Projects != null &&
                    Projects.Equals(other.Projects)
                ) && 
                (
                    PusherId == other.PusherId ||
                    PusherId != null &&
                    PusherId.Equals(other.PusherId)
                ) && 
                (
                    SelectedEmail == other.SelectedEmail ||
                    SelectedEmail != null &&
                    SelectedEmail.Equals(other.SelectedEmail)
                ) && 
                (
                    SignInCount == other.SignInCount ||
                    
                    SignInCount.Equals(other.SignInCount)
                ) && 
                (
                    TrialEnd == other.TrialEnd ||
                    TrialEnd != null &&
                    TrialEnd.Equals(other.TrialEnd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Admin.GetHashCode();
                    if (AllEmails != null)
                    hashCode = hashCode * 59 + AllEmails.GetHashCode();
                    if (AnalyticsId != null)
                    hashCode = hashCode * 59 + AnalyticsId.GetHashCode();
                    if (AvatarUrl != null)
                    hashCode = hashCode * 59 + AvatarUrl.GetHashCode();
                    if (BasicEmailPrefs != null)
                    hashCode = hashCode * 59 + BasicEmailPrefs.GetHashCode();
                    if (Bitbucket != null)
                    hashCode = hashCode * 59 + Bitbucket.GetHashCode();
                    
                    hashCode = hashCode * 59 + BitbucketAuthorized.GetHashCode();
                    
                    hashCode = hashCode * 59 + Containers.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + DaysLeftInTrial.GetHashCode();
                    
                    hashCode = hashCode * 59 + DevAdmin.GetHashCode();
                    if (EnrolledBetas != null)
                    hashCode = hashCode * 59 + EnrolledBetas.GetHashCode();
                    if (GithubId != null)
                    hashCode = hashCode * 59 + GithubId.GetHashCode();
                    if (GithubOauthScopes != null)
                    hashCode = hashCode * 59 + GithubOauthScopes.GetHashCode();
                    if (GravatarId != null)
                    hashCode = hashCode * 59 + GravatarId.GetHashCode();
                    if (HerokuApiKey != null)
                    hashCode = hashCode * 59 + HerokuApiKey.GetHashCode();
                    
                    hashCode = hashCode * 59 + InBetaProgram.GetHashCode();
                    if (Login != null)
                    hashCode = hashCode * 59 + Login.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (OrganizationPrefs != null)
                    hashCode = hashCode * 59 + OrganizationPrefs.GetHashCode();
                    
                    hashCode = hashCode * 59 + Parallelism.GetHashCode();
                    if (Plan != null)
                    hashCode = hashCode * 59 + Plan.GetHashCode();
                    if (Projects != null)
                    hashCode = hashCode * 59 + Projects.GetHashCode();
                    if (PusherId != null)
                    hashCode = hashCode * 59 + PusherId.GetHashCode();
                    if (SelectedEmail != null)
                    hashCode = hashCode * 59 + SelectedEmail.GetHashCode();
                    
                    hashCode = hashCode * 59 + SignInCount.GetHashCode();
                    if (TrialEnd != null)
                    hashCode = hashCode * 59 + TrialEnd.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(User left, User right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(User left, User right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
