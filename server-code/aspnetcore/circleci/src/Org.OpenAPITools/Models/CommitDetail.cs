/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CommitDetail : IEquatable<CommitDetail>
    {
        /// <summary>
        /// Gets or Sets AuthorDate
        /// </summary>
        [DataMember(Name="author_date", EmitDefaultValue=false)]
        public DateTime AuthorDate { get; set; }

        /// <summary>
        /// Gets or Sets AuthorEmail
        /// </summary>
        [DataMember(Name="author_email", EmitDefaultValue=false)]
        public string AuthorEmail { get; set; }

        /// <summary>
        /// Gets or Sets AuthorLogin
        /// </summary>
        [DataMember(Name="author_login", EmitDefaultValue=false)]
        public string AuthorLogin { get; set; }

        /// <summary>
        /// Gets or Sets AuthorName
        /// </summary>
        [DataMember(Name="author_name", EmitDefaultValue=false)]
        public string AuthorName { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Commit
        /// </summary>
        [DataMember(Name="commit", EmitDefaultValue=false)]
        public string Commit { get; set; }

        /// <summary>
        /// Gets or Sets CommitUrl
        /// </summary>
        [DataMember(Name="commit_url", EmitDefaultValue=false)]
        public string CommitUrl { get; set; }

        /// <summary>
        /// Gets or Sets CommitterDate
        /// </summary>
        [DataMember(Name="committer_date", EmitDefaultValue=false)]
        public DateTime CommitterDate { get; set; }

        /// <summary>
        /// Gets or Sets CommitterEmail
        /// </summary>
        [DataMember(Name="committer_email", EmitDefaultValue=false)]
        public string CommitterEmail { get; set; }

        /// <summary>
        /// Gets or Sets CommitterLogin
        /// </summary>
        [DataMember(Name="committer_login", EmitDefaultValue=false)]
        public string CommitterLogin { get; set; }

        /// <summary>
        /// Gets or Sets CommitterName
        /// </summary>
        [DataMember(Name="committer_name", EmitDefaultValue=false)]
        public string CommitterName { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommitDetail {\n");
            sb.Append("  AuthorDate: ").Append(AuthorDate).Append("\n");
            sb.Append("  AuthorEmail: ").Append(AuthorEmail).Append("\n");
            sb.Append("  AuthorLogin: ").Append(AuthorLogin).Append("\n");
            sb.Append("  AuthorName: ").Append(AuthorName).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("  CommitUrl: ").Append(CommitUrl).Append("\n");
            sb.Append("  CommitterDate: ").Append(CommitterDate).Append("\n");
            sb.Append("  CommitterEmail: ").Append(CommitterEmail).Append("\n");
            sb.Append("  CommitterLogin: ").Append(CommitterLogin).Append("\n");
            sb.Append("  CommitterName: ").Append(CommitterName).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CommitDetail)obj);
        }

        /// <summary>
        /// Returns true if CommitDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of CommitDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommitDetail other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AuthorDate == other.AuthorDate ||
                    AuthorDate != null &&
                    AuthorDate.Equals(other.AuthorDate)
                ) && 
                (
                    AuthorEmail == other.AuthorEmail ||
                    AuthorEmail != null &&
                    AuthorEmail.Equals(other.AuthorEmail)
                ) && 
                (
                    AuthorLogin == other.AuthorLogin ||
                    AuthorLogin != null &&
                    AuthorLogin.Equals(other.AuthorLogin)
                ) && 
                (
                    AuthorName == other.AuthorName ||
                    AuthorName != null &&
                    AuthorName.Equals(other.AuthorName)
                ) && 
                (
                    Body == other.Body ||
                    Body != null &&
                    Body.Equals(other.Body)
                ) && 
                (
                    Commit == other.Commit ||
                    Commit != null &&
                    Commit.Equals(other.Commit)
                ) && 
                (
                    CommitUrl == other.CommitUrl ||
                    CommitUrl != null &&
                    CommitUrl.Equals(other.CommitUrl)
                ) && 
                (
                    CommitterDate == other.CommitterDate ||
                    CommitterDate != null &&
                    CommitterDate.Equals(other.CommitterDate)
                ) && 
                (
                    CommitterEmail == other.CommitterEmail ||
                    CommitterEmail != null &&
                    CommitterEmail.Equals(other.CommitterEmail)
                ) && 
                (
                    CommitterLogin == other.CommitterLogin ||
                    CommitterLogin != null &&
                    CommitterLogin.Equals(other.CommitterLogin)
                ) && 
                (
                    CommitterName == other.CommitterName ||
                    CommitterName != null &&
                    CommitterName.Equals(other.CommitterName)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AuthorDate != null)
                    hashCode = hashCode * 59 + AuthorDate.GetHashCode();
                    if (AuthorEmail != null)
                    hashCode = hashCode * 59 + AuthorEmail.GetHashCode();
                    if (AuthorLogin != null)
                    hashCode = hashCode * 59 + AuthorLogin.GetHashCode();
                    if (AuthorName != null)
                    hashCode = hashCode * 59 + AuthorName.GetHashCode();
                    if (Body != null)
                    hashCode = hashCode * 59 + Body.GetHashCode();
                    if (Commit != null)
                    hashCode = hashCode * 59 + Commit.GetHashCode();
                    if (CommitUrl != null)
                    hashCode = hashCode * 59 + CommitUrl.GetHashCode();
                    if (CommitterDate != null)
                    hashCode = hashCode * 59 + CommitterDate.GetHashCode();
                    if (CommitterEmail != null)
                    hashCode = hashCode * 59 + CommitterEmail.GetHashCode();
                    if (CommitterLogin != null)
                    hashCode = hashCode * 59 + CommitterLogin.GetHashCode();
                    if (CommitterName != null)
                    hashCode = hashCode * 59 + CommitterName.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CommitDetail left, CommitDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CommitDetail left, CommitDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
