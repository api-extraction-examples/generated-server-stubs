/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Specification for the update strategy of the service.
    /// </summary>
    [DataContract]
    public partial class ServiceSpecUpdateConfig : IEquatable<ServiceSpecUpdateConfig>
    {
        /// <summary>
        /// Amount of time between updates, in nanoseconds.
        /// </summary>
        /// <value>Amount of time between updates, in nanoseconds.</value>
        [DataMember(Name="Delay", EmitDefaultValue=true)]
        public long Delay { get; set; }


        /// <summary>
        /// Action to take if an updated task fails to run, or stops running during the update.
        /// </summary>
        /// <value>Action to take if an updated task fails to run, or stops running during the update.</value>
        [TypeConverter(typeof(CustomEnumConverter<FailureActionEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FailureActionEnum
        {
            
            /// <summary>
            /// Enum ContinueEnum for continue
            /// </summary>
            [EnumMember(Value = "continue")]
            ContinueEnum = 1,
            
            /// <summary>
            /// Enum PauseEnum for pause
            /// </summary>
            [EnumMember(Value = "pause")]
            PauseEnum = 2,
            
            /// <summary>
            /// Enum RollbackEnum for rollback
            /// </summary>
            [EnumMember(Value = "rollback")]
            RollbackEnum = 3
        }

        /// <summary>
        /// Action to take if an updated task fails to run, or stops running during the update.
        /// </summary>
        /// <value>Action to take if an updated task fails to run, or stops running during the update.</value>
        [DataMember(Name="FailureAction", EmitDefaultValue=true)]
        public FailureActionEnum FailureAction { get; set; }

        /// <summary>
        /// The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1.
        /// </summary>
        /// <value>The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1.</value>
        [DataMember(Name="MaxFailureRatio", EmitDefaultValue=true)]
        public decimal MaxFailureRatio { get; set; } = 0M;

        /// <summary>
        /// Amount of time to monitor each updated task for failures, in nanoseconds.
        /// </summary>
        /// <value>Amount of time to monitor each updated task for failures, in nanoseconds.</value>
        [DataMember(Name="Monitor", EmitDefaultValue=true)]
        public long Monitor { get; set; }


        /// <summary>
        /// The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
        /// </summary>
        /// <value>The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.</value>
        [TypeConverter(typeof(CustomEnumConverter<OrderEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OrderEnum
        {
            
            /// <summary>
            /// Enum StopFirstEnum for stop-first
            /// </summary>
            [EnumMember(Value = "stop-first")]
            StopFirstEnum = 1,
            
            /// <summary>
            /// Enum StartFirstEnum for start-first
            /// </summary>
            [EnumMember(Value = "start-first")]
            StartFirstEnum = 2
        }

        /// <summary>
        /// The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
        /// </summary>
        /// <value>The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.</value>
        [DataMember(Name="Order", EmitDefaultValue=true)]
        public OrderEnum Order { get; set; }

        /// <summary>
        /// Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism).
        /// </summary>
        /// <value>Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism).</value>
        [DataMember(Name="Parallelism", EmitDefaultValue=true)]
        public long Parallelism { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceSpecUpdateConfig {\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  FailureAction: ").Append(FailureAction).Append("\n");
            sb.Append("  MaxFailureRatio: ").Append(MaxFailureRatio).Append("\n");
            sb.Append("  Monitor: ").Append(Monitor).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Parallelism: ").Append(Parallelism).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceSpecUpdateConfig)obj);
        }

        /// <summary>
        /// Returns true if ServiceSpecUpdateConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceSpecUpdateConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceSpecUpdateConfig other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Delay == other.Delay ||
                    
                    Delay.Equals(other.Delay)
                ) && 
                (
                    FailureAction == other.FailureAction ||
                    
                    FailureAction.Equals(other.FailureAction)
                ) && 
                (
                    MaxFailureRatio == other.MaxFailureRatio ||
                    
                    MaxFailureRatio.Equals(other.MaxFailureRatio)
                ) && 
                (
                    Monitor == other.Monitor ||
                    
                    Monitor.Equals(other.Monitor)
                ) && 
                (
                    Order == other.Order ||
                    
                    Order.Equals(other.Order)
                ) && 
                (
                    Parallelism == other.Parallelism ||
                    
                    Parallelism.Equals(other.Parallelism)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Delay.GetHashCode();
                    
                    hashCode = hashCode * 59 + FailureAction.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaxFailureRatio.GetHashCode();
                    
                    hashCode = hashCode * 59 + Monitor.GetHashCode();
                    
                    hashCode = hashCode * 59 + Order.GetHashCode();
                    
                    hashCode = hashCode * 59 + Parallelism.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServiceSpecUpdateConfig left, ServiceSpecUpdateConfig right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceSpecUpdateConfig left, ServiceSpecUpdateConfig right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
