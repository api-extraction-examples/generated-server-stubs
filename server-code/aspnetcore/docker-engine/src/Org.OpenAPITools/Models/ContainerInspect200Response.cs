/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContainerInspect200Response : IEquatable<ContainerInspect200Response>
    {
        /// <summary>
        /// Gets or Sets AppArmorProfile
        /// </summary>
        [DataMember(Name="AppArmorProfile", EmitDefaultValue=false)]
        public string AppArmorProfile { get; set; }

        /// <summary>
        /// The arguments to the command being run
        /// </summary>
        /// <value>The arguments to the command being run</value>
        [DataMember(Name="Args", EmitDefaultValue=false)]
        public List<string> Args { get; set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name="Config", EmitDefaultValue=false)]
        public ContainerConfig Config { get; set; }

        /// <summary>
        /// The time the container was created
        /// </summary>
        /// <value>The time the container was created</value>
        [DataMember(Name="Created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets Driver
        /// </summary>
        [DataMember(Name="Driver", EmitDefaultValue=false)]
        public string Driver { get; set; }

        /// <summary>
        /// Gets or Sets ExecIDs
        /// </summary>
        [DataMember(Name="ExecIDs", EmitDefaultValue=false)]
        public string ExecIDs { get; set; }

        /// <summary>
        /// Gets or Sets GraphDriver
        /// </summary>
        [DataMember(Name="GraphDriver", EmitDefaultValue=false)]
        public GraphDriverData GraphDriver { get; set; }

        /// <summary>
        /// Gets or Sets HostConfig
        /// </summary>
        [DataMember(Name="HostConfig", EmitDefaultValue=false)]
        public HostConfig HostConfig { get; set; }

        /// <summary>
        /// Gets or Sets HostnamePath
        /// </summary>
        [DataMember(Name="HostnamePath", EmitDefaultValue=false)]
        public string HostnamePath { get; set; }

        /// <summary>
        /// Gets or Sets HostsPath
        /// </summary>
        [DataMember(Name="HostsPath", EmitDefaultValue=false)]
        public string HostsPath { get; set; }

        /// <summary>
        /// The ID of the container
        /// </summary>
        /// <value>The ID of the container</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The container&#39;s image
        /// </summary>
        /// <value>The container&#39;s image</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets LogPath
        /// </summary>
        [DataMember(Name="LogPath", EmitDefaultValue=false)]
        public string LogPath { get; set; }

        /// <summary>
        /// Gets or Sets MountLabel
        /// </summary>
        [DataMember(Name="MountLabel", EmitDefaultValue=false)]
        public string MountLabel { get; set; }

        /// <summary>
        /// Gets or Sets Mounts
        /// </summary>
        [DataMember(Name="Mounts", EmitDefaultValue=false)]
        public List<MountPoint> Mounts { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NetworkSettings
        /// </summary>
        [DataMember(Name="NetworkSettings", EmitDefaultValue=false)]
        public NetworkSettings NetworkSettings { get; set; }

        /// <summary>
        /// TODO
        /// </summary>
        /// <value>TODO</value>
        [DataMember(Name="Node", EmitDefaultValue=false)]
        public Object Node { get; set; }

        /// <summary>
        /// The path to the command being run
        /// </summary>
        /// <value>The path to the command being run</value>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets ProcessLabel
        /// </summary>
        [DataMember(Name="ProcessLabel", EmitDefaultValue=false)]
        public string ProcessLabel { get; set; }

        /// <summary>
        /// Gets or Sets ResolvConfPath
        /// </summary>
        [DataMember(Name="ResolvConfPath", EmitDefaultValue=false)]
        public string ResolvConfPath { get; set; }

        /// <summary>
        /// Gets or Sets RestartCount
        /// </summary>
        [DataMember(Name="RestartCount", EmitDefaultValue=true)]
        public int RestartCount { get; set; }

        /// <summary>
        /// The total size of all the files in this container.
        /// </summary>
        /// <value>The total size of all the files in this container.</value>
        [DataMember(Name="SizeRootFs", EmitDefaultValue=true)]
        public long SizeRootFs { get; set; }

        /// <summary>
        /// The size of files that have been created or changed by this container.
        /// </summary>
        /// <value>The size of files that have been created or changed by this container.</value>
        [DataMember(Name="SizeRw", EmitDefaultValue=true)]
        public long SizeRw { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public ContainerInspect200ResponseState State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerInspect200Response {\n");
            sb.Append("  AppArmorProfile: ").Append(AppArmorProfile).Append("\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  ExecIDs: ").Append(ExecIDs).Append("\n");
            sb.Append("  GraphDriver: ").Append(GraphDriver).Append("\n");
            sb.Append("  HostConfig: ").Append(HostConfig).Append("\n");
            sb.Append("  HostnamePath: ").Append(HostnamePath).Append("\n");
            sb.Append("  HostsPath: ").Append(HostsPath).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  LogPath: ").Append(LogPath).Append("\n");
            sb.Append("  MountLabel: ").Append(MountLabel).Append("\n");
            sb.Append("  Mounts: ").Append(Mounts).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NetworkSettings: ").Append(NetworkSettings).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ProcessLabel: ").Append(ProcessLabel).Append("\n");
            sb.Append("  ResolvConfPath: ").Append(ResolvConfPath).Append("\n");
            sb.Append("  RestartCount: ").Append(RestartCount).Append("\n");
            sb.Append("  SizeRootFs: ").Append(SizeRootFs).Append("\n");
            sb.Append("  SizeRw: ").Append(SizeRw).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContainerInspect200Response)obj);
        }

        /// <summary>
        /// Returns true if ContainerInspect200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of ContainerInspect200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerInspect200Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AppArmorProfile == other.AppArmorProfile ||
                    AppArmorProfile != null &&
                    AppArmorProfile.Equals(other.AppArmorProfile)
                ) && 
                (
                    Args == other.Args ||
                    Args != null &&
                    other.Args != null &&
                    Args.SequenceEqual(other.Args)
                ) && 
                (
                    Config == other.Config ||
                    Config != null &&
                    Config.Equals(other.Config)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Driver == other.Driver ||
                    Driver != null &&
                    Driver.Equals(other.Driver)
                ) && 
                (
                    ExecIDs == other.ExecIDs ||
                    ExecIDs != null &&
                    ExecIDs.Equals(other.ExecIDs)
                ) && 
                (
                    GraphDriver == other.GraphDriver ||
                    GraphDriver != null &&
                    GraphDriver.Equals(other.GraphDriver)
                ) && 
                (
                    HostConfig == other.HostConfig ||
                    HostConfig != null &&
                    HostConfig.Equals(other.HostConfig)
                ) && 
                (
                    HostnamePath == other.HostnamePath ||
                    HostnamePath != null &&
                    HostnamePath.Equals(other.HostnamePath)
                ) && 
                (
                    HostsPath == other.HostsPath ||
                    HostsPath != null &&
                    HostsPath.Equals(other.HostsPath)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.Equals(other.Image)
                ) && 
                (
                    LogPath == other.LogPath ||
                    LogPath != null &&
                    LogPath.Equals(other.LogPath)
                ) && 
                (
                    MountLabel == other.MountLabel ||
                    MountLabel != null &&
                    MountLabel.Equals(other.MountLabel)
                ) && 
                (
                    Mounts == other.Mounts ||
                    Mounts != null &&
                    other.Mounts != null &&
                    Mounts.SequenceEqual(other.Mounts)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NetworkSettings == other.NetworkSettings ||
                    NetworkSettings != null &&
                    NetworkSettings.Equals(other.NetworkSettings)
                ) && 
                (
                    Node == other.Node ||
                    Node != null &&
                    Node.Equals(other.Node)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    ProcessLabel == other.ProcessLabel ||
                    ProcessLabel != null &&
                    ProcessLabel.Equals(other.ProcessLabel)
                ) && 
                (
                    ResolvConfPath == other.ResolvConfPath ||
                    ResolvConfPath != null &&
                    ResolvConfPath.Equals(other.ResolvConfPath)
                ) && 
                (
                    RestartCount == other.RestartCount ||
                    
                    RestartCount.Equals(other.RestartCount)
                ) && 
                (
                    SizeRootFs == other.SizeRootFs ||
                    
                    SizeRootFs.Equals(other.SizeRootFs)
                ) && 
                (
                    SizeRw == other.SizeRw ||
                    
                    SizeRw.Equals(other.SizeRw)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AppArmorProfile != null)
                    hashCode = hashCode * 59 + AppArmorProfile.GetHashCode();
                    if (Args != null)
                    hashCode = hashCode * 59 + Args.GetHashCode();
                    if (Config != null)
                    hashCode = hashCode * 59 + Config.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Driver != null)
                    hashCode = hashCode * 59 + Driver.GetHashCode();
                    if (ExecIDs != null)
                    hashCode = hashCode * 59 + ExecIDs.GetHashCode();
                    if (GraphDriver != null)
                    hashCode = hashCode * 59 + GraphDriver.GetHashCode();
                    if (HostConfig != null)
                    hashCode = hashCode * 59 + HostConfig.GetHashCode();
                    if (HostnamePath != null)
                    hashCode = hashCode * 59 + HostnamePath.GetHashCode();
                    if (HostsPath != null)
                    hashCode = hashCode * 59 + HostsPath.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (LogPath != null)
                    hashCode = hashCode * 59 + LogPath.GetHashCode();
                    if (MountLabel != null)
                    hashCode = hashCode * 59 + MountLabel.GetHashCode();
                    if (Mounts != null)
                    hashCode = hashCode * 59 + Mounts.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NetworkSettings != null)
                    hashCode = hashCode * 59 + NetworkSettings.GetHashCode();
                    if (Node != null)
                    hashCode = hashCode * 59 + Node.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (ProcessLabel != null)
                    hashCode = hashCode * 59 + ProcessLabel.GetHashCode();
                    if (ResolvConfPath != null)
                    hashCode = hashCode * 59 + ResolvConfPath.GetHashCode();
                    
                    hashCode = hashCode * 59 + RestartCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + SizeRootFs.GetHashCode();
                    
                    hashCode = hashCode * 59 + SizeRw.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContainerInspect200Response left, ContainerInspect200Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContainerInspect200Response left, ContainerInspect200Response right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
