/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// NetworkSettings exposes the network settings in the API
    /// </summary>
    [DataContract]
    public partial class NetworkSettings : IEquatable<NetworkSettings>
    {
        /// <summary>
        /// Name of the network&#39;a bridge (for example, &#x60;docker0&#x60;).
        /// </summary>
        /// <value>Name of the network&#39;a bridge (for example, &#x60;docker0&#x60;).</value>
        /// <example>docker0</example>
        [DataMember(Name="Bridge", EmitDefaultValue=false)]
        public string Bridge { get; set; }

        /// <summary>
        /// EndpointID uniquely represents a service endpoint in a Sandbox.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>EndpointID uniquely represents a service endpoint in a Sandbox.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        /// <example>b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b</example>
        [DataMember(Name="EndpointID", EmitDefaultValue=false)]
        public string EndpointID { get; set; }

        /// <summary>
        /// Gateway address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>Gateway address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        /// <example>172.17.0.1</example>
        [DataMember(Name="Gateway", EmitDefaultValue=false)]
        public string Gateway { get; set; }

        /// <summary>
        /// Global IPv6 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>Global IPv6 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        /// <example>2001:db8::5689</example>
        [DataMember(Name="GlobalIPv6Address", EmitDefaultValue=false)]
        public string GlobalIPv6Address { get; set; }

        /// <summary>
        /// Mask length of the global IPv6 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>Mask length of the global IPv6 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        /// <example>64</example>
        [DataMember(Name="GlobalIPv6PrefixLen", EmitDefaultValue=true)]
        public int GlobalIPv6PrefixLen { get; set; }

        /// <summary>
        /// Indicates if hairpin NAT should be enabled on the virtual interface. 
        /// </summary>
        /// <value>Indicates if hairpin NAT should be enabled on the virtual interface. </value>
        /// <example>false</example>
        [DataMember(Name="HairpinMode", EmitDefaultValue=true)]
        public bool HairpinMode { get; set; }

        /// <summary>
        /// IPv4 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>IPv4 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        /// <example>172.17.0.4</example>
        [DataMember(Name="IPAddress", EmitDefaultValue=false)]
        public string IPAddress { get; set; }

        /// <summary>
        /// Mask length of the IPv4 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>Mask length of the IPv4 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        /// <example>16</example>
        [DataMember(Name="IPPrefixLen", EmitDefaultValue=true)]
        public int IPPrefixLen { get; set; }

        /// <summary>
        /// IPv6 gateway address for this network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>IPv6 gateway address for this network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        /// <example>2001:db8:2::100</example>
        [DataMember(Name="IPv6Gateway", EmitDefaultValue=false)]
        public string IPv6Gateway { get; set; }

        /// <summary>
        /// IPv6 unicast address using the link-local prefix.
        /// </summary>
        /// <value>IPv6 unicast address using the link-local prefix.</value>
        /// <example>fe80::42:acff:fe11:1</example>
        [DataMember(Name="LinkLocalIPv6Address", EmitDefaultValue=false)]
        public string LinkLocalIPv6Address { get; set; }

        /// <summary>
        /// Prefix length of the IPv6 unicast address.
        /// </summary>
        /// <value>Prefix length of the IPv6 unicast address.</value>
        /// <example>64</example>
        [DataMember(Name="LinkLocalIPv6PrefixLen", EmitDefaultValue=true)]
        public int LinkLocalIPv6PrefixLen { get; set; }

        /// <summary>
        /// MAC address for the container on the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 
        /// </summary>
        /// <value>MAC address for the container on the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 </value>
        /// <example>02:42:ac:11:00:04</example>
        [DataMember(Name="MacAddress", EmitDefaultValue=false)]
        public string MacAddress { get; set; }

        /// <summary>
        /// Information about all networks that the container is connected to. 
        /// </summary>
        /// <value>Information about all networks that the container is connected to. </value>
        [DataMember(Name="Networks", EmitDefaultValue=false)]
        public Dictionary<string, EndpointSettings> Networks { get; set; }

        /// <summary>
        /// PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a container&#39;s port is mapped for both &#x60;tcp&#x60; and &#x60;udp&#x60;, two separate entries are added to the mapping table. 
        /// </summary>
        /// <value>PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a container&#39;s port is mapped for both &#x60;tcp&#x60; and &#x60;udp&#x60;, two separate entries are added to the mapping table. </value>
        /// <example>{&quot;2377/tcp&quot;:null,&quot;443/tcp&quot;:[{&quot;HostIp&quot;:&quot;127.0.0.1&quot;,&quot;HostPort&quot;:&quot;4443&quot;}],&quot;53/udp&quot;:[{&quot;HostIp&quot;:&quot;0.0.0.0&quot;,&quot;HostPort&quot;:&quot;53&quot;}],&quot;80/tcp&quot;:[{&quot;HostIp&quot;:&quot;0.0.0.0&quot;,&quot;HostPort&quot;:&quot;80&quot;},{&quot;HostIp&quot;:&quot;0.0.0.0&quot;,&quot;HostPort&quot;:&quot;8080&quot;}],&quot;80/udp&quot;:[{&quot;HostIp&quot;:&quot;0.0.0.0&quot;,&quot;HostPort&quot;:&quot;80&quot;}]}</example>
        [DataMember(Name="Ports", EmitDefaultValue=false)]
        public Dictionary<string, List<PortBinding>> Ports { get; set; }

        /// <summary>
        /// SandboxID uniquely represents a container&#39;s network stack.
        /// </summary>
        /// <value>SandboxID uniquely represents a container&#39;s network stack.</value>
        /// <example>9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3</example>
        [DataMember(Name="SandboxID", EmitDefaultValue=false)]
        public string SandboxID { get; set; }

        /// <summary>
        /// SandboxKey identifies the sandbox
        /// </summary>
        /// <value>SandboxKey identifies the sandbox</value>
        /// <example>/var/run/docker/netns/8ab54b426c38</example>
        [DataMember(Name="SandboxKey", EmitDefaultValue=false)]
        public string SandboxKey { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryIPAddresses
        /// </summary>
        [DataMember(Name="SecondaryIPAddresses", EmitDefaultValue=true)]
        public List<Address> SecondaryIPAddresses { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryIPv6Addresses
        /// </summary>
        [DataMember(Name="SecondaryIPv6Addresses", EmitDefaultValue=true)]
        public List<Address> SecondaryIPv6Addresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkSettings {\n");
            sb.Append("  Bridge: ").Append(Bridge).Append("\n");
            sb.Append("  EndpointID: ").Append(EndpointID).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  GlobalIPv6Address: ").Append(GlobalIPv6Address).Append("\n");
            sb.Append("  GlobalIPv6PrefixLen: ").Append(GlobalIPv6PrefixLen).Append("\n");
            sb.Append("  HairpinMode: ").Append(HairpinMode).Append("\n");
            sb.Append("  IPAddress: ").Append(IPAddress).Append("\n");
            sb.Append("  IPPrefixLen: ").Append(IPPrefixLen).Append("\n");
            sb.Append("  IPv6Gateway: ").Append(IPv6Gateway).Append("\n");
            sb.Append("  LinkLocalIPv6Address: ").Append(LinkLocalIPv6Address).Append("\n");
            sb.Append("  LinkLocalIPv6PrefixLen: ").Append(LinkLocalIPv6PrefixLen).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  Networks: ").Append(Networks).Append("\n");
            sb.Append("  Ports: ").Append(Ports).Append("\n");
            sb.Append("  SandboxID: ").Append(SandboxID).Append("\n");
            sb.Append("  SandboxKey: ").Append(SandboxKey).Append("\n");
            sb.Append("  SecondaryIPAddresses: ").Append(SecondaryIPAddresses).Append("\n");
            sb.Append("  SecondaryIPv6Addresses: ").Append(SecondaryIPv6Addresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NetworkSettings)obj);
        }

        /// <summary>
        /// Returns true if NetworkSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of NetworkSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkSettings other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Bridge == other.Bridge ||
                    Bridge != null &&
                    Bridge.Equals(other.Bridge)
                ) && 
                (
                    EndpointID == other.EndpointID ||
                    EndpointID != null &&
                    EndpointID.Equals(other.EndpointID)
                ) && 
                (
                    Gateway == other.Gateway ||
                    Gateway != null &&
                    Gateway.Equals(other.Gateway)
                ) && 
                (
                    GlobalIPv6Address == other.GlobalIPv6Address ||
                    GlobalIPv6Address != null &&
                    GlobalIPv6Address.Equals(other.GlobalIPv6Address)
                ) && 
                (
                    GlobalIPv6PrefixLen == other.GlobalIPv6PrefixLen ||
                    
                    GlobalIPv6PrefixLen.Equals(other.GlobalIPv6PrefixLen)
                ) && 
                (
                    HairpinMode == other.HairpinMode ||
                    
                    HairpinMode.Equals(other.HairpinMode)
                ) && 
                (
                    IPAddress == other.IPAddress ||
                    IPAddress != null &&
                    IPAddress.Equals(other.IPAddress)
                ) && 
                (
                    IPPrefixLen == other.IPPrefixLen ||
                    
                    IPPrefixLen.Equals(other.IPPrefixLen)
                ) && 
                (
                    IPv6Gateway == other.IPv6Gateway ||
                    IPv6Gateway != null &&
                    IPv6Gateway.Equals(other.IPv6Gateway)
                ) && 
                (
                    LinkLocalIPv6Address == other.LinkLocalIPv6Address ||
                    LinkLocalIPv6Address != null &&
                    LinkLocalIPv6Address.Equals(other.LinkLocalIPv6Address)
                ) && 
                (
                    LinkLocalIPv6PrefixLen == other.LinkLocalIPv6PrefixLen ||
                    
                    LinkLocalIPv6PrefixLen.Equals(other.LinkLocalIPv6PrefixLen)
                ) && 
                (
                    MacAddress == other.MacAddress ||
                    MacAddress != null &&
                    MacAddress.Equals(other.MacAddress)
                ) && 
                (
                    Networks == other.Networks ||
                    Networks != null &&
                    other.Networks != null &&
                    Networks.SequenceEqual(other.Networks)
                ) && 
                (
                    Ports == other.Ports ||
                    Ports != null &&
                    other.Ports != null &&
                    Ports.SequenceEqual(other.Ports)
                ) && 
                (
                    SandboxID == other.SandboxID ||
                    SandboxID != null &&
                    SandboxID.Equals(other.SandboxID)
                ) && 
                (
                    SandboxKey == other.SandboxKey ||
                    SandboxKey != null &&
                    SandboxKey.Equals(other.SandboxKey)
                ) && 
                (
                    SecondaryIPAddresses == other.SecondaryIPAddresses ||
                    SecondaryIPAddresses != null &&
                    other.SecondaryIPAddresses != null &&
                    SecondaryIPAddresses.SequenceEqual(other.SecondaryIPAddresses)
                ) && 
                (
                    SecondaryIPv6Addresses == other.SecondaryIPv6Addresses ||
                    SecondaryIPv6Addresses != null &&
                    other.SecondaryIPv6Addresses != null &&
                    SecondaryIPv6Addresses.SequenceEqual(other.SecondaryIPv6Addresses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Bridge != null)
                    hashCode = hashCode * 59 + Bridge.GetHashCode();
                    if (EndpointID != null)
                    hashCode = hashCode * 59 + EndpointID.GetHashCode();
                    if (Gateway != null)
                    hashCode = hashCode * 59 + Gateway.GetHashCode();
                    if (GlobalIPv6Address != null)
                    hashCode = hashCode * 59 + GlobalIPv6Address.GetHashCode();
                    
                    hashCode = hashCode * 59 + GlobalIPv6PrefixLen.GetHashCode();
                    
                    hashCode = hashCode * 59 + HairpinMode.GetHashCode();
                    if (IPAddress != null)
                    hashCode = hashCode * 59 + IPAddress.GetHashCode();
                    
                    hashCode = hashCode * 59 + IPPrefixLen.GetHashCode();
                    if (IPv6Gateway != null)
                    hashCode = hashCode * 59 + IPv6Gateway.GetHashCode();
                    if (LinkLocalIPv6Address != null)
                    hashCode = hashCode * 59 + LinkLocalIPv6Address.GetHashCode();
                    
                    hashCode = hashCode * 59 + LinkLocalIPv6PrefixLen.GetHashCode();
                    if (MacAddress != null)
                    hashCode = hashCode * 59 + MacAddress.GetHashCode();
                    if (Networks != null)
                    hashCode = hashCode * 59 + Networks.GetHashCode();
                    if (Ports != null)
                    hashCode = hashCode * 59 + Ports.GetHashCode();
                    if (SandboxID != null)
                    hashCode = hashCode * 59 + SandboxID.GetHashCode();
                    if (SandboxKey != null)
                    hashCode = hashCode * 59 + SandboxKey.GetHashCode();
                    if (SecondaryIPAddresses != null)
                    hashCode = hashCode * 59 + SecondaryIPAddresses.GetHashCode();
                    if (SecondaryIPv6Addresses != null)
                    hashCode = hashCode * 59 + SecondaryIPv6Addresses.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NetworkSettings left, NetworkSettings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NetworkSettings left, NetworkSettings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
