/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Invalid when specified with &#x60;PluginSpec&#x60;.
    /// </summary>
    [DataContract]
    public partial class TaskSpecContainerSpec : IEquatable<TaskSpecContainerSpec>
    {
        /// <summary>
        /// Arguments to the command.
        /// </summary>
        /// <value>Arguments to the command.</value>
        [DataMember(Name="Args", EmitDefaultValue=false)]
        public List<string> Args { get; set; }

        /// <summary>
        /// The command to be run in the image.
        /// </summary>
        /// <value>The command to be run in the image.</value>
        [DataMember(Name="Command", EmitDefaultValue=false)]
        public List<string> Command { get; set; }

        /// <summary>
        /// Configs contains references to zero or more configs that will be exposed to the service.
        /// </summary>
        /// <value>Configs contains references to zero or more configs that will be exposed to the service.</value>
        [DataMember(Name="Configs", EmitDefaultValue=false)]
        public List<TaskSpecContainerSpecConfigsInner> Configs { get; set; }

        /// <summary>
        /// Gets or Sets DNSConfig
        /// </summary>
        [DataMember(Name="DNSConfig", EmitDefaultValue=false)]
        public TaskSpecContainerSpecDNSConfig DNSConfig { get; set; }

        /// <summary>
        /// The working directory for commands to run in.
        /// </summary>
        /// <value>The working directory for commands to run in.</value>
        [DataMember(Name="Dir", EmitDefaultValue=false)]
        public string Dir { get; set; }

        /// <summary>
        /// A list of environment variables in the form &#x60;VAR&#x3D;value&#x60;.
        /// </summary>
        /// <value>A list of environment variables in the form &#x60;VAR&#x3D;value&#x60;.</value>
        [DataMember(Name="Env", EmitDefaultValue=false)]
        public List<string> Env { get; set; }

        /// <summary>
        /// A list of additional groups that the container process will run as.
        /// </summary>
        /// <value>A list of additional groups that the container process will run as.</value>
        [DataMember(Name="Groups", EmitDefaultValue=false)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Gets or Sets HealthCheck
        /// </summary>
        [DataMember(Name="HealthCheck", EmitDefaultValue=false)]
        public HealthConfig HealthCheck { get; set; }

        /// <summary>
        /// The hostname to use for the container, as a valid RFC 1123 hostname.
        /// </summary>
        /// <value>The hostname to use for the container, as a valid RFC 1123 hostname.</value>
        [DataMember(Name="Hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// A list of hostname/IP mappings to add to the container&#39;s &#x60;hosts&#x60; file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...] 
        /// </summary>
        /// <value>A list of hostname/IP mappings to add to the container&#39;s &#x60;hosts&#x60; file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...] </value>
        [DataMember(Name="Hosts", EmitDefaultValue=false)]
        public List<string> Hosts { get; set; }

        /// <summary>
        /// The image name to use for the container
        /// </summary>
        /// <value>The image name to use for the container</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// User-defined key/value data.
        /// </summary>
        /// <value>User-defined key/value data.</value>
        [DataMember(Name="Labels", EmitDefaultValue=false)]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Specification for mounts to be added to containers created as part of the service.
        /// </summary>
        /// <value>Specification for mounts to be added to containers created as part of the service.</value>
        [DataMember(Name="Mounts", EmitDefaultValue=false)]
        public List<Mount> Mounts { get; set; }

        /// <summary>
        /// Open &#x60;stdin&#x60;
        /// </summary>
        /// <value>Open &#x60;stdin&#x60;</value>
        [DataMember(Name="OpenStdin", EmitDefaultValue=true)]
        public bool OpenStdin { get; set; }

        /// <summary>
        /// Gets or Sets Privileges
        /// </summary>
        [DataMember(Name="Privileges", EmitDefaultValue=false)]
        public TaskSpecContainerSpecPrivileges Privileges { get; set; }

        /// <summary>
        /// Mount the container&#39;s root filesystem as read only.
        /// </summary>
        /// <value>Mount the container&#39;s root filesystem as read only.</value>
        [DataMember(Name="ReadOnly", EmitDefaultValue=true)]
        public bool VarReadOnly { get; set; }

        /// <summary>
        /// Secrets contains references to zero or more secrets that will be exposed to the service.
        /// </summary>
        /// <value>Secrets contains references to zero or more secrets that will be exposed to the service.</value>
        [DataMember(Name="Secrets", EmitDefaultValue=false)]
        public List<TaskSpecContainerSpecSecretsInner> Secrets { get; set; }

        /// <summary>
        /// Amount of time to wait for the container to terminate before forcefully killing it.
        /// </summary>
        /// <value>Amount of time to wait for the container to terminate before forcefully killing it.</value>
        [DataMember(Name="StopGracePeriod", EmitDefaultValue=true)]
        public long StopGracePeriod { get; set; }

        /// <summary>
        /// Signal to stop the container.
        /// </summary>
        /// <value>Signal to stop the container.</value>
        [DataMember(Name="StopSignal", EmitDefaultValue=false)]
        public string StopSignal { get; set; }

        /// <summary>
        /// Whether a pseudo-TTY should be allocated.
        /// </summary>
        /// <value>Whether a pseudo-TTY should be allocated.</value>
        [DataMember(Name="TTY", EmitDefaultValue=true)]
        public bool TTY { get; set; }

        /// <summary>
        /// The user inside the container.
        /// </summary>
        /// <value>The user inside the container.</value>
        [DataMember(Name="User", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskSpecContainerSpec {\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Configs: ").Append(Configs).Append("\n");
            sb.Append("  DNSConfig: ").Append(DNSConfig).Append("\n");
            sb.Append("  Dir: ").Append(Dir).Append("\n");
            sb.Append("  Env: ").Append(Env).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  HealthCheck: ").Append(HealthCheck).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Hosts: ").Append(Hosts).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Mounts: ").Append(Mounts).Append("\n");
            sb.Append("  OpenStdin: ").Append(OpenStdin).Append("\n");
            sb.Append("  Privileges: ").Append(Privileges).Append("\n");
            sb.Append("  VarReadOnly: ").Append(VarReadOnly).Append("\n");
            sb.Append("  Secrets: ").Append(Secrets).Append("\n");
            sb.Append("  StopGracePeriod: ").Append(StopGracePeriod).Append("\n");
            sb.Append("  StopSignal: ").Append(StopSignal).Append("\n");
            sb.Append("  TTY: ").Append(TTY).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaskSpecContainerSpec)obj);
        }

        /// <summary>
        /// Returns true if TaskSpecContainerSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskSpecContainerSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskSpecContainerSpec other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Args == other.Args ||
                    Args != null &&
                    other.Args != null &&
                    Args.SequenceEqual(other.Args)
                ) && 
                (
                    Command == other.Command ||
                    Command != null &&
                    other.Command != null &&
                    Command.SequenceEqual(other.Command)
                ) && 
                (
                    Configs == other.Configs ||
                    Configs != null &&
                    other.Configs != null &&
                    Configs.SequenceEqual(other.Configs)
                ) && 
                (
                    DNSConfig == other.DNSConfig ||
                    DNSConfig != null &&
                    DNSConfig.Equals(other.DNSConfig)
                ) && 
                (
                    Dir == other.Dir ||
                    Dir != null &&
                    Dir.Equals(other.Dir)
                ) && 
                (
                    Env == other.Env ||
                    Env != null &&
                    other.Env != null &&
                    Env.SequenceEqual(other.Env)
                ) && 
                (
                    Groups == other.Groups ||
                    Groups != null &&
                    other.Groups != null &&
                    Groups.SequenceEqual(other.Groups)
                ) && 
                (
                    HealthCheck == other.HealthCheck ||
                    HealthCheck != null &&
                    HealthCheck.Equals(other.HealthCheck)
                ) && 
                (
                    Hostname == other.Hostname ||
                    Hostname != null &&
                    Hostname.Equals(other.Hostname)
                ) && 
                (
                    Hosts == other.Hosts ||
                    Hosts != null &&
                    other.Hosts != null &&
                    Hosts.SequenceEqual(other.Hosts)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.Equals(other.Image)
                ) && 
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    other.Labels != null &&
                    Labels.SequenceEqual(other.Labels)
                ) && 
                (
                    Mounts == other.Mounts ||
                    Mounts != null &&
                    other.Mounts != null &&
                    Mounts.SequenceEqual(other.Mounts)
                ) && 
                (
                    OpenStdin == other.OpenStdin ||
                    
                    OpenStdin.Equals(other.OpenStdin)
                ) && 
                (
                    Privileges == other.Privileges ||
                    Privileges != null &&
                    Privileges.Equals(other.Privileges)
                ) && 
                (
                    VarReadOnly == other.VarReadOnly ||
                    
                    VarReadOnly.Equals(other.VarReadOnly)
                ) && 
                (
                    Secrets == other.Secrets ||
                    Secrets != null &&
                    other.Secrets != null &&
                    Secrets.SequenceEqual(other.Secrets)
                ) && 
                (
                    StopGracePeriod == other.StopGracePeriod ||
                    
                    StopGracePeriod.Equals(other.StopGracePeriod)
                ) && 
                (
                    StopSignal == other.StopSignal ||
                    StopSignal != null &&
                    StopSignal.Equals(other.StopSignal)
                ) && 
                (
                    TTY == other.TTY ||
                    
                    TTY.Equals(other.TTY)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Args != null)
                    hashCode = hashCode * 59 + Args.GetHashCode();
                    if (Command != null)
                    hashCode = hashCode * 59 + Command.GetHashCode();
                    if (Configs != null)
                    hashCode = hashCode * 59 + Configs.GetHashCode();
                    if (DNSConfig != null)
                    hashCode = hashCode * 59 + DNSConfig.GetHashCode();
                    if (Dir != null)
                    hashCode = hashCode * 59 + Dir.GetHashCode();
                    if (Env != null)
                    hashCode = hashCode * 59 + Env.GetHashCode();
                    if (Groups != null)
                    hashCode = hashCode * 59 + Groups.GetHashCode();
                    if (HealthCheck != null)
                    hashCode = hashCode * 59 + HealthCheck.GetHashCode();
                    if (Hostname != null)
                    hashCode = hashCode * 59 + Hostname.GetHashCode();
                    if (Hosts != null)
                    hashCode = hashCode * 59 + Hosts.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                    if (Mounts != null)
                    hashCode = hashCode * 59 + Mounts.GetHashCode();
                    
                    hashCode = hashCode * 59 + OpenStdin.GetHashCode();
                    if (Privileges != null)
                    hashCode = hashCode * 59 + Privileges.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarReadOnly.GetHashCode();
                    if (Secrets != null)
                    hashCode = hashCode * 59 + Secrets.GetHashCode();
                    
                    hashCode = hashCode * 59 + StopGracePeriod.GetHashCode();
                    if (StopSignal != null)
                    hashCode = hashCode * 59 + StopSignal.GetHashCode();
                    
                    hashCode = hashCode * 59 + TTY.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaskSpecContainerSpec left, TaskSpecContainerSpec right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaskSpecContainerSpec left, TaskSpecContainerSpec right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
