/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SystemInfo : IEquatable<SystemInfo>
    {
        /// <summary>
        /// Hardware architecture of the host, as returned by the Go runtime (&#x60;GOARCH&#x60;).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). 
        /// </summary>
        /// <value>Hardware architecture of the host, as returned by the Go runtime (&#x60;GOARCH&#x60;).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). </value>
        /// <example>x86_64</example>
        [DataMember(Name="Architecture", EmitDefaultValue=false)]
        public string Architecture { get; set; }

        /// <summary>
        /// Indicates if &#x60;bridge-nf-call-ip6tables&#x60; is available on the host.
        /// </summary>
        /// <value>Indicates if &#x60;bridge-nf-call-ip6tables&#x60; is available on the host.</value>
        /// <example>true</example>
        [DataMember(Name="BridgeNfIp6tables", EmitDefaultValue=true)]
        public bool BridgeNfIp6tables { get; set; }

        /// <summary>
        /// Indicates if &#x60;bridge-nf-call-iptables&#x60; is available on the host.
        /// </summary>
        /// <value>Indicates if &#x60;bridge-nf-call-iptables&#x60; is available on the host.</value>
        /// <example>true</example>
        [DataMember(Name="BridgeNfIptables", EmitDefaultValue=true)]
        public bool BridgeNfIptables { get; set; }

        /// <summary>
        /// Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) 
        /// </summary>
        /// <value>Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) </value>
        /// <example>true</example>
        [DataMember(Name="CPUSet", EmitDefaultValue=true)]
        public bool CPUSet { get; set; }

        /// <summary>
        /// Indicates if CPU Shares limiting is supported by the host.
        /// </summary>
        /// <value>Indicates if CPU Shares limiting is supported by the host.</value>
        /// <example>true</example>
        [DataMember(Name="CPUShares", EmitDefaultValue=true)]
        public bool CPUShares { get; set; }


        /// <summary>
        /// The driver to use for managing cgroups. 
        /// </summary>
        /// <value>The driver to use for managing cgroups. </value>
        [TypeConverter(typeof(CustomEnumConverter<CgroupDriverEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CgroupDriverEnum
        {
            
            /// <summary>
            /// Enum CgroupfsEnum for cgroupfs
            /// </summary>
            [EnumMember(Value = "cgroupfs")]
            CgroupfsEnum = 1,
            
            /// <summary>
            /// Enum SystemdEnum for systemd
            /// </summary>
            [EnumMember(Value = "systemd")]
            SystemdEnum = 2
        }

        /// <summary>
        /// The driver to use for managing cgroups. 
        /// </summary>
        /// <value>The driver to use for managing cgroups. </value>
        /// <example>cgroupfs</example>
        [DataMember(Name="CgroupDriver", EmitDefaultValue=true)]
        public CgroupDriverEnum CgroupDriver { get; set; } = CgroupDriverEnum.CgroupfsEnum;

        /// <summary>
        /// The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a &#x60;host:port&#x60; combination on which the daemon is reachable by other hosts.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: This field is only propagated when using standalone Swarm &gt; mode, and overlay networking using an external k/v store. Overlay &gt; networks with Swarm mode enabled use the built-in raft store, and &gt; this field will be empty. 
        /// </summary>
        /// <value>The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a &#x60;host:port&#x60; combination on which the daemon is reachable by other hosts.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: This field is only propagated when using standalone Swarm &gt; mode, and overlay networking using an external k/v store. Overlay &gt; networks with Swarm mode enabled use the built-in raft store, and &gt; this field will be empty. </value>
        /// <example>node5.corp.example.com:8000</example>
        [DataMember(Name="ClusterAdvertise", EmitDefaultValue=false)]
        public string ClusterAdvertise { get; set; }

        /// <summary>
        /// URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: This field is only propagated when using standalone Swarm &gt; mode, and overlay networking using an external k/v store. Overlay &gt; networks with Swarm mode enabled use the built-in raft store, and &gt; this field will be empty. 
        /// </summary>
        /// <value>URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: This field is only propagated when using standalone Swarm &gt; mode, and overlay networking using an external k/v store. Overlay &gt; networks with Swarm mode enabled use the built-in raft store, and &gt; this field will be empty. </value>
        /// <example>consul://consul.corp.example.com:8600/some/path</example>
        [DataMember(Name="ClusterStore", EmitDefaultValue=false)]
        public string ClusterStore { get; set; }

        /// <summary>
        /// Gets or Sets ContainerdCommit
        /// </summary>
        [DataMember(Name="ContainerdCommit", EmitDefaultValue=false)]
        public Commit ContainerdCommit { get; set; }

        /// <summary>
        /// Total number of containers on the host.
        /// </summary>
        /// <value>Total number of containers on the host.</value>
        /// <example>14</example>
        [DataMember(Name="Containers", EmitDefaultValue=true)]
        public int Containers { get; set; }

        /// <summary>
        /// Number of containers with status &#x60;\&quot;paused\&quot;&#x60;. 
        /// </summary>
        /// <value>Number of containers with status &#x60;\&quot;paused\&quot;&#x60;. </value>
        /// <example>1</example>
        [DataMember(Name="ContainersPaused", EmitDefaultValue=true)]
        public int ContainersPaused { get; set; }

        /// <summary>
        /// Number of containers with status &#x60;\&quot;running\&quot;&#x60;. 
        /// </summary>
        /// <value>Number of containers with status &#x60;\&quot;running\&quot;&#x60;. </value>
        /// <example>3</example>
        [DataMember(Name="ContainersRunning", EmitDefaultValue=true)]
        public int ContainersRunning { get; set; }

        /// <summary>
        /// Number of containers with status &#x60;\&quot;stopped\&quot;&#x60;. 
        /// </summary>
        /// <value>Number of containers with status &#x60;\&quot;stopped\&quot;&#x60;. </value>
        /// <example>10</example>
        [DataMember(Name="ContainersStopped", EmitDefaultValue=true)]
        public int ContainersStopped { get; set; }

        /// <summary>
        /// Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.
        /// </summary>
        /// <value>Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.</value>
        /// <example>true</example>
        [DataMember(Name="CpuCfsPeriod", EmitDefaultValue=true)]
        public bool CpuCfsPeriod { get; set; }

        /// <summary>
        /// Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.
        /// </summary>
        /// <value>Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.</value>
        /// <example>true</example>
        [DataMember(Name="CpuCfsQuota", EmitDefaultValue=true)]
        public bool CpuCfsQuota { get; set; }

        /// <summary>
        /// Indicates if the daemon is running in debug-mode / with debug-level logging enabled.
        /// </summary>
        /// <value>Indicates if the daemon is running in debug-mode / with debug-level logging enabled.</value>
        /// <example>true</example>
        [DataMember(Name="Debug", EmitDefaultValue=true)]
        public bool Debug { get; set; }

        /// <summary>
        /// Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time. 
        /// </summary>
        /// <value>Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time. </value>
        /// <example>runc</example>
        [DataMember(Name="DefaultRuntime", EmitDefaultValue=false)]
        public string DefaultRuntime { get; set; } = "runc";

        /// <summary>
        /// Root directory of persistent Docker state.  Defaults to &#x60;/var/lib/docker&#x60; on Linux, and &#x60;C:\\ProgramData\\docker&#x60; on Windows. 
        /// </summary>
        /// <value>Root directory of persistent Docker state.  Defaults to &#x60;/var/lib/docker&#x60; on Linux, and &#x60;C:\\ProgramData\\docker&#x60; on Windows. </value>
        /// <example>/var/lib/docker</example>
        [DataMember(Name="DockerRootDir", EmitDefaultValue=false)]
        public string DockerRootDir { get; set; }

        /// <summary>
        /// Name of the storage driver in use.
        /// </summary>
        /// <value>Name of the storage driver in use.</value>
        /// <example>overlay2</example>
        [DataMember(Name="Driver", EmitDefaultValue=false)]
        public string Driver { get; set; }

        /// <summary>
        /// Information specific to the storage driver, provided as \&quot;label\&quot; / \&quot;value\&quot; pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of &#x60;docker info&#x60; on the command line.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The information returned in this field, including the &gt; formatting of values and labels, should not be considered stable, &gt; and may change without notice. 
        /// </summary>
        /// <value>Information specific to the storage driver, provided as \&quot;label\&quot; / \&quot;value\&quot; pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of &#x60;docker info&#x60; on the command line.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The information returned in this field, including the &gt; formatting of values and labels, should not be considered stable, &gt; and may change without notice. </value>
        /// <example>[[&quot;Backing Filesystem&quot;,&quot;extfs&quot;],[&quot;Supports d_type&quot;,&quot;true&quot;],[&quot;Native Overlay Diff&quot;,&quot;true&quot;]]</example>
        [DataMember(Name="DriverStatus", EmitDefaultValue=false)]
        public List<List<string>> DriverStatus { get; set; }

        /// <summary>
        /// Indicates if experimental features are enabled on the daemon. 
        /// </summary>
        /// <value>Indicates if experimental features are enabled on the daemon. </value>
        /// <example>true</example>
        [DataMember(Name="ExperimentalBuild", EmitDefaultValue=true)]
        public bool ExperimentalBuild { get; set; }

        /// <summary>
        /// User-defined resources can be either Integer resources (e.g, &#x60;SSD&#x3D;3&#x60;) or String resources (e.g, &#x60;GPU&#x3D;UUID1&#x60;)
        /// </summary>
        /// <value>User-defined resources can be either Integer resources (e.g, &#x60;SSD&#x3D;3&#x60;) or String resources (e.g, &#x60;GPU&#x3D;UUID1&#x60;)</value>
        /// <example>[{&quot;DiscreteResourceSpec&quot;:{&quot;Kind&quot;:&quot;SSD&quot;,&quot;Value&quot;:3}},{&quot;NamedResourceSpec&quot;:{&quot;Kind&quot;:&quot;GPU&quot;,&quot;Value&quot;:&quot;UUID1&quot;}},{&quot;NamedResourceSpec&quot;:{&quot;Kind&quot;:&quot;GPU&quot;,&quot;Value&quot;:&quot;UUID2&quot;}}]</example>
        [DataMember(Name="GenericResources", EmitDefaultValue=false)]
        public List<GenericResourcesInner> GenericResources { get; set; }

        /// <summary>
        /// HTTP-proxy configured for the daemon. This value is obtained from the [&#x60;HTTP_PROXY&#x60;](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. 
        /// </summary>
        /// <value>HTTP-proxy configured for the daemon. This value is obtained from the [&#x60;HTTP_PROXY&#x60;](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. </value>
        /// <example>http://user:pass@proxy.corp.example.com:8080</example>
        [DataMember(Name="HttpProxy", EmitDefaultValue=false)]
        public string HttpProxy { get; set; }

        /// <summary>
        /// HTTPS-proxy configured for the daemon. This value is obtained from the [&#x60;HTTPS_PROXY&#x60;](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. 
        /// </summary>
        /// <value>HTTPS-proxy configured for the daemon. This value is obtained from the [&#x60;HTTPS_PROXY&#x60;](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. </value>
        /// <example>https://user:pass@proxy.corp.example.com:4443</example>
        [DataMember(Name="HttpsProxy", EmitDefaultValue=false)]
        public string HttpsProxy { get; set; }

        /// <summary>
        /// Unique identifier of the daemon.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The format of the ID itself is not part of the API, and &gt; should not be considered stable. 
        /// </summary>
        /// <value>Unique identifier of the daemon.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The format of the ID itself is not part of the API, and &gt; should not be considered stable. </value>
        /// <example>7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS</example>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }

        /// <summary>
        /// Indicates IPv4 forwarding is enabled.
        /// </summary>
        /// <value>Indicates IPv4 forwarding is enabled.</value>
        /// <example>true</example>
        [DataMember(Name="IPv4Forwarding", EmitDefaultValue=true)]
        public bool IPv4Forwarding { get; set; }

        /// <summary>
        /// Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. 
        /// </summary>
        /// <value>Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. </value>
        /// <example>508</example>
        [DataMember(Name="Images", EmitDefaultValue=true)]
        public int Images { get; set; }

        /// <summary>
        /// Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud. 
        /// </summary>
        /// <value>Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud. </value>
        /// <example>https://index.docker.io/v1/</example>
        [DataMember(Name="IndexServerAddress", EmitDefaultValue=false)]
        public string IndexServerAddress { get; set; } = "https://index.docker.io/v1/";

        /// <summary>
        /// Name and, optional, path of the the &#x60;docker-init&#x60; binary.  If the path is omitted, the daemon searches the host&#39;s &#x60;$PATH&#x60; for the binary and uses the first result. 
        /// </summary>
        /// <value>Name and, optional, path of the the &#x60;docker-init&#x60; binary.  If the path is omitted, the daemon searches the host&#39;s &#x60;$PATH&#x60; for the binary and uses the first result. </value>
        /// <example>docker-init</example>
        [DataMember(Name="InitBinary", EmitDefaultValue=false)]
        public string InitBinary { get; set; }

        /// <summary>
        /// Gets or Sets InitCommit
        /// </summary>
        [DataMember(Name="InitCommit", EmitDefaultValue=false)]
        public Commit InitCommit { get; set; }


        /// <summary>
        /// Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms. 
        /// </summary>
        /// <value>Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms. </value>
        [TypeConverter(typeof(CustomEnumConverter<IsolationEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IsolationEnum
        {
            
            /// <summary>
            /// Enum DefaultEnum for default
            /// </summary>
            [EnumMember(Value = "default")]
            DefaultEnum = 1,
            
            /// <summary>
            /// Enum HypervEnum for hyperv
            /// </summary>
            [EnumMember(Value = "hyperv")]
            HypervEnum = 2,
            
            /// <summary>
            /// Enum ProcessEnum for process
            /// </summary>
            [EnumMember(Value = "process")]
            ProcessEnum = 3
        }

        /// <summary>
        /// Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is &#x60;hyperv&#x60;, and on Windows server, the default is &#x60;process&#x60;.  This option is currently not used on other platforms. 
        /// </summary>
        /// <value>Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is &#x60;hyperv&#x60;, and on Windows server, the default is &#x60;process&#x60;.  This option is currently not used on other platforms. </value>
        [DataMember(Name="Isolation", EmitDefaultValue=true)]
        public IsolationEnum Isolation { get; set; } = IsolationEnum.DefaultEnum;

        /// <summary>
        /// Indicates if the host has kernel memory limit support enabled.
        /// </summary>
        /// <value>Indicates if the host has kernel memory limit support enabled.</value>
        /// <example>true</example>
        [DataMember(Name="KernelMemory", EmitDefaultValue=true)]
        public bool KernelMemory { get; set; }

        /// <summary>
        /// Kernel version of the host.  On Linux, this information obtained from &#x60;uname&#x60;. On Windows this information is queried from the &lt;kbd&gt;HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\&lt;/kbd&gt; registry value, for example _\&quot;10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\&quot;_. 
        /// </summary>
        /// <value>Kernel version of the host.  On Linux, this information obtained from &#x60;uname&#x60;. On Windows this information is queried from the &lt;kbd&gt;HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\&lt;/kbd&gt; registry value, for example _\&quot;10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\&quot;_. </value>
        /// <example>4.9.38-moby</example>
        [DataMember(Name="KernelVersion", EmitDefaultValue=false)]
        public string KernelVersion { get; set; }

        /// <summary>
        /// User-defined labels (key/value metadata) as set on the daemon.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: When part of a Swarm, nodes can both have _daemon_ labels, &gt; set through the daemon configuration, and _node_ labels, set from a &gt; manager node in the Swarm. Node labels are not included in this &gt; field. Node labels can be retrieved using the &#x60;/nodes/(id)&#x60; endpoint &gt; on a manager node in the Swarm. 
        /// </summary>
        /// <value>User-defined labels (key/value metadata) as set on the daemon.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: When part of a Swarm, nodes can both have _daemon_ labels, &gt; set through the daemon configuration, and _node_ labels, set from a &gt; manager node in the Swarm. Node labels are not included in this &gt; field. Node labels can be retrieved using the &#x60;/nodes/(id)&#x60; endpoint &gt; on a manager node in the Swarm. </value>
        /// <example>[&quot;storage&#x3D;ssd&quot;,&quot;production&quot;]</example>
        [DataMember(Name="Labels", EmitDefaultValue=false)]
        public List<string> Labels { get; set; }

        /// <summary>
        /// Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected. 
        /// </summary>
        /// <value>Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected. </value>
        /// <example>false</example>
        [DataMember(Name="LiveRestoreEnabled", EmitDefaultValue=true)]
        public bool LiveRestoreEnabled { get; set; } = false;

        /// <summary>
        /// The logging driver to use as a default for new containers. 
        /// </summary>
        /// <value>The logging driver to use as a default for new containers. </value>
        [DataMember(Name="LoggingDriver", EmitDefaultValue=false)]
        public string LoggingDriver { get; set; }

        /// <summary>
        /// Total amount of physical memory available on the host, in kilobytes (kB). 
        /// </summary>
        /// <value>Total amount of physical memory available on the host, in kilobytes (kB). </value>
        /// <example>2095882240</example>
        [DataMember(Name="MemTotal", EmitDefaultValue=true)]
        public long MemTotal { get; set; }

        /// <summary>
        /// Indicates if the host has memory limit support enabled.
        /// </summary>
        /// <value>Indicates if the host has memory limit support enabled.</value>
        /// <example>true</example>
        [DataMember(Name="MemoryLimit", EmitDefaultValue=true)]
        public bool MemoryLimit { get; set; }

        /// <summary>
        /// The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected. 
        /// </summary>
        /// <value>The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected. </value>
        /// <example>4</example>
        [DataMember(Name="NCPU", EmitDefaultValue=true)]
        public int NCPU { get; set; }

        /// <summary>
        /// Number of event listeners subscribed.
        /// </summary>
        /// <value>Number of event listeners subscribed.</value>
        /// <example>30</example>
        [DataMember(Name="NEventsListener", EmitDefaultValue=true)]
        public int NEventsListener { get; set; }

        /// <summary>
        /// The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled. 
        /// </summary>
        /// <value>The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled. </value>
        /// <example>64</example>
        [DataMember(Name="NFd", EmitDefaultValue=true)]
        public int NFd { get; set; }

        /// <summary>
        /// The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. 
        /// </summary>
        /// <value>The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. </value>
        /// <example>174</example>
        [DataMember(Name="NGoroutines", EmitDefaultValue=true)]
        public int NGoroutines { get; set; }

        /// <summary>
        /// Hostname of the host.
        /// </summary>
        /// <value>Hostname of the host.</value>
        /// <example>node5.corp.example.com</example>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [&#x60;NO_PROXY&#x60;](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. 
        /// </summary>
        /// <value>Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [&#x60;NO_PROXY&#x60;](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. </value>
        /// <example>*.local, 169.254/16</example>
        [DataMember(Name="NoProxy", EmitDefaultValue=false)]
        public string NoProxy { get; set; }

        /// <summary>
        /// Generic type of the operating system of the host, as returned by the Go runtime (&#x60;GOOS&#x60;).  Currently returned values are \&quot;linux\&quot; and \&quot;windows\&quot;. A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). 
        /// </summary>
        /// <value>Generic type of the operating system of the host, as returned by the Go runtime (&#x60;GOOS&#x60;).  Currently returned values are \&quot;linux\&quot; and \&quot;windows\&quot;. A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). </value>
        /// <example>linux</example>
        [DataMember(Name="OSType", EmitDefaultValue=false)]
        public string OSType { get; set; }

        /// <summary>
        /// Indicates if OOM killer disable is supported on the host.
        /// </summary>
        /// <value>Indicates if OOM killer disable is supported on the host.</value>
        [DataMember(Name="OomKillDisable", EmitDefaultValue=true)]
        public bool OomKillDisable { get; set; }

        /// <summary>
        /// Name of the host&#39;s operating system, for example: \&quot;Ubuntu 16.04.2 LTS\&quot; or \&quot;Windows Server 2016 Datacenter\&quot; 
        /// </summary>
        /// <value>Name of the host&#39;s operating system, for example: \&quot;Ubuntu 16.04.2 LTS\&quot; or \&quot;Windows Server 2016 Datacenter\&quot; </value>
        /// <example>Alpine Linux v3.5</example>
        [DataMember(Name="OperatingSystem", EmitDefaultValue=false)]
        public string VarOperatingSystem { get; set; }

        /// <summary>
        /// Gets or Sets Plugins
        /// </summary>
        [DataMember(Name="Plugins", EmitDefaultValue=false)]
        public PluginsInfo Plugins { get; set; }

        /// <summary>
        /// Gets or Sets RegistryConfig
        /// </summary>
        [DataMember(Name="RegistryConfig", EmitDefaultValue=true)]
        public RegistryServiceConfig RegistryConfig { get; set; }

        /// <summary>
        /// Gets or Sets RuncCommit
        /// </summary>
        [DataMember(Name="RuncCommit", EmitDefaultValue=false)]
        public Commit RuncCommit { get; set; }

        /// <summary>
        /// List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \&quot;name\&quot; used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the &#x60;containerd&#x60; daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is &#x60;runc&#x60;, and automatically configured. Additional runtimes can be configured by the user and will be listed here. 
        /// </summary>
        /// <value>List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \&quot;name\&quot; used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the &#x60;containerd&#x60; daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is &#x60;runc&#x60;, and automatically configured. Additional runtimes can be configured by the user and will be listed here. </value>
        /// <example>{&quot;custom&quot;:{&quot;path&quot;:&quot;/usr/local/bin/my-oci-runtime&quot;,&quot;runtimeArgs&quot;:[&quot;--debug&quot;,&quot;--systemd-cgroup&#x3D;false&quot;]},&quot;runc&quot;:{&quot;path&quot;:&quot;docker-runc&quot;},&quot;runc-master&quot;:{&quot;path&quot;:&quot;/go/bin/runc&quot;}}</example>
        [DataMember(Name="Runtimes", EmitDefaultValue=false)]
        public Dictionary<string, Runtime> Runtimes { get; set; }

        /// <summary>
        /// List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, and user-namespaces (userns).  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs. 
        /// </summary>
        /// <value>List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, and user-namespaces (userns).  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs. </value>
        /// <example>[&quot;name&#x3D;apparmor&quot;,&quot;name&#x3D;seccomp,profile&#x3D;default&quot;,&quot;name&#x3D;selinux&quot;,&quot;name&#x3D;userns&quot;]</example>
        [DataMember(Name="SecurityOptions", EmitDefaultValue=false)]
        public List<string> SecurityOptions { get; set; }

        /// <summary>
        /// Version string of the daemon.  &gt; **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/) &gt; returns the Swarm version instead of the daemon  version, for example &gt; &#x60;swarm/1.2.8&#x60;. 
        /// </summary>
        /// <value>Version string of the daemon.  &gt; **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/) &gt; returns the Swarm version instead of the daemon  version, for example &gt; &#x60;swarm/1.2.8&#x60;. </value>
        /// <example>17.06.0-ce</example>
        [DataMember(Name="ServerVersion", EmitDefaultValue=false)]
        public string ServerVersion { get; set; }

        /// <summary>
        /// Indicates if the host has memory swap limit support enabled.
        /// </summary>
        /// <value>Indicates if the host has memory swap limit support enabled.</value>
        /// <example>true</example>
        [DataMember(Name="SwapLimit", EmitDefaultValue=true)]
        public bool SwapLimit { get; set; }

        /// <summary>
        /// Gets or Sets Swarm
        /// </summary>
        [DataMember(Name="Swarm", EmitDefaultValue=false)]
        public SwarmInfo Swarm { get; set; }

        /// <summary>
        /// Status information about this node (standalone Swarm API).  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The information returned in this field is only propagated &gt; by the Swarm standalone API, and is empty (&#x60;null&#x60;) when using &gt; built-in swarm mode. 
        /// </summary>
        /// <value>Status information about this node (standalone Swarm API).  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The information returned in this field is only propagated &gt; by the Swarm standalone API, and is empty (&#x60;null&#x60;) when using &gt; built-in swarm mode. </value>
        /// <example>[[&quot;Role&quot;,&quot;primary&quot;],[&quot;State&quot;,&quot;Healthy&quot;],[&quot;Strategy&quot;,&quot;spread&quot;],[&quot;Filters&quot;,&quot;health, port, containerslots, dependency, affinity, constraint, whitelist&quot;],[&quot;Nodes&quot;,&quot;2&quot;],[&quot; swarm-agent-00&quot;,&quot;192.168.99.102:2376&quot;],[&quot;  └ ID&quot;,&quot;5CT6:FBGO:RVGO:CZL4:PB2K:WCYN:2JSV:KSHH:GGFW:QOPG:6J5Q:IOZ2|192.168.99.102:2376&quot;],[&quot;  └ Status&quot;,&quot;Healthy&quot;],[&quot;  └ Containers&quot;,&quot;1 (1 Running, 0 Paused, 0 Stopped)&quot;],[&quot;  └ Reserved CPUs&quot;,&quot;0 / 1&quot;],[&quot;  └ Reserved Memory&quot;,&quot;0 B / 1.021 GiB&quot;],[&quot;  └ Labels&quot;,&quot;kernelversion&#x3D;4.4.74-boot2docker, operatingsystem&#x3D;Boot2Docker 17.06.0-ce (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype&#x3D;linux, provider&#x3D;virtualbox, storagedriver&#x3D;aufs&quot;],[&quot;  └ UpdatedAt&quot;,&quot;2017-08-09T10:03:46Z&quot;],[&quot;  └ ServerVersion&quot;,&quot;17.06.0-ce&quot;],[&quot; swarm-manager&quot;,&quot;192.168.99.101:2376&quot;],[&quot;  └ ID&quot;,&quot;TAMD:7LL3:SEF7:LW2W:4Q2X:WVFH:RTXX:JSYS:XY2P:JEHL:ZMJK:JGIW|192.168.99.101:2376&quot;],[&quot;  └ Status&quot;,&quot;Healthy&quot;],[&quot;  └ Containers&quot;,&quot;2 (2 Running, 0 Paused, 0 Stopped)&quot;],[&quot;  └ Reserved CPUs&quot;,&quot;0 / 1&quot;],[&quot;  └ Reserved Memory&quot;,&quot;0 B / 1.021 GiB&quot;],[&quot;  └ Labels&quot;,&quot;kernelversion&#x3D;4.4.74-boot2docker, operatingsystem&#x3D;Boot2Docker 17.06.0-ce (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype&#x3D;linux, provider&#x3D;virtualbox, storagedriver&#x3D;aufs&quot;],[&quot;  └ UpdatedAt&quot;,&quot;2017-08-09T10:04:11Z&quot;],[&quot;  └ ServerVersion&quot;,&quot;17.06.0-ce&quot;]]</example>
        [DataMember(Name="SystemStatus", EmitDefaultValue=false)]
        public List<List<string>> SystemStatus { get; set; }

        /// <summary>
        /// Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
        /// </summary>
        /// <value>Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. </value>
        /// <example>2017-08-08T20:28:29.06202363Z</example>
        [DataMember(Name="SystemTime", EmitDefaultValue=false)]
        public string SystemTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemInfo {\n");
            sb.Append("  Architecture: ").Append(Architecture).Append("\n");
            sb.Append("  BridgeNfIp6tables: ").Append(BridgeNfIp6tables).Append("\n");
            sb.Append("  BridgeNfIptables: ").Append(BridgeNfIptables).Append("\n");
            sb.Append("  CPUSet: ").Append(CPUSet).Append("\n");
            sb.Append("  CPUShares: ").Append(CPUShares).Append("\n");
            sb.Append("  CgroupDriver: ").Append(CgroupDriver).Append("\n");
            sb.Append("  ClusterAdvertise: ").Append(ClusterAdvertise).Append("\n");
            sb.Append("  ClusterStore: ").Append(ClusterStore).Append("\n");
            sb.Append("  ContainerdCommit: ").Append(ContainerdCommit).Append("\n");
            sb.Append("  Containers: ").Append(Containers).Append("\n");
            sb.Append("  ContainersPaused: ").Append(ContainersPaused).Append("\n");
            sb.Append("  ContainersRunning: ").Append(ContainersRunning).Append("\n");
            sb.Append("  ContainersStopped: ").Append(ContainersStopped).Append("\n");
            sb.Append("  CpuCfsPeriod: ").Append(CpuCfsPeriod).Append("\n");
            sb.Append("  CpuCfsQuota: ").Append(CpuCfsQuota).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  DefaultRuntime: ").Append(DefaultRuntime).Append("\n");
            sb.Append("  DockerRootDir: ").Append(DockerRootDir).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  DriverStatus: ").Append(DriverStatus).Append("\n");
            sb.Append("  ExperimentalBuild: ").Append(ExperimentalBuild).Append("\n");
            sb.Append("  GenericResources: ").Append(GenericResources).Append("\n");
            sb.Append("  HttpProxy: ").Append(HttpProxy).Append("\n");
            sb.Append("  HttpsProxy: ").Append(HttpsProxy).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  IPv4Forwarding: ").Append(IPv4Forwarding).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  IndexServerAddress: ").Append(IndexServerAddress).Append("\n");
            sb.Append("  InitBinary: ").Append(InitBinary).Append("\n");
            sb.Append("  InitCommit: ").Append(InitCommit).Append("\n");
            sb.Append("  Isolation: ").Append(Isolation).Append("\n");
            sb.Append("  KernelMemory: ").Append(KernelMemory).Append("\n");
            sb.Append("  KernelVersion: ").Append(KernelVersion).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  LiveRestoreEnabled: ").Append(LiveRestoreEnabled).Append("\n");
            sb.Append("  LoggingDriver: ").Append(LoggingDriver).Append("\n");
            sb.Append("  MemTotal: ").Append(MemTotal).Append("\n");
            sb.Append("  MemoryLimit: ").Append(MemoryLimit).Append("\n");
            sb.Append("  NCPU: ").Append(NCPU).Append("\n");
            sb.Append("  NEventsListener: ").Append(NEventsListener).Append("\n");
            sb.Append("  NFd: ").Append(NFd).Append("\n");
            sb.Append("  NGoroutines: ").Append(NGoroutines).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NoProxy: ").Append(NoProxy).Append("\n");
            sb.Append("  OSType: ").Append(OSType).Append("\n");
            sb.Append("  OomKillDisable: ").Append(OomKillDisable).Append("\n");
            sb.Append("  VarOperatingSystem: ").Append(VarOperatingSystem).Append("\n");
            sb.Append("  Plugins: ").Append(Plugins).Append("\n");
            sb.Append("  RegistryConfig: ").Append(RegistryConfig).Append("\n");
            sb.Append("  RuncCommit: ").Append(RuncCommit).Append("\n");
            sb.Append("  Runtimes: ").Append(Runtimes).Append("\n");
            sb.Append("  SecurityOptions: ").Append(SecurityOptions).Append("\n");
            sb.Append("  ServerVersion: ").Append(ServerVersion).Append("\n");
            sb.Append("  SwapLimit: ").Append(SwapLimit).Append("\n");
            sb.Append("  Swarm: ").Append(Swarm).Append("\n");
            sb.Append("  SystemStatus: ").Append(SystemStatus).Append("\n");
            sb.Append("  SystemTime: ").Append(SystemTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SystemInfo)obj);
        }

        /// <summary>
        /// Returns true if SystemInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of SystemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Architecture == other.Architecture ||
                    Architecture != null &&
                    Architecture.Equals(other.Architecture)
                ) && 
                (
                    BridgeNfIp6tables == other.BridgeNfIp6tables ||
                    
                    BridgeNfIp6tables.Equals(other.BridgeNfIp6tables)
                ) && 
                (
                    BridgeNfIptables == other.BridgeNfIptables ||
                    
                    BridgeNfIptables.Equals(other.BridgeNfIptables)
                ) && 
                (
                    CPUSet == other.CPUSet ||
                    
                    CPUSet.Equals(other.CPUSet)
                ) && 
                (
                    CPUShares == other.CPUShares ||
                    
                    CPUShares.Equals(other.CPUShares)
                ) && 
                (
                    CgroupDriver == other.CgroupDriver ||
                    
                    CgroupDriver.Equals(other.CgroupDriver)
                ) && 
                (
                    ClusterAdvertise == other.ClusterAdvertise ||
                    ClusterAdvertise != null &&
                    ClusterAdvertise.Equals(other.ClusterAdvertise)
                ) && 
                (
                    ClusterStore == other.ClusterStore ||
                    ClusterStore != null &&
                    ClusterStore.Equals(other.ClusterStore)
                ) && 
                (
                    ContainerdCommit == other.ContainerdCommit ||
                    ContainerdCommit != null &&
                    ContainerdCommit.Equals(other.ContainerdCommit)
                ) && 
                (
                    Containers == other.Containers ||
                    
                    Containers.Equals(other.Containers)
                ) && 
                (
                    ContainersPaused == other.ContainersPaused ||
                    
                    ContainersPaused.Equals(other.ContainersPaused)
                ) && 
                (
                    ContainersRunning == other.ContainersRunning ||
                    
                    ContainersRunning.Equals(other.ContainersRunning)
                ) && 
                (
                    ContainersStopped == other.ContainersStopped ||
                    
                    ContainersStopped.Equals(other.ContainersStopped)
                ) && 
                (
                    CpuCfsPeriod == other.CpuCfsPeriod ||
                    
                    CpuCfsPeriod.Equals(other.CpuCfsPeriod)
                ) && 
                (
                    CpuCfsQuota == other.CpuCfsQuota ||
                    
                    CpuCfsQuota.Equals(other.CpuCfsQuota)
                ) && 
                (
                    Debug == other.Debug ||
                    
                    Debug.Equals(other.Debug)
                ) && 
                (
                    DefaultRuntime == other.DefaultRuntime ||
                    DefaultRuntime != null &&
                    DefaultRuntime.Equals(other.DefaultRuntime)
                ) && 
                (
                    DockerRootDir == other.DockerRootDir ||
                    DockerRootDir != null &&
                    DockerRootDir.Equals(other.DockerRootDir)
                ) && 
                (
                    Driver == other.Driver ||
                    Driver != null &&
                    Driver.Equals(other.Driver)
                ) && 
                (
                    DriverStatus == other.DriverStatus ||
                    DriverStatus != null &&
                    other.DriverStatus != null &&
                    DriverStatus.SequenceEqual(other.DriverStatus)
                ) && 
                (
                    ExperimentalBuild == other.ExperimentalBuild ||
                    
                    ExperimentalBuild.Equals(other.ExperimentalBuild)
                ) && 
                (
                    GenericResources == other.GenericResources ||
                    GenericResources != null &&
                    other.GenericResources != null &&
                    GenericResources.SequenceEqual(other.GenericResources)
                ) && 
                (
                    HttpProxy == other.HttpProxy ||
                    HttpProxy != null &&
                    HttpProxy.Equals(other.HttpProxy)
                ) && 
                (
                    HttpsProxy == other.HttpsProxy ||
                    HttpsProxy != null &&
                    HttpsProxy.Equals(other.HttpsProxy)
                ) && 
                (
                    ID == other.ID ||
                    ID != null &&
                    ID.Equals(other.ID)
                ) && 
                (
                    IPv4Forwarding == other.IPv4Forwarding ||
                    
                    IPv4Forwarding.Equals(other.IPv4Forwarding)
                ) && 
                (
                    Images == other.Images ||
                    
                    Images.Equals(other.Images)
                ) && 
                (
                    IndexServerAddress == other.IndexServerAddress ||
                    IndexServerAddress != null &&
                    IndexServerAddress.Equals(other.IndexServerAddress)
                ) && 
                (
                    InitBinary == other.InitBinary ||
                    InitBinary != null &&
                    InitBinary.Equals(other.InitBinary)
                ) && 
                (
                    InitCommit == other.InitCommit ||
                    InitCommit != null &&
                    InitCommit.Equals(other.InitCommit)
                ) && 
                (
                    Isolation == other.Isolation ||
                    
                    Isolation.Equals(other.Isolation)
                ) && 
                (
                    KernelMemory == other.KernelMemory ||
                    
                    KernelMemory.Equals(other.KernelMemory)
                ) && 
                (
                    KernelVersion == other.KernelVersion ||
                    KernelVersion != null &&
                    KernelVersion.Equals(other.KernelVersion)
                ) && 
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    other.Labels != null &&
                    Labels.SequenceEqual(other.Labels)
                ) && 
                (
                    LiveRestoreEnabled == other.LiveRestoreEnabled ||
                    
                    LiveRestoreEnabled.Equals(other.LiveRestoreEnabled)
                ) && 
                (
                    LoggingDriver == other.LoggingDriver ||
                    LoggingDriver != null &&
                    LoggingDriver.Equals(other.LoggingDriver)
                ) && 
                (
                    MemTotal == other.MemTotal ||
                    
                    MemTotal.Equals(other.MemTotal)
                ) && 
                (
                    MemoryLimit == other.MemoryLimit ||
                    
                    MemoryLimit.Equals(other.MemoryLimit)
                ) && 
                (
                    NCPU == other.NCPU ||
                    
                    NCPU.Equals(other.NCPU)
                ) && 
                (
                    NEventsListener == other.NEventsListener ||
                    
                    NEventsListener.Equals(other.NEventsListener)
                ) && 
                (
                    NFd == other.NFd ||
                    
                    NFd.Equals(other.NFd)
                ) && 
                (
                    NGoroutines == other.NGoroutines ||
                    
                    NGoroutines.Equals(other.NGoroutines)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NoProxy == other.NoProxy ||
                    NoProxy != null &&
                    NoProxy.Equals(other.NoProxy)
                ) && 
                (
                    OSType == other.OSType ||
                    OSType != null &&
                    OSType.Equals(other.OSType)
                ) && 
                (
                    OomKillDisable == other.OomKillDisable ||
                    
                    OomKillDisable.Equals(other.OomKillDisable)
                ) && 
                (
                    VarOperatingSystem == other.VarOperatingSystem ||
                    VarOperatingSystem != null &&
                    VarOperatingSystem.Equals(other.VarOperatingSystem)
                ) && 
                (
                    Plugins == other.Plugins ||
                    Plugins != null &&
                    Plugins.Equals(other.Plugins)
                ) && 
                (
                    RegistryConfig == other.RegistryConfig ||
                    RegistryConfig != null &&
                    RegistryConfig.Equals(other.RegistryConfig)
                ) && 
                (
                    RuncCommit == other.RuncCommit ||
                    RuncCommit != null &&
                    RuncCommit.Equals(other.RuncCommit)
                ) && 
                (
                    Runtimes == other.Runtimes ||
                    Runtimes != null &&
                    other.Runtimes != null &&
                    Runtimes.SequenceEqual(other.Runtimes)
                ) && 
                (
                    SecurityOptions == other.SecurityOptions ||
                    SecurityOptions != null &&
                    other.SecurityOptions != null &&
                    SecurityOptions.SequenceEqual(other.SecurityOptions)
                ) && 
                (
                    ServerVersion == other.ServerVersion ||
                    ServerVersion != null &&
                    ServerVersion.Equals(other.ServerVersion)
                ) && 
                (
                    SwapLimit == other.SwapLimit ||
                    
                    SwapLimit.Equals(other.SwapLimit)
                ) && 
                (
                    Swarm == other.Swarm ||
                    Swarm != null &&
                    Swarm.Equals(other.Swarm)
                ) && 
                (
                    SystemStatus == other.SystemStatus ||
                    SystemStatus != null &&
                    other.SystemStatus != null &&
                    SystemStatus.SequenceEqual(other.SystemStatus)
                ) && 
                (
                    SystemTime == other.SystemTime ||
                    SystemTime != null &&
                    SystemTime.Equals(other.SystemTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Architecture != null)
                    hashCode = hashCode * 59 + Architecture.GetHashCode();
                    
                    hashCode = hashCode * 59 + BridgeNfIp6tables.GetHashCode();
                    
                    hashCode = hashCode * 59 + BridgeNfIptables.GetHashCode();
                    
                    hashCode = hashCode * 59 + CPUSet.GetHashCode();
                    
                    hashCode = hashCode * 59 + CPUShares.GetHashCode();
                    
                    hashCode = hashCode * 59 + CgroupDriver.GetHashCode();
                    if (ClusterAdvertise != null)
                    hashCode = hashCode * 59 + ClusterAdvertise.GetHashCode();
                    if (ClusterStore != null)
                    hashCode = hashCode * 59 + ClusterStore.GetHashCode();
                    if (ContainerdCommit != null)
                    hashCode = hashCode * 59 + ContainerdCommit.GetHashCode();
                    
                    hashCode = hashCode * 59 + Containers.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContainersPaused.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContainersRunning.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContainersStopped.GetHashCode();
                    
                    hashCode = hashCode * 59 + CpuCfsPeriod.GetHashCode();
                    
                    hashCode = hashCode * 59 + CpuCfsQuota.GetHashCode();
                    
                    hashCode = hashCode * 59 + Debug.GetHashCode();
                    if (DefaultRuntime != null)
                    hashCode = hashCode * 59 + DefaultRuntime.GetHashCode();
                    if (DockerRootDir != null)
                    hashCode = hashCode * 59 + DockerRootDir.GetHashCode();
                    if (Driver != null)
                    hashCode = hashCode * 59 + Driver.GetHashCode();
                    if (DriverStatus != null)
                    hashCode = hashCode * 59 + DriverStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExperimentalBuild.GetHashCode();
                    if (GenericResources != null)
                    hashCode = hashCode * 59 + GenericResources.GetHashCode();
                    if (HttpProxy != null)
                    hashCode = hashCode * 59 + HttpProxy.GetHashCode();
                    if (HttpsProxy != null)
                    hashCode = hashCode * 59 + HttpsProxy.GetHashCode();
                    if (ID != null)
                    hashCode = hashCode * 59 + ID.GetHashCode();
                    
                    hashCode = hashCode * 59 + IPv4Forwarding.GetHashCode();
                    
                    hashCode = hashCode * 59 + Images.GetHashCode();
                    if (IndexServerAddress != null)
                    hashCode = hashCode * 59 + IndexServerAddress.GetHashCode();
                    if (InitBinary != null)
                    hashCode = hashCode * 59 + InitBinary.GetHashCode();
                    if (InitCommit != null)
                    hashCode = hashCode * 59 + InitCommit.GetHashCode();
                    
                    hashCode = hashCode * 59 + Isolation.GetHashCode();
                    
                    hashCode = hashCode * 59 + KernelMemory.GetHashCode();
                    if (KernelVersion != null)
                    hashCode = hashCode * 59 + KernelVersion.GetHashCode();
                    if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                    
                    hashCode = hashCode * 59 + LiveRestoreEnabled.GetHashCode();
                    if (LoggingDriver != null)
                    hashCode = hashCode * 59 + LoggingDriver.GetHashCode();
                    
                    hashCode = hashCode * 59 + MemTotal.GetHashCode();
                    
                    hashCode = hashCode * 59 + MemoryLimit.GetHashCode();
                    
                    hashCode = hashCode * 59 + NCPU.GetHashCode();
                    
                    hashCode = hashCode * 59 + NEventsListener.GetHashCode();
                    
                    hashCode = hashCode * 59 + NFd.GetHashCode();
                    
                    hashCode = hashCode * 59 + NGoroutines.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NoProxy != null)
                    hashCode = hashCode * 59 + NoProxy.GetHashCode();
                    if (OSType != null)
                    hashCode = hashCode * 59 + OSType.GetHashCode();
                    
                    hashCode = hashCode * 59 + OomKillDisable.GetHashCode();
                    if (VarOperatingSystem != null)
                    hashCode = hashCode * 59 + VarOperatingSystem.GetHashCode();
                    if (Plugins != null)
                    hashCode = hashCode * 59 + Plugins.GetHashCode();
                    if (RegistryConfig != null)
                    hashCode = hashCode * 59 + RegistryConfig.GetHashCode();
                    if (RuncCommit != null)
                    hashCode = hashCode * 59 + RuncCommit.GetHashCode();
                    if (Runtimes != null)
                    hashCode = hashCode * 59 + Runtimes.GetHashCode();
                    if (SecurityOptions != null)
                    hashCode = hashCode * 59 + SecurityOptions.GetHashCode();
                    if (ServerVersion != null)
                    hashCode = hashCode * 59 + ServerVersion.GetHashCode();
                    
                    hashCode = hashCode * 59 + SwapLimit.GetHashCode();
                    if (Swarm != null)
                    hashCode = hashCode * 59 + Swarm.GetHashCode();
                    if (SystemStatus != null)
                    hashCode = hashCode * 59 + SystemStatus.GetHashCode();
                    if (SystemTime != null)
                    hashCode = hashCode * 59 + SystemTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SystemInfo left, SystemInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SystemInfo left, SystemInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
