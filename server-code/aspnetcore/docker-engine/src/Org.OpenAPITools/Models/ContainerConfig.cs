/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Configuration for a container that is portable between hosts
    /// </summary>
    [DataContract]
    public partial class ContainerConfig : IEquatable<ContainerConfig>
    {
        /// <summary>
        /// Command is already escaped (Windows only)
        /// </summary>
        /// <value>Command is already escaped (Windows only)</value>
        [DataMember(Name="ArgsEscaped", EmitDefaultValue=true)]
        public bool ArgsEscaped { get; set; }

        /// <summary>
        /// Whether to attach to &#x60;stderr&#x60;.
        /// </summary>
        /// <value>Whether to attach to &#x60;stderr&#x60;.</value>
        [DataMember(Name="AttachStderr", EmitDefaultValue=true)]
        public bool AttachStderr { get; set; } = true;

        /// <summary>
        /// Whether to attach to &#x60;stdin&#x60;.
        /// </summary>
        /// <value>Whether to attach to &#x60;stdin&#x60;.</value>
        [DataMember(Name="AttachStdin", EmitDefaultValue=true)]
        public bool AttachStdin { get; set; } = false;

        /// <summary>
        /// Whether to attach to &#x60;stdout&#x60;.
        /// </summary>
        /// <value>Whether to attach to &#x60;stdout&#x60;.</value>
        [DataMember(Name="AttachStdout", EmitDefaultValue=true)]
        public bool AttachStdout { get; set; } = true;

        /// <summary>
        /// Command to run specified as a string or an array of strings.
        /// </summary>
        /// <value>Command to run specified as a string or an array of strings.</value>
        [DataMember(Name="Cmd", EmitDefaultValue=false)]
        public List<string> Cmd { get; set; }

        /// <summary>
        /// The domain name to use for the container.
        /// </summary>
        /// <value>The domain name to use for the container.</value>
        [DataMember(Name="Domainname", EmitDefaultValue=false)]
        public string Domainname { get; set; }

        /// <summary>
        /// The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (&#x60;[\&quot;\&quot;]&#x60;) then the entry point is reset to system default (i.e., the entry point used by docker when there is no &#x60;ENTRYPOINT&#x60; instruction in the &#x60;Dockerfile&#x60;). 
        /// </summary>
        /// <value>The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (&#x60;[\&quot;\&quot;]&#x60;) then the entry point is reset to system default (i.e., the entry point used by docker when there is no &#x60;ENTRYPOINT&#x60; instruction in the &#x60;Dockerfile&#x60;). </value>
        [DataMember(Name="Entrypoint", EmitDefaultValue=false)]
        public List<string> Entrypoint { get; set; }

        /// <summary>
        /// A list of environment variables to set inside the container in the form &#x60;[\&quot;VAR&#x3D;value\&quot;, ...]&#x60;. A variable without &#x60;&#x3D;&#x60; is removed from the environment, rather than to have an empty value. 
        /// </summary>
        /// <value>A list of environment variables to set inside the container in the form &#x60;[\&quot;VAR&#x3D;value\&quot;, ...]&#x60;. A variable without &#x60;&#x3D;&#x60; is removed from the environment, rather than to have an empty value. </value>
        [DataMember(Name="Env", EmitDefaultValue=false)]
        public List<string> Env { get; set; }


        /// <summary>
        /// Gets or Sets Inner
        /// </summary>
        
        public enum InnerEnum
        {
            
            /// <summary>
            /// Enum Enum for {}
            /// </summary>
            
            Enum = {}
        }

        /// <summary>
        /// An object mapping ports to an empty object in the form:  &#x60;{\&quot;&lt;port&gt;/&lt;tcp|udp&gt;\&quot;: {}}&#x60; 
        /// </summary>
        /// <value>An object mapping ports to an empty object in the form:  &#x60;{\&quot;&lt;port&gt;/&lt;tcp|udp&gt;\&quot;: {}}&#x60; </value>
        [DataMember(Name="ExposedPorts", EmitDefaultValue=false)]
        public Dictionary<string, ContainerConfig.InnerEnum> ExposedPorts { get; set; }

        /// <summary>
        /// Gets or Sets Healthcheck
        /// </summary>
        [DataMember(Name="Healthcheck", EmitDefaultValue=false)]
        public HealthConfig Healthcheck { get; set; }

        /// <summary>
        /// The hostname to use for the container, as a valid RFC 1123 hostname.
        /// </summary>
        /// <value>The hostname to use for the container, as a valid RFC 1123 hostname.</value>
        [DataMember(Name="Hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// The name of the image to use when creating the container
        /// </summary>
        /// <value>The name of the image to use when creating the container</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// User-defined key/value metadata.
        /// </summary>
        /// <value>User-defined key/value metadata.</value>
        [DataMember(Name="Labels", EmitDefaultValue=false)]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// MAC address of the container.
        /// </summary>
        /// <value>MAC address of the container.</value>
        [DataMember(Name="MacAddress", EmitDefaultValue=false)]
        public string MacAddress { get; set; }

        /// <summary>
        /// Disable networking for the container.
        /// </summary>
        /// <value>Disable networking for the container.</value>
        [DataMember(Name="NetworkDisabled", EmitDefaultValue=true)]
        public bool NetworkDisabled { get; set; }

        /// <summary>
        /// &#x60;ONBUILD&#x60; metadata that were defined in the image&#39;s &#x60;Dockerfile&#x60;.
        /// </summary>
        /// <value>&#x60;ONBUILD&#x60; metadata that were defined in the image&#39;s &#x60;Dockerfile&#x60;.</value>
        [DataMember(Name="OnBuild", EmitDefaultValue=false)]
        public List<string> OnBuild { get; set; }

        /// <summary>
        /// Open &#x60;stdin&#x60;
        /// </summary>
        /// <value>Open &#x60;stdin&#x60;</value>
        [DataMember(Name="OpenStdin", EmitDefaultValue=true)]
        public bool OpenStdin { get; set; } = false;

        /// <summary>
        /// Shell for when &#x60;RUN&#x60;, &#x60;CMD&#x60;, and &#x60;ENTRYPOINT&#x60; uses a shell.
        /// </summary>
        /// <value>Shell for when &#x60;RUN&#x60;, &#x60;CMD&#x60;, and &#x60;ENTRYPOINT&#x60; uses a shell.</value>
        [DataMember(Name="Shell", EmitDefaultValue=false)]
        public List<string> Shell { get; set; }

        /// <summary>
        /// Close &#x60;stdin&#x60; after one attached client disconnects
        /// </summary>
        /// <value>Close &#x60;stdin&#x60; after one attached client disconnects</value>
        [DataMember(Name="StdinOnce", EmitDefaultValue=true)]
        public bool StdinOnce { get; set; } = false;

        /// <summary>
        /// Signal to stop a container as a string or unsigned integer.
        /// </summary>
        /// <value>Signal to stop a container as a string or unsigned integer.</value>
        [DataMember(Name="StopSignal", EmitDefaultValue=false)]
        public string StopSignal { get; set; } = "SIGTERM";

        /// <summary>
        /// Timeout to stop a container in seconds.
        /// </summary>
        /// <value>Timeout to stop a container in seconds.</value>
        [DataMember(Name="StopTimeout", EmitDefaultValue=true)]
        public int StopTimeout { get; set; } = 10;

        /// <summary>
        /// Attach standard streams to a TTY, including &#x60;stdin&#x60; if it is not closed.
        /// </summary>
        /// <value>Attach standard streams to a TTY, including &#x60;stdin&#x60; if it is not closed.</value>
        [DataMember(Name="Tty", EmitDefaultValue=true)]
        public bool Tty { get; set; } = false;

        /// <summary>
        /// The user that commands are run as inside the container.
        /// </summary>
        /// <value>The user that commands are run as inside the container.</value>
        [DataMember(Name="User", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets Volumes
        /// </summary>
        [DataMember(Name="Volumes", EmitDefaultValue=false)]
        public ContainerConfigVolumes Volumes { get; set; }

        /// <summary>
        /// The working directory for commands to run in.
        /// </summary>
        /// <value>The working directory for commands to run in.</value>
        [DataMember(Name="WorkingDir", EmitDefaultValue=false)]
        public string WorkingDir { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerConfig {\n");
            sb.Append("  ArgsEscaped: ").Append(ArgsEscaped).Append("\n");
            sb.Append("  AttachStderr: ").Append(AttachStderr).Append("\n");
            sb.Append("  AttachStdin: ").Append(AttachStdin).Append("\n");
            sb.Append("  AttachStdout: ").Append(AttachStdout).Append("\n");
            sb.Append("  Cmd: ").Append(Cmd).Append("\n");
            sb.Append("  Domainname: ").Append(Domainname).Append("\n");
            sb.Append("  Entrypoint: ").Append(Entrypoint).Append("\n");
            sb.Append("  Env: ").Append(Env).Append("\n");
            sb.Append("  ExposedPorts: ").Append(ExposedPorts).Append("\n");
            sb.Append("  Healthcheck: ").Append(Healthcheck).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  NetworkDisabled: ").Append(NetworkDisabled).Append("\n");
            sb.Append("  OnBuild: ").Append(OnBuild).Append("\n");
            sb.Append("  OpenStdin: ").Append(OpenStdin).Append("\n");
            sb.Append("  Shell: ").Append(Shell).Append("\n");
            sb.Append("  StdinOnce: ").Append(StdinOnce).Append("\n");
            sb.Append("  StopSignal: ").Append(StopSignal).Append("\n");
            sb.Append("  StopTimeout: ").Append(StopTimeout).Append("\n");
            sb.Append("  Tty: ").Append(Tty).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("  WorkingDir: ").Append(WorkingDir).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContainerConfig)obj);
        }

        /// <summary>
        /// Returns true if ContainerConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of ContainerConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerConfig other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ArgsEscaped == other.ArgsEscaped ||
                    
                    ArgsEscaped.Equals(other.ArgsEscaped)
                ) && 
                (
                    AttachStderr == other.AttachStderr ||
                    
                    AttachStderr.Equals(other.AttachStderr)
                ) && 
                (
                    AttachStdin == other.AttachStdin ||
                    
                    AttachStdin.Equals(other.AttachStdin)
                ) && 
                (
                    AttachStdout == other.AttachStdout ||
                    
                    AttachStdout.Equals(other.AttachStdout)
                ) && 
                (
                    Cmd == other.Cmd ||
                    Cmd != null &&
                    other.Cmd != null &&
                    Cmd.SequenceEqual(other.Cmd)
                ) && 
                (
                    Domainname == other.Domainname ||
                    Domainname != null &&
                    Domainname.Equals(other.Domainname)
                ) && 
                (
                    Entrypoint == other.Entrypoint ||
                    Entrypoint != null &&
                    other.Entrypoint != null &&
                    Entrypoint.SequenceEqual(other.Entrypoint)
                ) && 
                (
                    Env == other.Env ||
                    Env != null &&
                    other.Env != null &&
                    Env.SequenceEqual(other.Env)
                ) && 
                (
                    ExposedPorts == other.ExposedPorts ||
                    ExposedPorts != null &&
                    other.ExposedPorts != null &&
                    ExposedPorts.SequenceEqual(other.ExposedPorts)
                ) && 
                (
                    Healthcheck == other.Healthcheck ||
                    Healthcheck != null &&
                    Healthcheck.Equals(other.Healthcheck)
                ) && 
                (
                    Hostname == other.Hostname ||
                    Hostname != null &&
                    Hostname.Equals(other.Hostname)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.Equals(other.Image)
                ) && 
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    other.Labels != null &&
                    Labels.SequenceEqual(other.Labels)
                ) && 
                (
                    MacAddress == other.MacAddress ||
                    MacAddress != null &&
                    MacAddress.Equals(other.MacAddress)
                ) && 
                (
                    NetworkDisabled == other.NetworkDisabled ||
                    
                    NetworkDisabled.Equals(other.NetworkDisabled)
                ) && 
                (
                    OnBuild == other.OnBuild ||
                    OnBuild != null &&
                    other.OnBuild != null &&
                    OnBuild.SequenceEqual(other.OnBuild)
                ) && 
                (
                    OpenStdin == other.OpenStdin ||
                    
                    OpenStdin.Equals(other.OpenStdin)
                ) && 
                (
                    Shell == other.Shell ||
                    Shell != null &&
                    other.Shell != null &&
                    Shell.SequenceEqual(other.Shell)
                ) && 
                (
                    StdinOnce == other.StdinOnce ||
                    
                    StdinOnce.Equals(other.StdinOnce)
                ) && 
                (
                    StopSignal == other.StopSignal ||
                    StopSignal != null &&
                    StopSignal.Equals(other.StopSignal)
                ) && 
                (
                    StopTimeout == other.StopTimeout ||
                    
                    StopTimeout.Equals(other.StopTimeout)
                ) && 
                (
                    Tty == other.Tty ||
                    
                    Tty.Equals(other.Tty)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    Volumes == other.Volumes ||
                    Volumes != null &&
                    Volumes.Equals(other.Volumes)
                ) && 
                (
                    WorkingDir == other.WorkingDir ||
                    WorkingDir != null &&
                    WorkingDir.Equals(other.WorkingDir)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ArgsEscaped.GetHashCode();
                    
                    hashCode = hashCode * 59 + AttachStderr.GetHashCode();
                    
                    hashCode = hashCode * 59 + AttachStdin.GetHashCode();
                    
                    hashCode = hashCode * 59 + AttachStdout.GetHashCode();
                    if (Cmd != null)
                    hashCode = hashCode * 59 + Cmd.GetHashCode();
                    if (Domainname != null)
                    hashCode = hashCode * 59 + Domainname.GetHashCode();
                    if (Entrypoint != null)
                    hashCode = hashCode * 59 + Entrypoint.GetHashCode();
                    if (Env != null)
                    hashCode = hashCode * 59 + Env.GetHashCode();
                    if (ExposedPorts != null)
                    hashCode = hashCode * 59 + ExposedPorts.GetHashCode();
                    if (Healthcheck != null)
                    hashCode = hashCode * 59 + Healthcheck.GetHashCode();
                    if (Hostname != null)
                    hashCode = hashCode * 59 + Hostname.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                    if (MacAddress != null)
                    hashCode = hashCode * 59 + MacAddress.GetHashCode();
                    
                    hashCode = hashCode * 59 + NetworkDisabled.GetHashCode();
                    if (OnBuild != null)
                    hashCode = hashCode * 59 + OnBuild.GetHashCode();
                    
                    hashCode = hashCode * 59 + OpenStdin.GetHashCode();
                    if (Shell != null)
                    hashCode = hashCode * 59 + Shell.GetHashCode();
                    
                    hashCode = hashCode * 59 + StdinOnce.GetHashCode();
                    if (StopSignal != null)
                    hashCode = hashCode * 59 + StopSignal.GetHashCode();
                    
                    hashCode = hashCode * 59 + StopTimeout.GetHashCode();
                    
                    hashCode = hashCode * 59 + Tty.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (Volumes != null)
                    hashCode = hashCode * 59 + Volumes.GetHashCode();
                    if (WorkingDir != null)
                    hashCode = hashCode * 59 + WorkingDir.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContainerConfig left, ContainerConfig right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContainerConfig left, ContainerConfig right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
