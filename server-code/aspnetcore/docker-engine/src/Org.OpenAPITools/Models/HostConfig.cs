/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Container configuration that depends on the host we are running on
    /// </summary>
    [DataContract]
    public partial class HostConfig : IEquatable<HostConfig>
    {
        /// <summary>
        /// Limit read rate (bytes per second) from a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;. 
        /// </summary>
        /// <value>Limit read rate (bytes per second) from a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;. </value>
        [DataMember(Name="BlkioDeviceReadBps", EmitDefaultValue=false)]
        public List<ThrottleDevice> BlkioDeviceReadBps { get; set; }

        /// <summary>
        /// Limit read rate (IO per second) from a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;. 
        /// </summary>
        /// <value>Limit read rate (IO per second) from a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;. </value>
        [DataMember(Name="BlkioDeviceReadIOps", EmitDefaultValue=false)]
        public List<ThrottleDevice> BlkioDeviceReadIOps { get; set; }

        /// <summary>
        /// Limit write rate (bytes per second) to a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;. 
        /// </summary>
        /// <value>Limit write rate (bytes per second) to a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;. </value>
        [DataMember(Name="BlkioDeviceWriteBps", EmitDefaultValue=false)]
        public List<ThrottleDevice> BlkioDeviceWriteBps { get; set; }

        /// <summary>
        /// Limit write rate (IO per second) to a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;. 
        /// </summary>
        /// <value>Limit write rate (IO per second) to a device, in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}]&#x60;. </value>
        [DataMember(Name="BlkioDeviceWriteIOps", EmitDefaultValue=false)]
        public List<ThrottleDevice> BlkioDeviceWriteIOps { get; set; }

        /// <summary>
        /// Block IO weight (relative weight).
        /// </summary>
        /// <value>Block IO weight (relative weight).</value>
        [Range(0, 1000)]
        [DataMember(Name="BlkioWeight", EmitDefaultValue=true)]
        public int BlkioWeight { get; set; }

        /// <summary>
        /// Block IO weight (relative device weight) in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Weight\&quot;: weight}]&#x60;. 
        /// </summary>
        /// <value>Block IO weight (relative device weight) in the form &#x60;[{\&quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Weight\&quot;: weight}]&#x60;. </value>
        [DataMember(Name="BlkioWeightDevice", EmitDefaultValue=false)]
        public List<ResourcesBlkioWeightDeviceInner> BlkioWeightDevice { get; set; }

        /// <summary>
        /// Path to &#x60;cgroups&#x60; under which the container&#39;s &#x60;cgroup&#x60; is created. If the path is not absolute, the path is considered to be relative to the &#x60;cgroups&#x60; path of the init process. Cgroups are created if they do not already exist.
        /// </summary>
        /// <value>Path to &#x60;cgroups&#x60; under which the container&#39;s &#x60;cgroup&#x60; is created. If the path is not absolute, the path is considered to be relative to the &#x60;cgroups&#x60; path of the init process. Cgroups are created if they do not already exist.</value>
        [DataMember(Name="CgroupParent", EmitDefaultValue=false)]
        public string CgroupParent { get; set; }

        /// <summary>
        /// The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;CPUShares&#x60;, and &#x60;CPUPercent&#x60; last. 
        /// </summary>
        /// <value>The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;CPUShares&#x60;, and &#x60;CPUPercent&#x60; last. </value>
        [DataMember(Name="CpuCount", EmitDefaultValue=true)]
        public long CpuCount { get; set; }

        /// <summary>
        /// The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;CPUShares&#x60;, and &#x60;CPUPercent&#x60; last. 
        /// </summary>
        /// <value>The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;CPUShares&#x60;, and &#x60;CPUPercent&#x60; last. </value>
        [DataMember(Name="CpuPercent", EmitDefaultValue=true)]
        public long CpuPercent { get; set; }

        /// <summary>
        /// The length of a CPU period in microseconds.
        /// </summary>
        /// <value>The length of a CPU period in microseconds.</value>
        [DataMember(Name="CpuPeriod", EmitDefaultValue=true)]
        public long CpuPeriod { get; set; }

        /// <summary>
        /// Microseconds of CPU time that the container can get in a CPU period.
        /// </summary>
        /// <value>Microseconds of CPU time that the container can get in a CPU period.</value>
        [DataMember(Name="CpuQuota", EmitDefaultValue=true)]
        public long CpuQuota { get; set; }

        /// <summary>
        /// The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
        /// </summary>
        /// <value>The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.</value>
        [DataMember(Name="CpuRealtimePeriod", EmitDefaultValue=true)]
        public long CpuRealtimePeriod { get; set; }

        /// <summary>
        /// The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
        /// </summary>
        /// <value>The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.</value>
        [DataMember(Name="CpuRealtimeRuntime", EmitDefaultValue=true)]
        public long CpuRealtimeRuntime { get; set; }

        /// <summary>
        /// An integer value representing this container&#39;s relative CPU weight versus other containers.
        /// </summary>
        /// <value>An integer value representing this container&#39;s relative CPU weight versus other containers.</value>
        [DataMember(Name="CpuShares", EmitDefaultValue=true)]
        public int CpuShares { get; set; }

        /// <summary>
        /// CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;)
        /// </summary>
        /// <value>CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;)</value>
        /// <example>0-3</example>
        [DataMember(Name="CpusetCpus", EmitDefaultValue=false)]
        public string CpusetCpus { get; set; }

        /// <summary>
        /// Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
        /// </summary>
        /// <value>Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.</value>
        [DataMember(Name="CpusetMems", EmitDefaultValue=false)]
        public string CpusetMems { get; set; }

        /// <summary>
        /// a list of cgroup rules to apply to the container
        /// </summary>
        /// <value>a list of cgroup rules to apply to the container</value>
        [DataMember(Name="DeviceCgroupRules", EmitDefaultValue=false)]
        public List<string> DeviceCgroupRules { get; set; }

        /// <summary>
        /// A list of devices to add to the container.
        /// </summary>
        /// <value>A list of devices to add to the container.</value>
        [DataMember(Name="Devices", EmitDefaultValue=false)]
        public List<DeviceMapping> Devices { get; set; }

        /// <summary>
        /// Disk limit (in bytes).
        /// </summary>
        /// <value>Disk limit (in bytes).</value>
        [DataMember(Name="DiskQuota", EmitDefaultValue=true)]
        public long DiskQuota { get; set; }

        /// <summary>
        /// Maximum IO in bytes per second for the container system drive (Windows only)
        /// </summary>
        /// <value>Maximum IO in bytes per second for the container system drive (Windows only)</value>
        [DataMember(Name="IOMaximumBandwidth", EmitDefaultValue=true)]
        public long IOMaximumBandwidth { get; set; }

        /// <summary>
        /// Maximum IOps for the container system drive (Windows only)
        /// </summary>
        /// <value>Maximum IOps for the container system drive (Windows only)</value>
        [DataMember(Name="IOMaximumIOps", EmitDefaultValue=true)]
        public long IOMaximumIOps { get; set; }

        /// <summary>
        /// Kernel memory limit in bytes.
        /// </summary>
        /// <value>Kernel memory limit in bytes.</value>
        [DataMember(Name="KernelMemory", EmitDefaultValue=true)]
        public long KernelMemory { get; set; }

        /// <summary>
        /// Memory limit in bytes.
        /// </summary>
        /// <value>Memory limit in bytes.</value>
        [DataMember(Name="Memory", EmitDefaultValue=true)]
        public int Memory { get; set; } = 0;

        /// <summary>
        /// Memory soft limit in bytes.
        /// </summary>
        /// <value>Memory soft limit in bytes.</value>
        [DataMember(Name="MemoryReservation", EmitDefaultValue=true)]
        public long MemoryReservation { get; set; }

        /// <summary>
        /// Total memory limit (memory + swap). Set as &#x60;-1&#x60; to enable unlimited swap.
        /// </summary>
        /// <value>Total memory limit (memory + swap). Set as &#x60;-1&#x60; to enable unlimited swap.</value>
        [DataMember(Name="MemorySwap", EmitDefaultValue=true)]
        public long MemorySwap { get; set; }

        /// <summary>
        /// Tune a container&#39;s memory swappiness behavior. Accepts an integer between 0 and 100.
        /// </summary>
        /// <value>Tune a container&#39;s memory swappiness behavior. Accepts an integer between 0 and 100.</value>
        [Range(0, 100)]
        [DataMember(Name="MemorySwappiness", EmitDefaultValue=true)]
        public long MemorySwappiness { get; set; }

        /// <summary>
        /// CPU quota in units of 10&lt;sup&gt;-9&lt;/sup&gt; CPUs.
        /// </summary>
        /// <value>CPU quota in units of 10&lt;sup&gt;-9&lt;/sup&gt; CPUs.</value>
        [DataMember(Name="NanoCPUs", EmitDefaultValue=true)]
        public long NanoCPUs { get; set; }

        /// <summary>
        /// Disable OOM Killer for the container.
        /// </summary>
        /// <value>Disable OOM Killer for the container.</value>
        [DataMember(Name="OomKillDisable", EmitDefaultValue=true)]
        public bool OomKillDisable { get; set; }

        /// <summary>
        /// Tune a container&#39;s pids limit. Set -1 for unlimited.
        /// </summary>
        /// <value>Tune a container&#39;s pids limit. Set -1 for unlimited.</value>
        [DataMember(Name="PidsLimit", EmitDefaultValue=true)]
        public long PidsLimit { get; set; }

        /// <summary>
        /// A list of resource limits to set in the container. For example: &#x60;{\&quot;Name\&quot;: \&quot;nofile\&quot;, \&quot;Soft\&quot;: 1024, \&quot;Hard\&quot;: 2048}&#x60;\&quot; 
        /// </summary>
        /// <value>A list of resource limits to set in the container. For example: &#x60;{\&quot;Name\&quot;: \&quot;nofile\&quot;, \&quot;Soft\&quot;: 1024, \&quot;Hard\&quot;: 2048}&#x60;\&quot; </value>
        [DataMember(Name="Ulimits", EmitDefaultValue=false)]
        public List<ResourcesUlimitsInner> Ulimits { get; set; }

        /// <summary>
        /// Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;RestartPolicy&#x60; is set.
        /// </summary>
        /// <value>Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;RestartPolicy&#x60; is set.</value>
        [DataMember(Name="AutoRemove", EmitDefaultValue=true)]
        public bool AutoRemove { get; set; }

        /// <summary>
        /// A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;host-src:container-dest&#x60; to bind-mount a host path into the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;host-src:container-dest:ro&#x60; to make the bind mount read-only inside the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest&#x60; to bind-mount a volume managed by a volume driver into the container. &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest:ro&#x60; to mount the volume read-only inside the container.  &#x60;container-dest&#x60; must be an _absolute_ path. 
        /// </summary>
        /// <value>A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;host-src:container-dest&#x60; to bind-mount a host path into the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;host-src:container-dest:ro&#x60; to make the bind mount read-only inside the container. Both &#x60;host-src&#x60;, and &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest&#x60; to bind-mount a volume managed by a volume driver into the container. &#x60;container-dest&#x60; must be an _absolute_ path. - &#x60;volume-name:container-dest:ro&#x60; to mount the volume read-only inside the container.  &#x60;container-dest&#x60; must be an _absolute_ path. </value>
        [DataMember(Name="Binds", EmitDefaultValue=false)]
        public List<string> Binds { get; set; }

        /// <summary>
        /// A list of kernel capabilities to add to the container.
        /// </summary>
        /// <value>A list of kernel capabilities to add to the container.</value>
        [DataMember(Name="CapAdd", EmitDefaultValue=false)]
        public List<string> CapAdd { get; set; }

        /// <summary>
        /// A list of kernel capabilities to drop from the container.
        /// </summary>
        /// <value>A list of kernel capabilities to drop from the container.</value>
        [DataMember(Name="CapDrop", EmitDefaultValue=false)]
        public List<string> CapDrop { get; set; }

        /// <summary>
        /// Cgroup to use for the container.
        /// </summary>
        /// <value>Cgroup to use for the container.</value>
        [DataMember(Name="Cgroup", EmitDefaultValue=false)]
        public string Cgroup { get; set; }

        /// <summary>
        /// Initial console size, as an &#x60;[height, width]&#x60; array. (Windows only)
        /// </summary>
        /// <value>Initial console size, as an &#x60;[height, width]&#x60; array. (Windows only)</value>
        [DataMember(Name="ConsoleSize", EmitDefaultValue=false)]
        public List<int> ConsoleSize { get; set; }

        /// <summary>
        /// Path to a file where the container ID is written
        /// </summary>
        /// <value>Path to a file where the container ID is written</value>
        [DataMember(Name="ContainerIDFile", EmitDefaultValue=false)]
        public string ContainerIDFile { get; set; }

        /// <summary>
        /// A list of DNS servers for the container to use.
        /// </summary>
        /// <value>A list of DNS servers for the container to use.</value>
        [DataMember(Name="Dns", EmitDefaultValue=false)]
        public List<string> Dns { get; set; }

        /// <summary>
        /// A list of DNS options.
        /// </summary>
        /// <value>A list of DNS options.</value>
        [DataMember(Name="DnsOptions", EmitDefaultValue=false)]
        public List<string> DnsOptions { get; set; }

        /// <summary>
        /// A list of DNS search domains.
        /// </summary>
        /// <value>A list of DNS search domains.</value>
        [DataMember(Name="DnsSearch", EmitDefaultValue=false)]
        public List<string> DnsSearch { get; set; }

        /// <summary>
        /// A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form &#x60;[\&quot;hostname:IP\&quot;]&#x60;. 
        /// </summary>
        /// <value>A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form &#x60;[\&quot;hostname:IP\&quot;]&#x60;. </value>
        [DataMember(Name="ExtraHosts", EmitDefaultValue=false)]
        public List<string> ExtraHosts { get; set; }

        /// <summary>
        /// A list of additional groups that the container process will run as.
        /// </summary>
        /// <value>A list of additional groups that the container process will run as.</value>
        [DataMember(Name="GroupAdd", EmitDefaultValue=false)]
        public List<string> GroupAdd { get; set; }

        /// <summary>
        /// IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version and configuration. 
        /// </summary>
        /// <value>IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version and configuration. </value>
        [DataMember(Name="IpcMode", EmitDefaultValue=false)]
        public string IpcMode { get; set; }


        /// <summary>
        /// Isolation technology of the container. (Windows only)
        /// </summary>
        /// <value>Isolation technology of the container. (Windows only)</value>
        [TypeConverter(typeof(CustomEnumConverter<IsolationEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IsolationEnum
        {
            
            /// <summary>
            /// Enum DefaultEnum for default
            /// </summary>
            [EnumMember(Value = "default")]
            DefaultEnum = 1,
            
            /// <summary>
            /// Enum ProcessEnum for process
            /// </summary>
            [EnumMember(Value = "process")]
            ProcessEnum = 2,
            
            /// <summary>
            /// Enum HypervEnum for hyperv
            /// </summary>
            [EnumMember(Value = "hyperv")]
            HypervEnum = 3
        }

        /// <summary>
        /// Isolation technology of the container. (Windows only)
        /// </summary>
        /// <value>Isolation technology of the container. (Windows only)</value>
        [DataMember(Name="Isolation", EmitDefaultValue=true)]
        public IsolationEnum Isolation { get; set; }

        /// <summary>
        /// A list of links for the container in the form &#x60;container_name:alias&#x60;.
        /// </summary>
        /// <value>A list of links for the container in the form &#x60;container_name:alias&#x60;.</value>
        [DataMember(Name="Links", EmitDefaultValue=false)]
        public List<string> Links { get; set; }

        /// <summary>
        /// Gets or Sets LogConfig
        /// </summary>
        [DataMember(Name="LogConfig", EmitDefaultValue=false)]
        public HostConfigAllOfLogConfig LogConfig { get; set; }

        /// <summary>
        /// Specification for mounts to be added to the container.
        /// </summary>
        /// <value>Specification for mounts to be added to the container.</value>
        [DataMember(Name="Mounts", EmitDefaultValue=false)]
        public List<Mount> Mounts { get; set; }

        /// <summary>
        /// Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to.
        /// </summary>
        /// <value>Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to.</value>
        [DataMember(Name="NetworkMode", EmitDefaultValue=false)]
        public string NetworkMode { get; set; }

        /// <summary>
        /// An integer value containing the score given to the container in order to tune OOM killer preferences.
        /// </summary>
        /// <value>An integer value containing the score given to the container in order to tune OOM killer preferences.</value>
        /// <example>500</example>
        [DataMember(Name="OomScoreAdj", EmitDefaultValue=true)]
        public int OomScoreAdj { get; set; }

        /// <summary>
        /// Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s PID namespace inside the container 
        /// </summary>
        /// <value>Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s PID namespace inside the container </value>
        [DataMember(Name="PidMode", EmitDefaultValue=false)]
        public string PidMode { get; set; }

        /// <summary>
        /// A map of exposed container ports and the host port they should map to.
        /// </summary>
        /// <value>A map of exposed container ports and the host port they should map to.</value>
        [DataMember(Name="PortBindings", EmitDefaultValue=false)]
        public Dictionary<string, HostConfigAllOfPortBindings> PortBindings { get; set; }

        /// <summary>
        /// Gives the container full access to the host.
        /// </summary>
        /// <value>Gives the container full access to the host.</value>
        [DataMember(Name="Privileged", EmitDefaultValue=true)]
        public bool Privileged { get; set; }

        /// <summary>
        /// Allocates a random host port for all of a container&#39;s exposed ports.
        /// </summary>
        /// <value>Allocates a random host port for all of a container&#39;s exposed ports.</value>
        [DataMember(Name="PublishAllPorts", EmitDefaultValue=true)]
        public bool PublishAllPorts { get; set; }

        /// <summary>
        /// Mount the container&#39;s root filesystem as read only.
        /// </summary>
        /// <value>Mount the container&#39;s root filesystem as read only.</value>
        [DataMember(Name="ReadonlyRootfs", EmitDefaultValue=true)]
        public bool ReadonlyRootfs { get; set; }

        /// <summary>
        /// Gets or Sets RestartPolicy
        /// </summary>
        [DataMember(Name="RestartPolicy", EmitDefaultValue=false)]
        public RestartPolicy RestartPolicy { get; set; }

        /// <summary>
        /// Runtime to use with this container.
        /// </summary>
        /// <value>Runtime to use with this container.</value>
        [DataMember(Name="Runtime", EmitDefaultValue=false)]
        public string Runtime { get; set; }

        /// <summary>
        /// A list of string values to customize labels for MLS systems, such as SELinux.
        /// </summary>
        /// <value>A list of string values to customize labels for MLS systems, such as SELinux.</value>
        [DataMember(Name="SecurityOpt", EmitDefaultValue=false)]
        public List<string> SecurityOpt { get; set; }

        /// <summary>
        /// Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB.
        /// </summary>
        /// <value>Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB.</value>
        [DataMember(Name="ShmSize", EmitDefaultValue=true)]
        public int ShmSize { get; set; }

        /// <summary>
        /// Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;. 
        /// </summary>
        /// <value>Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;. </value>
        [DataMember(Name="StorageOpt", EmitDefaultValue=false)]
        public Dictionary<string, string> StorageOpt { get; set; }

        /// <summary>
        /// A list of kernel parameters (sysctls) to set in the container. For example: &#x60;{\&quot;net.ipv4.ip_forward\&quot;: \&quot;1\&quot;}&#x60; 
        /// </summary>
        /// <value>A list of kernel parameters (sysctls) to set in the container. For example: &#x60;{\&quot;net.ipv4.ip_forward\&quot;: \&quot;1\&quot;}&#x60; </value>
        [DataMember(Name="Sysctls", EmitDefaultValue=false)]
        public Dictionary<string, string> Sysctls { get; set; }

        /// <summary>
        /// A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: &#x60;{ \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; }&#x60;. 
        /// </summary>
        /// <value>A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: &#x60;{ \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; }&#x60;. </value>
        [DataMember(Name="Tmpfs", EmitDefaultValue=false)]
        public Dictionary<string, string> Tmpfs { get; set; }

        /// <summary>
        /// UTS namespace to use for the container.
        /// </summary>
        /// <value>UTS namespace to use for the container.</value>
        [DataMember(Name="UTSMode", EmitDefaultValue=false)]
        public string UTSMode { get; set; }

        /// <summary>
        /// Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
        /// </summary>
        /// <value>Sets the usernamespace mode for the container when usernamespace remapping option is enabled.</value>
        [DataMember(Name="UsernsMode", EmitDefaultValue=false)]
        public string UsernsMode { get; set; }

        /// <summary>
        /// Driver that this container uses to mount volumes.
        /// </summary>
        /// <value>Driver that this container uses to mount volumes.</value>
        [DataMember(Name="VolumeDriver", EmitDefaultValue=false)]
        public string VolumeDriver { get; set; }

        /// <summary>
        /// A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;ro|rw&gt;]&#x60;.
        /// </summary>
        /// <value>A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;ro|rw&gt;]&#x60;.</value>
        [DataMember(Name="VolumesFrom", EmitDefaultValue=false)]
        public List<string> VolumesFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostConfig {\n");
            sb.Append("  BlkioDeviceReadBps: ").Append(BlkioDeviceReadBps).Append("\n");
            sb.Append("  BlkioDeviceReadIOps: ").Append(BlkioDeviceReadIOps).Append("\n");
            sb.Append("  BlkioDeviceWriteBps: ").Append(BlkioDeviceWriteBps).Append("\n");
            sb.Append("  BlkioDeviceWriteIOps: ").Append(BlkioDeviceWriteIOps).Append("\n");
            sb.Append("  BlkioWeight: ").Append(BlkioWeight).Append("\n");
            sb.Append("  BlkioWeightDevice: ").Append(BlkioWeightDevice).Append("\n");
            sb.Append("  CgroupParent: ").Append(CgroupParent).Append("\n");
            sb.Append("  CpuCount: ").Append(CpuCount).Append("\n");
            sb.Append("  CpuPercent: ").Append(CpuPercent).Append("\n");
            sb.Append("  CpuPeriod: ").Append(CpuPeriod).Append("\n");
            sb.Append("  CpuQuota: ").Append(CpuQuota).Append("\n");
            sb.Append("  CpuRealtimePeriod: ").Append(CpuRealtimePeriod).Append("\n");
            sb.Append("  CpuRealtimeRuntime: ").Append(CpuRealtimeRuntime).Append("\n");
            sb.Append("  CpuShares: ").Append(CpuShares).Append("\n");
            sb.Append("  CpusetCpus: ").Append(CpusetCpus).Append("\n");
            sb.Append("  CpusetMems: ").Append(CpusetMems).Append("\n");
            sb.Append("  DeviceCgroupRules: ").Append(DeviceCgroupRules).Append("\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("  DiskQuota: ").Append(DiskQuota).Append("\n");
            sb.Append("  IOMaximumBandwidth: ").Append(IOMaximumBandwidth).Append("\n");
            sb.Append("  IOMaximumIOps: ").Append(IOMaximumIOps).Append("\n");
            sb.Append("  KernelMemory: ").Append(KernelMemory).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  MemoryReservation: ").Append(MemoryReservation).Append("\n");
            sb.Append("  MemorySwap: ").Append(MemorySwap).Append("\n");
            sb.Append("  MemorySwappiness: ").Append(MemorySwappiness).Append("\n");
            sb.Append("  NanoCPUs: ").Append(NanoCPUs).Append("\n");
            sb.Append("  OomKillDisable: ").Append(OomKillDisable).Append("\n");
            sb.Append("  PidsLimit: ").Append(PidsLimit).Append("\n");
            sb.Append("  Ulimits: ").Append(Ulimits).Append("\n");
            sb.Append("  AutoRemove: ").Append(AutoRemove).Append("\n");
            sb.Append("  Binds: ").Append(Binds).Append("\n");
            sb.Append("  CapAdd: ").Append(CapAdd).Append("\n");
            sb.Append("  CapDrop: ").Append(CapDrop).Append("\n");
            sb.Append("  Cgroup: ").Append(Cgroup).Append("\n");
            sb.Append("  ConsoleSize: ").Append(ConsoleSize).Append("\n");
            sb.Append("  ContainerIDFile: ").Append(ContainerIDFile).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  DnsOptions: ").Append(DnsOptions).Append("\n");
            sb.Append("  DnsSearch: ").Append(DnsSearch).Append("\n");
            sb.Append("  ExtraHosts: ").Append(ExtraHosts).Append("\n");
            sb.Append("  GroupAdd: ").Append(GroupAdd).Append("\n");
            sb.Append("  IpcMode: ").Append(IpcMode).Append("\n");
            sb.Append("  Isolation: ").Append(Isolation).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  LogConfig: ").Append(LogConfig).Append("\n");
            sb.Append("  Mounts: ").Append(Mounts).Append("\n");
            sb.Append("  NetworkMode: ").Append(NetworkMode).Append("\n");
            sb.Append("  OomScoreAdj: ").Append(OomScoreAdj).Append("\n");
            sb.Append("  PidMode: ").Append(PidMode).Append("\n");
            sb.Append("  PortBindings: ").Append(PortBindings).Append("\n");
            sb.Append("  Privileged: ").Append(Privileged).Append("\n");
            sb.Append("  PublishAllPorts: ").Append(PublishAllPorts).Append("\n");
            sb.Append("  ReadonlyRootfs: ").Append(ReadonlyRootfs).Append("\n");
            sb.Append("  RestartPolicy: ").Append(RestartPolicy).Append("\n");
            sb.Append("  Runtime: ").Append(Runtime).Append("\n");
            sb.Append("  SecurityOpt: ").Append(SecurityOpt).Append("\n");
            sb.Append("  ShmSize: ").Append(ShmSize).Append("\n");
            sb.Append("  StorageOpt: ").Append(StorageOpt).Append("\n");
            sb.Append("  Sysctls: ").Append(Sysctls).Append("\n");
            sb.Append("  Tmpfs: ").Append(Tmpfs).Append("\n");
            sb.Append("  UTSMode: ").Append(UTSMode).Append("\n");
            sb.Append("  UsernsMode: ").Append(UsernsMode).Append("\n");
            sb.Append("  VolumeDriver: ").Append(VolumeDriver).Append("\n");
            sb.Append("  VolumesFrom: ").Append(VolumesFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HostConfig)obj);
        }

        /// <summary>
        /// Returns true if HostConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of HostConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostConfig other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BlkioDeviceReadBps == other.BlkioDeviceReadBps ||
                    BlkioDeviceReadBps != null &&
                    other.BlkioDeviceReadBps != null &&
                    BlkioDeviceReadBps.SequenceEqual(other.BlkioDeviceReadBps)
                ) && 
                (
                    BlkioDeviceReadIOps == other.BlkioDeviceReadIOps ||
                    BlkioDeviceReadIOps != null &&
                    other.BlkioDeviceReadIOps != null &&
                    BlkioDeviceReadIOps.SequenceEqual(other.BlkioDeviceReadIOps)
                ) && 
                (
                    BlkioDeviceWriteBps == other.BlkioDeviceWriteBps ||
                    BlkioDeviceWriteBps != null &&
                    other.BlkioDeviceWriteBps != null &&
                    BlkioDeviceWriteBps.SequenceEqual(other.BlkioDeviceWriteBps)
                ) && 
                (
                    BlkioDeviceWriteIOps == other.BlkioDeviceWriteIOps ||
                    BlkioDeviceWriteIOps != null &&
                    other.BlkioDeviceWriteIOps != null &&
                    BlkioDeviceWriteIOps.SequenceEqual(other.BlkioDeviceWriteIOps)
                ) && 
                (
                    BlkioWeight == other.BlkioWeight ||
                    
                    BlkioWeight.Equals(other.BlkioWeight)
                ) && 
                (
                    BlkioWeightDevice == other.BlkioWeightDevice ||
                    BlkioWeightDevice != null &&
                    other.BlkioWeightDevice != null &&
                    BlkioWeightDevice.SequenceEqual(other.BlkioWeightDevice)
                ) && 
                (
                    CgroupParent == other.CgroupParent ||
                    CgroupParent != null &&
                    CgroupParent.Equals(other.CgroupParent)
                ) && 
                (
                    CpuCount == other.CpuCount ||
                    
                    CpuCount.Equals(other.CpuCount)
                ) && 
                (
                    CpuPercent == other.CpuPercent ||
                    
                    CpuPercent.Equals(other.CpuPercent)
                ) && 
                (
                    CpuPeriod == other.CpuPeriod ||
                    
                    CpuPeriod.Equals(other.CpuPeriod)
                ) && 
                (
                    CpuQuota == other.CpuQuota ||
                    
                    CpuQuota.Equals(other.CpuQuota)
                ) && 
                (
                    CpuRealtimePeriod == other.CpuRealtimePeriod ||
                    
                    CpuRealtimePeriod.Equals(other.CpuRealtimePeriod)
                ) && 
                (
                    CpuRealtimeRuntime == other.CpuRealtimeRuntime ||
                    
                    CpuRealtimeRuntime.Equals(other.CpuRealtimeRuntime)
                ) && 
                (
                    CpuShares == other.CpuShares ||
                    
                    CpuShares.Equals(other.CpuShares)
                ) && 
                (
                    CpusetCpus == other.CpusetCpus ||
                    CpusetCpus != null &&
                    CpusetCpus.Equals(other.CpusetCpus)
                ) && 
                (
                    CpusetMems == other.CpusetMems ||
                    CpusetMems != null &&
                    CpusetMems.Equals(other.CpusetMems)
                ) && 
                (
                    DeviceCgroupRules == other.DeviceCgroupRules ||
                    DeviceCgroupRules != null &&
                    other.DeviceCgroupRules != null &&
                    DeviceCgroupRules.SequenceEqual(other.DeviceCgroupRules)
                ) && 
                (
                    Devices == other.Devices ||
                    Devices != null &&
                    other.Devices != null &&
                    Devices.SequenceEqual(other.Devices)
                ) && 
                (
                    DiskQuota == other.DiskQuota ||
                    
                    DiskQuota.Equals(other.DiskQuota)
                ) && 
                (
                    IOMaximumBandwidth == other.IOMaximumBandwidth ||
                    
                    IOMaximumBandwidth.Equals(other.IOMaximumBandwidth)
                ) && 
                (
                    IOMaximumIOps == other.IOMaximumIOps ||
                    
                    IOMaximumIOps.Equals(other.IOMaximumIOps)
                ) && 
                (
                    KernelMemory == other.KernelMemory ||
                    
                    KernelMemory.Equals(other.KernelMemory)
                ) && 
                (
                    Memory == other.Memory ||
                    
                    Memory.Equals(other.Memory)
                ) && 
                (
                    MemoryReservation == other.MemoryReservation ||
                    
                    MemoryReservation.Equals(other.MemoryReservation)
                ) && 
                (
                    MemorySwap == other.MemorySwap ||
                    
                    MemorySwap.Equals(other.MemorySwap)
                ) && 
                (
                    MemorySwappiness == other.MemorySwappiness ||
                    
                    MemorySwappiness.Equals(other.MemorySwappiness)
                ) && 
                (
                    NanoCPUs == other.NanoCPUs ||
                    
                    NanoCPUs.Equals(other.NanoCPUs)
                ) && 
                (
                    OomKillDisable == other.OomKillDisable ||
                    
                    OomKillDisable.Equals(other.OomKillDisable)
                ) && 
                (
                    PidsLimit == other.PidsLimit ||
                    
                    PidsLimit.Equals(other.PidsLimit)
                ) && 
                (
                    Ulimits == other.Ulimits ||
                    Ulimits != null &&
                    other.Ulimits != null &&
                    Ulimits.SequenceEqual(other.Ulimits)
                ) && 
                (
                    AutoRemove == other.AutoRemove ||
                    
                    AutoRemove.Equals(other.AutoRemove)
                ) && 
                (
                    Binds == other.Binds ||
                    Binds != null &&
                    other.Binds != null &&
                    Binds.SequenceEqual(other.Binds)
                ) && 
                (
                    CapAdd == other.CapAdd ||
                    CapAdd != null &&
                    other.CapAdd != null &&
                    CapAdd.SequenceEqual(other.CapAdd)
                ) && 
                (
                    CapDrop == other.CapDrop ||
                    CapDrop != null &&
                    other.CapDrop != null &&
                    CapDrop.SequenceEqual(other.CapDrop)
                ) && 
                (
                    Cgroup == other.Cgroup ||
                    Cgroup != null &&
                    Cgroup.Equals(other.Cgroup)
                ) && 
                (
                    ConsoleSize == other.ConsoleSize ||
                    ConsoleSize != null &&
                    other.ConsoleSize != null &&
                    ConsoleSize.SequenceEqual(other.ConsoleSize)
                ) && 
                (
                    ContainerIDFile == other.ContainerIDFile ||
                    ContainerIDFile != null &&
                    ContainerIDFile.Equals(other.ContainerIDFile)
                ) && 
                (
                    Dns == other.Dns ||
                    Dns != null &&
                    other.Dns != null &&
                    Dns.SequenceEqual(other.Dns)
                ) && 
                (
                    DnsOptions == other.DnsOptions ||
                    DnsOptions != null &&
                    other.DnsOptions != null &&
                    DnsOptions.SequenceEqual(other.DnsOptions)
                ) && 
                (
                    DnsSearch == other.DnsSearch ||
                    DnsSearch != null &&
                    other.DnsSearch != null &&
                    DnsSearch.SequenceEqual(other.DnsSearch)
                ) && 
                (
                    ExtraHosts == other.ExtraHosts ||
                    ExtraHosts != null &&
                    other.ExtraHosts != null &&
                    ExtraHosts.SequenceEqual(other.ExtraHosts)
                ) && 
                (
                    GroupAdd == other.GroupAdd ||
                    GroupAdd != null &&
                    other.GroupAdd != null &&
                    GroupAdd.SequenceEqual(other.GroupAdd)
                ) && 
                (
                    IpcMode == other.IpcMode ||
                    IpcMode != null &&
                    IpcMode.Equals(other.IpcMode)
                ) && 
                (
                    Isolation == other.Isolation ||
                    
                    Isolation.Equals(other.Isolation)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    other.Links != null &&
                    Links.SequenceEqual(other.Links)
                ) && 
                (
                    LogConfig == other.LogConfig ||
                    LogConfig != null &&
                    LogConfig.Equals(other.LogConfig)
                ) && 
                (
                    Mounts == other.Mounts ||
                    Mounts != null &&
                    other.Mounts != null &&
                    Mounts.SequenceEqual(other.Mounts)
                ) && 
                (
                    NetworkMode == other.NetworkMode ||
                    NetworkMode != null &&
                    NetworkMode.Equals(other.NetworkMode)
                ) && 
                (
                    OomScoreAdj == other.OomScoreAdj ||
                    
                    OomScoreAdj.Equals(other.OomScoreAdj)
                ) && 
                (
                    PidMode == other.PidMode ||
                    PidMode != null &&
                    PidMode.Equals(other.PidMode)
                ) && 
                (
                    PortBindings == other.PortBindings ||
                    PortBindings != null &&
                    other.PortBindings != null &&
                    PortBindings.SequenceEqual(other.PortBindings)
                ) && 
                (
                    Privileged == other.Privileged ||
                    
                    Privileged.Equals(other.Privileged)
                ) && 
                (
                    PublishAllPorts == other.PublishAllPorts ||
                    
                    PublishAllPorts.Equals(other.PublishAllPorts)
                ) && 
                (
                    ReadonlyRootfs == other.ReadonlyRootfs ||
                    
                    ReadonlyRootfs.Equals(other.ReadonlyRootfs)
                ) && 
                (
                    RestartPolicy == other.RestartPolicy ||
                    RestartPolicy != null &&
                    RestartPolicy.Equals(other.RestartPolicy)
                ) && 
                (
                    Runtime == other.Runtime ||
                    Runtime != null &&
                    Runtime.Equals(other.Runtime)
                ) && 
                (
                    SecurityOpt == other.SecurityOpt ||
                    SecurityOpt != null &&
                    other.SecurityOpt != null &&
                    SecurityOpt.SequenceEqual(other.SecurityOpt)
                ) && 
                (
                    ShmSize == other.ShmSize ||
                    
                    ShmSize.Equals(other.ShmSize)
                ) && 
                (
                    StorageOpt == other.StorageOpt ||
                    StorageOpt != null &&
                    other.StorageOpt != null &&
                    StorageOpt.SequenceEqual(other.StorageOpt)
                ) && 
                (
                    Sysctls == other.Sysctls ||
                    Sysctls != null &&
                    other.Sysctls != null &&
                    Sysctls.SequenceEqual(other.Sysctls)
                ) && 
                (
                    Tmpfs == other.Tmpfs ||
                    Tmpfs != null &&
                    other.Tmpfs != null &&
                    Tmpfs.SequenceEqual(other.Tmpfs)
                ) && 
                (
                    UTSMode == other.UTSMode ||
                    UTSMode != null &&
                    UTSMode.Equals(other.UTSMode)
                ) && 
                (
                    UsernsMode == other.UsernsMode ||
                    UsernsMode != null &&
                    UsernsMode.Equals(other.UsernsMode)
                ) && 
                (
                    VolumeDriver == other.VolumeDriver ||
                    VolumeDriver != null &&
                    VolumeDriver.Equals(other.VolumeDriver)
                ) && 
                (
                    VolumesFrom == other.VolumesFrom ||
                    VolumesFrom != null &&
                    other.VolumesFrom != null &&
                    VolumesFrom.SequenceEqual(other.VolumesFrom)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BlkioDeviceReadBps != null)
                    hashCode = hashCode * 59 + BlkioDeviceReadBps.GetHashCode();
                    if (BlkioDeviceReadIOps != null)
                    hashCode = hashCode * 59 + BlkioDeviceReadIOps.GetHashCode();
                    if (BlkioDeviceWriteBps != null)
                    hashCode = hashCode * 59 + BlkioDeviceWriteBps.GetHashCode();
                    if (BlkioDeviceWriteIOps != null)
                    hashCode = hashCode * 59 + BlkioDeviceWriteIOps.GetHashCode();
                    
                    hashCode = hashCode * 59 + BlkioWeight.GetHashCode();
                    if (BlkioWeightDevice != null)
                    hashCode = hashCode * 59 + BlkioWeightDevice.GetHashCode();
                    if (CgroupParent != null)
                    hashCode = hashCode * 59 + CgroupParent.GetHashCode();
                    
                    hashCode = hashCode * 59 + CpuCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + CpuPercent.GetHashCode();
                    
                    hashCode = hashCode * 59 + CpuPeriod.GetHashCode();
                    
                    hashCode = hashCode * 59 + CpuQuota.GetHashCode();
                    
                    hashCode = hashCode * 59 + CpuRealtimePeriod.GetHashCode();
                    
                    hashCode = hashCode * 59 + CpuRealtimeRuntime.GetHashCode();
                    
                    hashCode = hashCode * 59 + CpuShares.GetHashCode();
                    if (CpusetCpus != null)
                    hashCode = hashCode * 59 + CpusetCpus.GetHashCode();
                    if (CpusetMems != null)
                    hashCode = hashCode * 59 + CpusetMems.GetHashCode();
                    if (DeviceCgroupRules != null)
                    hashCode = hashCode * 59 + DeviceCgroupRules.GetHashCode();
                    if (Devices != null)
                    hashCode = hashCode * 59 + Devices.GetHashCode();
                    
                    hashCode = hashCode * 59 + DiskQuota.GetHashCode();
                    
                    hashCode = hashCode * 59 + IOMaximumBandwidth.GetHashCode();
                    
                    hashCode = hashCode * 59 + IOMaximumIOps.GetHashCode();
                    
                    hashCode = hashCode * 59 + KernelMemory.GetHashCode();
                    
                    hashCode = hashCode * 59 + Memory.GetHashCode();
                    
                    hashCode = hashCode * 59 + MemoryReservation.GetHashCode();
                    
                    hashCode = hashCode * 59 + MemorySwap.GetHashCode();
                    
                    hashCode = hashCode * 59 + MemorySwappiness.GetHashCode();
                    
                    hashCode = hashCode * 59 + NanoCPUs.GetHashCode();
                    
                    hashCode = hashCode * 59 + OomKillDisable.GetHashCode();
                    
                    hashCode = hashCode * 59 + PidsLimit.GetHashCode();
                    if (Ulimits != null)
                    hashCode = hashCode * 59 + Ulimits.GetHashCode();
                    
                    hashCode = hashCode * 59 + AutoRemove.GetHashCode();
                    if (Binds != null)
                    hashCode = hashCode * 59 + Binds.GetHashCode();
                    if (CapAdd != null)
                    hashCode = hashCode * 59 + CapAdd.GetHashCode();
                    if (CapDrop != null)
                    hashCode = hashCode * 59 + CapDrop.GetHashCode();
                    if (Cgroup != null)
                    hashCode = hashCode * 59 + Cgroup.GetHashCode();
                    if (ConsoleSize != null)
                    hashCode = hashCode * 59 + ConsoleSize.GetHashCode();
                    if (ContainerIDFile != null)
                    hashCode = hashCode * 59 + ContainerIDFile.GetHashCode();
                    if (Dns != null)
                    hashCode = hashCode * 59 + Dns.GetHashCode();
                    if (DnsOptions != null)
                    hashCode = hashCode * 59 + DnsOptions.GetHashCode();
                    if (DnsSearch != null)
                    hashCode = hashCode * 59 + DnsSearch.GetHashCode();
                    if (ExtraHosts != null)
                    hashCode = hashCode * 59 + ExtraHosts.GetHashCode();
                    if (GroupAdd != null)
                    hashCode = hashCode * 59 + GroupAdd.GetHashCode();
                    if (IpcMode != null)
                    hashCode = hashCode * 59 + IpcMode.GetHashCode();
                    
                    hashCode = hashCode * 59 + Isolation.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (LogConfig != null)
                    hashCode = hashCode * 59 + LogConfig.GetHashCode();
                    if (Mounts != null)
                    hashCode = hashCode * 59 + Mounts.GetHashCode();
                    if (NetworkMode != null)
                    hashCode = hashCode * 59 + NetworkMode.GetHashCode();
                    
                    hashCode = hashCode * 59 + OomScoreAdj.GetHashCode();
                    if (PidMode != null)
                    hashCode = hashCode * 59 + PidMode.GetHashCode();
                    if (PortBindings != null)
                    hashCode = hashCode * 59 + PortBindings.GetHashCode();
                    
                    hashCode = hashCode * 59 + Privileged.GetHashCode();
                    
                    hashCode = hashCode * 59 + PublishAllPorts.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReadonlyRootfs.GetHashCode();
                    if (RestartPolicy != null)
                    hashCode = hashCode * 59 + RestartPolicy.GetHashCode();
                    if (Runtime != null)
                    hashCode = hashCode * 59 + Runtime.GetHashCode();
                    if (SecurityOpt != null)
                    hashCode = hashCode * 59 + SecurityOpt.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShmSize.GetHashCode();
                    if (StorageOpt != null)
                    hashCode = hashCode * 59 + StorageOpt.GetHashCode();
                    if (Sysctls != null)
                    hashCode = hashCode * 59 + Sysctls.GetHashCode();
                    if (Tmpfs != null)
                    hashCode = hashCode * 59 + Tmpfs.GetHashCode();
                    if (UTSMode != null)
                    hashCode = hashCode * 59 + UTSMode.GetHashCode();
                    if (UsernsMode != null)
                    hashCode = hashCode * 59 + UsernsMode.GetHashCode();
                    if (VolumeDriver != null)
                    hashCode = hashCode * 59 + VolumeDriver.GetHashCode();
                    if (VolumesFrom != null)
                    hashCode = hashCode * 59 + VolumesFrom.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HostConfig left, HostConfig right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HostConfig left, HostConfig right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
