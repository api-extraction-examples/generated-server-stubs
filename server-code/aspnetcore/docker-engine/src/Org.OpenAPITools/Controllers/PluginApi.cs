/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PluginApiController : ControllerBase
    { 
        /// <summary>
        /// Get plugin privileges
        /// </summary>
        /// <param name="remote">The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.</param>
        /// <response code="200">no error</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/plugins/privileges")]
        [ValidateModelState]
        [SwaggerOperation("GetPluginPrivileges")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GetPluginPrivileges200ResponseInner>), description: "no error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult GetPluginPrivileges([FromQuery (Name = "remote")][Required()]string remote)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GetPluginPrivileges200ResponseInner>));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"\",\n  \"Name\" : \"network\",\n  \"Value\" : [ \"host\" ]\n}, {\n  \"Description\" : \"\",\n  \"Name\" : \"mount\",\n  \"Value\" : [ \"/data\" ]\n}, {\n  \"Description\" : \"\",\n  \"Name\" : \"device\",\n  \"Value\" : [ \"/dev/cpu_dma_latency\" ]\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<GetPluginPrivileges200ResponseInner>>(exampleJson)
            : default(List<GetPluginPrivileges200ResponseInner>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a plugin
        /// </summary>
        /// <param name="name">The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.</param>
        /// <param name="body">Path to tar containing plugin rootfs and manifest</param>
        /// <response code="204">no error</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/plugins/create")]
        [Consumes("application/x-tar")]
        [ValidateModelState]
        [SwaggerOperation("PluginCreate")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult PluginCreate([FromQuery (Name = "name")][Required()]string name, [FromBody]System.IO.Stream body)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Remove a plugin
        /// </summary>
        /// <param name="name">The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.</param>
        /// <param name="force">Disable the plugin before removing. This may result in issues if the plugin is in use by a container.</param>
        /// <response code="200">no error</response>
        /// <response code="404">plugin is not installed</response>
        /// <response code="500">server error</response>
        [HttpDelete]
        [Route("/v1.33/plugins/{name}")]
        [ValidateModelState]
        [SwaggerOperation("PluginDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Plugin), description: "no error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "plugin is not installed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult PluginDelete([FromRoute (Name = "name")][Required]string name, [FromQuery (Name = "force")]bool? force)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Plugin));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Config\" : {\n    \"Args\" : {\n      \"Description\" : \"command line arguments\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Value\" : [ \"Value\", \"Value\" ],\n      \"Name\" : \"args\"\n    },\n    \"Mounts\" : [ {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    }, {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    } ],\n    \"Description\" : \"A sample volume plugin for Docker\",\n    \"User\" : {\n      \"UID\" : 1000,\n      \"GID\" : 1000\n    },\n    \"Entrypoint\" : [ \"/usr/bin/sample-volume-plugin\", \"/data\" ],\n    \"Documentation\" : \"https://docs.docker.com/engine/extend/plugins/\",\n    \"Env\" : [ {\n      \"Description\" : \"If set, prints debug messages\",\n      \"Name\" : \"DEBUG\",\n      \"Settable\" : null,\n      \"Value\" : \"0\"\n    } ],\n    \"PropagatedMount\" : \"/mnt/volumes\",\n    \"PidHost\" : false,\n    \"DockerVersion\" : \"17.06.0-ce\",\n    \"Linux\" : {\n      \"Capabilities\" : [ \"CAP_SYS_ADMIN\", \"CAP_SYSLOG\" ],\n      \"Devices\" : [ {\n        \"Path\" : \"/dev/fuse\",\n        \"Description\" : \"Description\",\n        \"Settable\" : [ \"Settable\", \"Settable\" ],\n        \"Name\" : \"Name\"\n      }, {\n        \"Path\" : \"/dev/fuse\",\n        \"Description\" : \"Description\",\n        \"Settable\" : [ \"Settable\", \"Settable\" ],\n        \"Name\" : \"Name\"\n      } ],\n      \"AllowAllDevices\" : false\n    },\n    \"Network\" : {\n      \"Type\" : \"host\"\n    },\n    \"rootfs\" : {\n      \"diff_ids\" : [ \"sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887\", \"sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8\" ],\n      \"type\" : \"layers\"\n    },\n    \"WorkDir\" : \"/bin/\",\n    \"Interface\" : {\n      \"Types\" : [ \"docker.volumedriver/1.0\" ],\n      \"Socket\" : \"plugins.sock\"\n    },\n    \"IpcHost\" : false\n  },\n  \"Enabled\" : true,\n  \"Id\" : \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n  \"Settings\" : {\n    \"Args\" : [ \"Args\", \"Args\" ],\n    \"Mounts\" : [ {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    }, {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    } ],\n    \"Devices\" : [ {\n      \"Path\" : \"/dev/fuse\",\n      \"Description\" : \"Description\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Name\" : \"Name\"\n    }, {\n      \"Path\" : \"/dev/fuse\",\n      \"Description\" : \"Description\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Name\" : \"Name\"\n    } ],\n    \"Env\" : [ \"DEBUG=0\" ]\n  },\n  \"Name\" : \"tiborvass/sample-volume-plugin\",\n  \"PluginReference\" : \"localhost:5000/tiborvass/sample-volume-plugin:latest\"\n}";
            exampleJson = "Custom MIME type example not yet supported: text/plain";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Plugin>(exampleJson)
            : default(Plugin);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Disable a plugin
        /// </summary>
        /// <param name="name">The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.</param>
        /// <response code="200">no error</response>
        /// <response code="404">plugin is not installed</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/plugins/{name}/disable")]
        [ValidateModelState]
        [SwaggerOperation("PluginDisable")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "plugin is not installed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult PluginDisable([FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Enable a plugin
        /// </summary>
        /// <param name="name">The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.</param>
        /// <param name="timeout">Set the HTTP client timeout (in seconds)</param>
        /// <response code="200">no error</response>
        /// <response code="404">plugin is not installed</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/plugins/{name}/enable")]
        [ValidateModelState]
        [SwaggerOperation("PluginEnable")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "plugin is not installed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult PluginEnable([FromRoute (Name = "name")][Required]string name, [FromQuery (Name = "timeout")]int? timeout)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Inspect a plugin
        /// </summary>
        /// <param name="name">The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.</param>
        /// <response code="200">no error</response>
        /// <response code="404">plugin is not installed</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/plugins/{name}/json")]
        [ValidateModelState]
        [SwaggerOperation("PluginInspect")]
        [SwaggerResponse(statusCode: 200, type: typeof(Plugin), description: "no error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "plugin is not installed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult PluginInspect([FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Plugin));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Config\" : {\n    \"Args\" : {\n      \"Description\" : \"command line arguments\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Value\" : [ \"Value\", \"Value\" ],\n      \"Name\" : \"args\"\n    },\n    \"Mounts\" : [ {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    }, {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    } ],\n    \"Description\" : \"A sample volume plugin for Docker\",\n    \"User\" : {\n      \"UID\" : 1000,\n      \"GID\" : 1000\n    },\n    \"Entrypoint\" : [ \"/usr/bin/sample-volume-plugin\", \"/data\" ],\n    \"Documentation\" : \"https://docs.docker.com/engine/extend/plugins/\",\n    \"Env\" : [ {\n      \"Description\" : \"If set, prints debug messages\",\n      \"Name\" : \"DEBUG\",\n      \"Settable\" : null,\n      \"Value\" : \"0\"\n    } ],\n    \"PropagatedMount\" : \"/mnt/volumes\",\n    \"PidHost\" : false,\n    \"DockerVersion\" : \"17.06.0-ce\",\n    \"Linux\" : {\n      \"Capabilities\" : [ \"CAP_SYS_ADMIN\", \"CAP_SYSLOG\" ],\n      \"Devices\" : [ {\n        \"Path\" : \"/dev/fuse\",\n        \"Description\" : \"Description\",\n        \"Settable\" : [ \"Settable\", \"Settable\" ],\n        \"Name\" : \"Name\"\n      }, {\n        \"Path\" : \"/dev/fuse\",\n        \"Description\" : \"Description\",\n        \"Settable\" : [ \"Settable\", \"Settable\" ],\n        \"Name\" : \"Name\"\n      } ],\n      \"AllowAllDevices\" : false\n    },\n    \"Network\" : {\n      \"Type\" : \"host\"\n    },\n    \"rootfs\" : {\n      \"diff_ids\" : [ \"sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887\", \"sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8\" ],\n      \"type\" : \"layers\"\n    },\n    \"WorkDir\" : \"/bin/\",\n    \"Interface\" : {\n      \"Types\" : [ \"docker.volumedriver/1.0\" ],\n      \"Socket\" : \"plugins.sock\"\n    },\n    \"IpcHost\" : false\n  },\n  \"Enabled\" : true,\n  \"Id\" : \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n  \"Settings\" : {\n    \"Args\" : [ \"Args\", \"Args\" ],\n    \"Mounts\" : [ {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    }, {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    } ],\n    \"Devices\" : [ {\n      \"Path\" : \"/dev/fuse\",\n      \"Description\" : \"Description\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Name\" : \"Name\"\n    }, {\n      \"Path\" : \"/dev/fuse\",\n      \"Description\" : \"Description\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Name\" : \"Name\"\n    } ],\n    \"Env\" : [ \"DEBUG=0\" ]\n  },\n  \"Name\" : \"tiborvass/sample-volume-plugin\",\n  \"PluginReference\" : \"localhost:5000/tiborvass/sample-volume-plugin:latest\"\n}";
            exampleJson = "Custom MIME type example not yet supported: text/plain";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Plugin>(exampleJson)
            : default(Plugin);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List plugins
        /// </summary>
        /// <remarks>Returns information about installed plugins.</remarks>
        /// <param name="filters">A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list. Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; </param>
        /// <response code="200">No error</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/v1.33/plugins")]
        [ValidateModelState]
        [SwaggerOperation("PluginList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Plugin>), description: "No error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult PluginList([FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Plugin>));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Config\" : {\n    \"Args\" : {\n      \"Description\" : \"command line arguments\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Value\" : [ \"Value\", \"Value\" ],\n      \"Name\" : \"args\"\n    },\n    \"Mounts\" : [ {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    }, {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    } ],\n    \"Description\" : \"A sample volume plugin for Docker\",\n    \"User\" : {\n      \"UID\" : 1000,\n      \"GID\" : 1000\n    },\n    \"Entrypoint\" : [ \"/usr/bin/sample-volume-plugin\", \"/data\" ],\n    \"Documentation\" : \"https://docs.docker.com/engine/extend/plugins/\",\n    \"Env\" : [ {\n      \"Description\" : \"If set, prints debug messages\",\n      \"Name\" : \"DEBUG\",\n      \"Settable\" : null,\n      \"Value\" : \"0\"\n    } ],\n    \"PropagatedMount\" : \"/mnt/volumes\",\n    \"PidHost\" : false,\n    \"DockerVersion\" : \"17.06.0-ce\",\n    \"Linux\" : {\n      \"Capabilities\" : [ \"CAP_SYS_ADMIN\", \"CAP_SYSLOG\" ],\n      \"Devices\" : [ {\n        \"Path\" : \"/dev/fuse\",\n        \"Description\" : \"Description\",\n        \"Settable\" : [ \"Settable\", \"Settable\" ],\n        \"Name\" : \"Name\"\n      }, {\n        \"Path\" : \"/dev/fuse\",\n        \"Description\" : \"Description\",\n        \"Settable\" : [ \"Settable\", \"Settable\" ],\n        \"Name\" : \"Name\"\n      } ],\n      \"AllowAllDevices\" : false\n    },\n    \"Network\" : {\n      \"Type\" : \"host\"\n    },\n    \"rootfs\" : {\n      \"diff_ids\" : [ \"sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887\", \"sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8\" ],\n      \"type\" : \"layers\"\n    },\n    \"WorkDir\" : \"/bin/\",\n    \"Interface\" : {\n      \"Types\" : [ \"docker.volumedriver/1.0\" ],\n      \"Socket\" : \"plugins.sock\"\n    },\n    \"IpcHost\" : false\n  },\n  \"Enabled\" : true,\n  \"Id\" : \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n  \"Settings\" : {\n    \"Args\" : [ \"Args\", \"Args\" ],\n    \"Mounts\" : [ {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    }, {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    } ],\n    \"Devices\" : [ {\n      \"Path\" : \"/dev/fuse\",\n      \"Description\" : \"Description\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Name\" : \"Name\"\n    }, {\n      \"Path\" : \"/dev/fuse\",\n      \"Description\" : \"Description\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Name\" : \"Name\"\n    } ],\n    \"Env\" : [ \"DEBUG=0\" ]\n  },\n  \"Name\" : \"tiborvass/sample-volume-plugin\",\n  \"PluginReference\" : \"localhost:5000/tiborvass/sample-volume-plugin:latest\"\n}, {\n  \"Config\" : {\n    \"Args\" : {\n      \"Description\" : \"command line arguments\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Value\" : [ \"Value\", \"Value\" ],\n      \"Name\" : \"args\"\n    },\n    \"Mounts\" : [ {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    }, {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    } ],\n    \"Description\" : \"A sample volume plugin for Docker\",\n    \"User\" : {\n      \"UID\" : 1000,\n      \"GID\" : 1000\n    },\n    \"Entrypoint\" : [ \"/usr/bin/sample-volume-plugin\", \"/data\" ],\n    \"Documentation\" : \"https://docs.docker.com/engine/extend/plugins/\",\n    \"Env\" : [ {\n      \"Description\" : \"If set, prints debug messages\",\n      \"Name\" : \"DEBUG\",\n      \"Settable\" : null,\n      \"Value\" : \"0\"\n    } ],\n    \"PropagatedMount\" : \"/mnt/volumes\",\n    \"PidHost\" : false,\n    \"DockerVersion\" : \"17.06.0-ce\",\n    \"Linux\" : {\n      \"Capabilities\" : [ \"CAP_SYS_ADMIN\", \"CAP_SYSLOG\" ],\n      \"Devices\" : [ {\n        \"Path\" : \"/dev/fuse\",\n        \"Description\" : \"Description\",\n        \"Settable\" : [ \"Settable\", \"Settable\" ],\n        \"Name\" : \"Name\"\n      }, {\n        \"Path\" : \"/dev/fuse\",\n        \"Description\" : \"Description\",\n        \"Settable\" : [ \"Settable\", \"Settable\" ],\n        \"Name\" : \"Name\"\n      } ],\n      \"AllowAllDevices\" : false\n    },\n    \"Network\" : {\n      \"Type\" : \"host\"\n    },\n    \"rootfs\" : {\n      \"diff_ids\" : [ \"sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887\", \"sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8\" ],\n      \"type\" : \"layers\"\n    },\n    \"WorkDir\" : \"/bin/\",\n    \"Interface\" : {\n      \"Types\" : [ \"docker.volumedriver/1.0\" ],\n      \"Socket\" : \"plugins.sock\"\n    },\n    \"IpcHost\" : false\n  },\n  \"Enabled\" : true,\n  \"Id\" : \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n  \"Settings\" : {\n    \"Args\" : [ \"Args\", \"Args\" ],\n    \"Mounts\" : [ {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    }, {\n      \"Destination\" : \"/mnt/state\",\n      \"Options\" : [ \"rbind\", \"rw\" ],\n      \"Type\" : \"bind\",\n      \"Description\" : \"This is a mount that's used by the plugin.\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Source\" : \"/var/lib/docker/plugins/\",\n      \"Name\" : \"some-mount\"\n    } ],\n    \"Devices\" : [ {\n      \"Path\" : \"/dev/fuse\",\n      \"Description\" : \"Description\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Name\" : \"Name\"\n    }, {\n      \"Path\" : \"/dev/fuse\",\n      \"Description\" : \"Description\",\n      \"Settable\" : [ \"Settable\", \"Settable\" ],\n      \"Name\" : \"Name\"\n    } ],\n    \"Env\" : [ \"DEBUG=0\" ]\n  },\n  \"Name\" : \"tiborvass/sample-volume-plugin\",\n  \"PluginReference\" : \"localhost:5000/tiborvass/sample-volume-plugin:latest\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Plugin>>(exampleJson)
            : default(List<Plugin>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Install a plugin
        /// </summary>
        /// <remarks>Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [&#x60;POST /plugins/{name}/enable&#x60; endpoint](#operation/PostPluginsEnable). </remarks>
        /// <param name="remote">Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. </param>
        /// <param name="name">Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. </param>
        /// <param name="xRegistryAuth">A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)</param>
        /// <param name="pluginPullRequestInner"></param>
        /// <response code="204">no error</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/plugins/pull")]
        [Consumes("application/json", "text/plain")]
        [ValidateModelState]
        [SwaggerOperation("PluginPull")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult PluginPull([FromQuery (Name = "remote")][Required()]string remote, [FromQuery (Name = "name")]string name, [FromHeader (Name = "X-Registry-Auth")]string xRegistryAuth, [FromBody]List<PluginPullRequestInner> pluginPullRequestInner)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Push a plugin
        /// </summary>
        /// <remarks>Push a plugin to the registry. </remarks>
        /// <param name="name">The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.</param>
        /// <response code="200">no error</response>
        /// <response code="404">plugin not installed</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/plugins/{name}/push")]
        [ValidateModelState]
        [SwaggerOperation("PluginPush")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "plugin not installed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult PluginPush([FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Configure a plugin
        /// </summary>
        /// <param name="name">The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.</param>
        /// <param name="requestBody"></param>
        /// <response code="204">No error</response>
        /// <response code="404">Plugin not installed</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/plugins/{name}/set")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PluginSet")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Plugin not installed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult PluginSet([FromRoute (Name = "name")][Required]string name, [FromBody]List<string> requestBody)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Upgrade a plugin
        /// </summary>
        /// <param name="name">The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted.</param>
        /// <param name="remote">Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. </param>
        /// <param name="xRegistryAuth">A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)</param>
        /// <param name="pluginPullRequestInner"></param>
        /// <response code="204">no error</response>
        /// <response code="404">plugin not installed</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/plugins/{name}/upgrade")]
        [Consumes("application/json", "text/plain")]
        [ValidateModelState]
        [SwaggerOperation("PluginUpgrade")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "plugin not installed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult PluginUpgrade([FromRoute (Name = "name")][Required]string name, [FromQuery (Name = "remote")][Required()]string remote, [FromHeader (Name = "X-Registry-Auth")]string xRegistryAuth, [FromBody]List<PluginPullRequestInner> pluginPullRequestInner)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }
    }
}
