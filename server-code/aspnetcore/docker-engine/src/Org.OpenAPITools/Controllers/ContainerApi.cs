/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ContainerApiController : ControllerBase
    { 
        /// <summary>
        /// Get an archive of a filesystem resource in a container
        /// </summary>
        /// <remarks>Get a tar archive of a resource in the filesystem of container id.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="path">Resource in the container’s filesystem to archive.</param>
        /// <response code="200">no error</response>
        /// <response code="400">Bad parameter</response>
        /// <response code="404">Container or path does not exist</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/containers/{id}/archive")]
        [ValidateModelState]
        [SwaggerOperation("ContainerArchive")]
        [SwaggerResponse(statusCode: 400, type: typeof(ContainerArchive400Response), description: "Bad parameter")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerArchive([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "path")][Required()]string path)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ContainerArchive400Response));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get information about files in a container
        /// </summary>
        /// <remarks>A response header &#x60;X-Docker-Container-Path-Stat&#x60; is return containing a base64 - encoded JSON object with some filesystem header information about the path.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="path">Resource in the container’s filesystem to archive.</param>
        /// <response code="200">no error</response>
        /// <response code="400">Bad parameter</response>
        /// <response code="404">Container or path does not exist</response>
        /// <response code="500">Server error</response>
        [HttpHead]
        [Route("/v1.33/containers/{id}/archive")]
        [ValidateModelState]
        [SwaggerOperation("ContainerArchiveInfo")]
        [SwaggerResponse(statusCode: 400, type: typeof(ContainerArchive400Response), description: "Bad parameter")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Container or path does not exist")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ContainerArchiveInfo([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "path")][Required()]string path)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ContainerArchive400Response));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Attach to a container
        /// </summary>
        /// <remarks>Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the &#x60;stream&#x60; or &#x60;logs&#x60; parameter must be &#x60;true&#x60; for this endpoint to do anything.  See [the documentation for the &#x60;docker attach&#x60; command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport &#x60;stdin&#x60;, &#x60;stdout&#x60;, and &#x60;stderr&#x60; on the same socket.  This is the response from the daemon for an attach request:  &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] &#x60;&#x60;&#x60;  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  &#x60;&#x60;&#x60; POST /containers/16253994b7c4/attach?stream&#x3D;1&amp;stdout&#x3D;1 HTTP/1.1 Upgrade: tcp Connection: Upgrade &#x60;&#x60;&#x60;  The Docker daemon will respond with a &#x60;101 UPGRADED&#x60; response, and will similarly follow with the raw stream:  &#x60;&#x60;&#x60; HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] &#x60;&#x60;&#x60;  ### Stream format  When the TTY setting is disabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out &#x60;stdout&#x60; and &#x60;stderr&#x60;. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (&#x60;stdout&#x60; or &#x60;stderr&#x60;). It also contains the size of the associated frame encoded in the last four bytes (&#x60;uint32&#x60;).  It is encoded on the first eight bytes like this:  &#x60;&#x60;&#x60;go header :&#x3D; [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} &#x60;&#x60;&#x60;  &#x60;STREAM_TYPE&#x60; can be:  - 0: &#x60;stdin&#x60; (is written on &#x60;stdout&#x60;) - 1: &#x60;stdout&#x60; - 2: &#x60;stderr&#x60;  &#x60;SIZE1, SIZE2, SIZE3, SIZE4&#x60; are the four bytes of the &#x60;uint32&#x60; size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of &#x60;STREAM_TYPE&#x60;.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose &#x60;stdout&#x60; or &#x60;stderr&#x60; depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client&#39;s &#x60;stdin&#x60;. </remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="detachKeys">Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;.</param>
        /// <param name="logs">Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. </param>
        /// <param name="stream">Stream attached streams from the time the request was made onwards</param>
        /// <param name="stdin">Attach to &#x60;stdin&#x60;</param>
        /// <param name="stdout">Attach to &#x60;stdout&#x60;</param>
        /// <param name="stderr">Attach to &#x60;stderr&#x60;</param>
        /// <response code="101">no error, hints proxy about hijacking</response>
        /// <response code="200">no error, no upgrade header found</response>
        /// <response code="400">bad parameter</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/attach")]
        [ValidateModelState]
        [SwaggerOperation("ContainerAttach")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "bad parameter")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerAttach([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "detachKeys")]string detachKeys, [FromQuery (Name = "logs")]bool? logs, [FromQuery (Name = "stream")]bool? stream, [FromQuery (Name = "stdin")]bool? stdin, [FromQuery (Name = "stdout")]bool? stdout, [FromQuery (Name = "stderr")]bool? stderr)
        {

            //TODO: Uncomment the next line to return response 101 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(101);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Attach to a container via a websocket
        /// </summary>
        /// <param name="id">ID or name of the container</param>
        /// <param name="detachKeys">Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;.</param>
        /// <param name="logs">Return logs</param>
        /// <param name="stream">Return stream</param>
        /// <param name="stdin">Attach to &#x60;stdin&#x60;</param>
        /// <param name="stdout">Attach to &#x60;stdout&#x60;</param>
        /// <param name="stderr">Attach to &#x60;stderr&#x60;</param>
        /// <response code="101">no error, hints proxy about hijacking</response>
        /// <response code="200">no error, no upgrade header found</response>
        /// <response code="400">bad parameter</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/containers/{id}/attach/ws")]
        [ValidateModelState]
        [SwaggerOperation("ContainerAttachWebsocket")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "bad parameter")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerAttachWebsocket([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "detachKeys")]string detachKeys, [FromQuery (Name = "logs")]bool? logs, [FromQuery (Name = "stream")]bool? stream, [FromQuery (Name = "stdin")]bool? stdin, [FromQuery (Name = "stdout")]bool? stdout, [FromQuery (Name = "stderr")]bool? stderr)
        {

            //TODO: Uncomment the next line to return response 101 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(101);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get changes on a container’s filesystem
        /// </summary>
        /// <remarks>Returns which files in a container&#39;s filesystem have been added, deleted, or modified. The &#x60;Kind&#x60; of modification can be one of:  - &#x60;0&#x60;: Modified - &#x60;1&#x60;: Added - &#x60;2&#x60;: Deleted </remarks>
        /// <param name="id">ID or name of the container</param>
        /// <response code="200">The list of changes</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/containers/{id}/changes")]
        [ValidateModelState]
        [SwaggerOperation("ContainerChanges")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ContainerChanges200ResponseInner>), description: "The list of changes")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerChanges([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ContainerChanges200ResponseInner>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"Kind\" : 0\n}, {\n  \"Path\" : \"Path\",\n  \"Kind\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ContainerChanges200ResponseInner>>(exampleJson)
            : default(List<ContainerChanges200ResponseInner>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a container
        /// </summary>
        /// <param name="containerCreateRequest">Container to create</param>
        /// <param name="name">Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9_-]+&#x60;.</param>
        /// <response code="201">Container created successfully</response>
        /// <response code="400">bad parameter</response>
        /// <response code="404">no such container</response>
        /// <response code="409">conflict</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/create")]
        [Consumes("application/json", "application/octet-stream")]
        [ValidateModelState]
        [SwaggerOperation("ContainerCreate")]
        [SwaggerResponse(statusCode: 201, type: typeof(ContainerCreate201Response), description: "Container created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "bad parameter")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "conflict")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerCreate([FromBody]ContainerCreateRequest containerCreateRequest, [FromQuery (Name = "name")][RegularExpression("/?[a-zA-Z0-9_-]+")]string name)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ContainerCreate201Response));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Id\" : \"Id\",\n  \"Warnings\" : [ \"Warnings\", \"Warnings\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ContainerCreate201Response>(exampleJson)
            : default(ContainerCreate201Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove a container
        /// </summary>
        /// <param name="id">ID or name of the container</param>
        /// <param name="v">Remove the volumes associated with the container.</param>
        /// <param name="force">If the container is running, kill it before removing it.</param>
        /// <param name="link">Remove the specified link associated with the container.</param>
        /// <response code="204">no error</response>
        /// <response code="400">bad parameter</response>
        /// <response code="404">no such container</response>
        /// <response code="409">conflict</response>
        /// <response code="500">server error</response>
        [HttpDelete]
        [Route("/v1.33/containers/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ContainerDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "bad parameter")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "conflict")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerDelete([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "v")]bool? v, [FromQuery (Name = "force")]bool? force, [FromQuery (Name = "link")]bool? link)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Export a container
        /// </summary>
        /// <remarks>Export the contents of a container as a tarball.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <response code="200">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/containers/{id}/export")]
        [ValidateModelState]
        [SwaggerOperation("ContainerExport")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerExport([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Inspect a container
        /// </summary>
        /// <remarks>Return low-level information about a container.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="size">Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;</param>
        /// <response code="200">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/containers/{id}/json")]
        [ValidateModelState]
        [SwaggerOperation("ContainerInspect")]
        [SwaggerResponse(statusCode: 200, type: typeof(ContainerInspect200Response), description: "no error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerInspect([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "size")]bool? size)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContainerInspect200Response));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Config\" : {\n    \"User\" : \"User\",\n    \"OpenStdin\" : false,\n    \"Env\" : [ \"Env\", \"Env\" ],\n    \"Image\" : \"Image\",\n    \"StdinOnce\" : false,\n    \"AttachStdout\" : true,\n    \"Shell\" : [ \"Shell\", \"Shell\" ],\n    \"Volumes\" : {\n      \"additionalProperties\" : \"{}\"\n    },\n    \"AttachStdin\" : false,\n    \"Domainname\" : \"Domainname\",\n    \"Tty\" : false,\n    \"Cmd\" : [ \"Cmd\", \"Cmd\" ],\n    \"StopTimeout\" : 5,\n    \"StopSignal\" : \"SIGTERM\",\n    \"Entrypoint\" : [ \"Entrypoint\", \"Entrypoint\" ],\n    \"AttachStderr\" : true,\n    \"ArgsEscaped\" : true,\n    \"Hostname\" : \"Hostname\",\n    \"Labels\" : {\n      \"key\" : \"Labels\"\n    },\n    \"Healthcheck\" : {\n      \"Test\" : [ \"Test\", \"Test\" ],\n      \"Retries\" : 6,\n      \"Timeout\" : 5,\n      \"Interval\" : 0,\n      \"StartPeriod\" : 1\n    },\n    \"MacAddress\" : \"MacAddress\",\n    \"NetworkDisabled\" : true,\n    \"ExposedPorts\" : {\n      \"key\" : \"{}\"\n    },\n    \"WorkingDir\" : \"WorkingDir\",\n    \"OnBuild\" : [ \"OnBuild\", \"OnBuild\" ]\n  },\n  \"Node\" : \"{}\",\n  \"AppArmorProfile\" : \"AppArmorProfile\",\n  \"Driver\" : \"Driver\",\n  \"HostsPath\" : \"HostsPath\",\n  \"HostnamePath\" : \"HostnamePath\",\n  \"Image\" : \"Image\",\n  \"Created\" : \"Created\",\n  \"Name\" : \"Name\",\n  \"MountLabel\" : \"MountLabel\",\n  \"SizeRootFs\" : 1,\n  \"Path\" : \"Path\",\n  \"Args\" : [ \"Args\", \"Args\" ],\n  \"Mounts\" : [ {\n    \"Destination\" : \"Destination\",\n    \"Type\" : \"Type\",\n    \"Propagation\" : \"Propagation\",\n    \"RW\" : true,\n    \"Mode\" : \"Mode\",\n    \"Driver\" : \"Driver\",\n    \"Source\" : \"Source\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Destination\" : \"Destination\",\n    \"Type\" : \"Type\",\n    \"Propagation\" : \"Propagation\",\n    \"RW\" : true,\n    \"Mode\" : \"Mode\",\n    \"Driver\" : \"Driver\",\n    \"Source\" : \"Source\",\n    \"Name\" : \"Name\"\n  } ],\n  \"ProcessLabel\" : \"ProcessLabel\",\n  \"SizeRw\" : 5,\n  \"GraphDriver\" : {\n    \"Data\" : {\n      \"key\" : \"Data\"\n    },\n    \"Name\" : \"Name\"\n  },\n  \"RestartCount\" : 6,\n  \"NetworkSettings\" : {\n    \"HairpinMode\" : false,\n    \"Networks\" : {\n      \"key\" : {\n        \"GlobalIPv6Address\" : \"2001:db8::5689\",\n        \"GlobalIPv6PrefixLen\" : 64,\n        \"IPPrefixLen\" : 16,\n        \"Aliases\" : [ \"server_x\", \"server_y\" ],\n        \"MacAddress\" : \"02:42:ac:11:00:04\",\n        \"NetworkID\" : \"08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a\",\n        \"IPAMConfig\" : {\n          \"LinkLocalIPs\" : [ \"169.254.34.68\", \"fe80::3468\" ],\n          \"IPv6Address\" : \"2001:db8:abcd::3033\",\n          \"IPv4Address\" : \"172.20.30.33\"\n        },\n        \"DriverOpts\" : {\n          \"com.example.some-label\" : \"some-value\",\n          \"com.example.some-other-label\" : \"some-other-value\"\n        },\n        \"Gateway\" : \"172.17.0.1\",\n        \"EndpointID\" : \"b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b\",\n        \"Links\" : [ \"container_1\", \"container_2\" ],\n        \"IPv6Gateway\" : \"2001:db8:2::100\",\n        \"IPAddress\" : \"172.17.0.4\"\n      }\n    },\n    \"SandboxKey\" : \"/var/run/docker/netns/8ab54b426c38\",\n    \"GlobalIPv6Address\" : \"2001:db8::5689\",\n    \"Ports\" : {\n      \"2377/tcp\" : null,\n      \"443/tcp\" : [ {\n        \"HostIp\" : \"127.0.0.1\",\n        \"HostPort\" : \"4443\"\n      } ],\n      \"53/udp\" : [ {\n        \"HostIp\" : \"0.0.0.0\",\n        \"HostPort\" : \"53\"\n      } ],\n      \"80/tcp\" : [ {\n        \"HostIp\" : \"0.0.0.0\",\n        \"HostPort\" : \"80\"\n      }, {\n        \"HostIp\" : \"0.0.0.0\",\n        \"HostPort\" : \"8080\"\n      } ],\n      \"80/udp\" : [ {\n        \"HostIp\" : \"0.0.0.0\",\n        \"HostPort\" : \"80\"\n      } ]\n    },\n    \"GlobalIPv6PrefixLen\" : 64,\n    \"IPPrefixLen\" : 16,\n    \"MacAddress\" : \"02:42:ac:11:00:04\",\n    \"SandboxID\" : \"9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3\",\n    \"LinkLocalIPv6Address\" : \"fe80::42:acff:fe11:1\",\n    \"LinkLocalIPv6PrefixLen\" : 64,\n    \"Gateway\" : \"172.17.0.1\",\n    \"EndpointID\" : \"b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b\",\n    \"SecondaryIPv6Addresses\" : [ {\n      \"PrefixLen\" : 0,\n      \"Addr\" : \"Addr\"\n    }, {\n      \"PrefixLen\" : 0,\n      \"Addr\" : \"Addr\"\n    } ],\n    \"IPv6Gateway\" : \"2001:db8:2::100\",\n    \"SecondaryIPAddresses\" : [ {\n      \"PrefixLen\" : 0,\n      \"Addr\" : \"Addr\"\n    }, {\n      \"PrefixLen\" : 0,\n      \"Addr\" : \"Addr\"\n    } ],\n    \"IPAddress\" : \"172.17.0.4\",\n    \"Bridge\" : \"docker0\"\n  },\n  \"ResolvConfPath\" : \"ResolvConfPath\",\n  \"State\" : {\n    \"Status\" : \"created\",\n    \"Restarting\" : true,\n    \"Dead\" : true,\n    \"ExitCode\" : 5,\n    \"Running\" : true,\n    \"Error\" : \"Error\",\n    \"FinishedAt\" : \"FinishedAt\",\n    \"OOMKilled\" : true,\n    \"Pid\" : 2,\n    \"StartedAt\" : \"StartedAt\",\n    \"Paused\" : true\n  },\n  \"ExecIDs\" : \"ExecIDs\",\n  \"Id\" : \"Id\",\n  \"LogPath\" : \"LogPath\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ContainerInspect200Response>(exampleJson)
            : default(ContainerInspect200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Kill a container
        /// </summary>
        /// <remarks>Send a POSIX signal to a container, defaulting to killing to the container.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="signal">Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;)</param>
        /// <response code="204">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/kill")]
        [ValidateModelState]
        [SwaggerOperation("ContainerKill")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerKill([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "signal")]string signal)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// List containers
        /// </summary>
        /// <remarks>Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . </remarks>
        /// <param name="all">Return all containers. By default, only running containers are shown</param>
        /// <param name="limit">Return this number of most recently created containers, including non-running ones.</param>
        /// <param name="size">Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;.</param>
        /// <param name="filters">Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers. Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) </param>
        /// <response code="200">no error</response>
        /// <response code="400">bad parameter</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/containers/json")]
        [ValidateModelState]
        [SwaggerOperation("ContainerList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ContainerSummaryInner>), description: "no error")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "bad parameter")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerList([FromQuery (Name = "all")]bool? all, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "size")]bool? size, [FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ContainerSummaryInner>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Status\" : \"Status\",\n  \"Mounts\" : [ {\n    \"BindOptions\" : {\n      \"Propagation\" : \"private\"\n    },\n    \"ReadOnly\" : true,\n    \"Target\" : \"Target\",\n    \"Type\" : \"bind\",\n    \"VolumeOptions\" : {\n      \"NoCopy\" : false,\n      \"DriverConfig\" : {\n        \"Options\" : {\n          \"key\" : \"Options\"\n        },\n        \"Name\" : \"Name\"\n      },\n      \"Labels\" : {\n        \"key\" : \"Labels\"\n      }\n    },\n    \"Consistency\" : \"Consistency\",\n    \"TmpfsOptions\" : {\n      \"Mode\" : 6,\n      \"SizeBytes\" : 1\n    },\n    \"Source\" : \"Source\"\n  }, {\n    \"BindOptions\" : {\n      \"Propagation\" : \"private\"\n    },\n    \"ReadOnly\" : true,\n    \"Target\" : \"Target\",\n    \"Type\" : \"bind\",\n    \"VolumeOptions\" : {\n      \"NoCopy\" : false,\n      \"DriverConfig\" : {\n        \"Options\" : {\n          \"key\" : \"Options\"\n        },\n        \"Name\" : \"Name\"\n      },\n      \"Labels\" : {\n        \"key\" : \"Labels\"\n      }\n    },\n    \"Consistency\" : \"Consistency\",\n    \"TmpfsOptions\" : {\n      \"Mode\" : 6,\n      \"SizeBytes\" : 1\n    },\n    \"Source\" : \"Source\"\n  } ],\n  \"SizeRw\" : 5,\n  \"Ports\" : [ {\n    \"PrivatePort\" : 8080,\n    \"PublicPort\" : 80,\n    \"Type\" : \"tcp\"\n  }, {\n    \"PrivatePort\" : 8080,\n    \"PublicPort\" : 80,\n    \"Type\" : \"tcp\"\n  } ],\n  \"Labels\" : {\n    \"key\" : \"Labels\"\n  },\n  \"Image\" : \"Image\",\n  \"Created\" : 0,\n  \"Names\" : [ \"Names\", \"Names\" ],\n  \"NetworkSettings\" : {\n    \"Networks\" : {\n      \"key\" : {\n        \"GlobalIPv6Address\" : \"2001:db8::5689\",\n        \"GlobalIPv6PrefixLen\" : 64,\n        \"IPPrefixLen\" : 16,\n        \"Aliases\" : [ \"server_x\", \"server_y\" ],\n        \"MacAddress\" : \"02:42:ac:11:00:04\",\n        \"NetworkID\" : \"08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a\",\n        \"IPAMConfig\" : {\n          \"LinkLocalIPs\" : [ \"169.254.34.68\", \"fe80::3468\" ],\n          \"IPv6Address\" : \"2001:db8:abcd::3033\",\n          \"IPv4Address\" : \"172.20.30.33\"\n        },\n        \"DriverOpts\" : {\n          \"com.example.some-label\" : \"some-value\",\n          \"com.example.some-other-label\" : \"some-other-value\"\n        },\n        \"Gateway\" : \"172.17.0.1\",\n        \"EndpointID\" : \"b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b\",\n        \"Links\" : [ \"container_1\", \"container_2\" ],\n        \"IPv6Gateway\" : \"2001:db8:2::100\",\n        \"IPAddress\" : \"172.17.0.4\"\n      }\n    }\n  },\n  \"SizeRootFs\" : 5,\n  \"Command\" : \"Command\",\n  \"State\" : \"State\",\n  \"HostConfig\" : {\n    \"NetworkMode\" : \"NetworkMode\"\n  },\n  \"ImageID\" : \"ImageID\",\n  \"Id\" : \"Id\"\n}, {\n  \"Status\" : \"Status\",\n  \"Mounts\" : [ {\n    \"BindOptions\" : {\n      \"Propagation\" : \"private\"\n    },\n    \"ReadOnly\" : true,\n    \"Target\" : \"Target\",\n    \"Type\" : \"bind\",\n    \"VolumeOptions\" : {\n      \"NoCopy\" : false,\n      \"DriverConfig\" : {\n        \"Options\" : {\n          \"key\" : \"Options\"\n        },\n        \"Name\" : \"Name\"\n      },\n      \"Labels\" : {\n        \"key\" : \"Labels\"\n      }\n    },\n    \"Consistency\" : \"Consistency\",\n    \"TmpfsOptions\" : {\n      \"Mode\" : 6,\n      \"SizeBytes\" : 1\n    },\n    \"Source\" : \"Source\"\n  }, {\n    \"BindOptions\" : {\n      \"Propagation\" : \"private\"\n    },\n    \"ReadOnly\" : true,\n    \"Target\" : \"Target\",\n    \"Type\" : \"bind\",\n    \"VolumeOptions\" : {\n      \"NoCopy\" : false,\n      \"DriverConfig\" : {\n        \"Options\" : {\n          \"key\" : \"Options\"\n        },\n        \"Name\" : \"Name\"\n      },\n      \"Labels\" : {\n        \"key\" : \"Labels\"\n      }\n    },\n    \"Consistency\" : \"Consistency\",\n    \"TmpfsOptions\" : {\n      \"Mode\" : 6,\n      \"SizeBytes\" : 1\n    },\n    \"Source\" : \"Source\"\n  } ],\n  \"SizeRw\" : 5,\n  \"Ports\" : [ {\n    \"PrivatePort\" : 8080,\n    \"PublicPort\" : 80,\n    \"Type\" : \"tcp\"\n  }, {\n    \"PrivatePort\" : 8080,\n    \"PublicPort\" : 80,\n    \"Type\" : \"tcp\"\n  } ],\n  \"Labels\" : {\n    \"key\" : \"Labels\"\n  },\n  \"Image\" : \"Image\",\n  \"Created\" : 0,\n  \"Names\" : [ \"Names\", \"Names\" ],\n  \"NetworkSettings\" : {\n    \"Networks\" : {\n      \"key\" : {\n        \"GlobalIPv6Address\" : \"2001:db8::5689\",\n        \"GlobalIPv6PrefixLen\" : 64,\n        \"IPPrefixLen\" : 16,\n        \"Aliases\" : [ \"server_x\", \"server_y\" ],\n        \"MacAddress\" : \"02:42:ac:11:00:04\",\n        \"NetworkID\" : \"08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a\",\n        \"IPAMConfig\" : {\n          \"LinkLocalIPs\" : [ \"169.254.34.68\", \"fe80::3468\" ],\n          \"IPv6Address\" : \"2001:db8:abcd::3033\",\n          \"IPv4Address\" : \"172.20.30.33\"\n        },\n        \"DriverOpts\" : {\n          \"com.example.some-label\" : \"some-value\",\n          \"com.example.some-other-label\" : \"some-other-value\"\n        },\n        \"Gateway\" : \"172.17.0.1\",\n        \"EndpointID\" : \"b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b\",\n        \"Links\" : [ \"container_1\", \"container_2\" ],\n        \"IPv6Gateway\" : \"2001:db8:2::100\",\n        \"IPAddress\" : \"172.17.0.4\"\n      }\n    }\n  },\n  \"SizeRootFs\" : 5,\n  \"Command\" : \"Command\",\n  \"State\" : \"State\",\n  \"HostConfig\" : {\n    \"NetworkMode\" : \"NetworkMode\"\n  },\n  \"ImageID\" : \"ImageID\",\n  \"Id\" : \"Id\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ContainerSummaryInner>>(exampleJson)
            : default(List<ContainerSummaryInner>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get container logs
        /// </summary>
        /// <remarks>Get &#x60;stdout&#x60; and &#x60;stderr&#x60; logs from a container.  Note: This endpoint works only for containers with the &#x60;json-file&#x60; or &#x60;journald&#x60; logging driver. </remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="follow">Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach). </param>
        /// <param name="stdout">Return logs from &#x60;stdout&#x60;</param>
        /// <param name="stderr">Return logs from &#x60;stderr&#x60;</param>
        /// <param name="since">Only return logs since this time, as a UNIX timestamp</param>
        /// <param name="timestamps">Add timestamps to every log line</param>
        /// <param name="tail">Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines.</param>
        /// <response code="101">logs returned as a stream</response>
        /// <response code="200">logs returned as a string in response body</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/containers/{id}/logs")]
        [ValidateModelState]
        [SwaggerOperation("ContainerLogs")]
        [SwaggerResponse(statusCode: 101, type: typeof(System.IO.Stream), description: "logs returned as a stream")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "logs returned as a string in response body")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerLogs([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "follow")]bool? follow, [FromQuery (Name = "stdout")]bool? stdout, [FromQuery (Name = "stderr")]bool? stderr, [FromQuery (Name = "since")]int? since, [FromQuery (Name = "timestamps")]bool? timestamps, [FromQuery (Name = "tail")]string tail)
        {

            //TODO: Uncomment the next line to return response 101 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(101, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Pause a container
        /// </summary>
        /// <remarks>Use the cgroups freezer to suspend all processes in a container.  Traditionally, when suspending a process the &#x60;SIGSTOP&#x60; signal is used, which is observable by the process being suspended. With the cgroups freezer the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. </remarks>
        /// <param name="id">ID or name of the container</param>
        /// <response code="204">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/pause")]
        [ValidateModelState]
        [SwaggerOperation("ContainerPause")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerPause([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete stopped containers
        /// </summary>
        /// <param name="filters">Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. </param>
        /// <response code="200">No error</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/containers/prune")]
        [ValidateModelState]
        [SwaggerOperation("ContainerPrune")]
        [SwaggerResponse(statusCode: 200, type: typeof(ContainerPrune200Response), description: "No error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ContainerPrune([FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContainerPrune200Response));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"SpaceReclaimed\" : 0,\n  \"ContainersDeleted\" : [ \"ContainersDeleted\", \"ContainersDeleted\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ContainerPrune200Response>(exampleJson)
            : default(ContainerPrune200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Rename a container
        /// </summary>
        /// <param name="id">ID or name of the container</param>
        /// <param name="name">New name for the container</param>
        /// <response code="204">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="409">name already in use</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/rename")]
        [ValidateModelState]
        [SwaggerOperation("ContainerRename")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "name already in use")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerRename([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "name")][Required()]string name)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Resize a container TTY
        /// </summary>
        /// <remarks>Resize the TTY for a container. You must restart the container for the resize to take effect.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="h">Height of the tty session in characters</param>
        /// <param name="w">Width of the tty session in characters</param>
        /// <response code="200">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="500">cannot resize container</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/resize")]
        [ValidateModelState]
        [SwaggerOperation("ContainerResize")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "cannot resize container")]
        public virtual IActionResult ContainerResize([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "h")]int? h, [FromQuery (Name = "w")]int? w)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Restart a container
        /// </summary>
        /// <param name="id">ID or name of the container</param>
        /// <param name="t">Number of seconds to wait before killing the container</param>
        /// <response code="204">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/restart")]
        [ValidateModelState]
        [SwaggerOperation("ContainerRestart")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerRestart([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "t")]int? t)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Start a container
        /// </summary>
        /// <param name="id">ID or name of the container</param>
        /// <param name="detachKeys">Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;.</param>
        /// <response code="204">no error</response>
        /// <response code="304">container already started</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/start")]
        [ValidateModelState]
        [SwaggerOperation("ContainerStart")]
        [SwaggerResponse(statusCode: 304, type: typeof(ErrorResponse), description: "container already started")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerStart([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "detachKeys")]string detachKeys)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 304 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(304, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get container stats based on resource usage
        /// </summary>
        /// <remarks>This endpoint returns a live stream of a container’s resource usage statistics.  The &#x60;precpu_stats&#x60; is the CPU statistic of last read, which is used for calculating the CPU usage percentage. It is not the same as the &#x60;cpu_stats&#x60; field.  If either &#x60;precpu_stats.online_cpus&#x60; or &#x60;cpu_stats.online_cpus&#x60; is nil then for compatibility with older daemons the length of the corresponding &#x60;cpu_usage.percpu_usage&#x60; array should be used. </remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="stream">Stream the output. If false, the stats will be output once and then it will disconnect.</param>
        /// <response code="200">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/containers/{id}/stats")]
        [ValidateModelState]
        [SwaggerOperation("ContainerStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "no error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerStats([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "stream")]bool? stream)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Stop a container
        /// </summary>
        /// <param name="id">ID or name of the container</param>
        /// <param name="t">Number of seconds to wait before killing the container</param>
        /// <response code="204">no error</response>
        /// <response code="304">container already stopped</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/stop")]
        [ValidateModelState]
        [SwaggerOperation("ContainerStop")]
        [SwaggerResponse(statusCode: 304, type: typeof(ErrorResponse), description: "container already stopped")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerStop([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "t")]int? t)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 304 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(304, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// List processes running inside a container
        /// </summary>
        /// <remarks>On Unix systems, this is done by running the &#x60;ps&#x60; command. This endpoint is not supported on Windows.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="psArgs">The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;</param>
        /// <response code="200">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/containers/{id}/top")]
        [ValidateModelState]
        [SwaggerOperation("ContainerTop")]
        [SwaggerResponse(statusCode: 200, type: typeof(ContainerTop200Response), description: "no error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerTop([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "ps_args")]string psArgs)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContainerTop200Response));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Processes\" : [ [ \"Processes\", \"Processes\" ], [ \"Processes\", \"Processes\" ] ],\n  \"Titles\" : [ \"Titles\", \"Titles\" ]\n}";
            exampleJson = "Custom MIME type example not yet supported: text/plain";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ContainerTop200Response>(exampleJson)
            : default(ContainerTop200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Unpause a container
        /// </summary>
        /// <remarks>Resume a container which has been paused.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <response code="204">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/unpause")]
        [ValidateModelState]
        [SwaggerOperation("ContainerUnpause")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerUnpause([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Update a container
        /// </summary>
        /// <remarks>Change various configuration options of a container without having to recreate it.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="containerUpdateRequest"></param>
        /// <response code="200">The container has been updated.</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ContainerUpdate")]
        [SwaggerResponse(statusCode: 200, type: typeof(ContainerUpdate200Response), description: "The container has been updated.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerUpdate([FromRoute (Name = "id")][Required]string id, [FromBody]ContainerUpdateRequest containerUpdateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContainerUpdate200Response));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Warnings\" : [ \"Warnings\", \"Warnings\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ContainerUpdate200Response>(exampleJson)
            : default(ContainerUpdate200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Wait for a container
        /// </summary>
        /// <remarks>Block until a container stops, then returns the exit code.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="condition">Wait until a container state reaches the given condition, either &#39;not-running&#39; (default), &#39;next-exit&#39;, or &#39;removed&#39;.</param>
        /// <response code="200">The container has exit.</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/wait")]
        [ValidateModelState]
        [SwaggerOperation("ContainerWait")]
        [SwaggerResponse(statusCode: 200, type: typeof(ContainerWait200Response), description: "The container has exit.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ContainerWait([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "condition")]string condition)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContainerWait200Response));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"StatusCode\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ContainerWait200Response>(exampleJson)
            : default(ContainerWait200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Extract an archive of files or folders to a directory in a container
        /// </summary>
        /// <remarks>Upload a tar archive to be extracted to a path in the filesystem of container id.</remarks>
        /// <param name="id">ID or name of the container</param>
        /// <param name="path">Path to a directory in the container to extract the archive’s contents into. </param>
        /// <param name="body">The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.</param>
        /// <param name="noOverwriteDirNonDir">If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa.</param>
        /// <response code="200">The content was extracted successfully</response>
        /// <response code="400">Bad parameter</response>
        /// <response code="403">Permission denied, the volume or container rootfs is marked as read-only.</response>
        /// <response code="404">No such container or path does not exist inside the container</response>
        /// <response code="500">Server error</response>
        [HttpPut]
        [Route("/v1.33/containers/{id}/archive")]
        [Consumes("application/octet-stream", "application/x-tar")]
        [ValidateModelState]
        [SwaggerOperation("PutContainerArchive")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad parameter")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Permission denied, the volume or container rootfs is marked as read-only.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such container or path does not exist inside the container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult PutContainerArchive([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "path")][Required()]string path, [FromBody]string body, [FromQuery (Name = "noOverwriteDirNonDir")]string noOverwriteDirNonDir)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }
    }
}
