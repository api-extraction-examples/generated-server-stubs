/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VolumeApiController : ControllerBase
    { 
        /// <summary>
        /// Create a volume
        /// </summary>
        /// <param name="volumeCreateRequest">Volume configuration</param>
        /// <response code="201">The volume was created successfully</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/volumes/create")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("VolumeCreate")]
        [SwaggerResponse(statusCode: 201, type: typeof(Volume), description: "The volume was created successfully")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult VolumeCreate([FromBody]VolumeCreateRequest volumeCreateRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Volume));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedAt\" : \"2016-06-07T20:31:11.853781916Z\",\n  \"Driver\" : \"custom\",\n  \"Labels\" : {\n    \"com.example.some-label\" : \"some-value\",\n    \"com.example.some-other-label\" : \"some-other-value\"\n  },\n  \"Mountpoint\" : \"/var/lib/docker/volumes/tardis\",\n  \"Name\" : \"tardis\",\n  \"Scope\" : \"local\",\n  \"Status\" : {\n    \"hello\" : \"world\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Volume>(exampleJson)
            : default(Volume);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove a volume
        /// </summary>
        /// <remarks>Instruct the driver to remove the volume.</remarks>
        /// <param name="name">Volume name or ID</param>
        /// <param name="force">Force the removal of the volume</param>
        /// <response code="204">The volume was removed</response>
        /// <response code="404">No such volume or volume driver</response>
        /// <response code="409">Volume is in use and cannot be removed</response>
        /// <response code="500">Server error</response>
        [HttpDelete]
        [Route("/v1.33/volumes/{name}")]
        [ValidateModelState]
        [SwaggerOperation("VolumeDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such volume or volume driver")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Volume is in use and cannot be removed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult VolumeDelete([FromRoute (Name = "name")][Required]string name, [FromQuery (Name = "force")]bool? force)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Inspect a volume
        /// </summary>
        /// <param name="name">Volume name or ID</param>
        /// <response code="200">No error</response>
        /// <response code="404">No such volume</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/v1.33/volumes/{name}")]
        [ValidateModelState]
        [SwaggerOperation("VolumeInspect")]
        [SwaggerResponse(statusCode: 200, type: typeof(Volume), description: "No error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such volume")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult VolumeInspect([FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Volume));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedAt\" : \"2016-06-07T20:31:11.853781916Z\",\n  \"Driver\" : \"custom\",\n  \"Labels\" : {\n    \"com.example.some-label\" : \"some-value\",\n    \"com.example.some-other-label\" : \"some-other-value\"\n  },\n  \"Mountpoint\" : \"/var/lib/docker/volumes/tardis\",\n  \"Name\" : \"tardis\",\n  \"Scope\" : \"local\",\n  \"Status\" : {\n    \"hello\" : \"world\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Volume>(exampleJson)
            : default(Volume);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List volumes
        /// </summary>
        /// <param name="filters">JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. </param>
        /// <response code="200">Summary volume data that matches the query</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/v1.33/volumes")]
        [ValidateModelState]
        [SwaggerOperation("VolumeList")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumeList200Response), description: "Summary volume data that matches the query")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult VolumeList([FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumeList200Response));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Volumes\" : [ {\n    \"CreatedAt\" : \"2016-06-07T20:31:11.853781916Z\",\n    \"Driver\" : \"custom\",\n    \"Labels\" : {\n      \"com.example.some-label\" : \"some-value\",\n      \"com.example.some-other-label\" : \"some-other-value\"\n    },\n    \"Mountpoint\" : \"/var/lib/docker/volumes/tardis\",\n    \"Name\" : \"tardis\",\n    \"Scope\" : \"local\",\n    \"Status\" : {\n      \"hello\" : \"world\"\n    }\n  }, {\n    \"CreatedAt\" : \"2016-06-07T20:31:11.853781916Z\",\n    \"Driver\" : \"custom\",\n    \"Labels\" : {\n      \"com.example.some-label\" : \"some-value\",\n      \"com.example.some-other-label\" : \"some-other-value\"\n    },\n    \"Mountpoint\" : \"/var/lib/docker/volumes/tardis\",\n    \"Name\" : \"tardis\",\n    \"Scope\" : \"local\",\n    \"Status\" : {\n      \"hello\" : \"world\"\n    }\n  } ],\n  \"Warnings\" : [ \"Warnings\", \"Warnings\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumeList200Response>(exampleJson)
            : default(VolumeList200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete unused volumes
        /// </summary>
        /// <param name="filters">Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. </param>
        /// <response code="200">No error</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/volumes/prune")]
        [ValidateModelState]
        [SwaggerOperation("VolumePrune")]
        [SwaggerResponse(statusCode: 200, type: typeof(VolumePrune200Response), description: "No error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult VolumePrune([FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VolumePrune200Response));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"SpaceReclaimed\" : 0,\n  \"VolumesDeleted\" : [ \"VolumesDeleted\", \"VolumesDeleted\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VolumePrune200Response>(exampleJson)
            : default(VolumePrune200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
