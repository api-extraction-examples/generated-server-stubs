/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NetworkApiController : ControllerBase
    { 
        /// <summary>
        /// Connect a container to a network
        /// </summary>
        /// <param name="id">Network ID or name</param>
        /// <param name="networkConnectRequest"></param>
        /// <response code="200">No error</response>
        /// <response code="403">Operation not supported for swarm scoped networks</response>
        /// <response code="404">Network or container not found</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/networks/{id}/connect")]
        [Consumes("application/octet-stream")]
        [ValidateModelState]
        [SwaggerOperation("NetworkConnect")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Operation not supported for swarm scoped networks")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Network or container not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult NetworkConnect([FromRoute (Name = "id")][Required]string id, [FromBody]NetworkConnectRequest networkConnectRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Create a network
        /// </summary>
        /// <param name="networkCreateRequest">Network configuration</param>
        /// <response code="201">No error</response>
        /// <response code="403">operation not supported for pre-defined networks</response>
        /// <response code="404">plugin not found</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/networks/create")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("NetworkCreate")]
        [SwaggerResponse(statusCode: 201, type: typeof(NetworkCreate201Response), description: "No error")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "operation not supported for pre-defined networks")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "plugin not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult NetworkCreate([FromBody]NetworkCreateRequest networkCreateRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(NetworkCreate201Response));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Id\" : \"22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30\",\n  \"Warning\" : \"\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NetworkCreate201Response>(exampleJson)
            : default(NetworkCreate201Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove a network
        /// </summary>
        /// <param name="id">Network ID or name</param>
        /// <response code="204">No error</response>
        /// <response code="403">operation not supported for pre-defined networks</response>
        /// <response code="404">no such network</response>
        /// <response code="500">Server error</response>
        [HttpDelete]
        [Route("/v1.33/networks/{id}")]
        [ValidateModelState]
        [SwaggerOperation("NetworkDelete")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "operation not supported for pre-defined networks")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such network")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult NetworkDelete([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Disconnect a container from a network
        /// </summary>
        /// <param name="id">Network ID or name</param>
        /// <param name="networkDisconnectRequest"></param>
        /// <response code="200">No error</response>
        /// <response code="403">Operation not supported for swarm scoped networks</response>
        /// <response code="404">Network or container not found</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/networks/{id}/disconnect")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("NetworkDisconnect")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Operation not supported for swarm scoped networks")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Network or container not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult NetworkDisconnect([FromRoute (Name = "id")][Required]string id, [FromBody]NetworkDisconnectRequest networkDisconnectRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Inspect a network
        /// </summary>
        /// <param name="id">Network ID or name</param>
        /// <param name="verbose">Detailed inspect output for troubleshooting</param>
        /// <param name="scope">Filter the network by scope (swarm, global, or local)</param>
        /// <response code="200">No error</response>
        /// <response code="404">Network not found</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/v1.33/networks/{id}")]
        [ValidateModelState]
        [SwaggerOperation("NetworkInspect")]
        [SwaggerResponse(statusCode: 200, type: typeof(Network), description: "No error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Network not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult NetworkInspect([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "verbose")]bool? verbose, [FromQuery (Name = "scope")]string scope)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Network));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Attachable\" : false,\n  \"Containers\" : {\n    \"19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c\" : {\n      \"EndpointID\" : \"628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a\",\n      \"IPv4Address\" : \"172.19.0.2/16\",\n      \"IPv6Address\" : \"\",\n      \"MacAddress\" : \"02:42:ac:13:00:02\",\n      \"Name\" : \"test\"\n    }\n  },\n  \"Created\" : \"2016-10-19T04:33:30.360899459Z\",\n  \"Driver\" : \"bridge\",\n  \"EnableIPv6\" : false,\n  \"IPAM\" : {\n    \"Config\" : [ {\n      \"Gateway\" : \"172.19.0.1\",\n      \"Subnet\" : \"172.19.0.0/16\"\n    } ],\n    \"Driver\" : \"default\",\n    \"Options\" : {\n      \"foo\" : \"bar\"\n    }\n  },\n  \"Id\" : \"7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99\",\n  \"Ingress\" : false,\n  \"Internal\" : false,\n  \"Labels\" : {\n    \"com.example.some-label\" : \"some-value\",\n    \"com.example.some-other-label\" : \"some-other-value\"\n  },\n  \"Name\" : \"net01\",\n  \"Options\" : {\n    \"com.docker.network.bridge.default_bridge\" : \"true\",\n    \"com.docker.network.bridge.enable_icc\" : \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\" : \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\" : \"0.0.0.0\",\n    \"com.docker.network.bridge.name\" : \"docker0\",\n    \"com.docker.network.driver.mtu\" : \"1500\"\n  },\n  \"Scope\" : \"local\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Network>(exampleJson)
            : default(Network);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List networks
        /// </summary>
        /// <remarks>Returns a list of networks. For details on the format, see [the network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. </remarks>
        /// <param name="filters">JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list. Available filters:  - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks. </param>
        /// <response code="200">No error</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/v1.33/networks")]
        [ValidateModelState]
        [SwaggerOperation("NetworkList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Network>), description: "No error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult NetworkList([FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Network>));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Attachable\" : false,\n  \"Containers\" : {\n    \"19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c\" : {\n      \"EndpointID\" : \"628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a\",\n      \"IPv4Address\" : \"172.19.0.2/16\",\n      \"IPv6Address\" : \"\",\n      \"MacAddress\" : \"02:42:ac:13:00:02\",\n      \"Name\" : \"test\"\n    }\n  },\n  \"Created\" : \"2016-10-19T04:33:30.360899459Z\",\n  \"Driver\" : \"bridge\",\n  \"EnableIPv6\" : false,\n  \"IPAM\" : {\n    \"Config\" : [ {\n      \"Gateway\" : \"172.19.0.1\",\n      \"Subnet\" : \"172.19.0.0/16\"\n    } ],\n    \"Driver\" : \"default\",\n    \"Options\" : {\n      \"foo\" : \"bar\"\n    }\n  },\n  \"Id\" : \"7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99\",\n  \"Ingress\" : false,\n  \"Internal\" : false,\n  \"Labels\" : {\n    \"com.example.some-label\" : \"some-value\",\n    \"com.example.some-other-label\" : \"some-other-value\"\n  },\n  \"Name\" : \"net01\",\n  \"Options\" : {\n    \"com.docker.network.bridge.default_bridge\" : \"true\",\n    \"com.docker.network.bridge.enable_icc\" : \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\" : \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\" : \"0.0.0.0\",\n    \"com.docker.network.bridge.name\" : \"docker0\",\n    \"com.docker.network.driver.mtu\" : \"1500\"\n  },\n  \"Scope\" : \"local\"\n}, {\n  \"Attachable\" : false,\n  \"Containers\" : {\n    \"19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c\" : {\n      \"EndpointID\" : \"628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a\",\n      \"IPv4Address\" : \"172.19.0.2/16\",\n      \"IPv6Address\" : \"\",\n      \"MacAddress\" : \"02:42:ac:13:00:02\",\n      \"Name\" : \"test\"\n    }\n  },\n  \"Created\" : \"2016-10-19T04:33:30.360899459Z\",\n  \"Driver\" : \"bridge\",\n  \"EnableIPv6\" : false,\n  \"IPAM\" : {\n    \"Config\" : [ {\n      \"Gateway\" : \"172.19.0.1\",\n      \"Subnet\" : \"172.19.0.0/16\"\n    } ],\n    \"Driver\" : \"default\",\n    \"Options\" : {\n      \"foo\" : \"bar\"\n    }\n  },\n  \"Id\" : \"7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99\",\n  \"Ingress\" : false,\n  \"Internal\" : false,\n  \"Labels\" : {\n    \"com.example.some-label\" : \"some-value\",\n    \"com.example.some-other-label\" : \"some-other-value\"\n  },\n  \"Name\" : \"net01\",\n  \"Options\" : {\n    \"com.docker.network.bridge.default_bridge\" : \"true\",\n    \"com.docker.network.bridge.enable_icc\" : \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\" : \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\" : \"0.0.0.0\",\n    \"com.docker.network.bridge.name\" : \"docker0\",\n    \"com.docker.network.driver.mtu\" : \"1500\"\n  },\n  \"Scope\" : \"local\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Network>>(exampleJson)
            : default(List<Network>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete unused networks
        /// </summary>
        /// <param name="filters">Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. </param>
        /// <response code="200">No error</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/networks/prune")]
        [ValidateModelState]
        [SwaggerOperation("NetworkPrune")]
        [SwaggerResponse(statusCode: 200, type: typeof(NetworkPrune200Response), description: "No error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult NetworkPrune([FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NetworkPrune200Response));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"NetworksDeleted\" : [ \"NetworksDeleted\", \"NetworksDeleted\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NetworkPrune200Response>(exampleJson)
            : default(NetworkPrune200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
