/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ImageApiController : ControllerBase
    { 
        /// <summary>
        /// Delete builder cache
        /// </summary>
        /// <response code="200">No error</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/build/prune")]
        [ValidateModelState]
        [SwaggerOperation("BuildPrune")]
        [SwaggerResponse(statusCode: 200, type: typeof(BuildPrune200Response), description: "No error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult BuildPrune()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BuildPrune200Response));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"SpaceReclaimed\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BuildPrune200Response>(exampleJson)
            : default(BuildPrune200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Build an image
        /// </summary>
        /// <remarks>Build an image from a tar archive with a &#x60;Dockerfile&#x60; in it.  The &#x60;Dockerfile&#x60; specifies how the image is built from the tar archive. It is typically in the archive&#39;s root, but can be at a different path or have a different name by specifying the &#x60;dockerfile&#x60; parameter. [See the &#x60;Dockerfile&#x60; reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the &#x60;Dockerfile&#x60; before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. </remarks>
        /// <param name="dockerfile">Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.</param>
        /// <param name="t">A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.</param>
        /// <param name="extrahosts">Extra hosts to add to /etc/hosts</param>
        /// <param name="remote">A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the fileâ€™s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.</param>
        /// <param name="q">Suppress verbose build output.</param>
        /// <param name="nocache">Do not use the cache when building the image.</param>
        /// <param name="cachefrom">JSON array of images used for build cache resolution.</param>
        /// <param name="pull">Attempt to pull the image even if an older image exists locally.</param>
        /// <param name="rm">Remove intermediate containers after a successful build.</param>
        /// <param name="forcerm">Always remove intermediate containers, even upon failure.</param>
        /// <param name="memory">Set memory limit for build.</param>
        /// <param name="memswap">Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.</param>
        /// <param name="cpushares">CPU shares (relative weight).</param>
        /// <param name="cpusetcpus">CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).</param>
        /// <param name="cpuperiod">The length of a CPU period in microseconds.</param>
        /// <param name="cpuquota">Microseconds of CPU time that the container can get in a CPU period.</param>
        /// <param name="buildargs">JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values. [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg)</param>
        /// <param name="shmsize">Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.</param>
        /// <param name="squash">Squash the resulting images layers into a single layer. *(Experimental release only.)*</param>
        /// <param name="labels">Arbitrary key/value labels to set on the image, as a JSON map of string pairs.</param>
        /// <param name="networkmode">Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to which this container should connect to.</param>
        /// <param name="contentType"></param>
        /// <param name="xRegistryConfig">This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. </param>
        /// <param name="body">A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.</param>
        /// <response code="200">no error</response>
        /// <response code="400">Bad parameter</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/build")]
        [Consumes("application/octet-stream")]
        [ValidateModelState]
        [SwaggerOperation("ImageBuild")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad parameter")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ImageBuild([FromQuery (Name = "dockerfile")]string dockerfile, [FromQuery (Name = "t")]string t, [FromQuery (Name = "extrahosts")]string extrahosts, [FromQuery (Name = "remote")]string remote, [FromQuery (Name = "q")]bool? q, [FromQuery (Name = "nocache")]bool? nocache, [FromQuery (Name = "cachefrom")]string cachefrom, [FromQuery (Name = "pull")]string pull, [FromQuery (Name = "rm")]bool? rm, [FromQuery (Name = "forcerm")]bool? forcerm, [FromQuery (Name = "memory")]int? memory, [FromQuery (Name = "memswap")]int? memswap, [FromQuery (Name = "cpushares")]int? cpushares, [FromQuery (Name = "cpusetcpus")]string cpusetcpus, [FromQuery (Name = "cpuperiod")]int? cpuperiod, [FromQuery (Name = "cpuquota")]int? cpuquota, [FromQuery (Name = "buildargs")]int? buildargs, [FromQuery (Name = "shmsize")]int? shmsize, [FromQuery (Name = "squash")]bool? squash, [FromQuery (Name = "labels")]string labels, [FromQuery (Name = "networkmode")]string networkmode, [FromHeader (Name = "Content-type")]string contentType, [FromHeader (Name = "X-Registry-Config")]string xRegistryConfig, [FromBody]System.IO.Stream body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Create a new image from a container
        /// </summary>
        /// <param name="container">The ID or name of the container to commit</param>
        /// <param name="repo">Repository name for the created image</param>
        /// <param name="tag">Tag name for the create image</param>
        /// <param name="comment">Commit message</param>
        /// <param name="author">Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)</param>
        /// <param name="pause">Whether to pause the container before committing</param>
        /// <param name="changes">&#x60;Dockerfile&#x60; instructions to apply while committing</param>
        /// <param name="containerConfig">The container configuration</param>
        /// <response code="201">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/commit")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ImageCommit")]
        [SwaggerResponse(statusCode: 201, type: typeof(IdResponse), description: "no error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ImageCommit([FromQuery (Name = "container")]string container, [FromQuery (Name = "repo")]string repo, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "comment")]string comment, [FromQuery (Name = "author")]string author, [FromQuery (Name = "pause")]bool? pause, [FromQuery (Name = "changes")]string changes, [FromBody]ContainerConfig containerConfig)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(IdResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Id\" : \"Id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<IdResponse>(exampleJson)
            : default(IdResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create an image
        /// </summary>
        /// <remarks>Create an image by either pulling it from a registry or importing it.</remarks>
        /// <param name="fromImage">Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.</param>
        /// <param name="fromSrc">Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.</param>
        /// <param name="repo">Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.</param>
        /// <param name="tag">Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.</param>
        /// <param name="xRegistryAuth">A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication)</param>
        /// <param name="body">Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter</param>
        /// <response code="200">no error</response>
        /// <response code="404">repository does not exist or no read access</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/images/create")]
        [Consumes("application/octet-stream", "text/plain")]
        [ValidateModelState]
        [SwaggerOperation("ImageCreate")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "repository does not exist or no read access")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ImageCreate([FromQuery (Name = "fromImage")]string fromImage, [FromQuery (Name = "fromSrc")]string fromSrc, [FromQuery (Name = "repo")]string repo, [FromQuery (Name = "tag")]string tag, [FromHeader (Name = "X-Registry-Auth")]string xRegistryAuth, [FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Remove an image
        /// </summary>
        /// <remarks>Remove an image, along with any untagged parent images that were referenced by that image.  Images can&#39;t be removed if they have descendant images, are being used by a running container or are being used by a build. </remarks>
        /// <param name="name">Image name or ID</param>
        /// <param name="force">Remove the image even if it is being used by stopped containers or has other tags</param>
        /// <param name="noprune">Do not delete untagged parent images</param>
        /// <response code="200">The image was deleted successfully</response>
        /// <response code="404">No such image</response>
        /// <response code="409">Conflict</response>
        /// <response code="500">Server error</response>
        [HttpDelete]
        [Route("/v1.33/images/{name}")]
        [ValidateModelState]
        [SwaggerOperation("ImageDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ImageDeleteResponseItem>), description: "The image was deleted successfully")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such image")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Conflict")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ImageDelete([FromRoute (Name = "name")][Required]string name, [FromQuery (Name = "force")]bool? force, [FromQuery (Name = "noprune")]bool? noprune)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ImageDeleteResponseItem>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Deleted\" : \"Deleted\",\n  \"Untagged\" : \"Untagged\"\n}, {\n  \"Deleted\" : \"Deleted\",\n  \"Untagged\" : \"Untagged\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ImageDeleteResponseItem>>(exampleJson)
            : default(List<ImageDeleteResponseItem>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Export an image
        /// </summary>
        /// <remarks>Get a tarball containing all images and metadata for a repository.  If &#x60;name&#x60; is a specific name and tag (e.g. &#x60;ubuntu:latest&#x60;), then only that image (and its parents) are returned. If &#x60;name&#x60; is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the &#x60;repositories&#x60; file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - &#x60;VERSION&#x60;: currently &#x60;1.0&#x60; - the file format version - &#x60;json&#x60;: detailed layer information, similar to &#x60;docker inspect layer_id&#x60; - &#x60;layer.tar&#x60;: A tarfile containing the filesystem changes in this layer  The &#x60;layer.tar&#x60; file contains &#x60;aufs&#x60; style &#x60;.wh..wh.aufs&#x60; files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a &#x60;repositories&#x60; file at the root that contains a list of repository and tag names mapped to layer IDs.  &#x60;&#x60;&#x60;json {   \&quot;hello-world\&quot;: {     \&quot;latest\&quot;: \&quot;565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\&quot;   } } &#x60;&#x60;&#x60; </remarks>
        /// <param name="name">Image name or ID</param>
        /// <response code="200">no error</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/images/{name}/get")]
        [ValidateModelState]
        [SwaggerOperation("ImageGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "no error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ImageGet([FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Export several images
        /// </summary>
        /// <remarks>Get a tarball containing all images and metadata for several image repositories.  For each value of the &#x60;names&#x60; parameter: if it is a specific name and tag (e.g. &#x60;ubuntu:latest&#x60;), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the &#39;repositories&#39; file for this image ID.  For details on the format, see [the export image endpoint](#operation/ImageGet). </remarks>
        /// <param name="names">Image names to filter by</param>
        /// <response code="200">no error</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/images/get")]
        [ValidateModelState]
        [SwaggerOperation("ImageGetAll")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "no error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ImageGetAll([FromQuery (Name = "names")]List<string> names)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the history of an image
        /// </summary>
        /// <remarks>Return parent layers of an image.</remarks>
        /// <param name="name">Image name or ID</param>
        /// <response code="200">List of image layers</response>
        /// <response code="404">No such image</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/v1.33/images/{name}/history")]
        [ValidateModelState]
        [SwaggerOperation("ImageHistory")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ImageHistory200ResponseInner>), description: "List of image layers")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such image")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ImageHistory([FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ImageHistory200ResponseInner>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Comment\" : \"Comment\",\n  \"CreatedBy\" : \"CreatedBy\",\n  \"Size\" : 6,\n  \"Id\" : \"Id\",\n  \"Tags\" : [ \"Tags\", \"Tags\" ],\n  \"Created\" : 0\n}, {\n  \"Comment\" : \"Comment\",\n  \"CreatedBy\" : \"CreatedBy\",\n  \"Size\" : 6,\n  \"Id\" : \"Id\",\n  \"Tags\" : [ \"Tags\", \"Tags\" ],\n  \"Created\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ImageHistory200ResponseInner>>(exampleJson)
            : default(List<ImageHistory200ResponseInner>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Inspect an image
        /// </summary>
        /// <remarks>Return low-level information about an image.</remarks>
        /// <param name="name">Image name or id</param>
        /// <response code="200">No error</response>
        /// <response code="404">No such image</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/v1.33/images/{name}/json")]
        [ValidateModelState]
        [SwaggerOperation("ImageInspect")]
        [SwaggerResponse(statusCode: 200, type: typeof(Image), description: "No error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such image")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ImageInspect([FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Image));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"RepoDigests\" : [ \"RepoDigests\", \"RepoDigests\" ],\n  \"Comment\" : \"Comment\",\n  \"VirtualSize\" : 6,\n  \"Architecture\" : \"Architecture\",\n  \"Os\" : \"Os\",\n  \"Parent\" : \"Parent\",\n  \"Config\" : {\n    \"User\" : \"User\",\n    \"OpenStdin\" : false,\n    \"Env\" : [ \"Env\", \"Env\" ],\n    \"Image\" : \"Image\",\n    \"StdinOnce\" : false,\n    \"AttachStdout\" : true,\n    \"Shell\" : [ \"Shell\", \"Shell\" ],\n    \"Volumes\" : {\n      \"additionalProperties\" : \"{}\"\n    },\n    \"AttachStdin\" : false,\n    \"Domainname\" : \"Domainname\",\n    \"Tty\" : false,\n    \"Cmd\" : [ \"Cmd\", \"Cmd\" ],\n    \"StopTimeout\" : 5,\n    \"StopSignal\" : \"SIGTERM\",\n    \"Entrypoint\" : [ \"Entrypoint\", \"Entrypoint\" ],\n    \"AttachStderr\" : true,\n    \"ArgsEscaped\" : true,\n    \"Hostname\" : \"Hostname\",\n    \"Labels\" : {\n      \"key\" : \"Labels\"\n    },\n    \"Healthcheck\" : {\n      \"Test\" : [ \"Test\", \"Test\" ],\n      \"Retries\" : 6,\n      \"Timeout\" : 5,\n      \"Interval\" : 0,\n      \"StartPeriod\" : 1\n    },\n    \"MacAddress\" : \"MacAddress\",\n    \"NetworkDisabled\" : true,\n    \"ExposedPorts\" : {\n      \"key\" : \"{}\"\n    },\n    \"WorkingDir\" : \"WorkingDir\",\n    \"OnBuild\" : [ \"OnBuild\", \"OnBuild\" ]\n  },\n  \"Size\" : 0,\n  \"OsVersion\" : \"OsVersion\",\n  \"Metadata\" : {\n    \"LastTagTime\" : \"LastTagTime\"\n  },\n  \"GraphDriver\" : {\n    \"Data\" : {\n      \"key\" : \"Data\"\n    },\n    \"Name\" : \"Name\"\n  },\n  \"Created\" : \"Created\",\n  \"ContainerConfig\" : {\n    \"User\" : \"User\",\n    \"OpenStdin\" : false,\n    \"Env\" : [ \"Env\", \"Env\" ],\n    \"Image\" : \"Image\",\n    \"StdinOnce\" : false,\n    \"AttachStdout\" : true,\n    \"Shell\" : [ \"Shell\", \"Shell\" ],\n    \"Volumes\" : {\n      \"additionalProperties\" : \"{}\"\n    },\n    \"AttachStdin\" : false,\n    \"Domainname\" : \"Domainname\",\n    \"Tty\" : false,\n    \"Cmd\" : [ \"Cmd\", \"Cmd\" ],\n    \"StopTimeout\" : 5,\n    \"StopSignal\" : \"SIGTERM\",\n    \"Entrypoint\" : [ \"Entrypoint\", \"Entrypoint\" ],\n    \"AttachStderr\" : true,\n    \"ArgsEscaped\" : true,\n    \"Hostname\" : \"Hostname\",\n    \"Labels\" : {\n      \"key\" : \"Labels\"\n    },\n    \"Healthcheck\" : {\n      \"Test\" : [ \"Test\", \"Test\" ],\n      \"Retries\" : 6,\n      \"Timeout\" : 5,\n      \"Interval\" : 0,\n      \"StartPeriod\" : 1\n    },\n    \"MacAddress\" : \"MacAddress\",\n    \"NetworkDisabled\" : true,\n    \"ExposedPorts\" : {\n      \"key\" : \"{}\"\n    },\n    \"WorkingDir\" : \"WorkingDir\",\n    \"OnBuild\" : [ \"OnBuild\", \"OnBuild\" ]\n  },\n  \"Container\" : \"Container\",\n  \"RootFS\" : {\n    \"Type\" : \"Type\",\n    \"BaseLayer\" : \"BaseLayer\",\n    \"Layers\" : [ \"Layers\", \"Layers\" ]\n  },\n  \"DockerVersion\" : \"DockerVersion\",\n  \"RepoTags\" : [ \"RepoTags\", \"RepoTags\" ],\n  \"Author\" : \"Author\",\n  \"Id\" : \"Id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Image>(exampleJson)
            : default(Image);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List Images
        /// </summary>
        /// <remarks>Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.</remarks>
        /// <param name="all">Show all images. Only images from a final layer (no children) are shown by default.</param>
        /// <param name="filters">A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) </param>
        /// <param name="digests">Show digest information as a &#x60;RepoDigests&#x60; field on each image.</param>
        /// <response code="200">Summary image data for the images matching the query</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/images/json")]
        [ValidateModelState]
        [SwaggerOperation("ImageList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ImageSummary>), description: "Summary image data for the images matching the query")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ImageList([FromQuery (Name = "all")]bool? all, [FromQuery (Name = "filters")]string filters, [FromQuery (Name = "digests")]bool? digests)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ImageSummary>));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ParentId\" : \"ParentId\",\n  \"RepoDigests\" : [ \"RepoDigests\", \"RepoDigests\" ],\n  \"SharedSize\" : 1,\n  \"VirtualSize\" : 5,\n  \"RepoTags\" : [ \"RepoTags\", \"RepoTags\" ],\n  \"Size\" : 5,\n  \"Containers\" : 0,\n  \"Labels\" : {\n    \"key\" : \"Labels\"\n  },\n  \"Id\" : \"Id\",\n  \"Created\" : 6\n}, {\n  \"ParentId\" : \"ParentId\",\n  \"RepoDigests\" : [ \"RepoDigests\", \"RepoDigests\" ],\n  \"SharedSize\" : 1,\n  \"VirtualSize\" : 5,\n  \"RepoTags\" : [ \"RepoTags\", \"RepoTags\" ],\n  \"Size\" : 5,\n  \"Containers\" : 0,\n  \"Labels\" : {\n    \"key\" : \"Labels\"\n  },\n  \"Id\" : \"Id\",\n  \"Created\" : 6\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ImageSummary>>(exampleJson)
            : default(List<ImageSummary>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Import images
        /// </summary>
        /// <remarks>Load a set of images and tags into a repository.  For details on the format, see [the export image endpoint](#operation/ImageGet). </remarks>
        /// <param name="quiet">Suppress progress details during load.</param>
        /// <param name="body">Tar archive containing images</param>
        /// <response code="200">no error</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1.33/images/load")]
        [Consumes("application/x-tar")]
        [ValidateModelState]
        [SwaggerOperation("ImageLoad")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult ImageLoad([FromQuery (Name = "quiet")]bool? quiet, [FromBody]System.IO.Stream body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete unused images
        /// </summary>
        /// <param name="filters">Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machineâ€™s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. </param>
        /// <response code="200">No error</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/images/prune")]
        [ValidateModelState]
        [SwaggerOperation("ImagePrune")]
        [SwaggerResponse(statusCode: 200, type: typeof(ImagePrune200Response), description: "No error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ImagePrune([FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ImagePrune200Response));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"SpaceReclaimed\" : 0,\n  \"ImagesDeleted\" : [ {\n    \"Deleted\" : \"Deleted\",\n    \"Untagged\" : \"Untagged\"\n  }, {\n    \"Deleted\" : \"Deleted\",\n    \"Untagged\" : \"Untagged\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ImagePrune200Response>(exampleJson)
            : default(ImagePrune200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Push an image
        /// </summary>
        /// <remarks>Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, &#x60;registry.example.com/myimage:latest&#x60;.  The push is cancelled if the HTTP connection is closed. </remarks>
        /// <param name="name">Image name or ID.</param>
        /// <param name="xRegistryAuth">A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication)</param>
        /// <param name="tag">The tag to associate with the image on the registry.</param>
        /// <response code="200">No error</response>
        /// <response code="404">No such image</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/images/{name}/push")]
        [ValidateModelState]
        [SwaggerOperation("ImagePush")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such image")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ImagePush([FromRoute (Name = "name")][Required]string name, [FromHeader (Name = "X-Registry-Auth")][Required()]string xRegistryAuth, [FromQuery (Name = "tag")]string tag)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Search images
        /// </summary>
        /// <remarks>Search for an image on Docker Hub.</remarks>
        /// <param name="term">Term to search</param>
        /// <param name="limit">Maximum number of results to return</param>
        /// <param name="filters">A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars. </param>
        /// <response code="200">No error</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/v1.33/images/search")]
        [ValidateModelState]
        [SwaggerOperation("ImageSearch")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ImageSearch200ResponseInner>), description: "No error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ImageSearch([FromQuery (Name = "term")][Required()]string term, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ImageSearch200ResponseInner>));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"is_official\" : true,\n  \"is_automated\" : true,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"star_count\" : 0\n}, {\n  \"is_official\" : true,\n  \"is_automated\" : true,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"star_count\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ImageSearch200ResponseInner>>(exampleJson)
            : default(List<ImageSearch200ResponseInner>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Tag an image
        /// </summary>
        /// <remarks>Tag an image so that it becomes part of a repository.</remarks>
        /// <param name="name">Image name or ID to tag.</param>
        /// <param name="repo">The repository to tag in. For example, &#x60;someuser/someimage&#x60;.</param>
        /// <param name="tag">The name of the new tag.</param>
        /// <response code="201">No error</response>
        /// <response code="400">Bad parameter</response>
        /// <response code="404">No such image</response>
        /// <response code="409">Conflict</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/images/{name}/tag")]
        [ValidateModelState]
        [SwaggerOperation("ImageTag")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad parameter")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such image")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Conflict")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ImageTag([FromRoute (Name = "name")][Required]string name, [FromQuery (Name = "repo")]string repo, [FromQuery (Name = "tag")]string tag)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }
    }
}
