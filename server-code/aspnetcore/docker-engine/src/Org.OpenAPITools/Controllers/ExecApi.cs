/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ExecApiController : ControllerBase
    { 
        /// <summary>
        /// Create an exec instance
        /// </summary>
        /// <remarks>Run a command inside a running container.</remarks>
        /// <param name="id">ID or name of container</param>
        /// <param name="containerExecRequest">Exec configuration</param>
        /// <response code="201">no error</response>
        /// <response code="404">no such container</response>
        /// <response code="409">container is paused</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/containers/{id}/exec")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ContainerExec")]
        [SwaggerResponse(statusCode: 201, type: typeof(IdResponse), description: "no error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such container")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "container is paused")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ContainerExec([FromRoute (Name = "id")][Required]string id, [FromBody]ContainerExecRequest containerExecRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(IdResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Id\" : \"Id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<IdResponse>(exampleJson)
            : default(IdResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Inspect an exec instance
        /// </summary>
        /// <remarks>Return low-level information about an exec instance.</remarks>
        /// <param name="id">Exec instance ID</param>
        /// <response code="200">No error</response>
        /// <response code="404">No such exec instance</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/v1.33/exec/{id}/json")]
        [ValidateModelState]
        [SwaggerOperation("ExecInspect")]
        [SwaggerResponse(statusCode: 200, type: typeof(ExecInspect200Response), description: "No error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such exec instance")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult ExecInspect([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ExecInspect200Response));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"ProcessConfig\" : {\n    \"privileged\" : true,\n    \"entrypoint\" : \"entrypoint\",\n    \"tty\" : true,\n    \"arguments\" : [ \"arguments\", \"arguments\" ],\n    \"user\" : \"user\"\n  },\n  \"ContainerID\" : \"ContainerID\",\n  \"ExitCode\" : 0,\n  \"OpenStdout\" : true,\n  \"Running\" : true,\n  \"OpenStdin\" : true,\n  \"Pid\" : 6,\n  \"ID\" : \"ID\",\n  \"OpenStderr\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ExecInspect200Response>(exampleJson)
            : default(ExecInspect200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Resize an exec instance
        /// </summary>
        /// <remarks>Resize the TTY session used by an exec instance. This endpoint only works if &#x60;tty&#x60; was specified as part of creating and starting the exec instance.</remarks>
        /// <param name="id">Exec instance ID</param>
        /// <param name="h">Height of the TTY session in characters</param>
        /// <param name="w">Width of the TTY session in characters</param>
        /// <response code="201">No error</response>
        /// <response code="404">No such exec instance</response>
        [HttpPost]
        [Route("/v1.33/exec/{id}/resize")]
        [ValidateModelState]
        [SwaggerOperation("ExecResize")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such exec instance")]
        public virtual IActionResult ExecResize([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "h")]int? h, [FromQuery (Name = "w")]int? w)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Start an exec instance
        /// </summary>
        /// <remarks>Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.</remarks>
        /// <param name="id">Exec instance ID</param>
        /// <param name="execStartRequest"></param>
        /// <response code="200">No error</response>
        /// <response code="404">No such exec instance</response>
        /// <response code="409">Container is stopped or paused</response>
        [HttpPost]
        [Route("/v1.33/exec/{id}/start")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ExecStart")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No such exec instance")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Container is stopped or paused")]
        public virtual IActionResult ExecStart([FromRoute (Name = "id")][Required]string id, [FromBody]ExecStartRequest execStartRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));

            throw new NotImplementedException();
        }
    }
}
