/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SystemApiController : ControllerBase
    { 
        /// <summary>
        /// Check auth configuration
        /// </summary>
        /// <remarks>Validate credentials for a registry and, if available, get an identity token for accessing the registry without password.</remarks>
        /// <param name="authConfig">Authentication to check</param>
        /// <response code="200">An identity token was generated successfully.</response>
        /// <response code="204">No error</response>
        /// <response code="500">Server error</response>
        [HttpPost]
        [Route("/v1.33/auth")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SystemAuth")]
        [SwaggerResponse(statusCode: 200, type: typeof(SystemAuth200Response), description: "An identity token was generated successfully.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult SystemAuth([FromBody]AuthConfig authConfig)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SystemAuth200Response));
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Status\" : \"Status\",\n  \"IdentityToken\" : \"IdentityToken\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SystemAuth200Response>(exampleJson)
            : default(SystemAuth200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get data usage information
        /// </summary>
        /// <response code="200">no error</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/system/df")]
        [ValidateModelState]
        [SwaggerOperation("SystemDataUsage")]
        [SwaggerResponse(statusCode: 200, type: typeof(SystemDataUsage200Response), description: "no error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult SystemDataUsage()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SystemDataUsage200Response));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Containers\" : [ {\n    \"Command\" : \"top\",\n    \"Created\" : 1472592424,\n    \"HostConfig\" : {\n      \"NetworkMode\" : \"default\"\n    },\n    \"Id\" : \"e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148\",\n    \"Image\" : \"busybox\",\n    \"ImageID\" : \"sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749\",\n    \"Labels\" : { },\n    \"Mounts\" : [ ],\n    \"Names\" : [ \"/top\" ],\n    \"NetworkSettings\" : {\n      \"Networks\" : {\n        \"bridge\" : {\n          \"Aliases\" : null,\n          \"EndpointID\" : \"8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a\",\n          \"Gateway\" : \"172.18.0.1\",\n          \"GlobalIPv6Address\" : \"\",\n          \"GlobalIPv6PrefixLen\" : 0,\n          \"IPAMConfig\" : null,\n          \"IPAddress\" : \"172.18.0.2\",\n          \"IPPrefixLen\" : 16,\n          \"IPv6Gateway\" : \"\",\n          \"Links\" : null,\n          \"MacAddress\" : \"02:42:ac:12:00:02\",\n          \"NetworkID\" : \"d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92\"\n        }\n      }\n    },\n    \"Ports\" : [ ],\n    \"SizeRootFs\" : 1092588,\n    \"State\" : \"exited\",\n    \"Status\" : \"Exited (0) 56 minutes ago\"\n  } ],\n  \"Images\" : [ {\n    \"Containers\" : 1,\n    \"Created\" : 1466724217,\n    \"Id\" : \"sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749\",\n    \"Labels\" : { },\n    \"ParentId\" : \"\",\n    \"RepoDigests\" : [ \"busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6\" ],\n    \"RepoTags\" : [ \"busybox:latest\" ],\n    \"SharedSize\" : 0,\n    \"Size\" : 1092588,\n    \"VirtualSize\" : 1092588\n  } ],\n  \"LayersSize\" : 1092588,\n  \"Volumes\" : [ {\n    \"Driver\" : \"local\",\n    \"Labels\" : null,\n    \"Mountpoint\" : \"/var/lib/docker/volumes/my-volume/_data\",\n    \"Name\" : \"my-volume\",\n    \"Options\" : null,\n    \"Scope\" : \"local\",\n    \"UsageData\" : {\n      \"RefCount\" : 2,\n      \"Size\" : 10920104\n    }\n  } ]\n}";
            exampleJson = "Custom MIME type example not yet supported: text/plain";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SystemDataUsage200Response>(exampleJson)
            : default(SystemDataUsage200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Monitor events
        /// </summary>
        /// <remarks>Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: &#x60;attach&#x60;, &#x60;commit&#x60;, &#x60;copy&#x60;, &#x60;create&#x60;, &#x60;destroy&#x60;, &#x60;detach&#x60;, &#x60;die&#x60;, &#x60;exec_create&#x60;, &#x60;exec_detach&#x60;, &#x60;exec_start&#x60;, &#x60;export&#x60;, &#x60;health_status&#x60;, &#x60;kill&#x60;, &#x60;oom&#x60;, &#x60;pause&#x60;, &#x60;rename&#x60;, &#x60;resize&#x60;, &#x60;restart&#x60;, &#x60;start&#x60;, &#x60;stop&#x60;, &#x60;top&#x60;, &#x60;unpause&#x60;, and &#x60;update&#x60;  Images report these events: &#x60;delete&#x60;, &#x60;import&#x60;, &#x60;load&#x60;, &#x60;pull&#x60;, &#x60;push&#x60;, &#x60;save&#x60;, &#x60;tag&#x60;, and &#x60;untag&#x60;  Volumes report these events: &#x60;create&#x60;, &#x60;mount&#x60;, &#x60;unmount&#x60;, and &#x60;destroy&#x60;  Networks report these events: &#x60;create&#x60;, &#x60;connect&#x60;, &#x60;disconnect&#x60;, &#x60;destroy&#x60;, &#x60;update&#x60;, and &#x60;remove&#x60;  The Docker daemon reports these events: &#x60;reload&#x60;  Services report these events: &#x60;create&#x60;, &#x60;update&#x60;, and &#x60;remove&#x60;  Nodes report these events: &#x60;create&#x60;, &#x60;update&#x60;, and &#x60;remove&#x60;  Secrets report these events: &#x60;create&#x60;, &#x60;update&#x60;, and &#x60;remove&#x60;  Configs report these events: &#x60;create&#x60;, &#x60;update&#x60;, and &#x60;remove&#x60; </remarks>
        /// <param name="since">Show events created since this timestamp then stream new events.</param>
        /// <param name="until">Show events created until this timestamp then stop streaming.</param>
        /// <param name="filters">A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;＝&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name </param>
        /// <response code="200">no error</response>
        /// <response code="400">bad parameter</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/events")]
        [ValidateModelState]
        [SwaggerOperation("SystemEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(SystemEvents200Response), description: "no error")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "bad parameter")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult SystemEvents([FromQuery (Name = "since")]string since, [FromQuery (Name = "until")]string until, [FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SystemEvents200Response));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Action\" : \"Action\",\n  \"Type\" : \"Type\",\n  \"Actor\" : {\n    \"Attributes\" : {\n      \"key\" : \"Attributes\"\n    },\n    \"ID\" : \"ID\"\n  },\n  \"timeNano\" : 6,\n  \"time\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SystemEvents200Response>(exampleJson)
            : default(SystemEvents200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get system information
        /// </summary>
        /// <response code="200">No error</response>
        /// <response code="500">Server error</response>
        [HttpGet]
        [Route("/v1.33/info")]
        [ValidateModelState]
        [SwaggerOperation("SystemInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(SystemInfo), description: "No error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server error")]
        public virtual IActionResult SystemInfo()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SystemInfo));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"NGoroutines\" : 174,\n  \"Name\" : \"node5.corp.example.com\",\n  \"Swarm\" : {\n    \"NodeAddr\" : \"10.0.0.46\",\n    \"Managers\" : 3,\n    \"NodeID\" : \"k67qz4598weg5unwwffg6z1m1\",\n    \"Cluster\" : {\n      \"RootRotationInProgress\" : false,\n      \"Version\" : {\n        \"Index\" : 373531\n      },\n      \"CreatedAt\" : \"2016-08-18T10:44:24.496525531Z\",\n      \"TLSInfo\" : {\n        \"CertIssuerPublicKey\" : \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==\",\n        \"CertIssuerSubject\" : \"MBMxETAPBgNVBAMTCHN3YXJtLWNh\",\n        \"TrustRoot\" : \"-----BEGIN CERTIFICATE-----\nMIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw\nEzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0\nMzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH\nA0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf\n3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB\nAf8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO\nPQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz\npxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H\n-----END CERTIFICATE-----\n\"\n      },\n      \"ID\" : \"abajmipo7b4xz5ip2nrla6b11\",\n      \"Spec\" : {\n        \"Orchestration\" : {\n          \"TaskHistoryRetentionLimit\" : 10\n        },\n        \"CAConfig\" : {\n          \"SigningCACert\" : \"SigningCACert\",\n          \"ExternalCAs\" : [ {\n            \"Options\" : {\n              \"key\" : \"Options\"\n            },\n            \"CACert\" : \"CACert\",\n            \"Protocol\" : \"cfssl\",\n            \"URL\" : \"URL\"\n          }, {\n            \"Options\" : {\n              \"key\" : \"Options\"\n            },\n            \"CACert\" : \"CACert\",\n            \"Protocol\" : \"cfssl\",\n            \"URL\" : \"URL\"\n          } ],\n          \"ForceRotate\" : 0,\n          \"NodeCertExpiry\" : 7776000000000000,\n          \"SigningCAKey\" : \"SigningCAKey\"\n        },\n        \"Labels\" : {\n          \"com.example.corp.department\" : \"engineering\",\n          \"com.example.corp.type\" : \"production\"\n        },\n        \"Raft\" : {\n          \"LogEntriesForSlowFollowers\" : 500,\n          \"SnapshotInterval\" : 10000,\n          \"KeepOldSnapshots\" : 6,\n          \"ElectionTick\" : 3,\n          \"HeartbeatTick\" : 1\n        },\n        \"Dispatcher\" : {\n          \"HeartbeatPeriod\" : 5000000000\n        },\n        \"TaskDefaults\" : {\n          \"LogDriver\" : {\n            \"Options\" : {\n              \"max-file\" : \"10\",\n              \"max-size\" : \"100m\"\n            },\n            \"Name\" : \"json-file\"\n          }\n        },\n        \"EncryptionConfig\" : {\n          \"AutoLockManagers\" : false\n        },\n        \"Name\" : \"default\"\n      },\n      \"UpdatedAt\" : \"2017-08-09T07:09:37.632105588Z\"\n    },\n    \"Error\" : \"\",\n    \"ControlAvailable\" : true,\n    \"LocalNodeState\" : \"active\",\n    \"Nodes\" : 4,\n    \"RemoteManagers\" : [ {\n      \"Addr\" : \"10.0.0.158:2377\",\n      \"NodeID\" : \"71izy0goik036k48jg985xnds\"\n    }, {\n      \"Addr\" : \"10.0.0.159:2377\",\n      \"NodeID\" : \"79y6h1o4gv8n120drcprv5nmc\"\n    }, {\n      \"Addr\" : \"10.0.0.46:2377\",\n      \"NodeID\" : \"k67qz4598weg5unwwffg6z1m1\"\n    } ]\n  },\n  \"RuncCommit\" : {\n    \"Expected\" : \"2d41c047c83e09a6d61d464906feb2a2f3c52aa4\",\n    \"ID\" : \"cfb82a876ecc11b5ca0977d1733adbe58599088a\"\n  },\n  \"Runtimes\" : {\n    \"custom\" : {\n      \"path\" : \"/usr/local/bin/my-oci-runtime\",\n      \"runtimeArgs\" : [ \"--debug\", \"--systemd-cgroup=false\" ]\n    },\n    \"runc\" : {\n      \"path\" : \"docker-runc\"\n    },\n    \"runc-master\" : {\n      \"path\" : \"/go/bin/runc\"\n    }\n  },\n  \"BridgeNfIptables\" : true,\n  \"DriverStatus\" : [ [ \"Backing Filesystem\", \"extfs\" ], [ \"Supports d_type\", \"true\" ], [ \"Native Overlay Diff\", \"true\" ] ],\n  \"ID\" : \"7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS\",\n  \"LiveRestoreEnabled\" : false,\n  \"SystemTime\" : \"2017-08-08T20:28:29.06202363Z\",\n  \"NoProxy\" : \"*.local, 169.254/16\",\n  \"Architecture\" : \"x86_64\",\n  \"HttpsProxy\" : \"https://user:pass@proxy.corp.example.com:4443\",\n  \"NEventsListener\" : 30,\n  \"Images\" : 508,\n  \"ContainersRunning\" : 3,\n  \"Labels\" : [ \"storage=ssd\", \"production\" ],\n  \"InitCommit\" : {\n    \"Expected\" : \"2d41c047c83e09a6d61d464906feb2a2f3c52aa4\",\n    \"ID\" : \"cfb82a876ecc11b5ca0977d1733adbe58599088a\"\n  },\n  \"NFd\" : 64,\n  \"KernelVersion\" : \"4.9.38-moby\",\n  \"LoggingDriver\" : \"LoggingDriver\",\n  \"OSType\" : \"linux\",\n  \"SecurityOptions\" : [ \"name=apparmor\", \"name=seccomp,profile=default\", \"name=selinux\", \"name=userns\" ],\n  \"ContainerdCommit\" : {\n    \"Expected\" : \"2d41c047c83e09a6d61d464906feb2a2f3c52aa4\",\n    \"ID\" : \"cfb82a876ecc11b5ca0977d1733adbe58599088a\"\n  },\n  \"GenericResources\" : [ {\n    \"DiscreteResourceSpec\" : {\n      \"Kind\" : \"SSD\",\n      \"Value\" : 3\n    }\n  }, {\n    \"NamedResourceSpec\" : {\n      \"Kind\" : \"GPU\",\n      \"Value\" : \"UUID1\"\n    }\n  }, {\n    \"NamedResourceSpec\" : {\n      \"Kind\" : \"GPU\",\n      \"Value\" : \"UUID2\"\n    }\n  } ],\n  \"KernelMemory\" : true,\n  \"OperatingSystem\" : \"Alpine Linux v3.5\",\n  \"RegistryConfig\" : {\n    \"AllowNondistributableArtifactsCIDRs\" : [ \"::1/128\", \"127.0.0.0/8\" ],\n    \"AllowNondistributableArtifactsHostnames\" : [ \"registry.internal.corp.example.com:3000\", \"[2001:db8:a0b:12f0::1]:443\" ],\n    \"InsecureRegistryCIDRs\" : [ \"::1/128\", \"127.0.0.0/8\" ],\n    \"IndexConfigs\" : {\n      \"127.0.0.1:5000\" : {\n        \"Mirrors\" : [ ],\n        \"Name\" : \"127.0.0.1:5000\",\n        \"Official\" : false,\n        \"Secure\" : false\n      },\n      \"[2001:db8:a0b:12f0::1]:80\" : {\n        \"Mirrors\" : [ ],\n        \"Name\" : \"[2001:db8:a0b:12f0::1]:80\",\n        \"Official\" : false,\n        \"Secure\" : false\n      },\n      \"docker.io\" : {\n        \"Mirrors\" : [ \"https://hub-mirror.corp.example.com:5000/\" ],\n        \"Name\" : \"docker.io\",\n        \"Official\" : true,\n        \"Secure\" : true\n      },\n      \"registry.internal.corp.example.com:3000\" : {\n        \"Mirrors\" : [ ],\n        \"Name\" : \"registry.internal.corp.example.com:3000\",\n        \"Official\" : false,\n        \"Secure\" : false\n      }\n    },\n    \"Mirrors\" : [ \"https://hub-mirror.corp.example.com:5000/\", \"https://[2001:db8:a0b:12f0::1]/\" ]\n  },\n  \"ServerVersion\" : \"17.06.0-ce\",\n  \"OomKillDisable\" : true,\n  \"CpuCfsQuota\" : true,\n  \"Containers\" : 14,\n  \"Driver\" : \"overlay2\",\n  \"IPv4Forwarding\" : true,\n  \"ExperimentalBuild\" : true,\n  \"ClusterStore\" : \"consul://consul.corp.example.com:8600/some/path\",\n  \"DockerRootDir\" : \"/var/lib/docker\",\n  \"CPUSet\" : true,\n  \"CpuCfsPeriod\" : true,\n  \"DefaultRuntime\" : \"runc\",\n  \"ClusterAdvertise\" : \"node5.corp.example.com:8000\",\n  \"CPUShares\" : true,\n  \"Debug\" : true,\n  \"NCPU\" : 4,\n  \"Plugins\" : {\n    \"Authorization\" : [ \"img-authz-plugin\", \"hbm\" ],\n    \"Log\" : [ \"awslogs\", \"fluentd\", \"gcplogs\", \"gelf\", \"journald\", \"json-file\", \"logentries\", \"splunk\", \"syslog\" ],\n    \"Volume\" : [ \"local\" ],\n    \"Network\" : [ \"bridge\", \"host\", \"ipvlan\", \"macvlan\", \"null\", \"overlay\" ]\n  },\n  \"SwapLimit\" : true,\n  \"SystemStatus\" : [ [ \"Role\", \"primary\" ], [ \"State\", \"Healthy\" ], [ \"Strategy\", \"spread\" ], [ \"Filters\", \"health, port, containerslots, dependency, affinity, constraint, whitelist\" ], [ \"Nodes\", \"2\" ], [ \" swarm-agent-00\", \"192.168.99.102:2376\" ], [ \"  └ ID\", \"5CT6:FBGO:RVGO:CZL4:PB2K:WCYN:2JSV:KSHH:GGFW:QOPG:6J5Q:IOZ2|192.168.99.102:2376\" ], [ \"  └ Status\", \"Healthy\" ], [ \"  └ Containers\", \"1 (1 Running, 0 Paused, 0 Stopped)\" ], [ \"  └ Reserved CPUs\", \"0 / 1\" ], [ \"  └ Reserved Memory\", \"0 B / 1.021 GiB\" ], [ \"  └ Labels\", \"kernelversion=4.4.74-boot2docker, operatingsystem=Boot2Docker 17.06.0-ce (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype=linux, provider=virtualbox, storagedriver=aufs\" ], [ \"  └ UpdatedAt\", \"2017-08-09T10:03:46Z\" ], [ \"  └ ServerVersion\", \"17.06.0-ce\" ], [ \" swarm-manager\", \"192.168.99.101:2376\" ], [ \"  └ ID\", \"TAMD:7LL3:SEF7:LW2W:4Q2X:WVFH:RTXX:JSYS:XY2P:JEHL:ZMJK:JGIW|192.168.99.101:2376\" ], [ \"  └ Status\", \"Healthy\" ], [ \"  └ Containers\", \"2 (2 Running, 0 Paused, 0 Stopped)\" ], [ \"  └ Reserved CPUs\", \"0 / 1\" ], [ \"  └ Reserved Memory\", \"0 B / 1.021 GiB\" ], [ \"  └ Labels\", \"kernelversion=4.4.74-boot2docker, operatingsystem=Boot2Docker 17.06.0-ce (TCL 7.2); HEAD : 0672754 - Thu Jun 29 00:06:31 UTC 2017, ostype=linux, provider=virtualbox, storagedriver=aufs\" ], [ \"  └ UpdatedAt\", \"2017-08-09T10:04:11Z\" ], [ \"  └ ServerVersion\", \"17.06.0-ce\" ] ],\n  \"CgroupDriver\" : \"cgroupfs\",\n  \"ContainersPaused\" : 1,\n  \"MemTotal\" : 2095882240,\n  \"IndexServerAddress\" : \"https://index.docker.io/v1/\",\n  \"HttpProxy\" : \"http://user:pass@proxy.corp.example.com:8080\",\n  \"MemoryLimit\" : true,\n  \"InitBinary\" : \"docker-init\",\n  \"Isolation\" : \"default\",\n  \"BridgeNfIp6tables\" : true,\n  \"ContainersStopped\" : 10\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SystemInfo>(exampleJson)
            : default(SystemInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Ping
        /// </summary>
        /// <remarks>This is a dummy endpoint you can use to test if the server is accessible.</remarks>
        /// <response code="200">no error</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/_ping")]
        [ValidateModelState]
        [SwaggerOperation("SystemPing")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "no error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult SystemPing()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get version
        /// </summary>
        /// <remarks>Returns the version of Docker that is running and various information about the system that Docker is running on.</remarks>
        /// <response code="200">no error</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1.33/version")]
        [ValidateModelState]
        [SwaggerOperation("SystemVersion")]
        [SwaggerResponse(statusCode: 200, type: typeof(SystemVersion200Response), description: "no error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        public virtual IActionResult SystemVersion()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SystemVersion200Response));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"KernelVersion\" : \"KernelVersion\",\n  \"ApiVersion\" : \"ApiVersion\",\n  \"GitCommit\" : \"GitCommit\",\n  \"Os\" : \"Os\",\n  \"Version\" : \"Version\",\n  \"Experimental\" : true,\n  \"MinAPIVersion\" : \"MinAPIVersion\",\n  \"Arch\" : \"Arch\",\n  \"GoVersion\" : \"GoVersion\",\n  \"BuildTime\" : \"BuildTime\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SystemVersion200Response>(exampleJson)
            : default(SystemVersion200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
