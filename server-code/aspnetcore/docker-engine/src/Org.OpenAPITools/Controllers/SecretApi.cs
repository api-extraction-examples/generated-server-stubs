/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes - -- -- -- -- -- -- -- -|- -- -- -- -- -- --|- -- -- -- -- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.33
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SecretApiController : ControllerBase
    { 
        /// <summary>
        /// Create a secret
        /// </summary>
        /// <param name="secretCreateRequest"></param>
        /// <response code="201">no error</response>
        /// <response code="409">name conflicts with an existing object</response>
        /// <response code="500">server error</response>
        /// <response code="503">node is not part of a swarm</response>
        [HttpPost]
        [Route("/v1.33/secrets/create")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SecretCreate")]
        [SwaggerResponse(statusCode: 201, type: typeof(SecretCreate201Response), description: "no error")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "name conflicts with an existing object")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "node is not part of a swarm")]
        public virtual IActionResult SecretCreate([FromBody]SecretCreateRequest secretCreateRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(SecretCreate201Response));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"ID\" : \"ktnbjxoalbkvbvedmg1urrz8h\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SecretCreate201Response>(exampleJson)
            : default(SecretCreate201Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a secret
        /// </summary>
        /// <param name="id">ID of the secret</param>
        /// <response code="204">no error</response>
        /// <response code="404">secret not found</response>
        /// <response code="500">server error</response>
        /// <response code="503">node is not part of a swarm</response>
        [HttpDelete]
        [Route("/v1.33/secrets/{id}")]
        [ValidateModelState]
        [SwaggerOperation("SecretDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "secret not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "node is not part of a swarm")]
        public virtual IActionResult SecretDelete([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Inspect a secret
        /// </summary>
        /// <param name="id">ID of the secret</param>
        /// <response code="200">no error</response>
        /// <response code="404">secret not found</response>
        /// <response code="500">server error</response>
        /// <response code="503">node is not part of a swarm</response>
        [HttpGet]
        [Route("/v1.33/secrets/{id}")]
        [ValidateModelState]
        [SwaggerOperation("SecretInspect")]
        [SwaggerResponse(statusCode: 200, type: typeof(Secret), description: "no error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "secret not found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "node is not part of a swarm")]
        public virtual IActionResult SecretInspect([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Secret));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"Version\" : {\n    \"Index\" : 373531\n  },\n  \"CreatedAt\" : \"2017-07-20T13:55:28.678958722Z\",\n  \"ID\" : \"blt1owaxmitz71s9v5zh81zun\",\n  \"Spec\" : {\n    \"Driver\" : {\n      \"Options\" : {\n        \"OptionA\" : \"value for driver-specific option A\",\n        \"OptionB\" : \"value for driver-specific option B\"\n      },\n      \"Name\" : \"some-driver\"\n    },\n    \"Data\" : \"\",\n    \"Labels\" : {\n      \"com.example.some-label\" : \"some-value\",\n      \"com.example.some-other-label\" : \"some-other-value\"\n    },\n    \"Name\" : \"Name\"\n  },\n  \"UpdatedAt\" : \"2017-07-20T13:55:28.678958722Z\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Secret>(exampleJson)
            : default(Secret);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List secrets
        /// </summary>
        /// <param name="filters">A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the secrets list. Available filters:  - &#x60;id&#x3D;&lt;secret id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;secret name&gt;&#x60; - &#x60;names&#x3D;&lt;secret name&gt;&#x60; </param>
        /// <response code="200">no error</response>
        /// <response code="500">server error</response>
        /// <response code="503">node is not part of a swarm</response>
        [HttpGet]
        [Route("/v1.33/secrets")]
        [ValidateModelState]
        [SwaggerOperation("SecretList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Secret>), description: "no error")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "node is not part of a swarm")]
        public virtual IActionResult SecretList([FromQuery (Name = "filters")]string filters)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Secret>));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedAt\" : \"2017-07-20T13:55:28.678958722Z\",\n  \"ID\" : \"blt1owaxmitz71s9v5zh81zun\",\n  \"Spec\" : {\n    \"Driver\" : {\n      \"Name\" : \"secret-bucket\",\n      \"Options\" : {\n        \"OptionA\" : \"value for driver option A\",\n        \"OptionB\" : \"value for driver option B\"\n      }\n    },\n    \"Labels\" : {\n      \"some.label\" : \"some.value\"\n    },\n    \"Name\" : \"mysql-passwd\"\n  },\n  \"UpdatedAt\" : \"2017-07-20T13:55:28.678958722Z\",\n  \"Version\" : {\n    \"Index\" : 85\n  }\n}, {\n  \"CreatedAt\" : \"2016-11-05T01:20:17.327670065Z\",\n  \"ID\" : \"ktnbjxoalbkvbvedmg1urrz8h\",\n  \"Spec\" : {\n    \"Labels\" : {\n      \"foo\" : \"bar\"\n    },\n    \"Name\" : \"app-dev.crt\"\n  },\n  \"UpdatedAt\" : \"2016-11-05T01:20:17.327670065Z\",\n  \"Version\" : {\n    \"Index\" : 11\n  }\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Secret>>(exampleJson)
            : default(List<Secret>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update a Secret
        /// </summary>
        /// <param name="id">The ID or name of the secret</param>
        /// <param name="varVersion">The version number of the secret object being updated. This is required to avoid conflicting writes.</param>
        /// <param name="secretSpec">The spec of the secret to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [SecretInspect endpoint](#operation/SecretInspect) response values.</param>
        /// <response code="200">no error</response>
        /// <response code="400">bad parameter</response>
        /// <response code="404">no such secret</response>
        /// <response code="500">server error</response>
        /// <response code="503">node is not part of a swarm</response>
        [HttpPost]
        [Route("/v1.33/secrets/{id}/update")]
        [Consumes("application/json", "text/plain")]
        [ValidateModelState]
        [SwaggerOperation("SecretUpdate")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "bad parameter")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "no such secret")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "server error")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponse), description: "node is not part of a swarm")]
        public virtual IActionResult SecretUpdate([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "version")][Required()]long varVersion, [FromBody]SecretSpec secretSpec)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(ErrorResponse));

            throw new NotImplementedException();
        }
    }
}
