/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateEnvVarsRequestInner : IEquatable<CreateEnvVarsRequestInner>
    {
        /// <summary>
        /// The existing or new name of the key, if you wish to rename it (case-sensitive)
        /// </summary>
        /// <value>The existing or new name of the key, if you wish to rename it (case-sensitive)</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }


        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ScopesEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ScopesEnum
        {
            
            /// <summary>
            /// Enum BuildsEnum for builds
            /// </summary>
            [EnumMember(Value = "builds")]
            BuildsEnum = 1,
            
            /// <summary>
            /// Enum FunctionsEnum for functions
            /// </summary>
            [EnumMember(Value = "functions")]
            FunctionsEnum = 2,
            
            /// <summary>
            /// Enum RuntimeEnum for runtime
            /// </summary>
            [EnumMember(Value = "runtime")]
            RuntimeEnum = 3,
            
            /// <summary>
            /// Enum PostProcessingEnum for post-processing
            /// </summary>
            [EnumMember(Value = "post-processing")]
            PostProcessingEnum = 4
        }

        /// <summary>
        /// The scopes that this environment variable is set to (Pro plans and above)
        /// </summary>
        /// <value>The scopes that this environment variable is set to (Pro plans and above)</value>
        [DataMember(Name="scopes", EmitDefaultValue=false)]
        public List<CreateEnvVarsRequestInner.ScopesEnum> Scopes { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<EnvVarValue> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateEnvVarsRequestInner {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateEnvVarsRequestInner)obj);
        }

        /// <summary>
        /// Returns true if CreateEnvVarsRequestInner instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateEnvVarsRequestInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateEnvVarsRequestInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Scopes == other.Scopes ||
                    Scopes != null &&
                    other.Scopes != null &&
                    Scopes.SequenceEqual(other.Scopes)
                ) && 
                (
                    Values == other.Values ||
                    Values != null &&
                    other.Values != null &&
                    Values.SequenceEqual(other.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Scopes != null)
                    hashCode = hashCode * 59 + Scopes.GetHashCode();
                    if (Values != null)
                    hashCode = hashCode * 59 + Values.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateEnvVarsRequestInner left, CreateEnvVarsRequestInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateEnvVarsRequestInner left, CreateEnvVarsRequestInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
