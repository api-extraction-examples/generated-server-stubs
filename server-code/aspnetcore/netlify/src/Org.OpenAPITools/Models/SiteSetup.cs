/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SiteSetup : IEquatable<SiteSetup>
    {
        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets AccountSlug
        /// </summary>
        [DataMember(Name="account_slug", EmitDefaultValue=false)]
        public string AccountSlug { get; set; }

        /// <summary>
        /// Gets or Sets AdminUrl
        /// </summary>
        [DataMember(Name="admin_url", EmitDefaultValue=false)]
        public string AdminUrl { get; set; }

        /// <summary>
        /// Gets or Sets BuildImage
        /// </summary>
        [DataMember(Name="build_image", EmitDefaultValue=false)]
        public string BuildImage { get; set; }

        /// <summary>
        /// Gets or Sets BuildSettings
        /// </summary>
        [DataMember(Name="build_settings", EmitDefaultValue=false)]
        public RepoInfo BuildSettings { get; set; }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name="capabilities", EmitDefaultValue=false)]
        public Dictionary<string, Object> Capabilities { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CustomDomain
        /// </summary>
        [DataMember(Name="custom_domain", EmitDefaultValue=false)]
        public string CustomDomain { get; set; }

        /// <summary>
        /// Gets or Sets DefaultHooksData
        /// </summary>
        [DataMember(Name="default_hooks_data", EmitDefaultValue=false)]
        public SiteDefaultHooksData DefaultHooksData { get; set; }

        /// <summary>
        /// Gets or Sets DeployHook
        /// </summary>
        [DataMember(Name="deploy_hook", EmitDefaultValue=false)]
        public string DeployHook { get; set; }

        /// <summary>
        /// Gets or Sets DeployUrl
        /// </summary>
        [DataMember(Name="deploy_url", EmitDefaultValue=false)]
        public string DeployUrl { get; set; }

        /// <summary>
        /// Gets or Sets DomainAliases
        /// </summary>
        [DataMember(Name="domain_aliases", EmitDefaultValue=false)]
        public List<string> DomainAliases { get; set; }

        /// <summary>
        /// Gets or Sets ForceSsl
        /// </summary>
        [DataMember(Name="force_ssl", EmitDefaultValue=true)]
        public bool ForceSsl { get; set; }

        /// <summary>
        /// Gets or Sets GitProvider
        /// </summary>
        [DataMember(Name="git_provider", EmitDefaultValue=false)]
        public string GitProvider { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IdDomain
        /// </summary>
        [DataMember(Name="id_domain", EmitDefaultValue=false)]
        public string IdDomain { get; set; }

        /// <summary>
        /// Gets or Sets ManagedDns
        /// </summary>
        [DataMember(Name="managed_dns", EmitDefaultValue=true)]
        public bool ManagedDns { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NotificationEmail
        /// </summary>
        [DataMember(Name="notification_email", EmitDefaultValue=false)]
        public string NotificationEmail { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name="plan", EmitDefaultValue=false)]
        public string Plan { get; set; }

        /// <summary>
        /// Gets or Sets Prerender
        /// </summary>
        [DataMember(Name="prerender", EmitDefaultValue=false)]
        public string Prerender { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingSettings
        /// </summary>
        [DataMember(Name="processing_settings", EmitDefaultValue=false)]
        public SiteProcessingSettings ProcessingSettings { get; set; }

        /// <summary>
        /// Gets or Sets PublishedDeploy
        /// </summary>
        [DataMember(Name="published_deploy", EmitDefaultValue=false)]
        public Deploy PublishedDeploy { get; set; }

        /// <summary>
        /// Gets or Sets ScreenshotUrl
        /// </summary>
        [DataMember(Name="screenshot_url", EmitDefaultValue=false)]
        public string ScreenshotUrl { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name="session_id", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets Ssl
        /// </summary>
        [DataMember(Name="ssl", EmitDefaultValue=true)]
        public bool Ssl { get; set; }

        /// <summary>
        /// Gets or Sets SslUrl
        /// </summary>
        [DataMember(Name="ssl_url", EmitDefaultValue=false)]
        public string SslUrl { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Repo
        /// </summary>
        [DataMember(Name="repo", EmitDefaultValue=false)]
        public RepoInfo Repo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SiteSetup {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountSlug: ").Append(AccountSlug).Append("\n");
            sb.Append("  AdminUrl: ").Append(AdminUrl).Append("\n");
            sb.Append("  BuildImage: ").Append(BuildImage).Append("\n");
            sb.Append("  BuildSettings: ").Append(BuildSettings).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomDomain: ").Append(CustomDomain).Append("\n");
            sb.Append("  DefaultHooksData: ").Append(DefaultHooksData).Append("\n");
            sb.Append("  DeployHook: ").Append(DeployHook).Append("\n");
            sb.Append("  DeployUrl: ").Append(DeployUrl).Append("\n");
            sb.Append("  DomainAliases: ").Append(DomainAliases).Append("\n");
            sb.Append("  ForceSsl: ").Append(ForceSsl).Append("\n");
            sb.Append("  GitProvider: ").Append(GitProvider).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdDomain: ").Append(IdDomain).Append("\n");
            sb.Append("  ManagedDns: ").Append(ManagedDns).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotificationEmail: ").Append(NotificationEmail).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  Prerender: ").Append(Prerender).Append("\n");
            sb.Append("  ProcessingSettings: ").Append(ProcessingSettings).Append("\n");
            sb.Append("  PublishedDeploy: ").Append(PublishedDeploy).Append("\n");
            sb.Append("  ScreenshotUrl: ").Append(ScreenshotUrl).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  SslUrl: ").Append(SslUrl).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Repo: ").Append(Repo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SiteSetup)obj);
        }

        /// <summary>
        /// Returns true if SiteSetup instances are equal
        /// </summary>
        /// <param name="other">Instance of SiteSetup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SiteSetup other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    AccountSlug == other.AccountSlug ||
                    AccountSlug != null &&
                    AccountSlug.Equals(other.AccountSlug)
                ) && 
                (
                    AdminUrl == other.AdminUrl ||
                    AdminUrl != null &&
                    AdminUrl.Equals(other.AdminUrl)
                ) && 
                (
                    BuildImage == other.BuildImage ||
                    BuildImage != null &&
                    BuildImage.Equals(other.BuildImage)
                ) && 
                (
                    BuildSettings == other.BuildSettings ||
                    BuildSettings != null &&
                    BuildSettings.Equals(other.BuildSettings)
                ) && 
                (
                    Capabilities == other.Capabilities ||
                    Capabilities != null &&
                    other.Capabilities != null &&
                    Capabilities.SequenceEqual(other.Capabilities)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    CustomDomain == other.CustomDomain ||
                    CustomDomain != null &&
                    CustomDomain.Equals(other.CustomDomain)
                ) && 
                (
                    DefaultHooksData == other.DefaultHooksData ||
                    DefaultHooksData != null &&
                    DefaultHooksData.Equals(other.DefaultHooksData)
                ) && 
                (
                    DeployHook == other.DeployHook ||
                    DeployHook != null &&
                    DeployHook.Equals(other.DeployHook)
                ) && 
                (
                    DeployUrl == other.DeployUrl ||
                    DeployUrl != null &&
                    DeployUrl.Equals(other.DeployUrl)
                ) && 
                (
                    DomainAliases == other.DomainAliases ||
                    DomainAliases != null &&
                    other.DomainAliases != null &&
                    DomainAliases.SequenceEqual(other.DomainAliases)
                ) && 
                (
                    ForceSsl == other.ForceSsl ||
                    
                    ForceSsl.Equals(other.ForceSsl)
                ) && 
                (
                    GitProvider == other.GitProvider ||
                    GitProvider != null &&
                    GitProvider.Equals(other.GitProvider)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IdDomain == other.IdDomain ||
                    IdDomain != null &&
                    IdDomain.Equals(other.IdDomain)
                ) && 
                (
                    ManagedDns == other.ManagedDns ||
                    
                    ManagedDns.Equals(other.ManagedDns)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NotificationEmail == other.NotificationEmail ||
                    NotificationEmail != null &&
                    NotificationEmail.Equals(other.NotificationEmail)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    Plan == other.Plan ||
                    Plan != null &&
                    Plan.Equals(other.Plan)
                ) && 
                (
                    Prerender == other.Prerender ||
                    Prerender != null &&
                    Prerender.Equals(other.Prerender)
                ) && 
                (
                    ProcessingSettings == other.ProcessingSettings ||
                    ProcessingSettings != null &&
                    ProcessingSettings.Equals(other.ProcessingSettings)
                ) && 
                (
                    PublishedDeploy == other.PublishedDeploy ||
                    PublishedDeploy != null &&
                    PublishedDeploy.Equals(other.PublishedDeploy)
                ) && 
                (
                    ScreenshotUrl == other.ScreenshotUrl ||
                    ScreenshotUrl != null &&
                    ScreenshotUrl.Equals(other.ScreenshotUrl)
                ) && 
                (
                    SessionId == other.SessionId ||
                    SessionId != null &&
                    SessionId.Equals(other.SessionId)
                ) && 
                (
                    Ssl == other.Ssl ||
                    
                    Ssl.Equals(other.Ssl)
                ) && 
                (
                    SslUrl == other.SslUrl ||
                    SslUrl != null &&
                    SslUrl.Equals(other.SslUrl)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    Repo == other.Repo ||
                    Repo != null &&
                    Repo.Equals(other.Repo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (AccountSlug != null)
                    hashCode = hashCode * 59 + AccountSlug.GetHashCode();
                    if (AdminUrl != null)
                    hashCode = hashCode * 59 + AdminUrl.GetHashCode();
                    if (BuildImage != null)
                    hashCode = hashCode * 59 + BuildImage.GetHashCode();
                    if (BuildSettings != null)
                    hashCode = hashCode * 59 + BuildSettings.GetHashCode();
                    if (Capabilities != null)
                    hashCode = hashCode * 59 + Capabilities.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (CustomDomain != null)
                    hashCode = hashCode * 59 + CustomDomain.GetHashCode();
                    if (DefaultHooksData != null)
                    hashCode = hashCode * 59 + DefaultHooksData.GetHashCode();
                    if (DeployHook != null)
                    hashCode = hashCode * 59 + DeployHook.GetHashCode();
                    if (DeployUrl != null)
                    hashCode = hashCode * 59 + DeployUrl.GetHashCode();
                    if (DomainAliases != null)
                    hashCode = hashCode * 59 + DomainAliases.GetHashCode();
                    
                    hashCode = hashCode * 59 + ForceSsl.GetHashCode();
                    if (GitProvider != null)
                    hashCode = hashCode * 59 + GitProvider.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IdDomain != null)
                    hashCode = hashCode * 59 + IdDomain.GetHashCode();
                    
                    hashCode = hashCode * 59 + ManagedDns.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NotificationEmail != null)
                    hashCode = hashCode * 59 + NotificationEmail.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (Plan != null)
                    hashCode = hashCode * 59 + Plan.GetHashCode();
                    if (Prerender != null)
                    hashCode = hashCode * 59 + Prerender.GetHashCode();
                    if (ProcessingSettings != null)
                    hashCode = hashCode * 59 + ProcessingSettings.GetHashCode();
                    if (PublishedDeploy != null)
                    hashCode = hashCode * 59 + PublishedDeploy.GetHashCode();
                    if (ScreenshotUrl != null)
                    hashCode = hashCode * 59 + ScreenshotUrl.GetHashCode();
                    if (SessionId != null)
                    hashCode = hashCode * 59 + SessionId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Ssl.GetHashCode();
                    if (SslUrl != null)
                    hashCode = hashCode * 59 + SslUrl.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (Repo != null)
                    hashCode = hashCode * 59 + Repo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SiteSetup left, SiteSetup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SiteSetup left, SiteSetup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
