/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Environment variable value model definition
    /// </summary>
    [DataContract]
    public partial class EnvVarValue : IEquatable<EnvVarValue>
    {

        /// <summary>
        /// The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`.
        /// </summary>
        /// <value>The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`.</value>
        [TypeConverter(typeof(CustomEnumConverter<ContextEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            
            /// <summary>
            /// Enum AllEnum for all
            /// </summary>
            [EnumMember(Value = "all")]
            AllEnum = 1,
            
            /// <summary>
            /// Enum DevEnum for dev
            /// </summary>
            [EnumMember(Value = "dev")]
            DevEnum = 2,
            
            /// <summary>
            /// Enum BranchDeployEnum for branch-deploy
            /// </summary>
            [EnumMember(Value = "branch-deploy")]
            BranchDeployEnum = 3,
            
            /// <summary>
            /// Enum DeployPreviewEnum for deploy-preview
            /// </summary>
            [EnumMember(Value = "deploy-preview")]
            DeployPreviewEnum = 4,
            
            /// <summary>
            /// Enum ProductionEnum for production
            /// </summary>
            [EnumMember(Value = "production")]
            ProductionEnum = 5
        }

        /// <summary>
        /// The deploy context in which this value will be used. &#x60;dev&#x60; refers to local development when running &#x60;netlify dev&#x60;.
        /// </summary>
        /// <value>The deploy context in which this value will be used. &#x60;dev&#x60; refers to local development when running &#x60;netlify dev&#x60;.</value>
        [DataMember(Name="context", EmitDefaultValue=true)]
        public ContextEnum Context { get; set; }

        /// <summary>
        /// The environment variable value&#39;s universally unique ID
        /// </summary>
        /// <value>The environment variable value&#39;s universally unique ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The environment variable&#39;s unencrypted value
        /// </summary>
        /// <value>The environment variable&#39;s unencrypted value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvVarValue {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnvVarValue)obj);
        }

        /// <summary>
        /// Returns true if EnvVarValue instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvVarValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvVarValue other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Context == other.Context ||
                    
                    Context.Equals(other.Context)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Context.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnvVarValue left, EnvVarValue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnvVarValue left, EnvVarValue right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
