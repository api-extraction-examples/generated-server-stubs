/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Deploy : IEquatable<Deploy>
    {
        /// <summary>
        /// Gets or Sets AdminUrl
        /// </summary>
        [DataMember(Name="admin_url", EmitDefaultValue=false)]
        public string AdminUrl { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets BuildId
        /// </summary>
        [DataMember(Name="build_id", EmitDefaultValue=false)]
        public string BuildId { get; set; }

        /// <summary>
        /// Gets or Sets CommitRef
        /// </summary>
        [DataMember(Name="commit_ref", EmitDefaultValue=false)]
        public string CommitRef { get; set; }

        /// <summary>
        /// Gets or Sets CommitUrl
        /// </summary>
        [DataMember(Name="commit_url", EmitDefaultValue=false)]
        public string CommitUrl { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public string Context { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DeploySslUrl
        /// </summary>
        [DataMember(Name="deploy_ssl_url", EmitDefaultValue=false)]
        public string DeploySslUrl { get; set; }

        /// <summary>
        /// Gets or Sets DeployUrl
        /// </summary>
        [DataMember(Name="deploy_url", EmitDefaultValue=false)]
        public string DeployUrl { get; set; }

        /// <summary>
        /// Gets or Sets Draft
        /// </summary>
        [DataMember(Name="draft", EmitDefaultValue=true)]
        public bool Draft { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets Framework
        /// </summary>
        [DataMember(Name="framework", EmitDefaultValue=false)]
        public string Framework { get; set; }

        /// <summary>
        /// Gets or Sets FunctionSchedules
        /// </summary>
        [DataMember(Name="function_schedules", EmitDefaultValue=false)]
        public List<FunctionSchedule> FunctionSchedules { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Locked
        /// </summary>
        [DataMember(Name="locked", EmitDefaultValue=true)]
        public bool Locked { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PublishedAt
        /// </summary>
        [DataMember(Name="published_at", EmitDefaultValue=false)]
        public string PublishedAt { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public List<string> Required { get; set; }

        /// <summary>
        /// Gets or Sets RequiredFunctions
        /// </summary>
        [DataMember(Name="required_functions", EmitDefaultValue=false)]
        public List<string> RequiredFunctions { get; set; }

        /// <summary>
        /// Gets or Sets ReviewId
        /// </summary>
        [DataMember(Name="review_id", EmitDefaultValue=true)]
        public decimal ReviewId { get; set; }

        /// <summary>
        /// Gets or Sets ReviewUrl
        /// </summary>
        [DataMember(Name="review_url", EmitDefaultValue=false)]
        public string ReviewUrl { get; set; }

        /// <summary>
        /// Gets or Sets ScreenshotUrl
        /// </summary>
        [DataMember(Name="screenshot_url", EmitDefaultValue=false)]
        public string ScreenshotUrl { get; set; }

        /// <summary>
        /// Gets or Sets SiteCapabilities
        /// </summary>
        [DataMember(Name="site_capabilities", EmitDefaultValue=false)]
        public DeploySiteCapabilities SiteCapabilities { get; set; }

        /// <summary>
        /// Gets or Sets SiteId
        /// </summary>
        [DataMember(Name="site_id", EmitDefaultValue=false)]
        public string SiteId { get; set; }

        /// <summary>
        /// Gets or Sets Skipped
        /// </summary>
        [DataMember(Name="skipped", EmitDefaultValue=true)]
        public bool Skipped { get; set; }

        /// <summary>
        /// Gets or Sets SslUrl
        /// </summary>
        [DataMember(Name="ssl_url", EmitDefaultValue=false)]
        public string SslUrl { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Deploy {\n");
            sb.Append("  AdminUrl: ").Append(AdminUrl).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  BuildId: ").Append(BuildId).Append("\n");
            sb.Append("  CommitRef: ").Append(CommitRef).Append("\n");
            sb.Append("  CommitUrl: ").Append(CommitUrl).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DeploySslUrl: ").Append(DeploySslUrl).Append("\n");
            sb.Append("  DeployUrl: ").Append(DeployUrl).Append("\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Framework: ").Append(Framework).Append("\n");
            sb.Append("  FunctionSchedules: ").Append(FunctionSchedules).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  RequiredFunctions: ").Append(RequiredFunctions).Append("\n");
            sb.Append("  ReviewId: ").Append(ReviewId).Append("\n");
            sb.Append("  ReviewUrl: ").Append(ReviewUrl).Append("\n");
            sb.Append("  ScreenshotUrl: ").Append(ScreenshotUrl).Append("\n");
            sb.Append("  SiteCapabilities: ").Append(SiteCapabilities).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  Skipped: ").Append(Skipped).Append("\n");
            sb.Append("  SslUrl: ").Append(SslUrl).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Deploy)obj);
        }

        /// <summary>
        /// Returns true if Deploy instances are equal
        /// </summary>
        /// <param name="other">Instance of Deploy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Deploy other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdminUrl == other.AdminUrl ||
                    AdminUrl != null &&
                    AdminUrl.Equals(other.AdminUrl)
                ) && 
                (
                    Branch == other.Branch ||
                    Branch != null &&
                    Branch.Equals(other.Branch)
                ) && 
                (
                    BuildId == other.BuildId ||
                    BuildId != null &&
                    BuildId.Equals(other.BuildId)
                ) && 
                (
                    CommitRef == other.CommitRef ||
                    CommitRef != null &&
                    CommitRef.Equals(other.CommitRef)
                ) && 
                (
                    CommitUrl == other.CommitUrl ||
                    CommitUrl != null &&
                    CommitUrl.Equals(other.CommitUrl)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    DeploySslUrl == other.DeploySslUrl ||
                    DeploySslUrl != null &&
                    DeploySslUrl.Equals(other.DeploySslUrl)
                ) && 
                (
                    DeployUrl == other.DeployUrl ||
                    DeployUrl != null &&
                    DeployUrl.Equals(other.DeployUrl)
                ) && 
                (
                    Draft == other.Draft ||
                    
                    Draft.Equals(other.Draft)
                ) && 
                (
                    ErrorMessage == other.ErrorMessage ||
                    ErrorMessage != null &&
                    ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    Framework == other.Framework ||
                    Framework != null &&
                    Framework.Equals(other.Framework)
                ) && 
                (
                    FunctionSchedules == other.FunctionSchedules ||
                    FunctionSchedules != null &&
                    other.FunctionSchedules != null &&
                    FunctionSchedules.SequenceEqual(other.FunctionSchedules)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Locked == other.Locked ||
                    
                    Locked.Equals(other.Locked)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PublishedAt == other.PublishedAt ||
                    PublishedAt != null &&
                    PublishedAt.Equals(other.PublishedAt)
                ) && 
                (
                    Required == other.Required ||
                    Required != null &&
                    other.Required != null &&
                    Required.SequenceEqual(other.Required)
                ) && 
                (
                    RequiredFunctions == other.RequiredFunctions ||
                    RequiredFunctions != null &&
                    other.RequiredFunctions != null &&
                    RequiredFunctions.SequenceEqual(other.RequiredFunctions)
                ) && 
                (
                    ReviewId == other.ReviewId ||
                    
                    ReviewId.Equals(other.ReviewId)
                ) && 
                (
                    ReviewUrl == other.ReviewUrl ||
                    ReviewUrl != null &&
                    ReviewUrl.Equals(other.ReviewUrl)
                ) && 
                (
                    ScreenshotUrl == other.ScreenshotUrl ||
                    ScreenshotUrl != null &&
                    ScreenshotUrl.Equals(other.ScreenshotUrl)
                ) && 
                (
                    SiteCapabilities == other.SiteCapabilities ||
                    SiteCapabilities != null &&
                    SiteCapabilities.Equals(other.SiteCapabilities)
                ) && 
                (
                    SiteId == other.SiteId ||
                    SiteId != null &&
                    SiteId.Equals(other.SiteId)
                ) && 
                (
                    Skipped == other.Skipped ||
                    
                    Skipped.Equals(other.Skipped)
                ) && 
                (
                    SslUrl == other.SslUrl ||
                    SslUrl != null &&
                    SslUrl.Equals(other.SslUrl)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AdminUrl != null)
                    hashCode = hashCode * 59 + AdminUrl.GetHashCode();
                    if (Branch != null)
                    hashCode = hashCode * 59 + Branch.GetHashCode();
                    if (BuildId != null)
                    hashCode = hashCode * 59 + BuildId.GetHashCode();
                    if (CommitRef != null)
                    hashCode = hashCode * 59 + CommitRef.GetHashCode();
                    if (CommitUrl != null)
                    hashCode = hashCode * 59 + CommitUrl.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (DeploySslUrl != null)
                    hashCode = hashCode * 59 + DeploySslUrl.GetHashCode();
                    if (DeployUrl != null)
                    hashCode = hashCode * 59 + DeployUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + Draft.GetHashCode();
                    if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                    if (Framework != null)
                    hashCode = hashCode * 59 + Framework.GetHashCode();
                    if (FunctionSchedules != null)
                    hashCode = hashCode * 59 + FunctionSchedules.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Locked.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PublishedAt != null)
                    hashCode = hashCode * 59 + PublishedAt.GetHashCode();
                    if (Required != null)
                    hashCode = hashCode * 59 + Required.GetHashCode();
                    if (RequiredFunctions != null)
                    hashCode = hashCode * 59 + RequiredFunctions.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReviewId.GetHashCode();
                    if (ReviewUrl != null)
                    hashCode = hashCode * 59 + ReviewUrl.GetHashCode();
                    if (ScreenshotUrl != null)
                    hashCode = hashCode * 59 + ScreenshotUrl.GetHashCode();
                    if (SiteCapabilities != null)
                    hashCode = hashCode * 59 + SiteCapabilities.GetHashCode();
                    if (SiteId != null)
                    hashCode = hashCode * 59 + SiteId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Skipped.GetHashCode();
                    if (SslUrl != null)
                    hashCode = hashCode * 59 + SslUrl.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Deploy left, Deploy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Deploy left, Deploy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
