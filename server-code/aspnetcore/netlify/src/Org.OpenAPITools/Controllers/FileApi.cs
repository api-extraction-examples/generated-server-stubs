/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FileApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="siteId"></param>
        /// <param name="filePath"></param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/sites/{site_id}/files/{file_path}")]
        [ValidateModelState]
        [SwaggerOperation("GetSiteFileByPathName")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult GetSiteFileByPathName([FromRoute (Name = "site_id")][Required]string siteId, [FromRoute (Name = "file_path")][Required]string filePath)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"path\" : \"path\",\n  \"size\" : 0,\n  \"mime_type\" : \"mime_type\",\n  \"id\" : \"id\",\n  \"sha\" : \"sha\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="siteId"></param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/sites/{site_id}/files")]
        [ValidateModelState]
        [SwaggerOperation("ListSiteFiles")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<System.IO.Stream>), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult ListSiteFiles([FromRoute (Name = "site_id")][Required]string siteId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<System.IO.Stream>));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"path\" : \"path\",\n  \"size\" : 0,\n  \"mime_type\" : \"mime_type\",\n  \"id\" : \"id\",\n  \"sha\" : \"sha\"\n}, {\n  \"path\" : \"path\",\n  \"size\" : 0,\n  \"mime_type\" : \"mime_type\",\n  \"id\" : \"id\",\n  \"sha\" : \"sha\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<System.IO.Stream>>(exampleJson)
            : default(List<System.IO.Stream>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="deployId"></param>
        /// <param name="path"></param>
        /// <param name="fileBody"></param>
        /// <param name="size"></param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpPut]
        [Route("/api/v1/deploys/{deploy_id}/files/{path}")]
        [Consumes("application/octet-stream")]
        [ValidateModelState]
        [SwaggerOperation("UploadDeployFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult UploadDeployFile([FromRoute (Name = "deploy_id")][Required]string deployId, [FromRoute (Name = "path")][Required]string path, [FromBody]System.IO.Stream fileBody, [FromQuery (Name = "size")]int? size)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"path\" : \"path\",\n  \"size\" : 0,\n  \"mime_type\" : \"mime_type\",\n  \"id\" : \"id\",\n  \"sha\" : \"sha\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
