/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DnsZoneApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="siteId"></param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpPut]
        [Route("/api/v1/sites/{site_id}/dns")]
        [ValidateModelState]
        [SwaggerOperation("ConfigureDNSForSite")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DnsZone>), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult ConfigureDNSForSite([FromRoute (Name = "site_id")][Required]string siteId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DnsZone>));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"dedicated\" : true,\n  \"records\" : [ {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  }, {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  } ],\n  \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ],\n  \"created_at\" : \"created_at\",\n  \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ],\n  \"account_slug\" : \"account_slug\",\n  \"account_id\" : \"account_id\",\n  \"updated_at\" : \"updated_at\",\n  \"user_id\" : \"user_id\",\n  \"account_name\" : \"account_name\",\n  \"domain\" : \"domain\",\n  \"name\" : \"name\",\n  \"site_id\" : \"site_id\",\n  \"ipv6_enabled\" : true,\n  \"id\" : \"id\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}, {\n  \"dedicated\" : true,\n  \"records\" : [ {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  }, {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  } ],\n  \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ],\n  \"created_at\" : \"created_at\",\n  \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ],\n  \"account_slug\" : \"account_slug\",\n  \"account_id\" : \"account_id\",\n  \"updated_at\" : \"updated_at\",\n  \"user_id\" : \"user_id\",\n  \"account_name\" : \"account_name\",\n  \"domain\" : \"domain\",\n  \"name\" : \"name\",\n  \"site_id\" : \"site_id\",\n  \"ipv6_enabled\" : true,\n  \"id\" : \"id\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<DnsZone>>(exampleJson)
            : default(List<DnsZone>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="zoneId"></param>
        /// <param name="dnsRecord"></param>
        /// <response code="201">Created</response>
        /// <response code="0">error</response>
        [HttpPost]
        [Route("/api/v1/dns_zones/{zone_id}/dns_records")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateDnsRecord")]
        [SwaggerResponse(statusCode: 201, type: typeof(DnsRecord), description: "Created")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult CreateDnsRecord([FromRoute (Name = "zone_id")][Required]string zoneId, [FromBody]DnsRecordCreate dnsRecord)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(DnsRecord));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"hostname\" : \"hostname\",\n  \"flag\" : 0,\n  \"managed\" : true,\n  \"site_id\" : \"site_id\",\n  \"dns_zone_id\" : \"dns_zone_id\",\n  \"id\" : \"id\",\n  \"tag\" : \"tag\",\n  \"priority\" : 6,\n  \"type\" : \"type\",\n  \"ttl\" : 1,\n  \"value\" : \"value\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DnsRecord>(exampleJson)
            : default(DnsRecord);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="dnsZoneParams"></param>
        /// <response code="201">Created</response>
        /// <response code="0">error</response>
        [HttpPost]
        [Route("/api/v1/dns_zones")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateDnsZone")]
        [SwaggerResponse(statusCode: 201, type: typeof(DnsZone), description: "Created")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult CreateDnsZone([FromBody]DnsZoneSetup dnsZoneParams)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(DnsZone));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"dedicated\" : true,\n  \"records\" : [ {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  }, {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  } ],\n  \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ],\n  \"created_at\" : \"created_at\",\n  \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ],\n  \"account_slug\" : \"account_slug\",\n  \"account_id\" : \"account_id\",\n  \"updated_at\" : \"updated_at\",\n  \"user_id\" : \"user_id\",\n  \"account_name\" : \"account_name\",\n  \"domain\" : \"domain\",\n  \"name\" : \"name\",\n  \"site_id\" : \"site_id\",\n  \"ipv6_enabled\" : true,\n  \"id\" : \"id\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DnsZone>(exampleJson)
            : default(DnsZone);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="zoneId"></param>
        /// <param name="dnsRecordId"></param>
        /// <response code="204">record deleted</response>
        /// <response code="0">error</response>
        [HttpDelete]
        [Route("/api/v1/dns_zones/{zone_id}/dns_records/{dns_record_id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteDnsRecord")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult DeleteDnsRecord([FromRoute (Name = "zone_id")][Required]string zoneId, [FromRoute (Name = "dns_record_id")][Required]string dnsRecordId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="zoneId"></param>
        /// <response code="204">delete a single DNS zone</response>
        /// <response code="0">error</response>
        [HttpDelete]
        [Route("/api/v1/dns_zones/{zone_id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteDnsZone")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult DeleteDnsZone([FromRoute (Name = "zone_id")][Required]string zoneId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="siteId"></param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/sites/{site_id}/dns")]
        [ValidateModelState]
        [SwaggerOperation("GetDNSForSite")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DnsZone>), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult GetDNSForSite([FromRoute (Name = "site_id")][Required]string siteId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DnsZone>));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"dedicated\" : true,\n  \"records\" : [ {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  }, {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  } ],\n  \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ],\n  \"created_at\" : \"created_at\",\n  \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ],\n  \"account_slug\" : \"account_slug\",\n  \"account_id\" : \"account_id\",\n  \"updated_at\" : \"updated_at\",\n  \"user_id\" : \"user_id\",\n  \"account_name\" : \"account_name\",\n  \"domain\" : \"domain\",\n  \"name\" : \"name\",\n  \"site_id\" : \"site_id\",\n  \"ipv6_enabled\" : true,\n  \"id\" : \"id\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}, {\n  \"dedicated\" : true,\n  \"records\" : [ {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  }, {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  } ],\n  \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ],\n  \"created_at\" : \"created_at\",\n  \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ],\n  \"account_slug\" : \"account_slug\",\n  \"account_id\" : \"account_id\",\n  \"updated_at\" : \"updated_at\",\n  \"user_id\" : \"user_id\",\n  \"account_name\" : \"account_name\",\n  \"domain\" : \"domain\",\n  \"name\" : \"name\",\n  \"site_id\" : \"site_id\",\n  \"ipv6_enabled\" : true,\n  \"id\" : \"id\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<DnsZone>>(exampleJson)
            : default(List<DnsZone>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="zoneId"></param>
        /// <response code="200">get all DNS records for a single DNS zone</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/dns_zones/{zone_id}/dns_records")]
        [ValidateModelState]
        [SwaggerOperation("GetDnsRecords")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DnsRecord>), description: "get all DNS records for a single DNS zone")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult GetDnsRecords([FromRoute (Name = "zone_id")][Required]string zoneId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DnsRecord>));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"hostname\" : \"hostname\",\n  \"flag\" : 0,\n  \"managed\" : true,\n  \"site_id\" : \"site_id\",\n  \"dns_zone_id\" : \"dns_zone_id\",\n  \"id\" : \"id\",\n  \"tag\" : \"tag\",\n  \"priority\" : 6,\n  \"type\" : \"type\",\n  \"ttl\" : 1,\n  \"value\" : \"value\"\n}, {\n  \"hostname\" : \"hostname\",\n  \"flag\" : 0,\n  \"managed\" : true,\n  \"site_id\" : \"site_id\",\n  \"dns_zone_id\" : \"dns_zone_id\",\n  \"id\" : \"id\",\n  \"tag\" : \"tag\",\n  \"priority\" : 6,\n  \"type\" : \"type\",\n  \"ttl\" : 1,\n  \"value\" : \"value\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<DnsRecord>>(exampleJson)
            : default(List<DnsRecord>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="zoneId"></param>
        /// <response code="200">get a single DNS zone</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/dns_zones/{zone_id}")]
        [ValidateModelState]
        [SwaggerOperation("GetDnsZone")]
        [SwaggerResponse(statusCode: 200, type: typeof(DnsZone), description: "get a single DNS zone")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult GetDnsZone([FromRoute (Name = "zone_id")][Required]string zoneId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DnsZone));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"dedicated\" : true,\n  \"records\" : [ {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  }, {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  } ],\n  \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ],\n  \"created_at\" : \"created_at\",\n  \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ],\n  \"account_slug\" : \"account_slug\",\n  \"account_id\" : \"account_id\",\n  \"updated_at\" : \"updated_at\",\n  \"user_id\" : \"user_id\",\n  \"account_name\" : \"account_name\",\n  \"domain\" : \"domain\",\n  \"name\" : \"name\",\n  \"site_id\" : \"site_id\",\n  \"ipv6_enabled\" : true,\n  \"id\" : \"id\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DnsZone>(exampleJson)
            : default(DnsZone);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="accountSlug"></param>
        /// <response code="200">get all DNS zones the user has access to</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/dns_zones")]
        [ValidateModelState]
        [SwaggerOperation("GetDnsZones")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DnsZone>), description: "get all DNS zones the user has access to")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult GetDnsZones([FromQuery (Name = "account_slug")]string accountSlug)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DnsZone>));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"dedicated\" : true,\n  \"records\" : [ {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  }, {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  } ],\n  \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ],\n  \"created_at\" : \"created_at\",\n  \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ],\n  \"account_slug\" : \"account_slug\",\n  \"account_id\" : \"account_id\",\n  \"updated_at\" : \"updated_at\",\n  \"user_id\" : \"user_id\",\n  \"account_name\" : \"account_name\",\n  \"domain\" : \"domain\",\n  \"name\" : \"name\",\n  \"site_id\" : \"site_id\",\n  \"ipv6_enabled\" : true,\n  \"id\" : \"id\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}, {\n  \"dedicated\" : true,\n  \"records\" : [ {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  }, {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  } ],\n  \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ],\n  \"created_at\" : \"created_at\",\n  \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ],\n  \"account_slug\" : \"account_slug\",\n  \"account_id\" : \"account_id\",\n  \"updated_at\" : \"updated_at\",\n  \"user_id\" : \"user_id\",\n  \"account_name\" : \"account_name\",\n  \"domain\" : \"domain\",\n  \"name\" : \"name\",\n  \"site_id\" : \"site_id\",\n  \"ipv6_enabled\" : true,\n  \"id\" : \"id\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<DnsZone>>(exampleJson)
            : default(List<DnsZone>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="zoneId"></param>
        /// <param name="dnsRecordId"></param>
        /// <response code="200">get a single DNS record</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/dns_zones/{zone_id}/dns_records/{dns_record_id}")]
        [ValidateModelState]
        [SwaggerOperation("GetIndividualDnsRecord")]
        [SwaggerResponse(statusCode: 200, type: typeof(DnsRecord), description: "get a single DNS record")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult GetIndividualDnsRecord([FromRoute (Name = "zone_id")][Required]string zoneId, [FromRoute (Name = "dns_record_id")][Required]string dnsRecordId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DnsRecord));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"hostname\" : \"hostname\",\n  \"flag\" : 0,\n  \"managed\" : true,\n  \"site_id\" : \"site_id\",\n  \"dns_zone_id\" : \"dns_zone_id\",\n  \"id\" : \"id\",\n  \"tag\" : \"tag\",\n  \"priority\" : 6,\n  \"type\" : \"type\",\n  \"ttl\" : 1,\n  \"value\" : \"value\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DnsRecord>(exampleJson)
            : default(DnsRecord);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="zoneId"></param>
        /// <param name="accountId">the account of the dns zone</param>
        /// <param name="transferAccountId">the account you want to transfer the dns zone to</param>
        /// <param name="transferUserId">the user you want to transfer the dns zone to</param>
        /// <response code="200">transfer a DNS zone to another account</response>
        /// <response code="0">error</response>
        [HttpPut]
        [Route("/api/v1/dns_zones/{zone_id}/transfer")]
        [ValidateModelState]
        [SwaggerOperation("TransferDnsZone")]
        [SwaggerResponse(statusCode: 200, type: typeof(DnsZone), description: "transfer a DNS zone to another account")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult TransferDnsZone([FromRoute (Name = "zone_id")][Required]string zoneId, [FromQuery (Name = "account_id")][Required()]string accountId, [FromQuery (Name = "transfer_account_id")][Required()]string transferAccountId, [FromQuery (Name = "transfer_user_id")][Required()]string transferUserId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DnsZone));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"dedicated\" : true,\n  \"records\" : [ {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  }, {\n    \"hostname\" : \"hostname\",\n    \"flag\" : 0,\n    \"managed\" : true,\n    \"site_id\" : \"site_id\",\n    \"dns_zone_id\" : \"dns_zone_id\",\n    \"id\" : \"id\",\n    \"tag\" : \"tag\",\n    \"priority\" : 6,\n    \"type\" : \"type\",\n    \"ttl\" : 1,\n    \"value\" : \"value\"\n  } ],\n  \"supported_record_types\" : [ \"supported_record_types\", \"supported_record_types\" ],\n  \"created_at\" : \"created_at\",\n  \"dns_servers\" : [ \"dns_servers\", \"dns_servers\" ],\n  \"account_slug\" : \"account_slug\",\n  \"account_id\" : \"account_id\",\n  \"updated_at\" : \"updated_at\",\n  \"user_id\" : \"user_id\",\n  \"account_name\" : \"account_name\",\n  \"domain\" : \"domain\",\n  \"name\" : \"name\",\n  \"site_id\" : \"site_id\",\n  \"ipv6_enabled\" : true,\n  \"id\" : \"id\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DnsZone>(exampleJson)
            : default(DnsZone);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
