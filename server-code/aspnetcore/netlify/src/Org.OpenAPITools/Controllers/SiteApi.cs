/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SiteApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>**Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.</remarks>
        /// <param name="site"></param>
        /// <param name="configureDns"></param>
        /// <response code="201">Created</response>
        /// <response code="0">error</response>
        [HttpPost]
        [Route("/api/v1/sites")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateSite")]
        [SwaggerResponse(statusCode: 201, type: typeof(Site), description: "Created")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult CreateSite([FromBody]SiteSetup site, [FromQuery (Name = "configure_dns")]bool? configureDns)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Site));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"id_domain\" : \"id_domain\",\n  \"deploy_hook\" : \"deploy_hook\",\n  \"deploy_url\" : \"deploy_url\",\n  \"created_at\" : \"created_at\",\n  \"ssl\" : true,\n  \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ],\n  \"password\" : \"password\",\n  \"updated_at\" : \"updated_at\",\n  \"account_name\" : \"account_name\",\n  \"id\" : \"id\",\n  \"published_deploy\" : {\n    \"review_id\" : 0.8008281904610115,\n    \"deploy_url\" : \"deploy_url\",\n    \"review_url\" : \"review_url\",\n    \"created_at\" : \"created_at\",\n    \"title\" : \"title\",\n    \"branch\" : \"branch\",\n    \"required\" : [ \"required\", \"required\" ],\n    \"skipped\" : true,\n    \"commit_url\" : \"commit_url\",\n    \"updated_at\" : \"updated_at\",\n    \"draft\" : true,\n    \"context\" : \"context\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"locked\" : true,\n    \"published_at\" : \"published_at\",\n    \"error_message\" : \"error_message\",\n    \"function_schedules\" : [ {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    }, {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    } ],\n    \"admin_url\" : \"admin_url\",\n    \"site_capabilities\" : {\n      \"large_media_enabled\" : true\n    },\n    \"url\" : \"url\",\n    \"framework\" : \"framework\",\n    \"ssl_url\" : \"ssl_url\",\n    \"build_id\" : \"build_id\",\n    \"deploy_ssl_url\" : \"deploy_ssl_url\",\n    \"user_id\" : \"user_id\",\n    \"name\" : \"name\",\n    \"site_id\" : \"site_id\",\n    \"required_functions\" : [ \"required_functions\", \"required_functions\" ],\n    \"screenshot_url\" : \"screenshot_url\",\n    \"commit_ref\" : \"commit_ref\"\n  },\n  \"state\" : \"state\",\n  \"custom_domain\" : \"custom_domain\",\n  \"default_hooks_data\" : {\n    \"access_token\" : \"access_token\"\n  },\n  \"plan\" : \"plan\",\n  \"managed_dns\" : true,\n  \"force_ssl\" : true,\n  \"capabilities\" : {\n    \"key\" : \"{}\"\n  },\n  \"notification_email\" : \"notification_email\",\n  \"git_provider\" : \"git_provider\",\n  \"session_id\" : \"session_id\",\n  \"admin_url\" : \"admin_url\",\n  \"build_settings\" : {\n    \"repo_url\" : \"repo_url\",\n    \"stop_builds\" : true,\n    \"deploy_key_id\" : \"deploy_key_id\",\n    \"installation_id\" : 6,\n    \"dir\" : \"dir\",\n    \"env\" : {\n      \"key\" : \"env\"\n    },\n    \"repo_branch\" : \"repo_branch\",\n    \"private_logs\" : true,\n    \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ],\n    \"functions_dir\" : \"functions_dir\",\n    \"repo_path\" : \"repo_path\",\n    \"provider\" : \"provider\",\n    \"public_repo\" : true,\n    \"cmd\" : \"cmd\",\n    \"id\" : 0\n  },\n  \"prerender\" : \"prerender\",\n  \"url\" : \"url\",\n  \"account_slug\" : \"account_slug\",\n  \"ssl_url\" : \"ssl_url\",\n  \"user_id\" : \"user_id\",\n  \"name\" : \"name\",\n  \"build_image\" : \"build_image\",\n  \"processing_settings\" : {\n    \"css\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"images\" : {\n      \"optimize\" : true\n    },\n    \"js\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"html\" : {\n      \"pretty_urls\" : true\n    },\n    \"skip\" : true\n  },\n  \"screenshot_url\" : \"screenshot_url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Site>(exampleJson)
            : default(Site);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>**Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.</remarks>
        /// <param name="accountSlug"></param>
        /// <param name="configureDns"></param>
        /// <param name="site"></param>
        /// <response code="201">Created</response>
        /// <response code="0">error</response>
        [HttpPost]
        [Route("/api/v1/{account_slug}/sites")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateSiteInTeam")]
        [SwaggerResponse(statusCode: 201, type: typeof(Site), description: "Created")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult CreateSiteInTeam([FromRoute (Name = "account_slug")][Required]string accountSlug, [FromQuery (Name = "configure_dns")]bool? configureDns, [FromBody]SiteSetup site)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Site));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"id_domain\" : \"id_domain\",\n  \"deploy_hook\" : \"deploy_hook\",\n  \"deploy_url\" : \"deploy_url\",\n  \"created_at\" : \"created_at\",\n  \"ssl\" : true,\n  \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ],\n  \"password\" : \"password\",\n  \"updated_at\" : \"updated_at\",\n  \"account_name\" : \"account_name\",\n  \"id\" : \"id\",\n  \"published_deploy\" : {\n    \"review_id\" : 0.8008281904610115,\n    \"deploy_url\" : \"deploy_url\",\n    \"review_url\" : \"review_url\",\n    \"created_at\" : \"created_at\",\n    \"title\" : \"title\",\n    \"branch\" : \"branch\",\n    \"required\" : [ \"required\", \"required\" ],\n    \"skipped\" : true,\n    \"commit_url\" : \"commit_url\",\n    \"updated_at\" : \"updated_at\",\n    \"draft\" : true,\n    \"context\" : \"context\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"locked\" : true,\n    \"published_at\" : \"published_at\",\n    \"error_message\" : \"error_message\",\n    \"function_schedules\" : [ {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    }, {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    } ],\n    \"admin_url\" : \"admin_url\",\n    \"site_capabilities\" : {\n      \"large_media_enabled\" : true\n    },\n    \"url\" : \"url\",\n    \"framework\" : \"framework\",\n    \"ssl_url\" : \"ssl_url\",\n    \"build_id\" : \"build_id\",\n    \"deploy_ssl_url\" : \"deploy_ssl_url\",\n    \"user_id\" : \"user_id\",\n    \"name\" : \"name\",\n    \"site_id\" : \"site_id\",\n    \"required_functions\" : [ \"required_functions\", \"required_functions\" ],\n    \"screenshot_url\" : \"screenshot_url\",\n    \"commit_ref\" : \"commit_ref\"\n  },\n  \"state\" : \"state\",\n  \"custom_domain\" : \"custom_domain\",\n  \"default_hooks_data\" : {\n    \"access_token\" : \"access_token\"\n  },\n  \"plan\" : \"plan\",\n  \"managed_dns\" : true,\n  \"force_ssl\" : true,\n  \"capabilities\" : {\n    \"key\" : \"{}\"\n  },\n  \"notification_email\" : \"notification_email\",\n  \"git_provider\" : \"git_provider\",\n  \"session_id\" : \"session_id\",\n  \"admin_url\" : \"admin_url\",\n  \"build_settings\" : {\n    \"repo_url\" : \"repo_url\",\n    \"stop_builds\" : true,\n    \"deploy_key_id\" : \"deploy_key_id\",\n    \"installation_id\" : 6,\n    \"dir\" : \"dir\",\n    \"env\" : {\n      \"key\" : \"env\"\n    },\n    \"repo_branch\" : \"repo_branch\",\n    \"private_logs\" : true,\n    \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ],\n    \"functions_dir\" : \"functions_dir\",\n    \"repo_path\" : \"repo_path\",\n    \"provider\" : \"provider\",\n    \"public_repo\" : true,\n    \"cmd\" : \"cmd\",\n    \"id\" : 0\n  },\n  \"prerender\" : \"prerender\",\n  \"url\" : \"url\",\n  \"account_slug\" : \"account_slug\",\n  \"ssl_url\" : \"ssl_url\",\n  \"user_id\" : \"user_id\",\n  \"name\" : \"name\",\n  \"build_image\" : \"build_image\",\n  \"processing_settings\" : {\n    \"css\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"images\" : {\n      \"optimize\" : true\n    },\n    \"js\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"html\" : {\n      \"pretty_urls\" : true\n    },\n    \"skip\" : true\n  },\n  \"screenshot_url\" : \"screenshot_url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Site>(exampleJson)
            : default(Site);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="siteId"></param>
        /// <response code="204">Deleted</response>
        /// <response code="0">error</response>
        [HttpDelete]
        [Route("/api/v1/sites/{site_id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSite")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult DeleteSite([FromRoute (Name = "site_id")][Required]string siteId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>**Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.</remarks>
        /// <param name="siteId"></param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/sites/{site_id}")]
        [ValidateModelState]
        [SwaggerOperation("GetSite")]
        [SwaggerResponse(statusCode: 200, type: typeof(Site), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult GetSite([FromRoute (Name = "site_id")][Required]string siteId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Site));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"id_domain\" : \"id_domain\",\n  \"deploy_hook\" : \"deploy_hook\",\n  \"deploy_url\" : \"deploy_url\",\n  \"created_at\" : \"created_at\",\n  \"ssl\" : true,\n  \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ],\n  \"password\" : \"password\",\n  \"updated_at\" : \"updated_at\",\n  \"account_name\" : \"account_name\",\n  \"id\" : \"id\",\n  \"published_deploy\" : {\n    \"review_id\" : 0.8008281904610115,\n    \"deploy_url\" : \"deploy_url\",\n    \"review_url\" : \"review_url\",\n    \"created_at\" : \"created_at\",\n    \"title\" : \"title\",\n    \"branch\" : \"branch\",\n    \"required\" : [ \"required\", \"required\" ],\n    \"skipped\" : true,\n    \"commit_url\" : \"commit_url\",\n    \"updated_at\" : \"updated_at\",\n    \"draft\" : true,\n    \"context\" : \"context\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"locked\" : true,\n    \"published_at\" : \"published_at\",\n    \"error_message\" : \"error_message\",\n    \"function_schedules\" : [ {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    }, {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    } ],\n    \"admin_url\" : \"admin_url\",\n    \"site_capabilities\" : {\n      \"large_media_enabled\" : true\n    },\n    \"url\" : \"url\",\n    \"framework\" : \"framework\",\n    \"ssl_url\" : \"ssl_url\",\n    \"build_id\" : \"build_id\",\n    \"deploy_ssl_url\" : \"deploy_ssl_url\",\n    \"user_id\" : \"user_id\",\n    \"name\" : \"name\",\n    \"site_id\" : \"site_id\",\n    \"required_functions\" : [ \"required_functions\", \"required_functions\" ],\n    \"screenshot_url\" : \"screenshot_url\",\n    \"commit_ref\" : \"commit_ref\"\n  },\n  \"state\" : \"state\",\n  \"custom_domain\" : \"custom_domain\",\n  \"default_hooks_data\" : {\n    \"access_token\" : \"access_token\"\n  },\n  \"plan\" : \"plan\",\n  \"managed_dns\" : true,\n  \"force_ssl\" : true,\n  \"capabilities\" : {\n    \"key\" : \"{}\"\n  },\n  \"notification_email\" : \"notification_email\",\n  \"git_provider\" : \"git_provider\",\n  \"session_id\" : \"session_id\",\n  \"admin_url\" : \"admin_url\",\n  \"build_settings\" : {\n    \"repo_url\" : \"repo_url\",\n    \"stop_builds\" : true,\n    \"deploy_key_id\" : \"deploy_key_id\",\n    \"installation_id\" : 6,\n    \"dir\" : \"dir\",\n    \"env\" : {\n      \"key\" : \"env\"\n    },\n    \"repo_branch\" : \"repo_branch\",\n    \"private_logs\" : true,\n    \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ],\n    \"functions_dir\" : \"functions_dir\",\n    \"repo_path\" : \"repo_path\",\n    \"provider\" : \"provider\",\n    \"public_repo\" : true,\n    \"cmd\" : \"cmd\",\n    \"id\" : 0\n  },\n  \"prerender\" : \"prerender\",\n  \"url\" : \"url\",\n  \"account_slug\" : \"account_slug\",\n  \"ssl_url\" : \"ssl_url\",\n  \"user_id\" : \"user_id\",\n  \"name\" : \"name\",\n  \"build_image\" : \"build_image\",\n  \"processing_settings\" : {\n    \"css\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"images\" : {\n      \"optimize\" : true\n    },\n    \"js\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"html\" : {\n      \"pretty_urls\" : true\n    },\n    \"skip\" : true\n  },\n  \"screenshot_url\" : \"screenshot_url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Site>(exampleJson)
            : default(Site);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>**Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.</remarks>
        /// <param name="name"></param>
        /// <param name="filter"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/sites")]
        [ValidateModelState]
        [SwaggerOperation("ListSites")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Site>), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult ListSites([FromQuery (Name = "name")]string name, [FromQuery (Name = "filter")]string filter, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "per_page")]int? perPage)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Site>));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"id_domain\" : \"id_domain\",\n  \"deploy_hook\" : \"deploy_hook\",\n  \"deploy_url\" : \"deploy_url\",\n  \"created_at\" : \"created_at\",\n  \"ssl\" : true,\n  \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ],\n  \"password\" : \"password\",\n  \"updated_at\" : \"updated_at\",\n  \"account_name\" : \"account_name\",\n  \"id\" : \"id\",\n  \"published_deploy\" : {\n    \"review_id\" : 0.8008281904610115,\n    \"deploy_url\" : \"deploy_url\",\n    \"review_url\" : \"review_url\",\n    \"created_at\" : \"created_at\",\n    \"title\" : \"title\",\n    \"branch\" : \"branch\",\n    \"required\" : [ \"required\", \"required\" ],\n    \"skipped\" : true,\n    \"commit_url\" : \"commit_url\",\n    \"updated_at\" : \"updated_at\",\n    \"draft\" : true,\n    \"context\" : \"context\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"locked\" : true,\n    \"published_at\" : \"published_at\",\n    \"error_message\" : \"error_message\",\n    \"function_schedules\" : [ {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    }, {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    } ],\n    \"admin_url\" : \"admin_url\",\n    \"site_capabilities\" : {\n      \"large_media_enabled\" : true\n    },\n    \"url\" : \"url\",\n    \"framework\" : \"framework\",\n    \"ssl_url\" : \"ssl_url\",\n    \"build_id\" : \"build_id\",\n    \"deploy_ssl_url\" : \"deploy_ssl_url\",\n    \"user_id\" : \"user_id\",\n    \"name\" : \"name\",\n    \"site_id\" : \"site_id\",\n    \"required_functions\" : [ \"required_functions\", \"required_functions\" ],\n    \"screenshot_url\" : \"screenshot_url\",\n    \"commit_ref\" : \"commit_ref\"\n  },\n  \"state\" : \"state\",\n  \"custom_domain\" : \"custom_domain\",\n  \"default_hooks_data\" : {\n    \"access_token\" : \"access_token\"\n  },\n  \"plan\" : \"plan\",\n  \"managed_dns\" : true,\n  \"force_ssl\" : true,\n  \"capabilities\" : {\n    \"key\" : \"{}\"\n  },\n  \"notification_email\" : \"notification_email\",\n  \"git_provider\" : \"git_provider\",\n  \"session_id\" : \"session_id\",\n  \"admin_url\" : \"admin_url\",\n  \"build_settings\" : {\n    \"repo_url\" : \"repo_url\",\n    \"stop_builds\" : true,\n    \"deploy_key_id\" : \"deploy_key_id\",\n    \"installation_id\" : 6,\n    \"dir\" : \"dir\",\n    \"env\" : {\n      \"key\" : \"env\"\n    },\n    \"repo_branch\" : \"repo_branch\",\n    \"private_logs\" : true,\n    \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ],\n    \"functions_dir\" : \"functions_dir\",\n    \"repo_path\" : \"repo_path\",\n    \"provider\" : \"provider\",\n    \"public_repo\" : true,\n    \"cmd\" : \"cmd\",\n    \"id\" : 0\n  },\n  \"prerender\" : \"prerender\",\n  \"url\" : \"url\",\n  \"account_slug\" : \"account_slug\",\n  \"ssl_url\" : \"ssl_url\",\n  \"user_id\" : \"user_id\",\n  \"name\" : \"name\",\n  \"build_image\" : \"build_image\",\n  \"processing_settings\" : {\n    \"css\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"images\" : {\n      \"optimize\" : true\n    },\n    \"js\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"html\" : {\n      \"pretty_urls\" : true\n    },\n    \"skip\" : true\n  },\n  \"screenshot_url\" : \"screenshot_url\"\n}, {\n  \"id_domain\" : \"id_domain\",\n  \"deploy_hook\" : \"deploy_hook\",\n  \"deploy_url\" : \"deploy_url\",\n  \"created_at\" : \"created_at\",\n  \"ssl\" : true,\n  \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ],\n  \"password\" : \"password\",\n  \"updated_at\" : \"updated_at\",\n  \"account_name\" : \"account_name\",\n  \"id\" : \"id\",\n  \"published_deploy\" : {\n    \"review_id\" : 0.8008281904610115,\n    \"deploy_url\" : \"deploy_url\",\n    \"review_url\" : \"review_url\",\n    \"created_at\" : \"created_at\",\n    \"title\" : \"title\",\n    \"branch\" : \"branch\",\n    \"required\" : [ \"required\", \"required\" ],\n    \"skipped\" : true,\n    \"commit_url\" : \"commit_url\",\n    \"updated_at\" : \"updated_at\",\n    \"draft\" : true,\n    \"context\" : \"context\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"locked\" : true,\n    \"published_at\" : \"published_at\",\n    \"error_message\" : \"error_message\",\n    \"function_schedules\" : [ {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    }, {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    } ],\n    \"admin_url\" : \"admin_url\",\n    \"site_capabilities\" : {\n      \"large_media_enabled\" : true\n    },\n    \"url\" : \"url\",\n    \"framework\" : \"framework\",\n    \"ssl_url\" : \"ssl_url\",\n    \"build_id\" : \"build_id\",\n    \"deploy_ssl_url\" : \"deploy_ssl_url\",\n    \"user_id\" : \"user_id\",\n    \"name\" : \"name\",\n    \"site_id\" : \"site_id\",\n    \"required_functions\" : [ \"required_functions\", \"required_functions\" ],\n    \"screenshot_url\" : \"screenshot_url\",\n    \"commit_ref\" : \"commit_ref\"\n  },\n  \"state\" : \"state\",\n  \"custom_domain\" : \"custom_domain\",\n  \"default_hooks_data\" : {\n    \"access_token\" : \"access_token\"\n  },\n  \"plan\" : \"plan\",\n  \"managed_dns\" : true,\n  \"force_ssl\" : true,\n  \"capabilities\" : {\n    \"key\" : \"{}\"\n  },\n  \"notification_email\" : \"notification_email\",\n  \"git_provider\" : \"git_provider\",\n  \"session_id\" : \"session_id\",\n  \"admin_url\" : \"admin_url\",\n  \"build_settings\" : {\n    \"repo_url\" : \"repo_url\",\n    \"stop_builds\" : true,\n    \"deploy_key_id\" : \"deploy_key_id\",\n    \"installation_id\" : 6,\n    \"dir\" : \"dir\",\n    \"env\" : {\n      \"key\" : \"env\"\n    },\n    \"repo_branch\" : \"repo_branch\",\n    \"private_logs\" : true,\n    \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ],\n    \"functions_dir\" : \"functions_dir\",\n    \"repo_path\" : \"repo_path\",\n    \"provider\" : \"provider\",\n    \"public_repo\" : true,\n    \"cmd\" : \"cmd\",\n    \"id\" : 0\n  },\n  \"prerender\" : \"prerender\",\n  \"url\" : \"url\",\n  \"account_slug\" : \"account_slug\",\n  \"ssl_url\" : \"ssl_url\",\n  \"user_id\" : \"user_id\",\n  \"name\" : \"name\",\n  \"build_image\" : \"build_image\",\n  \"processing_settings\" : {\n    \"css\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"images\" : {\n      \"optimize\" : true\n    },\n    \"js\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"html\" : {\n      \"pretty_urls\" : true\n    },\n    \"skip\" : true\n  },\n  \"screenshot_url\" : \"screenshot_url\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Site>>(exampleJson)
            : default(List<Site>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>**Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.</remarks>
        /// <param name="accountSlug"></param>
        /// <param name="name"></param>
        /// <param name="page"></param>
        /// <param name="perPage"></param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/{account_slug}/sites")]
        [ValidateModelState]
        [SwaggerOperation("ListSitesForAccount")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Site>), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult ListSitesForAccount([FromRoute (Name = "account_slug")][Required]string accountSlug, [FromQuery (Name = "name")]string name, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "per_page")]int? perPage)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Site>));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"id_domain\" : \"id_domain\",\n  \"deploy_hook\" : \"deploy_hook\",\n  \"deploy_url\" : \"deploy_url\",\n  \"created_at\" : \"created_at\",\n  \"ssl\" : true,\n  \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ],\n  \"password\" : \"password\",\n  \"updated_at\" : \"updated_at\",\n  \"account_name\" : \"account_name\",\n  \"id\" : \"id\",\n  \"published_deploy\" : {\n    \"review_id\" : 0.8008281904610115,\n    \"deploy_url\" : \"deploy_url\",\n    \"review_url\" : \"review_url\",\n    \"created_at\" : \"created_at\",\n    \"title\" : \"title\",\n    \"branch\" : \"branch\",\n    \"required\" : [ \"required\", \"required\" ],\n    \"skipped\" : true,\n    \"commit_url\" : \"commit_url\",\n    \"updated_at\" : \"updated_at\",\n    \"draft\" : true,\n    \"context\" : \"context\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"locked\" : true,\n    \"published_at\" : \"published_at\",\n    \"error_message\" : \"error_message\",\n    \"function_schedules\" : [ {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    }, {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    } ],\n    \"admin_url\" : \"admin_url\",\n    \"site_capabilities\" : {\n      \"large_media_enabled\" : true\n    },\n    \"url\" : \"url\",\n    \"framework\" : \"framework\",\n    \"ssl_url\" : \"ssl_url\",\n    \"build_id\" : \"build_id\",\n    \"deploy_ssl_url\" : \"deploy_ssl_url\",\n    \"user_id\" : \"user_id\",\n    \"name\" : \"name\",\n    \"site_id\" : \"site_id\",\n    \"required_functions\" : [ \"required_functions\", \"required_functions\" ],\n    \"screenshot_url\" : \"screenshot_url\",\n    \"commit_ref\" : \"commit_ref\"\n  },\n  \"state\" : \"state\",\n  \"custom_domain\" : \"custom_domain\",\n  \"default_hooks_data\" : {\n    \"access_token\" : \"access_token\"\n  },\n  \"plan\" : \"plan\",\n  \"managed_dns\" : true,\n  \"force_ssl\" : true,\n  \"capabilities\" : {\n    \"key\" : \"{}\"\n  },\n  \"notification_email\" : \"notification_email\",\n  \"git_provider\" : \"git_provider\",\n  \"session_id\" : \"session_id\",\n  \"admin_url\" : \"admin_url\",\n  \"build_settings\" : {\n    \"repo_url\" : \"repo_url\",\n    \"stop_builds\" : true,\n    \"deploy_key_id\" : \"deploy_key_id\",\n    \"installation_id\" : 6,\n    \"dir\" : \"dir\",\n    \"env\" : {\n      \"key\" : \"env\"\n    },\n    \"repo_branch\" : \"repo_branch\",\n    \"private_logs\" : true,\n    \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ],\n    \"functions_dir\" : \"functions_dir\",\n    \"repo_path\" : \"repo_path\",\n    \"provider\" : \"provider\",\n    \"public_repo\" : true,\n    \"cmd\" : \"cmd\",\n    \"id\" : 0\n  },\n  \"prerender\" : \"prerender\",\n  \"url\" : \"url\",\n  \"account_slug\" : \"account_slug\",\n  \"ssl_url\" : \"ssl_url\",\n  \"user_id\" : \"user_id\",\n  \"name\" : \"name\",\n  \"build_image\" : \"build_image\",\n  \"processing_settings\" : {\n    \"css\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"images\" : {\n      \"optimize\" : true\n    },\n    \"js\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"html\" : {\n      \"pretty_urls\" : true\n    },\n    \"skip\" : true\n  },\n  \"screenshot_url\" : \"screenshot_url\"\n}, {\n  \"id_domain\" : \"id_domain\",\n  \"deploy_hook\" : \"deploy_hook\",\n  \"deploy_url\" : \"deploy_url\",\n  \"created_at\" : \"created_at\",\n  \"ssl\" : true,\n  \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ],\n  \"password\" : \"password\",\n  \"updated_at\" : \"updated_at\",\n  \"account_name\" : \"account_name\",\n  \"id\" : \"id\",\n  \"published_deploy\" : {\n    \"review_id\" : 0.8008281904610115,\n    \"deploy_url\" : \"deploy_url\",\n    \"review_url\" : \"review_url\",\n    \"created_at\" : \"created_at\",\n    \"title\" : \"title\",\n    \"branch\" : \"branch\",\n    \"required\" : [ \"required\", \"required\" ],\n    \"skipped\" : true,\n    \"commit_url\" : \"commit_url\",\n    \"updated_at\" : \"updated_at\",\n    \"draft\" : true,\n    \"context\" : \"context\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"locked\" : true,\n    \"published_at\" : \"published_at\",\n    \"error_message\" : \"error_message\",\n    \"function_schedules\" : [ {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    }, {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    } ],\n    \"admin_url\" : \"admin_url\",\n    \"site_capabilities\" : {\n      \"large_media_enabled\" : true\n    },\n    \"url\" : \"url\",\n    \"framework\" : \"framework\",\n    \"ssl_url\" : \"ssl_url\",\n    \"build_id\" : \"build_id\",\n    \"deploy_ssl_url\" : \"deploy_ssl_url\",\n    \"user_id\" : \"user_id\",\n    \"name\" : \"name\",\n    \"site_id\" : \"site_id\",\n    \"required_functions\" : [ \"required_functions\", \"required_functions\" ],\n    \"screenshot_url\" : \"screenshot_url\",\n    \"commit_ref\" : \"commit_ref\"\n  },\n  \"state\" : \"state\",\n  \"custom_domain\" : \"custom_domain\",\n  \"default_hooks_data\" : {\n    \"access_token\" : \"access_token\"\n  },\n  \"plan\" : \"plan\",\n  \"managed_dns\" : true,\n  \"force_ssl\" : true,\n  \"capabilities\" : {\n    \"key\" : \"{}\"\n  },\n  \"notification_email\" : \"notification_email\",\n  \"git_provider\" : \"git_provider\",\n  \"session_id\" : \"session_id\",\n  \"admin_url\" : \"admin_url\",\n  \"build_settings\" : {\n    \"repo_url\" : \"repo_url\",\n    \"stop_builds\" : true,\n    \"deploy_key_id\" : \"deploy_key_id\",\n    \"installation_id\" : 6,\n    \"dir\" : \"dir\",\n    \"env\" : {\n      \"key\" : \"env\"\n    },\n    \"repo_branch\" : \"repo_branch\",\n    \"private_logs\" : true,\n    \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ],\n    \"functions_dir\" : \"functions_dir\",\n    \"repo_path\" : \"repo_path\",\n    \"provider\" : \"provider\",\n    \"public_repo\" : true,\n    \"cmd\" : \"cmd\",\n    \"id\" : 0\n  },\n  \"prerender\" : \"prerender\",\n  \"url\" : \"url\",\n  \"account_slug\" : \"account_slug\",\n  \"ssl_url\" : \"ssl_url\",\n  \"user_id\" : \"user_id\",\n  \"name\" : \"name\",\n  \"build_image\" : \"build_image\",\n  \"processing_settings\" : {\n    \"css\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"images\" : {\n      \"optimize\" : true\n    },\n    \"js\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"html\" : {\n      \"pretty_urls\" : true\n    },\n    \"skip\" : true\n  },\n  \"screenshot_url\" : \"screenshot_url\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Site>>(exampleJson)
            : default(List<Site>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>[Beta] Unlinks the repo from the site.  This action will also: - Delete associated deploy keys - Delete outgoing webhooks for the repo - Delete the site&#39;s build hooks</remarks>
        /// <param name="siteId"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Site not found</response>
        [HttpPut]
        [Route("/api/v1/sites/{site_id}/unlink_repo")]
        [ValidateModelState]
        [SwaggerOperation("UnlinkSiteRepo")]
        [SwaggerResponse(statusCode: 200, type: typeof(Site), description: "OK")]
        public virtual IActionResult UnlinkSiteRepo([FromRoute (Name = "site_id")][Required]string siteId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Site));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id_domain\" : \"id_domain\",\n  \"deploy_hook\" : \"deploy_hook\",\n  \"deploy_url\" : \"deploy_url\",\n  \"created_at\" : \"created_at\",\n  \"ssl\" : true,\n  \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ],\n  \"password\" : \"password\",\n  \"updated_at\" : \"updated_at\",\n  \"account_name\" : \"account_name\",\n  \"id\" : \"id\",\n  \"published_deploy\" : {\n    \"review_id\" : 0.8008281904610115,\n    \"deploy_url\" : \"deploy_url\",\n    \"review_url\" : \"review_url\",\n    \"created_at\" : \"created_at\",\n    \"title\" : \"title\",\n    \"branch\" : \"branch\",\n    \"required\" : [ \"required\", \"required\" ],\n    \"skipped\" : true,\n    \"commit_url\" : \"commit_url\",\n    \"updated_at\" : \"updated_at\",\n    \"draft\" : true,\n    \"context\" : \"context\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"locked\" : true,\n    \"published_at\" : \"published_at\",\n    \"error_message\" : \"error_message\",\n    \"function_schedules\" : [ {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    }, {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    } ],\n    \"admin_url\" : \"admin_url\",\n    \"site_capabilities\" : {\n      \"large_media_enabled\" : true\n    },\n    \"url\" : \"url\",\n    \"framework\" : \"framework\",\n    \"ssl_url\" : \"ssl_url\",\n    \"build_id\" : \"build_id\",\n    \"deploy_ssl_url\" : \"deploy_ssl_url\",\n    \"user_id\" : \"user_id\",\n    \"name\" : \"name\",\n    \"site_id\" : \"site_id\",\n    \"required_functions\" : [ \"required_functions\", \"required_functions\" ],\n    \"screenshot_url\" : \"screenshot_url\",\n    \"commit_ref\" : \"commit_ref\"\n  },\n  \"state\" : \"state\",\n  \"custom_domain\" : \"custom_domain\",\n  \"default_hooks_data\" : {\n    \"access_token\" : \"access_token\"\n  },\n  \"plan\" : \"plan\",\n  \"managed_dns\" : true,\n  \"force_ssl\" : true,\n  \"capabilities\" : {\n    \"key\" : \"{}\"\n  },\n  \"notification_email\" : \"notification_email\",\n  \"git_provider\" : \"git_provider\",\n  \"session_id\" : \"session_id\",\n  \"admin_url\" : \"admin_url\",\n  \"build_settings\" : {\n    \"repo_url\" : \"repo_url\",\n    \"stop_builds\" : true,\n    \"deploy_key_id\" : \"deploy_key_id\",\n    \"installation_id\" : 6,\n    \"dir\" : \"dir\",\n    \"env\" : {\n      \"key\" : \"env\"\n    },\n    \"repo_branch\" : \"repo_branch\",\n    \"private_logs\" : true,\n    \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ],\n    \"functions_dir\" : \"functions_dir\",\n    \"repo_path\" : \"repo_path\",\n    \"provider\" : \"provider\",\n    \"public_repo\" : true,\n    \"cmd\" : \"cmd\",\n    \"id\" : 0\n  },\n  \"prerender\" : \"prerender\",\n  \"url\" : \"url\",\n  \"account_slug\" : \"account_slug\",\n  \"ssl_url\" : \"ssl_url\",\n  \"user_id\" : \"user_id\",\n  \"name\" : \"name\",\n  \"build_image\" : \"build_image\",\n  \"processing_settings\" : {\n    \"css\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"images\" : {\n      \"optimize\" : true\n    },\n    \"js\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"html\" : {\n      \"pretty_urls\" : true\n    },\n    \"skip\" : true\n  },\n  \"screenshot_url\" : \"screenshot_url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Site>(exampleJson)
            : default(Site);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>**Note:** Environment variable keys and values will soon be moved from &#x60;build_settings.env&#x60; and &#x60;repo.env&#x60; to a new endpoint. Please use [updateEnvVar](#tag/environmentVariables/operation/updateEnvVar) to update a site&#39;s environment variables.</remarks>
        /// <param name="siteId"></param>
        /// <param name="site"></param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpPatch]
        [Route("/api/v1/sites/{site_id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateSite")]
        [SwaggerResponse(statusCode: 200, type: typeof(Site), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult UpdateSite([FromRoute (Name = "site_id")][Required]string siteId, [FromBody]SiteSetup site)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Site));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"id_domain\" : \"id_domain\",\n  \"deploy_hook\" : \"deploy_hook\",\n  \"deploy_url\" : \"deploy_url\",\n  \"created_at\" : \"created_at\",\n  \"ssl\" : true,\n  \"domain_aliases\" : [ \"domain_aliases\", \"domain_aliases\" ],\n  \"password\" : \"password\",\n  \"updated_at\" : \"updated_at\",\n  \"account_name\" : \"account_name\",\n  \"id\" : \"id\",\n  \"published_deploy\" : {\n    \"review_id\" : 0.8008281904610115,\n    \"deploy_url\" : \"deploy_url\",\n    \"review_url\" : \"review_url\",\n    \"created_at\" : \"created_at\",\n    \"title\" : \"title\",\n    \"branch\" : \"branch\",\n    \"required\" : [ \"required\", \"required\" ],\n    \"skipped\" : true,\n    \"commit_url\" : \"commit_url\",\n    \"updated_at\" : \"updated_at\",\n    \"draft\" : true,\n    \"context\" : \"context\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"locked\" : true,\n    \"published_at\" : \"published_at\",\n    \"error_message\" : \"error_message\",\n    \"function_schedules\" : [ {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    }, {\n      \"cron\" : \"cron\",\n      \"name\" : \"name\"\n    } ],\n    \"admin_url\" : \"admin_url\",\n    \"site_capabilities\" : {\n      \"large_media_enabled\" : true\n    },\n    \"url\" : \"url\",\n    \"framework\" : \"framework\",\n    \"ssl_url\" : \"ssl_url\",\n    \"build_id\" : \"build_id\",\n    \"deploy_ssl_url\" : \"deploy_ssl_url\",\n    \"user_id\" : \"user_id\",\n    \"name\" : \"name\",\n    \"site_id\" : \"site_id\",\n    \"required_functions\" : [ \"required_functions\", \"required_functions\" ],\n    \"screenshot_url\" : \"screenshot_url\",\n    \"commit_ref\" : \"commit_ref\"\n  },\n  \"state\" : \"state\",\n  \"custom_domain\" : \"custom_domain\",\n  \"default_hooks_data\" : {\n    \"access_token\" : \"access_token\"\n  },\n  \"plan\" : \"plan\",\n  \"managed_dns\" : true,\n  \"force_ssl\" : true,\n  \"capabilities\" : {\n    \"key\" : \"{}\"\n  },\n  \"notification_email\" : \"notification_email\",\n  \"git_provider\" : \"git_provider\",\n  \"session_id\" : \"session_id\",\n  \"admin_url\" : \"admin_url\",\n  \"build_settings\" : {\n    \"repo_url\" : \"repo_url\",\n    \"stop_builds\" : true,\n    \"deploy_key_id\" : \"deploy_key_id\",\n    \"installation_id\" : 6,\n    \"dir\" : \"dir\",\n    \"env\" : {\n      \"key\" : \"env\"\n    },\n    \"repo_branch\" : \"repo_branch\",\n    \"private_logs\" : true,\n    \"allowed_branches\" : [ \"allowed_branches\", \"allowed_branches\" ],\n    \"functions_dir\" : \"functions_dir\",\n    \"repo_path\" : \"repo_path\",\n    \"provider\" : \"provider\",\n    \"public_repo\" : true,\n    \"cmd\" : \"cmd\",\n    \"id\" : 0\n  },\n  \"prerender\" : \"prerender\",\n  \"url\" : \"url\",\n  \"account_slug\" : \"account_slug\",\n  \"ssl_url\" : \"ssl_url\",\n  \"user_id\" : \"user_id\",\n  \"name\" : \"name\",\n  \"build_image\" : \"build_image\",\n  \"processing_settings\" : {\n    \"css\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"images\" : {\n      \"optimize\" : true\n    },\n    \"js\" : {\n      \"minify\" : true,\n      \"bundle\" : true\n    },\n    \"html\" : {\n      \"pretty_urls\" : true\n    },\n    \"skip\" : true\n  },\n  \"screenshot_url\" : \"screenshot_url\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Site>(exampleJson)
            : default(Site);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
