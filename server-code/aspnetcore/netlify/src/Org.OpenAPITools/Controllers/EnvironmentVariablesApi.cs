/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EnvironmentVariablesApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Creates new environment variables. Granular scopes are available on Pro plans and above.  To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.</remarks>
        /// <param name="accountId">Scope response to account_id</param>
        /// <param name="siteId">If provided, create an environment variable on the site level, not the account level</param>
        /// <param name="envVars"></param>
        /// <response code="201">OK</response>
        /// <response code="0">error</response>
        [HttpPost]
        [Route("/api/v1/accounts/{account_id}/env")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateEnvVars")]
        [SwaggerResponse(statusCode: 201, type: typeof(List<EnvVar>), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult CreateEnvVars([FromRoute (Name = "account_id")][Required]string accountId, [FromQuery (Name = "site_id")]string siteId, [FromBody]List<CreateEnvVarsRequestInner> envVars)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(List<EnvVar>));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"values\" : [ {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  }, {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  } ],\n  \"updated_by\" : {\n    \"full_name\" : \"full_name\",\n    \"avatar_url\" : \"avatar_url\",\n    \"id\" : \"id\",\n    \"email\" : \"email\"\n  },\n  \"scopes\" : [ \"builds\", \"builds\" ],\n  \"key\" : \"key\"\n}, {\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"values\" : [ {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  }, {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  } ],\n  \"updated_by\" : {\n    \"full_name\" : \"full_name\",\n    \"avatar_url\" : \"avatar_url\",\n    \"id\" : \"id\",\n    \"email\" : \"email\"\n  },\n  \"scopes\" : [ \"builds\", \"builds\" ],\n  \"key\" : \"key\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<EnvVar>>(exampleJson)
            : default(List<EnvVar>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Deletes an environment variable. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.</remarks>
        /// <param name="accountId">Scope response to account_id</param>
        /// <param name="key">The environment variable key (case-sensitive)</param>
        /// <param name="siteId">If provided, delete the environment variable from this site</param>
        /// <response code="204">No Content (success)</response>
        /// <response code="0">error</response>
        [HttpDelete]
        [Route("/api/v1/accounts/{account_id}/env/{key}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteEnvVar")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult DeleteEnvVar([FromRoute (Name = "account_id")][Required]string accountId, [FromRoute (Name = "key")][Required]string key, [FromQuery (Name = "site_id")]string siteId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Deletes a specific environment variable value. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.</remarks>
        /// <param name="accountId">Scope response to account_id</param>
        /// <param name="id">The environment variable value&#39;s ID</param>
        /// <param name="key">The environment variable key name (case-sensitive)</param>
        /// <param name="siteId">If provided, delete the value from an environment variable on this site</param>
        /// <response code="204">No Content (success)</response>
        /// <response code="0">error</response>
        [HttpDelete]
        [Route("/api/v1/accounts/{account_id}/env/{key}/value/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteEnvVarValue")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult DeleteEnvVarValue([FromRoute (Name = "account_id")][Required]string accountId, [FromRoute (Name = "id")][Required]string id, [FromRoute (Name = "key")][Required]string key, [FromQuery (Name = "site_id")]string siteId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns an individual environment variable. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.</remarks>
        /// <param name="accountId">Scope response to account_id</param>
        /// <param name="key">The environment variable key (case-sensitive)</param>
        /// <param name="siteId">If provided, return the environment variable for a specific site (no merging is performed)</param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/accounts/{account_id}/env/{key}")]
        [ValidateModelState]
        [SwaggerOperation("GetEnvVar")]
        [SwaggerResponse(statusCode: 200, type: typeof(EnvVar), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult GetEnvVar([FromRoute (Name = "account_id")][Required]string accountId, [FromRoute (Name = "key")][Required]string key, [FromQuery (Name = "site_id")]string siteId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EnvVar));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"values\" : [ {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  }, {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  } ],\n  \"updated_by\" : {\n    \"full_name\" : \"full_name\",\n    \"avatar_url\" : \"avatar_url\",\n    \"id\" : \"id\",\n    \"email\" : \"email\"\n  },\n  \"scopes\" : [ \"builds\", \"builds\" ],\n  \"key\" : \"key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EnvVar>(exampleJson)
            : default(EnvVar);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns all environment variables for an account or site. An account corresponds to a team in the Netlify UI. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.</remarks>
        /// <param name="accountId">Scope response to account_id</param>
        /// <param name="contextName">Filter by deploy context</param>
        /// <param name="scope">Filter by scope</param>
        /// <param name="siteId">If specified, only return environment variables set on this site</param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpGet]
        [Route("/api/v1/accounts/{account_id}/env")]
        [ValidateModelState]
        [SwaggerOperation("GetEnvVars")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EnvVar>), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult GetEnvVars([FromRoute (Name = "account_id")][Required]string accountId, [FromQuery (Name = "context_name")]string contextName, [FromQuery (Name = "scope")]string scope, [FromQuery (Name = "site_id")]string siteId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EnvVar>));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"values\" : [ {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  }, {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  } ],\n  \"updated_by\" : {\n    \"full_name\" : \"full_name\",\n    \"avatar_url\" : \"avatar_url\",\n    \"id\" : \"id\",\n    \"email\" : \"email\"\n  },\n  \"scopes\" : [ \"builds\", \"builds\" ],\n  \"key\" : \"key\"\n}, {\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"values\" : [ {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  }, {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  } ],\n  \"updated_by\" : {\n    \"full_name\" : \"full_name\",\n    \"avatar_url\" : \"avatar_url\",\n    \"id\" : \"id\",\n    \"email\" : \"email\"\n  },\n  \"scopes\" : [ \"builds\", \"builds\" ],\n  \"key\" : \"key\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<EnvVar>>(exampleJson)
            : default(List<EnvVar>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Updates or creates a new value for an existing environment variable. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.</remarks>
        /// <param name="accountId">Scope response to account_id</param>
        /// <param name="key">The existing environment variable key name (case-sensitive)</param>
        /// <param name="siteId">If provided, update an environment variable set on this site</param>
        /// <param name="envVar"></param>
        /// <response code="201">Created (success)</response>
        /// <response code="0">error</response>
        [HttpPatch]
        [Route("/api/v1/accounts/{account_id}/env/{key}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetEnvVarValue")]
        [SwaggerResponse(statusCode: 201, type: typeof(EnvVar), description: "Created (success)")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult SetEnvVarValue([FromRoute (Name = "account_id")][Required]string accountId, [FromRoute (Name = "key")][Required]string key, [FromQuery (Name = "site_id")]string siteId, [FromBody]SetEnvVarValueRequest envVar)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(EnvVar));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"values\" : [ {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  }, {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  } ],\n  \"updated_by\" : {\n    \"full_name\" : \"full_name\",\n    \"avatar_url\" : \"avatar_url\",\n    \"id\" : \"id\",\n    \"email\" : \"email\"\n  },\n  \"scopes\" : [ \"builds\", \"builds\" ],\n  \"key\" : \"key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EnvVar>(exampleJson)
            : default(EnvVar);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Updates an existing environment variable and all of its values. Existing values will be replaced by values provided. To use this endpoint, your site must no longer be using the &lt;a href&#x3D;\&quot;https://docs.netlify.com/environment-variables/classic-experience/\&quot;&gt;classic environment variables experience&lt;/a&gt;.  Migrate now with the Netlify UI.</remarks>
        /// <param name="accountId">Scope response to account_id</param>
        /// <param name="key">The existing environment variable key name (case-sensitive)</param>
        /// <param name="siteId">If provided, update an environment variable set on this site</param>
        /// <param name="envVar"></param>
        /// <response code="200">OK</response>
        /// <response code="0">error</response>
        [HttpPut]
        [Route("/api/v1/accounts/{account_id}/env/{key}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateEnvVar")]
        [SwaggerResponse(statusCode: 200, type: typeof(EnvVar), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "error")]
        public virtual IActionResult UpdateEnvVar([FromRoute (Name = "account_id")][Required]string accountId, [FromRoute (Name = "key")][Required]string key, [FromQuery (Name = "site_id")]string siteId, [FromBody]CreateEnvVarsRequestInner envVar)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EnvVar));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"values\" : [ {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  }, {\n    \"context\" : \"all\",\n    \"id\" : \"id\",\n    \"value\" : \"value\"\n  } ],\n  \"updated_by\" : {\n    \"full_name\" : \"full_name\",\n    \"avatar_url\" : \"avatar_url\",\n    \"id\" : \"id\",\n    \"email\" : \"email\"\n  },\n  \"scopes\" : [ \"builds\", \"builds\" ],\n  \"key\" : \"key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EnvVar>(exampleJson)
            : default(EnvVar);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
