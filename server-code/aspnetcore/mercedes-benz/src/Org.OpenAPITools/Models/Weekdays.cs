/*
 * Dealer
 *
 * The Dealer API provides Dealer search functions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// opening hours for a week, represented by a map where the key is a weekday and the value is an object containing the time periods. There are a maximum of two time slots for each day. If there exists no opening hours for one day, they will be shown as closed. 
    /// </summary>
    [DataContract]
    public partial class Weekdays : IEquatable<Weekdays>
    {
        /// <summary>
        /// Gets or Sets FRIDAY
        /// </summary>
        [DataMember(Name="FRIDAY", EmitDefaultValue=false)]
        public WeekdayInfo FRIDAY { get; set; }

        /// <summary>
        /// Gets or Sets MONDAY
        /// </summary>
        [DataMember(Name="MONDAY", EmitDefaultValue=false)]
        public WeekdayInfo MONDAY { get; set; }

        /// <summary>
        /// Gets or Sets SATURDAY
        /// </summary>
        [DataMember(Name="SATURDAY", EmitDefaultValue=false)]
        public WeekdayInfo SATURDAY { get; set; }

        /// <summary>
        /// Gets or Sets SUNDAY
        /// </summary>
        [DataMember(Name="SUNDAY", EmitDefaultValue=false)]
        public WeekdayInfo SUNDAY { get; set; }

        /// <summary>
        /// Gets or Sets THURSDAY
        /// </summary>
        [DataMember(Name="THURSDAY", EmitDefaultValue=false)]
        public WeekdayInfo THURSDAY { get; set; }

        /// <summary>
        /// Gets or Sets TUESDAY
        /// </summary>
        [DataMember(Name="TUESDAY", EmitDefaultValue=false)]
        public WeekdayInfo TUESDAY { get; set; }

        /// <summary>
        /// Gets or Sets WEDNESDAY
        /// </summary>
        [DataMember(Name="WEDNESDAY", EmitDefaultValue=false)]
        public WeekdayInfo WEDNESDAY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Weekdays {\n");
            sb.Append("  FRIDAY: ").Append(FRIDAY).Append("\n");
            sb.Append("  MONDAY: ").Append(MONDAY).Append("\n");
            sb.Append("  SATURDAY: ").Append(SATURDAY).Append("\n");
            sb.Append("  SUNDAY: ").Append(SUNDAY).Append("\n");
            sb.Append("  THURSDAY: ").Append(THURSDAY).Append("\n");
            sb.Append("  TUESDAY: ").Append(TUESDAY).Append("\n");
            sb.Append("  WEDNESDAY: ").Append(WEDNESDAY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Weekdays)obj);
        }

        /// <summary>
        /// Returns true if Weekdays instances are equal
        /// </summary>
        /// <param name="other">Instance of Weekdays to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Weekdays other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FRIDAY == other.FRIDAY ||
                    FRIDAY != null &&
                    FRIDAY.Equals(other.FRIDAY)
                ) && 
                (
                    MONDAY == other.MONDAY ||
                    MONDAY != null &&
                    MONDAY.Equals(other.MONDAY)
                ) && 
                (
                    SATURDAY == other.SATURDAY ||
                    SATURDAY != null &&
                    SATURDAY.Equals(other.SATURDAY)
                ) && 
                (
                    SUNDAY == other.SUNDAY ||
                    SUNDAY != null &&
                    SUNDAY.Equals(other.SUNDAY)
                ) && 
                (
                    THURSDAY == other.THURSDAY ||
                    THURSDAY != null &&
                    THURSDAY.Equals(other.THURSDAY)
                ) && 
                (
                    TUESDAY == other.TUESDAY ||
                    TUESDAY != null &&
                    TUESDAY.Equals(other.TUESDAY)
                ) && 
                (
                    WEDNESDAY == other.WEDNESDAY ||
                    WEDNESDAY != null &&
                    WEDNESDAY.Equals(other.WEDNESDAY)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FRIDAY != null)
                    hashCode = hashCode * 59 + FRIDAY.GetHashCode();
                    if (MONDAY != null)
                    hashCode = hashCode * 59 + MONDAY.GetHashCode();
                    if (SATURDAY != null)
                    hashCode = hashCode * 59 + SATURDAY.GetHashCode();
                    if (SUNDAY != null)
                    hashCode = hashCode * 59 + SUNDAY.GetHashCode();
                    if (THURSDAY != null)
                    hashCode = hashCode * 59 + THURSDAY.GetHashCode();
                    if (TUESDAY != null)
                    hashCode = hashCode * 59 + TUESDAY.GetHashCode();
                    if (WEDNESDAY != null)
                    hashCode = hashCode * 59 + WEDNESDAY.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Weekdays left, Weekdays right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Weekdays left, Weekdays right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
