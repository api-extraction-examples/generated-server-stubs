/*
 * Dealer
 *
 * The Dealer API provides Dealer search functions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// the representation of an dealer
    /// </summary>
    [DataContract]
    public partial class Dealer : IEquatable<Dealer>
    {
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [Required]
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public SelfLink Links { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// network brand codes of the dealer, dealer numbers
        /// </summary>
        /// <value>network brand codes of the dealer, dealer numbers</value>
        [DataMember(Name="brandCodes", EmitDefaultValue=false)]
        public List<BrandCode> BrandCodes { get; set; }

        /// <summary>
        /// Gets or Sets Communication
        /// </summary>
        [DataMember(Name="communication", EmitDefaultValue=false)]
        public CommunicationChannels Communication { get; set; }

        /// <summary>
        /// GSSN unique ID, main identifier
        /// </summary>
        /// <value>GSSN unique ID, main identifier</value>
        [Required]
        [DataMember(Name="dealerId", EmitDefaultValue=false)]
        public string DealerId { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public TheDistance Distance { get; set; }

        /// <summary>
        /// list of functions for the dealer
        /// </summary>
        /// <value>list of functions for the dealer</value>
        [DataMember(Name="functions", EmitDefaultValue=false)]
        public List<Function> Functions { get; set; }

        /// <summary>
        /// Gets or Sets GeoCoordinates
        /// </summary>
        [DataMember(Name="geoCoordinates", EmitDefaultValue=false)]
        public GeoCoordinates GeoCoordinates { get; set; }

        /// <summary>
        /// legal name of the company
        /// </summary>
        /// <value>legal name of the company</value>
        [Required]
        [DataMember(Name="legalName", EmitDefaultValue=false)]
        public string LegalName { get; set; }

        /// <summary>
        /// name addition, country specific use
        /// </summary>
        /// <value>name addition, country specific use</value>
        [DataMember(Name="nameAddition", EmitDefaultValue=false)]
        public string NameAddition { get; set; }

        /// <summary>
        /// List of opening hours for each customer relevant function for each day 
        /// </summary>
        /// <value>List of opening hours for each customer relevant function for each day </value>
        [DataMember(Name="openingHours", EmitDefaultValue=false)]
        public List<FunctionOpeningHours> OpeningHours { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public RegionRepresentation Region { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dealer {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  BrandCodes: ").Append(BrandCodes).Append("\n");
            sb.Append("  Communication: ").Append(Communication).Append("\n");
            sb.Append("  DealerId: ").Append(DealerId).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  GeoCoordinates: ").Append(GeoCoordinates).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  NameAddition: ").Append(NameAddition).Append("\n");
            sb.Append("  OpeningHours: ").Append(OpeningHours).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Dealer)obj);
        }

        /// <summary>
        /// Returns true if Dealer instances are equal
        /// </summary>
        /// <param name="other">Instance of Dealer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dealer other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    BrandCodes == other.BrandCodes ||
                    BrandCodes != null &&
                    other.BrandCodes != null &&
                    BrandCodes.SequenceEqual(other.BrandCodes)
                ) && 
                (
                    Communication == other.Communication ||
                    Communication != null &&
                    Communication.Equals(other.Communication)
                ) && 
                (
                    DealerId == other.DealerId ||
                    DealerId != null &&
                    DealerId.Equals(other.DealerId)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                ) && 
                (
                    Functions == other.Functions ||
                    Functions != null &&
                    other.Functions != null &&
                    Functions.SequenceEqual(other.Functions)
                ) && 
                (
                    GeoCoordinates == other.GeoCoordinates ||
                    GeoCoordinates != null &&
                    GeoCoordinates.Equals(other.GeoCoordinates)
                ) && 
                (
                    LegalName == other.LegalName ||
                    LegalName != null &&
                    LegalName.Equals(other.LegalName)
                ) && 
                (
                    NameAddition == other.NameAddition ||
                    NameAddition != null &&
                    NameAddition.Equals(other.NameAddition)
                ) && 
                (
                    OpeningHours == other.OpeningHours ||
                    OpeningHours != null &&
                    other.OpeningHours != null &&
                    OpeningHours.SequenceEqual(other.OpeningHours)
                ) && 
                (
                    Region == other.Region ||
                    Region != null &&
                    Region.Equals(other.Region)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (BrandCodes != null)
                    hashCode = hashCode * 59 + BrandCodes.GetHashCode();
                    if (Communication != null)
                    hashCode = hashCode * 59 + Communication.GetHashCode();
                    if (DealerId != null)
                    hashCode = hashCode * 59 + DealerId.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    if (Functions != null)
                    hashCode = hashCode * 59 + Functions.GetHashCode();
                    if (GeoCoordinates != null)
                    hashCode = hashCode * 59 + GeoCoordinates.GetHashCode();
                    if (LegalName != null)
                    hashCode = hashCode * 59 + LegalName.GetHashCode();
                    if (NameAddition != null)
                    hashCode = hashCode * 59 + NameAddition.GetHashCode();
                    if (OpeningHours != null)
                    hashCode = hashCode * 59 + OpeningHours.GetHashCode();
                    if (Region != null)
                    hashCode = hashCode * 59 + Region.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Dealer left, Dealer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Dealer left, Dealer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
