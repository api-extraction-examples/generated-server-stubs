/*
 * Dealer
 *
 * The Dealer API provides Dealer search functions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class General : IEquatable<General>
    {
        /// <summary>
        /// general email address
        /// </summary>
        /// <value>general email address</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// general facebook URL
        /// </summary>
        /// <value>general facebook URL</value>
        [DataMember(Name="facebook", EmitDefaultValue=false)]
        public string Facebook { get; set; }

        /// <summary>
        /// general fax number
        /// </summary>
        /// <value>general fax number</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// general googlePlus account name
        /// </summary>
        /// <value>general googlePlus account name</value>
        [DataMember(Name="googlePlus", EmitDefaultValue=false)]
        public string GooglePlus { get; set; }

        /// <summary>
        /// general mobile phone number
        /// </summary>
        /// <value>general mobile phone number</value>
        [DataMember(Name="mobile", EmitDefaultValue=false)]
        public string Mobile { get; set; }

        /// <summary>
        /// general phone number
        /// </summary>
        /// <value>general phone number</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// general twitter account name
        /// </summary>
        /// <value>general twitter account name</value>
        [DataMember(Name="twitter", EmitDefaultValue=false)]
        public string Twitter { get; set; }

        /// <summary>
        /// general website
        /// </summary>
        /// <value>general website</value>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class General {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Facebook: ").Append(Facebook).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  GooglePlus: ").Append(GooglePlus).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((General)obj);
        }

        /// <summary>
        /// Returns true if General instances are equal
        /// </summary>
        /// <param name="other">Instance of General to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(General other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Facebook == other.Facebook ||
                    Facebook != null &&
                    Facebook.Equals(other.Facebook)
                ) && 
                (
                    Fax == other.Fax ||
                    Fax != null &&
                    Fax.Equals(other.Fax)
                ) && 
                (
                    GooglePlus == other.GooglePlus ||
                    GooglePlus != null &&
                    GooglePlus.Equals(other.GooglePlus)
                ) && 
                (
                    Mobile == other.Mobile ||
                    Mobile != null &&
                    Mobile.Equals(other.Mobile)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    Twitter == other.Twitter ||
                    Twitter != null &&
                    Twitter.Equals(other.Twitter)
                ) && 
                (
                    Website == other.Website ||
                    Website != null &&
                    Website.Equals(other.Website)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Facebook != null)
                    hashCode = hashCode * 59 + Facebook.GetHashCode();
                    if (Fax != null)
                    hashCode = hashCode * 59 + Fax.GetHashCode();
                    if (GooglePlus != null)
                    hashCode = hashCode * 59 + GooglePlus.GetHashCode();
                    if (Mobile != null)
                    hashCode = hashCode * 59 + Mobile.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (Twitter != null)
                    hashCode = hashCode * 59 + Twitter.GetHashCode();
                    if (Website != null)
                    hashCode = hashCode * 59 + Website.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(General left, General right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(General left, General right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
