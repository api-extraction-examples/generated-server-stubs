/*
 * Dealer
 *
 * The Dealer API provides Dealer search functions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ReferencesApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This request returns the countries supported by the Dealer API</remarks>
        /// <param name="page">The index of the page to be returned. If this parameter is omitted, the first page will be returned. </param>
        /// <param name="pageSize">The index of the page to be returned. If this parameter is omitted, the first page will be returned. </param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid parameter was specified:  * Page is not valid  * Page size is not valid</response>
        /// <response code="401">Unauthorized:   * Failed to resolve API Key query parameter   * Invalid API Key</response>
        /// <response code="429">Quota limit is exceeded</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/dealer_tryout/v1/countries")]
        [ValidateModelState]
        [SwaggerOperation("CountriesGET")]
        [SwaggerResponse(statusCode: 200, type: typeof(HalifiedCountries), description: "OK")]
        public virtual IActionResult CountriesGET([FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(HalifiedCountries));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"href\"\n    },\n    \"previous\" : {\n      \"href\" : \"href\"\n    },\n    \"self\" : {\n      \"href\" : \"href\"\n    }\n  },\n  \"countries\" : [ {\n    \"isoCode\" : \"isoCode\",\n    \"name\" : \"name\",\n    \"countryId\" : \"countryId\"\n  }, {\n    \"isoCode\" : \"isoCode\",\n    \"name\" : \"name\",\n    \"countryId\" : \"countryId\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<HalifiedCountries>(exampleJson)
            : default(HalifiedCountries);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
