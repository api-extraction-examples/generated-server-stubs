/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Team : IEquatable<Team>
    {
        /// <summary>
        /// Gets or Sets Abbreviation
        /// </summary>
        [DataMember(Name="abbreviation", EmitDefaultValue=false)]
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or Sets AltColor
        /// </summary>
        [DataMember(Name="alt_color", EmitDefaultValue=false)]
        public string AltColor { get; set; }

        /// <summary>
        /// Gets or Sets AltName1
        /// </summary>
        [DataMember(Name="alt_name_1", EmitDefaultValue=false)]
        public string AltName1 { get; set; }

        /// <summary>
        /// Gets or Sets AltName2
        /// </summary>
        [DataMember(Name="alt_name_2", EmitDefaultValue=false)]
        public string AltName2 { get; set; }

        /// <summary>
        /// Gets or Sets AltName3
        /// </summary>
        [DataMember(Name="alt_name_3", EmitDefaultValue=false)]
        public string AltName3 { get; set; }

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [DataMember(Name="classification", EmitDefaultValue=false)]
        public string Classification { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [DataMember(Name="conference", EmitDefaultValue=false)]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets Division
        /// </summary>
        [DataMember(Name="division", EmitDefaultValue=false)]
        public string Division { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public TeamLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Logos
        /// </summary>
        [DataMember(Name="logos", EmitDefaultValue=false)]
        public List<string> Logos { get; set; }

        /// <summary>
        /// Gets or Sets Mascot
        /// </summary>
        [DataMember(Name="mascot", EmitDefaultValue=false)]
        public string Mascot { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets Twitter
        /// </summary>
        [DataMember(Name="twitter", EmitDefaultValue=false)]
        public string Twitter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Team {\n");
            sb.Append("  Abbreviation: ").Append(Abbreviation).Append("\n");
            sb.Append("  AltColor: ").Append(AltColor).Append("\n");
            sb.Append("  AltName1: ").Append(AltName1).Append("\n");
            sb.Append("  AltName2: ").Append(AltName2).Append("\n");
            sb.Append("  AltName3: ").Append(AltName3).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  Division: ").Append(Division).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Logos: ").Append(Logos).Append("\n");
            sb.Append("  Mascot: ").Append(Mascot).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Team)obj);
        }

        /// <summary>
        /// Returns true if Team instances are equal
        /// </summary>
        /// <param name="other">Instance of Team to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Team other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Abbreviation == other.Abbreviation ||
                    Abbreviation != null &&
                    Abbreviation.Equals(other.Abbreviation)
                ) && 
                (
                    AltColor == other.AltColor ||
                    AltColor != null &&
                    AltColor.Equals(other.AltColor)
                ) && 
                (
                    AltName1 == other.AltName1 ||
                    AltName1 != null &&
                    AltName1.Equals(other.AltName1)
                ) && 
                (
                    AltName2 == other.AltName2 ||
                    AltName2 != null &&
                    AltName2.Equals(other.AltName2)
                ) && 
                (
                    AltName3 == other.AltName3 ||
                    AltName3 != null &&
                    AltName3.Equals(other.AltName3)
                ) && 
                (
                    Classification == other.Classification ||
                    Classification != null &&
                    Classification.Equals(other.Classification)
                ) && 
                (
                    Color == other.Color ||
                    Color != null &&
                    Color.Equals(other.Color)
                ) && 
                (
                    Conference == other.Conference ||
                    Conference != null &&
                    Conference.Equals(other.Conference)
                ) && 
                (
                    Division == other.Division ||
                    Division != null &&
                    Division.Equals(other.Division)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Logos == other.Logos ||
                    Logos != null &&
                    other.Logos != null &&
                    Logos.SequenceEqual(other.Logos)
                ) && 
                (
                    Mascot == other.Mascot ||
                    Mascot != null &&
                    Mascot.Equals(other.Mascot)
                ) && 
                (
                    School == other.School ||
                    School != null &&
                    School.Equals(other.School)
                ) && 
                (
                    Twitter == other.Twitter ||
                    Twitter != null &&
                    Twitter.Equals(other.Twitter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Abbreviation != null)
                    hashCode = hashCode * 59 + Abbreviation.GetHashCode();
                    if (AltColor != null)
                    hashCode = hashCode * 59 + AltColor.GetHashCode();
                    if (AltName1 != null)
                    hashCode = hashCode * 59 + AltName1.GetHashCode();
                    if (AltName2 != null)
                    hashCode = hashCode * 59 + AltName2.GetHashCode();
                    if (AltName3 != null)
                    hashCode = hashCode * 59 + AltName3.GetHashCode();
                    if (Classification != null)
                    hashCode = hashCode * 59 + Classification.GetHashCode();
                    if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                    if (Conference != null)
                    hashCode = hashCode * 59 + Conference.GetHashCode();
                    if (Division != null)
                    hashCode = hashCode * 59 + Division.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Logos != null)
                    hashCode = hashCode * 59 + Logos.GetHashCode();
                    if (Mascot != null)
                    hashCode = hashCode * 59 + Mascot.GetHashCode();
                    if (School != null)
                    hashCode = hashCode * 59 + School.GetHashCode();
                    if (Twitter != null)
                    hashCode = hashCode * 59 + Twitter.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Team left, Team right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Team left, Team right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
