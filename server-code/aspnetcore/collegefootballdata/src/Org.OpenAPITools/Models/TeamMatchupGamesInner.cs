/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TeamMatchupGamesInner : IEquatable<TeamMatchupGamesInner>
    {
        /// <summary>
        /// Gets or Sets AwayScore
        /// </summary>
        [DataMember(Name="awayScore", EmitDefaultValue=true)]
        public int AwayScore { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [DataMember(Name="awayTeam", EmitDefaultValue=false)]
        public string AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets HomeScore
        /// </summary>
        [DataMember(Name="homeScore", EmitDefaultValue=true)]
        public int HomeScore { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [DataMember(Name="homeTeam", EmitDefaultValue=false)]
        public string HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets NeutralSite
        /// </summary>
        [DataMember(Name="neutralSite", EmitDefaultValue=true)]
        public bool NeutralSite { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name="season", EmitDefaultValue=true)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets SeasonType
        /// </summary>
        [DataMember(Name="season_type", EmitDefaultValue=false)]
        public string SeasonType { get; set; }

        /// <summary>
        /// Gets or Sets Venue
        /// </summary>
        [DataMember(Name="venue", EmitDefaultValue=false)]
        public string Venue { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name="week", EmitDefaultValue=true)]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets Winner
        /// </summary>
        [DataMember(Name="winner", EmitDefaultValue=false)]
        public string Winner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamMatchupGamesInner {\n");
            sb.Append("  AwayScore: ").Append(AwayScore).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  HomeScore: ").Append(HomeScore).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  NeutralSite: ").Append(NeutralSite).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  SeasonType: ").Append(SeasonType).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  Winner: ").Append(Winner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TeamMatchupGamesInner)obj);
        }

        /// <summary>
        /// Returns true if TeamMatchupGamesInner instances are equal
        /// </summary>
        /// <param name="other">Instance of TeamMatchupGamesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamMatchupGamesInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AwayScore == other.AwayScore ||
                    
                    AwayScore.Equals(other.AwayScore)
                ) && 
                (
                    AwayTeam == other.AwayTeam ||
                    AwayTeam != null &&
                    AwayTeam.Equals(other.AwayTeam)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    HomeScore == other.HomeScore ||
                    
                    HomeScore.Equals(other.HomeScore)
                ) && 
                (
                    HomeTeam == other.HomeTeam ||
                    HomeTeam != null &&
                    HomeTeam.Equals(other.HomeTeam)
                ) && 
                (
                    NeutralSite == other.NeutralSite ||
                    
                    NeutralSite.Equals(other.NeutralSite)
                ) && 
                (
                    Season == other.Season ||
                    
                    Season.Equals(other.Season)
                ) && 
                (
                    SeasonType == other.SeasonType ||
                    SeasonType != null &&
                    SeasonType.Equals(other.SeasonType)
                ) && 
                (
                    Venue == other.Venue ||
                    Venue != null &&
                    Venue.Equals(other.Venue)
                ) && 
                (
                    Week == other.Week ||
                    
                    Week.Equals(other.Week)
                ) && 
                (
                    Winner == other.Winner ||
                    Winner != null &&
                    Winner.Equals(other.Winner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AwayScore.GetHashCode();
                    if (AwayTeam != null)
                    hashCode = hashCode * 59 + AwayTeam.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomeScore.GetHashCode();
                    if (HomeTeam != null)
                    hashCode = hashCode * 59 + HomeTeam.GetHashCode();
                    
                    hashCode = hashCode * 59 + NeutralSite.GetHashCode();
                    
                    hashCode = hashCode * 59 + Season.GetHashCode();
                    if (SeasonType != null)
                    hashCode = hashCode * 59 + SeasonType.GetHashCode();
                    if (Venue != null)
                    hashCode = hashCode * 59 + Venue.GetHashCode();
                    
                    hashCode = hashCode * 59 + Week.GetHashCode();
                    if (Winner != null)
                    hashCode = hashCode * 59 + Winner.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TeamMatchupGamesInner left, TeamMatchupGamesInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TeamMatchupGamesInner left, TeamMatchupGamesInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
