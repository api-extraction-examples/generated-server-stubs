/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PlayerSeasonPPAAveragePPA : IEquatable<PlayerSeasonPPAAveragePPA>
    {
        /// <summary>
        /// Gets or Sets All
        /// </summary>
        [DataMember(Name="all", EmitDefaultValue=true)]
        public decimal All { get; set; }

        /// <summary>
        /// Gets or Sets FirstDown
        /// </summary>
        [DataMember(Name="firstDown", EmitDefaultValue=true)]
        public decimal FirstDown { get; set; }

        /// <summary>
        /// Gets or Sets Pass
        /// </summary>
        [DataMember(Name="pass", EmitDefaultValue=true)]
        public decimal Pass { get; set; }

        /// <summary>
        /// Gets or Sets PassingDowns
        /// </summary>
        [DataMember(Name="passingDowns", EmitDefaultValue=true)]
        public decimal PassingDowns { get; set; }

        /// <summary>
        /// Gets or Sets Rush
        /// </summary>
        [DataMember(Name="rush", EmitDefaultValue=true)]
        public decimal Rush { get; set; }

        /// <summary>
        /// Gets or Sets SecondDown
        /// </summary>
        [DataMember(Name="secondDown", EmitDefaultValue=true)]
        public decimal SecondDown { get; set; }

        /// <summary>
        /// Gets or Sets StandardDowns
        /// </summary>
        [DataMember(Name="standardDowns", EmitDefaultValue=true)]
        public decimal StandardDowns { get; set; }

        /// <summary>
        /// Gets or Sets ThirdDown
        /// </summary>
        [DataMember(Name="thirdDown", EmitDefaultValue=true)]
        public decimal ThirdDown { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerSeasonPPAAveragePPA {\n");
            sb.Append("  All: ").Append(All).Append("\n");
            sb.Append("  FirstDown: ").Append(FirstDown).Append("\n");
            sb.Append("  Pass: ").Append(Pass).Append("\n");
            sb.Append("  PassingDowns: ").Append(PassingDowns).Append("\n");
            sb.Append("  Rush: ").Append(Rush).Append("\n");
            sb.Append("  SecondDown: ").Append(SecondDown).Append("\n");
            sb.Append("  StandardDowns: ").Append(StandardDowns).Append("\n");
            sb.Append("  ThirdDown: ").Append(ThirdDown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlayerSeasonPPAAveragePPA)obj);
        }

        /// <summary>
        /// Returns true if PlayerSeasonPPAAveragePPA instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayerSeasonPPAAveragePPA to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerSeasonPPAAveragePPA other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    All == other.All ||
                    
                    All.Equals(other.All)
                ) && 
                (
                    FirstDown == other.FirstDown ||
                    
                    FirstDown.Equals(other.FirstDown)
                ) && 
                (
                    Pass == other.Pass ||
                    
                    Pass.Equals(other.Pass)
                ) && 
                (
                    PassingDowns == other.PassingDowns ||
                    
                    PassingDowns.Equals(other.PassingDowns)
                ) && 
                (
                    Rush == other.Rush ||
                    
                    Rush.Equals(other.Rush)
                ) && 
                (
                    SecondDown == other.SecondDown ||
                    
                    SecondDown.Equals(other.SecondDown)
                ) && 
                (
                    StandardDowns == other.StandardDowns ||
                    
                    StandardDowns.Equals(other.StandardDowns)
                ) && 
                (
                    ThirdDown == other.ThirdDown ||
                    
                    ThirdDown.Equals(other.ThirdDown)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + All.GetHashCode();
                    
                    hashCode = hashCode * 59 + FirstDown.GetHashCode();
                    
                    hashCode = hashCode * 59 + Pass.GetHashCode();
                    
                    hashCode = hashCode * 59 + PassingDowns.GetHashCode();
                    
                    hashCode = hashCode * 59 + Rush.GetHashCode();
                    
                    hashCode = hashCode * 59 + SecondDown.GetHashCode();
                    
                    hashCode = hashCode * 59 + StandardDowns.GetHashCode();
                    
                    hashCode = hashCode * 59 + ThirdDown.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlayerSeasonPPAAveragePPA left, PlayerSeasonPPAAveragePPA right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlayerSeasonPPAAveragePPA left, PlayerSeasonPPAAveragePPA right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
