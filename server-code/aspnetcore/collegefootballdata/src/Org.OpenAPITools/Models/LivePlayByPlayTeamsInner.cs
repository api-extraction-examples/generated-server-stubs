/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LivePlayByPlayTeamsInner : IEquatable<LivePlayByPlayTeamsInner>
    {
        /// <summary>
        /// Gets or Sets Drives
        /// </summary>
        [DataMember(Name="drives", EmitDefaultValue=true)]
        public int Drives { get; set; }

        /// <summary>
        /// Gets or Sets EpaPerPass
        /// </summary>
        [DataMember(Name="epaPerPass", EmitDefaultValue=true)]
        public decimal EpaPerPass { get; set; }

        /// <summary>
        /// Gets or Sets EpaPerPlay
        /// </summary>
        [DataMember(Name="epaPerPlay", EmitDefaultValue=true)]
        public decimal EpaPerPlay { get; set; }

        /// <summary>
        /// Gets or Sets EpaPerRush
        /// </summary>
        [DataMember(Name="epaPerRush", EmitDefaultValue=true)]
        public decimal EpaPerRush { get; set; }

        /// <summary>
        /// Gets or Sets Explosiveness
        /// </summary>
        [DataMember(Name="explosiveness", EmitDefaultValue=true)]
        public decimal Explosiveness { get; set; }

        /// <summary>
        /// Gets or Sets HomeAway
        /// </summary>
        [DataMember(Name="homeAway", EmitDefaultValue=false)]
        public string HomeAway { get; set; }

        /// <summary>
        /// Gets or Sets LineYards
        /// </summary>
        [DataMember(Name="lineYards", EmitDefaultValue=true)]
        public int LineYards { get; set; }

        /// <summary>
        /// Gets or Sets LineYardsPerRush
        /// </summary>
        [DataMember(Name="lineYardsPerRush", EmitDefaultValue=true)]
        public decimal LineYardsPerRush { get; set; }

        /// <summary>
        /// Gets or Sets OpenFieldYards
        /// </summary>
        [DataMember(Name="openFieldYards", EmitDefaultValue=true)]
        public int OpenFieldYards { get; set; }

        /// <summary>
        /// Gets or Sets OpenFieldYardsPerRush
        /// </summary>
        [DataMember(Name="openFieldYardsPerRush", EmitDefaultValue=true)]
        public decimal OpenFieldYardsPerRush { get; set; }

        /// <summary>
        /// Gets or Sets PassingDownSuccessRate
        /// </summary>
        [DataMember(Name="passingDownSuccessRate", EmitDefaultValue=true)]
        public decimal PassingDownSuccessRate { get; set; }

        /// <summary>
        /// Gets or Sets PassingEpa
        /// </summary>
        [DataMember(Name="passingEpa", EmitDefaultValue=true)]
        public decimal PassingEpa { get; set; }

        /// <summary>
        /// Gets or Sets Plays
        /// </summary>
        [DataMember(Name="plays", EmitDefaultValue=true)]
        public int Plays { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name="points", EmitDefaultValue=true)]
        public int Points { get; set; }

        /// <summary>
        /// Gets or Sets PointsPerOpportunity
        /// </summary>
        [DataMember(Name="pointsPerOpportunity", EmitDefaultValue=true)]
        public decimal PointsPerOpportunity { get; set; }

        /// <summary>
        /// Gets or Sets RushingEpa
        /// </summary>
        [DataMember(Name="rushingEpa", EmitDefaultValue=true)]
        public decimal RushingEpa { get; set; }

        /// <summary>
        /// Gets or Sets ScoringOpportunities
        /// </summary>
        [DataMember(Name="scoringOpportunities", EmitDefaultValue=true)]
        public int ScoringOpportunities { get; set; }

        /// <summary>
        /// Gets or Sets SecondLevelYards
        /// </summary>
        [DataMember(Name="secondLevelYards", EmitDefaultValue=true)]
        public int SecondLevelYards { get; set; }

        /// <summary>
        /// Gets or Sets SecondLevelYardsPerRush
        /// </summary>
        [DataMember(Name="secondLevelYardsPerRush", EmitDefaultValue=true)]
        public decimal SecondLevelYardsPerRush { get; set; }

        /// <summary>
        /// Gets or Sets StandardDownSuccessRate
        /// </summary>
        [DataMember(Name="standardDownSuccessRate", EmitDefaultValue=true)]
        public decimal StandardDownSuccessRate { get; set; }

        /// <summary>
        /// Gets or Sets SuccessRate
        /// </summary>
        [DataMember(Name="successRate", EmitDefaultValue=true)]
        public decimal SuccessRate { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=true)]
        public int TeamId { get; set; }

        /// <summary>
        /// Gets or Sets TotalEpa
        /// </summary>
        [DataMember(Name="totalEpa", EmitDefaultValue=true)]
        public decimal TotalEpa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LivePlayByPlayTeamsInner {\n");
            sb.Append("  Drives: ").Append(Drives).Append("\n");
            sb.Append("  EpaPerPass: ").Append(EpaPerPass).Append("\n");
            sb.Append("  EpaPerPlay: ").Append(EpaPerPlay).Append("\n");
            sb.Append("  EpaPerRush: ").Append(EpaPerRush).Append("\n");
            sb.Append("  Explosiveness: ").Append(Explosiveness).Append("\n");
            sb.Append("  HomeAway: ").Append(HomeAway).Append("\n");
            sb.Append("  LineYards: ").Append(LineYards).Append("\n");
            sb.Append("  LineYardsPerRush: ").Append(LineYardsPerRush).Append("\n");
            sb.Append("  OpenFieldYards: ").Append(OpenFieldYards).Append("\n");
            sb.Append("  OpenFieldYardsPerRush: ").Append(OpenFieldYardsPerRush).Append("\n");
            sb.Append("  PassingDownSuccessRate: ").Append(PassingDownSuccessRate).Append("\n");
            sb.Append("  PassingEpa: ").Append(PassingEpa).Append("\n");
            sb.Append("  Plays: ").Append(Plays).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  PointsPerOpportunity: ").Append(PointsPerOpportunity).Append("\n");
            sb.Append("  RushingEpa: ").Append(RushingEpa).Append("\n");
            sb.Append("  ScoringOpportunities: ").Append(ScoringOpportunities).Append("\n");
            sb.Append("  SecondLevelYards: ").Append(SecondLevelYards).Append("\n");
            sb.Append("  SecondLevelYardsPerRush: ").Append(SecondLevelYardsPerRush).Append("\n");
            sb.Append("  StandardDownSuccessRate: ").Append(StandardDownSuccessRate).Append("\n");
            sb.Append("  SuccessRate: ").Append(SuccessRate).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  TotalEpa: ").Append(TotalEpa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LivePlayByPlayTeamsInner)obj);
        }

        /// <summary>
        /// Returns true if LivePlayByPlayTeamsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of LivePlayByPlayTeamsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LivePlayByPlayTeamsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Drives == other.Drives ||
                    
                    Drives.Equals(other.Drives)
                ) && 
                (
                    EpaPerPass == other.EpaPerPass ||
                    
                    EpaPerPass.Equals(other.EpaPerPass)
                ) && 
                (
                    EpaPerPlay == other.EpaPerPlay ||
                    
                    EpaPerPlay.Equals(other.EpaPerPlay)
                ) && 
                (
                    EpaPerRush == other.EpaPerRush ||
                    
                    EpaPerRush.Equals(other.EpaPerRush)
                ) && 
                (
                    Explosiveness == other.Explosiveness ||
                    
                    Explosiveness.Equals(other.Explosiveness)
                ) && 
                (
                    HomeAway == other.HomeAway ||
                    HomeAway != null &&
                    HomeAway.Equals(other.HomeAway)
                ) && 
                (
                    LineYards == other.LineYards ||
                    
                    LineYards.Equals(other.LineYards)
                ) && 
                (
                    LineYardsPerRush == other.LineYardsPerRush ||
                    
                    LineYardsPerRush.Equals(other.LineYardsPerRush)
                ) && 
                (
                    OpenFieldYards == other.OpenFieldYards ||
                    
                    OpenFieldYards.Equals(other.OpenFieldYards)
                ) && 
                (
                    OpenFieldYardsPerRush == other.OpenFieldYardsPerRush ||
                    
                    OpenFieldYardsPerRush.Equals(other.OpenFieldYardsPerRush)
                ) && 
                (
                    PassingDownSuccessRate == other.PassingDownSuccessRate ||
                    
                    PassingDownSuccessRate.Equals(other.PassingDownSuccessRate)
                ) && 
                (
                    PassingEpa == other.PassingEpa ||
                    
                    PassingEpa.Equals(other.PassingEpa)
                ) && 
                (
                    Plays == other.Plays ||
                    
                    Plays.Equals(other.Plays)
                ) && 
                (
                    Points == other.Points ||
                    
                    Points.Equals(other.Points)
                ) && 
                (
                    PointsPerOpportunity == other.PointsPerOpportunity ||
                    
                    PointsPerOpportunity.Equals(other.PointsPerOpportunity)
                ) && 
                (
                    RushingEpa == other.RushingEpa ||
                    
                    RushingEpa.Equals(other.RushingEpa)
                ) && 
                (
                    ScoringOpportunities == other.ScoringOpportunities ||
                    
                    ScoringOpportunities.Equals(other.ScoringOpportunities)
                ) && 
                (
                    SecondLevelYards == other.SecondLevelYards ||
                    
                    SecondLevelYards.Equals(other.SecondLevelYards)
                ) && 
                (
                    SecondLevelYardsPerRush == other.SecondLevelYardsPerRush ||
                    
                    SecondLevelYardsPerRush.Equals(other.SecondLevelYardsPerRush)
                ) && 
                (
                    StandardDownSuccessRate == other.StandardDownSuccessRate ||
                    
                    StandardDownSuccessRate.Equals(other.StandardDownSuccessRate)
                ) && 
                (
                    SuccessRate == other.SuccessRate ||
                    
                    SuccessRate.Equals(other.SuccessRate)
                ) && 
                (
                    Team == other.Team ||
                    Team != null &&
                    Team.Equals(other.Team)
                ) && 
                (
                    TeamId == other.TeamId ||
                    
                    TeamId.Equals(other.TeamId)
                ) && 
                (
                    TotalEpa == other.TotalEpa ||
                    
                    TotalEpa.Equals(other.TotalEpa)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Drives.GetHashCode();
                    
                    hashCode = hashCode * 59 + EpaPerPass.GetHashCode();
                    
                    hashCode = hashCode * 59 + EpaPerPlay.GetHashCode();
                    
                    hashCode = hashCode * 59 + EpaPerRush.GetHashCode();
                    
                    hashCode = hashCode * 59 + Explosiveness.GetHashCode();
                    if (HomeAway != null)
                    hashCode = hashCode * 59 + HomeAway.GetHashCode();
                    
                    hashCode = hashCode * 59 + LineYards.GetHashCode();
                    
                    hashCode = hashCode * 59 + LineYardsPerRush.GetHashCode();
                    
                    hashCode = hashCode * 59 + OpenFieldYards.GetHashCode();
                    
                    hashCode = hashCode * 59 + OpenFieldYardsPerRush.GetHashCode();
                    
                    hashCode = hashCode * 59 + PassingDownSuccessRate.GetHashCode();
                    
                    hashCode = hashCode * 59 + PassingEpa.GetHashCode();
                    
                    hashCode = hashCode * 59 + Plays.GetHashCode();
                    
                    hashCode = hashCode * 59 + Points.GetHashCode();
                    
                    hashCode = hashCode * 59 + PointsPerOpportunity.GetHashCode();
                    
                    hashCode = hashCode * 59 + RushingEpa.GetHashCode();
                    
                    hashCode = hashCode * 59 + ScoringOpportunities.GetHashCode();
                    
                    hashCode = hashCode * 59 + SecondLevelYards.GetHashCode();
                    
                    hashCode = hashCode * 59 + SecondLevelYardsPerRush.GetHashCode();
                    
                    hashCode = hashCode * 59 + StandardDownSuccessRate.GetHashCode();
                    
                    hashCode = hashCode * 59 + SuccessRate.GetHashCode();
                    if (Team != null)
                    hashCode = hashCode * 59 + Team.GetHashCode();
                    
                    hashCode = hashCode * 59 + TeamId.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalEpa.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LivePlayByPlayTeamsInner left, LivePlayByPlayTeamsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LivePlayByPlayTeamsInner left, LivePlayByPlayTeamsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
