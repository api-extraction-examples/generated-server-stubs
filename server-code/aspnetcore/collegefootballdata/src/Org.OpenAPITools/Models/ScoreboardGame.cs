/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ScoreboardGame : IEquatable<ScoreboardGame>
    {
        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [DataMember(Name="awayTeam", EmitDefaultValue=false)]
        public ScoreboardGameAwayTeam AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets Betting
        /// </summary>
        [DataMember(Name="betting", EmitDefaultValue=false)]
        public ScoreboardGameBetting Betting { get; set; }

        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [DataMember(Name="clock", EmitDefaultValue=false)]
        public string Clock { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceGame
        /// </summary>
        [DataMember(Name="conferenceGame", EmitDefaultValue=true)]
        public bool ConferenceGame { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [DataMember(Name="homeTeam", EmitDefaultValue=false)]
        public ScoreboardGameAwayTeam HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets NeutralSite
        /// </summary>
        [DataMember(Name="neutralSite", EmitDefaultValue=true)]
        public bool NeutralSite { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=true)]
        public int Period { get; set; }

        /// <summary>
        /// Gets or Sets Possession
        /// </summary>
        [DataMember(Name="possession", EmitDefaultValue=false)]
        public string Possession { get; set; }

        /// <summary>
        /// Gets or Sets Situation
        /// </summary>
        [DataMember(Name="situation", EmitDefaultValue=false)]
        public string Situation { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets StartTimeTBD
        /// </summary>
        [DataMember(Name="startTimeTBD", EmitDefaultValue=true)]
        public bool StartTimeTBD { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Tv
        /// </summary>
        [DataMember(Name="tv", EmitDefaultValue=false)]
        public string Tv { get; set; }

        /// <summary>
        /// Gets or Sets Venue
        /// </summary>
        [DataMember(Name="venue", EmitDefaultValue=false)]
        public ScoreboardGameVenue Venue { get; set; }

        /// <summary>
        /// Gets or Sets Weather
        /// </summary>
        [DataMember(Name="weather", EmitDefaultValue=false)]
        public ScoreboardGameWeather Weather { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScoreboardGame {\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  Betting: ").Append(Betting).Append("\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  ConferenceGame: ").Append(ConferenceGame).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NeutralSite: ").Append(NeutralSite).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Possession: ").Append(Possession).Append("\n");
            sb.Append("  Situation: ").Append(Situation).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartTimeTBD: ").Append(StartTimeTBD).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tv: ").Append(Tv).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  Weather: ").Append(Weather).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScoreboardGame)obj);
        }

        /// <summary>
        /// Returns true if ScoreboardGame instances are equal
        /// </summary>
        /// <param name="other">Instance of ScoreboardGame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScoreboardGame other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AwayTeam == other.AwayTeam ||
                    AwayTeam != null &&
                    AwayTeam.Equals(other.AwayTeam)
                ) && 
                (
                    Betting == other.Betting ||
                    Betting != null &&
                    Betting.Equals(other.Betting)
                ) && 
                (
                    Clock == other.Clock ||
                    Clock != null &&
                    Clock.Equals(other.Clock)
                ) && 
                (
                    ConferenceGame == other.ConferenceGame ||
                    
                    ConferenceGame.Equals(other.ConferenceGame)
                ) && 
                (
                    HomeTeam == other.HomeTeam ||
                    HomeTeam != null &&
                    HomeTeam.Equals(other.HomeTeam)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    NeutralSite == other.NeutralSite ||
                    
                    NeutralSite.Equals(other.NeutralSite)
                ) && 
                (
                    Period == other.Period ||
                    
                    Period.Equals(other.Period)
                ) && 
                (
                    Possession == other.Possession ||
                    Possession != null &&
                    Possession.Equals(other.Possession)
                ) && 
                (
                    Situation == other.Situation ||
                    Situation != null &&
                    Situation.Equals(other.Situation)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    StartTimeTBD == other.StartTimeTBD ||
                    
                    StartTimeTBD.Equals(other.StartTimeTBD)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Tv == other.Tv ||
                    Tv != null &&
                    Tv.Equals(other.Tv)
                ) && 
                (
                    Venue == other.Venue ||
                    Venue != null &&
                    Venue.Equals(other.Venue)
                ) && 
                (
                    Weather == other.Weather ||
                    Weather != null &&
                    Weather.Equals(other.Weather)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AwayTeam != null)
                    hashCode = hashCode * 59 + AwayTeam.GetHashCode();
                    if (Betting != null)
                    hashCode = hashCode * 59 + Betting.GetHashCode();
                    if (Clock != null)
                    hashCode = hashCode * 59 + Clock.GetHashCode();
                    
                    hashCode = hashCode * 59 + ConferenceGame.GetHashCode();
                    if (HomeTeam != null)
                    hashCode = hashCode * 59 + HomeTeam.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + NeutralSite.GetHashCode();
                    
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (Possession != null)
                    hashCode = hashCode * 59 + Possession.GetHashCode();
                    if (Situation != null)
                    hashCode = hashCode * 59 + Situation.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartTimeTBD.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Tv != null)
                    hashCode = hashCode * 59 + Tv.GetHashCode();
                    if (Venue != null)
                    hashCode = hashCode * 59 + Venue.GetHashCode();
                    if (Weather != null)
                    hashCode = hashCode * 59 + Weather.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScoreboardGame left, ScoreboardGame right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScoreboardGame left, ScoreboardGame right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
