/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ScoreboardGameBetting : IEquatable<ScoreboardGameBetting>
    {
        /// <summary>
        /// Gets or Sets AwayMoneyline
        /// </summary>
        [DataMember(Name="awayMoneyline", EmitDefaultValue=true)]
        public int AwayMoneyline { get; set; }

        /// <summary>
        /// Gets or Sets HomeMoneyline
        /// </summary>
        [DataMember(Name="homeMoneyline", EmitDefaultValue=true)]
        public int HomeMoneyline { get; set; }

        /// <summary>
        /// Gets or Sets OverUnder
        /// </summary>
        [DataMember(Name="overUnder", EmitDefaultValue=true)]
        public decimal OverUnder { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name="spread", EmitDefaultValue=true)]
        public decimal Spread { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScoreboardGameBetting {\n");
            sb.Append("  AwayMoneyline: ").Append(AwayMoneyline).Append("\n");
            sb.Append("  HomeMoneyline: ").Append(HomeMoneyline).Append("\n");
            sb.Append("  OverUnder: ").Append(OverUnder).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScoreboardGameBetting)obj);
        }

        /// <summary>
        /// Returns true if ScoreboardGameBetting instances are equal
        /// </summary>
        /// <param name="other">Instance of ScoreboardGameBetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScoreboardGameBetting other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AwayMoneyline == other.AwayMoneyline ||
                    
                    AwayMoneyline.Equals(other.AwayMoneyline)
                ) && 
                (
                    HomeMoneyline == other.HomeMoneyline ||
                    
                    HomeMoneyline.Equals(other.HomeMoneyline)
                ) && 
                (
                    OverUnder == other.OverUnder ||
                    
                    OverUnder.Equals(other.OverUnder)
                ) && 
                (
                    Spread == other.Spread ||
                    
                    Spread.Equals(other.Spread)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AwayMoneyline.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomeMoneyline.GetHashCode();
                    
                    hashCode = hashCode * 59 + OverUnder.GetHashCode();
                    
                    hashCode = hashCode * 59 + Spread.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScoreboardGameBetting left, ScoreboardGameBetting right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScoreboardGameBetting left, ScoreboardGameBetting right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
