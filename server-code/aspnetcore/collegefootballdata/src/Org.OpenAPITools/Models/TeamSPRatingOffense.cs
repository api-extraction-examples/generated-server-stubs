/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TeamSPRatingOffense : IEquatable<TeamSPRatingOffense>
    {
        /// <summary>
        /// Gets or Sets Explosiveness
        /// </summary>
        [DataMember(Name="explosiveness", EmitDefaultValue=true)]
        public decimal Explosiveness { get; set; }

        /// <summary>
        /// Gets or Sets Pace
        /// </summary>
        [DataMember(Name="pace", EmitDefaultValue=true)]
        public decimal Pace { get; set; }

        /// <summary>
        /// Gets or Sets Passing
        /// </summary>
        [DataMember(Name="passing", EmitDefaultValue=true)]
        public decimal Passing { get; set; }

        /// <summary>
        /// Gets or Sets PassingDowns
        /// </summary>
        [DataMember(Name="passingDowns", EmitDefaultValue=true)]
        public decimal PassingDowns { get; set; }

        /// <summary>
        /// Gets or Sets Ranking
        /// </summary>
        [DataMember(Name="ranking", EmitDefaultValue=true)]
        public decimal Ranking { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=true)]
        public decimal Rating { get; set; }

        /// <summary>
        /// Gets or Sets RunRate
        /// </summary>
        [DataMember(Name="runRate", EmitDefaultValue=true)]
        public decimal RunRate { get; set; }

        /// <summary>
        /// Gets or Sets Rushing
        /// </summary>
        [DataMember(Name="rushing", EmitDefaultValue=true)]
        public decimal Rushing { get; set; }

        /// <summary>
        /// Gets or Sets StandardDowns
        /// </summary>
        [DataMember(Name="standardDowns", EmitDefaultValue=true)]
        public decimal StandardDowns { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=true)]
        public decimal Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamSPRatingOffense {\n");
            sb.Append("  Explosiveness: ").Append(Explosiveness).Append("\n");
            sb.Append("  Pace: ").Append(Pace).Append("\n");
            sb.Append("  Passing: ").Append(Passing).Append("\n");
            sb.Append("  PassingDowns: ").Append(PassingDowns).Append("\n");
            sb.Append("  Ranking: ").Append(Ranking).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  RunRate: ").Append(RunRate).Append("\n");
            sb.Append("  Rushing: ").Append(Rushing).Append("\n");
            sb.Append("  StandardDowns: ").Append(StandardDowns).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TeamSPRatingOffense)obj);
        }

        /// <summary>
        /// Returns true if TeamSPRatingOffense instances are equal
        /// </summary>
        /// <param name="other">Instance of TeamSPRatingOffense to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamSPRatingOffense other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Explosiveness == other.Explosiveness ||
                    
                    Explosiveness.Equals(other.Explosiveness)
                ) && 
                (
                    Pace == other.Pace ||
                    
                    Pace.Equals(other.Pace)
                ) && 
                (
                    Passing == other.Passing ||
                    
                    Passing.Equals(other.Passing)
                ) && 
                (
                    PassingDowns == other.PassingDowns ||
                    
                    PassingDowns.Equals(other.PassingDowns)
                ) && 
                (
                    Ranking == other.Ranking ||
                    
                    Ranking.Equals(other.Ranking)
                ) && 
                (
                    Rating == other.Rating ||
                    
                    Rating.Equals(other.Rating)
                ) && 
                (
                    RunRate == other.RunRate ||
                    
                    RunRate.Equals(other.RunRate)
                ) && 
                (
                    Rushing == other.Rushing ||
                    
                    Rushing.Equals(other.Rushing)
                ) && 
                (
                    StandardDowns == other.StandardDowns ||
                    
                    StandardDowns.Equals(other.StandardDowns)
                ) && 
                (
                    Success == other.Success ||
                    
                    Success.Equals(other.Success)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Explosiveness.GetHashCode();
                    
                    hashCode = hashCode * 59 + Pace.GetHashCode();
                    
                    hashCode = hashCode * 59 + Passing.GetHashCode();
                    
                    hashCode = hashCode * 59 + PassingDowns.GetHashCode();
                    
                    hashCode = hashCode * 59 + Ranking.GetHashCode();
                    
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                    
                    hashCode = hashCode * 59 + RunRate.GetHashCode();
                    
                    hashCode = hashCode * 59 + Rushing.GetHashCode();
                    
                    hashCode = hashCode * 59 + StandardDowns.GetHashCode();
                    
                    hashCode = hashCode * 59 + Success.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TeamSPRatingOffense left, TeamSPRatingOffense right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TeamSPRatingOffense left, TeamSPRatingOffense right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
