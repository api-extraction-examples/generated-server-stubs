/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GameWeather : IEquatable<GameWeather>
    {
        /// <summary>
        /// Gets or Sets AwayConference
        /// </summary>
        [DataMember(Name="awayConference", EmitDefaultValue=false)]
        public string AwayConference { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [DataMember(Name="awayTeam", EmitDefaultValue=false)]
        public string AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets DewPoint
        /// </summary>
        [DataMember(Name="dewPoint", EmitDefaultValue=true)]
        public decimal DewPoint { get; set; }

        /// <summary>
        /// Gets or Sets GameIndoors
        /// </summary>
        [DataMember(Name="gameIndoors", EmitDefaultValue=true)]
        public bool GameIndoors { get; set; }

        /// <summary>
        /// Gets or Sets HomeConference
        /// </summary>
        [DataMember(Name="homeConference", EmitDefaultValue=false)]
        public string HomeConference { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [DataMember(Name="homeTeam", EmitDefaultValue=false)]
        public string HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets Humidity
        /// </summary>
        [DataMember(Name="humidity", EmitDefaultValue=true)]
        public decimal Humidity { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Precipitation
        /// </summary>
        [DataMember(Name="precipitation", EmitDefaultValue=true)]
        public decimal Precipitation { get; set; }

        /// <summary>
        /// Gets or Sets Pressure
        /// </summary>
        [DataMember(Name="pressure", EmitDefaultValue=true)]
        public decimal Pressure { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name="season", EmitDefaultValue=true)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets SeasonType
        /// </summary>
        [DataMember(Name="seasonType", EmitDefaultValue=false)]
        public string SeasonType { get; set; }

        /// <summary>
        /// Gets or Sets Snowfall
        /// </summary>
        [DataMember(Name="snowfall", EmitDefaultValue=true)]
        public decimal Snowfall { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name="temperature", EmitDefaultValue=true)]
        public decimal Temperature { get; set; }

        /// <summary>
        /// Gets or Sets Venue
        /// </summary>
        [DataMember(Name="venue", EmitDefaultValue=false)]
        public string Venue { get; set; }

        /// <summary>
        /// Gets or Sets VenueId
        /// </summary>
        [DataMember(Name="venueId", EmitDefaultValue=true)]
        public int VenueId { get; set; }

        /// <summary>
        /// Gets or Sets WeatherCondition
        /// </summary>
        [DataMember(Name="weatherCondition", EmitDefaultValue=false)]
        public string WeatherCondition { get; set; }

        /// <summary>
        /// Gets or Sets WeatherConditionCode
        /// </summary>
        [DataMember(Name="weatherConditionCode", EmitDefaultValue=true)]
        public int WeatherConditionCode { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name="week", EmitDefaultValue=true)]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets WindDirection
        /// </summary>
        [DataMember(Name="windDirection", EmitDefaultValue=true)]
        public decimal WindDirection { get; set; }

        /// <summary>
        /// Gets or Sets WindSpeed
        /// </summary>
        [DataMember(Name="windSpeed", EmitDefaultValue=true)]
        public decimal WindSpeed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GameWeather {\n");
            sb.Append("  AwayConference: ").Append(AwayConference).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  DewPoint: ").Append(DewPoint).Append("\n");
            sb.Append("  GameIndoors: ").Append(GameIndoors).Append("\n");
            sb.Append("  HomeConference: ").Append(HomeConference).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  Humidity: ").Append(Humidity).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Precipitation: ").Append(Precipitation).Append("\n");
            sb.Append("  Pressure: ").Append(Pressure).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  SeasonType: ").Append(SeasonType).Append("\n");
            sb.Append("  Snowfall: ").Append(Snowfall).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  VenueId: ").Append(VenueId).Append("\n");
            sb.Append("  WeatherCondition: ").Append(WeatherCondition).Append("\n");
            sb.Append("  WeatherConditionCode: ").Append(WeatherConditionCode).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  WindDirection: ").Append(WindDirection).Append("\n");
            sb.Append("  WindSpeed: ").Append(WindSpeed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GameWeather)obj);
        }

        /// <summary>
        /// Returns true if GameWeather instances are equal
        /// </summary>
        /// <param name="other">Instance of GameWeather to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GameWeather other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AwayConference == other.AwayConference ||
                    AwayConference != null &&
                    AwayConference.Equals(other.AwayConference)
                ) && 
                (
                    AwayTeam == other.AwayTeam ||
                    AwayTeam != null &&
                    AwayTeam.Equals(other.AwayTeam)
                ) && 
                (
                    DewPoint == other.DewPoint ||
                    
                    DewPoint.Equals(other.DewPoint)
                ) && 
                (
                    GameIndoors == other.GameIndoors ||
                    
                    GameIndoors.Equals(other.GameIndoors)
                ) && 
                (
                    HomeConference == other.HomeConference ||
                    HomeConference != null &&
                    HomeConference.Equals(other.HomeConference)
                ) && 
                (
                    HomeTeam == other.HomeTeam ||
                    HomeTeam != null &&
                    HomeTeam.Equals(other.HomeTeam)
                ) && 
                (
                    Humidity == other.Humidity ||
                    
                    Humidity.Equals(other.Humidity)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Precipitation == other.Precipitation ||
                    
                    Precipitation.Equals(other.Precipitation)
                ) && 
                (
                    Pressure == other.Pressure ||
                    
                    Pressure.Equals(other.Pressure)
                ) && 
                (
                    Season == other.Season ||
                    
                    Season.Equals(other.Season)
                ) && 
                (
                    SeasonType == other.SeasonType ||
                    SeasonType != null &&
                    SeasonType.Equals(other.SeasonType)
                ) && 
                (
                    Snowfall == other.Snowfall ||
                    
                    Snowfall.Equals(other.Snowfall)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    Temperature == other.Temperature ||
                    
                    Temperature.Equals(other.Temperature)
                ) && 
                (
                    Venue == other.Venue ||
                    Venue != null &&
                    Venue.Equals(other.Venue)
                ) && 
                (
                    VenueId == other.VenueId ||
                    
                    VenueId.Equals(other.VenueId)
                ) && 
                (
                    WeatherCondition == other.WeatherCondition ||
                    WeatherCondition != null &&
                    WeatherCondition.Equals(other.WeatherCondition)
                ) && 
                (
                    WeatherConditionCode == other.WeatherConditionCode ||
                    
                    WeatherConditionCode.Equals(other.WeatherConditionCode)
                ) && 
                (
                    Week == other.Week ||
                    
                    Week.Equals(other.Week)
                ) && 
                (
                    WindDirection == other.WindDirection ||
                    
                    WindDirection.Equals(other.WindDirection)
                ) && 
                (
                    WindSpeed == other.WindSpeed ||
                    
                    WindSpeed.Equals(other.WindSpeed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AwayConference != null)
                    hashCode = hashCode * 59 + AwayConference.GetHashCode();
                    if (AwayTeam != null)
                    hashCode = hashCode * 59 + AwayTeam.GetHashCode();
                    
                    hashCode = hashCode * 59 + DewPoint.GetHashCode();
                    
                    hashCode = hashCode * 59 + GameIndoors.GetHashCode();
                    if (HomeConference != null)
                    hashCode = hashCode * 59 + HomeConference.GetHashCode();
                    if (HomeTeam != null)
                    hashCode = hashCode * 59 + HomeTeam.GetHashCode();
                    
                    hashCode = hashCode * 59 + Humidity.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Precipitation.GetHashCode();
                    
                    hashCode = hashCode * 59 + Pressure.GetHashCode();
                    
                    hashCode = hashCode * 59 + Season.GetHashCode();
                    if (SeasonType != null)
                    hashCode = hashCode * 59 + SeasonType.GetHashCode();
                    
                    hashCode = hashCode * 59 + Snowfall.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + Temperature.GetHashCode();
                    if (Venue != null)
                    hashCode = hashCode * 59 + Venue.GetHashCode();
                    
                    hashCode = hashCode * 59 + VenueId.GetHashCode();
                    if (WeatherCondition != null)
                    hashCode = hashCode * 59 + WeatherCondition.GetHashCode();
                    
                    hashCode = hashCode * 59 + WeatherConditionCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + Week.GetHashCode();
                    
                    hashCode = hashCode * 59 + WindDirection.GetHashCode();
                    
                    hashCode = hashCode * 59 + WindSpeed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GameWeather left, GameWeather right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GameWeather left, GameWeather right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
