/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CoachSeasonsInner : IEquatable<CoachSeasonsInner>
    {
        /// <summary>
        /// Gets or Sets Games
        /// </summary>
        [DataMember(Name="games", EmitDefaultValue=true)]
        public int Games { get; set; }

        /// <summary>
        /// Gets or Sets Losses
        /// </summary>
        [DataMember(Name="losses", EmitDefaultValue=true)]
        public int Losses { get; set; }

        /// <summary>
        /// Final ranking in the AP poll
        /// </summary>
        /// <value>Final ranking in the AP poll</value>
        [DataMember(Name="postseason_rank", EmitDefaultValue=true)]
        public int PostseasonRank { get; set; }

        /// <summary>
        /// Rank in the AP preseason poll
        /// </summary>
        /// <value>Rank in the AP preseason poll</value>
        [DataMember(Name="preseason_rank", EmitDefaultValue=true)]
        public int PreseasonRank { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Final SP+ defensive rating
        /// </summary>
        /// <value>Final SP+ defensive rating</value>
        [DataMember(Name="sp_defense", EmitDefaultValue=true)]
        public decimal SpDefense { get; set; }

        /// <summary>
        /// Final SP+ offensive rating
        /// </summary>
        /// <value>Final SP+ offensive rating</value>
        [DataMember(Name="sp_offense", EmitDefaultValue=true)]
        public decimal SpOffense { get; set; }

        /// <summary>
        /// Final overall SP+ rating
        /// </summary>
        /// <value>Final overall SP+ rating</value>
        [DataMember(Name="sp_overall", EmitDefaultValue=true)]
        public decimal SpOverall { get; set; }

        /// <summary>
        /// Final SRS rankings
        /// </summary>
        /// <value>Final SRS rankings</value>
        [DataMember(Name="srs", EmitDefaultValue=true)]
        public decimal Srs { get; set; }

        /// <summary>
        /// Gets or Sets Ties
        /// </summary>
        [DataMember(Name="ties", EmitDefaultValue=true)]
        public int Ties { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=true)]
        public int Wins { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public string Year { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoachSeasonsInner {\n");
            sb.Append("  Games: ").Append(Games).Append("\n");
            sb.Append("  Losses: ").Append(Losses).Append("\n");
            sb.Append("  PostseasonRank: ").Append(PostseasonRank).Append("\n");
            sb.Append("  PreseasonRank: ").Append(PreseasonRank).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  SpDefense: ").Append(SpDefense).Append("\n");
            sb.Append("  SpOffense: ").Append(SpOffense).Append("\n");
            sb.Append("  SpOverall: ").Append(SpOverall).Append("\n");
            sb.Append("  Srs: ").Append(Srs).Append("\n");
            sb.Append("  Ties: ").Append(Ties).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CoachSeasonsInner)obj);
        }

        /// <summary>
        /// Returns true if CoachSeasonsInner instances are equal
        /// </summary>
        /// <param name="other">Instance of CoachSeasonsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoachSeasonsInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Games == other.Games ||
                    
                    Games.Equals(other.Games)
                ) && 
                (
                    Losses == other.Losses ||
                    
                    Losses.Equals(other.Losses)
                ) && 
                (
                    PostseasonRank == other.PostseasonRank ||
                    
                    PostseasonRank.Equals(other.PostseasonRank)
                ) && 
                (
                    PreseasonRank == other.PreseasonRank ||
                    
                    PreseasonRank.Equals(other.PreseasonRank)
                ) && 
                (
                    School == other.School ||
                    School != null &&
                    School.Equals(other.School)
                ) && 
                (
                    SpDefense == other.SpDefense ||
                    
                    SpDefense.Equals(other.SpDefense)
                ) && 
                (
                    SpOffense == other.SpOffense ||
                    
                    SpOffense.Equals(other.SpOffense)
                ) && 
                (
                    SpOverall == other.SpOverall ||
                    
                    SpOverall.Equals(other.SpOverall)
                ) && 
                (
                    Srs == other.Srs ||
                    
                    Srs.Equals(other.Srs)
                ) && 
                (
                    Ties == other.Ties ||
                    
                    Ties.Equals(other.Ties)
                ) && 
                (
                    Wins == other.Wins ||
                    
                    Wins.Equals(other.Wins)
                ) && 
                (
                    Year == other.Year ||
                    Year != null &&
                    Year.Equals(other.Year)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Games.GetHashCode();
                    
                    hashCode = hashCode * 59 + Losses.GetHashCode();
                    
                    hashCode = hashCode * 59 + PostseasonRank.GetHashCode();
                    
                    hashCode = hashCode * 59 + PreseasonRank.GetHashCode();
                    if (School != null)
                    hashCode = hashCode * 59 + School.GetHashCode();
                    
                    hashCode = hashCode * 59 + SpDefense.GetHashCode();
                    
                    hashCode = hashCode * 59 + SpOffense.GetHashCode();
                    
                    hashCode = hashCode * 59 + SpOverall.GetHashCode();
                    
                    hashCode = hashCode * 59 + Srs.GetHashCode();
                    
                    hashCode = hashCode * 59 + Ties.GetHashCode();
                    
                    hashCode = hashCode * 59 + Wins.GetHashCode();
                    if (Year != null)
                    hashCode = hashCode * 59 + Year.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CoachSeasonsInner left, CoachSeasonsInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CoachSeasonsInner left, CoachSeasonsInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
