/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Drive : IEquatable<Drive>
    {
        /// <summary>
        /// Gets or Sets Defense
        /// </summary>
        [DataMember(Name="defense", EmitDefaultValue=false)]
        public string Defense { get; set; }

        /// <summary>
        /// Gets or Sets DefenseConference
        /// </summary>
        [DataMember(Name="defense_conference", EmitDefaultValue=false)]
        public string DefenseConference { get; set; }

        /// <summary>
        /// Gets or Sets DriveNumber
        /// </summary>
        [DataMember(Name="drive_number", EmitDefaultValue=true)]
        public int DriveNumber { get; set; }

        /// <summary>
        /// Gets or Sets DriveResult
        /// </summary>
        [DataMember(Name="drive_result", EmitDefaultValue=false)]
        public string DriveResult { get; set; }

        /// <summary>
        /// Gets or Sets EndDefenseScore
        /// </summary>
        [DataMember(Name="end_defense_score", EmitDefaultValue=true)]
        public int EndDefenseScore { get; set; }

        /// <summary>
        /// Gets or Sets EndOffenseScore
        /// </summary>
        [DataMember(Name="end_offense_score", EmitDefaultValue=true)]
        public int EndOffenseScore { get; set; }

        /// <summary>
        /// Gets or Sets EndPeriod
        /// </summary>
        [DataMember(Name="end_period", EmitDefaultValue=true)]
        public int EndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public DriveEndTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets EndYardline
        /// </summary>
        [DataMember(Name="end_yardline", EmitDefaultValue=true)]
        public int EndYardline { get; set; }

        /// <summary>
        /// Gets or Sets EndYardsToGoal
        /// </summary>
        [DataMember(Name="end_yards_to_goal", EmitDefaultValue=true)]
        public int EndYardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="game_id", EmitDefaultValue=true)]
        public int GameId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets IsHomeOffense
        /// </summary>
        [DataMember(Name="is_home_offense", EmitDefaultValue=true)]
        public bool IsHomeOffense { get; set; }

        /// <summary>
        /// Gets or Sets Offense
        /// </summary>
        [DataMember(Name="offense", EmitDefaultValue=false)]
        public string Offense { get; set; }

        /// <summary>
        /// Gets or Sets OffenseConference
        /// </summary>
        [DataMember(Name="offense_conference", EmitDefaultValue=false)]
        public string OffenseConference { get; set; }

        /// <summary>
        /// Gets or Sets Plays
        /// </summary>
        [DataMember(Name="plays", EmitDefaultValue=true)]
        public int Plays { get; set; }

        /// <summary>
        /// Gets or Sets Scoring
        /// </summary>
        [DataMember(Name="scoring", EmitDefaultValue=true)]
        public bool Scoring { get; set; }

        /// <summary>
        /// Gets or Sets StartDefenseScore
        /// </summary>
        [DataMember(Name="start_defense_score", EmitDefaultValue=true)]
        public int StartDefenseScore { get; set; }

        /// <summary>
        /// Gets or Sets StartOffenseScore
        /// </summary>
        [DataMember(Name="start_offense_score", EmitDefaultValue=true)]
        public int StartOffenseScore { get; set; }

        /// <summary>
        /// Gets or Sets StartPeriod
        /// </summary>
        [DataMember(Name="start_period", EmitDefaultValue=true)]
        public int StartPeriod { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DriveEndTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets StartYardline
        /// </summary>
        [DataMember(Name="start_yardline", EmitDefaultValue=true)]
        public int StartYardline { get; set; }

        /// <summary>
        /// Gets or Sets StartYardsToGoal
        /// </summary>
        [DataMember(Name="start_yards_to_goal", EmitDefaultValue=true)]
        public int StartYardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets Yards
        /// </summary>
        [DataMember(Name="yards", EmitDefaultValue=true)]
        public int Yards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Drive {\n");
            sb.Append("  Defense: ").Append(Defense).Append("\n");
            sb.Append("  DefenseConference: ").Append(DefenseConference).Append("\n");
            sb.Append("  DriveNumber: ").Append(DriveNumber).Append("\n");
            sb.Append("  DriveResult: ").Append(DriveResult).Append("\n");
            sb.Append("  EndDefenseScore: ").Append(EndDefenseScore).Append("\n");
            sb.Append("  EndOffenseScore: ").Append(EndOffenseScore).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  EndYardline: ").Append(EndYardline).Append("\n");
            sb.Append("  EndYardsToGoal: ").Append(EndYardsToGoal).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsHomeOffense: ").Append(IsHomeOffense).Append("\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  OffenseConference: ").Append(OffenseConference).Append("\n");
            sb.Append("  Plays: ").Append(Plays).Append("\n");
            sb.Append("  Scoring: ").Append(Scoring).Append("\n");
            sb.Append("  StartDefenseScore: ").Append(StartDefenseScore).Append("\n");
            sb.Append("  StartOffenseScore: ").Append(StartOffenseScore).Append("\n");
            sb.Append("  StartPeriod: ").Append(StartPeriod).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StartYardline: ").Append(StartYardline).Append("\n");
            sb.Append("  StartYardsToGoal: ").Append(StartYardsToGoal).Append("\n");
            sb.Append("  Yards: ").Append(Yards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Drive)obj);
        }

        /// <summary>
        /// Returns true if Drive instances are equal
        /// </summary>
        /// <param name="other">Instance of Drive to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Drive other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Defense == other.Defense ||
                    Defense != null &&
                    Defense.Equals(other.Defense)
                ) && 
                (
                    DefenseConference == other.DefenseConference ||
                    DefenseConference != null &&
                    DefenseConference.Equals(other.DefenseConference)
                ) && 
                (
                    DriveNumber == other.DriveNumber ||
                    
                    DriveNumber.Equals(other.DriveNumber)
                ) && 
                (
                    DriveResult == other.DriveResult ||
                    DriveResult != null &&
                    DriveResult.Equals(other.DriveResult)
                ) && 
                (
                    EndDefenseScore == other.EndDefenseScore ||
                    
                    EndDefenseScore.Equals(other.EndDefenseScore)
                ) && 
                (
                    EndOffenseScore == other.EndOffenseScore ||
                    
                    EndOffenseScore.Equals(other.EndOffenseScore)
                ) && 
                (
                    EndPeriod == other.EndPeriod ||
                    
                    EndPeriod.Equals(other.EndPeriod)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    EndYardline == other.EndYardline ||
                    
                    EndYardline.Equals(other.EndYardline)
                ) && 
                (
                    EndYardsToGoal == other.EndYardsToGoal ||
                    
                    EndYardsToGoal.Equals(other.EndYardsToGoal)
                ) && 
                (
                    GameId == other.GameId ||
                    
                    GameId.Equals(other.GameId)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    IsHomeOffense == other.IsHomeOffense ||
                    
                    IsHomeOffense.Equals(other.IsHomeOffense)
                ) && 
                (
                    Offense == other.Offense ||
                    Offense != null &&
                    Offense.Equals(other.Offense)
                ) && 
                (
                    OffenseConference == other.OffenseConference ||
                    OffenseConference != null &&
                    OffenseConference.Equals(other.OffenseConference)
                ) && 
                (
                    Plays == other.Plays ||
                    
                    Plays.Equals(other.Plays)
                ) && 
                (
                    Scoring == other.Scoring ||
                    
                    Scoring.Equals(other.Scoring)
                ) && 
                (
                    StartDefenseScore == other.StartDefenseScore ||
                    
                    StartDefenseScore.Equals(other.StartDefenseScore)
                ) && 
                (
                    StartOffenseScore == other.StartOffenseScore ||
                    
                    StartOffenseScore.Equals(other.StartOffenseScore)
                ) && 
                (
                    StartPeriod == other.StartPeriod ||
                    
                    StartPeriod.Equals(other.StartPeriod)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    StartYardline == other.StartYardline ||
                    
                    StartYardline.Equals(other.StartYardline)
                ) && 
                (
                    StartYardsToGoal == other.StartYardsToGoal ||
                    
                    StartYardsToGoal.Equals(other.StartYardsToGoal)
                ) && 
                (
                    Yards == other.Yards ||
                    
                    Yards.Equals(other.Yards)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Defense != null)
                    hashCode = hashCode * 59 + Defense.GetHashCode();
                    if (DefenseConference != null)
                    hashCode = hashCode * 59 + DefenseConference.GetHashCode();
                    
                    hashCode = hashCode * 59 + DriveNumber.GetHashCode();
                    if (DriveResult != null)
                    hashCode = hashCode * 59 + DriveResult.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndDefenseScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndOffenseScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndPeriod.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndYardline.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndYardsToGoal.GetHashCode();
                    
                    hashCode = hashCode * 59 + GameId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsHomeOffense.GetHashCode();
                    if (Offense != null)
                    hashCode = hashCode * 59 + Offense.GetHashCode();
                    if (OffenseConference != null)
                    hashCode = hashCode * 59 + OffenseConference.GetHashCode();
                    
                    hashCode = hashCode * 59 + Plays.GetHashCode();
                    
                    hashCode = hashCode * 59 + Scoring.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartDefenseScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartOffenseScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartPeriod.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartYardline.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartYardsToGoal.GetHashCode();
                    
                    hashCode = hashCode * 59 + Yards.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Drive left, Drive right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Drive left, Drive right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
