/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LivePlayByPlay : IEquatable<LivePlayByPlay>
    {
        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [DataMember(Name="clock", EmitDefaultValue=false)]
        public string Clock { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=true)]
        public int Distance { get; set; }

        /// <summary>
        /// Gets or Sets Down
        /// </summary>
        [DataMember(Name="down", EmitDefaultValue=true)]
        public int Down { get; set; }

        /// <summary>
        /// Gets or Sets Drives
        /// </summary>
        [DataMember(Name="drives", EmitDefaultValue=false)]
        public List<LivePlayByPlayDrivesInner> Drives { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=true)]
        public int Period { get; set; }

        /// <summary>
        /// Gets or Sets Possession
        /// </summary>
        [DataMember(Name="possession", EmitDefaultValue=false)]
        public string Possession { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public List<LivePlayByPlayTeamsInner> Teams { get; set; }

        /// <summary>
        /// Gets or Sets YardsToGoal
        /// </summary>
        [DataMember(Name="yardsToGoal", EmitDefaultValue=true)]
        public int YardsToGoal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LivePlayByPlay {\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("  Drives: ").Append(Drives).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Possession: ").Append(Possession).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("  YardsToGoal: ").Append(YardsToGoal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LivePlayByPlay)obj);
        }

        /// <summary>
        /// Returns true if LivePlayByPlay instances are equal
        /// </summary>
        /// <param name="other">Instance of LivePlayByPlay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LivePlayByPlay other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Clock == other.Clock ||
                    Clock != null &&
                    Clock.Equals(other.Clock)
                ) && 
                (
                    Distance == other.Distance ||
                    
                    Distance.Equals(other.Distance)
                ) && 
                (
                    Down == other.Down ||
                    
                    Down.Equals(other.Down)
                ) && 
                (
                    Drives == other.Drives ||
                    Drives != null &&
                    other.Drives != null &&
                    Drives.SequenceEqual(other.Drives)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Period == other.Period ||
                    
                    Period.Equals(other.Period)
                ) && 
                (
                    Possession == other.Possession ||
                    Possession != null &&
                    Possession.Equals(other.Possession)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Teams == other.Teams ||
                    Teams != null &&
                    other.Teams != null &&
                    Teams.SequenceEqual(other.Teams)
                ) && 
                (
                    YardsToGoal == other.YardsToGoal ||
                    
                    YardsToGoal.Equals(other.YardsToGoal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Clock != null)
                    hashCode = hashCode * 59 + Clock.GetHashCode();
                    
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    
                    hashCode = hashCode * 59 + Down.GetHashCode();
                    if (Drives != null)
                    hashCode = hashCode * 59 + Drives.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (Possession != null)
                    hashCode = hashCode * 59 + Possession.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Teams != null)
                    hashCode = hashCode * 59 + Teams.GetHashCode();
                    
                    hashCode = hashCode * 59 + YardsToGoal.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LivePlayByPlay left, LivePlayByPlay right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LivePlayByPlay left, LivePlayByPlay right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
