/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Game : IEquatable<Game>
    {
        /// <summary>
        /// Gets or Sets Attendance
        /// </summary>
        [DataMember(Name="attendance", EmitDefaultValue=true)]
        public int Attendance { get; set; }

        /// <summary>
        /// Gets or Sets AwayConference
        /// </summary>
        [DataMember(Name="away_conference", EmitDefaultValue=false)]
        public string AwayConference { get; set; }

        /// <summary>
        /// Gets or Sets AwayDivision
        /// </summary>
        [DataMember(Name="away_division", EmitDefaultValue=false)]
        public string AwayDivision { get; set; }

        /// <summary>
        /// Gets or Sets AwayId
        /// </summary>
        [DataMember(Name="away_id", EmitDefaultValue=true)]
        public int AwayId { get; set; }

        /// <summary>
        /// Gets or Sets AwayLineScores
        /// </summary>
        [DataMember(Name="away_line_scores", EmitDefaultValue=false)]
        public List<int> AwayLineScores { get; set; }

        /// <summary>
        /// Gets or Sets AwayPoints
        /// </summary>
        [DataMember(Name="away_points", EmitDefaultValue=true)]
        public int AwayPoints { get; set; }

        /// <summary>
        /// Gets or Sets AwayPostWinProb
        /// </summary>
        [DataMember(Name="away_post_win_prob", EmitDefaultValue=true)]
        public decimal AwayPostWinProb { get; set; }

        /// <summary>
        /// Gets or Sets AwayPostgameElo
        /// </summary>
        [DataMember(Name="away_postgame_elo", EmitDefaultValue=true)]
        public int AwayPostgameElo { get; set; }

        /// <summary>
        /// Gets or Sets AwayPregameElo
        /// </summary>
        [DataMember(Name="away_pregame_elo", EmitDefaultValue=true)]
        public int AwayPregameElo { get; set; }

        /// <summary>
        /// Gets or Sets AwayTeam
        /// </summary>
        [DataMember(Name="away_team", EmitDefaultValue=false)]
        public string AwayTeam { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name="completed", EmitDefaultValue=true)]
        public bool Completed { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceGame
        /// </summary>
        [DataMember(Name="conference_game", EmitDefaultValue=true)]
        public bool ConferenceGame { get; set; }

        /// <summary>
        /// Gets or Sets ExcitementIndex
        /// </summary>
        [DataMember(Name="excitement_index", EmitDefaultValue=true)]
        public decimal ExcitementIndex { get; set; }

        /// <summary>
        /// Gets or Sets Highlights
        /// </summary>
        [DataMember(Name="highlights", EmitDefaultValue=false)]
        public string Highlights { get; set; }

        /// <summary>
        /// Gets or Sets HomeConference
        /// </summary>
        [DataMember(Name="home_conference", EmitDefaultValue=false)]
        public string HomeConference { get; set; }

        /// <summary>
        /// Gets or Sets HomeDivision
        /// </summary>
        [DataMember(Name="home_division", EmitDefaultValue=false)]
        public string HomeDivision { get; set; }

        /// <summary>
        /// Gets or Sets HomeId
        /// </summary>
        [DataMember(Name="home_id", EmitDefaultValue=true)]
        public int HomeId { get; set; }

        /// <summary>
        /// Gets or Sets HomeLineScores
        /// </summary>
        [DataMember(Name="home_line_scores", EmitDefaultValue=false)]
        public List<int> HomeLineScores { get; set; }

        /// <summary>
        /// Gets or Sets HomePoints
        /// </summary>
        [DataMember(Name="home_points", EmitDefaultValue=true)]
        public int HomePoints { get; set; }

        /// <summary>
        /// Gets or Sets HomePostWinProb
        /// </summary>
        [DataMember(Name="home_post_win_prob", EmitDefaultValue=true)]
        public decimal HomePostWinProb { get; set; }

        /// <summary>
        /// Gets or Sets HomePostgameElo
        /// </summary>
        [DataMember(Name="home_postgame_elo", EmitDefaultValue=true)]
        public int HomePostgameElo { get; set; }

        /// <summary>
        /// Gets or Sets HomePregameElo
        /// </summary>
        [DataMember(Name="home_pregame_elo", EmitDefaultValue=true)]
        public int HomePregameElo { get; set; }

        /// <summary>
        /// Gets or Sets HomeTeam
        /// </summary>
        [DataMember(Name="home_team", EmitDefaultValue=false)]
        public string HomeTeam { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets NeutralSite
        /// </summary>
        [DataMember(Name="neutral_site", EmitDefaultValue=true)]
        public bool NeutralSite { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name="season", EmitDefaultValue=true)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets SeasonType
        /// </summary>
        [DataMember(Name="season_type", EmitDefaultValue=false)]
        public string SeasonType { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets StartTimeTbd
        /// </summary>
        [DataMember(Name="start_time_tbd", EmitDefaultValue=true)]
        public bool StartTimeTbd { get; set; }

        /// <summary>
        /// Gets or Sets Venue
        /// </summary>
        [DataMember(Name="venue", EmitDefaultValue=false)]
        public string Venue { get; set; }

        /// <summary>
        /// Gets or Sets VenueId
        /// </summary>
        [DataMember(Name="venue_id", EmitDefaultValue=true)]
        public int VenueId { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name="week", EmitDefaultValue=true)]
        public int Week { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Game {\n");
            sb.Append("  Attendance: ").Append(Attendance).Append("\n");
            sb.Append("  AwayConference: ").Append(AwayConference).Append("\n");
            sb.Append("  AwayDivision: ").Append(AwayDivision).Append("\n");
            sb.Append("  AwayId: ").Append(AwayId).Append("\n");
            sb.Append("  AwayLineScores: ").Append(AwayLineScores).Append("\n");
            sb.Append("  AwayPoints: ").Append(AwayPoints).Append("\n");
            sb.Append("  AwayPostWinProb: ").Append(AwayPostWinProb).Append("\n");
            sb.Append("  AwayPostgameElo: ").Append(AwayPostgameElo).Append("\n");
            sb.Append("  AwayPregameElo: ").Append(AwayPregameElo).Append("\n");
            sb.Append("  AwayTeam: ").Append(AwayTeam).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  ConferenceGame: ").Append(ConferenceGame).Append("\n");
            sb.Append("  ExcitementIndex: ").Append(ExcitementIndex).Append("\n");
            sb.Append("  Highlights: ").Append(Highlights).Append("\n");
            sb.Append("  HomeConference: ").Append(HomeConference).Append("\n");
            sb.Append("  HomeDivision: ").Append(HomeDivision).Append("\n");
            sb.Append("  HomeId: ").Append(HomeId).Append("\n");
            sb.Append("  HomeLineScores: ").Append(HomeLineScores).Append("\n");
            sb.Append("  HomePoints: ").Append(HomePoints).Append("\n");
            sb.Append("  HomePostWinProb: ").Append(HomePostWinProb).Append("\n");
            sb.Append("  HomePostgameElo: ").Append(HomePostgameElo).Append("\n");
            sb.Append("  HomePregameElo: ").Append(HomePregameElo).Append("\n");
            sb.Append("  HomeTeam: ").Append(HomeTeam).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NeutralSite: ").Append(NeutralSite).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  SeasonType: ").Append(SeasonType).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartTimeTbd: ").Append(StartTimeTbd).Append("\n");
            sb.Append("  Venue: ").Append(Venue).Append("\n");
            sb.Append("  VenueId: ").Append(VenueId).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Game)obj);
        }

        /// <summary>
        /// Returns true if Game instances are equal
        /// </summary>
        /// <param name="other">Instance of Game to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Game other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Attendance == other.Attendance ||
                    
                    Attendance.Equals(other.Attendance)
                ) && 
                (
                    AwayConference == other.AwayConference ||
                    AwayConference != null &&
                    AwayConference.Equals(other.AwayConference)
                ) && 
                (
                    AwayDivision == other.AwayDivision ||
                    AwayDivision != null &&
                    AwayDivision.Equals(other.AwayDivision)
                ) && 
                (
                    AwayId == other.AwayId ||
                    
                    AwayId.Equals(other.AwayId)
                ) && 
                (
                    AwayLineScores == other.AwayLineScores ||
                    AwayLineScores != null &&
                    other.AwayLineScores != null &&
                    AwayLineScores.SequenceEqual(other.AwayLineScores)
                ) && 
                (
                    AwayPoints == other.AwayPoints ||
                    
                    AwayPoints.Equals(other.AwayPoints)
                ) && 
                (
                    AwayPostWinProb == other.AwayPostWinProb ||
                    
                    AwayPostWinProb.Equals(other.AwayPostWinProb)
                ) && 
                (
                    AwayPostgameElo == other.AwayPostgameElo ||
                    
                    AwayPostgameElo.Equals(other.AwayPostgameElo)
                ) && 
                (
                    AwayPregameElo == other.AwayPregameElo ||
                    
                    AwayPregameElo.Equals(other.AwayPregameElo)
                ) && 
                (
                    AwayTeam == other.AwayTeam ||
                    AwayTeam != null &&
                    AwayTeam.Equals(other.AwayTeam)
                ) && 
                (
                    Completed == other.Completed ||
                    
                    Completed.Equals(other.Completed)
                ) && 
                (
                    ConferenceGame == other.ConferenceGame ||
                    
                    ConferenceGame.Equals(other.ConferenceGame)
                ) && 
                (
                    ExcitementIndex == other.ExcitementIndex ||
                    
                    ExcitementIndex.Equals(other.ExcitementIndex)
                ) && 
                (
                    Highlights == other.Highlights ||
                    Highlights != null &&
                    Highlights.Equals(other.Highlights)
                ) && 
                (
                    HomeConference == other.HomeConference ||
                    HomeConference != null &&
                    HomeConference.Equals(other.HomeConference)
                ) && 
                (
                    HomeDivision == other.HomeDivision ||
                    HomeDivision != null &&
                    HomeDivision.Equals(other.HomeDivision)
                ) && 
                (
                    HomeId == other.HomeId ||
                    
                    HomeId.Equals(other.HomeId)
                ) && 
                (
                    HomeLineScores == other.HomeLineScores ||
                    HomeLineScores != null &&
                    other.HomeLineScores != null &&
                    HomeLineScores.SequenceEqual(other.HomeLineScores)
                ) && 
                (
                    HomePoints == other.HomePoints ||
                    
                    HomePoints.Equals(other.HomePoints)
                ) && 
                (
                    HomePostWinProb == other.HomePostWinProb ||
                    
                    HomePostWinProb.Equals(other.HomePostWinProb)
                ) && 
                (
                    HomePostgameElo == other.HomePostgameElo ||
                    
                    HomePostgameElo.Equals(other.HomePostgameElo)
                ) && 
                (
                    HomePregameElo == other.HomePregameElo ||
                    
                    HomePregameElo.Equals(other.HomePregameElo)
                ) && 
                (
                    HomeTeam == other.HomeTeam ||
                    HomeTeam != null &&
                    HomeTeam.Equals(other.HomeTeam)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    NeutralSite == other.NeutralSite ||
                    
                    NeutralSite.Equals(other.NeutralSite)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    Season == other.Season ||
                    
                    Season.Equals(other.Season)
                ) && 
                (
                    SeasonType == other.SeasonType ||
                    SeasonType != null &&
                    SeasonType.Equals(other.SeasonType)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    StartTimeTbd == other.StartTimeTbd ||
                    
                    StartTimeTbd.Equals(other.StartTimeTbd)
                ) && 
                (
                    Venue == other.Venue ||
                    Venue != null &&
                    Venue.Equals(other.Venue)
                ) && 
                (
                    VenueId == other.VenueId ||
                    
                    VenueId.Equals(other.VenueId)
                ) && 
                (
                    Week == other.Week ||
                    
                    Week.Equals(other.Week)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Attendance.GetHashCode();
                    if (AwayConference != null)
                    hashCode = hashCode * 59 + AwayConference.GetHashCode();
                    if (AwayDivision != null)
                    hashCode = hashCode * 59 + AwayDivision.GetHashCode();
                    
                    hashCode = hashCode * 59 + AwayId.GetHashCode();
                    if (AwayLineScores != null)
                    hashCode = hashCode * 59 + AwayLineScores.GetHashCode();
                    
                    hashCode = hashCode * 59 + AwayPoints.GetHashCode();
                    
                    hashCode = hashCode * 59 + AwayPostWinProb.GetHashCode();
                    
                    hashCode = hashCode * 59 + AwayPostgameElo.GetHashCode();
                    
                    hashCode = hashCode * 59 + AwayPregameElo.GetHashCode();
                    if (AwayTeam != null)
                    hashCode = hashCode * 59 + AwayTeam.GetHashCode();
                    
                    hashCode = hashCode * 59 + Completed.GetHashCode();
                    
                    hashCode = hashCode * 59 + ConferenceGame.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExcitementIndex.GetHashCode();
                    if (Highlights != null)
                    hashCode = hashCode * 59 + Highlights.GetHashCode();
                    if (HomeConference != null)
                    hashCode = hashCode * 59 + HomeConference.GetHashCode();
                    if (HomeDivision != null)
                    hashCode = hashCode * 59 + HomeDivision.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomeId.GetHashCode();
                    if (HomeLineScores != null)
                    hashCode = hashCode * 59 + HomeLineScores.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomePoints.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomePostWinProb.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomePostgameElo.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomePregameElo.GetHashCode();
                    if (HomeTeam != null)
                    hashCode = hashCode * 59 + HomeTeam.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + NeutralSite.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    
                    hashCode = hashCode * 59 + Season.GetHashCode();
                    if (SeasonType != null)
                    hashCode = hashCode * 59 + SeasonType.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartTimeTbd.GetHashCode();
                    if (Venue != null)
                    hashCode = hashCode * 59 + Venue.GetHashCode();
                    
                    hashCode = hashCode * 59 + VenueId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Week.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Game left, Game right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Game left, Game right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
