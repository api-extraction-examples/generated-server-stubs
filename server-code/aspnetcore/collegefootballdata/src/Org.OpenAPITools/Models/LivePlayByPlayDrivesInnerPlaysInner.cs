/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LivePlayByPlayDrivesInnerPlaysInner : IEquatable<LivePlayByPlayDrivesInnerPlaysInner>
    {
        /// <summary>
        /// Gets or Sets AwayScore
        /// </summary>
        [DataMember(Name="awayScore", EmitDefaultValue=true)]
        public int AwayScore { get; set; }

        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [DataMember(Name="clock", EmitDefaultValue=false)]
        public string Clock { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=true)]
        public int Distance { get; set; }

        /// <summary>
        /// Gets or Sets Down
        /// </summary>
        [DataMember(Name="down", EmitDefaultValue=true)]
        public int Down { get; set; }

        /// <summary>
        /// Gets or Sets DownType
        /// </summary>
        [DataMember(Name="downType", EmitDefaultValue=false)]
        public string DownType { get; set; }

        /// <summary>
        /// Gets or Sets Epa
        /// </summary>
        [DataMember(Name="epa", EmitDefaultValue=true)]
        public decimal Epa { get; set; }

        /// <summary>
        /// Gets or Sets GarbageTime
        /// </summary>
        [DataMember(Name="garbageTime", EmitDefaultValue=true)]
        public bool GarbageTime { get; set; }

        /// <summary>
        /// Gets or Sets HomeScore
        /// </summary>
        [DataMember(Name="homeScore", EmitDefaultValue=true)]
        public int HomeScore { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=true)]
        public int Period { get; set; }

        /// <summary>
        /// Gets or Sets PlayText
        /// </summary>
        [DataMember(Name="playText", EmitDefaultValue=false)]
        public string PlayText { get; set; }

        /// <summary>
        /// Gets or Sets PlayType
        /// </summary>
        [DataMember(Name="playType", EmitDefaultValue=false)]
        public string PlayType { get; set; }

        /// <summary>
        /// Gets or Sets PlayTypeId
        /// </summary>
        [DataMember(Name="playTypeId", EmitDefaultValue=true)]
        public int PlayTypeId { get; set; }

        /// <summary>
        /// Gets or Sets RushPass
        /// </summary>
        [DataMember(Name="rushPass", EmitDefaultValue=false)]
        public string RushPass { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=true)]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=true)]
        public int TeamId { get; set; }

        /// <summary>
        /// Gets or Sets Wallclock
        /// </summary>
        [DataMember(Name="wallclock", EmitDefaultValue=false)]
        public string Wallclock { get; set; }

        /// <summary>
        /// Gets or Sets YardsGained
        /// </summary>
        [DataMember(Name="yardsGained", EmitDefaultValue=true)]
        public int YardsGained { get; set; }

        /// <summary>
        /// Gets or Sets YardsToGoal
        /// </summary>
        [DataMember(Name="yardsToGoal", EmitDefaultValue=true)]
        public int YardsToGoal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LivePlayByPlayDrivesInnerPlaysInner {\n");
            sb.Append("  AwayScore: ").Append(AwayScore).Append("\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("  DownType: ").Append(DownType).Append("\n");
            sb.Append("  Epa: ").Append(Epa).Append("\n");
            sb.Append("  GarbageTime: ").Append(GarbageTime).Append("\n");
            sb.Append("  HomeScore: ").Append(HomeScore).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PlayText: ").Append(PlayText).Append("\n");
            sb.Append("  PlayType: ").Append(PlayType).Append("\n");
            sb.Append("  PlayTypeId: ").Append(PlayTypeId).Append("\n");
            sb.Append("  RushPass: ").Append(RushPass).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Wallclock: ").Append(Wallclock).Append("\n");
            sb.Append("  YardsGained: ").Append(YardsGained).Append("\n");
            sb.Append("  YardsToGoal: ").Append(YardsToGoal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LivePlayByPlayDrivesInnerPlaysInner)obj);
        }

        /// <summary>
        /// Returns true if LivePlayByPlayDrivesInnerPlaysInner instances are equal
        /// </summary>
        /// <param name="other">Instance of LivePlayByPlayDrivesInnerPlaysInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LivePlayByPlayDrivesInnerPlaysInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AwayScore == other.AwayScore ||
                    
                    AwayScore.Equals(other.AwayScore)
                ) && 
                (
                    Clock == other.Clock ||
                    Clock != null &&
                    Clock.Equals(other.Clock)
                ) && 
                (
                    Distance == other.Distance ||
                    
                    Distance.Equals(other.Distance)
                ) && 
                (
                    Down == other.Down ||
                    
                    Down.Equals(other.Down)
                ) && 
                (
                    DownType == other.DownType ||
                    DownType != null &&
                    DownType.Equals(other.DownType)
                ) && 
                (
                    Epa == other.Epa ||
                    
                    Epa.Equals(other.Epa)
                ) && 
                (
                    GarbageTime == other.GarbageTime ||
                    
                    GarbageTime.Equals(other.GarbageTime)
                ) && 
                (
                    HomeScore == other.HomeScore ||
                    
                    HomeScore.Equals(other.HomeScore)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Period == other.Period ||
                    
                    Period.Equals(other.Period)
                ) && 
                (
                    PlayText == other.PlayText ||
                    PlayText != null &&
                    PlayText.Equals(other.PlayText)
                ) && 
                (
                    PlayType == other.PlayType ||
                    PlayType != null &&
                    PlayType.Equals(other.PlayType)
                ) && 
                (
                    PlayTypeId == other.PlayTypeId ||
                    
                    PlayTypeId.Equals(other.PlayTypeId)
                ) && 
                (
                    RushPass == other.RushPass ||
                    RushPass != null &&
                    RushPass.Equals(other.RushPass)
                ) && 
                (
                    Success == other.Success ||
                    
                    Success.Equals(other.Success)
                ) && 
                (
                    Team == other.Team ||
                    Team != null &&
                    Team.Equals(other.Team)
                ) && 
                (
                    TeamId == other.TeamId ||
                    
                    TeamId.Equals(other.TeamId)
                ) && 
                (
                    Wallclock == other.Wallclock ||
                    Wallclock != null &&
                    Wallclock.Equals(other.Wallclock)
                ) && 
                (
                    YardsGained == other.YardsGained ||
                    
                    YardsGained.Equals(other.YardsGained)
                ) && 
                (
                    YardsToGoal == other.YardsToGoal ||
                    
                    YardsToGoal.Equals(other.YardsToGoal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AwayScore.GetHashCode();
                    if (Clock != null)
                    hashCode = hashCode * 59 + Clock.GetHashCode();
                    
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    
                    hashCode = hashCode * 59 + Down.GetHashCode();
                    if (DownType != null)
                    hashCode = hashCode * 59 + DownType.GetHashCode();
                    
                    hashCode = hashCode * 59 + Epa.GetHashCode();
                    
                    hashCode = hashCode * 59 + GarbageTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomeScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (PlayText != null)
                    hashCode = hashCode * 59 + PlayText.GetHashCode();
                    if (PlayType != null)
                    hashCode = hashCode * 59 + PlayType.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlayTypeId.GetHashCode();
                    if (RushPass != null)
                    hashCode = hashCode * 59 + RushPass.GetHashCode();
                    
                    hashCode = hashCode * 59 + Success.GetHashCode();
                    if (Team != null)
                    hashCode = hashCode * 59 + Team.GetHashCode();
                    
                    hashCode = hashCode * 59 + TeamId.GetHashCode();
                    if (Wallclock != null)
                    hashCode = hashCode * 59 + Wallclock.GetHashCode();
                    
                    hashCode = hashCode * 59 + YardsGained.GetHashCode();
                    
                    hashCode = hashCode * 59 + YardsToGoal.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LivePlayByPlayDrivesInnerPlaysInner left, LivePlayByPlayDrivesInnerPlaysInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LivePlayByPlayDrivesInnerPlaysInner left, LivePlayByPlayDrivesInnerPlaysInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
