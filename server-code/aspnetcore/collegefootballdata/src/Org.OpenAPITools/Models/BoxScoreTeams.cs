/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BoxScoreTeams : IEquatable<BoxScoreTeams>
    {
        /// <summary>
        /// Gets or Sets CumulativePpa
        /// </summary>
        [DataMember(Name="cumulativePpa", EmitDefaultValue=false)]
        public List<BoxScoreTeamsCumulativePpaInner> CumulativePpa { get; set; }

        /// <summary>
        /// Gets or Sets Explosiveness
        /// </summary>
        [DataMember(Name="explosiveness", EmitDefaultValue=false)]
        public List<BoxScoreTeamsExplosivenessInner> Explosiveness { get; set; }

        /// <summary>
        /// Gets or Sets FieldPosition
        /// </summary>
        [DataMember(Name="fieldPosition", EmitDefaultValue=false)]
        public List<BoxScoreTeamsFieldPositionInner> FieldPosition { get; set; }

        /// <summary>
        /// Gets or Sets Havoc
        /// </summary>
        [DataMember(Name="havoc", EmitDefaultValue=false)]
        public List<BoxScoreTeamsHavocInner> Havoc { get; set; }

        /// <summary>
        /// Gets or Sets Ppa
        /// </summary>
        [DataMember(Name="ppa", EmitDefaultValue=false)]
        public List<BoxScoreTeamsCumulativePpaInner> Ppa { get; set; }

        /// <summary>
        /// Gets or Sets Rushing
        /// </summary>
        [DataMember(Name="rushing", EmitDefaultValue=false)]
        public List<BoxScoreTeamsRushingInner> Rushing { get; set; }

        /// <summary>
        /// Gets or Sets ScoringOpportunities
        /// </summary>
        [DataMember(Name="scoringOpportunities", EmitDefaultValue=false)]
        public List<BoxScoreTeamsScoringOpportunitiesInner> ScoringOpportunities { get; set; }

        /// <summary>
        /// Gets or Sets SuccessRates
        /// </summary>
        [DataMember(Name="successRates", EmitDefaultValue=false)]
        public List<BoxScoreTeamsSuccessRatesInner> SuccessRates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoxScoreTeams {\n");
            sb.Append("  CumulativePpa: ").Append(CumulativePpa).Append("\n");
            sb.Append("  Explosiveness: ").Append(Explosiveness).Append("\n");
            sb.Append("  FieldPosition: ").Append(FieldPosition).Append("\n");
            sb.Append("  Havoc: ").Append(Havoc).Append("\n");
            sb.Append("  Ppa: ").Append(Ppa).Append("\n");
            sb.Append("  Rushing: ").Append(Rushing).Append("\n");
            sb.Append("  ScoringOpportunities: ").Append(ScoringOpportunities).Append("\n");
            sb.Append("  SuccessRates: ").Append(SuccessRates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BoxScoreTeams)obj);
        }

        /// <summary>
        /// Returns true if BoxScoreTeams instances are equal
        /// </summary>
        /// <param name="other">Instance of BoxScoreTeams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoxScoreTeams other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CumulativePpa == other.CumulativePpa ||
                    CumulativePpa != null &&
                    other.CumulativePpa != null &&
                    CumulativePpa.SequenceEqual(other.CumulativePpa)
                ) && 
                (
                    Explosiveness == other.Explosiveness ||
                    Explosiveness != null &&
                    other.Explosiveness != null &&
                    Explosiveness.SequenceEqual(other.Explosiveness)
                ) && 
                (
                    FieldPosition == other.FieldPosition ||
                    FieldPosition != null &&
                    other.FieldPosition != null &&
                    FieldPosition.SequenceEqual(other.FieldPosition)
                ) && 
                (
                    Havoc == other.Havoc ||
                    Havoc != null &&
                    other.Havoc != null &&
                    Havoc.SequenceEqual(other.Havoc)
                ) && 
                (
                    Ppa == other.Ppa ||
                    Ppa != null &&
                    other.Ppa != null &&
                    Ppa.SequenceEqual(other.Ppa)
                ) && 
                (
                    Rushing == other.Rushing ||
                    Rushing != null &&
                    other.Rushing != null &&
                    Rushing.SequenceEqual(other.Rushing)
                ) && 
                (
                    ScoringOpportunities == other.ScoringOpportunities ||
                    ScoringOpportunities != null &&
                    other.ScoringOpportunities != null &&
                    ScoringOpportunities.SequenceEqual(other.ScoringOpportunities)
                ) && 
                (
                    SuccessRates == other.SuccessRates ||
                    SuccessRates != null &&
                    other.SuccessRates != null &&
                    SuccessRates.SequenceEqual(other.SuccessRates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CumulativePpa != null)
                    hashCode = hashCode * 59 + CumulativePpa.GetHashCode();
                    if (Explosiveness != null)
                    hashCode = hashCode * 59 + Explosiveness.GetHashCode();
                    if (FieldPosition != null)
                    hashCode = hashCode * 59 + FieldPosition.GetHashCode();
                    if (Havoc != null)
                    hashCode = hashCode * 59 + Havoc.GetHashCode();
                    if (Ppa != null)
                    hashCode = hashCode * 59 + Ppa.GetHashCode();
                    if (Rushing != null)
                    hashCode = hashCode * 59 + Rushing.GetHashCode();
                    if (ScoringOpportunities != null)
                    hashCode = hashCode * 59 + ScoringOpportunities.GetHashCode();
                    if (SuccessRates != null)
                    hashCode = hashCode * 59 + SuccessRates.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BoxScoreTeams left, BoxScoreTeams right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BoxScoreTeams left, BoxScoreTeams right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
