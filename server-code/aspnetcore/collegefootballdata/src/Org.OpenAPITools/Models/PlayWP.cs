/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PlayWP : IEquatable<PlayWP>
    {
        /// <summary>
        /// Gets or Sets Away
        /// </summary>
        [DataMember(Name="away", EmitDefaultValue=false)]
        public string Away { get; set; }

        /// <summary>
        /// Gets or Sets AwayId
        /// </summary>
        [DataMember(Name="awayId", EmitDefaultValue=true)]
        public int AwayId { get; set; }

        /// <summary>
        /// Gets or Sets AwayScore
        /// </summary>
        [DataMember(Name="awayScore", EmitDefaultValue=true)]
        public int AwayScore { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=true)]
        public int Distance { get; set; }

        /// <summary>
        /// Gets or Sets Down
        /// </summary>
        [DataMember(Name="down", EmitDefaultValue=true)]
        public int Down { get; set; }

        /// <summary>
        /// Gets or Sets GamesId
        /// </summary>
        [DataMember(Name="gamesId", EmitDefaultValue=true)]
        public int GamesId { get; set; }

        /// <summary>
        /// Gets or Sets Home
        /// </summary>
        [DataMember(Name="home", EmitDefaultValue=false)]
        public string Home { get; set; }

        /// <summary>
        /// Gets or Sets HomeBall
        /// </summary>
        [DataMember(Name="homeBall", EmitDefaultValue=true)]
        public bool HomeBall { get; set; }

        /// <summary>
        /// Gets or Sets HomeId
        /// </summary>
        [DataMember(Name="homeId", EmitDefaultValue=true)]
        public int HomeId { get; set; }

        /// <summary>
        /// Gets or Sets HomeScore
        /// </summary>
        [DataMember(Name="homeScore", EmitDefaultValue=true)]
        public int HomeScore { get; set; }

        /// <summary>
        /// Gets or Sets HomeWinProb
        /// </summary>
        [DataMember(Name="homeWinProb", EmitDefaultValue=true)]
        public decimal HomeWinProb { get; set; }

        /// <summary>
        /// Gets or Sets PlayId
        /// </summary>
        [DataMember(Name="playId", EmitDefaultValue=true)]
        public int PlayId { get; set; }

        /// <summary>
        /// Gets or Sets PlayNumber
        /// </summary>
        [DataMember(Name="playNumber", EmitDefaultValue=true)]
        public int PlayNumber { get; set; }

        /// <summary>
        /// Gets or Sets PlayText
        /// </summary>
        [DataMember(Name="playText", EmitDefaultValue=false)]
        public string PlayText { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name="spread", EmitDefaultValue=true)]
        public decimal Spread { get; set; }

        /// <summary>
        /// Gets or Sets TimeRemaining
        /// </summary>
        [DataMember(Name="timeRemaining", EmitDefaultValue=true)]
        public int TimeRemaining { get; set; }

        /// <summary>
        /// Gets or Sets YardLine
        /// </summary>
        [DataMember(Name="yardLine", EmitDefaultValue=true)]
        public int YardLine { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayWP {\n");
            sb.Append("  Away: ").Append(Away).Append("\n");
            sb.Append("  AwayId: ").Append(AwayId).Append("\n");
            sb.Append("  AwayScore: ").Append(AwayScore).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("  GamesId: ").Append(GamesId).Append("\n");
            sb.Append("  Home: ").Append(Home).Append("\n");
            sb.Append("  HomeBall: ").Append(HomeBall).Append("\n");
            sb.Append("  HomeId: ").Append(HomeId).Append("\n");
            sb.Append("  HomeScore: ").Append(HomeScore).Append("\n");
            sb.Append("  HomeWinProb: ").Append(HomeWinProb).Append("\n");
            sb.Append("  PlayId: ").Append(PlayId).Append("\n");
            sb.Append("  PlayNumber: ").Append(PlayNumber).Append("\n");
            sb.Append("  PlayText: ").Append(PlayText).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  TimeRemaining: ").Append(TimeRemaining).Append("\n");
            sb.Append("  YardLine: ").Append(YardLine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlayWP)obj);
        }

        /// <summary>
        /// Returns true if PlayWP instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayWP to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayWP other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Away == other.Away ||
                    Away != null &&
                    Away.Equals(other.Away)
                ) && 
                (
                    AwayId == other.AwayId ||
                    
                    AwayId.Equals(other.AwayId)
                ) && 
                (
                    AwayScore == other.AwayScore ||
                    
                    AwayScore.Equals(other.AwayScore)
                ) && 
                (
                    Distance == other.Distance ||
                    
                    Distance.Equals(other.Distance)
                ) && 
                (
                    Down == other.Down ||
                    
                    Down.Equals(other.Down)
                ) && 
                (
                    GamesId == other.GamesId ||
                    
                    GamesId.Equals(other.GamesId)
                ) && 
                (
                    Home == other.Home ||
                    Home != null &&
                    Home.Equals(other.Home)
                ) && 
                (
                    HomeBall == other.HomeBall ||
                    
                    HomeBall.Equals(other.HomeBall)
                ) && 
                (
                    HomeId == other.HomeId ||
                    
                    HomeId.Equals(other.HomeId)
                ) && 
                (
                    HomeScore == other.HomeScore ||
                    
                    HomeScore.Equals(other.HomeScore)
                ) && 
                (
                    HomeWinProb == other.HomeWinProb ||
                    
                    HomeWinProb.Equals(other.HomeWinProb)
                ) && 
                (
                    PlayId == other.PlayId ||
                    
                    PlayId.Equals(other.PlayId)
                ) && 
                (
                    PlayNumber == other.PlayNumber ||
                    
                    PlayNumber.Equals(other.PlayNumber)
                ) && 
                (
                    PlayText == other.PlayText ||
                    PlayText != null &&
                    PlayText.Equals(other.PlayText)
                ) && 
                (
                    Spread == other.Spread ||
                    
                    Spread.Equals(other.Spread)
                ) && 
                (
                    TimeRemaining == other.TimeRemaining ||
                    
                    TimeRemaining.Equals(other.TimeRemaining)
                ) && 
                (
                    YardLine == other.YardLine ||
                    
                    YardLine.Equals(other.YardLine)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Away != null)
                    hashCode = hashCode * 59 + Away.GetHashCode();
                    
                    hashCode = hashCode * 59 + AwayId.GetHashCode();
                    
                    hashCode = hashCode * 59 + AwayScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    
                    hashCode = hashCode * 59 + Down.GetHashCode();
                    
                    hashCode = hashCode * 59 + GamesId.GetHashCode();
                    if (Home != null)
                    hashCode = hashCode * 59 + Home.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomeBall.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomeId.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomeScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + HomeWinProb.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlayId.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlayNumber.GetHashCode();
                    if (PlayText != null)
                    hashCode = hashCode * 59 + PlayText.GetHashCode();
                    
                    hashCode = hashCode * 59 + Spread.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeRemaining.GetHashCode();
                    
                    hashCode = hashCode * 59 + YardLine.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlayWP left, PlayWP right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlayWP left, PlayWP right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
