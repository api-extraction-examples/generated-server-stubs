/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReturningProduction : IEquatable<ReturningProduction>
    {
        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [DataMember(Name="conference", EmitDefaultValue=false)]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets PassingUsage
        /// </summary>
        [DataMember(Name="passingUsage", EmitDefaultValue=true)]
        public decimal PassingUsage { get; set; }

        /// <summary>
        /// Gets or Sets PercentPPA
        /// </summary>
        [DataMember(Name="percentPPA", EmitDefaultValue=true)]
        public decimal PercentPPA { get; set; }

        /// <summary>
        /// Gets or Sets PercentPassingPPA
        /// </summary>
        [DataMember(Name="percentPassingPPA", EmitDefaultValue=true)]
        public decimal PercentPassingPPA { get; set; }

        /// <summary>
        /// Gets or Sets PercentReceivingPPA
        /// </summary>
        [DataMember(Name="percentReceivingPPA", EmitDefaultValue=true)]
        public decimal PercentReceivingPPA { get; set; }

        /// <summary>
        /// Gets or Sets PercentRushingPPA
        /// </summary>
        [DataMember(Name="percentRushingPPA", EmitDefaultValue=true)]
        public decimal PercentRushingPPA { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingUsage
        /// </summary>
        [DataMember(Name="receivingUsage", EmitDefaultValue=true)]
        public decimal ReceivingUsage { get; set; }

        /// <summary>
        /// Gets or Sets RushingUsage
        /// </summary>
        [DataMember(Name="rushingUsage", EmitDefaultValue=true)]
        public decimal RushingUsage { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name="season", EmitDefaultValue=true)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets TotalPPA
        /// </summary>
        [DataMember(Name="totalPPA", EmitDefaultValue=true)]
        public decimal TotalPPA { get; set; }

        /// <summary>
        /// Gets or Sets TotalPassingPPA
        /// </summary>
        [DataMember(Name="totalPassingPPA", EmitDefaultValue=true)]
        public decimal TotalPassingPPA { get; set; }

        /// <summary>
        /// Gets or Sets TotalReceivingPPA
        /// </summary>
        [DataMember(Name="totalReceivingPPA", EmitDefaultValue=true)]
        public decimal TotalReceivingPPA { get; set; }

        /// <summary>
        /// Gets or Sets TotalRushingPPA
        /// </summary>
        [DataMember(Name="totalRushingPPA", EmitDefaultValue=true)]
        public decimal TotalRushingPPA { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name="usage", EmitDefaultValue=true)]
        public decimal Usage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturningProduction {\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  PassingUsage: ").Append(PassingUsage).Append("\n");
            sb.Append("  PercentPPA: ").Append(PercentPPA).Append("\n");
            sb.Append("  PercentPassingPPA: ").Append(PercentPassingPPA).Append("\n");
            sb.Append("  PercentReceivingPPA: ").Append(PercentReceivingPPA).Append("\n");
            sb.Append("  PercentRushingPPA: ").Append(PercentRushingPPA).Append("\n");
            sb.Append("  ReceivingUsage: ").Append(ReceivingUsage).Append("\n");
            sb.Append("  RushingUsage: ").Append(RushingUsage).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  TotalPPA: ").Append(TotalPPA).Append("\n");
            sb.Append("  TotalPassingPPA: ").Append(TotalPassingPPA).Append("\n");
            sb.Append("  TotalReceivingPPA: ").Append(TotalReceivingPPA).Append("\n");
            sb.Append("  TotalRushingPPA: ").Append(TotalRushingPPA).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReturningProduction)obj);
        }

        /// <summary>
        /// Returns true if ReturningProduction instances are equal
        /// </summary>
        /// <param name="other">Instance of ReturningProduction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturningProduction other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Conference == other.Conference ||
                    Conference != null &&
                    Conference.Equals(other.Conference)
                ) && 
                (
                    PassingUsage == other.PassingUsage ||
                    
                    PassingUsage.Equals(other.PassingUsage)
                ) && 
                (
                    PercentPPA == other.PercentPPA ||
                    
                    PercentPPA.Equals(other.PercentPPA)
                ) && 
                (
                    PercentPassingPPA == other.PercentPassingPPA ||
                    
                    PercentPassingPPA.Equals(other.PercentPassingPPA)
                ) && 
                (
                    PercentReceivingPPA == other.PercentReceivingPPA ||
                    
                    PercentReceivingPPA.Equals(other.PercentReceivingPPA)
                ) && 
                (
                    PercentRushingPPA == other.PercentRushingPPA ||
                    
                    PercentRushingPPA.Equals(other.PercentRushingPPA)
                ) && 
                (
                    ReceivingUsage == other.ReceivingUsage ||
                    
                    ReceivingUsage.Equals(other.ReceivingUsage)
                ) && 
                (
                    RushingUsage == other.RushingUsage ||
                    
                    RushingUsage.Equals(other.RushingUsage)
                ) && 
                (
                    Season == other.Season ||
                    
                    Season.Equals(other.Season)
                ) && 
                (
                    Team == other.Team ||
                    Team != null &&
                    Team.Equals(other.Team)
                ) && 
                (
                    TotalPPA == other.TotalPPA ||
                    
                    TotalPPA.Equals(other.TotalPPA)
                ) && 
                (
                    TotalPassingPPA == other.TotalPassingPPA ||
                    
                    TotalPassingPPA.Equals(other.TotalPassingPPA)
                ) && 
                (
                    TotalReceivingPPA == other.TotalReceivingPPA ||
                    
                    TotalReceivingPPA.Equals(other.TotalReceivingPPA)
                ) && 
                (
                    TotalRushingPPA == other.TotalRushingPPA ||
                    
                    TotalRushingPPA.Equals(other.TotalRushingPPA)
                ) && 
                (
                    Usage == other.Usage ||
                    
                    Usage.Equals(other.Usage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Conference != null)
                    hashCode = hashCode * 59 + Conference.GetHashCode();
                    
                    hashCode = hashCode * 59 + PassingUsage.GetHashCode();
                    
                    hashCode = hashCode * 59 + PercentPPA.GetHashCode();
                    
                    hashCode = hashCode * 59 + PercentPassingPPA.GetHashCode();
                    
                    hashCode = hashCode * 59 + PercentReceivingPPA.GetHashCode();
                    
                    hashCode = hashCode * 59 + PercentRushingPPA.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReceivingUsage.GetHashCode();
                    
                    hashCode = hashCode * 59 + RushingUsage.GetHashCode();
                    
                    hashCode = hashCode * 59 + Season.GetHashCode();
                    if (Team != null)
                    hashCode = hashCode * 59 + Team.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalPPA.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalPassingPPA.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalReceivingPPA.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalRushingPPA.GetHashCode();
                    
                    hashCode = hashCode * 59 + Usage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReturningProduction left, ReturningProduction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReturningProduction left, ReturningProduction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
