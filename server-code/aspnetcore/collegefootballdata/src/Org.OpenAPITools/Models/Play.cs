/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Play : IEquatable<Play>
    {
        /// <summary>
        /// Gets or Sets Away
        /// </summary>
        [DataMember(Name="away", EmitDefaultValue=false)]
        public string Away { get; set; }

        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [DataMember(Name="clock", EmitDefaultValue=false)]
        public DriveEndTime Clock { get; set; }

        /// <summary>
        /// Gets or Sets Defense
        /// </summary>
        [DataMember(Name="defense", EmitDefaultValue=false)]
        public string Defense { get; set; }

        /// <summary>
        /// Gets or Sets DefenseConference
        /// </summary>
        [DataMember(Name="defense_conference", EmitDefaultValue=false)]
        public string DefenseConference { get; set; }

        /// <summary>
        /// Gets or Sets DefenseScore
        /// </summary>
        [DataMember(Name="defense_score", EmitDefaultValue=true)]
        public int DefenseScore { get; set; }

        /// <summary>
        /// Gets or Sets DefenseTimeouts
        /// </summary>
        [DataMember(Name="defense_timeouts", EmitDefaultValue=true)]
        public int DefenseTimeouts { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=true)]
        public int Distance { get; set; }

        /// <summary>
        /// Gets or Sets Down
        /// </summary>
        [DataMember(Name="down", EmitDefaultValue=true)]
        public int Down { get; set; }

        /// <summary>
        /// Gets or Sets DriveId
        /// </summary>
        [DataMember(Name="drive_id", EmitDefaultValue=true)]
        public int DriveId { get; set; }

        /// <summary>
        /// Gets or Sets DriveNumber
        /// </summary>
        [DataMember(Name="drive_number", EmitDefaultValue=true)]
        public int DriveNumber { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="game_id", EmitDefaultValue=true)]
        public int GameId { get; set; }

        /// <summary>
        /// Gets or Sets Home
        /// </summary>
        [DataMember(Name="home", EmitDefaultValue=false)]
        public string Home { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Offense
        /// </summary>
        [DataMember(Name="offense", EmitDefaultValue=false)]
        public string Offense { get; set; }

        /// <summary>
        /// Gets or Sets OffenseConference
        /// </summary>
        [DataMember(Name="offense_conference", EmitDefaultValue=false)]
        public string OffenseConference { get; set; }

        /// <summary>
        /// Gets or Sets OffenseScore
        /// </summary>
        [DataMember(Name="offense_score", EmitDefaultValue=true)]
        public int OffenseScore { get; set; }

        /// <summary>
        /// Gets or Sets OffenseTimeouts
        /// </summary>
        [DataMember(Name="offense_timeouts", EmitDefaultValue=true)]
        public int OffenseTimeouts { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=true)]
        public int Period { get; set; }

        /// <summary>
        /// Gets or Sets PlayNumber
        /// </summary>
        [DataMember(Name="play_number", EmitDefaultValue=true)]
        public int PlayNumber { get; set; }

        /// <summary>
        /// Gets or Sets PlayText
        /// </summary>
        [DataMember(Name="play_text", EmitDefaultValue=false)]
        public string PlayText { get; set; }

        /// <summary>
        /// Gets or Sets PlayType
        /// </summary>
        [DataMember(Name="play_type", EmitDefaultValue=false)]
        public string PlayType { get; set; }

        /// <summary>
        /// Gets or Sets Ppa
        /// </summary>
        [DataMember(Name="ppa", EmitDefaultValue=true)]
        public decimal Ppa { get; set; }

        /// <summary>
        /// Gets or Sets Scoring
        /// </summary>
        [DataMember(Name="scoring", EmitDefaultValue=true)]
        public bool Scoring { get; set; }

        /// <summary>
        /// Gets or Sets Wallclock
        /// </summary>
        [DataMember(Name="wallclock", EmitDefaultValue=false)]
        public string Wallclock { get; set; }

        /// <summary>
        /// Gets or Sets YardLine
        /// </summary>
        [DataMember(Name="yard_line", EmitDefaultValue=true)]
        public int YardLine { get; set; }

        /// <summary>
        /// Gets or Sets YardsGained
        /// </summary>
        [DataMember(Name="yards_gained", EmitDefaultValue=true)]
        public int YardsGained { get; set; }

        /// <summary>
        /// Gets or Sets YardsToGoal
        /// </summary>
        [DataMember(Name="yards_to_goal", EmitDefaultValue=true)]
        public int YardsToGoal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Play {\n");
            sb.Append("  Away: ").Append(Away).Append("\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  Defense: ").Append(Defense).Append("\n");
            sb.Append("  DefenseConference: ").Append(DefenseConference).Append("\n");
            sb.Append("  DefenseScore: ").Append(DefenseScore).Append("\n");
            sb.Append("  DefenseTimeouts: ").Append(DefenseTimeouts).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("  DriveId: ").Append(DriveId).Append("\n");
            sb.Append("  DriveNumber: ").Append(DriveNumber).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Home: ").Append(Home).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  OffenseConference: ").Append(OffenseConference).Append("\n");
            sb.Append("  OffenseScore: ").Append(OffenseScore).Append("\n");
            sb.Append("  OffenseTimeouts: ").Append(OffenseTimeouts).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PlayNumber: ").Append(PlayNumber).Append("\n");
            sb.Append("  PlayText: ").Append(PlayText).Append("\n");
            sb.Append("  PlayType: ").Append(PlayType).Append("\n");
            sb.Append("  Ppa: ").Append(Ppa).Append("\n");
            sb.Append("  Scoring: ").Append(Scoring).Append("\n");
            sb.Append("  Wallclock: ").Append(Wallclock).Append("\n");
            sb.Append("  YardLine: ").Append(YardLine).Append("\n");
            sb.Append("  YardsGained: ").Append(YardsGained).Append("\n");
            sb.Append("  YardsToGoal: ").Append(YardsToGoal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Play)obj);
        }

        /// <summary>
        /// Returns true if Play instances are equal
        /// </summary>
        /// <param name="other">Instance of Play to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Play other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Away == other.Away ||
                    Away != null &&
                    Away.Equals(other.Away)
                ) && 
                (
                    Clock == other.Clock ||
                    Clock != null &&
                    Clock.Equals(other.Clock)
                ) && 
                (
                    Defense == other.Defense ||
                    Defense != null &&
                    Defense.Equals(other.Defense)
                ) && 
                (
                    DefenseConference == other.DefenseConference ||
                    DefenseConference != null &&
                    DefenseConference.Equals(other.DefenseConference)
                ) && 
                (
                    DefenseScore == other.DefenseScore ||
                    
                    DefenseScore.Equals(other.DefenseScore)
                ) && 
                (
                    DefenseTimeouts == other.DefenseTimeouts ||
                    
                    DefenseTimeouts.Equals(other.DefenseTimeouts)
                ) && 
                (
                    Distance == other.Distance ||
                    
                    Distance.Equals(other.Distance)
                ) && 
                (
                    Down == other.Down ||
                    
                    Down.Equals(other.Down)
                ) && 
                (
                    DriveId == other.DriveId ||
                    
                    DriveId.Equals(other.DriveId)
                ) && 
                (
                    DriveNumber == other.DriveNumber ||
                    
                    DriveNumber.Equals(other.DriveNumber)
                ) && 
                (
                    GameId == other.GameId ||
                    
                    GameId.Equals(other.GameId)
                ) && 
                (
                    Home == other.Home ||
                    Home != null &&
                    Home.Equals(other.Home)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Offense == other.Offense ||
                    Offense != null &&
                    Offense.Equals(other.Offense)
                ) && 
                (
                    OffenseConference == other.OffenseConference ||
                    OffenseConference != null &&
                    OffenseConference.Equals(other.OffenseConference)
                ) && 
                (
                    OffenseScore == other.OffenseScore ||
                    
                    OffenseScore.Equals(other.OffenseScore)
                ) && 
                (
                    OffenseTimeouts == other.OffenseTimeouts ||
                    
                    OffenseTimeouts.Equals(other.OffenseTimeouts)
                ) && 
                (
                    Period == other.Period ||
                    
                    Period.Equals(other.Period)
                ) && 
                (
                    PlayNumber == other.PlayNumber ||
                    
                    PlayNumber.Equals(other.PlayNumber)
                ) && 
                (
                    PlayText == other.PlayText ||
                    PlayText != null &&
                    PlayText.Equals(other.PlayText)
                ) && 
                (
                    PlayType == other.PlayType ||
                    PlayType != null &&
                    PlayType.Equals(other.PlayType)
                ) && 
                (
                    Ppa == other.Ppa ||
                    
                    Ppa.Equals(other.Ppa)
                ) && 
                (
                    Scoring == other.Scoring ||
                    
                    Scoring.Equals(other.Scoring)
                ) && 
                (
                    Wallclock == other.Wallclock ||
                    Wallclock != null &&
                    Wallclock.Equals(other.Wallclock)
                ) && 
                (
                    YardLine == other.YardLine ||
                    
                    YardLine.Equals(other.YardLine)
                ) && 
                (
                    YardsGained == other.YardsGained ||
                    
                    YardsGained.Equals(other.YardsGained)
                ) && 
                (
                    YardsToGoal == other.YardsToGoal ||
                    
                    YardsToGoal.Equals(other.YardsToGoal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Away != null)
                    hashCode = hashCode * 59 + Away.GetHashCode();
                    if (Clock != null)
                    hashCode = hashCode * 59 + Clock.GetHashCode();
                    if (Defense != null)
                    hashCode = hashCode * 59 + Defense.GetHashCode();
                    if (DefenseConference != null)
                    hashCode = hashCode * 59 + DefenseConference.GetHashCode();
                    
                    hashCode = hashCode * 59 + DefenseScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + DefenseTimeouts.GetHashCode();
                    
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    
                    hashCode = hashCode * 59 + Down.GetHashCode();
                    
                    hashCode = hashCode * 59 + DriveId.GetHashCode();
                    
                    hashCode = hashCode * 59 + DriveNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + GameId.GetHashCode();
                    if (Home != null)
                    hashCode = hashCode * 59 + Home.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Offense != null)
                    hashCode = hashCode * 59 + Offense.GetHashCode();
                    if (OffenseConference != null)
                    hashCode = hashCode * 59 + OffenseConference.GetHashCode();
                    
                    hashCode = hashCode * 59 + OffenseScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + OffenseTimeouts.GetHashCode();
                    
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlayNumber.GetHashCode();
                    if (PlayText != null)
                    hashCode = hashCode * 59 + PlayText.GetHashCode();
                    if (PlayType != null)
                    hashCode = hashCode * 59 + PlayType.GetHashCode();
                    
                    hashCode = hashCode * 59 + Ppa.GetHashCode();
                    
                    hashCode = hashCode * 59 + Scoring.GetHashCode();
                    if (Wallclock != null)
                    hashCode = hashCode * 59 + Wallclock.GetHashCode();
                    
                    hashCode = hashCode * 59 + YardLine.GetHashCode();
                    
                    hashCode = hashCode * 59 + YardsGained.GetHashCode();
                    
                    hashCode = hashCode * 59 + YardsToGoal.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Play left, Play right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Play left, Play right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
