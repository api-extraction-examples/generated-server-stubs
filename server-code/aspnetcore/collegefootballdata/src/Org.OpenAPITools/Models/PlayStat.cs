/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PlayStat : IEquatable<PlayStat>
    {
        /// <summary>
        /// Gets or Sets AthleteId
        /// </summary>
        [DataMember(Name="athleteId", EmitDefaultValue=true)]
        public int AthleteId { get; set; }

        /// <summary>
        /// Gets or Sets AthleteName
        /// </summary>
        [DataMember(Name="athleteName", EmitDefaultValue=false)]
        public string AthleteName { get; set; }

        /// <summary>
        /// Gets or Sets Clock
        /// </summary>
        [DataMember(Name="clock", EmitDefaultValue=false)]
        public DriveEndTime Clock { get; set; }

        /// <summary>
        /// Gets or Sets Conference
        /// </summary>
        [DataMember(Name="conference", EmitDefaultValue=false)]
        public string Conference { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=true)]
        public int Distance { get; set; }

        /// <summary>
        /// Gets or Sets Down
        /// </summary>
        [DataMember(Name="down", EmitDefaultValue=true)]
        public int Down { get; set; }

        /// <summary>
        /// Gets or Sets DriveId
        /// </summary>
        [DataMember(Name="driveId", EmitDefaultValue=true)]
        public int DriveId { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name="gameId", EmitDefaultValue=true)]
        public int GameId { get; set; }

        /// <summary>
        /// Gets or Sets Opponent
        /// </summary>
        [DataMember(Name="opponent", EmitDefaultValue=false)]
        public string Opponent { get; set; }

        /// <summary>
        /// Gets or Sets OpponentScore
        /// </summary>
        [DataMember(Name="opponentScore", EmitDefaultValue=true)]
        public int OpponentScore { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=true)]
        public int Period { get; set; }

        /// <summary>
        /// Gets or Sets PlayId
        /// </summary>
        [DataMember(Name="playId", EmitDefaultValue=true)]
        public int PlayId { get; set; }

        /// <summary>
        /// Gets or Sets Season
        /// </summary>
        [DataMember(Name="season", EmitDefaultValue=true)]
        public int Season { get; set; }

        /// <summary>
        /// Gets or Sets Stat
        /// </summary>
        [DataMember(Name="stat", EmitDefaultValue=true)]
        public int Stat { get; set; }

        /// <summary>
        /// Gets or Sets StatType
        /// </summary>
        [DataMember(Name="statType", EmitDefaultValue=false)]
        public string StatType { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets TeamScore
        /// </summary>
        [DataMember(Name="teamScore", EmitDefaultValue=true)]
        public int TeamScore { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name="week", EmitDefaultValue=true)]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets YardsToGoal
        /// </summary>
        [DataMember(Name="yardsToGoal", EmitDefaultValue=true)]
        public int YardsToGoal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayStat {\n");
            sb.Append("  AthleteId: ").Append(AthleteId).Append("\n");
            sb.Append("  AthleteName: ").Append(AthleteName).Append("\n");
            sb.Append("  Clock: ").Append(Clock).Append("\n");
            sb.Append("  Conference: ").Append(Conference).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Down: ").Append(Down).Append("\n");
            sb.Append("  DriveId: ").Append(DriveId).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Opponent: ").Append(Opponent).Append("\n");
            sb.Append("  OpponentScore: ").Append(OpponentScore).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PlayId: ").Append(PlayId).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Stat: ").Append(Stat).Append("\n");
            sb.Append("  StatType: ").Append(StatType).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  TeamScore: ").Append(TeamScore).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  YardsToGoal: ").Append(YardsToGoal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlayStat)obj);
        }

        /// <summary>
        /// Returns true if PlayStat instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayStat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayStat other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AthleteId == other.AthleteId ||
                    
                    AthleteId.Equals(other.AthleteId)
                ) && 
                (
                    AthleteName == other.AthleteName ||
                    AthleteName != null &&
                    AthleteName.Equals(other.AthleteName)
                ) && 
                (
                    Clock == other.Clock ||
                    Clock != null &&
                    Clock.Equals(other.Clock)
                ) && 
                (
                    Conference == other.Conference ||
                    Conference != null &&
                    Conference.Equals(other.Conference)
                ) && 
                (
                    Distance == other.Distance ||
                    
                    Distance.Equals(other.Distance)
                ) && 
                (
                    Down == other.Down ||
                    
                    Down.Equals(other.Down)
                ) && 
                (
                    DriveId == other.DriveId ||
                    
                    DriveId.Equals(other.DriveId)
                ) && 
                (
                    GameId == other.GameId ||
                    
                    GameId.Equals(other.GameId)
                ) && 
                (
                    Opponent == other.Opponent ||
                    Opponent != null &&
                    Opponent.Equals(other.Opponent)
                ) && 
                (
                    OpponentScore == other.OpponentScore ||
                    
                    OpponentScore.Equals(other.OpponentScore)
                ) && 
                (
                    Period == other.Period ||
                    
                    Period.Equals(other.Period)
                ) && 
                (
                    PlayId == other.PlayId ||
                    
                    PlayId.Equals(other.PlayId)
                ) && 
                (
                    Season == other.Season ||
                    
                    Season.Equals(other.Season)
                ) && 
                (
                    Stat == other.Stat ||
                    
                    Stat.Equals(other.Stat)
                ) && 
                (
                    StatType == other.StatType ||
                    StatType != null &&
                    StatType.Equals(other.StatType)
                ) && 
                (
                    Team == other.Team ||
                    Team != null &&
                    Team.Equals(other.Team)
                ) && 
                (
                    TeamScore == other.TeamScore ||
                    
                    TeamScore.Equals(other.TeamScore)
                ) && 
                (
                    Week == other.Week ||
                    
                    Week.Equals(other.Week)
                ) && 
                (
                    YardsToGoal == other.YardsToGoal ||
                    
                    YardsToGoal.Equals(other.YardsToGoal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AthleteId.GetHashCode();
                    if (AthleteName != null)
                    hashCode = hashCode * 59 + AthleteName.GetHashCode();
                    if (Clock != null)
                    hashCode = hashCode * 59 + Clock.GetHashCode();
                    if (Conference != null)
                    hashCode = hashCode * 59 + Conference.GetHashCode();
                    
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    
                    hashCode = hashCode * 59 + Down.GetHashCode();
                    
                    hashCode = hashCode * 59 + DriveId.GetHashCode();
                    
                    hashCode = hashCode * 59 + GameId.GetHashCode();
                    if (Opponent != null)
                    hashCode = hashCode * 59 + Opponent.GetHashCode();
                    
                    hashCode = hashCode * 59 + OpponentScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlayId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Season.GetHashCode();
                    
                    hashCode = hashCode * 59 + Stat.GetHashCode();
                    if (StatType != null)
                    hashCode = hashCode * 59 + StatType.GetHashCode();
                    if (Team != null)
                    hashCode = hashCode * 59 + Team.GetHashCode();
                    
                    hashCode = hashCode * 59 + TeamScore.GetHashCode();
                    
                    hashCode = hashCode * 59 + Week.GetHashCode();
                    
                    hashCode = hashCode * 59 + YardsToGoal.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlayStat left, PlayStat right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlayStat left, PlayStat right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
