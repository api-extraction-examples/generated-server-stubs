/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LivePlayByPlayDrivesInner : IEquatable<LivePlayByPlayDrivesInner>
    {
        /// <summary>
        /// Gets or Sets Defense
        /// </summary>
        [DataMember(Name="defense", EmitDefaultValue=false)]
        public string Defense { get; set; }

        /// <summary>
        /// Gets or Sets DefenseId
        /// </summary>
        [DataMember(Name="defenseId", EmitDefaultValue=true)]
        public int DefenseId { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets EndClock
        /// </summary>
        [DataMember(Name="endClock", EmitDefaultValue=false)]
        public string EndClock { get; set; }

        /// <summary>
        /// Gets or Sets EndPeriod
        /// </summary>
        [DataMember(Name="endPeriod", EmitDefaultValue=true)]
        public int EndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets EndYardsToGoal
        /// </summary>
        [DataMember(Name="endYardsToGoal", EmitDefaultValue=true)]
        public int EndYardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Offense
        /// </summary>
        [DataMember(Name="offense", EmitDefaultValue=false)]
        public string Offense { get; set; }

        /// <summary>
        /// Gets or Sets OffenseId
        /// </summary>
        [DataMember(Name="offenseId", EmitDefaultValue=true)]
        public int OffenseId { get; set; }

        /// <summary>
        /// Gets or Sets PlayCount
        /// </summary>
        [DataMember(Name="playCount", EmitDefaultValue=true)]
        public int PlayCount { get; set; }

        /// <summary>
        /// Gets or Sets Plays
        /// </summary>
        [DataMember(Name="plays", EmitDefaultValue=false)]
        public List<LivePlayByPlayDrivesInnerPlaysInner> Plays { get; set; }

        /// <summary>
        /// Gets or Sets ScoringOpportunity
        /// </summary>
        [DataMember(Name="scoringOpportunity", EmitDefaultValue=true)]
        public bool ScoringOpportunity { get; set; }

        /// <summary>
        /// Gets or Sets StartClock
        /// </summary>
        [DataMember(Name="startClock", EmitDefaultValue=false)]
        public string StartClock { get; set; }

        /// <summary>
        /// Gets or Sets StartPeriod
        /// </summary>
        [DataMember(Name="startPeriod", EmitDefaultValue=true)]
        public int StartPeriod { get; set; }

        /// <summary>
        /// Gets or Sets StartYardsToGoal
        /// </summary>
        [DataMember(Name="startYardsToGoal", EmitDefaultValue=true)]
        public int StartYardsToGoal { get; set; }

        /// <summary>
        /// Gets or Sets Yards
        /// </summary>
        [DataMember(Name="yards", EmitDefaultValue=true)]
        public int Yards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LivePlayByPlayDrivesInner {\n");
            sb.Append("  Defense: ").Append(Defense).Append("\n");
            sb.Append("  DefenseId: ").Append(DefenseId).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EndClock: ").Append(EndClock).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  EndYardsToGoal: ").Append(EndYardsToGoal).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  OffenseId: ").Append(OffenseId).Append("\n");
            sb.Append("  PlayCount: ").Append(PlayCount).Append("\n");
            sb.Append("  Plays: ").Append(Plays).Append("\n");
            sb.Append("  ScoringOpportunity: ").Append(ScoringOpportunity).Append("\n");
            sb.Append("  StartClock: ").Append(StartClock).Append("\n");
            sb.Append("  StartPeriod: ").Append(StartPeriod).Append("\n");
            sb.Append("  StartYardsToGoal: ").Append(StartYardsToGoal).Append("\n");
            sb.Append("  Yards: ").Append(Yards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LivePlayByPlayDrivesInner)obj);
        }

        /// <summary>
        /// Returns true if LivePlayByPlayDrivesInner instances are equal
        /// </summary>
        /// <param name="other">Instance of LivePlayByPlayDrivesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LivePlayByPlayDrivesInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Defense == other.Defense ||
                    Defense != null &&
                    Defense.Equals(other.Defense)
                ) && 
                (
                    DefenseId == other.DefenseId ||
                    
                    DefenseId.Equals(other.DefenseId)
                ) && 
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) && 
                (
                    EndClock == other.EndClock ||
                    EndClock != null &&
                    EndClock.Equals(other.EndClock)
                ) && 
                (
                    EndPeriod == other.EndPeriod ||
                    
                    EndPeriod.Equals(other.EndPeriod)
                ) && 
                (
                    EndYardsToGoal == other.EndYardsToGoal ||
                    
                    EndYardsToGoal.Equals(other.EndYardsToGoal)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Offense == other.Offense ||
                    Offense != null &&
                    Offense.Equals(other.Offense)
                ) && 
                (
                    OffenseId == other.OffenseId ||
                    
                    OffenseId.Equals(other.OffenseId)
                ) && 
                (
                    PlayCount == other.PlayCount ||
                    
                    PlayCount.Equals(other.PlayCount)
                ) && 
                (
                    Plays == other.Plays ||
                    Plays != null &&
                    other.Plays != null &&
                    Plays.SequenceEqual(other.Plays)
                ) && 
                (
                    ScoringOpportunity == other.ScoringOpportunity ||
                    
                    ScoringOpportunity.Equals(other.ScoringOpportunity)
                ) && 
                (
                    StartClock == other.StartClock ||
                    StartClock != null &&
                    StartClock.Equals(other.StartClock)
                ) && 
                (
                    StartPeriod == other.StartPeriod ||
                    
                    StartPeriod.Equals(other.StartPeriod)
                ) && 
                (
                    StartYardsToGoal == other.StartYardsToGoal ||
                    
                    StartYardsToGoal.Equals(other.StartYardsToGoal)
                ) && 
                (
                    Yards == other.Yards ||
                    
                    Yards.Equals(other.Yards)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Defense != null)
                    hashCode = hashCode * 59 + Defense.GetHashCode();
                    
                    hashCode = hashCode * 59 + DefenseId.GetHashCode();
                    if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                    if (EndClock != null)
                    hashCode = hashCode * 59 + EndClock.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndPeriod.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndYardsToGoal.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Offense != null)
                    hashCode = hashCode * 59 + Offense.GetHashCode();
                    
                    hashCode = hashCode * 59 + OffenseId.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlayCount.GetHashCode();
                    if (Plays != null)
                    hashCode = hashCode * 59 + Plays.GetHashCode();
                    
                    hashCode = hashCode * 59 + ScoringOpportunity.GetHashCode();
                    if (StartClock != null)
                    hashCode = hashCode * 59 + StartClock.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartPeriod.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartYardsToGoal.GetHashCode();
                    
                    hashCode = hashCode * 59 + Yards.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LivePlayByPlayDrivesInner left, LivePlayByPlayDrivesInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LivePlayByPlayDrivesInner left, LivePlayByPlayDrivesInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
