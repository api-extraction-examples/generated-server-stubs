/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class GamesApiController : ControllerBase
    { 
        /// <summary>
        /// Advanced box scores
        /// </summary>
        /// <remarks>Get advanced box score data</remarks>
        /// <param name="gameId">Game id parameters</param>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/game/box/advanced")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetAdvancedBoxScore")]
        [SwaggerResponse(statusCode: 200, type: typeof(BoxScore), description: "successful operation")]
        public virtual IActionResult GetAdvancedBoxScore([FromQuery (Name = "gameId")][Required()]int gameId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BoxScore));
            string exampleJson = null;
            exampleJson = "{\n  \"teams\" : {\n    \"ppa\" : [ {\n      \"plays\" : 5.025004791520295,\n      \"rushing\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"overall\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"passing\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"team\" : \"team\"\n    }, {\n      \"plays\" : 5.025004791520295,\n      \"rushing\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"overall\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"passing\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"team\" : \"team\"\n    } ],\n    \"scoringOpportunities\" : [ {\n      \"pointsPerOpportunity\" : 3.0937452626664474,\n      \"team\" : \"team\",\n      \"opportunities\" : 6,\n      \"points\" : 3\n    }, {\n      \"pointsPerOpportunity\" : 3.0937452626664474,\n      \"team\" : \"team\",\n      \"opportunities\" : 6,\n      \"points\" : 3\n    } ],\n    \"successRates\" : [ {\n      \"standardDowns\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"overall\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"passingDowns\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"team\" : \"team\"\n    }, {\n      \"standardDowns\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"overall\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"passingDowns\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"team\" : \"team\"\n    } ],\n    \"fieldPosition\" : [ {\n      \"averageStartingPredictedPoints\" : 9.369310271410669,\n      \"averageStart\" : 9.965781217890562,\n      \"team\" : \"team\"\n    }, {\n      \"averageStartingPredictedPoints\" : 9.369310271410669,\n      \"averageStart\" : 9.965781217890562,\n      \"team\" : \"team\"\n    } ],\n    \"cumulativePpa\" : [ {\n      \"plays\" : 5.025004791520295,\n      \"rushing\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"overall\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"passing\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"team\" : \"team\"\n    }, {\n      \"plays\" : 5.025004791520295,\n      \"rushing\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"overall\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"passing\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"team\" : \"team\"\n    } ],\n    \"havoc\" : [ {\n      \"total\" : 9.018348186070783,\n      \"frontSeven\" : 8.762042012749001,\n      \"team\" : \"team\",\n      \"db\" : 6.683562403749608\n    }, {\n      \"total\" : 9.018348186070783,\n      \"frontSeven\" : 8.762042012749001,\n      \"team\" : \"team\",\n      \"db\" : 6.683562403749608\n    } ],\n    \"rushing\" : [ {\n      \"lineYards\" : 6.438423552598547,\n      \"openFieldYardsAverage\" : 1.284659006116532,\n      \"lineYardsAverage\" : 3.5571952270680973,\n      \"stuffRate\" : 5.944895607614016,\n      \"openFieldYards\" : 6,\n      \"powerSuccess\" : 2.8841621266687802,\n      \"team\" : \"team\",\n      \"secondLevelYards\" : 6,\n      \"secondLevelYardsAverage\" : 6.878052220127876\n    }, {\n      \"lineYards\" : 6.438423552598547,\n      \"openFieldYardsAverage\" : 1.284659006116532,\n      \"lineYardsAverage\" : 3.5571952270680973,\n      \"stuffRate\" : 5.944895607614016,\n      \"openFieldYards\" : 6,\n      \"powerSuccess\" : 2.8841621266687802,\n      \"team\" : \"team\",\n      \"secondLevelYards\" : 6,\n      \"secondLevelYardsAverage\" : 6.878052220127876\n    } ],\n    \"explosiveness\" : [ {\n      \"overall\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"team\" : \"team\"\n    }, {\n      \"overall\" : {\n        \"total\" : 4.965218492984954,\n        \"quarter1\" : 1.4894159098541704,\n        \"quarter2\" : 6.84685269835264,\n        \"quarter3\" : 7.457744773683766,\n        \"quarter4\" : 1.1730742509559433\n      },\n      \"team\" : \"team\"\n    } ]\n  },\n  \"players\" : {\n    \"ppa\" : [ {\n      \"average\" : {\n        \"total\" : 7.061401241503109,\n        \"quarter1\" : 6.027456183070403,\n        \"quarter2\" : 1.4658129805029452,\n        \"quarter3\" : 5.962133916683182,\n        \"quarter4\" : 5.637376656633329,\n        \"rushing\" : 2.3021358869347655,\n        \"passing\" : 0.8008281904610115\n      },\n      \"position\" : \"position\",\n      \"team\" : \"team\",\n      \"cumulative\" : {\n        \"total\" : 7.061401241503109,\n        \"quarter1\" : 6.027456183070403,\n        \"quarter2\" : 1.4658129805029452,\n        \"quarter3\" : 5.962133916683182,\n        \"quarter4\" : 5.637376656633329,\n        \"rushing\" : 2.3021358869347655,\n        \"passing\" : 0.8008281904610115\n      },\n      \"player\" : \"player\"\n    }, {\n      \"average\" : {\n        \"total\" : 7.061401241503109,\n        \"quarter1\" : 6.027456183070403,\n        \"quarter2\" : 1.4658129805029452,\n        \"quarter3\" : 5.962133916683182,\n        \"quarter4\" : 5.637376656633329,\n        \"rushing\" : 2.3021358869347655,\n        \"passing\" : 0.8008281904610115\n      },\n      \"position\" : \"position\",\n      \"team\" : \"team\",\n      \"cumulative\" : {\n        \"total\" : 7.061401241503109,\n        \"quarter1\" : 6.027456183070403,\n        \"quarter2\" : 1.4658129805029452,\n        \"quarter3\" : 5.962133916683182,\n        \"quarter4\" : 5.637376656633329,\n        \"rushing\" : 2.3021358869347655,\n        \"passing\" : 0.8008281904610115\n      },\n      \"player\" : \"player\"\n    } ],\n    \"usage\" : [ {\n      \"total\" : 1.0246457001441578,\n      \"quarter1\" : 3.616076749251911,\n      \"quarter2\" : 2.027123023002322,\n      \"quarter3\" : 4.145608029883936,\n      \"quarter4\" : 7.386281948385884,\n      \"rushing\" : 1.2315135367772556,\n      \"passing\" : 9.301444243932576,\n      \"position\" : \"position\",\n      \"team\" : \"team\",\n      \"player\" : \"player\"\n    }, {\n      \"total\" : 1.0246457001441578,\n      \"quarter1\" : 3.616076749251911,\n      \"quarter2\" : 2.027123023002322,\n      \"quarter3\" : 4.145608029883936,\n      \"quarter4\" : 7.386281948385884,\n      \"rushing\" : 1.2315135367772556,\n      \"passing\" : 9.301444243932576,\n      \"position\" : \"position\",\n      \"team\" : \"team\",\n      \"player\" : \"player\"\n    } ]\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BoxScore>(exampleJson)
            : default(BoxScore);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Season calendar
        /// </summary>
        /// <remarks>Get calendar of weeks by season</remarks>
        /// <param name="year">Year filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/calendar")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetCalendar")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Week>), description: "successful operation")]
        public virtual IActionResult GetCalendar([FromQuery (Name = "year")][Required()]int year)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Week>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"firstGameStart\" : \"firstGameStart\",\n  \"seasonType\" : \"seasonType\",\n  \"week\" : 6,\n  \"lastGameStart\" : \"lastGameStart\",\n  \"season\" : 0\n}, {\n  \"firstGameStart\" : \"firstGameStart\",\n  \"seasonType\" : \"seasonType\",\n  \"week\" : 6,\n  \"lastGameStart\" : \"lastGameStart\",\n  \"season\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Week>>(exampleJson)
            : default(List<Week>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Game media information and schedules
        /// </summary>
        /// <remarks>Game media information (TV, radio, etc)</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both)</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">Conference filter</param>
        /// <param name="mediaType">Media type filter (tv, radio, web, ppv, or mobile)</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii)</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/games/media")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetGameMedia")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GameMedia>), description: "successful operation")]
        public virtual IActionResult GetGameMedia([FromQuery (Name = "year")][Required()]int year, [FromQuery (Name = "week")][Range(1, 16)]int? week, [FromQuery (Name = "seasonType")]string seasonType, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "mediaType")]string mediaType, [FromQuery (Name = "classification")]string classification)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GameMedia>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"awayConference\" : \"awayConference\",\n  \"seasonType\" : \"seasonType\",\n  \"homeConference\" : \"homeConference\",\n  \"week\" : 1,\n  \"awayTeam\" : \"awayTeam\",\n  \"homeTeam\" : \"homeTeam\",\n  \"season\" : 6,\n  \"mediaType\" : \"mediaType\",\n  \"startTime\" : \"startTime\",\n  \"id\" : 0,\n  \"isStartTimeTBD\" : true,\n  \"outlet\" : \"outlet\"\n}, {\n  \"awayConference\" : \"awayConference\",\n  \"seasonType\" : \"seasonType\",\n  \"homeConference\" : \"homeConference\",\n  \"week\" : 1,\n  \"awayTeam\" : \"awayTeam\",\n  \"homeTeam\" : \"homeTeam\",\n  \"season\" : 6,\n  \"mediaType\" : \"mediaType\",\n  \"startTime\" : \"startTime\",\n  \"id\" : 0,\n  \"isStartTimeTBD\" : true,\n  \"outlet\" : \"outlet\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<GameMedia>>(exampleJson)
            : default(List<GameMedia>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Game weather information (Patreon only)
        /// </summary>
        /// <remarks>Weather information for the hour of kickoff</remarks>
        /// <param name="gameId">Game id filter (required if no year)</param>
        /// <param name="year">Year filter (required if no game id)</param>
        /// <param name="week">Week filter</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both)</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">Conference filter</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii)</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/games/weather")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetGameWeather")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GameWeather>), description: "successful operation")]
        public virtual IActionResult GetGameWeather([FromQuery (Name = "gameId")]int? gameId, [FromQuery (Name = "year")]int? year, [FromQuery (Name = "week")][Range(1, 16)]int? week, [FromQuery (Name = "seasonType")]string seasonType, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "classification")]string classification)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GameWeather>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"awayConference\" : \"awayConference\",\n  \"seasonType\" : \"seasonType\",\n  \"venue\" : \"venue\",\n  \"homeConference\" : \"homeConference\",\n  \"week\" : 4,\n  \"weatherConditionCode\" : 2,\n  \"awayTeam\" : \"awayTeam\",\n  \"snowfall\" : 7.061401241503109,\n  \"pressure\" : 5.637376656633329,\n  \"dewPoint\" : 0.8008281904610115,\n  \"gameIndoors\" : true,\n  \"precipitation\" : 5.962133916683182,\n  \"venueId\" : 3,\n  \"temperature\" : 9.301444243932576,\n  \"homeTeam\" : \"homeTeam\",\n  \"humidity\" : 6.027456183070403,\n  \"season\" : 2,\n  \"startTime\" : \"startTime\",\n  \"weatherCondition\" : \"weatherCondition\",\n  \"id\" : 1,\n  \"windDirection\" : 7.386281948385884,\n  \"windSpeed\" : 1.2315135367772556\n}, {\n  \"awayConference\" : \"awayConference\",\n  \"seasonType\" : \"seasonType\",\n  \"venue\" : \"venue\",\n  \"homeConference\" : \"homeConference\",\n  \"week\" : 4,\n  \"weatherConditionCode\" : 2,\n  \"awayTeam\" : \"awayTeam\",\n  \"snowfall\" : 7.061401241503109,\n  \"pressure\" : 5.637376656633329,\n  \"dewPoint\" : 0.8008281904610115,\n  \"gameIndoors\" : true,\n  \"precipitation\" : 5.962133916683182,\n  \"venueId\" : 3,\n  \"temperature\" : 9.301444243932576,\n  \"homeTeam\" : \"homeTeam\",\n  \"humidity\" : 6.027456183070403,\n  \"season\" : 2,\n  \"startTime\" : \"startTime\",\n  \"weatherCondition\" : \"weatherCondition\",\n  \"id\" : 1,\n  \"windDirection\" : 7.386281948385884,\n  \"windSpeed\" : 1.2315135367772556\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<GameWeather>>(exampleJson)
            : default(List<GameWeather>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Games and results
        /// </summary>
        /// <remarks>Get game results</remarks>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter</param>
        /// <param name="seasonType">Season type filter (regular or postseason)</param>
        /// <param name="team">Team</param>
        /// <param name="home">Home team filter</param>
        /// <param name="away">Away team filter</param>
        /// <param name="conference">Conference abbreviation filter</param>
        /// <param name="division">Division classification filter (fbs/fcs/ii/iii)</param>
        /// <param name="id">id filter for querying a single game</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/games")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetGames")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Game>), description: "successful operation")]
        public virtual IActionResult GetGames([FromQuery (Name = "year")][Required()]int year, [FromQuery (Name = "week")][Range(1, 16)]int? week, [FromQuery (Name = "seasonType")]string seasonType, [FromQuery (Name = "team")]string team, [FromQuery (Name = "home")]string home, [FromQuery (Name = "away")]string away, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "division")]string division, [FromQuery (Name = "id")]int? id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Game>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"venue\" : \"venue\",\n  \"away_post_win_prob\" : 5.637376656633329,\n  \"notes\" : \"notes\",\n  \"week\" : 1,\n  \"start_time_tbd\" : true,\n  \"away_team\" : \"away_team\",\n  \"away_id\" : 6,\n  \"home_post_win_prob\" : 7.386281948385884,\n  \"season_type\" : \"season_type\",\n  \"home_points\" : 4,\n  \"away_pregame_elo\" : 7,\n  \"away_points\" : 5,\n  \"home_conference\" : \"home_conference\",\n  \"home_pregame_elo\" : 1,\n  \"away_postgame_elo\" : 2,\n  \"season\" : 6,\n  \"home_id\" : 3,\n  \"home_postgame_elo\" : 1,\n  \"away_conference\" : \"away_conference\",\n  \"id\" : 1,\n  \"venue_id\" : 7,\n  \"neutral_site\" : true,\n  \"start_date\" : \"start_date\",\n  \"conference_game\" : true,\n  \"away_division\" : \"away_division\",\n  \"excitement_index\" : 9.301444243932576,\n  \"completed\" : true,\n  \"away_line_scores\" : [ 1, 1 ],\n  \"home_division\" : \"home_division\",\n  \"highlights\" : \"highlights\",\n  \"home_line_scores\" : [ 2, 2 ],\n  \"home_team\" : \"home_team\",\n  \"attendance\" : 0\n}, {\n  \"venue\" : \"venue\",\n  \"away_post_win_prob\" : 5.637376656633329,\n  \"notes\" : \"notes\",\n  \"week\" : 1,\n  \"start_time_tbd\" : true,\n  \"away_team\" : \"away_team\",\n  \"away_id\" : 6,\n  \"home_post_win_prob\" : 7.386281948385884,\n  \"season_type\" : \"season_type\",\n  \"home_points\" : 4,\n  \"away_pregame_elo\" : 7,\n  \"away_points\" : 5,\n  \"home_conference\" : \"home_conference\",\n  \"home_pregame_elo\" : 1,\n  \"away_postgame_elo\" : 2,\n  \"season\" : 6,\n  \"home_id\" : 3,\n  \"home_postgame_elo\" : 1,\n  \"away_conference\" : \"away_conference\",\n  \"id\" : 1,\n  \"venue_id\" : 7,\n  \"neutral_site\" : true,\n  \"start_date\" : \"start_date\",\n  \"conference_game\" : true,\n  \"away_division\" : \"away_division\",\n  \"excitement_index\" : 9.301444243932576,\n  \"completed\" : true,\n  \"away_line_scores\" : [ 1, 1 ],\n  \"home_division\" : \"home_division\",\n  \"highlights\" : \"highlights\",\n  \"home_line_scores\" : [ 2, 2 ],\n  \"home_team\" : \"home_team\",\n  \"attendance\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Game>>(exampleJson)
            : default(List<Game>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Player game stats
        /// </summary>
        /// <remarks>Player stats broken down by game</remarks>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter</param>
        /// <param name="seasonType">Season type filter (regular or postseason)</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">Conference abbreviation filter</param>
        /// <param name="category">Category filter (e.g defensive)</param>
        /// <param name="gameId">Game id filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/games/players")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPlayerGameStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlayerGame>), description: "successful operation")]
        public virtual IActionResult GetPlayerGameStats([FromQuery (Name = "year")][Required()]int year, [FromQuery (Name = "week")][Range(1, 16)]int? week, [FromQuery (Name = "seasonType")]string seasonType, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "category")]string category, [FromQuery (Name = "gameId")]int? gameId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlayerGame>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"teams\" : [ {\n    \"homeAway\" : true,\n    \"school\" : {\n      \"conference\" : \"conference\",\n      \"name\" : \"name\"\n    },\n    \"categories\" : [ {\n      \"types\" : [ {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      }, {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      } ],\n      \"name\" : \"name\"\n    }, {\n      \"types\" : [ {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      }, {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      } ],\n      \"name\" : \"name\"\n    } ],\n    \"points\" : 1\n  }, {\n    \"homeAway\" : true,\n    \"school\" : {\n      \"conference\" : \"conference\",\n      \"name\" : \"name\"\n    },\n    \"categories\" : [ {\n      \"types\" : [ {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      }, {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      } ],\n      \"name\" : \"name\"\n    }, {\n      \"types\" : [ {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      }, {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      } ],\n      \"name\" : \"name\"\n    } ],\n    \"points\" : 1\n  } ],\n  \"id\" : 0\n}, {\n  \"teams\" : [ {\n    \"homeAway\" : true,\n    \"school\" : {\n      \"conference\" : \"conference\",\n      \"name\" : \"name\"\n    },\n    \"categories\" : [ {\n      \"types\" : [ {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      }, {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      } ],\n      \"name\" : \"name\"\n    }, {\n      \"types\" : [ {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      }, {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      } ],\n      \"name\" : \"name\"\n    } ],\n    \"points\" : 1\n  }, {\n    \"homeAway\" : true,\n    \"school\" : {\n      \"conference\" : \"conference\",\n      \"name\" : \"name\"\n    },\n    \"categories\" : [ {\n      \"types\" : [ {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      }, {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      } ],\n      \"name\" : \"name\"\n    }, {\n      \"types\" : [ {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      }, {\n        \"name\" : \"name\",\n        \"athletes\" : [ {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        }, {\n          \"stat\" : \"stat\",\n          \"name\" : \"name\",\n          \"id\" : 6\n        } ]\n      } ],\n      \"name\" : \"name\"\n    } ],\n    \"points\" : 1\n  } ],\n  \"id\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PlayerGame>>(exampleJson)
            : default(List<PlayerGame>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Live game results (Patreon only)
        /// </summary>
        /// <remarks>Get live game results</remarks>
        /// <param name="classification">Classification filter (fbs, fcs, ii, or iii). Defaults to fbs.</param>
        /// <param name="conference">Conference abbreviation filter.</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/scoreboard")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetScoreboard")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ScoreboardGame>), description: "successful operation")]
        public virtual IActionResult GetScoreboard([FromQuery (Name = "classification")]string classification, [FromQuery (Name = "conference")]string conference)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ScoreboardGame>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"venue\" : {\n    \"city\" : \"city\",\n    \"name\" : \"name\",\n    \"state\" : \"state\"\n  },\n  \"period\" : 9,\n  \"tv\" : \"tv\",\n  \"awayTeam\" : {\n    \"conference\" : \"conference\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"classification\" : \"classification\",\n    \"points\" : 6\n  },\n  \"possession\" : \"possession\",\n  \"betting\" : {\n    \"homeMoneyline\" : 5,\n    \"overUnder\" : 5.637376656633329,\n    \"awayMoneyline\" : 1,\n    \"spread\" : 2.3021358869347655\n  },\n  \"clock\" : \"clock\",\n  \"startTimeTBD\" : true,\n  \"conferenceGame\" : true,\n  \"weather\" : {\n    \"temperature\" : 3.616076749251911,\n    \"description\" : \"description\",\n    \"windDirection\" : 2.027123023002322,\n    \"windSpeed\" : 4.145608029883936\n  },\n  \"homeTeam\" : {\n    \"conference\" : \"conference\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"classification\" : \"classification\",\n    \"points\" : 6\n  },\n  \"id\" : 7,\n  \"neutralSite\" : true,\n  \"situation\" : \"situation\",\n  \"startDate\" : \"startDate\",\n  \"status\" : \"status\"\n}, {\n  \"venue\" : {\n    \"city\" : \"city\",\n    \"name\" : \"name\",\n    \"state\" : \"state\"\n  },\n  \"period\" : 9,\n  \"tv\" : \"tv\",\n  \"awayTeam\" : {\n    \"conference\" : \"conference\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"classification\" : \"classification\",\n    \"points\" : 6\n  },\n  \"possession\" : \"possession\",\n  \"betting\" : {\n    \"homeMoneyline\" : 5,\n    \"overUnder\" : 5.637376656633329,\n    \"awayMoneyline\" : 1,\n    \"spread\" : 2.3021358869347655\n  },\n  \"clock\" : \"clock\",\n  \"startTimeTBD\" : true,\n  \"conferenceGame\" : true,\n  \"weather\" : {\n    \"temperature\" : 3.616076749251911,\n    \"description\" : \"description\",\n    \"windDirection\" : 2.027123023002322,\n    \"windSpeed\" : 4.145608029883936\n  },\n  \"homeTeam\" : {\n    \"conference\" : \"conference\",\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"classification\" : \"classification\",\n    \"points\" : 6\n  },\n  \"id\" : 7,\n  \"neutralSite\" : true,\n  \"situation\" : \"situation\",\n  \"startDate\" : \"startDate\",\n  \"status\" : \"status\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ScoreboardGame>>(exampleJson)
            : default(List<ScoreboardGame>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Team game stats
        /// </summary>
        /// <remarks>Team stats broken down by game</remarks>
        /// <param name="year">Year/season filter for games</param>
        /// <param name="week">Week filter</param>
        /// <param name="seasonType">Season type filter (regular or postseason)</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">Conference abbreviation filter</param>
        /// <param name="gameId">Game id filter</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii)</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/games/teams")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetTeamGameStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TeamGame>), description: "successful operation")]
        public virtual IActionResult GetTeamGameStats([FromQuery (Name = "year")][Required()]int year, [FromQuery (Name = "week")][Range(1, 16)]int? week, [FromQuery (Name = "seasonType")]string seasonType, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "gameId")]int? gameId, [FromQuery (Name = "classification")]string classification)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TeamGame>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"teams\" : [ {\n    \"homeAway\" : \"homeAway\",\n    \"conference\" : \"conference\",\n    \"school\" : \"school\",\n    \"stats\" : [ {\n      \"stat\" : \"stat\",\n      \"category\" : \"category\"\n    }, {\n      \"stat\" : \"stat\",\n      \"category\" : \"category\"\n    } ],\n    \"points\" : 6\n  }, {\n    \"homeAway\" : \"homeAway\",\n    \"conference\" : \"conference\",\n    \"school\" : \"school\",\n    \"stats\" : [ {\n      \"stat\" : \"stat\",\n      \"category\" : \"category\"\n    }, {\n      \"stat\" : \"stat\",\n      \"category\" : \"category\"\n    } ],\n    \"points\" : 6\n  } ],\n  \"id\" : 0\n}, {\n  \"teams\" : [ {\n    \"homeAway\" : \"homeAway\",\n    \"conference\" : \"conference\",\n    \"school\" : \"school\",\n    \"stats\" : [ {\n      \"stat\" : \"stat\",\n      \"category\" : \"category\"\n    }, {\n      \"stat\" : \"stat\",\n      \"category\" : \"category\"\n    } ],\n    \"points\" : 6\n  }, {\n    \"homeAway\" : \"homeAway\",\n    \"conference\" : \"conference\",\n    \"school\" : \"school\",\n    \"stats\" : [ {\n      \"stat\" : \"stat\",\n      \"category\" : \"category\"\n    }, {\n      \"stat\" : \"stat\",\n      \"category\" : \"category\"\n    } ],\n    \"points\" : 6\n  } ],\n  \"id\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TeamGame>>(exampleJson)
            : default(List<TeamGame>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Team records
        /// </summary>
        /// <remarks>Get team records by year</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">Conference filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/records")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetTeamRecords")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TeamRecord>), description: "successful operation")]
        public virtual IActionResult GetTeamRecords([FromQuery (Name = "year")]int? year, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TeamRecord>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"division\" : \"division\",\n  \"total\" : {\n    \"wins\" : 5,\n    \"ties\" : 1,\n    \"games\" : 0,\n    \"losses\" : 6\n  },\n  \"conference\" : \"conference\",\n  \"awayGames\" : {\n    \"wins\" : 5,\n    \"ties\" : 1,\n    \"games\" : 0,\n    \"losses\" : 6\n  },\n  \"conferenceGames\" : {\n    \"wins\" : 5,\n    \"ties\" : 1,\n    \"games\" : 0,\n    \"losses\" : 6\n  },\n  \"homeGames\" : {\n    \"wins\" : 5,\n    \"ties\" : 1,\n    \"games\" : 0,\n    \"losses\" : 6\n  },\n  \"year\" : 2,\n  \"expectedWins\" : 5.637376656633329,\n  \"team\" : \"team\"\n}, {\n  \"division\" : \"division\",\n  \"total\" : {\n    \"wins\" : 5,\n    \"ties\" : 1,\n    \"games\" : 0,\n    \"losses\" : 6\n  },\n  \"conference\" : \"conference\",\n  \"awayGames\" : {\n    \"wins\" : 5,\n    \"ties\" : 1,\n    \"games\" : 0,\n    \"losses\" : 6\n  },\n  \"conferenceGames\" : {\n    \"wins\" : 5,\n    \"ties\" : 1,\n    \"games\" : 0,\n    \"losses\" : 6\n  },\n  \"homeGames\" : {\n    \"wins\" : 5,\n    \"ties\" : 1,\n    \"games\" : 0,\n    \"losses\" : 6\n  },\n  \"year\" : 2,\n  \"expectedWins\" : 5.637376656633329,\n  \"team\" : \"team\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TeamRecord>>(exampleJson)
            : default(List<TeamRecord>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
