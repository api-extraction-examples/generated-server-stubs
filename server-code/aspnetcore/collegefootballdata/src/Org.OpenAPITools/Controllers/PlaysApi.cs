/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PlaysApiController : ControllerBase
    { 
        /// <summary>
        /// Live metrics and PBP (Patreon only)
        /// </summary>
        /// <remarks>Get live metrics and PBP</remarks>
        /// <param name="id">Game id</param>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/live/plays")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetLivePlays")]
        [SwaggerResponse(statusCode: 200, type: typeof(LivePlayByPlay), description: "successful operation")]
        public virtual IActionResult GetLivePlays([FromQuery (Name = "id")][Required()]int id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LivePlayByPlay));
            string exampleJson = null;
            exampleJson = "{\n  \"period\" : 8,\n  \"distance\" : 0,\n  \"teams\" : [ {\n    \"plays\" : 3,\n    \"secondLevelYardsPerRush\" : 4.652396432933246,\n    \"successRate\" : 7.740351818741173,\n    \"totalEpa\" : 3.0576100241049344,\n    \"openFieldYards\" : 6,\n    \"passingDownSuccessRate\" : 6.704019297950036,\n    \"epaPerRush\" : 6.965117697638846,\n    \"passingEpa\" : 3.353193347011243,\n    \"team\" : \"team\",\n    \"epaPerPass\" : 6.438423552598547,\n    \"secondLevelYards\" : 0,\n    \"epaPerPlay\" : 3.5571952270680973,\n    \"points\" : 7,\n    \"lineYards\" : 2,\n    \"lineYardsPerRush\" : 6.778324963048013,\n    \"homeAway\" : \"homeAway\",\n    \"pointsPerOpportunity\" : 0.8851374739011653,\n    \"scoringOpportunities\" : 6,\n    \"drives\" : 9,\n    \"openFieldYardsPerRush\" : 5.944895607614016,\n    \"standardDownSuccessRate\" : 8.969578798196912,\n    \"teamId\" : 3,\n    \"rushingEpa\" : 7.058770351582356,\n    \"explosiveness\" : 1.284659006116532\n  }, {\n    \"plays\" : 3,\n    \"secondLevelYardsPerRush\" : 4.652396432933246,\n    \"successRate\" : 7.740351818741173,\n    \"totalEpa\" : 3.0576100241049344,\n    \"openFieldYards\" : 6,\n    \"passingDownSuccessRate\" : 6.704019297950036,\n    \"epaPerRush\" : 6.965117697638846,\n    \"passingEpa\" : 3.353193347011243,\n    \"team\" : \"team\",\n    \"epaPerPass\" : 6.438423552598547,\n    \"secondLevelYards\" : 0,\n    \"epaPerPlay\" : 3.5571952270680973,\n    \"points\" : 7,\n    \"lineYards\" : 2,\n    \"lineYardsPerRush\" : 6.778324963048013,\n    \"homeAway\" : \"homeAway\",\n    \"pointsPerOpportunity\" : 0.8851374739011653,\n    \"scoringOpportunities\" : 6,\n    \"drives\" : 9,\n    \"openFieldYardsPerRush\" : 5.944895607614016,\n    \"standardDownSuccessRate\" : 8.969578798196912,\n    \"teamId\" : 3,\n    \"rushingEpa\" : 7.058770351582356,\n    \"explosiveness\" : 1.284659006116532\n  } ],\n  \"drives\" : [ {\n    \"startClock\" : \"startClock\",\n    \"plays\" : [ {\n      \"period\" : 1,\n      \"homeScore\" : 1,\n      \"distance\" : 2,\n      \"clock\" : \"clock\",\n      \"team\" : \"team\",\n      \"downType\" : \"downType\",\n      \"down\" : 4,\n      \"yardsGained\" : 1,\n      \"playTypeId\" : 6,\n      \"rushPass\" : \"rushPass\",\n      \"awayScore\" : 3,\n      \"playType\" : \"playType\",\n      \"success\" : true,\n      \"epa\" : 7.386281948385884,\n      \"teamId\" : 7,\n      \"wallclock\" : \"wallclock\",\n      \"garbageTime\" : true,\n      \"playText\" : \"playText\",\n      \"yardsToGoal\" : 4,\n      \"id\" : 1\n    }, {\n      \"period\" : 1,\n      \"homeScore\" : 1,\n      \"distance\" : 2,\n      \"clock\" : \"clock\",\n      \"team\" : \"team\",\n      \"downType\" : \"downType\",\n      \"down\" : 4,\n      \"yardsGained\" : 1,\n      \"playTypeId\" : 6,\n      \"rushPass\" : \"rushPass\",\n      \"awayScore\" : 3,\n      \"playType\" : \"playType\",\n      \"success\" : true,\n      \"epa\" : 7.386281948385884,\n      \"teamId\" : 7,\n      \"wallclock\" : \"wallclock\",\n      \"garbageTime\" : true,\n      \"playText\" : \"playText\",\n      \"yardsToGoal\" : 4,\n      \"id\" : 1\n    } ],\n    \"endPeriod\" : 5,\n    \"offense\" : \"offense\",\n    \"yards\" : 9,\n    \"defenseId\" : 1,\n    \"duration\" : \"duration\",\n    \"playCount\" : 9,\n    \"startPeriod\" : 5,\n    \"endYardsToGoal\" : 5,\n    \"scoringOpportunity\" : true,\n    \"defense\" : \"defense\",\n    \"endClock\" : \"endClock\",\n    \"offenseId\" : 7,\n    \"id\" : 2,\n    \"startYardsToGoal\" : 9\n  }, {\n    \"startClock\" : \"startClock\",\n    \"plays\" : [ {\n      \"period\" : 1,\n      \"homeScore\" : 1,\n      \"distance\" : 2,\n      \"clock\" : \"clock\",\n      \"team\" : \"team\",\n      \"downType\" : \"downType\",\n      \"down\" : 4,\n      \"yardsGained\" : 1,\n      \"playTypeId\" : 6,\n      \"rushPass\" : \"rushPass\",\n      \"awayScore\" : 3,\n      \"playType\" : \"playType\",\n      \"success\" : true,\n      \"epa\" : 7.386281948385884,\n      \"teamId\" : 7,\n      \"wallclock\" : \"wallclock\",\n      \"garbageTime\" : true,\n      \"playText\" : \"playText\",\n      \"yardsToGoal\" : 4,\n      \"id\" : 1\n    }, {\n      \"period\" : 1,\n      \"homeScore\" : 1,\n      \"distance\" : 2,\n      \"clock\" : \"clock\",\n      \"team\" : \"team\",\n      \"downType\" : \"downType\",\n      \"down\" : 4,\n      \"yardsGained\" : 1,\n      \"playTypeId\" : 6,\n      \"rushPass\" : \"rushPass\",\n      \"awayScore\" : 3,\n      \"playType\" : \"playType\",\n      \"success\" : true,\n      \"epa\" : 7.386281948385884,\n      \"teamId\" : 7,\n      \"wallclock\" : \"wallclock\",\n      \"garbageTime\" : true,\n      \"playText\" : \"playText\",\n      \"yardsToGoal\" : 4,\n      \"id\" : 1\n    } ],\n    \"endPeriod\" : 5,\n    \"offense\" : \"offense\",\n    \"yards\" : 9,\n    \"defenseId\" : 1,\n    \"duration\" : \"duration\",\n    \"playCount\" : 9,\n    \"startPeriod\" : 5,\n    \"endYardsToGoal\" : 5,\n    \"scoringOpportunity\" : true,\n    \"defense\" : \"defense\",\n    \"endClock\" : \"endClock\",\n    \"offenseId\" : 7,\n    \"id\" : 2,\n    \"startYardsToGoal\" : 9\n  } ],\n  \"possession\" : \"possession\",\n  \"yardsToGoal\" : 7,\n  \"clock\" : \"clock\",\n  \"id\" : 6,\n  \"down\" : 6,\n  \"status\" : \"status\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<LivePlayByPlay>(exampleJson)
            : default(LivePlayByPlay);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Types of player play stats
        /// </summary>
        /// <remarks>Type of play stats</remarks>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/play/stat/types")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPlayStatTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlayStatType>), description: "successful operation")]
        public virtual IActionResult GetPlayStatTypes()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlayStatType>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"id\" : 0\n}, {\n  \"name\" : \"name\",\n  \"id\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PlayStatType>>(exampleJson)
            : default(List<PlayStatType>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Play stats by play
        /// </summary>
        /// <remarks>Gets player stats associated by play (limit 1000)</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="gameId">gameId filter (from /games endpoint)</param>
        /// <param name="athleteId">athleteId filter (from /roster endpoint)</param>
        /// <param name="statTypeId">statTypeId filter (from /play/stat/types endpoint)</param>
        /// <param name="seasonType">regular, postseason, or both</param>
        /// <param name="conference">conference abbreviation filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/play/stats")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPlayStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlayStat>), description: "successful operation")]
        public virtual IActionResult GetPlayStats([FromQuery (Name = "year")]int? year, [FromQuery (Name = "week")][Range(1, 16)]int? week, [FromQuery (Name = "team")]string team, [FromQuery (Name = "gameId")]int? gameId, [FromQuery (Name = "athleteId")]int? athleteId, [FromQuery (Name = "statTypeId")]int? statTypeId, [FromQuery (Name = "seasonType")]string seasonType, [FromQuery (Name = "conference")]string conference)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlayStat>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"gameId\" : 5,\n  \"teamScore\" : 4,\n  \"period\" : 7,\n  \"stat\" : 2,\n  \"conference\" : \"conference\",\n  \"week\" : 7,\n  \"distance\" : 6,\n  \"statType\" : \"statType\",\n  \"clock\" : {\n    \"seconds\" : 2,\n    \"minutes\" : 5\n  },\n  \"team\" : \"team\",\n  \"down\" : 1,\n  \"playId\" : 9,\n  \"driveId\" : 5,\n  \"athleteId\" : 0,\n  \"opponent\" : \"opponent\",\n  \"opponentScore\" : 2,\n  \"season\" : 3,\n  \"yardsToGoal\" : 1,\n  \"athleteName\" : \"athleteName\"\n}, {\n  \"gameId\" : 5,\n  \"teamScore\" : 4,\n  \"period\" : 7,\n  \"stat\" : 2,\n  \"conference\" : \"conference\",\n  \"week\" : 7,\n  \"distance\" : 6,\n  \"statType\" : \"statType\",\n  \"clock\" : {\n    \"seconds\" : 2,\n    \"minutes\" : 5\n  },\n  \"team\" : \"team\",\n  \"down\" : 1,\n  \"playId\" : 9,\n  \"driveId\" : 5,\n  \"athleteId\" : 0,\n  \"opponent\" : \"opponent\",\n  \"opponentScore\" : 2,\n  \"season\" : 3,\n  \"yardsToGoal\" : 1,\n  \"athleteName\" : \"athleteName\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PlayStat>>(exampleJson)
            : default(List<PlayStat>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Play types
        /// </summary>
        /// <remarks>Types of plays</remarks>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/play/types")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPlayTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlayType>), description: "successful operation")]
        public virtual IActionResult GetPlayTypes()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlayType>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"id\" : 0,\n  \"text\" : \"text\",\n  \"abbreviation\" : \"abbreviation\"\n}, {\n  \"id\" : 0,\n  \"text\" : \"text\",\n  \"abbreviation\" : \"abbreviation\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PlayType>>(exampleJson)
            : default(List<PlayType>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Play by play data
        /// </summary>
        /// <remarks>Get play data and results</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter (required if team, offense, or defense, not specified)</param>
        /// <param name="seasonType">Season type filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="offense">Offensive team filter</param>
        /// <param name="defense">Defensive team filter</param>
        /// <param name="conference">Conference filter</param>
        /// <param name="offenseConference">Offensive conference filter</param>
        /// <param name="defenseConference">Defensive conference filter</param>
        /// <param name="playType">Play type filter</param>
        /// <param name="classification">Division classification filter (fbs/fcs/ii/iii)</param>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/plays")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPlays")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Play>), description: "successful operation")]
        public virtual IActionResult GetPlays([FromQuery (Name = "year")][Required()]int year, [FromQuery (Name = "week")][Required()][Range(1, 16)]int week, [FromQuery (Name = "seasonType")]string seasonType, [FromQuery (Name = "team")]string team, [FromQuery (Name = "offense")]string offense, [FromQuery (Name = "defense")]string defense, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "offenseConference")]string offenseConference, [FromQuery (Name = "defenseConference")]string defenseConference, [FromQuery (Name = "playType")]int? playType, [FromQuery (Name = "classification")]string classification)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Play>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"offense_timeouts\" : 2,\n  \"away\" : \"away\",\n  \"distance\" : 1,\n  \"offense\" : \"offense\",\n  \"offense_score\" : 3,\n  \"offense_conference\" : \"offense_conference\",\n  \"down\" : 5,\n  \"play_text\" : \"play_text\",\n  \"defense\" : \"defense\",\n  \"yards_gained\" : 1,\n  \"defense_conference\" : \"defense_conference\",\n  \"defense_timeouts\" : 6,\n  \"drive_number\" : 2,\n  \"id\" : 9,\n  \"play_number\" : 7,\n  \"yard_line\" : 1,\n  \"game_id\" : 7,\n  \"ppa\" : 1.2315135367772556,\n  \"period\" : 4,\n  \"scoring\" : true,\n  \"drive_id\" : 5,\n  \"yards_to_goal\" : 6,\n  \"clock\" : {\n    \"seconds\" : 2,\n    \"minutes\" : 5\n  },\n  \"home\" : \"home\",\n  \"defense_score\" : 0,\n  \"play_type\" : \"play_type\",\n  \"wallclock\" : \"wallclock\"\n}, {\n  \"offense_timeouts\" : 2,\n  \"away\" : \"away\",\n  \"distance\" : 1,\n  \"offense\" : \"offense\",\n  \"offense_score\" : 3,\n  \"offense_conference\" : \"offense_conference\",\n  \"down\" : 5,\n  \"play_text\" : \"play_text\",\n  \"defense\" : \"defense\",\n  \"yards_gained\" : 1,\n  \"defense_conference\" : \"defense_conference\",\n  \"defense_timeouts\" : 6,\n  \"drive_number\" : 2,\n  \"id\" : 9,\n  \"play_number\" : 7,\n  \"yard_line\" : 1,\n  \"game_id\" : 7,\n  \"ppa\" : 1.2315135367772556,\n  \"period\" : 4,\n  \"scoring\" : true,\n  \"drive_id\" : 5,\n  \"yards_to_goal\" : 6,\n  \"clock\" : {\n    \"seconds\" : 2,\n    \"minutes\" : 5\n  },\n  \"home\" : \"home\",\n  \"defense_score\" : 0,\n  \"play_type\" : \"play_type\",\n  \"wallclock\" : \"wallclock\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Play>>(exampleJson)
            : default(List<Play>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
