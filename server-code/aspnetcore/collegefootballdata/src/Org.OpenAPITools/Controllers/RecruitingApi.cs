/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RecruitingApiController : ControllerBase
    { 
        /// <summary>
        /// Recruit position group ratings
        /// </summary>
        /// <remarks>Gets a list of aggregated statistics by team and position grouping</remarks>
        /// <param name="startYear">Starting year</param>
        /// <param name="endYear">Ending year</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">conference filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/recruiting/groups")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetRecruitingGroups")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PositionGroupRecruitingRating>), description: "successful operation")]
        public virtual IActionResult GetRecruitingGroups([FromQuery (Name = "startYear")]int? startYear, [FromQuery (Name = "endYear")]int? endYear, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PositionGroupRecruitingRating>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"conference\" : \"conference\",\n  \"averageStars\" : 6.027456183070403,\n  \"averageRating\" : 0.8008281904610115,\n  \"commits\" : 1.4658129805029452,\n  \"totalRating\" : 5.962133916683182,\n  \"team\" : \"team\",\n  \"positionGroup\" : \"positionGroup\"\n}, {\n  \"conference\" : \"conference\",\n  \"averageStars\" : 6.027456183070403,\n  \"averageRating\" : 0.8008281904610115,\n  \"commits\" : 1.4658129805029452,\n  \"totalRating\" : 5.962133916683182,\n  \"team\" : \"team\",\n  \"positionGroup\" : \"positionGroup\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PositionGroupRecruitingRating>>(exampleJson)
            : default(List<PositionGroupRecruitingRating>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Player recruiting ratings and rankings
        /// </summary>
        /// <remarks>Get player recruiting rankings and data. Requires either a year or team to be specified.</remarks>
        /// <param name="year">Recruiting class year (required if team no specified)</param>
        /// <param name="classification">Type of recruit (HighSchool, JUCO, PrepSchool)</param>
        /// <param name="position">Position abbreviation filter</param>
        /// <param name="state">State or province abbreviation filter</param>
        /// <param name="team">Committed team filter (required if year not specified)</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/recruiting/players")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetRecruitingPlayers")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Recruit>), description: "successful operation")]
        public virtual IActionResult GetRecruitingPlayers([FromQuery (Name = "year")]int? year, [FromQuery (Name = "classification")]string classification, [FromQuery (Name = "position")]string position, [FromQuery (Name = "state")]string state, [FromQuery (Name = "team")]string team)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Recruit>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"country\" : \"country\",\n  \"city\" : \"city\",\n  \"year\" : 2,\n  \"recruitType\" : \"recruitType\",\n  \"committedTo\" : \"committedTo\",\n  \"hometownInfo\" : {\n    \"countyFips\" : \"countyFips\",\n    \"latitude\" : 1.4658129805029452,\n    \"longitude\" : 5.962133916683182\n  },\n  \"rating\" : 7.061401241503109,\n  \"stateProvince\" : \"stateProvince\",\n  \"weight\" : 3,\n  \"stars\" : 9,\n  \"athleteId\" : 0,\n  \"school\" : \"school\",\n  \"name\" : \"name\",\n  \"ranking\" : 2,\n  \"id\" : 5,\n  \"position\" : \"position\",\n  \"height\" : 6.027456183070403\n}, {\n  \"country\" : \"country\",\n  \"city\" : \"city\",\n  \"year\" : 2,\n  \"recruitType\" : \"recruitType\",\n  \"committedTo\" : \"committedTo\",\n  \"hometownInfo\" : {\n    \"countyFips\" : \"countyFips\",\n    \"latitude\" : 1.4658129805029452,\n    \"longitude\" : 5.962133916683182\n  },\n  \"rating\" : 7.061401241503109,\n  \"stateProvince\" : \"stateProvince\",\n  \"weight\" : 3,\n  \"stars\" : 9,\n  \"athleteId\" : 0,\n  \"school\" : \"school\",\n  \"name\" : \"name\",\n  \"ranking\" : 2,\n  \"id\" : 5,\n  \"position\" : \"position\",\n  \"height\" : 6.027456183070403\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Recruit>>(exampleJson)
            : default(List<Recruit>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Team recruiting rankings and ratings
        /// </summary>
        /// <remarks>Team recruiting rankings</remarks>
        /// <param name="year">Recruiting class year</param>
        /// <param name="team">Team filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/recruiting/teams")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetRecruitingTeams")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TeamRecruitingRank>), description: "successful operation")]
        public virtual IActionResult GetRecruitingTeams([FromQuery (Name = "year")]int? year, [FromQuery (Name = "team")]string team)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TeamRecruitingRank>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"year\" : 1,\n  \"rank\" : 6,\n  \"team\" : \"team\",\n  \"points\" : 0.8008281904610115\n}, {\n  \"year\" : 1,\n  \"rank\" : 6,\n  \"team\" : \"team\",\n  \"points\" : 0.8008281904610115\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TeamRecruitingRank>>(exampleJson)
            : default(List<TeamRecruitingRank>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
