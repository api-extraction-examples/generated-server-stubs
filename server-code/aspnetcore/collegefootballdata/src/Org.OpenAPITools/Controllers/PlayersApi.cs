/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PlayersApiController : ControllerBase
    { 
        /// <summary>
        /// Player stats by season
        /// </summary>
        /// <remarks>Season player stats</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">Conference abbreviation filter</param>
        /// <param name="startWeek">Start week filter</param>
        /// <param name="endWeek">Start week filter</param>
        /// <param name="seasonType">Season type filter (regular, postseason, or both)</param>
        /// <param name="category">Stat category filter (e.g. passing)</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/stats/player/season")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPlayerSeasonStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlayerSeasonStat>), description: "successful operation")]
        public virtual IActionResult GetPlayerSeasonStats([FromQuery (Name = "year")][Required()]int year, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "startWeek")]int? startWeek, [FromQuery (Name = "endWeek")]int? endWeek, [FromQuery (Name = "seasonType")]string seasonType, [FromQuery (Name = "category")]string category)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlayerSeasonStat>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"stat\" : 1.4658129805029452,\n  \"conference\" : \"conference\",\n  \"statType\" : \"statType\",\n  \"season\" : 6,\n  \"team\" : \"team\",\n  \"category\" : \"category\",\n  \"player\" : \"player\",\n  \"playerId\" : 0\n}, {\n  \"stat\" : 1.4658129805029452,\n  \"conference\" : \"conference\",\n  \"statType\" : \"statType\",\n  \"season\" : 6,\n  \"team\" : \"team\",\n  \"category\" : \"category\",\n  \"player\" : \"player\",\n  \"playerId\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PlayerSeasonStat>>(exampleJson)
            : default(List<PlayerSeasonStat>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Player usage metrics broken down by season
        /// </summary>
        /// <remarks>Player usage metrics by season</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">Conference abbreviation filter</param>
        /// <param name="position">Position abbreviation filter</param>
        /// <param name="playerId">Player id filter</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/player/usage")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPlayerUsage")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlayerUsage>), description: "successful operation")]
        public virtual IActionResult GetPlayerUsage([FromQuery (Name = "year")][Required()]int year, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "position")]string position, [FromQuery (Name = "playerId")]int? playerId, [FromQuery (Name = "excludeGarbageTime")]bool? excludeGarbageTime)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlayerUsage>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"conference\" : \"conference\",\n  \"usage\" : {\n    \"firstDown\" : 1.4658129805029452,\n    \"pass\" : 5.637376656633329,\n    \"standardDowns\" : 3.616076749251911,\n    \"overall\" : 5.962133916683182,\n    \"passingDowns\" : 2.3021358869347655,\n    \"secondDown\" : 9.301444243932576,\n    \"thirdDown\" : 2.027123023002322,\n    \"rush\" : 7.061401241503109\n  },\n  \"name\" : \"name\",\n  \"season\" : 6,\n  \"id\" : 0,\n  \"position\" : \"position\",\n  \"team\" : \"team\"\n}, {\n  \"conference\" : \"conference\",\n  \"usage\" : {\n    \"firstDown\" : 1.4658129805029452,\n    \"pass\" : 5.637376656633329,\n    \"standardDowns\" : 3.616076749251911,\n    \"overall\" : 5.962133916683182,\n    \"passingDowns\" : 2.3021358869347655,\n    \"secondDown\" : 9.301444243932576,\n    \"thirdDown\" : 2.027123023002322,\n    \"rush\" : 7.061401241503109\n  },\n  \"name\" : \"name\",\n  \"season\" : 6,\n  \"id\" : 0,\n  \"position\" : \"position\",\n  \"team\" : \"team\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PlayerUsage>>(exampleJson)
            : default(List<PlayerUsage>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Team returning production metrics
        /// </summary>
        /// <remarks>Returning production metrics</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">Conference abbreviation filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/player/returning")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetReturningProduction")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ReturningProduction>), description: "successful operation")]
        public virtual IActionResult GetReturningProduction([FromQuery (Name = "year")]int? year, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ReturningProduction>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"conference\" : \"conference\",\n  \"totalReceivingPPA\" : 4.145608029883936,\n  \"usage\" : 1.2315135367772556,\n  \"percentPassingPPA\" : 1.4658129805029452,\n  \"totalPPA\" : 3.616076749251911,\n  \"team\" : \"team\",\n  \"rushingUsage\" : 7.061401241503109,\n  \"percentPPA\" : 6.027456183070403,\n  \"totalPassingPPA\" : 2.027123023002322,\n  \"percentReceivingPPA\" : 5.962133916683182,\n  \"season\" : 9,\n  \"percentRushingPPA\" : 5.637376656633329,\n  \"passingUsage\" : 0.8008281904610115,\n  \"totalRushingPPA\" : 7.386281948385884,\n  \"receivingUsage\" : 2.3021358869347655\n}, {\n  \"conference\" : \"conference\",\n  \"totalReceivingPPA\" : 4.145608029883936,\n  \"usage\" : 1.2315135367772556,\n  \"percentPassingPPA\" : 1.4658129805029452,\n  \"totalPPA\" : 3.616076749251911,\n  \"team\" : \"team\",\n  \"rushingUsage\" : 7.061401241503109,\n  \"percentPPA\" : 6.027456183070403,\n  \"totalPassingPPA\" : 2.027123023002322,\n  \"percentReceivingPPA\" : 5.962133916683182,\n  \"season\" : 9,\n  \"percentRushingPPA\" : 5.637376656633329,\n  \"passingUsage\" : 0.8008281904610115,\n  \"totalRushingPPA\" : 7.386281948385884,\n  \"receivingUsage\" : 2.3021358869347655\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ReturningProduction>>(exampleJson)
            : default(List<ReturningProduction>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Transfer portal by season
        /// </summary>
        /// <remarks>Transfer portal by season</remarks>
        /// <param name="year">Year filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/player/portal")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetTransferPortal")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PortalPlayer>), description: "successful operation")]
        public virtual IActionResult GetTransferPortal([FromQuery (Name = "year")][Required()]int year)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PortalPlayer>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"firstName\" : \"firstName\",\n  \"lastName\" : \"lastName\",\n  \"origin\" : \"origin\",\n  \"destination\" : \"destination\",\n  \"rating\" : 0.8008281904610115,\n  \"eligibility\" : \"eligibility\",\n  \"season\" : 6,\n  \"position\" : \"position\",\n  \"stars\" : 1,\n  \"transferDate\" : \"transferDate\"\n}, {\n  \"firstName\" : \"firstName\",\n  \"lastName\" : \"lastName\",\n  \"origin\" : \"origin\",\n  \"destination\" : \"destination\",\n  \"rating\" : 0.8008281904610115,\n  \"eligibility\" : \"eligibility\",\n  \"season\" : 6,\n  \"position\" : \"position\",\n  \"stars\" : 1,\n  \"transferDate\" : \"transferDate\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PortalPlayer>>(exampleJson)
            : default(List<PortalPlayer>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Search for player information
        /// </summary>
        /// <remarks>Search for players</remarks>
        /// <param name="searchTerm">Term to search on</param>
        /// <param name="position">Position abbreviation filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="year">Year filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/player/search")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("PlayerSearch")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlayerSearchResult>), description: "successful operation")]
        public virtual IActionResult PlayerSearch([FromQuery (Name = "searchTerm")][Required()]string searchTerm, [FromQuery (Name = "position")]string position, [FromQuery (Name = "team")]string team, [FromQuery (Name = "year")]int? year)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlayerSearchResult>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"firstName\" : \"firstName\",\n  \"lastName\" : \"lastName\",\n  \"hometown\" : \"hometown\",\n  \"jersey\" : 1,\n  \"name\" : \"name\",\n  \"weight\" : 5,\n  \"id\" : 6,\n  \"position\" : \"position\",\n  \"team\" : \"team\",\n  \"teamColorSecondary\" : \"teamColorSecondary\",\n  \"height\" : 0,\n  \"teamColor\" : \"teamColor\"\n}, {\n  \"firstName\" : \"firstName\",\n  \"lastName\" : \"lastName\",\n  \"hometown\" : \"hometown\",\n  \"jersey\" : 1,\n  \"name\" : \"name\",\n  \"weight\" : 5,\n  \"id\" : 6,\n  \"position\" : \"position\",\n  \"team\" : \"team\",\n  \"teamColorSecondary\" : \"teamColorSecondary\",\n  \"height\" : 0,\n  \"teamColor\" : \"teamColor\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PlayerSearchResult>>(exampleJson)
            : default(List<PlayerSearchResult>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
