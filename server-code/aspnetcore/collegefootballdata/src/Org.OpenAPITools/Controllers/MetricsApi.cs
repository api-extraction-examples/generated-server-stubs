/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MetricsApiController : ControllerBase
    { 
        /// <summary>
        /// Team Predicated Points Added (PPA/EPA) by game
        /// </summary>
        /// <remarks>Predicted Points Added (PPA) by game</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">Conference filter</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
        /// <param name="seasonType">Season type filter (regular or postseason)</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/ppa/games")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetGamePPA")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GamePPA>), description: "successful operation")]
        public virtual IActionResult GetGamePPA([FromQuery (Name = "year")][Required()]int year, [FromQuery (Name = "week")][Range(1, 16)]int? week, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "excludeGarbageTime")]bool? excludeGarbageTime, [FromQuery (Name = "seasonType")]string seasonType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GamePPA>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"gameId\" : 7,\n  \"conference\" : \"conference\",\n  \"week\" : 3,\n  \"offense\" : {\n    \"firstDown\" : 0.8008281904610115,\n    \"rushing\" : 5.962133916683182,\n    \"overall\" : 6.027456183070403,\n    \"secondDown\" : 5.637376656633329,\n    \"passing\" : 1.4658129805029452,\n    \"thirdDown\" : 2.3021358869347655\n  },\n  \"defense\" : {\n    \"firstDown\" : 0.8008281904610115,\n    \"rushing\" : 5.962133916683182,\n    \"overall\" : 6.027456183070403,\n    \"secondDown\" : 5.637376656633329,\n    \"passing\" : 1.4658129805029452,\n    \"thirdDown\" : 2.3021358869347655\n  },\n  \"opponent\" : \"opponent\",\n  \"season\" : 9,\n  \"team\" : \"team\"\n}, {\n  \"gameId\" : 7,\n  \"conference\" : \"conference\",\n  \"week\" : 3,\n  \"offense\" : {\n    \"firstDown\" : 0.8008281904610115,\n    \"rushing\" : 5.962133916683182,\n    \"overall\" : 6.027456183070403,\n    \"secondDown\" : 5.637376656633329,\n    \"passing\" : 1.4658129805029452,\n    \"thirdDown\" : 2.3021358869347655\n  },\n  \"defense\" : {\n    \"firstDown\" : 0.8008281904610115,\n    \"rushing\" : 5.962133916683182,\n    \"overall\" : 6.027456183070403,\n    \"secondDown\" : 5.637376656633329,\n    \"passing\" : 1.4658129805029452,\n    \"thirdDown\" : 2.3021358869347655\n  },\n  \"opponent\" : \"opponent\",\n  \"season\" : 9,\n  \"team\" : \"team\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<GamePPA>>(exampleJson)
            : default(List<GamePPA>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by game
        /// </summary>
        /// <remarks>Predicted Points Added (PPA) by player game</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="position">Position abbreviation filter</param>
        /// <param name="playerId">Player id filter</param>
        /// <param name="threshold">Minimum play threshold filter</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
        /// <param name="seasonType">Season type filter (regular or postseason)</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/ppa/players/games")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPlayerGamePPA")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlayerGamePPA>), description: "successful operation")]
        public virtual IActionResult GetPlayerGamePPA([FromQuery (Name = "year")]int? year, [FromQuery (Name = "week")][Range(1, 16)]int? week, [FromQuery (Name = "team")]string team, [FromQuery (Name = "position")]string position, [FromQuery (Name = "playerId")]int? playerId, [FromQuery (Name = "threshold")]string threshold, [FromQuery (Name = "excludeGarbageTime")]bool? excludeGarbageTime, [FromQuery (Name = "seasonType")]string seasonType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlayerGamePPA>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"week\" : 5,\n  \"opponent\" : \"opponent\",\n  \"averagePPA\" : {\n    \"all\" : 0.8008281904610115,\n    \"pass\" : 6.027456183070403,\n    \"rush\" : 1.4658129805029452\n  },\n  \"name\" : \"name\",\n  \"season\" : 5,\n  \"position\" : \"position\",\n  \"team\" : \"team\"\n}, {\n  \"week\" : 5,\n  \"opponent\" : \"opponent\",\n  \"averagePPA\" : {\n    \"all\" : 0.8008281904610115,\n    \"pass\" : 6.027456183070403,\n    \"rush\" : 1.4658129805029452\n  },\n  \"name\" : \"name\",\n  \"season\" : 5,\n  \"position\" : \"position\",\n  \"team\" : \"team\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PlayerGamePPA>>(exampleJson)
            : default(List<PlayerGamePPA>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Player Predicated Points Added (PPA/EPA) broken down by season
        /// </summary>
        /// <remarks>Predicted Points Added (PPA) by player season</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="conference">Conference abbreviation filter</param>
        /// <param name="position">Position abbreviation filter</param>
        /// <param name="playerId">Player id filter</param>
        /// <param name="threshold">Minimum play threshold filter</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/ppa/players/season")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPlayerSeasonPPA")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlayerSeasonPPA>), description: "successful operation")]
        public virtual IActionResult GetPlayerSeasonPPA([FromQuery (Name = "year")]int? year, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "position")]string position, [FromQuery (Name = "playerId")]int? playerId, [FromQuery (Name = "threshold")]string threshold, [FromQuery (Name = "excludeGarbageTime")]bool? excludeGarbageTime)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlayerSeasonPPA>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"conference\" : \"conference\",\n  \"averagePPA\" : {\n    \"all\" : 0.8008281904610115,\n    \"firstDown\" : 6.027456183070403,\n    \"pass\" : 1.4658129805029452,\n    \"standardDowns\" : 7.061401241503109,\n    \"passingDowns\" : 5.962133916683182,\n    \"secondDown\" : 2.3021358869347655,\n    \"thirdDown\" : 9.301444243932576,\n    \"rush\" : 5.637376656633329\n  },\n  \"name\" : \"name\",\n  \"season\" : 2,\n  \"totalPPA\" : {\n    \"all\" : 0.8008281904610115,\n    \"firstDown\" : 6.027456183070403,\n    \"pass\" : 1.4658129805029452,\n    \"standardDowns\" : 7.061401241503109,\n    \"passingDowns\" : 5.962133916683182,\n    \"secondDown\" : 2.3021358869347655,\n    \"thirdDown\" : 9.301444243932576,\n    \"rush\" : 5.637376656633329\n  },\n  \"id\" : 3,\n  \"position\" : \"position\",\n  \"team\" : \"team\"\n}, {\n  \"conference\" : \"conference\",\n  \"averagePPA\" : {\n    \"all\" : 0.8008281904610115,\n    \"firstDown\" : 6.027456183070403,\n    \"pass\" : 1.4658129805029452,\n    \"standardDowns\" : 7.061401241503109,\n    \"passingDowns\" : 5.962133916683182,\n    \"secondDown\" : 2.3021358869347655,\n    \"thirdDown\" : 9.301444243932576,\n    \"rush\" : 5.637376656633329\n  },\n  \"name\" : \"name\",\n  \"season\" : 2,\n  \"totalPPA\" : {\n    \"all\" : 0.8008281904610115,\n    \"firstDown\" : 6.027456183070403,\n    \"pass\" : 1.4658129805029452,\n    \"standardDowns\" : 7.061401241503109,\n    \"passingDowns\" : 5.962133916683182,\n    \"secondDown\" : 2.3021358869347655,\n    \"thirdDown\" : 9.301444243932576,\n    \"rush\" : 5.637376656633329\n  },\n  \"id\" : 3,\n  \"position\" : \"position\",\n  \"team\" : \"team\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PlayerSeasonPPA>>(exampleJson)
            : default(List<PlayerSeasonPPA>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Predicted Points (i.e. Expected Points or EP)
        /// </summary>
        /// <remarks>Predicted Points</remarks>
        /// <param name="down">Down filter</param>
        /// <param name="distance">Distance filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/ppa/predicted")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPredictedPoints")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PredictedPoints>), description: "successful operation")]
        public virtual IActionResult GetPredictedPoints([FromQuery (Name = "down")][Required()][Range(1, 4)]int down, [FromQuery (Name = "distance")][Required()][Range(1, 99)]int distance)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PredictedPoints>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"yardLine\" : 6,\n  \"predictedPoints\" : 0.8008281904610115\n}, {\n  \"yardLine\" : 6,\n  \"predictedPoints\" : 0.8008281904610115\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PredictedPoints>>(exampleJson)
            : default(List<PredictedPoints>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Pregame win probability data
        /// </summary>
        /// <remarks>Pregame win probabilities</remarks>
        /// <param name="year">Year filter</param>
        /// <param name="week">Week filter</param>
        /// <param name="team">Team filter</param>
        /// <param name="seasonType">regular or postseason</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/metrics/wp/pregame")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetPregameWinProbabilities")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PregameWP>), description: "successful operation")]
        public virtual IActionResult GetPregameWinProbabilities([FromQuery (Name = "year")]int? year, [FromQuery (Name = "week")][Range(1, 16)]int? week, [FromQuery (Name = "team")]string team, [FromQuery (Name = "seasonType")]string seasonType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PregameWP>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"gameId\" : 0,\n  \"seasonType\" : \"seasonType\",\n  \"week\" : 5,\n  \"awayTeam\" : \"awayTeam\",\n  \"homeTeam\" : \"homeTeam\",\n  \"season\" : 1,\n  \"homeWinProb\" : 6.027456183070403,\n  \"spread\" : 5.962133916683182\n}, {\n  \"gameId\" : 0,\n  \"seasonType\" : \"seasonType\",\n  \"week\" : 5,\n  \"awayTeam\" : \"awayTeam\",\n  \"homeTeam\" : \"homeTeam\",\n  \"season\" : 1,\n  \"homeWinProb\" : 6.027456183070403,\n  \"spread\" : 5.962133916683182\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PregameWP>>(exampleJson)
            : default(List<PregameWP>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Predicted Points Added (PPA/EPA) data by team
        /// </summary>
        /// <remarks>Predicted Points Added (PPA)</remarks>
        /// <param name="year">Year filter (required if team not specified)</param>
        /// <param name="team">Team filter (required if year not specified)</param>
        /// <param name="conference">Conference filter</param>
        /// <param name="excludeGarbageTime">Filter to remove garbage time plays from calculations</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/ppa/teams")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetTeamPPA")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TeamPPA>), description: "successful operation")]
        public virtual IActionResult GetTeamPPA([FromQuery (Name = "year")]int? year, [FromQuery (Name = "team")]string team, [FromQuery (Name = "conference")]string conference, [FromQuery (Name = "excludeGarbageTime")]bool? excludeGarbageTime)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TeamPPA>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"conference\" : \"conference\",\n  \"offense\" : {\n    \"firstDown\" : 5.962133916683182,\n    \"rushing\" : 7.061401241503109,\n    \"overall\" : 5.637376656633329,\n    \"secondDown\" : 9.301444243932576,\n    \"passing\" : 2.3021358869347655,\n    \"cumulative\" : {\n      \"total\" : 1.4658129805029452,\n      \"rushing\" : 6.027456183070403,\n      \"passing\" : 0.8008281904610115\n    },\n    \"thirdDown\" : 3.616076749251911\n  },\n  \"defense\" : {\n    \"firstDown\" : 5.962133916683182,\n    \"rushing\" : 7.061401241503109,\n    \"overall\" : 5.637376656633329,\n    \"secondDown\" : 9.301444243932576,\n    \"passing\" : 2.3021358869347655,\n    \"cumulative\" : {\n      \"total\" : 1.4658129805029452,\n      \"rushing\" : 6.027456183070403,\n      \"passing\" : 0.8008281904610115\n    },\n    \"thirdDown\" : 3.616076749251911\n  },\n  \"season\" : 2,\n  \"team\" : \"team\"\n}, {\n  \"conference\" : \"conference\",\n  \"offense\" : {\n    \"firstDown\" : 5.962133916683182,\n    \"rushing\" : 7.061401241503109,\n    \"overall\" : 5.637376656633329,\n    \"secondDown\" : 9.301444243932576,\n    \"passing\" : 2.3021358869347655,\n    \"cumulative\" : {\n      \"total\" : 1.4658129805029452,\n      \"rushing\" : 6.027456183070403,\n      \"passing\" : 0.8008281904610115\n    },\n    \"thirdDown\" : 3.616076749251911\n  },\n  \"defense\" : {\n    \"firstDown\" : 5.962133916683182,\n    \"rushing\" : 7.061401241503109,\n    \"overall\" : 5.637376656633329,\n    \"secondDown\" : 9.301444243932576,\n    \"passing\" : 2.3021358869347655,\n    \"cumulative\" : {\n      \"total\" : 1.4658129805029452,\n      \"rushing\" : 6.027456183070403,\n      \"passing\" : 0.8008281904610115\n    },\n    \"thirdDown\" : 3.616076749251911\n  },\n  \"season\" : 2,\n  \"team\" : \"team\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TeamPPA>>(exampleJson)
            : default(List<TeamPPA>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Win probability chart data
        /// </summary>
        /// <remarks>Win probability data</remarks>
        /// <param name="gameId">Game id filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">error</response>
        [HttpGet]
        [Route("/metrics/wp")]
        [Authorize(Policy = "ApiKeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("GetWinProbabilityData")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlayWP>), description: "successful operation")]
        public virtual IActionResult GetWinProbabilityData([FromQuery (Name = "gameId")][Required()]int gameId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlayWP>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"homeBall\" : true,\n  \"away\" : \"away\",\n  \"homeScore\" : 7,\n  \"distance\" : 1,\n  \"awayId\" : 0,\n  \"timeRemaining\" : 7,\n  \"gamesId\" : 5,\n  \"homeWinProb\" : 9.301444243932576,\n  \"down\" : 5,\n  \"home\" : \"home\",\n  \"spread\" : 4.145608029883936,\n  \"playId\" : 3,\n  \"awayScore\" : 6,\n  \"yardLine\" : 1,\n  \"playText\" : \"playText\",\n  \"homeId\" : 2,\n  \"playNumber\" : 2\n}, {\n  \"homeBall\" : true,\n  \"away\" : \"away\",\n  \"homeScore\" : 7,\n  \"distance\" : 1,\n  \"awayId\" : 0,\n  \"timeRemaining\" : 7,\n  \"gamesId\" : 5,\n  \"homeWinProb\" : 9.301444243932576,\n  \"down\" : 5,\n  \"home\" : \"home\",\n  \"spread\" : 4.145608029883936,\n  \"playId\" : 3,\n  \"awayScore\" : 6,\n  \"yardLine\" : 1,\n  \"playText\" : \"playText\",\n  \"homeId\" : 2,\n  \"playNumber\" : 2\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PlayWP>>(exampleJson)
            : default(List<PlayWP>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
