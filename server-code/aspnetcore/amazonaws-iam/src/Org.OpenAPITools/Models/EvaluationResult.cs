/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// &lt;p&gt;Contains the results of a simulation.&lt;/p&gt; &lt;p&gt;This data type is used by the return parameter of &lt;code&gt; &lt;a&gt;SimulateCustomPolicy&lt;/a&gt; &lt;/code&gt; and &lt;code&gt; &lt;a&gt;SimulatePrincipalPolicy&lt;/a&gt; &lt;/code&gt;.&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class EvaluationResult : IEquatable<EvaluationResult>
    {
        /// <summary>
        /// Gets or Sets EvalActionName
        /// </summary>
        [Required]
        [DataMember(Name="EvalActionName", EmitDefaultValue=false)]
        public string EvalActionName { get; set; }

        /// <summary>
        /// Gets or Sets EvalResourceName
        /// </summary>
        [DataMember(Name="EvalResourceName", EmitDefaultValue=false)]
        public string EvalResourceName { get; set; }

        /// <summary>
        /// Gets or Sets EvalDecision
        /// </summary>
        [Required]
        [DataMember(Name="EvalDecision", EmitDefaultValue=true)]
        public PolicyEvaluationDecisionType EvalDecision { get; set; }

        /// <summary>
        /// Gets or Sets MatchedStatements
        /// </summary>
        [DataMember(Name="MatchedStatements", EmitDefaultValue=false)]
        public List MatchedStatements { get; set; }

        /// <summary>
        /// Gets or Sets MissingContextValues
        /// </summary>
        [DataMember(Name="MissingContextValues", EmitDefaultValue=false)]
        public List MissingContextValues { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationsDecisionDetail
        /// </summary>
        [DataMember(Name="OrganizationsDecisionDetail", EmitDefaultValue=false)]
        public EvaluationResultOrganizationsDecisionDetail OrganizationsDecisionDetail { get; set; }

        /// <summary>
        /// Gets or Sets PermissionsBoundaryDecisionDetail
        /// </summary>
        [DataMember(Name="PermissionsBoundaryDecisionDetail", EmitDefaultValue=false)]
        public EvaluationResultPermissionsBoundaryDecisionDetail PermissionsBoundaryDecisionDetail { get; set; }

        /// <summary>
        /// Gets or Sets EvalDecisionDetails
        /// </summary>
        [DataMember(Name="EvalDecisionDetails", EmitDefaultValue=false)]
        public Dictionary EvalDecisionDetails { get; set; }

        /// <summary>
        /// Gets or Sets ResourceSpecificResults
        /// </summary>
        [DataMember(Name="ResourceSpecificResults", EmitDefaultValue=false)]
        public List ResourceSpecificResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvaluationResult {\n");
            sb.Append("  EvalActionName: ").Append(EvalActionName).Append("\n");
            sb.Append("  EvalResourceName: ").Append(EvalResourceName).Append("\n");
            sb.Append("  EvalDecision: ").Append(EvalDecision).Append("\n");
            sb.Append("  MatchedStatements: ").Append(MatchedStatements).Append("\n");
            sb.Append("  MissingContextValues: ").Append(MissingContextValues).Append("\n");
            sb.Append("  OrganizationsDecisionDetail: ").Append(OrganizationsDecisionDetail).Append("\n");
            sb.Append("  PermissionsBoundaryDecisionDetail: ").Append(PermissionsBoundaryDecisionDetail).Append("\n");
            sb.Append("  EvalDecisionDetails: ").Append(EvalDecisionDetails).Append("\n");
            sb.Append("  ResourceSpecificResults: ").Append(ResourceSpecificResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EvaluationResult)obj);
        }

        /// <summary>
        /// Returns true if EvaluationResult instances are equal
        /// </summary>
        /// <param name="other">Instance of EvaluationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvaluationResult other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EvalActionName == other.EvalActionName ||
                    EvalActionName != null &&
                    EvalActionName.Equals(other.EvalActionName)
                ) && 
                (
                    EvalResourceName == other.EvalResourceName ||
                    EvalResourceName != null &&
                    EvalResourceName.Equals(other.EvalResourceName)
                ) && 
                (
                    EvalDecision == other.EvalDecision ||
                    
                    EvalDecision.Equals(other.EvalDecision)
                ) && 
                (
                    MatchedStatements == other.MatchedStatements ||
                    MatchedStatements != null &&
                    MatchedStatements.Equals(other.MatchedStatements)
                ) && 
                (
                    MissingContextValues == other.MissingContextValues ||
                    MissingContextValues != null &&
                    MissingContextValues.Equals(other.MissingContextValues)
                ) && 
                (
                    OrganizationsDecisionDetail == other.OrganizationsDecisionDetail ||
                    OrganizationsDecisionDetail != null &&
                    OrganizationsDecisionDetail.Equals(other.OrganizationsDecisionDetail)
                ) && 
                (
                    PermissionsBoundaryDecisionDetail == other.PermissionsBoundaryDecisionDetail ||
                    PermissionsBoundaryDecisionDetail != null &&
                    PermissionsBoundaryDecisionDetail.Equals(other.PermissionsBoundaryDecisionDetail)
                ) && 
                (
                    EvalDecisionDetails == other.EvalDecisionDetails ||
                    EvalDecisionDetails != null &&
                    EvalDecisionDetails.Equals(other.EvalDecisionDetails)
                ) && 
                (
                    ResourceSpecificResults == other.ResourceSpecificResults ||
                    ResourceSpecificResults != null &&
                    ResourceSpecificResults.Equals(other.ResourceSpecificResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EvalActionName != null)
                    hashCode = hashCode * 59 + EvalActionName.GetHashCode();
                    if (EvalResourceName != null)
                    hashCode = hashCode * 59 + EvalResourceName.GetHashCode();
                    
                    hashCode = hashCode * 59 + EvalDecision.GetHashCode();
                    if (MatchedStatements != null)
                    hashCode = hashCode * 59 + MatchedStatements.GetHashCode();
                    if (MissingContextValues != null)
                    hashCode = hashCode * 59 + MissingContextValues.GetHashCode();
                    if (OrganizationsDecisionDetail != null)
                    hashCode = hashCode * 59 + OrganizationsDecisionDetail.GetHashCode();
                    if (PermissionsBoundaryDecisionDetail != null)
                    hashCode = hashCode * 59 + PermissionsBoundaryDecisionDetail.GetHashCode();
                    if (EvalDecisionDetails != null)
                    hashCode = hashCode * 59 + EvalDecisionDetails.GetHashCode();
                    if (ResourceSpecificResults != null)
                    hashCode = hashCode * 59 + ResourceSpecificResults.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EvaluationResult left, EvaluationResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EvaluationResult left, EvaluationResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
