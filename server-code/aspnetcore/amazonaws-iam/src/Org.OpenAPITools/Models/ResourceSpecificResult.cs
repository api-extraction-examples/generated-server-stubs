/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// &lt;p&gt;Contains the result of the simulation of a single API operation call on a single resource.&lt;/p&gt; &lt;p&gt;This data type is used by a member of the &lt;a&gt;EvaluationResult&lt;/a&gt; data type.&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class ResourceSpecificResult : IEquatable<ResourceSpecificResult>
    {
        /// <summary>
        /// Gets or Sets EvalResourceName
        /// </summary>
        [Required]
        [DataMember(Name="EvalResourceName", EmitDefaultValue=false)]
        public string EvalResourceName { get; set; }

        /// <summary>
        /// Gets or Sets EvalResourceDecision
        /// </summary>
        [Required]
        [DataMember(Name="EvalResourceDecision", EmitDefaultValue=true)]
        public PolicyEvaluationDecisionType EvalResourceDecision { get; set; }

        /// <summary>
        /// Gets or Sets MatchedStatements
        /// </summary>
        [DataMember(Name="MatchedStatements", EmitDefaultValue=false)]
        public List MatchedStatements { get; set; }

        /// <summary>
        /// Gets or Sets MissingContextValues
        /// </summary>
        [DataMember(Name="MissingContextValues", EmitDefaultValue=false)]
        public List MissingContextValues { get; set; }

        /// <summary>
        /// Gets or Sets EvalDecisionDetails
        /// </summary>
        [DataMember(Name="EvalDecisionDetails", EmitDefaultValue=false)]
        public Dictionary EvalDecisionDetails { get; set; }

        /// <summary>
        /// Gets or Sets PermissionsBoundaryDecisionDetail
        /// </summary>
        [DataMember(Name="PermissionsBoundaryDecisionDetail", EmitDefaultValue=false)]
        public ResourceSpecificResultPermissionsBoundaryDecisionDetail PermissionsBoundaryDecisionDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourceSpecificResult {\n");
            sb.Append("  EvalResourceName: ").Append(EvalResourceName).Append("\n");
            sb.Append("  EvalResourceDecision: ").Append(EvalResourceDecision).Append("\n");
            sb.Append("  MatchedStatements: ").Append(MatchedStatements).Append("\n");
            sb.Append("  MissingContextValues: ").Append(MissingContextValues).Append("\n");
            sb.Append("  EvalDecisionDetails: ").Append(EvalDecisionDetails).Append("\n");
            sb.Append("  PermissionsBoundaryDecisionDetail: ").Append(PermissionsBoundaryDecisionDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResourceSpecificResult)obj);
        }

        /// <summary>
        /// Returns true if ResourceSpecificResult instances are equal
        /// </summary>
        /// <param name="other">Instance of ResourceSpecificResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceSpecificResult other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EvalResourceName == other.EvalResourceName ||
                    EvalResourceName != null &&
                    EvalResourceName.Equals(other.EvalResourceName)
                ) && 
                (
                    EvalResourceDecision == other.EvalResourceDecision ||
                    
                    EvalResourceDecision.Equals(other.EvalResourceDecision)
                ) && 
                (
                    MatchedStatements == other.MatchedStatements ||
                    MatchedStatements != null &&
                    MatchedStatements.Equals(other.MatchedStatements)
                ) && 
                (
                    MissingContextValues == other.MissingContextValues ||
                    MissingContextValues != null &&
                    MissingContextValues.Equals(other.MissingContextValues)
                ) && 
                (
                    EvalDecisionDetails == other.EvalDecisionDetails ||
                    EvalDecisionDetails != null &&
                    EvalDecisionDetails.Equals(other.EvalDecisionDetails)
                ) && 
                (
                    PermissionsBoundaryDecisionDetail == other.PermissionsBoundaryDecisionDetail ||
                    PermissionsBoundaryDecisionDetail != null &&
                    PermissionsBoundaryDecisionDetail.Equals(other.PermissionsBoundaryDecisionDetail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EvalResourceName != null)
                    hashCode = hashCode * 59 + EvalResourceName.GetHashCode();
                    
                    hashCode = hashCode * 59 + EvalResourceDecision.GetHashCode();
                    if (MatchedStatements != null)
                    hashCode = hashCode * 59 + MatchedStatements.GetHashCode();
                    if (MissingContextValues != null)
                    hashCode = hashCode * 59 + MissingContextValues.GetHashCode();
                    if (EvalDecisionDetails != null)
                    hashCode = hashCode * 59 + EvalDecisionDetails.GetHashCode();
                    if (PermissionsBoundaryDecisionDetail != null)
                    hashCode = hashCode * 59 + PermissionsBoundaryDecisionDetail.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ResourceSpecificResult left, ResourceSpecificResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResourceSpecificResult left, ResourceSpecificResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
