/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SimulateCustomPolicyRequest : IEquatable<SimulateCustomPolicyRequest>
    {
        /// <summary>
        /// Gets or Sets PolicyInputList
        /// </summary>
        [Required]
        [DataMember(Name="PolicyInputList", EmitDefaultValue=false)]
        public List PolicyInputList { get; set; }

        /// <summary>
        /// Gets or Sets PermissionsBoundaryPolicyInputList
        /// </summary>
        [DataMember(Name="PermissionsBoundaryPolicyInputList", EmitDefaultValue=false)]
        public List PermissionsBoundaryPolicyInputList { get; set; }

        /// <summary>
        /// Gets or Sets ActionNames
        /// </summary>
        [Required]
        [DataMember(Name="ActionNames", EmitDefaultValue=false)]
        public List ActionNames { get; set; }

        /// <summary>
        /// Gets or Sets ResourceArns
        /// </summary>
        [DataMember(Name="ResourceArns", EmitDefaultValue=false)]
        public List ResourceArns { get; set; }

        /// <summary>
        /// Gets or Sets ResourcePolicy
        /// </summary>
        [DataMember(Name="ResourcePolicy", EmitDefaultValue=false)]
        public string ResourcePolicy { get; set; }

        /// <summary>
        /// Gets or Sets ResourceOwner
        /// </summary>
        [DataMember(Name="ResourceOwner", EmitDefaultValue=false)]
        public string ResourceOwner { get; set; }

        /// <summary>
        /// Gets or Sets CallerArn
        /// </summary>
        [DataMember(Name="CallerArn", EmitDefaultValue=false)]
        public string CallerArn { get; set; }

        /// <summary>
        /// Gets or Sets ContextEntries
        /// </summary>
        [DataMember(Name="ContextEntries", EmitDefaultValue=false)]
        public List ContextEntries { get; set; }

        /// <summary>
        /// Gets or Sets ResourceHandlingOption
        /// </summary>
        [DataMember(Name="ResourceHandlingOption", EmitDefaultValue=false)]
        public string ResourceHandlingOption { get; set; }

        /// <summary>
        /// Gets or Sets MaxItems
        /// </summary>
        [DataMember(Name="MaxItems", EmitDefaultValue=true)]
        public int MaxItems { get; set; }

        /// <summary>
        /// Gets or Sets Marker
        /// </summary>
        [DataMember(Name="Marker", EmitDefaultValue=false)]
        public string Marker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimulateCustomPolicyRequest {\n");
            sb.Append("  PolicyInputList: ").Append(PolicyInputList).Append("\n");
            sb.Append("  PermissionsBoundaryPolicyInputList: ").Append(PermissionsBoundaryPolicyInputList).Append("\n");
            sb.Append("  ActionNames: ").Append(ActionNames).Append("\n");
            sb.Append("  ResourceArns: ").Append(ResourceArns).Append("\n");
            sb.Append("  ResourcePolicy: ").Append(ResourcePolicy).Append("\n");
            sb.Append("  ResourceOwner: ").Append(ResourceOwner).Append("\n");
            sb.Append("  CallerArn: ").Append(CallerArn).Append("\n");
            sb.Append("  ContextEntries: ").Append(ContextEntries).Append("\n");
            sb.Append("  ResourceHandlingOption: ").Append(ResourceHandlingOption).Append("\n");
            sb.Append("  MaxItems: ").Append(MaxItems).Append("\n");
            sb.Append("  Marker: ").Append(Marker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SimulateCustomPolicyRequest)obj);
        }

        /// <summary>
        /// Returns true if SimulateCustomPolicyRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SimulateCustomPolicyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulateCustomPolicyRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PolicyInputList == other.PolicyInputList ||
                    PolicyInputList != null &&
                    PolicyInputList.Equals(other.PolicyInputList)
                ) && 
                (
                    PermissionsBoundaryPolicyInputList == other.PermissionsBoundaryPolicyInputList ||
                    PermissionsBoundaryPolicyInputList != null &&
                    PermissionsBoundaryPolicyInputList.Equals(other.PermissionsBoundaryPolicyInputList)
                ) && 
                (
                    ActionNames == other.ActionNames ||
                    ActionNames != null &&
                    ActionNames.Equals(other.ActionNames)
                ) && 
                (
                    ResourceArns == other.ResourceArns ||
                    ResourceArns != null &&
                    ResourceArns.Equals(other.ResourceArns)
                ) && 
                (
                    ResourcePolicy == other.ResourcePolicy ||
                    ResourcePolicy != null &&
                    ResourcePolicy.Equals(other.ResourcePolicy)
                ) && 
                (
                    ResourceOwner == other.ResourceOwner ||
                    ResourceOwner != null &&
                    ResourceOwner.Equals(other.ResourceOwner)
                ) && 
                (
                    CallerArn == other.CallerArn ||
                    CallerArn != null &&
                    CallerArn.Equals(other.CallerArn)
                ) && 
                (
                    ContextEntries == other.ContextEntries ||
                    ContextEntries != null &&
                    ContextEntries.Equals(other.ContextEntries)
                ) && 
                (
                    ResourceHandlingOption == other.ResourceHandlingOption ||
                    ResourceHandlingOption != null &&
                    ResourceHandlingOption.Equals(other.ResourceHandlingOption)
                ) && 
                (
                    MaxItems == other.MaxItems ||
                    
                    MaxItems.Equals(other.MaxItems)
                ) && 
                (
                    Marker == other.Marker ||
                    Marker != null &&
                    Marker.Equals(other.Marker)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PolicyInputList != null)
                    hashCode = hashCode * 59 + PolicyInputList.GetHashCode();
                    if (PermissionsBoundaryPolicyInputList != null)
                    hashCode = hashCode * 59 + PermissionsBoundaryPolicyInputList.GetHashCode();
                    if (ActionNames != null)
                    hashCode = hashCode * 59 + ActionNames.GetHashCode();
                    if (ResourceArns != null)
                    hashCode = hashCode * 59 + ResourceArns.GetHashCode();
                    if (ResourcePolicy != null)
                    hashCode = hashCode * 59 + ResourcePolicy.GetHashCode();
                    if (ResourceOwner != null)
                    hashCode = hashCode * 59 + ResourceOwner.GetHashCode();
                    if (CallerArn != null)
                    hashCode = hashCode * 59 + CallerArn.GetHashCode();
                    if (ContextEntries != null)
                    hashCode = hashCode * 59 + ContextEntries.GetHashCode();
                    if (ResourceHandlingOption != null)
                    hashCode = hashCode * 59 + ResourceHandlingOption.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaxItems.GetHashCode();
                    if (Marker != null)
                    hashCode = hashCode * 59 + Marker.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SimulateCustomPolicyRequest left, SimulateCustomPolicyRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SimulateCustomPolicyRequest left, SimulateCustomPolicyRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
