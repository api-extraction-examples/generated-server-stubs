/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// &lt;p&gt;Contains information about an IAM role, including all of the role&#39;s policies.&lt;/p&gt; &lt;p&gt;This data type is used as a response element in the &lt;a&gt;GetAccountAuthorizationDetails&lt;/a&gt; operation.&lt;/p&gt;
    /// </summary>
    [DataContract]
    public partial class RoleDetail : IEquatable<RoleDetail>
    {
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets RoleName
        /// </summary>
        [DataMember(Name="RoleName", EmitDefaultValue=false)]
        public string RoleName { get; set; }

        /// <summary>
        /// Gets or Sets RoleId
        /// </summary>
        [DataMember(Name="RoleId", EmitDefaultValue=false)]
        public string RoleId { get; set; }

        /// <summary>
        /// &lt;p&gt;The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.&lt;/p&gt; &lt;p&gt;For more information about ARNs, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;. &lt;/p&gt;
        /// </summary>
        /// <value>&lt;p&gt;The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.&lt;/p&gt; &lt;p&gt;For more information about ARNs, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;. &lt;/p&gt;</value>
        [StringLength(2048, MinimumLength=20)]
        [DataMember(Name="Arn", EmitDefaultValue=false)]
        public string Arn { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="CreateDate", EmitDefaultValue=false)]
        public DateTime CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets AssumeRolePolicyDocument
        /// </summary>
        [DataMember(Name="AssumeRolePolicyDocument", EmitDefaultValue=false)]
        public string AssumeRolePolicyDocument { get; set; }

        /// <summary>
        /// Gets or Sets InstanceProfileList
        /// </summary>
        [DataMember(Name="InstanceProfileList", EmitDefaultValue=false)]
        public List InstanceProfileList { get; set; }

        /// <summary>
        /// Gets or Sets RolePolicyList
        /// </summary>
        [DataMember(Name="RolePolicyList", EmitDefaultValue=false)]
        public List RolePolicyList { get; set; }

        /// <summary>
        /// Gets or Sets AttachedManagedPolicies
        /// </summary>
        [DataMember(Name="AttachedManagedPolicies", EmitDefaultValue=false)]
        public List AttachedManagedPolicies { get; set; }

        /// <summary>
        /// Gets or Sets PermissionsBoundary
        /// </summary>
        [DataMember(Name="PermissionsBoundary", EmitDefaultValue=false)]
        public RolePermissionsBoundary PermissionsBoundary { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="Tags", EmitDefaultValue=false)]
        public List Tags { get; set; }

        /// <summary>
        /// Gets or Sets RoleLastUsed
        /// </summary>
        [DataMember(Name="RoleLastUsed", EmitDefaultValue=false)]
        public RoleDetailRoleLastUsed RoleLastUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RoleDetail {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  Arn: ").Append(Arn).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  AssumeRolePolicyDocument: ").Append(AssumeRolePolicyDocument).Append("\n");
            sb.Append("  InstanceProfileList: ").Append(InstanceProfileList).Append("\n");
            sb.Append("  RolePolicyList: ").Append(RolePolicyList).Append("\n");
            sb.Append("  AttachedManagedPolicies: ").Append(AttachedManagedPolicies).Append("\n");
            sb.Append("  PermissionsBoundary: ").Append(PermissionsBoundary).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  RoleLastUsed: ").Append(RoleLastUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RoleDetail)obj);
        }

        /// <summary>
        /// Returns true if RoleDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of RoleDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoleDetail other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    RoleName == other.RoleName ||
                    RoleName != null &&
                    RoleName.Equals(other.RoleName)
                ) && 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    Arn == other.Arn ||
                    Arn != null &&
                    Arn.Equals(other.Arn)
                ) && 
                (
                    CreateDate == other.CreateDate ||
                    CreateDate != null &&
                    CreateDate.Equals(other.CreateDate)
                ) && 
                (
                    AssumeRolePolicyDocument == other.AssumeRolePolicyDocument ||
                    AssumeRolePolicyDocument != null &&
                    AssumeRolePolicyDocument.Equals(other.AssumeRolePolicyDocument)
                ) && 
                (
                    InstanceProfileList == other.InstanceProfileList ||
                    InstanceProfileList != null &&
                    InstanceProfileList.Equals(other.InstanceProfileList)
                ) && 
                (
                    RolePolicyList == other.RolePolicyList ||
                    RolePolicyList != null &&
                    RolePolicyList.Equals(other.RolePolicyList)
                ) && 
                (
                    AttachedManagedPolicies == other.AttachedManagedPolicies ||
                    AttachedManagedPolicies != null &&
                    AttachedManagedPolicies.Equals(other.AttachedManagedPolicies)
                ) && 
                (
                    PermissionsBoundary == other.PermissionsBoundary ||
                    PermissionsBoundary != null &&
                    PermissionsBoundary.Equals(other.PermissionsBoundary)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.Equals(other.Tags)
                ) && 
                (
                    RoleLastUsed == other.RoleLastUsed ||
                    RoleLastUsed != null &&
                    RoleLastUsed.Equals(other.RoleLastUsed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (RoleName != null)
                    hashCode = hashCode * 59 + RoleName.GetHashCode();
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (Arn != null)
                    hashCode = hashCode * 59 + Arn.GetHashCode();
                    if (CreateDate != null)
                    hashCode = hashCode * 59 + CreateDate.GetHashCode();
                    if (AssumeRolePolicyDocument != null)
                    hashCode = hashCode * 59 + AssumeRolePolicyDocument.GetHashCode();
                    if (InstanceProfileList != null)
                    hashCode = hashCode * 59 + InstanceProfileList.GetHashCode();
                    if (RolePolicyList != null)
                    hashCode = hashCode * 59 + RolePolicyList.GetHashCode();
                    if (AttachedManagedPolicies != null)
                    hashCode = hashCode * 59 + AttachedManagedPolicies.GetHashCode();
                    if (PermissionsBoundary != null)
                    hashCode = hashCode * 59 + PermissionsBoundary.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (RoleLastUsed != null)
                    hashCode = hashCode * 59 + RoleLastUsed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RoleDetail left, RoleDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RoleDetail left, RoleDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
