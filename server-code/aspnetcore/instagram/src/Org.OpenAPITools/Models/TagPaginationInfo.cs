/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TagPaginationInfo : IEquatable<TagPaginationInfo>
    {
        /// <summary>
        /// The deprication warning, if information is available
        /// </summary>
        /// <value>The deprication warning, if information is available</value>
        [DataMember(Name="deprecation_warning", EmitDefaultValue=false)]
        public string DeprecationWarning { get; set; }

        /// <summary>
        /// The min ID of a tag for the next page
        /// </summary>
        /// <value>The min ID of a tag for the next page</value>
        [DataMember(Name="min_tag_id", EmitDefaultValue=false)]
        public string MinTagId { get; set; }

        /// <summary>
        /// Depricated. Use min_tag_id instead
        /// </summary>
        /// <value>Depricated. Use min_tag_id instead</value>
        [DataMember(Name="next_max_id", EmitDefaultValue=false)]
        public string NextMaxId { get; set; }

        /// <summary>
        /// The max ID of a tag for the next page
        /// </summary>
        /// <value>The max ID of a tag for the next page</value>
        [DataMember(Name="next_max_tag_id", EmitDefaultValue=false)]
        public string NextMaxTagId { get; set; }

        /// <summary>
        /// Depricated. Use max_tag_id instead
        /// </summary>
        /// <value>Depricated. Use max_tag_id instead</value>
        [DataMember(Name="next_min_id", EmitDefaultValue=false)]
        public string NextMinId { get; set; }

        /// <summary>
        /// URL to retrieve next page of entries
        /// </summary>
        /// <value>URL to retrieve next page of entries</value>
        [DataMember(Name="next_url", EmitDefaultValue=false)]
        public string NextUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TagPaginationInfo {\n");
            sb.Append("  DeprecationWarning: ").Append(DeprecationWarning).Append("\n");
            sb.Append("  MinTagId: ").Append(MinTagId).Append("\n");
            sb.Append("  NextMaxId: ").Append(NextMaxId).Append("\n");
            sb.Append("  NextMaxTagId: ").Append(NextMaxTagId).Append("\n");
            sb.Append("  NextMinId: ").Append(NextMinId).Append("\n");
            sb.Append("  NextUrl: ").Append(NextUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TagPaginationInfo)obj);
        }

        /// <summary>
        /// Returns true if TagPaginationInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of TagPaginationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TagPaginationInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DeprecationWarning == other.DeprecationWarning ||
                    DeprecationWarning != null &&
                    DeprecationWarning.Equals(other.DeprecationWarning)
                ) && 
                (
                    MinTagId == other.MinTagId ||
                    MinTagId != null &&
                    MinTagId.Equals(other.MinTagId)
                ) && 
                (
                    NextMaxId == other.NextMaxId ||
                    NextMaxId != null &&
                    NextMaxId.Equals(other.NextMaxId)
                ) && 
                (
                    NextMaxTagId == other.NextMaxTagId ||
                    NextMaxTagId != null &&
                    NextMaxTagId.Equals(other.NextMaxTagId)
                ) && 
                (
                    NextMinId == other.NextMinId ||
                    NextMinId != null &&
                    NextMinId.Equals(other.NextMinId)
                ) && 
                (
                    NextUrl == other.NextUrl ||
                    NextUrl != null &&
                    NextUrl.Equals(other.NextUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DeprecationWarning != null)
                    hashCode = hashCode * 59 + DeprecationWarning.GetHashCode();
                    if (MinTagId != null)
                    hashCode = hashCode * 59 + MinTagId.GetHashCode();
                    if (NextMaxId != null)
                    hashCode = hashCode * 59 + NextMaxId.GetHashCode();
                    if (NextMaxTagId != null)
                    hashCode = hashCode * 59 + NextMaxTagId.GetHashCode();
                    if (NextMinId != null)
                    hashCode = hashCode * 59 + NextMinId.GetHashCode();
                    if (NextUrl != null)
                    hashCode = hashCode * 59 + NextUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TagPaginationInfo left, TagPaginationInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TagPaginationInfo left, TagPaginationInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
