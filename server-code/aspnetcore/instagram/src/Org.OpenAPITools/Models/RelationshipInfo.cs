/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RelationshipInfo : IEquatable<RelationshipInfo>
    {

        /// <summary>
        /// Status of incoming relationship
        /// </summary>
        /// <value>Status of incoming relationship</value>
        [TypeConverter(typeof(CustomEnumConverter<IncomingStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IncomingStatusEnum
        {
            
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 1,
            
            /// <summary>
            /// Enum FollowedByEnum for followed_by
            /// </summary>
            [EnumMember(Value = "followed_by")]
            FollowedByEnum = 2,
            
            /// <summary>
            /// Enum RequestedByEnum for requested_by
            /// </summary>
            [EnumMember(Value = "requested_by")]
            RequestedByEnum = 3
        }

        /// <summary>
        /// Status of incoming relationship
        /// </summary>
        /// <value>Status of incoming relationship</value>
        [DataMember(Name="incoming_status", EmitDefaultValue=true)]
        public IncomingStatusEnum IncomingStatus { get; set; }


        /// <summary>
        /// Status of outgoing relationship
        /// </summary>
        /// <value>Status of outgoing relationship</value>
        [TypeConverter(typeof(CustomEnumConverter<OutgoingStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OutgoingStatusEnum
        {
            
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 1,
            
            /// <summary>
            /// Enum FollowsEnum for follows
            /// </summary>
            [EnumMember(Value = "follows")]
            FollowsEnum = 2,
            
            /// <summary>
            /// Enum RequestedEnum for requested
            /// </summary>
            [EnumMember(Value = "requested")]
            RequestedEnum = 3
        }

        /// <summary>
        /// Status of outgoing relationship
        /// </summary>
        /// <value>Status of outgoing relationship</value>
        [DataMember(Name="outgoing_status", EmitDefaultValue=true)]
        public OutgoingStatusEnum OutgoingStatus { get; set; }

        /// <summary>
        /// Indicates whether target user is private or not
        /// </summary>
        /// <value>Indicates whether target user is private or not</value>
        [DataMember(Name="target_user_is_private", EmitDefaultValue=true)]
        public bool TargetUserIsPrivate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RelationshipInfo {\n");
            sb.Append("  IncomingStatus: ").Append(IncomingStatus).Append("\n");
            sb.Append("  OutgoingStatus: ").Append(OutgoingStatus).Append("\n");
            sb.Append("  TargetUserIsPrivate: ").Append(TargetUserIsPrivate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RelationshipInfo)obj);
        }

        /// <summary>
        /// Returns true if RelationshipInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of RelationshipInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationshipInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IncomingStatus == other.IncomingStatus ||
                    
                    IncomingStatus.Equals(other.IncomingStatus)
                ) && 
                (
                    OutgoingStatus == other.OutgoingStatus ||
                    
                    OutgoingStatus.Equals(other.OutgoingStatus)
                ) && 
                (
                    TargetUserIsPrivate == other.TargetUserIsPrivate ||
                    
                    TargetUserIsPrivate.Equals(other.TargetUserIsPrivate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IncomingStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + OutgoingStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + TargetUserIsPrivate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RelationshipInfo left, RelationshipInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RelationshipInfo left, RelationshipInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
