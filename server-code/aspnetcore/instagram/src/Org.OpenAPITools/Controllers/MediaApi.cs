/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MediaApiController : ControllerBase
    { 
        /// <summary>
        /// Get information about a media object.
        /// </summary>
        /// <remarks>Get information about a media object. The returned type key will allow you to differentiate between image and video media.  **Note:** if you authenticate with an OAuth Token, you will receive the user_has_liked key which quickly tells you whether the current user has liked this media item. </remarks>
        /// <param name="mediaId">The ID of the media resource.</param>
        /// <response code="200">Media resource information.</response>
        [HttpGet]
        [Route("/v1/media/{media-id}")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("MediaMediaIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MediaEntryResponse), description: "Media resource information.")]
        public virtual IActionResult MediaMediaIdGet([FromRoute (Name = "media-id")][Required]string mediaId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MediaEntryResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  },\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MediaEntryResponse>(exampleJson)
            : default(MediaEntryResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a list of currently popular media.
        /// </summary>
        /// <remarks>Get a list of what media is most popular at the moment. Can return mix of &#x60;image&#x60; and &#x60;video&#x60; types.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 </remarks>
        /// <response code="200">Found media resources (without likes information).</response>
        [HttpGet]
        [Route("/v1/media/popular")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("MediaPopularGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MediaSearchResponse), description: "Found media resources (without likes information).")]
        [Obsolete]
        public virtual IActionResult MediaPopularGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MediaSearchResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  }, {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  } ],\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MediaSearchResponse>(exampleJson)
            : default(MediaSearchResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Search for media in a given area.
        /// </summary>
        /// <remarks>Search for media in a given area. The default time span is set to 5 days. The time span must not exceed 7 days. Defaults time stamps cover the last 5 days. Can return mix of &#x60;image&#x60; and &#x60;video&#x60; types. </remarks>
        /// <param name="lat">Latitude of the center search coordinate. If used, &#x60;lng&#x60; is required.</param>
        /// <param name="lng">Longitude of the center search coordinate. If used, &#x60;lat&#x60; is required.</param>
        /// <param name="minTimestamp">A unix timestamp. All media returned will be taken later than this timestamp.</param>
        /// <param name="maxTimestamp">A unix timestamp. All media returned will be taken earlier than this timestamp.</param>
        /// <param name="distance">Default is 1km (distance&#x3D;1000), max distance is 5km.</param>
        /// <response code="200">Found media resources (without likes information) in a given area.</response>
        [HttpGet]
        [Route("/v1/media/search")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("MediaSearchGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MediaSearchResponse), description: "Found media resources (without likes information) in a given area.")]
        public virtual IActionResult MediaSearchGet([FromQuery (Name = "lat")][Required()]double lat, [FromQuery (Name = "lng")][Required()]double lng, [FromQuery (Name = "min_timestamp")]long? minTimestamp, [FromQuery (Name = "max_timestamp")]long? maxTimestamp, [FromQuery (Name = "distance")]int? distance)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MediaSearchResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  }, {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  } ],\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MediaSearchResponse>(exampleJson)
            : default(MediaSearchResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get information about a media object.
        /// </summary>
        /// <remarks>This endpoint returns the same response as &#x60;GET /media/{media-id}&#x60;.  A media object&#39;s shortcode can be found in its shortlink URL. An example shortlink is &#x60;http://instagram.com/p/D/&#x60;, its corresponding shortcode is &#x60;D&#x60;. </remarks>
        /// <param name="shortcode">The short code of the media resource.</param>
        /// <response code="200">Media resource information.</response>
        [HttpGet]
        [Route("/v1/media/shortcode/{shortcode}")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("MediaShortcodeShortcodeGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MediaEntryResponse), description: "Media resource information.")]
        public virtual IActionResult MediaShortcodeShortcodeGet([FromRoute (Name = "shortcode")][Required]string shortcode)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MediaEntryResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  },\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MediaEntryResponse>(exampleJson)
            : default(MediaEntryResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
