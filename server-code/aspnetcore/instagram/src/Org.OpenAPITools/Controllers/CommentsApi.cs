/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CommentsApiController : ControllerBase
    { 
        /// <summary>
        /// Remove a comment.
        /// </summary>
        /// <remarks>Remove a comment either on the authenticated user&#39;s media object or authored by the authenticated user. </remarks>
        /// <param name="mediaId">The ID of the media resource.</param>
        /// <param name="commentId">The ID of the comment entry.</param>
        /// <response code="200">Result of deleting a comment.</response>
        [HttpDelete]
        [Route("/v1/media/{media-id}/comments/{comment-id}")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("MediaMediaIdCommentsCommentIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(StatusResponse), description: "Result of deleting a comment.")]
        public virtual IActionResult MediaMediaIdCommentsCommentIdDelete([FromRoute (Name = "media-id")][Required]string mediaId, [FromRoute (Name = "comment-id")][Required]string commentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StatusResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : \"data\",\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<StatusResponse>(exampleJson)
            : default(StatusResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a list of recent comments on a media object.
        /// </summary>
        /// <remarks>Get a list of recent comments on a media object.</remarks>
        /// <param name="mediaId">The ID of the media resource.</param>
        /// <response code="200">List of comments of the media resource.</response>
        [HttpGet]
        [Route("/v1/media/{media-id}/comments")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("MediaMediaIdCommentsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CommentsResponse), description: "List of comments of the media resource.")]
        public virtual IActionResult MediaMediaIdCommentsGet([FromRoute (Name = "media-id")][Required]string mediaId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CommentsResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"created_time\" : \"created_time\",\n    \"from\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"id\" : \"id\",\n    \"text\" : \"text\"\n  }, {\n    \"created_time\" : \"created_time\",\n    \"from\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"id\" : \"id\",\n    \"text\" : \"text\"\n  } ],\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CommentsResponse>(exampleJson)
            : default(CommentsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a comment on a media object.
        /// </summary>
        /// <remarks>Create a comment on a media object with the following rules:    * The total length of the comment cannot exceed 300 characters.   * The comment cannot contain more than 4 hashtags.   * The comment cannot contain more than 1 URL.   * The comment cannot consist of all capital letters. </remarks>
        /// <param name="mediaId">The ID of the media resource.</param>
        /// <param name="text">Text to post as a comment on the media object as specified in &#x60;media-id&#x60;.</param>
        /// <response code="200">Result of posting a comment.</response>
        [HttpPost]
        [Route("/v1/media/{media-id}/comments")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("MediaMediaIdCommentsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(StatusResponse), description: "Result of posting a comment.")]
        public virtual IActionResult MediaMediaIdCommentsPost([FromRoute (Name = "media-id")][Required]string mediaId, [FromQuery (Name = "text")][Required()]string text)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StatusResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : \"data\",\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<StatusResponse>(exampleJson)
            : default(StatusResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
