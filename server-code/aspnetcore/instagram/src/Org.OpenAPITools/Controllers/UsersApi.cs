/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsersApiController : ControllerBase
    { 
        /// <summary>
        /// Search for a user by name.
        /// </summary>
        /// <remarks>Search for a user by name.</remarks>
        /// <param name="q">A query string.</param>
        /// <param name="count">Number of users to return.</param>
        /// <response code="200">List of found users.</response>
        [HttpGet]
        [Route("/v1/users/search")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("UsersSearchGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UsersInfoResponse), description: "List of found users.")]
        public virtual IActionResult UsersSearchGet([FromQuery (Name = "q")][Required()]string q, [FromQuery (Name = "count")]int? count)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UsersInfoResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"full_name\" : \"full_name\",\n    \"profile_picture\" : \"profile_picture\",\n    \"id\" : \"id\",\n    \"username\" : \"username\"\n  }, {\n    \"full_name\" : \"full_name\",\n    \"profile_picture\" : \"profile_picture\",\n    \"id\" : \"id\",\n    \"username\" : \"username\"\n  } ],\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UsersInfoResponse>(exampleJson)
            : default(UsersInfoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// See the authenticated user&#39;s feed.
        /// </summary>
        /// <remarks>See the authenticated user&#39;s feed.  **Warning:** [Deprecated](http://instagram.com/developer/changelog/) for Apps created **on or after** Nov 17, 2015 </remarks>
        /// <param name="count">Count of media to return.</param>
        /// <param name="minId">Return media later than this &#x60;min_id&#x60;.</param>
        /// <param name="maxId">Return media earlier than this &#x60;max_id&#x60;.</param>
        /// <response code="200">Users feed entries.</response>
        [HttpGet]
        [Route("/v1/users/self/feed")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("UsersSelfFeedGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MediaListResponse), description: "Users feed entries.")]
        [Obsolete]
        public virtual IActionResult UsersSelfFeedGet([FromQuery (Name = "count")]int? count, [FromQuery (Name = "min_id")]string minId, [FromQuery (Name = "max_id")]string maxId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MediaListResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"pagination\" : {\n    \"next_url\" : \"next_url\",\n    \"next_max_id\" : \"next_max_id\"\n  },\n  \"data\" : [ {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  }, {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  } ],\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MediaListResponse>(exampleJson)
            : default(MediaListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// See the list of media liked by the authenticated user.
        /// </summary>
        /// <remarks>See the list of media liked by the authenticated user. Private media is returned as long as the authenticated user has permission to view that media. Liked media lists are only available for the currently authenticated user. </remarks>
        /// <param name="count">Count of media to return.</param>
        /// <param name="maxLikeId">Return media liked before this id.</param>
        /// <response code="200">Users media entries.</response>
        [HttpGet]
        [Route("/v1/users/self/media/liked")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("UsersSelfMediaLikedGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MediaListResponse), description: "Users media entries.")]
        public virtual IActionResult UsersSelfMediaLikedGet([FromQuery (Name = "count")]int? count, [FromQuery (Name = "max_like_id")]string maxLikeId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MediaListResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"pagination\" : {\n    \"next_url\" : \"next_url\",\n    \"next_max_id\" : \"next_max_id\"\n  },\n  \"data\" : [ {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  }, {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  } ],\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MediaListResponse>(exampleJson)
            : default(MediaListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get basic information about a user.
        /// </summary>
        /// <remarks>Get basic information about a user. To get information about the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. </remarks>
        /// <param name="userId">The ID of a user to get information about, or **self** to retrieve information about authenticated user.</param>
        /// <response code="200">User basic information.</response>
        /// <response code="404">Not Found, user with such ID does not exist.</response>
        [HttpGet]
        [Route("/v1/users/{user-id}")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserResponse), description: "User basic information.")]
        public virtual IActionResult UsersUserIdGet([FromRoute (Name = "user-id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"website\" : \"website\",\n    \"full_name\" : \"full_name\",\n    \"counts\" : {\n      \"followed_by\" : 0,\n      \"follows\" : 6,\n      \"media\" : 1\n    },\n    \"bio\" : \"bio\",\n    \"profile_picture\" : \"profile_picture\",\n    \"id\" : \"id\",\n    \"username\" : \"username\"\n  },\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserResponse>(exampleJson)
            : default(UserResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the most recent media published by a user.
        /// </summary>
        /// <remarks>Get the most recent media published by a user. To get the most recent media published by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;.  Security scope &#x60;public_content&#x60; is required to read information about other users. </remarks>
        /// <param name="userId">The ID of a user to get recent media of, or **self** to retrieve media of authenticated user.</param>
        /// <param name="count">Count of media to return.</param>
        /// <param name="maxTimestamp">Return media before this UNIX timestamp.</param>
        /// <param name="minTimestamp">Return media after this UNIX timestamp.</param>
        /// <param name="minId">Return media later than this &#x60;min_id&#x60;.</param>
        /// <param name="maxId">Return media earlier than this &#x60;max_id&#x60;.</param>
        /// <response code="200">Users media entries.</response>
        [HttpGet]
        [Route("/v1/users/{user-id}/media/recent")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdMediaRecentGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MediaListResponse), description: "Users media entries.")]
        public virtual IActionResult UsersUserIdMediaRecentGet([FromRoute (Name = "user-id")][Required]string userId, [FromQuery (Name = "count")]int? count, [FromQuery (Name = "max_timestamp")]long? maxTimestamp, [FromQuery (Name = "min_timestamp")]long? minTimestamp, [FromQuery (Name = "min_id")]string minId, [FromQuery (Name = "max_id")]string maxId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MediaListResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"pagination\" : {\n    \"next_url\" : \"next_url\",\n    \"next_max_id\" : \"next_max_id\"\n  },\n  \"data\" : [ {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  }, {\n    \"created_time\" : \"created_time\",\n    \"images\" : {\n      \"thumbnail\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"comments\" : {\n      \"data\" : [ {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      }, {\n        \"created_time\" : \"created_time\",\n        \"from\" : {\n          \"full_name\" : \"full_name\",\n          \"profile_picture\" : \"profile_picture\",\n          \"id\" : \"id\",\n          \"username\" : \"username\"\n        },\n        \"id\" : \"id\",\n        \"text\" : \"text\"\n      } ],\n      \"count\" : 0\n    },\n    \"users_in_photo\" : [ {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    }, {\n      \"position\" : {\n        \"x\" : 7.0614014,\n        \"y\" : 9.301444\n      },\n      \"user\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }\n    } ],\n    \"user_has_liked\" : true,\n    \"link\" : \"link\",\n    \"caption\" : {\n      \"created_time\" : \"created_time\",\n      \"from\" : {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      },\n      \"id\" : \"id\",\n      \"text\" : \"text\"\n    },\n    \"videos\" : {\n      \"low_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      },\n      \"standard_resolution\" : {\n        \"width\" : 1,\n        \"url\" : \"url\",\n        \"height\" : 6\n      }\n    },\n    \"type\" : \"image\",\n    \"tags\" : [ \"tags\", \"tags\" ],\n    \"filter\" : \"filter\",\n    \"attribution\" : \"attribution\",\n    \"location\" : {\n      \"latitude\" : 5.637376656633329,\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"longitude\" : 2.3021358869347655\n    },\n    \"id\" : \"id\",\n    \"user\" : {\n      \"full_name\" : \"full_name\",\n      \"profile_picture\" : \"profile_picture\",\n      \"id\" : \"id\",\n      \"username\" : \"username\"\n    },\n    \"likes\" : {\n      \"data\" : [ {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      }, {\n        \"full_name\" : \"full_name\",\n        \"profile_picture\" : \"profile_picture\",\n        \"id\" : \"id\",\n        \"username\" : \"username\"\n      } ],\n      \"count\" : 5\n    }\n  } ],\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MediaListResponse>(exampleJson)
            : default(MediaListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
