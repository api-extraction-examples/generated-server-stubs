/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RelationshipsApiController : ControllerBase
    { 
        /// <summary>
        /// List the users who have requested this user&#39;s permission to follow.
        /// </summary>
        /// <remarks>List the users who have requested this user&#39;s permission to follow.</remarks>
        /// <response code="200">List of users who have requested this user&#39;s permission to follow.</response>
        [HttpGet]
        [Route("/v1/users/self/requested-by")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("UsersSelfRequestedByGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UsersInfoResponse), description: "List of users who have requested this user&#39;s permission to follow.")]
        public virtual IActionResult UsersSelfRequestedByGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UsersInfoResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"full_name\" : \"full_name\",\n    \"profile_picture\" : \"profile_picture\",\n    \"id\" : \"id\",\n    \"username\" : \"username\"\n  }, {\n    \"full_name\" : \"full_name\",\n    \"profile_picture\" : \"profile_picture\",\n    \"id\" : \"id\",\n    \"username\" : \"username\"\n  } ],\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UsersInfoResponse>(exampleJson)
            : default(UsersInfoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the list of users this user is followed by.
        /// </summary>
        /// <remarks>Get the list of users this user is followed by. To get users followed by the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. </remarks>
        /// <param name="userId">The ID of a user, or **self** to retrieve information about authenticated user.</param>
        /// <response code="200">List of users this user is followed by.</response>
        [HttpGet]
        [Route("/v1/users/{user-id}/followed-by")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdFollowedByGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UsersPagingResponse), description: "List of users this user is followed by.")]
        public virtual IActionResult UsersUserIdFollowedByGet([FromRoute (Name = "user-id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UsersPagingResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"pagination\" : {\n    \"next_cursor\" : \"next_cursor\",\n    \"next_url\" : \"next_url\"\n  },\n  \"data\" : [ {\n    \"full_name\" : \"full_name\",\n    \"profile_picture\" : \"profile_picture\",\n    \"id\" : \"id\",\n    \"username\" : \"username\"\n  }, {\n    \"full_name\" : \"full_name\",\n    \"profile_picture\" : \"profile_picture\",\n    \"id\" : \"id\",\n    \"username\" : \"username\"\n  } ],\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UsersPagingResponse>(exampleJson)
            : default(UsersPagingResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the list of users this user follows.
        /// </summary>
        /// <remarks>Get the list of users this user follows. To get follows of the owner of the access token, you can use **self** instead of the &#x60;user-id&#x60;. </remarks>
        /// <param name="userId">The ID of a user, or **self** to retrieve information about authenticated user.</param>
        /// <response code="200">List of users this user follows.</response>
        [HttpGet]
        [Route("/v1/users/{user-id}/follows")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdFollowsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UsersPagingResponse), description: "List of users this user follows.")]
        public virtual IActionResult UsersUserIdFollowsGet([FromRoute (Name = "user-id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UsersPagingResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"pagination\" : {\n    \"next_cursor\" : \"next_cursor\",\n    \"next_url\" : \"next_url\"\n  },\n  \"data\" : [ {\n    \"full_name\" : \"full_name\",\n    \"profile_picture\" : \"profile_picture\",\n    \"id\" : \"id\",\n    \"username\" : \"username\"\n  }, {\n    \"full_name\" : \"full_name\",\n    \"profile_picture\" : \"profile_picture\",\n    \"id\" : \"id\",\n    \"username\" : \"username\"\n  } ],\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UsersPagingResponse>(exampleJson)
            : default(UsersPagingResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get information about a relationship to another user.
        /// </summary>
        /// <remarks>Get information about a relationship to another user.</remarks>
        /// <param name="userId">The ID of a user to get information about.</param>
        /// <response code="200">Relationship information.</response>
        [HttpGet]
        [Route("/v1/users/{user-id}/relationship")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdRelationshipGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(RelationshipResponse), description: "Relationship information.")]
        public virtual IActionResult UsersUserIdRelationshipGet([FromRoute (Name = "user-id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RelationshipResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"incoming_status\" : \"none\",\n    \"target_user_is_private\" : true,\n    \"outgoing_status\" : \"none\"\n  },\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RelationshipResponse>(exampleJson)
            : default(RelationshipResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify the relationship between the current user and the target user.
        /// </summary>
        /// <remarks>Modify the relationship between the current user and the target user.</remarks>
        /// <param name="userId">The ID of the target user.</param>
        /// <param name="action">Type of action to apply for relationship with the user.</param>
        /// <response code="200">Relationship information.</response>
        [HttpPost]
        [Route("/v1/users/{user-id}/relationship")]
        [Authorize(Policy = "api_key")]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdRelationshipPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(RelationshipPostResponse), description: "Relationship information.")]
        public virtual IActionResult UsersUserIdRelationshipPost([FromRoute (Name = "user-id")][Required]string userId, [FromQuery (Name = "action")][Required()]string action)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RelationshipPostResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"outgoing_status\" : \"none\"\n  },\n  \"meta\" : {\n    \"code\" : 3\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RelationshipPostResponse>(exampleJson)
            : default(RelationshipPostResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
