/*
 * NBA Stats API
 *
 * The destination for current and historic NBA statistics.
 *
 * The version of the OpenAPI document: version
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="westPlayer1"></param>
        /// <param name="westPlayer2"></param>
        /// <param name="westPlayer3"></param>
        /// <param name="westPlayer4"></param>
        /// <param name="westPlayer5"></param>
        /// <param name="eastPlayer1"></param>
        /// <param name="eastPlayer2"></param>
        /// <param name="eastPlayer3"></param>
        /// <param name="eastPlayer4"></param>
        /// <param name="eastPlayer5"></param>
        /// <param name="pointCap"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/allstarballotpredictor")]
        [ValidateModelState]
        [SwaggerOperation("AllstarballotpredictorGet")]
        public virtual IActionResult AllstarballotpredictorGet([FromQuery (Name = "WestPlayer1")][Required()]string westPlayer1, [FromQuery (Name = "WestPlayer2")][Required()]string westPlayer2, [FromQuery (Name = "WestPlayer3")][Required()]string westPlayer3, [FromQuery (Name = "WestPlayer4")][Required()]string westPlayer4, [FromQuery (Name = "WestPlayer5")][Required()]string westPlayer5, [FromQuery (Name = "EastPlayer1")][Required()]string eastPlayer1, [FromQuery (Name = "EastPlayer2")][Required()]string eastPlayer2, [FromQuery (Name = "EastPlayer3")][Required()]string eastPlayer3, [FromQuery (Name = "EastPlayer4")][Required()]string eastPlayer4, [FromQuery (Name = "EastPlayer5")][Required()]string eastPlayer5, [FromQuery (Name = "PointCap")]string pointCap)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscore")]
        [ValidateModelState]
        [SwaggerOperation("BoxscoreGet")]
        [Obsolete]
        public virtual IActionResult BoxscoreGet([FromQuery (Name = "GameID")]string gameID, [FromQuery (Name = "StartPeriod")]string startPeriod, [FromQuery (Name = "EndPeriod")]string endPeriod, [FromQuery (Name = "StartRange")]string startRange, [FromQuery (Name = "EndRange")]string endRange, [FromQuery (Name = "RangeType")]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscoreadvanced")]
        [ValidateModelState]
        [SwaggerOperation("BoxscoreadvancedGet")]
        [Obsolete]
        public virtual IActionResult BoxscoreadvancedGet([FromQuery (Name = "GameID")]string gameID, [FromQuery (Name = "StartPeriod")]string startPeriod, [FromQuery (Name = "EndPeriod")]string endPeriod, [FromQuery (Name = "StartRange")]string startRange, [FromQuery (Name = "EndRange")]string endRange, [FromQuery (Name = "RangeType")]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscoreadvancedv2")]
        [ValidateModelState]
        [SwaggerOperation("Boxscoreadvancedv2Get")]
        public virtual IActionResult Boxscoreadvancedv2Get([FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "StartPeriod")][Required()]string startPeriod, [FromQuery (Name = "EndPeriod")][Required()]string endPeriod, [FromQuery (Name = "StartRange")][Required()]string startRange, [FromQuery (Name = "EndRange")][Required()]string endRange, [FromQuery (Name = "RangeType")][Required()]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscorefourfactors")]
        [ValidateModelState]
        [SwaggerOperation("BoxscorefourfactorsGet")]
        [Obsolete]
        public virtual IActionResult BoxscorefourfactorsGet([FromQuery (Name = "GameID")]string gameID, [FromQuery (Name = "StartPeriod")]string startPeriod, [FromQuery (Name = "EndPeriod")]string endPeriod, [FromQuery (Name = "StartRange")]string startRange, [FromQuery (Name = "EndRange")]string endRange, [FromQuery (Name = "RangeType")]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscorefourfactorsv2")]
        [ValidateModelState]
        [SwaggerOperation("Boxscorefourfactorsv2Get")]
        public virtual IActionResult Boxscorefourfactorsv2Get([FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "StartPeriod")][Required()]string startPeriod, [FromQuery (Name = "EndPeriod")][Required()]string endPeriod, [FromQuery (Name = "StartRange")][Required()]string startRange, [FromQuery (Name = "EndRange")][Required()]string endRange, [FromQuery (Name = "RangeType")][Required()]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscoremisc")]
        [ValidateModelState]
        [SwaggerOperation("BoxscoremiscGet")]
        [Obsolete]
        public virtual IActionResult BoxscoremiscGet([FromQuery (Name = "GameID")]string gameID, [FromQuery (Name = "StartPeriod")]string startPeriod, [FromQuery (Name = "EndPeriod")]string endPeriod, [FromQuery (Name = "StartRange")]string startRange, [FromQuery (Name = "EndRange")]string endRange, [FromQuery (Name = "RangeType")]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscoremiscv2")]
        [ValidateModelState]
        [SwaggerOperation("Boxscoremiscv2Get")]
        public virtual IActionResult Boxscoremiscv2Get([FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "StartPeriod")][Required()]string startPeriod, [FromQuery (Name = "EndPeriod")][Required()]string endPeriod, [FromQuery (Name = "StartRange")][Required()]string startRange, [FromQuery (Name = "EndRange")][Required()]string endRange, [FromQuery (Name = "RangeType")][Required()]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscoreplayertrackv2")]
        [ValidateModelState]
        [SwaggerOperation("Boxscoreplayertrackv2Get")]
        public virtual IActionResult Boxscoreplayertrackv2Get([FromQuery (Name = "GameID")][Required()]string gameID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscorescoring")]
        [ValidateModelState]
        [SwaggerOperation("BoxscorescoringGet")]
        [Obsolete]
        public virtual IActionResult BoxscorescoringGet([FromQuery (Name = "GameID")]string gameID, [FromQuery (Name = "StartPeriod")]string startPeriod, [FromQuery (Name = "EndPeriod")]string endPeriod, [FromQuery (Name = "StartRange")]string startRange, [FromQuery (Name = "EndRange")]string endRange, [FromQuery (Name = "RangeType")]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscorescoringv2")]
        [ValidateModelState]
        [SwaggerOperation("Boxscorescoringv2Get")]
        public virtual IActionResult Boxscorescoringv2Get([FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "StartPeriod")][Required()]string startPeriod, [FromQuery (Name = "EndPeriod")][Required()]string endPeriod, [FromQuery (Name = "StartRange")][Required()]string startRange, [FromQuery (Name = "EndRange")][Required()]string endRange, [FromQuery (Name = "RangeType")][Required()]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscoresummaryv2")]
        [ValidateModelState]
        [SwaggerOperation("Boxscoresummaryv2Get")]
        public virtual IActionResult Boxscoresummaryv2Get([FromQuery (Name = "GameID")][Required()]string gameID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscoretraditionalv2")]
        [ValidateModelState]
        [SwaggerOperation("Boxscoretraditionalv2Get")]
        public virtual IActionResult Boxscoretraditionalv2Get([FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "StartPeriod")][Required()]string startPeriod, [FromQuery (Name = "EndPeriod")][Required()]string endPeriod, [FromQuery (Name = "StartRange")][Required()]string startRange, [FromQuery (Name = "EndRange")][Required()]string endRange, [FromQuery (Name = "RangeType")][Required()]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscoreusage")]
        [ValidateModelState]
        [SwaggerOperation("BoxscoreusageGet")]
        [Obsolete]
        public virtual IActionResult BoxscoreusageGet([FromQuery (Name = "GameID")]string gameID, [FromQuery (Name = "StartPeriod")]string startPeriod, [FromQuery (Name = "EndPeriod")]string endPeriod, [FromQuery (Name = "StartRange")]string startRange, [FromQuery (Name = "EndRange")]string endRange, [FromQuery (Name = "RangeType")]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <param name="startRange"></param>
        /// <param name="endRange"></param>
        /// <param name="rangeType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/boxscoreusagev2")]
        [ValidateModelState]
        [SwaggerOperation("Boxscoreusagev2Get")]
        public virtual IActionResult Boxscoreusagev2Get([FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "StartPeriod")][Required()]string startPeriod, [FromQuery (Name = "EndPeriod")][Required()]string endPeriod, [FromQuery (Name = "StartRange")][Required()]string startRange, [FromQuery (Name = "EndRange")][Required()]string endRange, [FromQuery (Name = "RangeType")][Required()]string rangeType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/commonTeamYears")]
        [ValidateModelState]
        [SwaggerOperation("CommonTeamYearsGet")]
        public virtual IActionResult CommonTeamYearsGet([FromQuery (Name = "LeagueID")][Required()]string leagueID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="season"></param>
        /// <param name="isOnlyCurrentSeason"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/commonallplayers")]
        [ValidateModelState]
        [SwaggerOperation("CommonallplayersGet")]
        public virtual IActionResult CommonallplayersGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "IsOnlyCurrentSeason")][Required()]string isOnlyCurrentSeason)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="playerID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/commonplayerinfo")]
        [ValidateModelState]
        [SwaggerOperation("CommonplayerinfoGet")]
        public virtual IActionResult CommonplayerinfoGet([FromQuery (Name = "PlayerID")][Required()]string playerID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="season"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/commonplayoffseries")]
        [ValidateModelState]
        [SwaggerOperation("CommonplayoffseriesGet")]
        public virtual IActionResult CommonplayoffseriesGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "Season")][Required()]string season)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="season"></param>
        /// <param name="teamID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/commonteamroster")]
        [ValidateModelState]
        [SwaggerOperation("CommonteamrosterGet")]
        public virtual IActionResult CommonteamrosterGet([FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "TeamID")][Required()]string teamID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="seasonYear"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/draftcombinedrillresults")]
        [ValidateModelState]
        [SwaggerOperation("DraftcombinedrillresultsGet")]
        public virtual IActionResult DraftcombinedrillresultsGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "SeasonYear")][Required()]string seasonYear)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="seasonYear"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/draftcombinenonstationaryshooting")]
        [ValidateModelState]
        [SwaggerOperation("DraftcombinenonstationaryshootingGet")]
        public virtual IActionResult DraftcombinenonstationaryshootingGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "SeasonYear")][Required()]string seasonYear)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="seasonYear"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/draftcombineplayeranthro")]
        [ValidateModelState]
        [SwaggerOperation("DraftcombineplayeranthroGet")]
        public virtual IActionResult DraftcombineplayeranthroGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "SeasonYear")][Required()]string seasonYear)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="seasonYear"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/draftcombinespotshooting")]
        [ValidateModelState]
        [SwaggerOperation("DraftcombinespotshootingGet")]
        public virtual IActionResult DraftcombinespotshootingGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "SeasonYear")][Required()]string seasonYear)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="seasonYear"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/draftcombinestats")]
        [ValidateModelState]
        [SwaggerOperation("DraftcombinestatsGet")]
        public virtual IActionResult DraftcombinestatsGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "SeasonYear")][Required()]string seasonYear)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/drafthistory")]
        [ValidateModelState]
        [SwaggerOperation("DrafthistoryGet")]
        public virtual IActionResult DrafthistoryGet([FromQuery (Name = "LeagueID")][Required()]string leagueID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/franchisehistory")]
        [ValidateModelState]
        [SwaggerOperation("FranchisehistoryGet")]
        public virtual IActionResult FranchisehistoryGet([FromQuery (Name = "LeagueID")][Required()]string leagueID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="statCategory"></param>
        /// <param name="leagueID"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerOrTeam"></param>
        /// <param name="playerScope"></param>
        /// <param name="gameScope"></param>
        /// <param name="game"></param>
        /// <param name="player"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/homepageleaders")]
        [ValidateModelState]
        [SwaggerOperation("HomepageleadersGet")]
        public virtual IActionResult HomepageleadersGet([FromQuery (Name = "StatCategory")][Required()]string statCategory, [FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerOrTeam")][Required()]string playerOrTeam, [FromQuery (Name = "PlayerScope")][Required()]string playerScope, [FromQuery (Name = "GameScope")][Required()]string gameScope, [FromQuery (Name = "Game")]string game, [FromQuery (Name = "Player")]string player)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="statType"></param>
        /// <param name="leagueID"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerOrTeam"></param>
        /// <param name="playerScope"></param>
        /// <param name="gameScope"></param>
        /// <param name="game"></param>
        /// <param name="player"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/homepagev2")]
        [ValidateModelState]
        [SwaggerOperation("Homepagev2Get")]
        public virtual IActionResult Homepagev2Get([FromQuery (Name = "StatType")][Required()]string statType, [FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerOrTeam")][Required()]string playerOrTeam, [FromQuery (Name = "PlayerScope")][Required()]string playerScope, [FromQuery (Name = "GameScope")][Required()]string gameScope, [FromQuery (Name = "Game")]string game, [FromQuery (Name = "Player")]string player)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="stat"></param>
        /// <param name="leagueID"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerOrTeam"></param>
        /// <param name="playerScope"></param>
        /// <param name="gameScope"></param>
        /// <param name="game"></param>
        /// <param name="player"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaderstiles")]
        [ValidateModelState]
        [SwaggerOperation("LeaderstilesGet")]
        public virtual IActionResult LeaderstilesGet([FromQuery (Name = "Stat")][Required()]string stat, [FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerOrTeam")][Required()]string playerOrTeam, [FromQuery (Name = "PlayerScope")][Required()]string playerScope, [FromQuery (Name = "GameScope")][Required()]string gameScope, [FromQuery (Name = "Game")]string game, [FromQuery (Name = "Player")]string player)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="groupQuantity"></param>
        /// <param name="seasonType"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashlineups")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashlineupsGet")]
        public virtual IActionResult LeaguedashlineupsGet([FromQuery (Name = "GroupQuantity")][Required()]string groupQuantity, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perMode"></param>
        /// <param name="leagueID"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashplayerbiostats")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashplayerbiostatsGet")]
        public virtual IActionResult LeaguedashplayerbiostatsGet([FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="clutchTime"></param>
        /// <param name="aheadBehind"></param>
        /// <param name="pointDiff"></param>
        /// <param name="gameScope"></param>
        /// <param name="playerExperience"></param>
        /// <param name="playerPosition"></param>
        /// <param name="starterBench"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashplayerclutch")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashplayerclutchGet")]
        public virtual IActionResult LeaguedashplayerclutchGet([FromQuery (Name = "ClutchTime")][Required()]string clutchTime, [FromQuery (Name = "AheadBehind")][Required()]string aheadBehind, [FromQuery (Name = "PointDiff")][Required()]string pointDiff, [FromQuery (Name = "GameScope")][Required()]string gameScope, [FromQuery (Name = "PlayerExperience")][Required()]string playerExperience, [FromQuery (Name = "PlayerPosition")][Required()]string playerPosition, [FromQuery (Name = "StarterBench")][Required()]string starterBench, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashplayerptshot")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashplayerptshotGet")]
        public virtual IActionResult LeaguedashplayerptshotGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <param name="distanceRange"></param>
        /// <param name="gameScope"></param>
        /// <param name="playerExperience"></param>
        /// <param name="playerPosition"></param>
        /// <param name="starterBench"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashplayershotlocations")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashplayershotlocationsGet")]
        public virtual IActionResult LeaguedashplayershotlocationsGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames, [FromQuery (Name = "DistanceRange")][Required()]string distanceRange, [FromQuery (Name = "GameScope")][Required()]string gameScope, [FromQuery (Name = "PlayerExperience")][Required()]string playerExperience, [FromQuery (Name = "PlayerPosition")][Required()]string playerPosition, [FromQuery (Name = "StarterBench")][Required()]string starterBench)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameScope"></param>
        /// <param name="playerExperience"></param>
        /// <param name="playerPosition"></param>
        /// <param name="starterBench"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashplayerstats")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashplayerstatsGet")]
        public virtual IActionResult LeaguedashplayerstatsGet([FromQuery (Name = "GameScope")][Required()]string gameScope, [FromQuery (Name = "PlayerExperience")][Required()]string playerExperience, [FromQuery (Name = "PlayerPosition")][Required()]string playerPosition, [FromQuery (Name = "StarterBench")][Required()]string starterBench, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="defenseCategory"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashptdefend")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashptdefendGet")]
        public virtual IActionResult LeaguedashptdefendGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "DefenseCategory")][Required()]string defenseCategory)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="defenseCategory"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashptteamdefend")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashptteamdefendGet")]
        public virtual IActionResult LeaguedashptteamdefendGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "DefenseCategory")][Required()]string defenseCategory)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="clutchTime"></param>
        /// <param name="aheadBehind"></param>
        /// <param name="pointDiff"></param>
        /// <param name="gameScope"></param>
        /// <param name="playerExperience"></param>
        /// <param name="playerPosition"></param>
        /// <param name="starterBench"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashteamclutch")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashteamclutchGet")]
        public virtual IActionResult LeaguedashteamclutchGet([FromQuery (Name = "ClutchTime")][Required()]string clutchTime, [FromQuery (Name = "AheadBehind")][Required()]string aheadBehind, [FromQuery (Name = "PointDiff")][Required()]string pointDiff, [FromQuery (Name = "GameScope")][Required()]string gameScope, [FromQuery (Name = "PlayerExperience")][Required()]string playerExperience, [FromQuery (Name = "PlayerPosition")][Required()]string playerPosition, [FromQuery (Name = "StarterBench")][Required()]string starterBench, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashteamptshot")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashteamptshotGet")]
        public virtual IActionResult LeaguedashteamptshotGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <param name="distanceRange"></param>
        /// <param name="gameScope"></param>
        /// <param name="playerExperience"></param>
        /// <param name="playerPosition"></param>
        /// <param name="starterBench"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashteamshotlocations")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashteamshotlocationsGet")]
        public virtual IActionResult LeaguedashteamshotlocationsGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames, [FromQuery (Name = "DistanceRange")][Required()]string distanceRange, [FromQuery (Name = "GameScope")][Required()]string gameScope, [FromQuery (Name = "PlayerExperience")][Required()]string playerExperience, [FromQuery (Name = "PlayerPosition")][Required()]string playerPosition, [FromQuery (Name = "StarterBench")][Required()]string starterBench)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leaguedashteamstats")]
        [ValidateModelState]
        [SwaggerOperation("LeaguedashteamstatsGet")]
        public virtual IActionResult LeaguedashteamstatsGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="scope"></param>
        /// <param name="statCategory"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/leagueleaders")]
        [ValidateModelState]
        [SwaggerOperation("LeagueleadersGet")]
        public virtual IActionResult LeagueleadersGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Scope")][Required()]string scope, [FromQuery (Name = "StatCategory")]string statCategory)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playbyplay")]
        [ValidateModelState]
        [SwaggerOperation("PlaybyplayGet")]
        public virtual IActionResult PlaybyplayGet([FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "StartPeriod")][Required()]string startPeriod, [FromQuery (Name = "EndPeriod")][Required()]string endPeriod)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="startPeriod"></param>
        /// <param name="endPeriod"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playbyplayv2")]
        [ValidateModelState]
        [SwaggerOperation("Playbyplayv2Get")]
        public virtual IActionResult Playbyplayv2Get([FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "StartPeriod")][Required()]string startPeriod, [FromQuery (Name = "EndPeriod")][Required()]string endPeriod)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perMode"></param>
        /// <param name="playerID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playercareerstats")]
        [ValidateModelState]
        [SwaggerOperation("PlayercareerstatsGet")]
        public virtual IActionResult PlayercareerstatsGet([FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlayerID")][Required()]string playerID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="playerIDList"></param>
        /// <param name="vsPlayerIDList"></param>
        /// <param name="seasonType"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playercompare")]
        [ValidateModelState]
        [SwaggerOperation("PlayercompareGet")]
        public virtual IActionResult PlayercompareGet([FromQuery (Name = "PlayerIDList")][Required()]string playerIDList, [FromQuery (Name = "VsPlayerIDList")][Required()]string vsPlayerIDList, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashboardbyclutch")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashboardbyclutchGet")]
        public virtual IActionResult PlayerdashboardbyclutchGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashboardbygamesplits")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashboardbygamesplitsGet")]
        public virtual IActionResult PlayerdashboardbygamesplitsGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashboardbygeneralsplits")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashboardbygeneralsplitsGet")]
        public virtual IActionResult PlayerdashboardbygeneralsplitsGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashboardbylastngames")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashboardbylastngamesGet")]
        public virtual IActionResult PlayerdashboardbylastngamesGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashboardbyopponent")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashboardbyopponentGet")]
        public virtual IActionResult PlayerdashboardbyopponentGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashboardbyshootingsplits")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashboardbyshootingsplitsGet")]
        public virtual IActionResult PlayerdashboardbyshootingsplitsGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashboardbyteamperformance")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashboardbyteamperformanceGet")]
        public virtual IActionResult PlayerdashboardbyteamperformanceGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashboardbyyearoveryear")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashboardbyyearoveryearGet")]
        public virtual IActionResult PlayerdashboardbyyearoveryearGet([FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="teamID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashptpass")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashptpassGet")]
        public virtual IActionResult PlayerdashptpassGet([FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="teamID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashptreb")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashptrebGet")]
        public virtual IActionResult PlayerdashptrebGet([FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="teamID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashptreboundlogs")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashptreboundlogsGet")]
        [Obsolete]
        public virtual IActionResult PlayerdashptreboundlogsGet([FromQuery (Name = "Season")]string season, [FromQuery (Name = "SeasonType")]string seasonType, [FromQuery (Name = "PlayerID")]string playerID, [FromQuery (Name = "TeamID")]string teamID, [FromQuery (Name = "Outcome")]string outcome, [FromQuery (Name = "Location")]string location, [FromQuery (Name = "Month")]string month, [FromQuery (Name = "SeasonSegment")]string seasonSegment, [FromQuery (Name = "DateFrom")]string dateFrom, [FromQuery (Name = "DateTo")]string dateTo, [FromQuery (Name = "OpponentTeamID")]string opponentTeamID, [FromQuery (Name = "VsConference")]string vsConference, [FromQuery (Name = "VsDivision")]string vsDivision, [FromQuery (Name = "GameSegment")]string gameSegment, [FromQuery (Name = "Period")]string period, [FromQuery (Name = "LastNGames")]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="teamID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashptshotdefend")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashptshotdefendGet")]
        public virtual IActionResult PlayerdashptshotdefendGet([FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="teamID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashptshotlog")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashptshotlogGet")]
        [Obsolete]
        public virtual IActionResult PlayerdashptshotlogGet([FromQuery (Name = "LeagueID")]string leagueID, [FromQuery (Name = "Season")]string season, [FromQuery (Name = "SeasonType")]string seasonType, [FromQuery (Name = "PlayerID")]string playerID, [FromQuery (Name = "TeamID")]string teamID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="playerID"></param>
        /// <param name="teamID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerdashptshots")]
        [ValidateModelState]
        [SwaggerOperation("PlayerdashptshotsGet")]
        public virtual IActionResult PlayerdashptshotsGet([FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="playerID"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playergamelog")]
        [ValidateModelState]
        [SwaggerOperation("PlayergamelogGet")]
        public virtual IActionResult PlayergamelogGet([FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="playerID"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="graphStartSeason"></param>
        /// <param name="graphEndSeason"></param>
        /// <param name="graphStat"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerprofile")]
        [ValidateModelState]
        [SwaggerOperation("PlayerprofileGet")]
        public virtual IActionResult PlayerprofileGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "GraphStartSeason")][Required()]string graphStartSeason, [FromQuery (Name = "GraphEndSeason")][Required()]string graphEndSeason, [FromQuery (Name = "GraphStat")][Required()]string graphStat)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perMode"></param>
        /// <param name="playerID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playerprofilev2")]
        [ValidateModelState]
        [SwaggerOperation("Playerprofilev2Get")]
        public virtual IActionResult Playerprofilev2Get([FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlayerID")][Required()]string playerID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="playerTeamID"></param>
        /// <param name="playerID1"></param>
        /// <param name="playerID2"></param>
        /// <param name="playerID3"></param>
        /// <param name="playerID4"></param>
        /// <param name="playerID5"></param>
        /// <param name="vsTeamID"></param>
        /// <param name="vsPlayerID1"></param>
        /// <param name="vsPlayerID2"></param>
        /// <param name="vsPlayerID3"></param>
        /// <param name="vsPlayerID4"></param>
        /// <param name="vsPlayerID5"></param>
        /// <param name="seasonType"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playersvsplayers")]
        [ValidateModelState]
        [SwaggerOperation("PlayersvsplayersGet")]
        public virtual IActionResult PlayersvsplayersGet([FromQuery (Name = "PlayerTeamID")][Required()]string playerTeamID, [FromQuery (Name = "PlayerID1")][Required()]string playerID1, [FromQuery (Name = "PlayerID2")][Required()]string playerID2, [FromQuery (Name = "PlayerID3")][Required()]string playerID3, [FromQuery (Name = "PlayerID4")][Required()]string playerID4, [FromQuery (Name = "PlayerID5")][Required()]string playerID5, [FromQuery (Name = "VsTeamID")][Required()]string vsTeamID, [FromQuery (Name = "VsPlayerID1")][Required()]string vsPlayerID1, [FromQuery (Name = "VsPlayerID2")][Required()]string vsPlayerID2, [FromQuery (Name = "VsPlayerID3")][Required()]string vsPlayerID3, [FromQuery (Name = "VsPlayerID4")][Required()]string vsPlayerID4, [FromQuery (Name = "VsPlayerID5")][Required()]string vsPlayerID5, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="playerID"></param>
        /// <param name="vsPlayerID"></param>
        /// <param name="seasonType"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playervsplayer")]
        [ValidateModelState]
        [SwaggerOperation("PlayervsplayerGet")]
        public virtual IActionResult PlayervsplayerGet([FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "VsPlayerID")][Required()]string vsPlayerID, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="seasonID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/playoffpicture")]
        [ValidateModelState]
        [SwaggerOperation("PlayoffpictureGet")]
        public virtual IActionResult PlayoffpictureGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "SeasonID")][Required()]string seasonID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameDate"></param>
        /// <param name="leagueID"></param>
        /// <param name="dayOffset"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/scoreboard")]
        [ValidateModelState]
        [SwaggerOperation("ScoreboardGet")]
        public virtual IActionResult ScoreboardGet([FromQuery (Name = "GameDate")][Required()]string gameDate, [FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "DayOffset")][Required()]string dayOffset)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameDate"></param>
        /// <param name="leagueID"></param>
        /// <param name="dayOffset"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/scoreboardV2")]
        [ValidateModelState]
        [SwaggerOperation("ScoreboardV2Get")]
        public virtual IActionResult ScoreboardV2Get([FromQuery (Name = "GameDate")][Required()]string gameDate, [FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "DayOffset")][Required()]string dayOffset)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="seasonType"></param>
        /// <param name="teamID"></param>
        /// <param name="playerID"></param>
        /// <param name="gameID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="position"></param>
        /// <param name="rookieYear"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <param name="contextMeasure"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/shotchartdetail")]
        [ValidateModelState]
        [SwaggerOperation("ShotchartdetailGet")]
        public virtual IActionResult ShotchartdetailGet([FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "PlayerID")][Required()]string playerID, [FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "Position")][Required()]string position, [FromQuery (Name = "RookieYear")][Required()]string rookieYear, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames, [FromQuery (Name = "ContextMeasure")][Required()]string contextMeasure)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="teamID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <param name="gameID"></param>
        /// <param name="GROUP_ID"></param>
        /// <param name="contextMeasure"></param>
        /// <param name="contextFilter"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/shotchartlineupdetail")]
        [ValidateModelState]
        [SwaggerOperation("ShotchartlineupdetailGet")]
        public virtual IActionResult ShotchartlineupdetailGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames, [FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "GROUP_ID")][Required()]string GROUP_ID, [FromQuery (Name = "ContextMeasure")][Required()]string contextMeasure, [FromQuery (Name = "ContextFilter")][Required()]string contextFilter)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashboardbyclutch")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashboardbyclutchGet")]
        public virtual IActionResult TeamdashboardbyclutchGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashboardbygamesplits")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashboardbygamesplitsGet")]
        public virtual IActionResult TeamdashboardbygamesplitsGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="seasonType"></param>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashboardbygeneralsplits")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashboardbygeneralsplitsGet")]
        public virtual IActionResult TeamdashboardbygeneralsplitsGet([FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashboardbylastngames")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashboardbylastngamesGet")]
        public virtual IActionResult TeamdashboardbylastngamesGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashboardbyopponent")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashboardbyopponentGet")]
        public virtual IActionResult TeamdashboardbyopponentGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashboardbyshootingsplits")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashboardbyshootingsplitsGet")]
        public virtual IActionResult TeamdashboardbyshootingsplitsGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashboardbyteamperformance")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashboardbyteamperformanceGet")]
        public virtual IActionResult TeamdashboardbyteamperformanceGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashboardbyyearoveryear")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashboardbyyearoveryearGet")]
        public virtual IActionResult TeamdashboardbyyearoveryearGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="groupQuantity"></param>
        /// <param name="gameID"></param>
        /// <param name="seasonType"></param>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashlineups")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashlineupsGet")]
        public virtual IActionResult TeamdashlineupsGet([FromQuery (Name = "GroupQuantity")][Required()]string groupQuantity, [FromQuery (Name = "GameID")][Required()]string gameID, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="teamID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashptpass")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashptpassGet")]
        public virtual IActionResult TeamdashptpassGet([FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="teamID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashptreb")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashptrebGet")]
        public virtual IActionResult TeamdashptrebGet([FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perMode"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="teamID"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamdashptshots")]
        [ValidateModelState]
        [SwaggerOperation("TeamdashptshotsGet")]
        public virtual IActionResult TeamdashptshotsGet([FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamgamelog")]
        [ValidateModelState]
        [SwaggerOperation("TeamgamelogGet")]
        public virtual IActionResult TeamgamelogGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="season"></param>
        /// <param name="teamID"></param>
        /// <param name="leagueID"></param>
        /// <param name="seasonType"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teaminfocommon")]
        [ValidateModelState]
        [SwaggerOperation("TeaminfocommonGet")]
        public virtual IActionResult TeaminfocommonGet([FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "SeasonType")][Required()]string seasonType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="seasonType"></param>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamplayerdashboard")]
        [ValidateModelState]
        [SwaggerOperation("TeamplayerdashboardGet")]
        public virtual IActionResult TeamplayerdashboardGet([FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamplayeronoffdetails")]
        [ValidateModelState]
        [SwaggerOperation("TeamplayeronoffdetailsGet")]
        public virtual IActionResult TeamplayeronoffdetailsGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="seasonType"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamplayeronoffsummary")]
        [ValidateModelState]
        [SwaggerOperation("TeamplayeronoffsummaryGet")]
        public virtual IActionResult TeamplayeronoffsummaryGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="teamID"></param>
        /// <param name="vsPlayerID"></param>
        /// <param name="seasonType"></param>
        /// <param name="measureType"></param>
        /// <param name="perMode"></param>
        /// <param name="plusMinus"></param>
        /// <param name="paceAdjust"></param>
        /// <param name="rank"></param>
        /// <param name="season"></param>
        /// <param name="outcome"></param>
        /// <param name="location"></param>
        /// <param name="month"></param>
        /// <param name="seasonSegment"></param>
        /// <param name="dateFrom"></param>
        /// <param name="dateTo"></param>
        /// <param name="opponentTeamID"></param>
        /// <param name="vsConference"></param>
        /// <param name="vsDivision"></param>
        /// <param name="gameSegment"></param>
        /// <param name="period"></param>
        /// <param name="lastNGames"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamvsplayer")]
        [ValidateModelState]
        [SwaggerOperation("TeamvsplayerGet")]
        public virtual IActionResult TeamvsplayerGet([FromQuery (Name = "TeamID")][Required()]string teamID, [FromQuery (Name = "VsPlayerID")][Required()]string vsPlayerID, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "MeasureType")][Required()]string measureType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "PlusMinus")][Required()]string plusMinus, [FromQuery (Name = "PaceAdjust")][Required()]string paceAdjust, [FromQuery (Name = "Rank")][Required()]string rank, [FromQuery (Name = "Season")][Required()]string season, [FromQuery (Name = "Outcome")][Required()]string outcome, [FromQuery (Name = "Location")][Required()]string location, [FromQuery (Name = "Month")][Required()]string month, [FromQuery (Name = "SeasonSegment")][Required()]string seasonSegment, [FromQuery (Name = "DateFrom")][Required()]string dateFrom, [FromQuery (Name = "DateTo")][Required()]string dateTo, [FromQuery (Name = "OpponentTeamID")][Required()]string opponentTeamID, [FromQuery (Name = "VsConference")][Required()]string vsConference, [FromQuery (Name = "VsDivision")][Required()]string vsDivision, [FromQuery (Name = "GameSegment")][Required()]string gameSegment, [FromQuery (Name = "Period")][Required()]string period, [FromQuery (Name = "LastNGames")][Required()]string lastNGames)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="seasonType"></param>
        /// <param name="perMode"></param>
        /// <param name="teamID"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/teamyearbyyearstats")]
        [ValidateModelState]
        [SwaggerOperation("TeamyearbyyearstatsGet")]
        public virtual IActionResult TeamyearbyyearstatsGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "SeasonType")][Required()]string seasonType, [FromQuery (Name = "PerMode")][Required()]string perMode, [FromQuery (Name = "TeamID")][Required()]string teamID)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="leagueID"></param>
        /// <param name="gameDate"></param>
        /// <response code="200">200 OK</response>
        /// <response code="400">Bad request - bad parameters</response>
        /// <response code="404">&#39;No HTTP resource was found that matches the request URI&#39; - possible deprecated endpoint</response>
        [HttpGet]
        [Route("/stats/videoStatus")]
        [ValidateModelState]
        [SwaggerOperation("VideoStatusGet")]
        public virtual IActionResult VideoStatusGet([FromQuery (Name = "LeagueID")][Required()]string leagueID, [FromQuery (Name = "GameDate")][Required()]string gameDate)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
