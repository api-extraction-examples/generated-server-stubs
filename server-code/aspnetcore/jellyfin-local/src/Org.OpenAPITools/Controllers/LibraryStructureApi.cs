/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LibraryStructureApiController : ControllerBase
    { 
        /// <summary>
        /// Add a media path to a library.
        /// </summary>
        /// <param name="mediaPathDto">The media path dto.</param>
        /// <param name="refreshLibrary">Whether to refresh the library.</param>
        /// <response code="204">Media path added.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Library/VirtualFolders/Paths")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("AddMediaPath")]
        public virtual IActionResult AddMediaPath([FromBody]MediaPathDto mediaPathDto, [FromQuery (Name = "refreshLibrary")]bool? refreshLibrary)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a virtual folder.
        /// </summary>
        /// <param name="name">The name of the virtual folder.</param>
        /// <param name="collectionType">The type of the collection.</param>
        /// <param name="paths">The paths of the virtual folder.</param>
        /// <param name="refreshLibrary">Whether to refresh the library.</param>
        /// <param name="addVirtualFolderDto">The library options.</param>
        /// <response code="204">Folder added.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Library/VirtualFolders")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("AddVirtualFolder")]
        public virtual IActionResult AddVirtualFolder([FromQuery (Name = "name")]string name, [FromQuery (Name = "collectionType")]string collectionType, [FromQuery (Name = "paths")]List<string> paths, [FromQuery (Name = "refreshLibrary")]bool? refreshLibrary, [FromBody]AddVirtualFolderDto addVirtualFolderDto)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets all virtual folders.
        /// </summary>
        /// <response code="200">Virtual folders retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Library/VirtualFolders")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetVirtualFolders")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<VirtualFolderInfo>), description: "Virtual folders retrieved.")]
        public virtual IActionResult GetVirtualFolders()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<VirtualFolderInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"RefreshProgress\" : 6.027456183070403,\n  \"PrimaryImageItemId\" : \"PrimaryImageItemId\",\n  \"CollectionType\" : \"CollectionType\",\n  \"Locations\" : [ \"Locations\", \"Locations\" ],\n  \"LibraryOptions\" : {\n    \"SaveSubtitlesWithMedia\" : true,\n    \"EnableInternetProviders\" : true,\n    \"MetadataCountryCode\" : \"MetadataCountryCode\",\n    \"MetadataSavers\" : [ \"MetadataSavers\", \"MetadataSavers\" ],\n    \"SaveLocalMetadata\" : true,\n    \"SeasonZeroDisplayName\" : \"SeasonZeroDisplayName\",\n    \"EnableEmbeddedTitles\" : true,\n    \"EnableChapterImageExtraction\" : true,\n    \"AutomaticRefreshIntervalDays\" : 0,\n    \"SubtitleFetcherOrder\" : [ \"SubtitleFetcherOrder\", \"SubtitleFetcherOrder\" ],\n    \"TypeOptions\" : [ {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    }, {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    } ],\n    \"EnableRealtimeMonitor\" : true,\n    \"EnableAutomaticSeriesGrouping\" : true,\n    \"ExtractChapterImagesDuringLibraryScan\" : true,\n    \"SubtitleDownloadLanguages\" : [ \"SubtitleDownloadLanguages\", \"SubtitleDownloadLanguages\" ],\n    \"DisabledLocalMetadataReaders\" : [ \"DisabledLocalMetadataReaders\", \"DisabledLocalMetadataReaders\" ],\n    \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n    \"EnableEmbeddedEpisodeInfos\" : true,\n    \"SkipSubtitlesIfAudioTrackMatches\" : true,\n    \"RequirePerfectSubtitleMatch\" : true,\n    \"EnablePhotos\" : true,\n    \"SkipSubtitlesIfEmbeddedSubtitlesPresent\" : true,\n    \"DisabledSubtitleFetchers\" : [ \"DisabledSubtitleFetchers\", \"DisabledSubtitleFetchers\" ],\n    \"PathInfos\" : [ {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    }, {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    } ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  },\n  \"ItemId\" : \"ItemId\",\n  \"RefreshStatus\" : \"RefreshStatus\",\n  \"Name\" : \"Name\"\n}, {\n  \"RefreshProgress\" : 6.027456183070403,\n  \"PrimaryImageItemId\" : \"PrimaryImageItemId\",\n  \"CollectionType\" : \"CollectionType\",\n  \"Locations\" : [ \"Locations\", \"Locations\" ],\n  \"LibraryOptions\" : {\n    \"SaveSubtitlesWithMedia\" : true,\n    \"EnableInternetProviders\" : true,\n    \"MetadataCountryCode\" : \"MetadataCountryCode\",\n    \"MetadataSavers\" : [ \"MetadataSavers\", \"MetadataSavers\" ],\n    \"SaveLocalMetadata\" : true,\n    \"SeasonZeroDisplayName\" : \"SeasonZeroDisplayName\",\n    \"EnableEmbeddedTitles\" : true,\n    \"EnableChapterImageExtraction\" : true,\n    \"AutomaticRefreshIntervalDays\" : 0,\n    \"SubtitleFetcherOrder\" : [ \"SubtitleFetcherOrder\", \"SubtitleFetcherOrder\" ],\n    \"TypeOptions\" : [ {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    }, {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    } ],\n    \"EnableRealtimeMonitor\" : true,\n    \"EnableAutomaticSeriesGrouping\" : true,\n    \"ExtractChapterImagesDuringLibraryScan\" : true,\n    \"SubtitleDownloadLanguages\" : [ \"SubtitleDownloadLanguages\", \"SubtitleDownloadLanguages\" ],\n    \"DisabledLocalMetadataReaders\" : [ \"DisabledLocalMetadataReaders\", \"DisabledLocalMetadataReaders\" ],\n    \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n    \"EnableEmbeddedEpisodeInfos\" : true,\n    \"SkipSubtitlesIfAudioTrackMatches\" : true,\n    \"RequirePerfectSubtitleMatch\" : true,\n    \"EnablePhotos\" : true,\n    \"SkipSubtitlesIfEmbeddedSubtitlesPresent\" : true,\n    \"DisabledSubtitleFetchers\" : [ \"DisabledSubtitleFetchers\", \"DisabledSubtitleFetchers\" ],\n    \"PathInfos\" : [ {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    }, {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    } ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  },\n  \"ItemId\" : \"ItemId\",\n  \"RefreshStatus\" : \"RefreshStatus\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"RefreshProgress\" : 6.027456183070403,\n  \"PrimaryImageItemId\" : \"PrimaryImageItemId\",\n  \"CollectionType\" : \"CollectionType\",\n  \"Locations\" : [ \"Locations\", \"Locations\" ],\n  \"LibraryOptions\" : {\n    \"SaveSubtitlesWithMedia\" : true,\n    \"EnableInternetProviders\" : true,\n    \"MetadataCountryCode\" : \"MetadataCountryCode\",\n    \"MetadataSavers\" : [ \"MetadataSavers\", \"MetadataSavers\" ],\n    \"SaveLocalMetadata\" : true,\n    \"SeasonZeroDisplayName\" : \"SeasonZeroDisplayName\",\n    \"EnableEmbeddedTitles\" : true,\n    \"EnableChapterImageExtraction\" : true,\n    \"AutomaticRefreshIntervalDays\" : 0,\n    \"SubtitleFetcherOrder\" : [ \"SubtitleFetcherOrder\", \"SubtitleFetcherOrder\" ],\n    \"TypeOptions\" : [ {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    }, {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    } ],\n    \"EnableRealtimeMonitor\" : true,\n    \"EnableAutomaticSeriesGrouping\" : true,\n    \"ExtractChapterImagesDuringLibraryScan\" : true,\n    \"SubtitleDownloadLanguages\" : [ \"SubtitleDownloadLanguages\", \"SubtitleDownloadLanguages\" ],\n    \"DisabledLocalMetadataReaders\" : [ \"DisabledLocalMetadataReaders\", \"DisabledLocalMetadataReaders\" ],\n    \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n    \"EnableEmbeddedEpisodeInfos\" : true,\n    \"SkipSubtitlesIfAudioTrackMatches\" : true,\n    \"RequirePerfectSubtitleMatch\" : true,\n    \"EnablePhotos\" : true,\n    \"SkipSubtitlesIfEmbeddedSubtitlesPresent\" : true,\n    \"DisabledSubtitleFetchers\" : [ \"DisabledSubtitleFetchers\", \"DisabledSubtitleFetchers\" ],\n    \"PathInfos\" : [ {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    }, {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    } ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  },\n  \"ItemId\" : \"ItemId\",\n  \"RefreshStatus\" : \"RefreshStatus\",\n  \"Name\" : \"Name\"\n}, {\n  \"RefreshProgress\" : 6.027456183070403,\n  \"PrimaryImageItemId\" : \"PrimaryImageItemId\",\n  \"CollectionType\" : \"CollectionType\",\n  \"Locations\" : [ \"Locations\", \"Locations\" ],\n  \"LibraryOptions\" : {\n    \"SaveSubtitlesWithMedia\" : true,\n    \"EnableInternetProviders\" : true,\n    \"MetadataCountryCode\" : \"MetadataCountryCode\",\n    \"MetadataSavers\" : [ \"MetadataSavers\", \"MetadataSavers\" ],\n    \"SaveLocalMetadata\" : true,\n    \"SeasonZeroDisplayName\" : \"SeasonZeroDisplayName\",\n    \"EnableEmbeddedTitles\" : true,\n    \"EnableChapterImageExtraction\" : true,\n    \"AutomaticRefreshIntervalDays\" : 0,\n    \"SubtitleFetcherOrder\" : [ \"SubtitleFetcherOrder\", \"SubtitleFetcherOrder\" ],\n    \"TypeOptions\" : [ {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    }, {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    } ],\n    \"EnableRealtimeMonitor\" : true,\n    \"EnableAutomaticSeriesGrouping\" : true,\n    \"ExtractChapterImagesDuringLibraryScan\" : true,\n    \"SubtitleDownloadLanguages\" : [ \"SubtitleDownloadLanguages\", \"SubtitleDownloadLanguages\" ],\n    \"DisabledLocalMetadataReaders\" : [ \"DisabledLocalMetadataReaders\", \"DisabledLocalMetadataReaders\" ],\n    \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n    \"EnableEmbeddedEpisodeInfos\" : true,\n    \"SkipSubtitlesIfAudioTrackMatches\" : true,\n    \"RequirePerfectSubtitleMatch\" : true,\n    \"EnablePhotos\" : true,\n    \"SkipSubtitlesIfEmbeddedSubtitlesPresent\" : true,\n    \"DisabledSubtitleFetchers\" : [ \"DisabledSubtitleFetchers\", \"DisabledSubtitleFetchers\" ],\n    \"PathInfos\" : [ {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    }, {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    } ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  },\n  \"ItemId\" : \"ItemId\",\n  \"RefreshStatus\" : \"RefreshStatus\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"RefreshProgress\" : 6.027456183070403,\n  \"PrimaryImageItemId\" : \"PrimaryImageItemId\",\n  \"CollectionType\" : \"CollectionType\",\n  \"Locations\" : [ \"Locations\", \"Locations\" ],\n  \"LibraryOptions\" : {\n    \"SaveSubtitlesWithMedia\" : true,\n    \"EnableInternetProviders\" : true,\n    \"MetadataCountryCode\" : \"MetadataCountryCode\",\n    \"MetadataSavers\" : [ \"MetadataSavers\", \"MetadataSavers\" ],\n    \"SaveLocalMetadata\" : true,\n    \"SeasonZeroDisplayName\" : \"SeasonZeroDisplayName\",\n    \"EnableEmbeddedTitles\" : true,\n    \"EnableChapterImageExtraction\" : true,\n    \"AutomaticRefreshIntervalDays\" : 0,\n    \"SubtitleFetcherOrder\" : [ \"SubtitleFetcherOrder\", \"SubtitleFetcherOrder\" ],\n    \"TypeOptions\" : [ {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    }, {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    } ],\n    \"EnableRealtimeMonitor\" : true,\n    \"EnableAutomaticSeriesGrouping\" : true,\n    \"ExtractChapterImagesDuringLibraryScan\" : true,\n    \"SubtitleDownloadLanguages\" : [ \"SubtitleDownloadLanguages\", \"SubtitleDownloadLanguages\" ],\n    \"DisabledLocalMetadataReaders\" : [ \"DisabledLocalMetadataReaders\", \"DisabledLocalMetadataReaders\" ],\n    \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n    \"EnableEmbeddedEpisodeInfos\" : true,\n    \"SkipSubtitlesIfAudioTrackMatches\" : true,\n    \"RequirePerfectSubtitleMatch\" : true,\n    \"EnablePhotos\" : true,\n    \"SkipSubtitlesIfEmbeddedSubtitlesPresent\" : true,\n    \"DisabledSubtitleFetchers\" : [ \"DisabledSubtitleFetchers\", \"DisabledSubtitleFetchers\" ],\n    \"PathInfos\" : [ {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    }, {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    } ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  },\n  \"ItemId\" : \"ItemId\",\n  \"RefreshStatus\" : \"RefreshStatus\",\n  \"Name\" : \"Name\"\n}, {\n  \"RefreshProgress\" : 6.027456183070403,\n  \"PrimaryImageItemId\" : \"PrimaryImageItemId\",\n  \"CollectionType\" : \"CollectionType\",\n  \"Locations\" : [ \"Locations\", \"Locations\" ],\n  \"LibraryOptions\" : {\n    \"SaveSubtitlesWithMedia\" : true,\n    \"EnableInternetProviders\" : true,\n    \"MetadataCountryCode\" : \"MetadataCountryCode\",\n    \"MetadataSavers\" : [ \"MetadataSavers\", \"MetadataSavers\" ],\n    \"SaveLocalMetadata\" : true,\n    \"SeasonZeroDisplayName\" : \"SeasonZeroDisplayName\",\n    \"EnableEmbeddedTitles\" : true,\n    \"EnableChapterImageExtraction\" : true,\n    \"AutomaticRefreshIntervalDays\" : 0,\n    \"SubtitleFetcherOrder\" : [ \"SubtitleFetcherOrder\", \"SubtitleFetcherOrder\" ],\n    \"TypeOptions\" : [ {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    }, {\n      \"Type\" : \"Type\",\n      \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n      \"ImageFetchers\" : [ \"ImageFetchers\", \"ImageFetchers\" ],\n      \"ImageOptions\" : [ {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      }, {\n        \"Limit\" : 0,\n        \"MinWidth\" : 6\n      } ],\n      \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n      \"MetadataFetchers\" : [ \"MetadataFetchers\", \"MetadataFetchers\" ]\n    } ],\n    \"EnableRealtimeMonitor\" : true,\n    \"EnableAutomaticSeriesGrouping\" : true,\n    \"ExtractChapterImagesDuringLibraryScan\" : true,\n    \"SubtitleDownloadLanguages\" : [ \"SubtitleDownloadLanguages\", \"SubtitleDownloadLanguages\" ],\n    \"DisabledLocalMetadataReaders\" : [ \"DisabledLocalMetadataReaders\", \"DisabledLocalMetadataReaders\" ],\n    \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n    \"EnableEmbeddedEpisodeInfos\" : true,\n    \"SkipSubtitlesIfAudioTrackMatches\" : true,\n    \"RequirePerfectSubtitleMatch\" : true,\n    \"EnablePhotos\" : true,\n    \"SkipSubtitlesIfEmbeddedSubtitlesPresent\" : true,\n    \"DisabledSubtitleFetchers\" : [ \"DisabledSubtitleFetchers\", \"DisabledSubtitleFetchers\" ],\n    \"PathInfos\" : [ {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    }, {\n      \"Path\" : \"Path\",\n      \"NetworkPath\" : \"NetworkPath\"\n    } ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  },\n  \"ItemId\" : \"ItemId\",\n  \"RefreshStatus\" : \"RefreshStatus\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<VirtualFolderInfo>>(exampleJson)
            : default(List<VirtualFolderInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove a media path.
        /// </summary>
        /// <param name="name">The name of the library.</param>
        /// <param name="path">The path to remove.</param>
        /// <param name="refreshLibrary">Whether to refresh the library.</param>
        /// <response code="204">Media path removed.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("/Library/VirtualFolders/Paths")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("RemoveMediaPath")]
        public virtual IActionResult RemoveMediaPath([FromQuery (Name = "name")]string name, [FromQuery (Name = "path")]string path, [FromQuery (Name = "refreshLibrary")]bool? refreshLibrary)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Removes a virtual folder.
        /// </summary>
        /// <param name="name">The name of the folder.</param>
        /// <param name="refreshLibrary">Whether to refresh the library.</param>
        /// <response code="204">Folder removed.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("/Library/VirtualFolders")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("RemoveVirtualFolder")]
        public virtual IActionResult RemoveVirtualFolder([FromQuery (Name = "name")]string name, [FromQuery (Name = "refreshLibrary")]bool? refreshLibrary)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Renames a virtual folder.
        /// </summary>
        /// <param name="name">The name of the virtual folder.</param>
        /// <param name="newName">The new name.</param>
        /// <param name="refreshLibrary">Whether to refresh the library.</param>
        /// <response code="204">Folder renamed.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Library doesn&#39;t exist.</response>
        /// <response code="409">Library already exists.</response>
        [HttpPost]
        [Route("/Library/VirtualFolders/Name")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("RenameVirtualFolder")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Library doesn&#39;t exist.")]
        [SwaggerResponse(statusCode: 409, type: typeof(ProblemDetails), description: "Library already exists.")]
        public virtual IActionResult RenameVirtualFolder([FromQuery (Name = "name")]string name, [FromQuery (Name = "newName")]string newName, [FromQuery (Name = "refreshLibrary")]bool? refreshLibrary)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Update library options.
        /// </summary>
        /// <param name="updateLibraryOptionsDto">The library name and options.</param>
        /// <response code="204">Library updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Library/VirtualFolders/LibraryOptions")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateLibraryOptions")]
        public virtual IActionResult UpdateLibraryOptions([FromBody]UpdateLibraryOptionsDto updateLibraryOptionsDto)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates a media path.
        /// </summary>
        /// <param name="name">The name of the library.</param>
        /// <param name="mediaPathInfo">The path info.</param>
        /// <response code="204">Media path updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Library/VirtualFolders/Paths/Update")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateMediaPath")]
        public virtual IActionResult UpdateMediaPath([FromQuery (Name = "name")]string name, [FromBody]MediaPathInfo mediaPathInfo)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }
    }
}
