/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PlaystateApiController : ControllerBase
    { 
        /// <summary>
        /// Marks an item as played for user.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="datePlayed">Optional. The date the item was played.</param>
        /// <response code="200">Item marked as played.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Users/{userId}/PlayedItems/{itemId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("MarkPlayedItem")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserItemDataDto), description: "Item marked as played.")]
        public virtual IActionResult MarkPlayedItem([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "itemId")][Required]Guid itemId, [FromQuery (Name = "datePlayed")]DateTime? datePlayed)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserItemDataDto));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"Played\" : true,\n  \"UnplayedItemCount\" : 6,\n  \"PlayedPercentage\" : 5.507386964179881,\n  \"PlayCount\" : 0,\n  \"Rating\" : 4.86315908102884,\n  \"PlaybackPositionTicks\" : 7,\n  \"LastPlayedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Likes\" : true,\n  \"IsFavorite\" : true,\n  \"ItemId\" : \"ItemId\",\n  \"Key\" : \"Key\"\n}";
            exampleJson = "{\n  \"Played\" : true,\n  \"UnplayedItemCount\" : 6,\n  \"PlayedPercentage\" : 5.507386964179881,\n  \"PlayCount\" : 0,\n  \"Rating\" : 4.86315908102884,\n  \"PlaybackPositionTicks\" : 7,\n  \"LastPlayedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Likes\" : true,\n  \"IsFavorite\" : true,\n  \"ItemId\" : \"ItemId\",\n  \"Key\" : \"Key\"\n}";
            exampleJson = "{\n  \"Played\" : true,\n  \"UnplayedItemCount\" : 6,\n  \"PlayedPercentage\" : 5.507386964179881,\n  \"PlayCount\" : 0,\n  \"Rating\" : 4.86315908102884,\n  \"PlaybackPositionTicks\" : 7,\n  \"LastPlayedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Likes\" : true,\n  \"IsFavorite\" : true,\n  \"ItemId\" : \"ItemId\",\n  \"Key\" : \"Key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserItemDataDto>(exampleJson)
            : default(UserItemDataDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Marks an item as unplayed for user.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <response code="200">Item marked as unplayed.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("/Users/{userId}/PlayedItems/{itemId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("MarkUnplayedItem")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserItemDataDto), description: "Item marked as unplayed.")]
        public virtual IActionResult MarkUnplayedItem([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "itemId")][Required]Guid itemId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserItemDataDto));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"Played\" : true,\n  \"UnplayedItemCount\" : 6,\n  \"PlayedPercentage\" : 5.507386964179881,\n  \"PlayCount\" : 0,\n  \"Rating\" : 4.86315908102884,\n  \"PlaybackPositionTicks\" : 7,\n  \"LastPlayedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Likes\" : true,\n  \"IsFavorite\" : true,\n  \"ItemId\" : \"ItemId\",\n  \"Key\" : \"Key\"\n}";
            exampleJson = "{\n  \"Played\" : true,\n  \"UnplayedItemCount\" : 6,\n  \"PlayedPercentage\" : 5.507386964179881,\n  \"PlayCount\" : 0,\n  \"Rating\" : 4.86315908102884,\n  \"PlaybackPositionTicks\" : 7,\n  \"LastPlayedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Likes\" : true,\n  \"IsFavorite\" : true,\n  \"ItemId\" : \"ItemId\",\n  \"Key\" : \"Key\"\n}";
            exampleJson = "{\n  \"Played\" : true,\n  \"UnplayedItemCount\" : 6,\n  \"PlayedPercentage\" : 5.507386964179881,\n  \"PlayCount\" : 0,\n  \"Rating\" : 4.86315908102884,\n  \"PlaybackPositionTicks\" : 7,\n  \"LastPlayedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Likes\" : true,\n  \"IsFavorite\" : true,\n  \"ItemId\" : \"ItemId\",\n  \"Key\" : \"Key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserItemDataDto>(exampleJson)
            : default(UserItemDataDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reports a user&#39;s playback progress.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource.</param>
        /// <param name="positionTicks">Optional. The current position, in ticks. 1 tick &#x3D; 10000 ms.</param>
        /// <param name="audioStreamIndex">The audio stream index.</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index.</param>
        /// <param name="volumeLevel">Scale of 0-100.</param>
        /// <param name="playMethod">The play method.</param>
        /// <param name="liveStreamId">The live stream id.</param>
        /// <param name="playSessionId">The play session id.</param>
        /// <param name="repeatMode">The repeat mode.</param>
        /// <param name="isPaused">Indicates if the player is paused.</param>
        /// <param name="isMuted">Indicates if the player is muted.</param>
        /// <response code="204">Play progress recorded.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Users/{userId}/PlayingItems/{itemId}/Progress")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("OnPlaybackProgress")]
        public virtual IActionResult OnPlaybackProgress([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "itemId")][Required]Guid itemId, [FromQuery (Name = "mediaSourceId")]string mediaSourceId, [FromQuery (Name = "positionTicks")]long? positionTicks, [FromQuery (Name = "audioStreamIndex")]int? audioStreamIndex, [FromQuery (Name = "subtitleStreamIndex")]int? subtitleStreamIndex, [FromQuery (Name = "volumeLevel")]int? volumeLevel, [FromQuery (Name = "playMethod")]PlayMethod playMethod, [FromQuery (Name = "liveStreamId")]string liveStreamId, [FromQuery (Name = "playSessionId")]string playSessionId, [FromQuery (Name = "repeatMode")]RepeatMode repeatMode, [FromQuery (Name = "isPaused")]bool? isPaused, [FromQuery (Name = "isMuted")]bool? isMuted)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Reports that a user has begun playing an item.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource.</param>
        /// <param name="audioStreamIndex">The audio stream index.</param>
        /// <param name="subtitleStreamIndex">The subtitle stream index.</param>
        /// <param name="playMethod">The play method.</param>
        /// <param name="liveStreamId">The live stream id.</param>
        /// <param name="playSessionId">The play session id.</param>
        /// <param name="canSeek">Indicates if the client can seek.</param>
        /// <response code="204">Play start recorded.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Users/{userId}/PlayingItems/{itemId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("OnPlaybackStart")]
        public virtual IActionResult OnPlaybackStart([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "itemId")][Required]Guid itemId, [FromQuery (Name = "mediaSourceId")]string mediaSourceId, [FromQuery (Name = "audioStreamIndex")]int? audioStreamIndex, [FromQuery (Name = "subtitleStreamIndex")]int? subtitleStreamIndex, [FromQuery (Name = "playMethod")]PlayMethod playMethod, [FromQuery (Name = "liveStreamId")]string liveStreamId, [FromQuery (Name = "playSessionId")]string playSessionId, [FromQuery (Name = "canSeek")]bool? canSeek)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Reports that a user has stopped playing an item.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="itemId">Item id.</param>
        /// <param name="mediaSourceId">The id of the MediaSource.</param>
        /// <param name="nextMediaType">The next media type that will play.</param>
        /// <param name="positionTicks">Optional. The position, in ticks, where playback stopped. 1 tick &#x3D; 10000 ms.</param>
        /// <param name="liveStreamId">The live stream id.</param>
        /// <param name="playSessionId">The play session id.</param>
        /// <response code="204">Playback stop recorded.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("/Users/{userId}/PlayingItems/{itemId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("OnPlaybackStopped")]
        public virtual IActionResult OnPlaybackStopped([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "itemId")][Required]Guid itemId, [FromQuery (Name = "mediaSourceId")]string mediaSourceId, [FromQuery (Name = "nextMediaType")]string nextMediaType, [FromQuery (Name = "positionTicks")]long? positionTicks, [FromQuery (Name = "liveStreamId")]string liveStreamId, [FromQuery (Name = "playSessionId")]string playSessionId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Pings a playback session.
        /// </summary>
        /// <param name="playSessionId">Playback session id.</param>
        /// <response code="204">Playback session pinged.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Sessions/Playing/Ping")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("PingPlaybackSession")]
        public virtual IActionResult PingPlaybackSession([FromQuery (Name = "playSessionId")]string playSessionId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Reports playback progress within a session.
        /// </summary>
        /// <param name="playbackProgressInfo">The playback progress info.</param>
        /// <response code="204">Playback progress recorded.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Sessions/Playing/Progress")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("ReportPlaybackProgress")]
        public virtual IActionResult ReportPlaybackProgress([FromBody]PlaybackProgressInfo playbackProgressInfo)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Reports playback has started within a session.
        /// </summary>
        /// <param name="playbackStartInfo">The playback start info.</param>
        /// <response code="204">Playback start recorded.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Sessions/Playing")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("ReportPlaybackStart")]
        public virtual IActionResult ReportPlaybackStart([FromBody]PlaybackStartInfo playbackStartInfo)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Reports playback has stopped within a session.
        /// </summary>
        /// <param name="playbackStopInfo">The playback stop info.</param>
        /// <response code="204">Playback stop recorded.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Sessions/Playing/Stopped")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("ReportPlaybackStopped")]
        public virtual IActionResult ReportPlaybackStopped([FromBody]PlaybackStopInfo playbackStopInfo)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }
    }
}
