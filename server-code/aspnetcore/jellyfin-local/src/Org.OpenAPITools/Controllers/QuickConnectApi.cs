/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class QuickConnectApiController : ControllerBase
    { 
        /// <summary>
        /// Temporarily activates quick connect for five minutes.
        /// </summary>
        /// <response code="204">Quick connect has been temporarily activated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Quick connect is unavailable on this server.</response>
        [HttpPost]
        [Route("/QuickConnect/Activate")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("Activate")]
        [SwaggerResponse(statusCode: 403, type: typeof(ProblemDetails), description: "Quick connect is unavailable on this server.")]
        public virtual IActionResult Activate()
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Authorizes a pending quick connect request.
        /// </summary>
        /// <param name="code">Quick connect code to authorize.</param>
        /// <response code="200">Quick connect result authorized successfully.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Unknown user id.</response>
        [HttpPost]
        [Route("/QuickConnect/Authorize")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("Authorize")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Quick connect result authorized successfully.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ProblemDetails), description: "Unknown user id.")]
        public virtual IActionResult Authorize([FromQuery (Name = "code")][Required()]string code)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<bool>(exampleJson)
            : default(bool);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Enables or disables quick connect.
        /// </summary>
        /// <param name="status">New MediaBrowser.Model.QuickConnect.QuickConnectState.</param>
        /// <response code="204">Quick connect state set successfully.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/QuickConnect/Available")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("Available")]
        public virtual IActionResult Available([FromQuery (Name = "status")]QuickConnectState status)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Attempts to retrieve authentication information.
        /// </summary>
        /// <param name="secret">Secret previously returned from the Initiate endpoint.</param>
        /// <response code="200">Quick connect result returned.</response>
        /// <response code="404">Unknown quick connect secret.</response>
        [HttpGet]
        [Route("/QuickConnect/Connect")]
        [ValidateModelState]
        [SwaggerOperation("Connect")]
        [SwaggerResponse(statusCode: 200, type: typeof(QuickConnectResult), description: "Quick connect result returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Unknown quick connect secret.")]
        public virtual IActionResult Connect([FromQuery (Name = "secret")][Required()]string secret)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(QuickConnectResult));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "{\n  \"Secret\" : \"Secret\",\n  \"Authenticated\" : true,\n  \"Authentication\" : \"Authentication\",\n  \"Error\" : \"Error\",\n  \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Code\" : \"Code\"\n}";
            exampleJson = "{\n  \"Secret\" : \"Secret\",\n  \"Authenticated\" : true,\n  \"Authentication\" : \"Authentication\",\n  \"Error\" : \"Error\",\n  \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Code\" : \"Code\"\n}";
            exampleJson = "{\n  \"Secret\" : \"Secret\",\n  \"Authenticated\" : true,\n  \"Authentication\" : \"Authentication\",\n  \"Error\" : \"Error\",\n  \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Code\" : \"Code\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<QuickConnectResult>(exampleJson)
            : default(QuickConnectResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deauthorize all quick connect devices for the current user.
        /// </summary>
        /// <response code="200">All quick connect devices were deleted.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/QuickConnect/Deauthorize")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("Deauthorize")]
        [SwaggerResponse(statusCode: 200, type: typeof(int), description: "All quick connect devices were deleted.")]
        public virtual IActionResult Deauthorize()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(int));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<int>(exampleJson)
            : default(int);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the current quick connect state.
        /// </summary>
        /// <response code="200">Quick connect state returned.</response>
        [HttpGet]
        [Route("/QuickConnect/Status")]
        [ValidateModelState]
        [SwaggerOperation("GetStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(QuickConnectState), description: "Quick connect state returned.")]
        public virtual IActionResult GetStatus()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(QuickConnectState));
            string exampleJson = null;
            exampleJson = "null";
            exampleJson = "null";
            exampleJson = "null";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<QuickConnectState>(exampleJson)
            : default(QuickConnectState);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Initiate a new quick connect request.
        /// </summary>
        /// <response code="200">Quick connect request successfully created.</response>
        /// <response code="401">Quick connect is not active on this server.</response>
        [HttpGet]
        [Route("/QuickConnect/Initiate")]
        [ValidateModelState]
        [SwaggerOperation("Initiate")]
        [SwaggerResponse(statusCode: 200, type: typeof(QuickConnectResult), description: "Quick connect request successfully created.")]
        public virtual IActionResult Initiate()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(QuickConnectResult));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"Secret\" : \"Secret\",\n  \"Authenticated\" : true,\n  \"Authentication\" : \"Authentication\",\n  \"Error\" : \"Error\",\n  \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Code\" : \"Code\"\n}";
            exampleJson = "{\n  \"Secret\" : \"Secret\",\n  \"Authenticated\" : true,\n  \"Authentication\" : \"Authentication\",\n  \"Error\" : \"Error\",\n  \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Code\" : \"Code\"\n}";
            exampleJson = "{\n  \"Secret\" : \"Secret\",\n  \"Authenticated\" : true,\n  \"Authentication\" : \"Authentication\",\n  \"Error\" : \"Error\",\n  \"DateAdded\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Code\" : \"Code\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<QuickConnectResult>(exampleJson)
            : default(QuickConnectResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
