/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VideoHlsApiController : ControllerBase
    { 
        /// <summary>
        /// Gets a hls live stream.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">The audio container.</param>
        /// <param name="varStatic">Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false.</param>
        /// <param name="varParams">The streaming parameters.</param>
        /// <param name="tag">The tag.</param>
        /// <param name="deviceProfileId">Optional. The dlna device profile id to utilize.</param>
        /// <param name="playSessionId">The play session id.</param>
        /// <param name="segmentContainer">The segment container.</param>
        /// <param name="segmentLength">The segment lenght.</param>
        /// <param name="minSegments">The minimum number of segments.</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version.</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed.</param>
        /// <param name="audioCodec">Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.</param>
        /// <param name="enableAutoStreamCopy">Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.</param>
        /// <param name="allowVideoStreamCopy">Whether or not to allow copying of the video stream url.</param>
        /// <param name="allowAudioStreamCopy">Whether or not to allow copying of the audio stream url.</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames.</param>
        /// <param name="audioSampleRate">Optional. Specify a specific audio sample rate, e.g. 44100.</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth.</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.</param>
        /// <param name="audioChannels">Optional. Specify a specific number of audio channels to encode to, e.g. 2.</param>
        /// <param name="maxAudioChannels">Optional. Specify a maximum number of audio channels to encode to, e.g. 2.</param>
        /// <param name="profile">Optional. Specify a specific an encoder profile (varies by encoder), e.g. main, baseline, high.</param>
        /// <param name="level">Optional. Specify a level for the encoder profile (varies by encoder), e.g. 3, 3.1.</param>
        /// <param name="framerate">Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.</param>
        /// <param name="maxFramerate">Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.</param>
        /// <param name="copyTimestamps">Whether or not to copy timestamps when transcoding with an offset. Defaults to false.</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.</param>
        /// <param name="width">Optional. The fixed horizontal resolution of the encoded video.</param>
        /// <param name="height">Optional. The fixed vertical resolution of the encoded video.</param>
        /// <param name="videoBitRate">Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.</param>
        /// <param name="subtitleStreamIndex">Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.</param>
        /// <param name="subtitleMethod">Optional. Specify the subtitle delivery method.</param>
        /// <param name="maxRefFrames">Optional.</param>
        /// <param name="maxVideoBitDepth">Optional. The maximum video bit depth.</param>
        /// <param name="requireAvc">Optional. Whether to require avc.</param>
        /// <param name="deInterlace">Optional. Whether to deinterlace the video.</param>
        /// <param name="requireNonAnamorphic">Optional. Whether to require a non anamorphic stream.</param>
        /// <param name="transcodingMaxAudioChannels">Optional. The maximum number of audio channels to transcode.</param>
        /// <param name="cpuCoreLimit">Optional. The limit of how many cpu cores to use.</param>
        /// <param name="liveStreamId">The live stream id.</param>
        /// <param name="enableMpegtsM2TsMode">Optional. Whether to enable the MpegtsM2Ts mode.</param>
        /// <param name="videoCodec">Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h265, h264, mpeg4, theora, vpx, wmv.</param>
        /// <param name="subtitleCodec">Optional. Specify a subtitle codec to encode to.</param>
        /// <param name="transcodeReasons">Optional. The transcoding reason.</param>
        /// <param name="audioStreamIndex">Optional. The index of the audio stream to use. If omitted the first audio stream will be used.</param>
        /// <param name="videoStreamIndex">Optional. The index of the video stream to use. If omitted the first video stream will be used.</param>
        /// <param name="context">Optional. The MediaBrowser.Model.Dlna.EncodingContext.</param>
        /// <param name="streamOptions">Optional. The streaming options.</param>
        /// <param name="maxWidth">Optional. The max width.</param>
        /// <param name="maxHeight">Optional. The max height.</param>
        /// <param name="enableSubtitlesInManifest">Optional. Whether to enable subtitles in the manifest.</param>
        /// <response code="200">Hls live stream retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Videos/{itemId}/live.m3u8")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetLiveHlsStream")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Hls live stream retrieved.")]
        public virtual IActionResult GetLiveHlsStream([FromRoute (Name = "itemId")][Required]Guid itemId, [FromQuery (Name = "container")]string container, [FromQuery (Name = "static")]bool? varStatic, [FromQuery (Name = "params")]string varParams, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "deviceProfileId")]string deviceProfileId, [FromQuery (Name = "playSessionId")]string playSessionId, [FromQuery (Name = "segmentContainer")]string segmentContainer, [FromQuery (Name = "segmentLength")]int? segmentLength, [FromQuery (Name = "minSegments")]int? minSegments, [FromQuery (Name = "mediaSourceId")]string mediaSourceId, [FromQuery (Name = "deviceId")]string deviceId, [FromQuery (Name = "audioCodec")]string audioCodec, [FromQuery (Name = "enableAutoStreamCopy")]bool? enableAutoStreamCopy, [FromQuery (Name = "allowVideoStreamCopy")]bool? allowVideoStreamCopy, [FromQuery (Name = "allowAudioStreamCopy")]bool? allowAudioStreamCopy, [FromQuery (Name = "breakOnNonKeyFrames")]bool? breakOnNonKeyFrames, [FromQuery (Name = "audioSampleRate")]int? audioSampleRate, [FromQuery (Name = "maxAudioBitDepth")]int? maxAudioBitDepth, [FromQuery (Name = "audioBitRate")]int? audioBitRate, [FromQuery (Name = "audioChannels")]int? audioChannels, [FromQuery (Name = "maxAudioChannels")]int? maxAudioChannels, [FromQuery (Name = "profile")]string profile, [FromQuery (Name = "level")]string level, [FromQuery (Name = "framerate")]float? framerate, [FromQuery (Name = "maxFramerate")]float? maxFramerate, [FromQuery (Name = "copyTimestamps")]bool? copyTimestamps, [FromQuery (Name = "startTimeTicks")]long? startTimeTicks, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "videoBitRate")]int? videoBitRate, [FromQuery (Name = "subtitleStreamIndex")]int? subtitleStreamIndex, [FromQuery (Name = "subtitleMethod")]SubtitleDeliveryMethod subtitleMethod, [FromQuery (Name = "maxRefFrames")]int? maxRefFrames, [FromQuery (Name = "maxVideoBitDepth")]int? maxVideoBitDepth, [FromQuery (Name = "requireAvc")]bool? requireAvc, [FromQuery (Name = "deInterlace")]bool? deInterlace, [FromQuery (Name = "requireNonAnamorphic")]bool? requireNonAnamorphic, [FromQuery (Name = "transcodingMaxAudioChannels")]int? transcodingMaxAudioChannels, [FromQuery (Name = "cpuCoreLimit")]int? cpuCoreLimit, [FromQuery (Name = "liveStreamId")]string liveStreamId, [FromQuery (Name = "enableMpegtsM2TsMode")]bool? enableMpegtsM2TsMode, [FromQuery (Name = "videoCodec")]string videoCodec, [FromQuery (Name = "subtitleCodec")]string subtitleCodec, [FromQuery (Name = "transcodeReasons")]string transcodeReasons, [FromQuery (Name = "audioStreamIndex")]int? audioStreamIndex, [FromQuery (Name = "videoStreamIndex")]int? videoStreamIndex, [FromQuery (Name = "context")]EncodingContext context, [FromQuery (Name = "streamOptions")]Dictionary<string, string> streamOptions, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "enableSubtitlesInManifest")]bool? enableSubtitlesInManifest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
