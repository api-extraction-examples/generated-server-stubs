/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SubtitleApiController : ControllerBase
    { 
        /// <summary>
        /// Deletes an external subtitle file.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The index of the subtitle file.</param>
        /// <response code="204">Subtitle deleted.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Item not found.</response>
        [HttpDelete]
        [Route("/Videos/{itemId}/Subtitles/{index}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubtitle")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult DeleteSubtitle([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "index")][Required]int index)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Downloads a remote subtitle.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="subtitleId">The subtitle id.</param>
        /// <response code="204">Subtitle downloaded.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("DownloadRemoteSubtitles")]
        public virtual IActionResult DownloadRemoteSubtitles([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "subtitleId")][Required]string subtitleId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a fallback font file.
        /// </summary>
        /// <param name="name">The name of the fallback font file to get.</param>
        /// <response code="200">Fallback font file retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/FallbackFont/Fonts/{name}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetFallbackFont")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Fallback font file retrieved.")]
        public virtual IActionResult GetFallbackFont([FromRoute (Name = "name")][Required]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of available fallback font files.
        /// </summary>
        /// <response code="200">Information retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/FallbackFont/Fonts")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetFallbackFontList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<FontFile>), description: "Information retrieved.")]
        public virtual IActionResult GetFallbackFontList()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FontFile>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n}, {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n}, {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n}, {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<FontFile>>(exampleJson)
            : default(List<FontFile>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the remote subtitles.
        /// </summary>
        /// <param name="id">The item id.</param>
        /// <response code="200">File returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Providers/Subtitles/Subtitles/{id}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetRemoteSubtitles")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "File returned.")]
        public virtual IActionResult GetRemoteSubtitles([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="format">The format of the returned subtitle.</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks.</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps.</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map.</param>
        /// <param name="startPositionTicks">Optional. The start position of the subtitle in ticks.</param>
        /// <response code="200">File returned.</response>
        [HttpGet]
        [Route("/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/Stream.{format}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubtitle")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "File returned.")]
        public virtual IActionResult GetSubtitle([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "mediaSourceId")][Required]string mediaSourceId, [FromRoute (Name = "index")][Required]int index, [FromRoute (Name = "format")][Required]string format, [FromQuery (Name = "endPositionTicks")]long? endPositionTicks, [FromQuery (Name = "copyTimestamps")]bool? copyTimestamps, [FromQuery (Name = "addVttTimeMap")]bool? addVttTimeMap, [FromQuery (Name = "startPositionTicks")]long? startPositionTicks)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets an HLS subtitle playlist.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="segmentLength">The subtitle segment length.</param>
        /// <response code="200">Subtitle playlist retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetSubtitlePlaylist")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Subtitle playlist retrieved.")]
        public virtual IActionResult GetSubtitlePlaylist([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "index")][Required]int index, [FromRoute (Name = "mediaSourceId")][Required]string mediaSourceId, [FromQuery (Name = "segmentLength")][Required()]int segmentLength)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets subtitles in a specified format.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="mediaSourceId">The media source id.</param>
        /// <param name="index">The subtitle stream index.</param>
        /// <param name="startPositionTicks">Optional. The start position of the subtitle in ticks.</param>
        /// <param name="format">The format of the returned subtitle.</param>
        /// <param name="endPositionTicks">Optional. The end position of the subtitle in ticks.</param>
        /// <param name="copyTimestamps">Optional. Whether to copy the timestamps.</param>
        /// <param name="addVttTimeMap">Optional. Whether to add a VTT time map.</param>
        /// <response code="200">File returned.</response>
        [HttpGet]
        [Route("/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/{startPositionTicks}/Stream.{format}")]
        [ValidateModelState]
        [SwaggerOperation("GetSubtitleWithTicks")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "File returned.")]
        public virtual IActionResult GetSubtitleWithTicks([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "mediaSourceId")][Required]string mediaSourceId, [FromRoute (Name = "index")][Required]int index, [FromRoute (Name = "startPositionTicks")][Required]long startPositionTicks, [FromRoute (Name = "format")][Required]string format, [FromQuery (Name = "endPositionTicks")]long? endPositionTicks, [FromQuery (Name = "copyTimestamps")]bool? copyTimestamps, [FromQuery (Name = "addVttTimeMap")]bool? addVttTimeMap)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Search remote subtitles.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="language">The language of the subtitles.</param>
        /// <param name="isPerfectMatch">Optional. Only show subtitles which are a perfect match.</param>
        /// <response code="200">Subtitles retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Items/{itemId}/RemoteSearch/Subtitles/{language}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("SearchRemoteSubtitles")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<RemoteSubtitleInfo>), description: "Subtitles retrieved.")]
        public virtual IActionResult SearchRemoteSubtitles([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "language")][Required]string language, [FromQuery (Name = "isPerfectMatch")]bool? isPerfectMatch)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<RemoteSubtitleInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Comment\" : \"Comment\",\n  \"ProviderName\" : \"ProviderName\",\n  \"Format\" : \"Format\",\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"IsHashMatch\" : true,\n  \"Author\" : \"Author\",\n  \"CommunityRating\" : 0.8008282,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"DownloadCount\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"Comment\" : \"Comment\",\n  \"ProviderName\" : \"ProviderName\",\n  \"Format\" : \"Format\",\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"IsHashMatch\" : true,\n  \"Author\" : \"Author\",\n  \"CommunityRating\" : 0.8008282,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"DownloadCount\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Comment\" : \"Comment\",\n  \"ProviderName\" : \"ProviderName\",\n  \"Format\" : \"Format\",\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"IsHashMatch\" : true,\n  \"Author\" : \"Author\",\n  \"CommunityRating\" : 0.8008282,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"DownloadCount\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"Comment\" : \"Comment\",\n  \"ProviderName\" : \"ProviderName\",\n  \"Format\" : \"Format\",\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"IsHashMatch\" : true,\n  \"Author\" : \"Author\",\n  \"CommunityRating\" : 0.8008282,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"DownloadCount\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Comment\" : \"Comment\",\n  \"ProviderName\" : \"ProviderName\",\n  \"Format\" : \"Format\",\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"IsHashMatch\" : true,\n  \"Author\" : \"Author\",\n  \"CommunityRating\" : 0.8008282,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"DownloadCount\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"Comment\" : \"Comment\",\n  \"ProviderName\" : \"ProviderName\",\n  \"Format\" : \"Format\",\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"IsHashMatch\" : true,\n  \"Author\" : \"Author\",\n  \"CommunityRating\" : 0.8008282,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"DownloadCount\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<RemoteSubtitleInfo>>(exampleJson)
            : default(List<RemoteSubtitleInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Upload an external subtitle file.
        /// </summary>
        /// <param name="itemId">The item the subtitle belongs to.</param>
        /// <param name="uploadSubtitleDto">The request body.</param>
        /// <response code="204">Subtitle uploaded.</response>
        [HttpPost]
        [Route("/Videos/{itemId}/Subtitles")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("UploadSubtitle")]
        public virtual IActionResult UploadSubtitle([FromRoute (Name = "itemId")][Required]Guid itemId, [FromBody]UploadSubtitleDto uploadSubtitleDto)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            throw new NotImplementedException();
        }
    }
}
