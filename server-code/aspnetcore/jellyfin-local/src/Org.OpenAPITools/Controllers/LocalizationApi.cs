/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LocalizationApiController : ControllerBase
    { 
        /// <summary>
        /// Gets known countries.
        /// </summary>
        /// <response code="200">Known countries returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Localization/Countries")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetCountries")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CountryInfo>), description: "Known countries returned.")]
        public virtual IActionResult GetCountries()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<CountryInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n  \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\"\n}, {\n  \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n  \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n  \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\"\n}, {\n  \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n  \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n  \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\"\n}, {\n  \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n  \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<CountryInfo>>(exampleJson)
            : default(List<CountryInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets known cultures.
        /// </summary>
        /// <response code="200">Known cultures returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Localization/Cultures")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetCultures")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CultureDto>), description: "Known cultures returned.")]
        public virtual IActionResult GetCultures()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<CultureDto>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\",\n  \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n}, {\n  \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\",\n  \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n} ]";
            exampleJson = "[ {\n  \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\",\n  \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n}, {\n  \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\",\n  \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n} ]";
            exampleJson = "[ {\n  \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\",\n  \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n}, {\n  \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n  \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Name\" : \"Name\",\n  \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<CultureDto>>(exampleJson)
            : default(List<CultureDto>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets localization options.
        /// </summary>
        /// <response code="200">Localization options returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Localization/Options")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetLocalizationOptions")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LocalizationOption>), description: "Localization options returned.")]
        public virtual IActionResult GetLocalizationOptions()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<LocalizationOption>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n}, {\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n}, {\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n}, {\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<LocalizationOption>>(exampleJson)
            : default(List<LocalizationOption>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets known parental ratings.
        /// </summary>
        /// <response code="200">Known parental ratings returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Localization/ParentalRatings")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetParentalRatings")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ParentalRating>), description: "Known parental ratings returned.")]
        public virtual IActionResult GetParentalRatings()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ParentalRating>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Value\" : 0,\n  \"Name\" : \"Name\"\n}, {\n  \"Value\" : 0,\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Value\" : 0,\n  \"Name\" : \"Name\"\n}, {\n  \"Value\" : 0,\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Value\" : 0,\n  \"Name\" : \"Name\"\n}, {\n  \"Value\" : 0,\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ParentalRating>>(exampleJson)
            : default(List<ParentalRating>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
