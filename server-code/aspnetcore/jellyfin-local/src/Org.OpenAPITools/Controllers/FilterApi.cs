/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FilterApiController : ControllerBase
    { 
        /// <summary>
        /// Gets query filters.
        /// </summary>
        /// <param name="userId">Optional. User id.</param>
        /// <param name="parentId">Optional. Specify this to localize the search to a specific item or folder. Omit to use the root.</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.</param>
        /// <param name="isAiring">Optional. Is item airing.</param>
        /// <param name="isMovie">Optional. Is item movie.</param>
        /// <param name="isSports">Optional. Is item sports.</param>
        /// <param name="isKids">Optional. Is item kids.</param>
        /// <param name="isNews">Optional. Is item news.</param>
        /// <param name="isSeries">Optional. Is item series.</param>
        /// <param name="recursive">Optional. Search recursive.</param>
        /// <response code="200">Filters retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Items/Filters2")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetQueryFilters")]
        [SwaggerResponse(statusCode: 200, type: typeof(QueryFilters), description: "Filters retrieved.")]
        public virtual IActionResult GetQueryFilters([FromQuery (Name = "userId")]Guid? userId, [FromQuery (Name = "parentId")]Guid? parentId, [FromQuery (Name = "includeItemTypes")]List<string> includeItemTypes, [FromQuery (Name = "isAiring")]bool? isAiring, [FromQuery (Name = "isMovie")]bool? isMovie, [FromQuery (Name = "isSports")]bool? isSports, [FromQuery (Name = "isKids")]bool? isKids, [FromQuery (Name = "isNews")]bool? isNews, [FromQuery (Name = "isSeries")]bool? isSeries, [FromQuery (Name = "recursive")]bool? recursive)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(QueryFilters));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"Genres\" : [ {\n    \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Tags\" : [ \"Tags\", \"Tags\" ]\n}";
            exampleJson = "{\n  \"Genres\" : [ {\n    \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Tags\" : [ \"Tags\", \"Tags\" ]\n}";
            exampleJson = "{\n  \"Genres\" : [ {\n    \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Tags\" : [ \"Tags\", \"Tags\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<QueryFilters>(exampleJson)
            : default(QueryFilters);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets legacy query filters.
        /// </summary>
        /// <param name="userId">Optional. User id.</param>
        /// <param name="parentId">Optional. Parent id.</param>
        /// <param name="includeItemTypes">Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.</param>
        /// <param name="mediaTypes">Optional. Filter by MediaType. Allows multiple, comma delimited.</param>
        /// <response code="200">Legacy filters retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Items/Filters")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetQueryFiltersLegacy")]
        [SwaggerResponse(statusCode: 200, type: typeof(QueryFiltersLegacy), description: "Legacy filters retrieved.")]
        public virtual IActionResult GetQueryFiltersLegacy([FromQuery (Name = "userId")]Guid? userId, [FromQuery (Name = "parentId")]Guid? parentId, [FromQuery (Name = "includeItemTypes")]List<string> includeItemTypes, [FromQuery (Name = "mediaTypes")]List<string> mediaTypes)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(QueryFiltersLegacy));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"Years\" : [ 0, 0 ],\n  \"OfficialRatings\" : [ \"OfficialRatings\", \"OfficialRatings\" ],\n  \"Genres\" : [ \"Genres\", \"Genres\" ],\n  \"Tags\" : [ \"Tags\", \"Tags\" ]\n}";
            exampleJson = "{\n  \"Years\" : [ 0, 0 ],\n  \"OfficialRatings\" : [ \"OfficialRatings\", \"OfficialRatings\" ],\n  \"Genres\" : [ \"Genres\", \"Genres\" ],\n  \"Tags\" : [ \"Tags\", \"Tags\" ]\n}";
            exampleJson = "{\n  \"Years\" : [ 0, 0 ],\n  \"OfficialRatings\" : [ \"OfficialRatings\", \"OfficialRatings\" ],\n  \"Genres\" : [ \"Genres\", \"Genres\" ],\n  \"Tags\" : [ \"Tags\", \"Tags\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<QueryFiltersLegacy>(exampleJson)
            : default(QueryFiltersLegacy);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
