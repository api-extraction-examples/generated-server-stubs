/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CollectionApiController : ControllerBase
    { 
        /// <summary>
        /// Adds items to a collection.
        /// </summary>
        /// <param name="collectionId">The collection id.</param>
        /// <param name="ids">Item ids, comma delimited.</param>
        /// <response code="204">Items added to collection.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Collections/{collectionId}/Items")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("AddToCollection")]
        public virtual IActionResult AddToCollection([FromRoute (Name = "collectionId")][Required]Guid collectionId, [FromQuery (Name = "ids")][Required()]List<Guid> ids)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a new collection.
        /// </summary>
        /// <param name="name">The name of the collection.</param>
        /// <param name="ids">Item Ids to add to the collection.</param>
        /// <param name="parentId">Optional. Create the collection within a specific folder.</param>
        /// <param name="isLocked">Whether or not to lock the new collection.</param>
        /// <response code="200">Collection created.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Collections")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("CreateCollection")]
        [SwaggerResponse(statusCode: 200, type: typeof(CollectionCreationResult), description: "Collection created.")]
        public virtual IActionResult CreateCollection([FromQuery (Name = "name")]string name, [FromQuery (Name = "ids")]List<string> ids, [FromQuery (Name = "parentId")]Guid? parentId, [FromQuery (Name = "isLocked")]bool? isLocked)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CollectionCreationResult));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n}";
            exampleJson = "{\n  \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n}";
            exampleJson = "{\n  \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CollectionCreationResult>(exampleJson)
            : default(CollectionCreationResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes items from a collection.
        /// </summary>
        /// <param name="collectionId">The collection id.</param>
        /// <param name="ids">Item ids, comma delimited.</param>
        /// <response code="204">Items removed from collection.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("/Collections/{collectionId}/Items")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("RemoveFromCollection")]
        public virtual IActionResult RemoveFromCollection([FromRoute (Name = "collectionId")][Required]Guid collectionId, [FromQuery (Name = "ids")][Required()]List<Guid> ids)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }
    }
}
