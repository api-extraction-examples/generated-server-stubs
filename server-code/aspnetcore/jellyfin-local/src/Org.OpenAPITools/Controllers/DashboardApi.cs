/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DashboardApiController : ControllerBase
    { 
        /// <summary>
        /// Gets the configuration pages.
        /// </summary>
        /// <param name="enableInMainMenu">Whether to enable in the main menu.</param>
        /// <param name="pageType">The Jellyfin.Api.Models.ConfigurationPageInfo.</param>
        /// <response code="200">ConfigurationPages returned.</response>
        /// <response code="404">Server still loading.</response>
        [HttpGet]
        [Route("/web/ConfigurationPages")]
        [ValidateModelState]
        [SwaggerOperation("GetConfigurationPages")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ConfigurationPageInfo>), description: "ConfigurationPages returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Server still loading.")]
        public virtual IActionResult GetConfigurationPages([FromQuery (Name = "enableInMainMenu")]bool? enableInMainMenu, [FromQuery (Name = "pageType")]ConfigurationPageType pageType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ConfigurationPageInfo>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "[ {\n  \"MenuIcon\" : \"MenuIcon\",\n  \"EnableInMainMenu\" : true,\n  \"DisplayName\" : \"DisplayName\",\n  \"MenuSection\" : \"MenuSection\",\n  \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"Name\" : \"Name\"\n}, {\n  \"MenuIcon\" : \"MenuIcon\",\n  \"EnableInMainMenu\" : true,\n  \"DisplayName\" : \"DisplayName\",\n  \"MenuSection\" : \"MenuSection\",\n  \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"MenuIcon\" : \"MenuIcon\",\n  \"EnableInMainMenu\" : true,\n  \"DisplayName\" : \"DisplayName\",\n  \"MenuSection\" : \"MenuSection\",\n  \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"Name\" : \"Name\"\n}, {\n  \"MenuIcon\" : \"MenuIcon\",\n  \"EnableInMainMenu\" : true,\n  \"DisplayName\" : \"DisplayName\",\n  \"MenuSection\" : \"MenuSection\",\n  \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"MenuIcon\" : \"MenuIcon\",\n  \"EnableInMainMenu\" : true,\n  \"DisplayName\" : \"DisplayName\",\n  \"MenuSection\" : \"MenuSection\",\n  \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"Name\" : \"Name\"\n}, {\n  \"MenuIcon\" : \"MenuIcon\",\n  \"EnableInMainMenu\" : true,\n  \"DisplayName\" : \"DisplayName\",\n  \"MenuSection\" : \"MenuSection\",\n  \"PluginId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ConfigurationPageInfo>>(exampleJson)
            : default(List<ConfigurationPageInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a dashboard configuration page.
        /// </summary>
        /// <param name="name">The name of the page.</param>
        /// <response code="200">ConfigurationPage returned.</response>
        /// <response code="404">Plugin configuration page not found.</response>
        [HttpGet]
        [Route("/web/ConfigurationPage")]
        [ValidateModelState]
        [SwaggerOperation("GetDashboardConfigurationPage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "ConfigurationPage returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Plugin configuration page not found.")]
        public virtual IActionResult GetDashboardConfigurationPage([FromQuery (Name = "name")]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
