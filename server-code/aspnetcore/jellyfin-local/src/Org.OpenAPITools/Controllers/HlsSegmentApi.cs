/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class HlsSegmentApiController : ControllerBase
    { 
        /// <summary>
        /// Gets the specified audio segment for an audio item.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="segmentId">The segment id.</param>
        /// <response code="200">Hls audio segment returned.</response>
        [HttpGet]
        [Route("/Audio/{itemId}/hls/{segmentId}/stream.aac")]
        [ValidateModelState]
        [SwaggerOperation("GetHlsAudioSegmentLegacyAac")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Hls audio segment returned.")]
        public virtual IActionResult GetHlsAudioSegmentLegacyAac([FromRoute (Name = "itemId")][Required]string itemId, [FromRoute (Name = "segmentId")][Required]string segmentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the specified audio segment for an audio item.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="segmentId">The segment id.</param>
        /// <response code="200">Hls audio segment returned.</response>
        [HttpGet]
        [Route("/Audio/{itemId}/hls/{segmentId}/stream.mp3")]
        [ValidateModelState]
        [SwaggerOperation("GetHlsAudioSegmentLegacyMp3")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Hls audio segment returned.")]
        public virtual IActionResult GetHlsAudioSegmentLegacyMp3([FromRoute (Name = "itemId")][Required]string itemId, [FromRoute (Name = "segmentId")][Required]string segmentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a hls video playlist.
        /// </summary>
        /// <param name="itemId">The video id.</param>
        /// <param name="playlistId">The playlist id.</param>
        /// <response code="200">Hls video playlist returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Videos/{itemId}/hls/{playlistId}/stream.m3u8")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetHlsPlaylistLegacy")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Hls video playlist returned.")]
        public virtual IActionResult GetHlsPlaylistLegacy([FromRoute (Name = "itemId")][Required]string itemId, [FromRoute (Name = "playlistId")][Required]string playlistId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a hls video segment.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="playlistId">The playlist id.</param>
        /// <param name="segmentId">The segment id.</param>
        /// <param name="segmentContainer">The segment container.</param>
        /// <response code="200">Hls video segment returned.</response>
        /// <response code="404">Hls segment not found.</response>
        [HttpGet]
        [Route("/Videos/{itemId}/hls/{playlistId}/{segmentId}.{segmentContainer}")]
        [ValidateModelState]
        [SwaggerOperation("GetHlsVideoSegmentLegacy")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Hls video segment returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Hls segment not found.")]
        public virtual IActionResult GetHlsVideoSegmentLegacy([FromRoute (Name = "itemId")][Required]string itemId, [FromRoute (Name = "playlistId")][Required]string playlistId, [FromRoute (Name = "segmentId")][Required]string segmentId, [FromRoute (Name = "segmentContainer")][Required]string segmentContainer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Stops an active encoding.
        /// </summary>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed.</param>
        /// <param name="playSessionId">The play session id.</param>
        /// <response code="204">Encoding stopped successfully.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("/Videos/ActiveEncodings")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("StopEncodingProcess")]
        public virtual IActionResult StopEncodingProcess([FromQuery (Name = "deviceId")]string deviceId, [FromQuery (Name = "playSessionId")]string playSessionId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }
    }
}
