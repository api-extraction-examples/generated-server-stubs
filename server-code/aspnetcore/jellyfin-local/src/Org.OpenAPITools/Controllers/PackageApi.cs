/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PackageApiController : ControllerBase
    { 
        /// <summary>
        /// Cancels a package installation.
        /// </summary>
        /// <param name="packageId">Installation Id.</param>
        /// <response code="204">Installation cancelled.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("/Packages/Installing/{packageId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("CancelPackageInstallation")]
        public virtual IActionResult CancelPackageInstallation([FromRoute (Name = "packageId")][Required]Guid packageId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a package by name or assembly GUID.
        /// </summary>
        /// <param name="name">The name of the package.</param>
        /// <param name="assemblyGuid">The GUID of the associated assembly.</param>
        /// <response code="200">Package retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Packages/{name}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetPackageInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(PackageInfo), description: "Package retrieved.")]
        public virtual IActionResult GetPackageInfo([FromRoute (Name = "name")][Required]string name, [FromQuery (Name = "assemblyGuid")]Guid? assemblyGuid)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PackageInfo));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"owner\" : \"owner\",\n  \"overview\" : \"overview\",\n  \"versions\" : [ {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  }, {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  } ],\n  \"imageUrl\" : \"imageUrl\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"guid\" : \"guid\",\n  \"category\" : \"category\"\n}";
            exampleJson = "{\n  \"owner\" : \"owner\",\n  \"overview\" : \"overview\",\n  \"versions\" : [ {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  }, {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  } ],\n  \"imageUrl\" : \"imageUrl\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"guid\" : \"guid\",\n  \"category\" : \"category\"\n}";
            exampleJson = "{\n  \"owner\" : \"owner\",\n  \"overview\" : \"overview\",\n  \"versions\" : [ {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  }, {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  } ],\n  \"imageUrl\" : \"imageUrl\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"guid\" : \"guid\",\n  \"category\" : \"category\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PackageInfo>(exampleJson)
            : default(PackageInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets available packages.
        /// </summary>
        /// <response code="200">Available packages returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Packages")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetPackages")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PackageInfo>), description: "Available packages returned.")]
        public virtual IActionResult GetPackages()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PackageInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"owner\" : \"owner\",\n  \"overview\" : \"overview\",\n  \"versions\" : [ {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  }, {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  } ],\n  \"imageUrl\" : \"imageUrl\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"guid\" : \"guid\",\n  \"category\" : \"category\"\n}, {\n  \"owner\" : \"owner\",\n  \"overview\" : \"overview\",\n  \"versions\" : [ {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  }, {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  } ],\n  \"imageUrl\" : \"imageUrl\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"guid\" : \"guid\",\n  \"category\" : \"category\"\n} ]";
            exampleJson = "[ {\n  \"owner\" : \"owner\",\n  \"overview\" : \"overview\",\n  \"versions\" : [ {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  }, {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  } ],\n  \"imageUrl\" : \"imageUrl\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"guid\" : \"guid\",\n  \"category\" : \"category\"\n}, {\n  \"owner\" : \"owner\",\n  \"overview\" : \"overview\",\n  \"versions\" : [ {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  }, {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  } ],\n  \"imageUrl\" : \"imageUrl\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"guid\" : \"guid\",\n  \"category\" : \"category\"\n} ]";
            exampleJson = "[ {\n  \"owner\" : \"owner\",\n  \"overview\" : \"overview\",\n  \"versions\" : [ {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  }, {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  } ],\n  \"imageUrl\" : \"imageUrl\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"guid\" : \"guid\",\n  \"category\" : \"category\"\n}, {\n  \"owner\" : \"owner\",\n  \"overview\" : \"overview\",\n  \"versions\" : [ {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  }, {\n    \"sourceUrl\" : \"sourceUrl\",\n    \"targetAbi\" : \"targetAbi\",\n    \"checksum\" : \"checksum\",\n    \"changelog\" : \"changelog\",\n    \"repositoryName\" : \"repositoryName\",\n    \"version\" : \"version\",\n    \"VersionNumber\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"repositoryUrl\" : \"repositoryUrl\",\n    \"timestamp\" : \"timestamp\"\n  } ],\n  \"imageUrl\" : \"imageUrl\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"guid\" : \"guid\",\n  \"category\" : \"category\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PackageInfo>>(exampleJson)
            : default(List<PackageInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all package repositories.
        /// </summary>
        /// <response code="200">Package repositories returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Repositories")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetRepositories")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<RepositoryInfo>), description: "Package repositories returned.")]
        public virtual IActionResult GetRepositories()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<RepositoryInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Enabled\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\"\n}, {\n  \"Enabled\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Enabled\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\"\n}, {\n  \"Enabled\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Enabled\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\"\n}, {\n  \"Enabled\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<RepositoryInfo>>(exampleJson)
            : default(List<RepositoryInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Installs a package.
        /// </summary>
        /// <param name="name">Package name.</param>
        /// <param name="assemblyGuid">GUID of the associated assembly.</param>
        /// <param name="varVersion">Optional version. Defaults to latest version.</param>
        /// <param name="repositoryUrl">Optional. Specify the repository to install from.</param>
        /// <response code="204">Package found.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Package not found.</response>
        [HttpPost]
        [Route("/Packages/Installed/{name}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("InstallPackage")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Package not found.")]
        public virtual IActionResult InstallPackage([FromRoute (Name = "name")][Required]string name, [FromQuery (Name = "assemblyGuid")]Guid? assemblyGuid, [FromQuery (Name = "version")]string varVersion, [FromQuery (Name = "repositoryUrl")]string repositoryUrl)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Sets the enabled and existing package repositories.
        /// </summary>
        /// <param name="repositoryInfo">The list of package repositories.</param>
        /// <response code="204">Package repositories saved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Repositories")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("SetRepositories")]
        public virtual IActionResult SetRepositories([FromBody]List<RepositoryInfo> repositoryInfo)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }
    }
}
