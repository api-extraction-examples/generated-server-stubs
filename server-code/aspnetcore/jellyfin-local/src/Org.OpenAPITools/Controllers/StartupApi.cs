/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class StartupApiController : ControllerBase
    { 
        /// <summary>
        /// Completes the startup wizard.
        /// </summary>
        /// <response code="204">Startup wizard completed.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Startup/Complete")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("CompleteWizard")]
        public virtual IActionResult CompleteWizard()
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets the first user.
        /// </summary>
        /// <response code="200">Initial user retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Startup/User")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetFirstUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(StartupUserDto), description: "Initial user retrieved.")]
        public virtual IActionResult GetFirstUser()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StartupUserDto));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"Name\" : \"Name\",\n  \"Password\" : \"Password\"\n}";
            exampleJson = "{\n  \"Name\" : \"Name\",\n  \"Password\" : \"Password\"\n}";
            exampleJson = "{\n  \"Name\" : \"Name\",\n  \"Password\" : \"Password\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<StartupUserDto>(exampleJson)
            : default(StartupUserDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the first user.
        /// </summary>
        /// <response code="200">Initial user retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Startup/FirstUser")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetFirstUser2")]
        [SwaggerResponse(statusCode: 200, type: typeof(StartupUserDto), description: "Initial user retrieved.")]
        public virtual IActionResult GetFirstUser2()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StartupUserDto));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"Name\" : \"Name\",\n  \"Password\" : \"Password\"\n}";
            exampleJson = "{\n  \"Name\" : \"Name\",\n  \"Password\" : \"Password\"\n}";
            exampleJson = "{\n  \"Name\" : \"Name\",\n  \"Password\" : \"Password\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<StartupUserDto>(exampleJson)
            : default(StartupUserDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the initial startup wizard configuration.
        /// </summary>
        /// <response code="200">Initial startup wizard configuration retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Startup/Configuration")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetStartupConfiguration")]
        [SwaggerResponse(statusCode: 200, type: typeof(StartupConfigurationDto), description: "Initial startup wizard configuration retrieved.")]
        public virtual IActionResult GetStartupConfiguration()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StartupConfigurationDto));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n  \"UICulture\" : \"UICulture\",\n  \"MetadataCountryCode\" : \"MetadataCountryCode\"\n}";
            exampleJson = "{\n  \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n  \"UICulture\" : \"UICulture\",\n  \"MetadataCountryCode\" : \"MetadataCountryCode\"\n}";
            exampleJson = "{\n  \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n  \"UICulture\" : \"UICulture\",\n  \"MetadataCountryCode\" : \"MetadataCountryCode\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<StartupConfigurationDto>(exampleJson)
            : default(StartupConfigurationDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets remote access and UPnP.
        /// </summary>
        /// <param name="startupRemoteAccessDto">The startup remote access dto.</param>
        /// <response code="204">Configuration saved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Startup/RemoteAccess")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("SetRemoteAccess")]
        public virtual IActionResult SetRemoteAccess([FromBody]StartupRemoteAccessDto startupRemoteAccessDto)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Sets the initial startup wizard configuration.
        /// </summary>
        /// <param name="startupConfigurationDto">The updated startup configuration.</param>
        /// <response code="204">Configuration saved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Startup/Configuration")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateInitialConfiguration")]
        public virtual IActionResult UpdateInitialConfiguration([FromBody]StartupConfigurationDto startupConfigurationDto)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Sets the user name and password.
        /// </summary>
        /// <param name="startupUserDto">The DTO containing username and password.</param>
        /// <response code="204">Updated user name and password.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Startup/User")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateStartupUser")]
        public virtual IActionResult UpdateStartupUser([FromBody]StartupUserDto startupUserDto)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }
    }
}
