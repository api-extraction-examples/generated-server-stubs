/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NotificationsApiController : ControllerBase
    { 
        /// <summary>
        /// Sends a notification to all admins.
        /// </summary>
        /// <param name="url">The URL of the notification.</param>
        /// <param name="level">The level of the notification.</param>
        /// <param name="name">The name of the notification.</param>
        /// <param name="description">The description of the notification.</param>
        /// <response code="204">Notification sent.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Notifications/Admin")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("CreateAdminNotification")]
        public virtual IActionResult CreateAdminNotification([FromQuery (Name = "url")]string url, [FromQuery (Name = "level")]NotificationLevel level, [FromQuery (Name = "name")]string name, [FromQuery (Name = "description")]string description)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets notification services.
        /// </summary>
        /// <response code="200">All notification services returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Notifications/Services")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetNotificationServices")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NameIdPair>), description: "All notification services returned.")]
        public virtual IActionResult GetNotificationServices()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NameIdPair>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Id\" : \"Id\",\n  \"Name\" : \"Name\"\n}, {\n  \"Id\" : \"Id\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Id\" : \"Id\",\n  \"Name\" : \"Name\"\n}, {\n  \"Id\" : \"Id\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Id\" : \"Id\",\n  \"Name\" : \"Name\"\n}, {\n  \"Id\" : \"Id\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<NameIdPair>>(exampleJson)
            : default(List<NameIdPair>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets notification types.
        /// </summary>
        /// <response code="200">All notification types returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Notifications/Types")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetNotificationTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NotificationTypeInfo>), description: "All notification types returned.")]
        public virtual IActionResult GetNotificationTypes()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NotificationTypeInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Type\" : \"Type\",\n  \"Category\" : \"Category\",\n  \"IsBasedOnUserEvent\" : true,\n  \"Enabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"Type\" : \"Type\",\n  \"Category\" : \"Category\",\n  \"IsBasedOnUserEvent\" : true,\n  \"Enabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Type\" : \"Type\",\n  \"Category\" : \"Category\",\n  \"IsBasedOnUserEvent\" : true,\n  \"Enabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"Type\" : \"Type\",\n  \"Category\" : \"Category\",\n  \"IsBasedOnUserEvent\" : true,\n  \"Enabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Type\" : \"Type\",\n  \"Category\" : \"Category\",\n  \"IsBasedOnUserEvent\" : true,\n  \"Enabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"Type\" : \"Type\",\n  \"Category\" : \"Category\",\n  \"IsBasedOnUserEvent\" : true,\n  \"Enabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<NotificationTypeInfo>>(exampleJson)
            : default(List<NotificationTypeInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a user&#39;s notifications.
        /// </summary>
        /// <param name="userId"></param>
        /// <response code="200">Notifications returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Notifications/{userId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetNotifications")]
        [SwaggerResponse(statusCode: 200, type: typeof(NotificationResultDto), description: "Notifications returned.")]
        public virtual IActionResult GetNotifications([FromRoute (Name = "userId")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NotificationResultDto));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"TotalRecordCount\" : 0,\n  \"Notifications\" : [ {\n    \"Description\" : \"Description\",\n    \"UserId\" : \"UserId\",\n    \"Id\" : \"Id\",\n    \"IsRead\" : true,\n    \"Date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"UserId\" : \"UserId\",\n    \"Id\" : \"Id\",\n    \"IsRead\" : true,\n    \"Date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  } ]\n}";
            exampleJson = "{\n  \"TotalRecordCount\" : 0,\n  \"Notifications\" : [ {\n    \"Description\" : \"Description\",\n    \"UserId\" : \"UserId\",\n    \"Id\" : \"Id\",\n    \"IsRead\" : true,\n    \"Date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"UserId\" : \"UserId\",\n    \"Id\" : \"Id\",\n    \"IsRead\" : true,\n    \"Date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  } ]\n}";
            exampleJson = "{\n  \"TotalRecordCount\" : 0,\n  \"Notifications\" : [ {\n    \"Description\" : \"Description\",\n    \"UserId\" : \"UserId\",\n    \"Id\" : \"Id\",\n    \"IsRead\" : true,\n    \"Date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"UserId\" : \"UserId\",\n    \"Id\" : \"Id\",\n    \"IsRead\" : true,\n    \"Date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NotificationResultDto>(exampleJson)
            : default(NotificationResultDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a user&#39;s notification summary.
        /// </summary>
        /// <param name="userId"></param>
        /// <response code="200">Summary of user&#39;s notifications returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Notifications/{userId}/Summary")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetNotificationsSummary")]
        [SwaggerResponse(statusCode: 200, type: typeof(NotificationsSummaryDto), description: "Summary of user&#39;s notifications returned.")]
        public virtual IActionResult GetNotificationsSummary([FromRoute (Name = "userId")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NotificationsSummaryDto));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"UnreadCount\" : 0\n}";
            exampleJson = "{\n  \"UnreadCount\" : 0\n}";
            exampleJson = "{\n  \"UnreadCount\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NotificationsSummaryDto>(exampleJson)
            : default(NotificationsSummaryDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets notifications as read.
        /// </summary>
        /// <param name="userId"></param>
        /// <response code="204">Notifications set as read.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Notifications/{userId}/Read")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("SetRead")]
        public virtual IActionResult SetRead([FromRoute (Name = "userId")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Sets notifications as unread.
        /// </summary>
        /// <param name="userId"></param>
        /// <response code="204">Notifications set as unread.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Notifications/{userId}/Unread")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("SetUnread")]
        public virtual IActionResult SetUnread([FromRoute (Name = "userId")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }
    }
}
