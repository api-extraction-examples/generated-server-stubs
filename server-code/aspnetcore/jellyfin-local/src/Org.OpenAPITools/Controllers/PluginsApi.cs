/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PluginsApiController : ControllerBase
    { 
        /// <summary>
        /// Disable a plugin.
        /// </summary>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="varVersion">Plugin version.</param>
        /// <response code="204">Plugin disabled.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Plugin not found.</response>
        [HttpPost]
        [Route("/Plugins/{pluginId}/{version}/Disable")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("DisablePlugin")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Plugin not found.")]
        public virtual IActionResult DisablePlugin([FromRoute (Name = "pluginId")][Required]Guid pluginId, [FromRoute (Name = "version")][Required]ModelVersion varVersion)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Enables a disabled plugin.
        /// </summary>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="varVersion">Plugin version.</param>
        /// <response code="204">Plugin enabled.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Plugin not found.</response>
        [HttpPost]
        [Route("/Plugins/{pluginId}/{version}/Enable")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("EnablePlugin")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Plugin not found.")]
        public virtual IActionResult EnablePlugin([FromRoute (Name = "pluginId")][Required]Guid pluginId, [FromRoute (Name = "version")][Required]ModelVersion varVersion)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets plugin configuration.
        /// </summary>
        /// <param name="pluginId">Plugin id.</param>
        /// <response code="200">Plugin configuration returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Plugin not found or plugin configuration not found.</response>
        [HttpGet]
        [Route("/Plugins/{pluginId}/Configuration")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetPluginConfiguration")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Plugin configuration returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Plugin not found or plugin configuration not found.")]
        public virtual IActionResult GetPluginConfiguration([FromRoute (Name = "pluginId")][Required]Guid pluginId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a plugin&#39;s image.
        /// </summary>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="varVersion">Plugin version.</param>
        /// <response code="200">Plugin image returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/Plugins/{pluginId}/{version}/Image")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetPluginImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Plugin image returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Not Found")]
        public virtual IActionResult GetPluginImage([FromRoute (Name = "pluginId")][Required]Guid pluginId, [FromRoute (Name = "version")][Required]ModelVersion varVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a plugin&#39;s manifest.
        /// </summary>
        /// <param name="pluginId">Plugin id.</param>
        /// <response code="204">Plugin manifest returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Plugin not found.</response>
        [HttpPost]
        [Route("/Plugins/{pluginId}/Manifest")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetPluginManifest")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Plugin not found.")]
        public virtual IActionResult GetPluginManifest([FromRoute (Name = "pluginId")][Required]Guid pluginId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a list of currently installed plugins.
        /// </summary>
        /// <response code="200">Installed plugins returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Plugins")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetPlugins")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PluginInfo>), description: "Installed plugins returned.")]
        public virtual IActionResult GetPlugins()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PluginInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"Version\" : {\n    \"Major\" : 6,\n    \"Revision\" : 2,\n    \"Build\" : 0,\n    \"Minor\" : 5,\n    \"MinorRevision\" : 5,\n    \"MajorRevision\" : 1\n  },\n  \"HasImage\" : true,\n  \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"CanUninstall\" : true,\n  \"ConfigurationFileName\" : \"ConfigurationFileName\",\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"Version\" : {\n    \"Major\" : 6,\n    \"Revision\" : 2,\n    \"Build\" : 0,\n    \"Minor\" : 5,\n    \"MinorRevision\" : 5,\n    \"MajorRevision\" : 1\n  },\n  \"HasImage\" : true,\n  \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"CanUninstall\" : true,\n  \"ConfigurationFileName\" : \"ConfigurationFileName\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"Version\" : {\n    \"Major\" : 6,\n    \"Revision\" : 2,\n    \"Build\" : 0,\n    \"Minor\" : 5,\n    \"MinorRevision\" : 5,\n    \"MajorRevision\" : 1\n  },\n  \"HasImage\" : true,\n  \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"CanUninstall\" : true,\n  \"ConfigurationFileName\" : \"ConfigurationFileName\",\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"Version\" : {\n    \"Major\" : 6,\n    \"Revision\" : 2,\n    \"Build\" : 0,\n    \"Minor\" : 5,\n    \"MinorRevision\" : 5,\n    \"MajorRevision\" : 1\n  },\n  \"HasImage\" : true,\n  \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"CanUninstall\" : true,\n  \"ConfigurationFileName\" : \"ConfigurationFileName\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"Version\" : {\n    \"Major\" : 6,\n    \"Revision\" : 2,\n    \"Build\" : 0,\n    \"Minor\" : 5,\n    \"MinorRevision\" : 5,\n    \"MajorRevision\" : 1\n  },\n  \"HasImage\" : true,\n  \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"CanUninstall\" : true,\n  \"ConfigurationFileName\" : \"ConfigurationFileName\",\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"Version\" : {\n    \"Major\" : 6,\n    \"Revision\" : 2,\n    \"Build\" : 0,\n    \"Minor\" : 5,\n    \"MinorRevision\" : 5,\n    \"MajorRevision\" : 1\n  },\n  \"HasImage\" : true,\n  \"Id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"CanUninstall\" : true,\n  \"ConfigurationFileName\" : \"ConfigurationFileName\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PluginInfo>>(exampleJson)
            : default(List<PluginInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Uninstalls a plugin.
        /// </summary>
        /// <param name="pluginId">Plugin id.</param>
        /// <response code="204">Plugin uninstalled.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Plugin not found.</response>
        [HttpDelete]
        [Route("/Plugins/{pluginId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("UninstallPlugin")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Plugin not found.")]
        [Obsolete]
        public virtual IActionResult UninstallPlugin([FromRoute (Name = "pluginId")][Required]Guid pluginId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Uninstalls a plugin by version.
        /// </summary>
        /// <param name="pluginId">Plugin id.</param>
        /// <param name="varVersion">Plugin version.</param>
        /// <response code="204">Plugin uninstalled.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Plugin not found.</response>
        [HttpDelete]
        [Route("/Plugins/{pluginId}/{version}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("UninstallPluginByVersion")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Plugin not found.")]
        public virtual IActionResult UninstallPluginByVersion([FromRoute (Name = "pluginId")][Required]Guid pluginId, [FromRoute (Name = "version")][Required]ModelVersion varVersion)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates plugin configuration.
        /// </summary>
        /// <remarks>Accepts plugin configuration as JSON body.</remarks>
        /// <param name="pluginId">Plugin id.</param>
        /// <response code="204">Plugin configuration updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Plugin not found or plugin does not have configuration.</response>
        [HttpPost]
        [Route("/Plugins/{pluginId}/Configuration")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePluginConfiguration")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Plugin not found or plugin does not have configuration.")]
        public virtual IActionResult UpdatePluginConfiguration([FromRoute (Name = "pluginId")][Required]Guid pluginId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates plugin security info.
        /// </summary>
        /// <param name="pluginSecurityInfo">Plugin security info.</param>
        /// <response code="204">Plugin security info updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/Plugins/SecurityInfo")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePluginSecurityInfo")]
        [Obsolete]
        public virtual IActionResult UpdatePluginSecurityInfo([FromBody]PluginSecurityInfo pluginSecurityInfo)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }
    }
}
