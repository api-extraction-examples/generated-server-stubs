/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EnvironmentApiController : ControllerBase
    { 
        /// <summary>
        /// Get Default directory browser.
        /// </summary>
        /// <response code="200">Default directory browser returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Environment/DefaultDirectoryBrowser")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetDefaultDirectoryBrowser")]
        [SwaggerResponse(statusCode: 200, type: typeof(DefaultDirectoryBrowserInfoDto), description: "Default directory browser returned.")]
        public virtual IActionResult GetDefaultDirectoryBrowser()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DefaultDirectoryBrowserInfoDto));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"Path\" : \"Path\"\n}";
            exampleJson = "{\n  \"Path\" : \"Path\"\n}";
            exampleJson = "{\n  \"Path\" : \"Path\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DefaultDirectoryBrowserInfoDto>(exampleJson)
            : default(DefaultDirectoryBrowserInfoDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the contents of a given directory in the file system.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <param name="includeFiles">An optional filter to include or exclude files from the results. true/false.</param>
        /// <param name="includeDirectories">An optional filter to include or exclude folders from the results. true/false.</param>
        /// <response code="200">Directory contents returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Environment/DirectoryContents")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetDirectoryContents")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<FileSystemEntryInfo>), description: "Directory contents returned.")]
        public virtual IActionResult GetDirectoryContents([FromQuery (Name = "path")][Required()]string path, [FromQuery (Name = "includeFiles")]bool? includeFiles, [FromQuery (Name = "includeDirectories")]bool? includeDirectories)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FileSystemEntryInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n}, {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n}, {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n}, {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<FileSystemEntryInfo>>(exampleJson)
            : default(List<FileSystemEntryInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets available drives from the server&#39;s file system.
        /// </summary>
        /// <response code="200">List of entries returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Environment/Drives")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetDrives")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<FileSystemEntryInfo>), description: "List of entries returned.")]
        public virtual IActionResult GetDrives()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FileSystemEntryInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n}, {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n}, {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n}, {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<FileSystemEntryInfo>>(exampleJson)
            : default(List<FileSystemEntryInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets network paths.
        /// </summary>
        /// <response code="200">Empty array returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Environment/NetworkShares")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetNetworkShares")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<FileSystemEntryInfo>), description: "Empty array returned.")]
        [Obsolete]
        public virtual IActionResult GetNetworkShares()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FileSystemEntryInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n}, {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n}, {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n}, {\n  \"Path\" : \"Path\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<FileSystemEntryInfo>>(exampleJson)
            : default(List<FileSystemEntryInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the parent path of a given path.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <response code="200">Success</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Environment/ParentPath")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetParentPath")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        public virtual IActionResult GetParentPath([FromQuery (Name = "path")][Required()]string path)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Validates path.
        /// </summary>
        /// <param name="validatePathDto">Validate request object.</param>
        /// <response code="204">Path validated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Path not found.</response>
        [HttpPost]
        [Route("/Environment/ValidatePath")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("ValidatePath")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Path not found.")]
        public virtual IActionResult ValidatePath([FromBody]ValidatePathDto validatePathDto)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }
    }
}
