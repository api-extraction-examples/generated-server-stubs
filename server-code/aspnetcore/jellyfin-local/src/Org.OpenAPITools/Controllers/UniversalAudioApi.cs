/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UniversalAudioApiController : ControllerBase
    { 
        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container.</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version.</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed.</param>
        /// <param name="userId">Optional. The user id.</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to.</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels.</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to.</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate.</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to.</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol.</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate.</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth.</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media.</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames.</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true.</param>
        /// <response code="200">Audio stream returned.</response>
        /// <response code="302">Redirected to remote audio stream.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/Audio/{itemId}/universal")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetUniversalAudioStream")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Audio stream returned.")]
        public virtual IActionResult GetUniversalAudioStream([FromRoute (Name = "itemId")][Required]Guid itemId, [FromQuery (Name = "container")]List<string> container, [FromQuery (Name = "mediaSourceId")]string mediaSourceId, [FromQuery (Name = "deviceId")]string deviceId, [FromQuery (Name = "userId")]Guid? userId, [FromQuery (Name = "audioCodec")]string audioCodec, [FromQuery (Name = "maxAudioChannels")]int? maxAudioChannels, [FromQuery (Name = "transcodingAudioChannels")]int? transcodingAudioChannels, [FromQuery (Name = "maxStreamingBitrate")]int? maxStreamingBitrate, [FromQuery (Name = "audioBitRate")]int? audioBitRate, [FromQuery (Name = "startTimeTicks")]long? startTimeTicks, [FromQuery (Name = "transcodingContainer")]string transcodingContainer, [FromQuery (Name = "transcodingProtocol")]string transcodingProtocol, [FromQuery (Name = "maxAudioSampleRate")]int? maxAudioSampleRate, [FromQuery (Name = "maxAudioBitDepth")]int? maxAudioBitDepth, [FromQuery (Name = "enableRemoteMedia")]bool? enableRemoteMedia, [FromQuery (Name = "breakOnNonKeyFrames")]bool? breakOnNonKeyFrames, [FromQuery (Name = "enableRedirection")]bool? enableRedirection)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 302 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(302);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets an audio stream.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="container">Optional. The audio container.</param>
        /// <param name="mediaSourceId">The media version id, if playing an alternate version.</param>
        /// <param name="deviceId">The device id of the client requesting. Used to stop encoding processes when needed.</param>
        /// <param name="userId">Optional. The user id.</param>
        /// <param name="audioCodec">Optional. The audio codec to transcode to.</param>
        /// <param name="maxAudioChannels">Optional. The maximum number of audio channels.</param>
        /// <param name="transcodingAudioChannels">Optional. The number of how many audio channels to transcode to.</param>
        /// <param name="maxStreamingBitrate">Optional. The maximum streaming bitrate.</param>
        /// <param name="audioBitRate">Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.</param>
        /// <param name="startTimeTicks">Optional. Specify a starting offset, in ticks. 1 tick &#x3D; 10000 ms.</param>
        /// <param name="transcodingContainer">Optional. The container to transcode to.</param>
        /// <param name="transcodingProtocol">Optional. The transcoding protocol.</param>
        /// <param name="maxAudioSampleRate">Optional. The maximum audio sample rate.</param>
        /// <param name="maxAudioBitDepth">Optional. The maximum audio bit depth.</param>
        /// <param name="enableRemoteMedia">Optional. Whether to enable remote media.</param>
        /// <param name="breakOnNonKeyFrames">Optional. Whether to break on non key frames.</param>
        /// <param name="enableRedirection">Whether to enable redirection. Defaults to true.</param>
        /// <response code="200">Audio stream returned.</response>
        /// <response code="302">Redirected to remote audio stream.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpHead]
        [Route("/Audio/{itemId}/universal")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("HeadUniversalAudioStream")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Audio stream returned.")]
        public virtual IActionResult HeadUniversalAudioStream([FromRoute (Name = "itemId")][Required]Guid itemId, [FromQuery (Name = "container")]List<string> container, [FromQuery (Name = "mediaSourceId")]string mediaSourceId, [FromQuery (Name = "deviceId")]string deviceId, [FromQuery (Name = "userId")]Guid? userId, [FromQuery (Name = "audioCodec")]string audioCodec, [FromQuery (Name = "maxAudioChannels")]int? maxAudioChannels, [FromQuery (Name = "transcodingAudioChannels")]int? transcodingAudioChannels, [FromQuery (Name = "maxStreamingBitrate")]int? maxStreamingBitrate, [FromQuery (Name = "audioBitRate")]int? audioBitRate, [FromQuery (Name = "startTimeTicks")]long? startTimeTicks, [FromQuery (Name = "transcodingContainer")]string transcodingContainer, [FromQuery (Name = "transcodingProtocol")]string transcodingProtocol, [FromQuery (Name = "maxAudioSampleRate")]int? maxAudioSampleRate, [FromQuery (Name = "maxAudioBitDepth")]int? maxAudioBitDepth, [FromQuery (Name = "enableRemoteMedia")]bool? enableRemoteMedia, [FromQuery (Name = "breakOnNonKeyFrames")]bool? breakOnNonKeyFrames, [FromQuery (Name = "enableRedirection")]bool? enableRedirection)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 302 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(302);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
