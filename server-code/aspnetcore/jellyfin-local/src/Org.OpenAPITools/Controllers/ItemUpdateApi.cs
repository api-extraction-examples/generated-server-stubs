/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ItemUpdateApiController : ControllerBase
    { 
        /// <summary>
        /// Gets metadata editor info for an item.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <response code="200">Item metadata editor returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Items/{itemId}/MetadataEditor")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetMetadataEditorInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(MetadataEditorInfo), description: "Item metadata editor returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetMetadataEditorInfo([FromRoute (Name = "itemId")][Required]Guid itemId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MetadataEditorInfo));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "{\n  \"ParentalRatingOptions\" : [ {\n    \"Value\" : 0,\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : 0,\n    \"Name\" : \"Name\"\n  } ],\n  \"ContentType\" : \"ContentType\",\n  \"Countries\" : [ {\n    \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n    \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\"\n  }, {\n    \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n    \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\"\n  } ],\n  \"ContentTypeOptions\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Cultures\" : [ {\n    \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n    \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\",\n    \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n  }, {\n    \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n    \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\",\n    \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n  } ],\n  \"ExternalIdInfos\" : [ {\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\",\n    \"UrlFormatString\" : \"UrlFormatString\"\n  }, {\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\",\n    \"UrlFormatString\" : \"UrlFormatString\"\n  } ]\n}";
            exampleJson = "{\n  \"ParentalRatingOptions\" : [ {\n    \"Value\" : 0,\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : 0,\n    \"Name\" : \"Name\"\n  } ],\n  \"ContentType\" : \"ContentType\",\n  \"Countries\" : [ {\n    \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n    \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\"\n  }, {\n    \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n    \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\"\n  } ],\n  \"ContentTypeOptions\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Cultures\" : [ {\n    \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n    \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\",\n    \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n  }, {\n    \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n    \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\",\n    \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n  } ],\n  \"ExternalIdInfos\" : [ {\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\",\n    \"UrlFormatString\" : \"UrlFormatString\"\n  }, {\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\",\n    \"UrlFormatString\" : \"UrlFormatString\"\n  } ]\n}";
            exampleJson = "{\n  \"ParentalRatingOptions\" : [ {\n    \"Value\" : 0,\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : 0,\n    \"Name\" : \"Name\"\n  } ],\n  \"ContentType\" : \"ContentType\",\n  \"Countries\" : [ {\n    \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n    \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\"\n  }, {\n    \"TwoLetterISORegionName\" : \"TwoLetterISORegionName\",\n    \"ThreeLetterISORegionName\" : \"ThreeLetterISORegionName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\"\n  } ],\n  \"ContentTypeOptions\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Cultures\" : [ {\n    \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n    \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\",\n    \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n  }, {\n    \"ThreeLetterISOLanguageNames\" : [ \"ThreeLetterISOLanguageNames\", \"ThreeLetterISOLanguageNames\" ],\n    \"ThreeLetterISOLanguageName\" : \"ThreeLetterISOLanguageName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Name\" : \"Name\",\n    \"TwoLetterISOLanguageName\" : \"TwoLetterISOLanguageName\"\n  } ],\n  \"ExternalIdInfos\" : [ {\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\",\n    \"UrlFormatString\" : \"UrlFormatString\"\n  }, {\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\",\n    \"UrlFormatString\" : \"UrlFormatString\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MetadataEditorInfo>(exampleJson)
            : default(MetadataEditorInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an item.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="baseItemDto">The new item properties.</param>
        /// <response code="204">Item updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Item not found.</response>
        [HttpPost]
        [Route("/Items/{itemId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateItem")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult UpdateItem([FromRoute (Name = "itemId")][Required]Guid itemId, [FromBody]BaseItemDto baseItemDto)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates an item&#39;s content type.
        /// </summary>
        /// <param name="itemId">The item id.</param>
        /// <param name="contentType">The content type of the item.</param>
        /// <response code="204">Item content type updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Item not found.</response>
        [HttpPost]
        [Route("/Items/{itemId}/ContentType")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("UpdateItemContentType")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult UpdateItemContentType([FromRoute (Name = "itemId")][Required]Guid itemId, [FromQuery (Name = "contentType")]string contentType)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }
    }
}
