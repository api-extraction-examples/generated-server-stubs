/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ConfigurationApiController : ControllerBase
    { 
        /// <summary>
        /// Gets application configuration.
        /// </summary>
        /// <response code="200">Application configuration returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/System/Configuration")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetConfiguration")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerConfiguration), description: "Application configuration returned.")]
        public virtual IActionResult GetConfiguration()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerConfiguration));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"EnableSlowResponseWarning\" : true,\n  \"RemoteIPFilter\" : [ \"RemoteIPFilter\", \"RemoteIPFilter\" ],\n  \"CorsHosts\" : [ \"CorsHosts\", \"CorsHosts\" ],\n  \"IsPortAuthorized\" : true,\n  \"IsStartupWizardCompleted\" : true,\n  \"UICulture\" : \"UICulture\",\n  \"CodecsUsed\" : [ \"CodecsUsed\", \"CodecsUsed\" ],\n  \"AutoDiscovery\" : true,\n  \"LocalNetworkAddresses\" : [ \"LocalNetworkAddresses\", \"LocalNetworkAddresses\" ],\n  \"EnableUPnP\" : true,\n  \"EnableMultiSocketBinding\" : true,\n  \"EnableIPV4\" : true,\n  \"MetadataCountryCode\" : \"MetadataCountryCode\",\n  \"SaveMetadataHidden\" : true,\n  \"EnableIPV6\" : true,\n  \"EnableNormalizedItemByNameIds\" : true,\n  \"UDPSendDelay\" : 5,\n  \"LocalNetworkSubnets\" : [ \"LocalNetworkSubnets\", \"LocalNetworkSubnets\" ],\n  \"MetadataNetworkPath\" : \"MetadataNetworkPath\",\n  \"EnableNewOmdbSupport\" : true,\n  \"ActivityLogRetentionDays\" : 0,\n  \"PublishedServerUriBySubnet\" : [ \"PublishedServerUriBySubnet\", \"PublishedServerUriBySubnet\" ],\n  \"SortRemoveCharacters\" : [ \"SortRemoveCharacters\", \"SortRemoveCharacters\" ],\n  \"DisableLiveTvChannelUserDataName\" : true,\n  \"MaxResumePct\" : 4,\n  \"HttpServerPortNumber\" : 1,\n  \"MinResumeDurationSeconds\" : 1,\n  \"SlowResponseThresholdMs\" : 1,\n  \"RequireHttps\" : true,\n  \"LogFileRetentionDays\" : 3,\n  \"LibraryScanFanoutConcurrency\" : 9,\n  \"HDHomerunPortRange\" : \"HDHomerunPortRange\",\n  \"SkipDeserializationForBasicTypes\" : true,\n  \"MetadataOptions\" : [ {\n    \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ],\n    \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ],\n    \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n    \"ItemType\" : \"ItemType\",\n    \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ],\n    \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  }, {\n    \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ],\n    \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ],\n    \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n    \"ItemType\" : \"ItemType\",\n    \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ],\n    \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  } ],\n  \"HttpsPortNumber\" : 5,\n  \"MinResumePct\" : 1,\n  \"CertificatePassword\" : \"CertificatePassword\",\n  \"SSDPTracingFilter\" : \"SSDPTracingFilter\",\n  \"RemoteClientBitrateLimit\" : 7,\n  \"ImageExtractionTimeoutMs\" : 5,\n  \"EnableExternalContentInSuggestions\" : true,\n  \"RemoveOldPlugins\" : true,\n  \"UPnPCreateHttpPortMap\" : true,\n  \"LibraryMonitorDelay\" : 7,\n  \"EnableCaseSensitiveItemIds\" : true,\n  \"SortReplaceCharacters\" : [ \"SortReplaceCharacters\", \"SortReplaceCharacters\" ],\n  \"LibraryMetadataRefreshConcurrency\" : 2,\n  \"UDPPortRange\" : \"UDPPortRange\",\n  \"PreviousVersionStr\" : \"PreviousVersionStr\",\n  \"EnableSSDPTracing\" : true,\n  \"AutoDiscoveryTracing\" : true,\n  \"PathSubstitutions\" : [ {\n    \"From\" : \"From\",\n    \"To\" : \"To\"\n  }, {\n    \"From\" : \"From\",\n    \"To\" : \"To\"\n  } ],\n  \"CachePath\" : \"CachePath\",\n  \"MaxAudiobookResume\" : 2,\n  \"EnableFolderView\" : true,\n  \"BaseUrl\" : \"BaseUrl\",\n  \"UninstalledPlugins\" : [ \"UninstalledPlugins\", \"UninstalledPlugins\" ],\n  \"DisplaySpecialsWithinSeasons\" : true,\n  \"EnableDashboardResponseCaching\" : true,\n  \"EnableRemoteAccess\" : true,\n  \"KnownProxies\" : [ \"KnownProxies\", \"KnownProxies\" ],\n  \"MinAudiobookResume\" : 7,\n  \"CertificatePath\" : \"CertificatePath\",\n  \"PluginRepositories\" : [ {\n    \"Enabled\" : true,\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Enabled\" : true,\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  } ],\n  \"IgnoreVirtualInterfaces\" : true,\n  \"ContentTypes\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"PreviousVersion\" : {\n    \"Major\" : 6,\n    \"Revision\" : 2,\n    \"Build\" : 0,\n    \"Minor\" : 5,\n    \"MinorRevision\" : 5,\n    \"MajorRevision\" : 1\n  },\n  \"GatewayMonitorPeriod\" : 6,\n  \"IsRemoteIPFilterBlacklist\" : true,\n  \"MetadataPath\" : \"MetadataPath\",\n  \"UDPSendCount\" : 4,\n  \"EnableMetrics\" : true,\n  \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n  \"EnableHttps\" : true,\n  \"PublicHttpsPort\" : 1,\n  \"TrustAllIP6Interfaces\" : true,\n  \"ServerName\" : \"ServerName\",\n  \"QuickConnectAvailable\" : true,\n  \"EnableSimpleArtistDetection\" : true,\n  \"SortRemoveWords\" : [ \"SortRemoveWords\", \"SortRemoveWords\" ],\n  \"VirtualInterfaceNames\" : \"VirtualInterfaceNames\",\n  \"EnableGroupingIntoCollections\" : true,\n  \"DisablePluginImages\" : true,\n  \"PublicPort\" : 6\n}";
            exampleJson = "{\n  \"EnableSlowResponseWarning\" : true,\n  \"RemoteIPFilter\" : [ \"RemoteIPFilter\", \"RemoteIPFilter\" ],\n  \"CorsHosts\" : [ \"CorsHosts\", \"CorsHosts\" ],\n  \"IsPortAuthorized\" : true,\n  \"IsStartupWizardCompleted\" : true,\n  \"UICulture\" : \"UICulture\",\n  \"CodecsUsed\" : [ \"CodecsUsed\", \"CodecsUsed\" ],\n  \"AutoDiscovery\" : true,\n  \"LocalNetworkAddresses\" : [ \"LocalNetworkAddresses\", \"LocalNetworkAddresses\" ],\n  \"EnableUPnP\" : true,\n  \"EnableMultiSocketBinding\" : true,\n  \"EnableIPV4\" : true,\n  \"MetadataCountryCode\" : \"MetadataCountryCode\",\n  \"SaveMetadataHidden\" : true,\n  \"EnableIPV6\" : true,\n  \"EnableNormalizedItemByNameIds\" : true,\n  \"UDPSendDelay\" : 5,\n  \"LocalNetworkSubnets\" : [ \"LocalNetworkSubnets\", \"LocalNetworkSubnets\" ],\n  \"MetadataNetworkPath\" : \"MetadataNetworkPath\",\n  \"EnableNewOmdbSupport\" : true,\n  \"ActivityLogRetentionDays\" : 0,\n  \"PublishedServerUriBySubnet\" : [ \"PublishedServerUriBySubnet\", \"PublishedServerUriBySubnet\" ],\n  \"SortRemoveCharacters\" : [ \"SortRemoveCharacters\", \"SortRemoveCharacters\" ],\n  \"DisableLiveTvChannelUserDataName\" : true,\n  \"MaxResumePct\" : 4,\n  \"HttpServerPortNumber\" : 1,\n  \"MinResumeDurationSeconds\" : 1,\n  \"SlowResponseThresholdMs\" : 1,\n  \"RequireHttps\" : true,\n  \"LogFileRetentionDays\" : 3,\n  \"LibraryScanFanoutConcurrency\" : 9,\n  \"HDHomerunPortRange\" : \"HDHomerunPortRange\",\n  \"SkipDeserializationForBasicTypes\" : true,\n  \"MetadataOptions\" : [ {\n    \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ],\n    \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ],\n    \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n    \"ItemType\" : \"ItemType\",\n    \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ],\n    \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  }, {\n    \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ],\n    \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ],\n    \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n    \"ItemType\" : \"ItemType\",\n    \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ],\n    \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  } ],\n  \"HttpsPortNumber\" : 5,\n  \"MinResumePct\" : 1,\n  \"CertificatePassword\" : \"CertificatePassword\",\n  \"SSDPTracingFilter\" : \"SSDPTracingFilter\",\n  \"RemoteClientBitrateLimit\" : 7,\n  \"ImageExtractionTimeoutMs\" : 5,\n  \"EnableExternalContentInSuggestions\" : true,\n  \"RemoveOldPlugins\" : true,\n  \"UPnPCreateHttpPortMap\" : true,\n  \"LibraryMonitorDelay\" : 7,\n  \"EnableCaseSensitiveItemIds\" : true,\n  \"SortReplaceCharacters\" : [ \"SortReplaceCharacters\", \"SortReplaceCharacters\" ],\n  \"LibraryMetadataRefreshConcurrency\" : 2,\n  \"UDPPortRange\" : \"UDPPortRange\",\n  \"PreviousVersionStr\" : \"PreviousVersionStr\",\n  \"EnableSSDPTracing\" : true,\n  \"AutoDiscoveryTracing\" : true,\n  \"PathSubstitutions\" : [ {\n    \"From\" : \"From\",\n    \"To\" : \"To\"\n  }, {\n    \"From\" : \"From\",\n    \"To\" : \"To\"\n  } ],\n  \"CachePath\" : \"CachePath\",\n  \"MaxAudiobookResume\" : 2,\n  \"EnableFolderView\" : true,\n  \"BaseUrl\" : \"BaseUrl\",\n  \"UninstalledPlugins\" : [ \"UninstalledPlugins\", \"UninstalledPlugins\" ],\n  \"DisplaySpecialsWithinSeasons\" : true,\n  \"EnableDashboardResponseCaching\" : true,\n  \"EnableRemoteAccess\" : true,\n  \"KnownProxies\" : [ \"KnownProxies\", \"KnownProxies\" ],\n  \"MinAudiobookResume\" : 7,\n  \"CertificatePath\" : \"CertificatePath\",\n  \"PluginRepositories\" : [ {\n    \"Enabled\" : true,\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Enabled\" : true,\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  } ],\n  \"IgnoreVirtualInterfaces\" : true,\n  \"ContentTypes\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"PreviousVersion\" : {\n    \"Major\" : 6,\n    \"Revision\" : 2,\n    \"Build\" : 0,\n    \"Minor\" : 5,\n    \"MinorRevision\" : 5,\n    \"MajorRevision\" : 1\n  },\n  \"GatewayMonitorPeriod\" : 6,\n  \"IsRemoteIPFilterBlacklist\" : true,\n  \"MetadataPath\" : \"MetadataPath\",\n  \"UDPSendCount\" : 4,\n  \"EnableMetrics\" : true,\n  \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n  \"EnableHttps\" : true,\n  \"PublicHttpsPort\" : 1,\n  \"TrustAllIP6Interfaces\" : true,\n  \"ServerName\" : \"ServerName\",\n  \"QuickConnectAvailable\" : true,\n  \"EnableSimpleArtistDetection\" : true,\n  \"SortRemoveWords\" : [ \"SortRemoveWords\", \"SortRemoveWords\" ],\n  \"VirtualInterfaceNames\" : \"VirtualInterfaceNames\",\n  \"EnableGroupingIntoCollections\" : true,\n  \"DisablePluginImages\" : true,\n  \"PublicPort\" : 6\n}";
            exampleJson = "{\n  \"EnableSlowResponseWarning\" : true,\n  \"RemoteIPFilter\" : [ \"RemoteIPFilter\", \"RemoteIPFilter\" ],\n  \"CorsHosts\" : [ \"CorsHosts\", \"CorsHosts\" ],\n  \"IsPortAuthorized\" : true,\n  \"IsStartupWizardCompleted\" : true,\n  \"UICulture\" : \"UICulture\",\n  \"CodecsUsed\" : [ \"CodecsUsed\", \"CodecsUsed\" ],\n  \"AutoDiscovery\" : true,\n  \"LocalNetworkAddresses\" : [ \"LocalNetworkAddresses\", \"LocalNetworkAddresses\" ],\n  \"EnableUPnP\" : true,\n  \"EnableMultiSocketBinding\" : true,\n  \"EnableIPV4\" : true,\n  \"MetadataCountryCode\" : \"MetadataCountryCode\",\n  \"SaveMetadataHidden\" : true,\n  \"EnableIPV6\" : true,\n  \"EnableNormalizedItemByNameIds\" : true,\n  \"UDPSendDelay\" : 5,\n  \"LocalNetworkSubnets\" : [ \"LocalNetworkSubnets\", \"LocalNetworkSubnets\" ],\n  \"MetadataNetworkPath\" : \"MetadataNetworkPath\",\n  \"EnableNewOmdbSupport\" : true,\n  \"ActivityLogRetentionDays\" : 0,\n  \"PublishedServerUriBySubnet\" : [ \"PublishedServerUriBySubnet\", \"PublishedServerUriBySubnet\" ],\n  \"SortRemoveCharacters\" : [ \"SortRemoveCharacters\", \"SortRemoveCharacters\" ],\n  \"DisableLiveTvChannelUserDataName\" : true,\n  \"MaxResumePct\" : 4,\n  \"HttpServerPortNumber\" : 1,\n  \"MinResumeDurationSeconds\" : 1,\n  \"SlowResponseThresholdMs\" : 1,\n  \"RequireHttps\" : true,\n  \"LogFileRetentionDays\" : 3,\n  \"LibraryScanFanoutConcurrency\" : 9,\n  \"HDHomerunPortRange\" : \"HDHomerunPortRange\",\n  \"SkipDeserializationForBasicTypes\" : true,\n  \"MetadataOptions\" : [ {\n    \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ],\n    \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ],\n    \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n    \"ItemType\" : \"ItemType\",\n    \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ],\n    \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  }, {\n    \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ],\n    \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ],\n    \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n    \"ItemType\" : \"ItemType\",\n    \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ],\n    \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n    \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n  } ],\n  \"HttpsPortNumber\" : 5,\n  \"MinResumePct\" : 1,\n  \"CertificatePassword\" : \"CertificatePassword\",\n  \"SSDPTracingFilter\" : \"SSDPTracingFilter\",\n  \"RemoteClientBitrateLimit\" : 7,\n  \"ImageExtractionTimeoutMs\" : 5,\n  \"EnableExternalContentInSuggestions\" : true,\n  \"RemoveOldPlugins\" : true,\n  \"UPnPCreateHttpPortMap\" : true,\n  \"LibraryMonitorDelay\" : 7,\n  \"EnableCaseSensitiveItemIds\" : true,\n  \"SortReplaceCharacters\" : [ \"SortReplaceCharacters\", \"SortReplaceCharacters\" ],\n  \"LibraryMetadataRefreshConcurrency\" : 2,\n  \"UDPPortRange\" : \"UDPPortRange\",\n  \"PreviousVersionStr\" : \"PreviousVersionStr\",\n  \"EnableSSDPTracing\" : true,\n  \"AutoDiscoveryTracing\" : true,\n  \"PathSubstitutions\" : [ {\n    \"From\" : \"From\",\n    \"To\" : \"To\"\n  }, {\n    \"From\" : \"From\",\n    \"To\" : \"To\"\n  } ],\n  \"CachePath\" : \"CachePath\",\n  \"MaxAudiobookResume\" : 2,\n  \"EnableFolderView\" : true,\n  \"BaseUrl\" : \"BaseUrl\",\n  \"UninstalledPlugins\" : [ \"UninstalledPlugins\", \"UninstalledPlugins\" ],\n  \"DisplaySpecialsWithinSeasons\" : true,\n  \"EnableDashboardResponseCaching\" : true,\n  \"EnableRemoteAccess\" : true,\n  \"KnownProxies\" : [ \"KnownProxies\", \"KnownProxies\" ],\n  \"MinAudiobookResume\" : 7,\n  \"CertificatePath\" : \"CertificatePath\",\n  \"PluginRepositories\" : [ {\n    \"Enabled\" : true,\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Enabled\" : true,\n    \"Url\" : \"Url\",\n    \"Name\" : \"Name\"\n  } ],\n  \"IgnoreVirtualInterfaces\" : true,\n  \"ContentTypes\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"PreviousVersion\" : {\n    \"Major\" : 6,\n    \"Revision\" : 2,\n    \"Build\" : 0,\n    \"Minor\" : 5,\n    \"MinorRevision\" : 5,\n    \"MajorRevision\" : 1\n  },\n  \"GatewayMonitorPeriod\" : 6,\n  \"IsRemoteIPFilterBlacklist\" : true,\n  \"MetadataPath\" : \"MetadataPath\",\n  \"UDPSendCount\" : 4,\n  \"EnableMetrics\" : true,\n  \"PreferredMetadataLanguage\" : \"PreferredMetadataLanguage\",\n  \"EnableHttps\" : true,\n  \"PublicHttpsPort\" : 1,\n  \"TrustAllIP6Interfaces\" : true,\n  \"ServerName\" : \"ServerName\",\n  \"QuickConnectAvailable\" : true,\n  \"EnableSimpleArtistDetection\" : true,\n  \"SortRemoveWords\" : [ \"SortRemoveWords\", \"SortRemoveWords\" ],\n  \"VirtualInterfaceNames\" : \"VirtualInterfaceNames\",\n  \"EnableGroupingIntoCollections\" : true,\n  \"DisablePluginImages\" : true,\n  \"PublicPort\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ServerConfiguration>(exampleJson)
            : default(ServerConfiguration);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a default MetadataOptions object.
        /// </summary>
        /// <response code="200">Metadata options returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/System/Configuration/MetadataOptions/Default")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetDefaultMetadataOptions")]
        [SwaggerResponse(statusCode: 200, type: typeof(MetadataOptions), description: "Metadata options returned.")]
        public virtual IActionResult GetDefaultMetadataOptions()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MetadataOptions));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ],\n  \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ],\n  \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n  \"ItemType\" : \"ItemType\",\n  \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ],\n  \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n  \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n}";
            exampleJson = "{\n  \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ],\n  \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ],\n  \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n  \"ItemType\" : \"ItemType\",\n  \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ],\n  \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n  \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n}";
            exampleJson = "{\n  \"DisabledImageFetchers\" : [ \"DisabledImageFetchers\", \"DisabledImageFetchers\" ],\n  \"DisabledMetadataSavers\" : [ \"DisabledMetadataSavers\", \"DisabledMetadataSavers\" ],\n  \"MetadataFetcherOrder\" : [ \"MetadataFetcherOrder\", \"MetadataFetcherOrder\" ],\n  \"ItemType\" : \"ItemType\",\n  \"DisabledMetadataFetchers\" : [ \"DisabledMetadataFetchers\", \"DisabledMetadataFetchers\" ],\n  \"ImageFetcherOrder\" : [ \"ImageFetcherOrder\", \"ImageFetcherOrder\" ],\n  \"LocalMetadataReaderOrder\" : [ \"LocalMetadataReaderOrder\", \"LocalMetadataReaderOrder\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MetadataOptions>(exampleJson)
            : default(MetadataOptions);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a named configuration.
        /// </summary>
        /// <param name="key">Configuration key.</param>
        /// <response code="200">Configuration returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/System/Configuration/{key}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetNamedConfiguration")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Configuration returned.")]
        public virtual IActionResult GetNamedConfiguration([FromRoute (Name = "key")][Required]string key)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates application configuration.
        /// </summary>
        /// <param name="serverConfiguration">Configuration.</param>
        /// <response code="204">Configuration updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/System/Configuration")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateConfiguration")]
        public virtual IActionResult UpdateConfiguration([FromBody]ServerConfiguration serverConfiguration)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the path to the media encoder.
        /// </summary>
        /// <param name="mediaEncoderPathDto">Media encoder path form body.</param>
        /// <response code="204">Media encoder path updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/System/MediaEncoder/Path")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateMediaEncoderPath")]
        public virtual IActionResult UpdateMediaEncoderPath([FromBody]MediaEncoderPathDto mediaEncoderPathDto)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates named configuration.
        /// </summary>
        /// <param name="key">Configuration key.</param>
        /// <response code="204">Named configuration updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/System/Configuration/{key}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("UpdateNamedConfiguration")]
        public virtual IActionResult UpdateNamedConfiguration([FromRoute (Name = "key")][Required]string key)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }
    }
}
