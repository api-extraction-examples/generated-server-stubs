/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SystemApiController : ControllerBase
    { 
        /// <summary>
        /// Gets information about the request endpoint.
        /// </summary>
        /// <response code="200">Information retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/System/Endpoint")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetEndpointInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(EndPointInfo), description: "Information retrieved.")]
        public virtual IActionResult GetEndpointInfo()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EndPointInfo));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"IsLocal\" : true,\n  \"IsInNetwork\" : true\n}";
            exampleJson = "{\n  \"IsLocal\" : true,\n  \"IsInNetwork\" : true\n}";
            exampleJson = "{\n  \"IsLocal\" : true,\n  \"IsInNetwork\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EndPointInfo>(exampleJson)
            : default(EndPointInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a log file.
        /// </summary>
        /// <param name="name">The name of the log file to get.</param>
        /// <response code="200">Log file retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/System/Logs/Log")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetLogFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Log file retrieved.")]
        public virtual IActionResult GetLogFile([FromQuery (Name = "name")][Required()]string name)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Pings the system.
        /// </summary>
        /// <response code="200">Information retrieved.</response>
        [HttpGet]
        [Route("/System/Ping")]
        [ValidateModelState]
        [SwaggerOperation("GetPingSystem")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Information retrieved.")]
        public virtual IActionResult GetPingSystem()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets public information about the server.
        /// </summary>
        /// <response code="200">Information retrieved.</response>
        [HttpGet]
        [Route("/System/Info/Public")]
        [ValidateModelState]
        [SwaggerOperation("GetPublicSystemInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(PublicSystemInfo), description: "Information retrieved.")]
        public virtual IActionResult GetPublicSystemInfo()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PublicSystemInfo));
            string exampleJson = null;
            exampleJson = "{\n  \"OperatingSystem\" : \"OperatingSystem\",\n  \"LocalAddress\" : \"LocalAddress\",\n  \"ProductName\" : \"ProductName\",\n  \"Version\" : \"Version\",\n  \"ServerName\" : \"ServerName\",\n  \"Id\" : \"Id\",\n  \"StartupWizardCompleted\" : true\n}";
            exampleJson = "{\n  \"OperatingSystem\" : \"OperatingSystem\",\n  \"LocalAddress\" : \"LocalAddress\",\n  \"ProductName\" : \"ProductName\",\n  \"Version\" : \"Version\",\n  \"ServerName\" : \"ServerName\",\n  \"Id\" : \"Id\",\n  \"StartupWizardCompleted\" : true\n}";
            exampleJson = "{\n  \"OperatingSystem\" : \"OperatingSystem\",\n  \"LocalAddress\" : \"LocalAddress\",\n  \"ProductName\" : \"ProductName\",\n  \"Version\" : \"Version\",\n  \"ServerName\" : \"ServerName\",\n  \"Id\" : \"Id\",\n  \"StartupWizardCompleted\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PublicSystemInfo>(exampleJson)
            : default(PublicSystemInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of available server log files.
        /// </summary>
        /// <response code="200">Information retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/System/Logs")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetServerLogs")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LogFile>), description: "Information retrieved.")]
        public virtual IActionResult GetServerLogs()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<LogFile>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n}, {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n}, {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n}, {\n  \"Size\" : 0,\n  \"DateCreated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<LogFile>>(exampleJson)
            : default(List<LogFile>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets information about the server.
        /// </summary>
        /// <response code="200">Information retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/System/Info")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetSystemInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(SystemInfo), description: "Information retrieved.")]
        public virtual IActionResult GetSystemInfo()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SystemInfo));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"OperatingSystem\" : \"OperatingSystem\",\n  \"ProductName\" : \"ProductName\",\n  \"PackageName\" : \"PackageName\",\n  \"TranscodingTempPath\" : \"TranscodingTempPath\",\n  \"CanSelfRestart\" : true,\n  \"StartupWizardCompleted\" : true,\n  \"Version\" : \"Version\",\n  \"CachePath\" : \"CachePath\",\n  \"HasPendingRestart\" : true,\n  \"ProgramDataPath\" : \"ProgramDataPath\",\n  \"WebPath\" : \"WebPath\",\n  \"SupportsLibraryMonitor\" : true,\n  \"LocalAddress\" : \"LocalAddress\",\n  \"CanLaunchWebBrowser\" : true,\n  \"IsShuttingDown\" : true,\n  \"ItemsByNamePath\" : \"ItemsByNamePath\",\n  \"CompletedInstallations\" : [ {\n    \"SourceUrl\" : \"SourceUrl\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"Checksum\" : \"Checksum\",\n    \"Changelog\" : \"Changelog\",\n    \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  }, {\n    \"SourceUrl\" : \"SourceUrl\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"Checksum\" : \"Checksum\",\n    \"Changelog\" : \"Changelog\",\n    \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  } ],\n  \"WebSocketPortNumber\" : 0,\n  \"OperatingSystemDisplayName\" : \"OperatingSystemDisplayName\",\n  \"InternalMetadataPath\" : \"InternalMetadataPath\",\n  \"ServerName\" : \"ServerName\",\n  \"Id\" : \"Id\",\n  \"HasUpdateAvailable\" : true,\n  \"LogPath\" : \"LogPath\"\n}";
            exampleJson = "{\n  \"OperatingSystem\" : \"OperatingSystem\",\n  \"ProductName\" : \"ProductName\",\n  \"PackageName\" : \"PackageName\",\n  \"TranscodingTempPath\" : \"TranscodingTempPath\",\n  \"CanSelfRestart\" : true,\n  \"StartupWizardCompleted\" : true,\n  \"Version\" : \"Version\",\n  \"CachePath\" : \"CachePath\",\n  \"HasPendingRestart\" : true,\n  \"ProgramDataPath\" : \"ProgramDataPath\",\n  \"WebPath\" : \"WebPath\",\n  \"SupportsLibraryMonitor\" : true,\n  \"LocalAddress\" : \"LocalAddress\",\n  \"CanLaunchWebBrowser\" : true,\n  \"IsShuttingDown\" : true,\n  \"ItemsByNamePath\" : \"ItemsByNamePath\",\n  \"CompletedInstallations\" : [ {\n    \"SourceUrl\" : \"SourceUrl\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"Checksum\" : \"Checksum\",\n    \"Changelog\" : \"Changelog\",\n    \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  }, {\n    \"SourceUrl\" : \"SourceUrl\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"Checksum\" : \"Checksum\",\n    \"Changelog\" : \"Changelog\",\n    \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  } ],\n  \"WebSocketPortNumber\" : 0,\n  \"OperatingSystemDisplayName\" : \"OperatingSystemDisplayName\",\n  \"InternalMetadataPath\" : \"InternalMetadataPath\",\n  \"ServerName\" : \"ServerName\",\n  \"Id\" : \"Id\",\n  \"HasUpdateAvailable\" : true,\n  \"LogPath\" : \"LogPath\"\n}";
            exampleJson = "{\n  \"OperatingSystem\" : \"OperatingSystem\",\n  \"ProductName\" : \"ProductName\",\n  \"PackageName\" : \"PackageName\",\n  \"TranscodingTempPath\" : \"TranscodingTempPath\",\n  \"CanSelfRestart\" : true,\n  \"StartupWizardCompleted\" : true,\n  \"Version\" : \"Version\",\n  \"CachePath\" : \"CachePath\",\n  \"HasPendingRestart\" : true,\n  \"ProgramDataPath\" : \"ProgramDataPath\",\n  \"WebPath\" : \"WebPath\",\n  \"SupportsLibraryMonitor\" : true,\n  \"LocalAddress\" : \"LocalAddress\",\n  \"CanLaunchWebBrowser\" : true,\n  \"IsShuttingDown\" : true,\n  \"ItemsByNamePath\" : \"ItemsByNamePath\",\n  \"CompletedInstallations\" : [ {\n    \"SourceUrl\" : \"SourceUrl\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"Checksum\" : \"Checksum\",\n    \"Changelog\" : \"Changelog\",\n    \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  }, {\n    \"SourceUrl\" : \"SourceUrl\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 2,\n      \"Build\" : 0,\n      \"Minor\" : 5,\n      \"MinorRevision\" : 5,\n      \"MajorRevision\" : 1\n    },\n    \"Checksum\" : \"Checksum\",\n    \"Changelog\" : \"Changelog\",\n    \"Guid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"Name\" : \"Name\"\n  } ],\n  \"WebSocketPortNumber\" : 0,\n  \"OperatingSystemDisplayName\" : \"OperatingSystemDisplayName\",\n  \"InternalMetadataPath\" : \"InternalMetadataPath\",\n  \"ServerName\" : \"ServerName\",\n  \"Id\" : \"Id\",\n  \"HasUpdateAvailable\" : true,\n  \"LogPath\" : \"LogPath\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SystemInfo>(exampleJson)
            : default(SystemInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets wake on lan information.
        /// </summary>
        /// <response code="200">Information retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/System/WakeOnLanInfo")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetWakeOnLanInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<WakeOnLanInfo>), description: "Information retrieved.")]
        public virtual IActionResult GetWakeOnLanInfo()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<WakeOnLanInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Port\" : 0,\n  \"MacAddress\" : \"MacAddress\"\n}, {\n  \"Port\" : 0,\n  \"MacAddress\" : \"MacAddress\"\n} ]";
            exampleJson = "[ {\n  \"Port\" : 0,\n  \"MacAddress\" : \"MacAddress\"\n}, {\n  \"Port\" : 0,\n  \"MacAddress\" : \"MacAddress\"\n} ]";
            exampleJson = "[ {\n  \"Port\" : 0,\n  \"MacAddress\" : \"MacAddress\"\n}, {\n  \"Port\" : 0,\n  \"MacAddress\" : \"MacAddress\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<WakeOnLanInfo>>(exampleJson)
            : default(List<WakeOnLanInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Pings the system.
        /// </summary>
        /// <response code="200">Information retrieved.</response>
        [HttpPost]
        [Route("/System/Ping")]
        [ValidateModelState]
        [SwaggerOperation("PostPingSystem")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Information retrieved.")]
        public virtual IActionResult PostPingSystem()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Restarts the application.
        /// </summary>
        /// <response code="204">Server restarted.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/System/Restart")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("RestartApplication")]
        public virtual IActionResult RestartApplication()
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Shuts down the application.
        /// </summary>
        /// <response code="204">Server shut down.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPost]
        [Route("/System/Shutdown")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("ShutdownApplication")]
        public virtual IActionResult ShutdownApplication()
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }
    }
}
