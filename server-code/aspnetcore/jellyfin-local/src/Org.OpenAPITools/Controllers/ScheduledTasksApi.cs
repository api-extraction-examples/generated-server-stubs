/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ScheduledTasksApiController : ControllerBase
    { 
        /// <summary>
        /// Get task by id.
        /// </summary>
        /// <param name="taskId">Task Id.</param>
        /// <response code="200">Task retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Task not found.</response>
        [HttpGet]
        [Route("/ScheduledTasks/{taskId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(TaskInfo), description: "Task retrieved.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Task not found.")]
        public virtual IActionResult GetTask([FromRoute (Name = "taskId")][Required]string taskId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TaskInfo));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "{\n  \"IsHidden\" : true,\n  \"Category\" : \"Category\",\n  \"Description\" : \"Description\",\n  \"CurrentProgressPercentage\" : 0.8008281904610115,\n  \"Triggers\" : [ {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  }, {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  } ],\n  \"Id\" : \"Id\",\n  \"LastExecutionResult\" : {\n    \"LongErrorMessage\" : \"LongErrorMessage\",\n    \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Id\" : \"Id\",\n    \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ErrorMessage\" : \"ErrorMessage\",\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\"\n  },\n  \"Key\" : \"Key\",\n  \"Name\" : \"Name\"\n}";
            exampleJson = "{\n  \"IsHidden\" : true,\n  \"Category\" : \"Category\",\n  \"Description\" : \"Description\",\n  \"CurrentProgressPercentage\" : 0.8008281904610115,\n  \"Triggers\" : [ {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  }, {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  } ],\n  \"Id\" : \"Id\",\n  \"LastExecutionResult\" : {\n    \"LongErrorMessage\" : \"LongErrorMessage\",\n    \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Id\" : \"Id\",\n    \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ErrorMessage\" : \"ErrorMessage\",\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\"\n  },\n  \"Key\" : \"Key\",\n  \"Name\" : \"Name\"\n}";
            exampleJson = "{\n  \"IsHidden\" : true,\n  \"Category\" : \"Category\",\n  \"Description\" : \"Description\",\n  \"CurrentProgressPercentage\" : 0.8008281904610115,\n  \"Triggers\" : [ {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  }, {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  } ],\n  \"Id\" : \"Id\",\n  \"LastExecutionResult\" : {\n    \"LongErrorMessage\" : \"LongErrorMessage\",\n    \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Id\" : \"Id\",\n    \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ErrorMessage\" : \"ErrorMessage\",\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\"\n  },\n  \"Key\" : \"Key\",\n  \"Name\" : \"Name\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TaskInfo>(exampleJson)
            : default(TaskInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get tasks.
        /// </summary>
        /// <param name="isHidden">Optional filter tasks that are hidden, or not.</param>
        /// <param name="isEnabled">Optional filter tasks that are enabled, or not.</param>
        /// <response code="200">Scheduled tasks retrieved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/ScheduledTasks")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetTasks")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TaskInfo>), description: "Scheduled tasks retrieved.")]
        public virtual IActionResult GetTasks([FromQuery (Name = "isHidden")]bool? isHidden, [FromQuery (Name = "isEnabled")]bool? isEnabled)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TaskInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsHidden\" : true,\n  \"Category\" : \"Category\",\n  \"Description\" : \"Description\",\n  \"CurrentProgressPercentage\" : 0.8008281904610115,\n  \"Triggers\" : [ {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  }, {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  } ],\n  \"Id\" : \"Id\",\n  \"LastExecutionResult\" : {\n    \"LongErrorMessage\" : \"LongErrorMessage\",\n    \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Id\" : \"Id\",\n    \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ErrorMessage\" : \"ErrorMessage\",\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\"\n  },\n  \"Key\" : \"Key\",\n  \"Name\" : \"Name\"\n}, {\n  \"IsHidden\" : true,\n  \"Category\" : \"Category\",\n  \"Description\" : \"Description\",\n  \"CurrentProgressPercentage\" : 0.8008281904610115,\n  \"Triggers\" : [ {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  }, {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  } ],\n  \"Id\" : \"Id\",\n  \"LastExecutionResult\" : {\n    \"LongErrorMessage\" : \"LongErrorMessage\",\n    \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Id\" : \"Id\",\n    \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ErrorMessage\" : \"ErrorMessage\",\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\"\n  },\n  \"Key\" : \"Key\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"IsHidden\" : true,\n  \"Category\" : \"Category\",\n  \"Description\" : \"Description\",\n  \"CurrentProgressPercentage\" : 0.8008281904610115,\n  \"Triggers\" : [ {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  }, {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  } ],\n  \"Id\" : \"Id\",\n  \"LastExecutionResult\" : {\n    \"LongErrorMessage\" : \"LongErrorMessage\",\n    \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Id\" : \"Id\",\n    \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ErrorMessage\" : \"ErrorMessage\",\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\"\n  },\n  \"Key\" : \"Key\",\n  \"Name\" : \"Name\"\n}, {\n  \"IsHidden\" : true,\n  \"Category\" : \"Category\",\n  \"Description\" : \"Description\",\n  \"CurrentProgressPercentage\" : 0.8008281904610115,\n  \"Triggers\" : [ {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  }, {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  } ],\n  \"Id\" : \"Id\",\n  \"LastExecutionResult\" : {\n    \"LongErrorMessage\" : \"LongErrorMessage\",\n    \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Id\" : \"Id\",\n    \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ErrorMessage\" : \"ErrorMessage\",\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\"\n  },\n  \"Key\" : \"Key\",\n  \"Name\" : \"Name\"\n} ]";
            exampleJson = "[ {\n  \"IsHidden\" : true,\n  \"Category\" : \"Category\",\n  \"Description\" : \"Description\",\n  \"CurrentProgressPercentage\" : 0.8008281904610115,\n  \"Triggers\" : [ {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  }, {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  } ],\n  \"Id\" : \"Id\",\n  \"LastExecutionResult\" : {\n    \"LongErrorMessage\" : \"LongErrorMessage\",\n    \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Id\" : \"Id\",\n    \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ErrorMessage\" : \"ErrorMessage\",\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\"\n  },\n  \"Key\" : \"Key\",\n  \"Name\" : \"Name\"\n}, {\n  \"IsHidden\" : true,\n  \"Category\" : \"Category\",\n  \"Description\" : \"Description\",\n  \"CurrentProgressPercentage\" : 0.8008281904610115,\n  \"Triggers\" : [ {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  }, {\n    \"Type\" : \"Type\",\n    \"IntervalTicks\" : 6,\n    \"TimeOfDayTicks\" : 5,\n    \"MaxRuntimeTicks\" : 1\n  } ],\n  \"Id\" : \"Id\",\n  \"LastExecutionResult\" : {\n    \"LongErrorMessage\" : \"LongErrorMessage\",\n    \"StartTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Id\" : \"Id\",\n    \"EndTimeUtc\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ErrorMessage\" : \"ErrorMessage\",\n    \"Key\" : \"Key\",\n    \"Name\" : \"Name\"\n  },\n  \"Key\" : \"Key\",\n  \"Name\" : \"Name\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TaskInfo>>(exampleJson)
            : default(List<TaskInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Start specified task.
        /// </summary>
        /// <param name="taskId">Task Id.</param>
        /// <response code="204">Task started.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Task not found.</response>
        [HttpPost]
        [Route("/ScheduledTasks/Running/{taskId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("StartTask")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Task not found.")]
        public virtual IActionResult StartTask([FromRoute (Name = "taskId")][Required]string taskId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Stop specified task.
        /// </summary>
        /// <param name="taskId">Task Id.</param>
        /// <response code="204">Task stopped.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Task not found.</response>
        [HttpDelete]
        [Route("/ScheduledTasks/Running/{taskId}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("StopTask")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Task not found.")]
        public virtual IActionResult StopTask([FromRoute (Name = "taskId")][Required]string taskId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Update specified task triggers.
        /// </summary>
        /// <param name="taskId">Task Id.</param>
        /// <param name="taskTriggerInfo">Triggers.</param>
        /// <response code="204">Task triggers updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Task not found.</response>
        [HttpPost]
        [Route("/ScheduledTasks/{taskId}/Triggers")]
        [Authorize(Policy = "CustomAuthentication")]
        [Consumes("application/*+json", "application/json", "text/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateTask")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Task not found.")]
        public virtual IActionResult UpdateTask([FromRoute (Name = "taskId")][Required]string taskId, [FromBody]List<TaskTriggerInfo> taskTriggerInfo)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }
    }
}
