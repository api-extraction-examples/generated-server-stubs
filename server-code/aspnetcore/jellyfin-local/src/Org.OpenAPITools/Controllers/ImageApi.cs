/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ImageApiController : ControllerBase
    { 
        /// <summary>
        /// Delete an item&#39;s image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index.</param>
        /// <response code="204">Image deleted.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Item not found.</response>
        [HttpDelete]
        [Route("/Items/{itemId}/Images/{imageType}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("DeleteItemImage")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult DeleteItemImage([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete an item&#39;s image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">The image index.</param>
        /// <response code="204">Image deleted.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Item not found.</response>
        [HttpDelete]
        [Route("/Items/{itemId}/Images/{imageType}/{imageIndex}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("DeleteItemImageByIndex")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult DeleteItemImageByIndex([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete the user&#39;s image.
        /// </summary>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <response code="204">Image deleted.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">User does not have permission to delete the image.</response>
        [HttpDelete]
        [Route("/Users/{userId}/Images/{imageType}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("DeleteUserImage")]
        [SwaggerResponse(statusCode: 403, type: typeof(ProblemDetails), description: "User does not have permission to delete the image.")]
        public virtual IActionResult DeleteUserImage([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "index")]int? index)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete the user&#39;s image.
        /// </summary>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <response code="204">Image deleted.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">User does not have permission to delete the image.</response>
        [HttpDelete]
        [Route("/Users/{userId}/Images/{imageType}/{index}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("DeleteUserImageByIndex")]
        [SwaggerResponse(statusCode: 403, type: typeof(ProblemDetails), description: "User does not have permission to delete the image.")]
        public virtual IActionResult DeleteUserImageByIndex([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "index")][Required]int index)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get artist image by name.
        /// </summary>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Artists/{name}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("GetArtistImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetArtistImage([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Genres/{name}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("GetGenreImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetGenreImage([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Genres/{name}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("GetGenreImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetGenreImageByIndex([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Items/{itemId}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("GetItemImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetItemImage([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}")]
        [ValidateModelState]
        [SwaggerOperation("GetItemImage2")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetItemImage2([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "maxWidth")][Required]int maxWidth, [FromRoute (Name = "maxHeight")][Required]int maxHeight, [FromRoute (Name = "tag")][Required]string tag, [FromRoute (Name = "format")][Required]ImageFormat format, [FromRoute (Name = "percentPlayed")][Required]double percentPlayed, [FromRoute (Name = "unplayedCount")][Required]int unplayedCount, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Items/{itemId}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("GetItemImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetItemImageByIndex([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get item image infos.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <response code="200">Item images returned.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Items/{itemId}/Images")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("GetItemImageInfos")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ImageInfo>), description: "Item images returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetItemImageInfos([FromRoute (Name = "itemId")][Required]Guid itemId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ImageInfo>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"ImageTag\" : \"ImageTag\",\n  \"Size\" : 1,\n  \"Height\" : 0,\n  \"BlurHash\" : \"BlurHash\",\n  \"ImageIndex\" : 6,\n  \"Width\" : 5\n}, {\n  \"Path\" : \"Path\",\n  \"ImageTag\" : \"ImageTag\",\n  \"Size\" : 1,\n  \"Height\" : 0,\n  \"BlurHash\" : \"BlurHash\",\n  \"ImageIndex\" : 6,\n  \"Width\" : 5\n} ]";
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"ImageTag\" : \"ImageTag\",\n  \"Size\" : 1,\n  \"Height\" : 0,\n  \"BlurHash\" : \"BlurHash\",\n  \"ImageIndex\" : 6,\n  \"Width\" : 5\n}, {\n  \"Path\" : \"Path\",\n  \"ImageTag\" : \"ImageTag\",\n  \"Size\" : 1,\n  \"Height\" : 0,\n  \"BlurHash\" : \"BlurHash\",\n  \"ImageIndex\" : 6,\n  \"Width\" : 5\n} ]";
            exampleJson = "[ {\n  \"Path\" : \"Path\",\n  \"ImageTag\" : \"ImageTag\",\n  \"Size\" : 1,\n  \"Height\" : 0,\n  \"BlurHash\" : \"BlurHash\",\n  \"ImageIndex\" : 6,\n  \"Width\" : 5\n}, {\n  \"Path\" : \"Path\",\n  \"ImageTag\" : \"ImageTag\",\n  \"Size\" : 1,\n  \"Height\" : 0,\n  \"BlurHash\" : \"BlurHash\",\n  \"ImageIndex\" : 6,\n  \"Width\" : 5\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ImageInfo>>(exampleJson)
            : default(List<ImageInfo>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/MusicGenres/{name}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("GetMusicGenreImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetMusicGenreImage([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/MusicGenres/{name}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("GetMusicGenreImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetMusicGenreImageByIndex([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Persons/{name}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("GetPersonImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetPersonImage([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Persons/{name}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("GetPersonImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetPersonImageByIndex([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Studios/{name}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("GetStudioImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetStudioImage([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Studios/{name}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("GetStudioImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetStudioImageByIndex([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Users/{userId}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("GetUserImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetUserImage([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpGet]
        [Route("/Users/{userId}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("GetUserImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult GetUserImageByIndex([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get artist image by name.
        /// </summary>
        /// <param name="name">Artist name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Artists/{name}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("HeadArtistImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadArtistImage([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Genres/{name}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("HeadGenreImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadGenreImage([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get genre image by name.
        /// </summary>
        /// <param name="name">Genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Genres/{name}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("HeadGenreImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadGenreImageByIndex([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Items/{itemId}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("HeadItemImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadItemImage([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}")]
        [ValidateModelState]
        [SwaggerOperation("HeadItemImage2")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadItemImage2([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "maxWidth")][Required]int maxWidth, [FromRoute (Name = "maxHeight")][Required]int maxHeight, [FromRoute (Name = "tag")][Required]string tag, [FromRoute (Name = "format")][Required]ImageFormat format, [FromRoute (Name = "percentPlayed")][Required]double percentPlayed, [FromRoute (Name = "unplayedCount")][Required]int unplayedCount, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the item&#39;s image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="format">Optional. The MediaBrowser.Model.Drawing.ImageFormat of the returned image.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Items/{itemId}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("HeadItemImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadItemImageByIndex([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/MusicGenres/{name}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("HeadMusicGenreImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadMusicGenreImage([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get music genre image by name.
        /// </summary>
        /// <param name="name">Music genre name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/MusicGenres/{name}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("HeadMusicGenreImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadMusicGenreImageByIndex([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Persons/{name}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("HeadPersonImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadPersonImage([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get person image by name.
        /// </summary>
        /// <param name="name">Person name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Persons/{name}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("HeadPersonImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadPersonImageByIndex([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Studios/{name}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("HeadStudioImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadStudioImage([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get studio image by name.
        /// </summary>
        /// <param name="name">Studio name.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Studios/{name}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("HeadStudioImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadStudioImageByIndex([FromRoute (Name = "name")][Required]string name, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Users/{userId}/Images/{imageType}")]
        [ValidateModelState]
        [SwaggerOperation("HeadUserImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadUserImage([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer, [FromQuery (Name = "imageIndex")]int? imageIndex)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get user profile image.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Image index.</param>
        /// <param name="tag">Optional. Supply the cache tag from the item object to receive strong caching headers.</param>
        /// <param name="format">Determines the output format of the image - original,gif,jpg,png.</param>
        /// <param name="maxWidth">The maximum image width to return.</param>
        /// <param name="maxHeight">The maximum image height to return.</param>
        /// <param name="percentPlayed">Optional. Percent to render for the percent played overlay.</param>
        /// <param name="unplayedCount">Optional. Unplayed count overlay to render.</param>
        /// <param name="width">The fixed image width to return.</param>
        /// <param name="height">The fixed image height to return.</param>
        /// <param name="quality">Optional. Quality setting, from 0-100. Defaults to 90 and should suffice in most cases.</param>
        /// <param name="cropWhitespace">Optional. Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.</param>
        /// <param name="addPlayedIndicator">Optional. Add a played indicator.</param>
        /// <param name="blur">Optional. Blur image.</param>
        /// <param name="backgroundColor">Optional. Apply a background color for transparent images.</param>
        /// <param name="foregroundLayer">Optional. Apply a foreground layer on top of the image.</param>
        /// <response code="200">Image stream returned.</response>
        /// <response code="404">Item not found.</response>
        [HttpHead]
        [Route("/Users/{userId}/Images/{imageType}/{imageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("HeadUserImageByIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Image stream returned.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult HeadUserImageByIndex([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "tag")]string tag, [FromQuery (Name = "format")]ImageFormat format, [FromQuery (Name = "maxWidth")]int? maxWidth, [FromQuery (Name = "maxHeight")]int? maxHeight, [FromQuery (Name = "percentPlayed")]double? percentPlayed, [FromQuery (Name = "unplayedCount")]int? unplayedCount, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height, [FromQuery (Name = "quality")]int? quality, [FromQuery (Name = "cropWhitespace")]bool? cropWhitespace, [FromQuery (Name = "addPlayedIndicator")]bool? addPlayedIndicator, [FromQuery (Name = "blur")]int? blur, [FromQuery (Name = "backgroundColor")]string backgroundColor, [FromQuery (Name = "foregroundLayer")]string foregroundLayer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the user image.
        /// </summary>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <response code="204">Image updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">User does not have permission to delete the image.</response>
        [HttpPost]
        [Route("/Users/{userId}/Images/{imageType}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("PostUserImage")]
        [SwaggerResponse(statusCode: 403, type: typeof(ProblemDetails), description: "User does not have permission to delete the image.")]
        public virtual IActionResult PostUserImage([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromQuery (Name = "index")]int? index)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Sets the user image.
        /// </summary>
        /// <param name="userId">User Id.</param>
        /// <param name="imageType">(Unused) Image type.</param>
        /// <param name="index">(Unused) Image index.</param>
        /// <response code="204">Image updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">User does not have permission to delete the image.</response>
        [HttpPost]
        [Route("/Users/{userId}/Images/{imageType}/{index}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("PostUserImageByIndex")]
        [SwaggerResponse(statusCode: 403, type: typeof(ProblemDetails), description: "User does not have permission to delete the image.")]
        public virtual IActionResult PostUserImageByIndex([FromRoute (Name = "userId")][Required]Guid userId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "index")][Required]int index)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Set item image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <response code="204">Image saved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Item not found.</response>
        [HttpPost]
        [Route("/Items/{itemId}/Images/{imageType}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("SetItemImage")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult SetItemImage([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Set item image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">(Unused) Image index.</param>
        /// <response code="204">Image saved.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Item not found.</response>
        [HttpPost]
        [Route("/Items/{itemId}/Images/{imageType}/{imageIndex}")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("SetItemImageByIndex")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult SetItemImageByIndex([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the index for an item image.
        /// </summary>
        /// <param name="itemId">Item id.</param>
        /// <param name="imageType">Image type.</param>
        /// <param name="imageIndex">Old image index.</param>
        /// <param name="newIndex">New image index.</param>
        /// <response code="204">Image index updated.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Item not found.</response>
        [HttpPost]
        [Route("/Items/{itemId}/Images/{imageType}/{imageIndex}/Index")]
        [Authorize(Policy = "CustomAuthentication")]
        [ValidateModelState]
        [SwaggerOperation("UpdateItemImageIndex")]
        [SwaggerResponse(statusCode: 404, type: typeof(ProblemDetails), description: "Item not found.")]
        public virtual IActionResult UpdateItemImageIndex([FromRoute (Name = "itemId")][Required]Guid itemId, [FromRoute (Name = "imageType")][Required]ImageType imageType, [FromRoute (Name = "imageIndex")][Required]int imageIndex, [FromQuery (Name = "newIndex")]int? newIndex)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ProblemDetails));

            throw new NotImplementedException();
        }
    }
}
