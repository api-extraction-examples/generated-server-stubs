/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ImageByNameInfo : IEquatable<ImageByNameInfo>
    {
        /// <summary>
        /// Gets or sets the context.
        /// </summary>
        /// <value>Gets or sets the context.</value>
        [DataMember(Name="Context", EmitDefaultValue=true)]
        public string Context { get; set; }

        /// <summary>
        /// Gets or sets the length of the file.
        /// </summary>
        /// <value>Gets or sets the length of the file.</value>
        [DataMember(Name="FileLength", EmitDefaultValue=true)]
        public long FileLength { get; set; }

        /// <summary>
        /// Gets or sets the format.
        /// </summary>
        /// <value>Gets or sets the format.</value>
        [DataMember(Name="Format", EmitDefaultValue=true)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the theme.
        /// </summary>
        /// <value>Gets or sets the theme.</value>
        [DataMember(Name="Theme", EmitDefaultValue=true)]
        public string Theme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageByNameInfo {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  FileLength: ").Append(FileLength).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImageByNameInfo)obj);
        }

        /// <summary>
        /// Returns true if ImageByNameInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ImageByNameInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageByNameInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                ) && 
                (
                    FileLength == other.FileLength ||
                    
                    FileLength.Equals(other.FileLength)
                ) && 
                (
                    Format == other.Format ||
                    Format != null &&
                    Format.Equals(other.Format)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Theme == other.Theme ||
                    Theme != null &&
                    Theme.Equals(other.Theme)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                    
                    hashCode = hashCode * 59 + FileLength.GetHashCode();
                    if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Theme != null)
                    hashCode = hashCode * 59 + Theme.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImageByNameInfo left, ImageByNameInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImageByNameInfo left, ImageByNameInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
