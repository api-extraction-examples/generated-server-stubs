/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class GroupInfoDto.
    /// </summary>
    [DataContract]
    public partial class GroupInfoDto : IEquatable<GroupInfoDto>
    {
        /// <summary>
        /// Gets the group identifier.
        /// </summary>
        /// <value>Gets the group identifier.</value>
        [DataMember(Name="GroupId", EmitDefaultValue=false)]
        public Guid GroupId { get; set; }

        /// <summary>
        /// Gets the group name.
        /// </summary>
        /// <value>Gets the group name.</value>
        [DataMember(Name="GroupName", EmitDefaultValue=true)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets the date when this DTO has been created.
        /// </summary>
        /// <value>Gets the date when this DTO has been created.</value>
        [DataMember(Name="LastUpdatedAt", EmitDefaultValue=false)]
        public DateTime LastUpdatedAt { get; set; }

        /// <summary>
        /// Gets the participants.
        /// </summary>
        /// <value>Gets the participants.</value>
        [DataMember(Name="Participants", EmitDefaultValue=true)]
        public List<string> Participants { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=true)]
        public GroupStateType State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupInfoDto {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  LastUpdatedAt: ").Append(LastUpdatedAt).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GroupInfoDto)obj);
        }

        /// <summary>
        /// Returns true if GroupInfoDto instances are equal
        /// </summary>
        /// <param name="other">Instance of GroupInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupInfoDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GroupId == other.GroupId ||
                    GroupId != null &&
                    GroupId.Equals(other.GroupId)
                ) && 
                (
                    GroupName == other.GroupName ||
                    GroupName != null &&
                    GroupName.Equals(other.GroupName)
                ) && 
                (
                    LastUpdatedAt == other.LastUpdatedAt ||
                    LastUpdatedAt != null &&
                    LastUpdatedAt.Equals(other.LastUpdatedAt)
                ) && 
                (
                    Participants == other.Participants ||
                    Participants != null &&
                    other.Participants != null &&
                    Participants.SequenceEqual(other.Participants)
                ) && 
                (
                    State == other.State ||
                    
                    State.Equals(other.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GroupId != null)
                    hashCode = hashCode * 59 + GroupId.GetHashCode();
                    if (GroupName != null)
                    hashCode = hashCode * 59 + GroupName.GetHashCode();
                    if (LastUpdatedAt != null)
                    hashCode = hashCode * 59 + LastUpdatedAt.GetHashCode();
                    if (Participants != null)
                    hashCode = hashCode * 59 + Participants.GetHashCode();
                    
                    hashCode = hashCode * 59 + State.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GroupInfoDto left, GroupInfoDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GroupInfoDto left, GroupInfoDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
