/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TunerChannelMapping : IEquatable<TunerChannelMapping>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProviderChannelId
        /// </summary>
        [DataMember(Name="ProviderChannelId", EmitDefaultValue=true)]
        public string ProviderChannelId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderChannelName
        /// </summary>
        [DataMember(Name="ProviderChannelName", EmitDefaultValue=true)]
        public string ProviderChannelName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TunerChannelMapping {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProviderChannelId: ").Append(ProviderChannelId).Append("\n");
            sb.Append("  ProviderChannelName: ").Append(ProviderChannelName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TunerChannelMapping)obj);
        }

        /// <summary>
        /// Returns true if TunerChannelMapping instances are equal
        /// </summary>
        /// <param name="other">Instance of TunerChannelMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TunerChannelMapping other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ProviderChannelId == other.ProviderChannelId ||
                    ProviderChannelId != null &&
                    ProviderChannelId.Equals(other.ProviderChannelId)
                ) && 
                (
                    ProviderChannelName == other.ProviderChannelName ||
                    ProviderChannelName != null &&
                    ProviderChannelName.Equals(other.ProviderChannelName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ProviderChannelId != null)
                    hashCode = hashCode * 59 + ProviderChannelId.GetHashCode();
                    if (ProviderChannelName != null)
                    hashCode = hashCode * 59 + ProviderChannelName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TunerChannelMapping left, TunerChannelMapping right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TunerChannelMapping left, TunerChannelMapping right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
