/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TunerHostInfo : IEquatable<TunerHostInfo>
    {
        /// <summary>
        /// Gets or Sets AllowHWTranscoding
        /// </summary>
        [DataMember(Name="AllowHWTranscoding", EmitDefaultValue=true)]
        public bool AllowHWTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name="DeviceId", EmitDefaultValue=true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets EnableStreamLooping
        /// </summary>
        [DataMember(Name="EnableStreamLooping", EmitDefaultValue=true)]
        public bool EnableStreamLooping { get; set; }

        /// <summary>
        /// Gets or Sets FriendlyName
        /// </summary>
        [DataMember(Name="FriendlyName", EmitDefaultValue=true)]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImportFavoritesOnly
        /// </summary>
        [DataMember(Name="ImportFavoritesOnly", EmitDefaultValue=true)]
        public bool ImportFavoritesOnly { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=true)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets TunerCount
        /// </summary>
        [DataMember(Name="TunerCount", EmitDefaultValue=true)]
        public int TunerCount { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="Url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name="UserAgent", EmitDefaultValue=true)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TunerHostInfo {\n");
            sb.Append("  AllowHWTranscoding: ").Append(AllowHWTranscoding).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  EnableStreamLooping: ").Append(EnableStreamLooping).Append("\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportFavoritesOnly: ").Append(ImportFavoritesOnly).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TunerCount: ").Append(TunerCount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TunerHostInfo)obj);
        }

        /// <summary>
        /// Returns true if TunerHostInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of TunerHostInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TunerHostInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowHWTranscoding == other.AllowHWTranscoding ||
                    
                    AllowHWTranscoding.Equals(other.AllowHWTranscoding)
                ) && 
                (
                    DeviceId == other.DeviceId ||
                    DeviceId != null &&
                    DeviceId.Equals(other.DeviceId)
                ) && 
                (
                    EnableStreamLooping == other.EnableStreamLooping ||
                    
                    EnableStreamLooping.Equals(other.EnableStreamLooping)
                ) && 
                (
                    FriendlyName == other.FriendlyName ||
                    FriendlyName != null &&
                    FriendlyName.Equals(other.FriendlyName)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ImportFavoritesOnly == other.ImportFavoritesOnly ||
                    
                    ImportFavoritesOnly.Equals(other.ImportFavoritesOnly)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    TunerCount == other.TunerCount ||
                    
                    TunerCount.Equals(other.TunerCount)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    UserAgent == other.UserAgent ||
                    UserAgent != null &&
                    UserAgent.Equals(other.UserAgent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AllowHWTranscoding.GetHashCode();
                    if (DeviceId != null)
                    hashCode = hashCode * 59 + DeviceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableStreamLooping.GetHashCode();
                    if (FriendlyName != null)
                    hashCode = hashCode * 59 + FriendlyName.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + ImportFavoritesOnly.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    
                    hashCode = hashCode * 59 + TunerCount.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (UserAgent != null)
                    hashCode = hashCode * 59 + UserAgent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TunerHostInfo left, TunerHostInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TunerHostInfo left, TunerHostInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
