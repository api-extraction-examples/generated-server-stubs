/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PublicSystemInfo : IEquatable<PublicSystemInfo>
    {
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the local address.
        /// </summary>
        /// <value>Gets or sets the local address.</value>
        [DataMember(Name="LocalAddress", EmitDefaultValue=true)]
        public string LocalAddress { get; set; }

        /// <summary>
        /// Gets or sets the operating system.
        /// </summary>
        /// <value>Gets or sets the operating system.</value>
        [DataMember(Name="OperatingSystem", EmitDefaultValue=true)]
        public string VarOperatingSystem { get; set; }

        /// <summary>
        /// Gets or sets the product name. This is the AssemblyProduct name.
        /// </summary>
        /// <value>Gets or sets the product name. This is the AssemblyProduct name.</value>
        [DataMember(Name="ProductName", EmitDefaultValue=true)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or sets the name of the server.
        /// </summary>
        /// <value>Gets or sets the name of the server.</value>
        [DataMember(Name="ServerName", EmitDefaultValue=true)]
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the startup wizard is completed.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the startup wizard is completed.</value>
        [DataMember(Name="StartupWizardCompleted", EmitDefaultValue=true)]
        public bool? StartupWizardCompleted { get; set; }

        /// <summary>
        /// Gets or sets the server version.
        /// </summary>
        /// <value>Gets or sets the server version.</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicSystemInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LocalAddress: ").Append(LocalAddress).Append("\n");
            sb.Append("  VarOperatingSystem: ").Append(VarOperatingSystem).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  StartupWizardCompleted: ").Append(StartupWizardCompleted).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PublicSystemInfo)obj);
        }

        /// <summary>
        /// Returns true if PublicSystemInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PublicSystemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicSystemInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LocalAddress == other.LocalAddress ||
                    LocalAddress != null &&
                    LocalAddress.Equals(other.LocalAddress)
                ) && 
                (
                    VarOperatingSystem == other.VarOperatingSystem ||
                    VarOperatingSystem != null &&
                    VarOperatingSystem.Equals(other.VarOperatingSystem)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    ServerName == other.ServerName ||
                    ServerName != null &&
                    ServerName.Equals(other.ServerName)
                ) && 
                (
                    StartupWizardCompleted == other.StartupWizardCompleted ||
                    StartupWizardCompleted != null &&
                    StartupWizardCompleted.Equals(other.StartupWizardCompleted)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LocalAddress != null)
                    hashCode = hashCode * 59 + LocalAddress.GetHashCode();
                    if (VarOperatingSystem != null)
                    hashCode = hashCode * 59 + VarOperatingSystem.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (ServerName != null)
                    hashCode = hashCode * 59 + ServerName.GetHashCode();
                    if (StartupWizardCompleted != null)
                    hashCode = hashCode * 59 + StartupWizardCompleted.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PublicSystemInfo left, PublicSystemInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PublicSystemInfo left, PublicSystemInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
