/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RemoteSearchResult : IEquatable<RemoteSearchResult>
    {
        /// <summary>
        /// Gets or Sets AlbumArtist
        /// </summary>
        [DataMember(Name="AlbumArtist", EmitDefaultValue=false)]
        public RemoteSearchResult AlbumArtist { get; set; }

        /// <summary>
        /// Gets or Sets Artists
        /// </summary>
        [DataMember(Name="Artists", EmitDefaultValue=true)]
        public List<RemoteSearchResult> Artists { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="ImageUrl", EmitDefaultValue=true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets IndexNumber
        /// </summary>
        [DataMember(Name="IndexNumber", EmitDefaultValue=true)]
        public int? IndexNumber { get; set; }

        /// <summary>
        /// Gets or Sets IndexNumberEnd
        /// </summary>
        [DataMember(Name="IndexNumberEnd", EmitDefaultValue=true)]
        public int? IndexNumberEnd { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Overview
        /// </summary>
        [DataMember(Name="Overview", EmitDefaultValue=true)]
        public string Overview { get; set; }

        /// <summary>
        /// Gets or Sets ParentIndexNumber
        /// </summary>
        [DataMember(Name="ParentIndexNumber", EmitDefaultValue=true)]
        public int? ParentIndexNumber { get; set; }

        /// <summary>
        /// Gets or Sets PremiereDate
        /// </summary>
        [DataMember(Name="PremiereDate", EmitDefaultValue=true)]
        public DateTime? PremiereDate { get; set; }

        /// <summary>
        /// Gets or sets the year.
        /// </summary>
        /// <value>Gets or sets the year.</value>
        [DataMember(Name="ProductionYear", EmitDefaultValue=true)]
        public int? ProductionYear { get; set; }

        /// <summary>
        /// Gets or sets the provider ids.
        /// </summary>
        /// <value>Gets or sets the provider ids.</value>
        [DataMember(Name="ProviderIds", EmitDefaultValue=true)]
        public Dictionary<string, string> ProviderIds { get; set; }

        /// <summary>
        /// Gets or Sets SearchProviderName
        /// </summary>
        [DataMember(Name="SearchProviderName", EmitDefaultValue=true)]
        public string SearchProviderName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSearchResult {\n");
            sb.Append("  AlbumArtist: ").Append(AlbumArtist).Append("\n");
            sb.Append("  Artists: ").Append(Artists).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  IndexNumber: ").Append(IndexNumber).Append("\n");
            sb.Append("  IndexNumberEnd: ").Append(IndexNumberEnd).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Overview: ").Append(Overview).Append("\n");
            sb.Append("  ParentIndexNumber: ").Append(ParentIndexNumber).Append("\n");
            sb.Append("  PremiereDate: ").Append(PremiereDate).Append("\n");
            sb.Append("  ProductionYear: ").Append(ProductionYear).Append("\n");
            sb.Append("  ProviderIds: ").Append(ProviderIds).Append("\n");
            sb.Append("  SearchProviderName: ").Append(SearchProviderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteSearchResult)obj);
        }

        /// <summary>
        /// Returns true if RemoteSearchResult instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSearchResult other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AlbumArtist == other.AlbumArtist ||
                    AlbumArtist != null &&
                    AlbumArtist.Equals(other.AlbumArtist)
                ) && 
                (
                    Artists == other.Artists ||
                    Artists != null &&
                    other.Artists != null &&
                    Artists.SequenceEqual(other.Artists)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    IndexNumber == other.IndexNumber ||
                    IndexNumber != null &&
                    IndexNumber.Equals(other.IndexNumber)
                ) && 
                (
                    IndexNumberEnd == other.IndexNumberEnd ||
                    IndexNumberEnd != null &&
                    IndexNumberEnd.Equals(other.IndexNumberEnd)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Overview == other.Overview ||
                    Overview != null &&
                    Overview.Equals(other.Overview)
                ) && 
                (
                    ParentIndexNumber == other.ParentIndexNumber ||
                    ParentIndexNumber != null &&
                    ParentIndexNumber.Equals(other.ParentIndexNumber)
                ) && 
                (
                    PremiereDate == other.PremiereDate ||
                    PremiereDate != null &&
                    PremiereDate.Equals(other.PremiereDate)
                ) && 
                (
                    ProductionYear == other.ProductionYear ||
                    ProductionYear != null &&
                    ProductionYear.Equals(other.ProductionYear)
                ) && 
                (
                    ProviderIds == other.ProviderIds ||
                    ProviderIds != null &&
                    other.ProviderIds != null &&
                    ProviderIds.SequenceEqual(other.ProviderIds)
                ) && 
                (
                    SearchProviderName == other.SearchProviderName ||
                    SearchProviderName != null &&
                    SearchProviderName.Equals(other.SearchProviderName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AlbumArtist != null)
                    hashCode = hashCode * 59 + AlbumArtist.GetHashCode();
                    if (Artists != null)
                    hashCode = hashCode * 59 + Artists.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    if (IndexNumber != null)
                    hashCode = hashCode * 59 + IndexNumber.GetHashCode();
                    if (IndexNumberEnd != null)
                    hashCode = hashCode * 59 + IndexNumberEnd.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Overview != null)
                    hashCode = hashCode * 59 + Overview.GetHashCode();
                    if (ParentIndexNumber != null)
                    hashCode = hashCode * 59 + ParentIndexNumber.GetHashCode();
                    if (PremiereDate != null)
                    hashCode = hashCode * 59 + PremiereDate.GetHashCode();
                    if (ProductionYear != null)
                    hashCode = hashCode * 59 + ProductionYear.GetHashCode();
                    if (ProviderIds != null)
                    hashCode = hashCode * 59 + ProviderIds.GetHashCode();
                    if (SearchProviderName != null)
                    hashCode = hashCode * 59 + SearchProviderName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteSearchResult left, RemoteSearchResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteSearchResult left, RemoteSearchResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
