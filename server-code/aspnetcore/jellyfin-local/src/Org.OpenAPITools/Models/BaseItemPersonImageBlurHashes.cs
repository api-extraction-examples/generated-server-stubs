/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Gets or sets the primary image blurhash.
    /// </summary>
    [DataContract]
    public partial class BaseItemPersonImageBlurHashes : IEquatable<BaseItemPersonImageBlurHashes>
    {
        /// <summary>
        /// Gets or Sets Art
        /// </summary>
        [DataMember(Name="Art", EmitDefaultValue=false)]
        public Dictionary<string, string> Art { get; set; }

        /// <summary>
        /// Gets or Sets Backdrop
        /// </summary>
        [DataMember(Name="Backdrop", EmitDefaultValue=false)]
        public Dictionary<string, string> Backdrop { get; set; }

        /// <summary>
        /// Gets or Sets Banner
        /// </summary>
        [DataMember(Name="Banner", EmitDefaultValue=false)]
        public Dictionary<string, string> Banner { get; set; }

        /// <summary>
        /// Gets or Sets Box
        /// </summary>
        [DataMember(Name="Box", EmitDefaultValue=false)]
        public Dictionary<string, string> Box { get; set; }

        /// <summary>
        /// Gets or Sets BoxRear
        /// </summary>
        [DataMember(Name="BoxRear", EmitDefaultValue=false)]
        public Dictionary<string, string> BoxRear { get; set; }

        /// <summary>
        /// Gets or Sets Chapter
        /// </summary>
        [DataMember(Name="Chapter", EmitDefaultValue=false)]
        public Dictionary<string, string> Chapter { get; set; }

        /// <summary>
        /// Gets or Sets Disc
        /// </summary>
        [DataMember(Name="Disc", EmitDefaultValue=false)]
        public Dictionary<string, string> Disc { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name="Logo", EmitDefaultValue=false)]
        public Dictionary<string, string> Logo { get; set; }

        /// <summary>
        /// Gets or Sets Menu
        /// </summary>
        [DataMember(Name="Menu", EmitDefaultValue=false)]
        public Dictionary<string, string> Menu { get; set; }

        /// <summary>
        /// Gets or Sets Primary
        /// </summary>
        [DataMember(Name="Primary", EmitDefaultValue=false)]
        public Dictionary<string, string> Primary { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="Profile", EmitDefaultValue=false)]
        public Dictionary<string, string> Profile { get; set; }

        /// <summary>
        /// Gets or Sets Screenshot
        /// </summary>
        [DataMember(Name="Screenshot", EmitDefaultValue=false)]
        public Dictionary<string, string> Screenshot { get; set; }

        /// <summary>
        /// Gets or Sets Thumb
        /// </summary>
        [DataMember(Name="Thumb", EmitDefaultValue=false)]
        public Dictionary<string, string> Thumb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseItemPersonImageBlurHashes {\n");
            sb.Append("  Art: ").Append(Art).Append("\n");
            sb.Append("  Backdrop: ").Append(Backdrop).Append("\n");
            sb.Append("  Banner: ").Append(Banner).Append("\n");
            sb.Append("  Box: ").Append(Box).Append("\n");
            sb.Append("  BoxRear: ").Append(BoxRear).Append("\n");
            sb.Append("  Chapter: ").Append(Chapter).Append("\n");
            sb.Append("  Disc: ").Append(Disc).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Menu: ").Append(Menu).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Screenshot: ").Append(Screenshot).Append("\n");
            sb.Append("  Thumb: ").Append(Thumb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BaseItemPersonImageBlurHashes)obj);
        }

        /// <summary>
        /// Returns true if BaseItemPersonImageBlurHashes instances are equal
        /// </summary>
        /// <param name="other">Instance of BaseItemPersonImageBlurHashes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseItemPersonImageBlurHashes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Art == other.Art ||
                    Art != null &&
                    other.Art != null &&
                    Art.SequenceEqual(other.Art)
                ) && 
                (
                    Backdrop == other.Backdrop ||
                    Backdrop != null &&
                    other.Backdrop != null &&
                    Backdrop.SequenceEqual(other.Backdrop)
                ) && 
                (
                    Banner == other.Banner ||
                    Banner != null &&
                    other.Banner != null &&
                    Banner.SequenceEqual(other.Banner)
                ) && 
                (
                    Box == other.Box ||
                    Box != null &&
                    other.Box != null &&
                    Box.SequenceEqual(other.Box)
                ) && 
                (
                    BoxRear == other.BoxRear ||
                    BoxRear != null &&
                    other.BoxRear != null &&
                    BoxRear.SequenceEqual(other.BoxRear)
                ) && 
                (
                    Chapter == other.Chapter ||
                    Chapter != null &&
                    other.Chapter != null &&
                    Chapter.SequenceEqual(other.Chapter)
                ) && 
                (
                    Disc == other.Disc ||
                    Disc != null &&
                    other.Disc != null &&
                    Disc.SequenceEqual(other.Disc)
                ) && 
                (
                    Logo == other.Logo ||
                    Logo != null &&
                    other.Logo != null &&
                    Logo.SequenceEqual(other.Logo)
                ) && 
                (
                    Menu == other.Menu ||
                    Menu != null &&
                    other.Menu != null &&
                    Menu.SequenceEqual(other.Menu)
                ) && 
                (
                    Primary == other.Primary ||
                    Primary != null &&
                    other.Primary != null &&
                    Primary.SequenceEqual(other.Primary)
                ) && 
                (
                    Profile == other.Profile ||
                    Profile != null &&
                    other.Profile != null &&
                    Profile.SequenceEqual(other.Profile)
                ) && 
                (
                    Screenshot == other.Screenshot ||
                    Screenshot != null &&
                    other.Screenshot != null &&
                    Screenshot.SequenceEqual(other.Screenshot)
                ) && 
                (
                    Thumb == other.Thumb ||
                    Thumb != null &&
                    other.Thumb != null &&
                    Thumb.SequenceEqual(other.Thumb)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Art != null)
                    hashCode = hashCode * 59 + Art.GetHashCode();
                    if (Backdrop != null)
                    hashCode = hashCode * 59 + Backdrop.GetHashCode();
                    if (Banner != null)
                    hashCode = hashCode * 59 + Banner.GetHashCode();
                    if (Box != null)
                    hashCode = hashCode * 59 + Box.GetHashCode();
                    if (BoxRear != null)
                    hashCode = hashCode * 59 + BoxRear.GetHashCode();
                    if (Chapter != null)
                    hashCode = hashCode * 59 + Chapter.GetHashCode();
                    if (Disc != null)
                    hashCode = hashCode * 59 + Disc.GetHashCode();
                    if (Logo != null)
                    hashCode = hashCode * 59 + Logo.GetHashCode();
                    if (Menu != null)
                    hashCode = hashCode * 59 + Menu.GetHashCode();
                    if (Primary != null)
                    hashCode = hashCode * 59 + Primary.GetHashCode();
                    if (Profile != null)
                    hashCode = hashCode * 59 + Profile.GetHashCode();
                    if (Screenshot != null)
                    hashCode = hashCode * 59 + Screenshot.GetHashCode();
                    if (Thumb != null)
                    hashCode = hashCode * 59 + Thumb.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BaseItemPersonImageBlurHashes left, BaseItemPersonImageBlurHashes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BaseItemPersonImageBlurHashes left, BaseItemPersonImageBlurHashes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
