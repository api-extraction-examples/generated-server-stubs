/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class LibraryUpdateInfo.
    /// </summary>
    [DataContract]
    public partial class LibraryUpdateInfo : IEquatable<LibraryUpdateInfo>
    {
        /// <summary>
        /// Gets or Sets CollectionFolders
        /// </summary>
        [DataMember(Name="CollectionFolders", EmitDefaultValue=true)]
        public List<string> CollectionFolders { get; set; }

        /// <summary>
        /// Gets or sets the folders added to.
        /// </summary>
        /// <value>Gets or sets the folders added to.</value>
        [DataMember(Name="FoldersAddedTo", EmitDefaultValue=true)]
        public List<string> FoldersAddedTo { get; set; }

        /// <summary>
        /// Gets or sets the folders removed from.
        /// </summary>
        /// <value>Gets or sets the folders removed from.</value>
        [DataMember(Name="FoldersRemovedFrom", EmitDefaultValue=true)]
        public List<string> FoldersRemovedFrom { get; set; }

        /// <summary>
        /// Gets or Sets IsEmpty
        /// </summary>
        [DataMember(Name="IsEmpty", EmitDefaultValue=true)]
        public bool IsEmpty { get; set; }

        /// <summary>
        /// Gets or sets the items added.
        /// </summary>
        /// <value>Gets or sets the items added.</value>
        [DataMember(Name="ItemsAdded", EmitDefaultValue=true)]
        public List<string> ItemsAdded { get; set; }

        /// <summary>
        /// Gets or sets the items removed.
        /// </summary>
        /// <value>Gets or sets the items removed.</value>
        [DataMember(Name="ItemsRemoved", EmitDefaultValue=true)]
        public List<string> ItemsRemoved { get; set; }

        /// <summary>
        /// Gets or sets the items updated.
        /// </summary>
        /// <value>Gets or sets the items updated.</value>
        [DataMember(Name="ItemsUpdated", EmitDefaultValue=true)]
        public List<string> ItemsUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryUpdateInfo {\n");
            sb.Append("  CollectionFolders: ").Append(CollectionFolders).Append("\n");
            sb.Append("  FoldersAddedTo: ").Append(FoldersAddedTo).Append("\n");
            sb.Append("  FoldersRemovedFrom: ").Append(FoldersRemovedFrom).Append("\n");
            sb.Append("  IsEmpty: ").Append(IsEmpty).Append("\n");
            sb.Append("  ItemsAdded: ").Append(ItemsAdded).Append("\n");
            sb.Append("  ItemsRemoved: ").Append(ItemsRemoved).Append("\n");
            sb.Append("  ItemsUpdated: ").Append(ItemsUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LibraryUpdateInfo)obj);
        }

        /// <summary>
        /// Returns true if LibraryUpdateInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of LibraryUpdateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryUpdateInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CollectionFolders == other.CollectionFolders ||
                    CollectionFolders != null &&
                    other.CollectionFolders != null &&
                    CollectionFolders.SequenceEqual(other.CollectionFolders)
                ) && 
                (
                    FoldersAddedTo == other.FoldersAddedTo ||
                    FoldersAddedTo != null &&
                    other.FoldersAddedTo != null &&
                    FoldersAddedTo.SequenceEqual(other.FoldersAddedTo)
                ) && 
                (
                    FoldersRemovedFrom == other.FoldersRemovedFrom ||
                    FoldersRemovedFrom != null &&
                    other.FoldersRemovedFrom != null &&
                    FoldersRemovedFrom.SequenceEqual(other.FoldersRemovedFrom)
                ) && 
                (
                    IsEmpty == other.IsEmpty ||
                    
                    IsEmpty.Equals(other.IsEmpty)
                ) && 
                (
                    ItemsAdded == other.ItemsAdded ||
                    ItemsAdded != null &&
                    other.ItemsAdded != null &&
                    ItemsAdded.SequenceEqual(other.ItemsAdded)
                ) && 
                (
                    ItemsRemoved == other.ItemsRemoved ||
                    ItemsRemoved != null &&
                    other.ItemsRemoved != null &&
                    ItemsRemoved.SequenceEqual(other.ItemsRemoved)
                ) && 
                (
                    ItemsUpdated == other.ItemsUpdated ||
                    ItemsUpdated != null &&
                    other.ItemsUpdated != null &&
                    ItemsUpdated.SequenceEqual(other.ItemsUpdated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CollectionFolders != null)
                    hashCode = hashCode * 59 + CollectionFolders.GetHashCode();
                    if (FoldersAddedTo != null)
                    hashCode = hashCode * 59 + FoldersAddedTo.GetHashCode();
                    if (FoldersRemovedFrom != null)
                    hashCode = hashCode * 59 + FoldersRemovedFrom.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsEmpty.GetHashCode();
                    if (ItemsAdded != null)
                    hashCode = hashCode * 59 + ItemsAdded.GetHashCode();
                    if (ItemsRemoved != null)
                    hashCode = hashCode * 59 + ItemsRemoved.GetHashCode();
                    if (ItemsUpdated != null)
                    hashCode = hashCode * 59 + ItemsUpdated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LibraryUpdateInfo left, LibraryUpdateInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LibraryUpdateInfo left, LibraryUpdateInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
