/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class ImageInfo.
    /// </summary>
    [DataContract]
    public partial class ImageInfo : IEquatable<ImageInfo>
    {
        /// <summary>
        /// Gets or sets the blurhash.
        /// </summary>
        /// <value>Gets or sets the blurhash.</value>
        [DataMember(Name="BlurHash", EmitDefaultValue=true)]
        public string BlurHash { get; set; }

        /// <summary>
        /// Gets or sets the height.
        /// </summary>
        /// <value>Gets or sets the height.</value>
        [DataMember(Name="Height", EmitDefaultValue=true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or sets the index of the image.
        /// </summary>
        /// <value>Gets or sets the index of the image.</value>
        [DataMember(Name="ImageIndex", EmitDefaultValue=true)]
        public int? ImageIndex { get; set; }

        /// <summary>
        /// Gets or sets the image tag.
        /// </summary>
        /// <value>Gets or sets the image tag.</value>
        [DataMember(Name="ImageTag", EmitDefaultValue=true)]
        public string ImageTag { get; set; }

        /// <summary>
        /// Gets or Sets ImageType
        /// </summary>
        [DataMember(Name="ImageType", EmitDefaultValue=true)]
        public ImageType ImageType { get; set; }

        /// <summary>
        /// Gets or sets the path.
        /// </summary>
        /// <value>Gets or sets the path.</value>
        [DataMember(Name="Path", EmitDefaultValue=true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets the size.
        /// </summary>
        /// <value>Gets or sets the size.</value>
        [DataMember(Name="Size", EmitDefaultValue=true)]
        public long Size { get; set; }

        /// <summary>
        /// Gets or sets the width.
        /// </summary>
        /// <value>Gets or sets the width.</value>
        [DataMember(Name="Width", EmitDefaultValue=true)]
        public int? Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageInfo {\n");
            sb.Append("  BlurHash: ").Append(BlurHash).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ImageIndex: ").Append(ImageIndex).Append("\n");
            sb.Append("  ImageTag: ").Append(ImageTag).Append("\n");
            sb.Append("  ImageType: ").Append(ImageType).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImageInfo)obj);
        }

        /// <summary>
        /// Returns true if ImageInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ImageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BlurHash == other.BlurHash ||
                    BlurHash != null &&
                    BlurHash.Equals(other.BlurHash)
                ) && 
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                ) && 
                (
                    ImageIndex == other.ImageIndex ||
                    ImageIndex != null &&
                    ImageIndex.Equals(other.ImageIndex)
                ) && 
                (
                    ImageTag == other.ImageTag ||
                    ImageTag != null &&
                    ImageTag.Equals(other.ImageTag)
                ) && 
                (
                    ImageType == other.ImageType ||
                    
                    ImageType.Equals(other.ImageType)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    Size == other.Size ||
                    
                    Size.Equals(other.Size)
                ) && 
                (
                    Width == other.Width ||
                    Width != null &&
                    Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BlurHash != null)
                    hashCode = hashCode * 59 + BlurHash.GetHashCode();
                    if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                    if (ImageIndex != null)
                    hashCode = hashCode * 59 + ImageIndex.GetHashCode();
                    if (ImageTag != null)
                    hashCode = hashCode * 59 + ImageTag.GetHashCode();
                    
                    hashCode = hashCode * 59 + ImageType.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (Width != null)
                    hashCode = hashCode * 59 + Width.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImageInfo left, ImageInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImageInfo left, ImageInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
