/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class QueryFiltersLegacy : IEquatable<QueryFiltersLegacy>
    {
        /// <summary>
        /// Gets or Sets Genres
        /// </summary>
        [DataMember(Name="Genres", EmitDefaultValue=true)]
        public List<string> Genres { get; set; }

        /// <summary>
        /// Gets or Sets OfficialRatings
        /// </summary>
        [DataMember(Name="OfficialRatings", EmitDefaultValue=true)]
        public List<string> OfficialRatings { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="Tags", EmitDefaultValue=true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Years
        /// </summary>
        [DataMember(Name="Years", EmitDefaultValue=true)]
        public List<int> Years { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryFiltersLegacy {\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  OfficialRatings: ").Append(OfficialRatings).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Years: ").Append(Years).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QueryFiltersLegacy)obj);
        }

        /// <summary>
        /// Returns true if QueryFiltersLegacy instances are equal
        /// </summary>
        /// <param name="other">Instance of QueryFiltersLegacy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryFiltersLegacy other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Genres == other.Genres ||
                    Genres != null &&
                    other.Genres != null &&
                    Genres.SequenceEqual(other.Genres)
                ) && 
                (
                    OfficialRatings == other.OfficialRatings ||
                    OfficialRatings != null &&
                    other.OfficialRatings != null &&
                    OfficialRatings.SequenceEqual(other.OfficialRatings)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Years == other.Years ||
                    Years != null &&
                    other.Years != null &&
                    Years.SequenceEqual(other.Years)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Genres != null)
                    hashCode = hashCode * 59 + Genres.GetHashCode();
                    if (OfficialRatings != null)
                    hashCode = hashCode * 59 + OfficialRatings.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Years != null)
                    hashCode = hashCode * 59 + Years.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(QueryFiltersLegacy left, QueryFiltersLegacy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QueryFiltersLegacy left, QueryFiltersLegacy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
