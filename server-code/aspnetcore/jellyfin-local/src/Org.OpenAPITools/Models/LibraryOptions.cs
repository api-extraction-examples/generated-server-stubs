/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LibraryOptions : IEquatable<LibraryOptions>
    {
        /// <summary>
        /// Gets or Sets AutomaticRefreshIntervalDays
        /// </summary>
        [DataMember(Name="AutomaticRefreshIntervalDays", EmitDefaultValue=true)]
        public int AutomaticRefreshIntervalDays { get; set; }

        /// <summary>
        /// Gets or Sets DisabledLocalMetadataReaders
        /// </summary>
        [DataMember(Name="DisabledLocalMetadataReaders", EmitDefaultValue=true)]
        public List<string> DisabledLocalMetadataReaders { get; set; }

        /// <summary>
        /// Gets or Sets DisabledSubtitleFetchers
        /// </summary>
        [DataMember(Name="DisabledSubtitleFetchers", EmitDefaultValue=true)]
        public List<string> DisabledSubtitleFetchers { get; set; }

        /// <summary>
        /// Gets or Sets EnableAutomaticSeriesGrouping
        /// </summary>
        [DataMember(Name="EnableAutomaticSeriesGrouping", EmitDefaultValue=true)]
        public bool EnableAutomaticSeriesGrouping { get; set; }

        /// <summary>
        /// Gets or Sets EnableChapterImageExtraction
        /// </summary>
        [DataMember(Name="EnableChapterImageExtraction", EmitDefaultValue=true)]
        public bool EnableChapterImageExtraction { get; set; }

        /// <summary>
        /// Gets or Sets EnableEmbeddedEpisodeInfos
        /// </summary>
        [DataMember(Name="EnableEmbeddedEpisodeInfos", EmitDefaultValue=true)]
        public bool EnableEmbeddedEpisodeInfos { get; set; }

        /// <summary>
        /// Gets or Sets EnableEmbeddedTitles
        /// </summary>
        [DataMember(Name="EnableEmbeddedTitles", EmitDefaultValue=true)]
        public bool EnableEmbeddedTitles { get; set; }

        /// <summary>
        /// Gets or Sets EnableInternetProviders
        /// </summary>
        [DataMember(Name="EnableInternetProviders", EmitDefaultValue=true)]
        public bool EnableInternetProviders { get; set; }

        /// <summary>
        /// Gets or Sets EnablePhotos
        /// </summary>
        [DataMember(Name="EnablePhotos", EmitDefaultValue=true)]
        public bool EnablePhotos { get; set; }

        /// <summary>
        /// Gets or Sets EnableRealtimeMonitor
        /// </summary>
        [DataMember(Name="EnableRealtimeMonitor", EmitDefaultValue=true)]
        public bool EnableRealtimeMonitor { get; set; }

        /// <summary>
        /// Gets or Sets ExtractChapterImagesDuringLibraryScan
        /// </summary>
        [DataMember(Name="ExtractChapterImagesDuringLibraryScan", EmitDefaultValue=true)]
        public bool ExtractChapterImagesDuringLibraryScan { get; set; }

        /// <summary>
        /// Gets or Sets LocalMetadataReaderOrder
        /// </summary>
        [DataMember(Name="LocalMetadataReaderOrder", EmitDefaultValue=true)]
        public List<string> LocalMetadataReaderOrder { get; set; }

        /// <summary>
        /// Gets or sets the metadata country code.
        /// </summary>
        /// <value>Gets or sets the metadata country code.</value>
        [DataMember(Name="MetadataCountryCode", EmitDefaultValue=true)]
        public string MetadataCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets MetadataSavers
        /// </summary>
        [DataMember(Name="MetadataSavers", EmitDefaultValue=true)]
        public List<string> MetadataSavers { get; set; }

        /// <summary>
        /// Gets or Sets PathInfos
        /// </summary>
        [DataMember(Name="PathInfos", EmitDefaultValue=true)]
        public List<MediaPathInfo> PathInfos { get; set; }

        /// <summary>
        /// Gets or sets the preferred metadata language.
        /// </summary>
        /// <value>Gets or sets the preferred metadata language.</value>
        [DataMember(Name="PreferredMetadataLanguage", EmitDefaultValue=true)]
        public string PreferredMetadataLanguage { get; set; }

        /// <summary>
        /// Gets or Sets RequirePerfectSubtitleMatch
        /// </summary>
        [DataMember(Name="RequirePerfectSubtitleMatch", EmitDefaultValue=true)]
        public bool RequirePerfectSubtitleMatch { get; set; }

        /// <summary>
        /// Gets or Sets SaveLocalMetadata
        /// </summary>
        [DataMember(Name="SaveLocalMetadata", EmitDefaultValue=true)]
        public bool SaveLocalMetadata { get; set; }

        /// <summary>
        /// Gets or Sets SaveSubtitlesWithMedia
        /// </summary>
        [DataMember(Name="SaveSubtitlesWithMedia", EmitDefaultValue=true)]
        public bool SaveSubtitlesWithMedia { get; set; }

        /// <summary>
        /// Gets or Sets SeasonZeroDisplayName
        /// </summary>
        [DataMember(Name="SeasonZeroDisplayName", EmitDefaultValue=true)]
        public string SeasonZeroDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets SkipSubtitlesIfAudioTrackMatches
        /// </summary>
        [DataMember(Name="SkipSubtitlesIfAudioTrackMatches", EmitDefaultValue=true)]
        public bool SkipSubtitlesIfAudioTrackMatches { get; set; }

        /// <summary>
        /// Gets or Sets SkipSubtitlesIfEmbeddedSubtitlesPresent
        /// </summary>
        [DataMember(Name="SkipSubtitlesIfEmbeddedSubtitlesPresent", EmitDefaultValue=true)]
        public bool SkipSubtitlesIfEmbeddedSubtitlesPresent { get; set; }

        /// <summary>
        /// Gets or Sets SubtitleDownloadLanguages
        /// </summary>
        [DataMember(Name="SubtitleDownloadLanguages", EmitDefaultValue=true)]
        public List<string> SubtitleDownloadLanguages { get; set; }

        /// <summary>
        /// Gets or Sets SubtitleFetcherOrder
        /// </summary>
        [DataMember(Name="SubtitleFetcherOrder", EmitDefaultValue=true)]
        public List<string> SubtitleFetcherOrder { get; set; }

        /// <summary>
        /// Gets or Sets TypeOptions
        /// </summary>
        [DataMember(Name="TypeOptions", EmitDefaultValue=true)]
        public List<TypeOptions> TypeOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryOptions {\n");
            sb.Append("  AutomaticRefreshIntervalDays: ").Append(AutomaticRefreshIntervalDays).Append("\n");
            sb.Append("  DisabledLocalMetadataReaders: ").Append(DisabledLocalMetadataReaders).Append("\n");
            sb.Append("  DisabledSubtitleFetchers: ").Append(DisabledSubtitleFetchers).Append("\n");
            sb.Append("  EnableAutomaticSeriesGrouping: ").Append(EnableAutomaticSeriesGrouping).Append("\n");
            sb.Append("  EnableChapterImageExtraction: ").Append(EnableChapterImageExtraction).Append("\n");
            sb.Append("  EnableEmbeddedEpisodeInfos: ").Append(EnableEmbeddedEpisodeInfos).Append("\n");
            sb.Append("  EnableEmbeddedTitles: ").Append(EnableEmbeddedTitles).Append("\n");
            sb.Append("  EnableInternetProviders: ").Append(EnableInternetProviders).Append("\n");
            sb.Append("  EnablePhotos: ").Append(EnablePhotos).Append("\n");
            sb.Append("  EnableRealtimeMonitor: ").Append(EnableRealtimeMonitor).Append("\n");
            sb.Append("  ExtractChapterImagesDuringLibraryScan: ").Append(ExtractChapterImagesDuringLibraryScan).Append("\n");
            sb.Append("  LocalMetadataReaderOrder: ").Append(LocalMetadataReaderOrder).Append("\n");
            sb.Append("  MetadataCountryCode: ").Append(MetadataCountryCode).Append("\n");
            sb.Append("  MetadataSavers: ").Append(MetadataSavers).Append("\n");
            sb.Append("  PathInfos: ").Append(PathInfos).Append("\n");
            sb.Append("  PreferredMetadataLanguage: ").Append(PreferredMetadataLanguage).Append("\n");
            sb.Append("  RequirePerfectSubtitleMatch: ").Append(RequirePerfectSubtitleMatch).Append("\n");
            sb.Append("  SaveLocalMetadata: ").Append(SaveLocalMetadata).Append("\n");
            sb.Append("  SaveSubtitlesWithMedia: ").Append(SaveSubtitlesWithMedia).Append("\n");
            sb.Append("  SeasonZeroDisplayName: ").Append(SeasonZeroDisplayName).Append("\n");
            sb.Append("  SkipSubtitlesIfAudioTrackMatches: ").Append(SkipSubtitlesIfAudioTrackMatches).Append("\n");
            sb.Append("  SkipSubtitlesIfEmbeddedSubtitlesPresent: ").Append(SkipSubtitlesIfEmbeddedSubtitlesPresent).Append("\n");
            sb.Append("  SubtitleDownloadLanguages: ").Append(SubtitleDownloadLanguages).Append("\n");
            sb.Append("  SubtitleFetcherOrder: ").Append(SubtitleFetcherOrder).Append("\n");
            sb.Append("  TypeOptions: ").Append(TypeOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LibraryOptions)obj);
        }

        /// <summary>
        /// Returns true if LibraryOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of LibraryOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryOptions other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AutomaticRefreshIntervalDays == other.AutomaticRefreshIntervalDays ||
                    
                    AutomaticRefreshIntervalDays.Equals(other.AutomaticRefreshIntervalDays)
                ) && 
                (
                    DisabledLocalMetadataReaders == other.DisabledLocalMetadataReaders ||
                    DisabledLocalMetadataReaders != null &&
                    other.DisabledLocalMetadataReaders != null &&
                    DisabledLocalMetadataReaders.SequenceEqual(other.DisabledLocalMetadataReaders)
                ) && 
                (
                    DisabledSubtitleFetchers == other.DisabledSubtitleFetchers ||
                    DisabledSubtitleFetchers != null &&
                    other.DisabledSubtitleFetchers != null &&
                    DisabledSubtitleFetchers.SequenceEqual(other.DisabledSubtitleFetchers)
                ) && 
                (
                    EnableAutomaticSeriesGrouping == other.EnableAutomaticSeriesGrouping ||
                    
                    EnableAutomaticSeriesGrouping.Equals(other.EnableAutomaticSeriesGrouping)
                ) && 
                (
                    EnableChapterImageExtraction == other.EnableChapterImageExtraction ||
                    
                    EnableChapterImageExtraction.Equals(other.EnableChapterImageExtraction)
                ) && 
                (
                    EnableEmbeddedEpisodeInfos == other.EnableEmbeddedEpisodeInfos ||
                    
                    EnableEmbeddedEpisodeInfos.Equals(other.EnableEmbeddedEpisodeInfos)
                ) && 
                (
                    EnableEmbeddedTitles == other.EnableEmbeddedTitles ||
                    
                    EnableEmbeddedTitles.Equals(other.EnableEmbeddedTitles)
                ) && 
                (
                    EnableInternetProviders == other.EnableInternetProviders ||
                    
                    EnableInternetProviders.Equals(other.EnableInternetProviders)
                ) && 
                (
                    EnablePhotos == other.EnablePhotos ||
                    
                    EnablePhotos.Equals(other.EnablePhotos)
                ) && 
                (
                    EnableRealtimeMonitor == other.EnableRealtimeMonitor ||
                    
                    EnableRealtimeMonitor.Equals(other.EnableRealtimeMonitor)
                ) && 
                (
                    ExtractChapterImagesDuringLibraryScan == other.ExtractChapterImagesDuringLibraryScan ||
                    
                    ExtractChapterImagesDuringLibraryScan.Equals(other.ExtractChapterImagesDuringLibraryScan)
                ) && 
                (
                    LocalMetadataReaderOrder == other.LocalMetadataReaderOrder ||
                    LocalMetadataReaderOrder != null &&
                    other.LocalMetadataReaderOrder != null &&
                    LocalMetadataReaderOrder.SequenceEqual(other.LocalMetadataReaderOrder)
                ) && 
                (
                    MetadataCountryCode == other.MetadataCountryCode ||
                    MetadataCountryCode != null &&
                    MetadataCountryCode.Equals(other.MetadataCountryCode)
                ) && 
                (
                    MetadataSavers == other.MetadataSavers ||
                    MetadataSavers != null &&
                    other.MetadataSavers != null &&
                    MetadataSavers.SequenceEqual(other.MetadataSavers)
                ) && 
                (
                    PathInfos == other.PathInfos ||
                    PathInfos != null &&
                    other.PathInfos != null &&
                    PathInfos.SequenceEqual(other.PathInfos)
                ) && 
                (
                    PreferredMetadataLanguage == other.PreferredMetadataLanguage ||
                    PreferredMetadataLanguage != null &&
                    PreferredMetadataLanguage.Equals(other.PreferredMetadataLanguage)
                ) && 
                (
                    RequirePerfectSubtitleMatch == other.RequirePerfectSubtitleMatch ||
                    
                    RequirePerfectSubtitleMatch.Equals(other.RequirePerfectSubtitleMatch)
                ) && 
                (
                    SaveLocalMetadata == other.SaveLocalMetadata ||
                    
                    SaveLocalMetadata.Equals(other.SaveLocalMetadata)
                ) && 
                (
                    SaveSubtitlesWithMedia == other.SaveSubtitlesWithMedia ||
                    
                    SaveSubtitlesWithMedia.Equals(other.SaveSubtitlesWithMedia)
                ) && 
                (
                    SeasonZeroDisplayName == other.SeasonZeroDisplayName ||
                    SeasonZeroDisplayName != null &&
                    SeasonZeroDisplayName.Equals(other.SeasonZeroDisplayName)
                ) && 
                (
                    SkipSubtitlesIfAudioTrackMatches == other.SkipSubtitlesIfAudioTrackMatches ||
                    
                    SkipSubtitlesIfAudioTrackMatches.Equals(other.SkipSubtitlesIfAudioTrackMatches)
                ) && 
                (
                    SkipSubtitlesIfEmbeddedSubtitlesPresent == other.SkipSubtitlesIfEmbeddedSubtitlesPresent ||
                    
                    SkipSubtitlesIfEmbeddedSubtitlesPresent.Equals(other.SkipSubtitlesIfEmbeddedSubtitlesPresent)
                ) && 
                (
                    SubtitleDownloadLanguages == other.SubtitleDownloadLanguages ||
                    SubtitleDownloadLanguages != null &&
                    other.SubtitleDownloadLanguages != null &&
                    SubtitleDownloadLanguages.SequenceEqual(other.SubtitleDownloadLanguages)
                ) && 
                (
                    SubtitleFetcherOrder == other.SubtitleFetcherOrder ||
                    SubtitleFetcherOrder != null &&
                    other.SubtitleFetcherOrder != null &&
                    SubtitleFetcherOrder.SequenceEqual(other.SubtitleFetcherOrder)
                ) && 
                (
                    TypeOptions == other.TypeOptions ||
                    TypeOptions != null &&
                    other.TypeOptions != null &&
                    TypeOptions.SequenceEqual(other.TypeOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AutomaticRefreshIntervalDays.GetHashCode();
                    if (DisabledLocalMetadataReaders != null)
                    hashCode = hashCode * 59 + DisabledLocalMetadataReaders.GetHashCode();
                    if (DisabledSubtitleFetchers != null)
                    hashCode = hashCode * 59 + DisabledSubtitleFetchers.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableAutomaticSeriesGrouping.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableChapterImageExtraction.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableEmbeddedEpisodeInfos.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableEmbeddedTitles.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableInternetProviders.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnablePhotos.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableRealtimeMonitor.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExtractChapterImagesDuringLibraryScan.GetHashCode();
                    if (LocalMetadataReaderOrder != null)
                    hashCode = hashCode * 59 + LocalMetadataReaderOrder.GetHashCode();
                    if (MetadataCountryCode != null)
                    hashCode = hashCode * 59 + MetadataCountryCode.GetHashCode();
                    if (MetadataSavers != null)
                    hashCode = hashCode * 59 + MetadataSavers.GetHashCode();
                    if (PathInfos != null)
                    hashCode = hashCode * 59 + PathInfos.GetHashCode();
                    if (PreferredMetadataLanguage != null)
                    hashCode = hashCode * 59 + PreferredMetadataLanguage.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequirePerfectSubtitleMatch.GetHashCode();
                    
                    hashCode = hashCode * 59 + SaveLocalMetadata.GetHashCode();
                    
                    hashCode = hashCode * 59 + SaveSubtitlesWithMedia.GetHashCode();
                    if (SeasonZeroDisplayName != null)
                    hashCode = hashCode * 59 + SeasonZeroDisplayName.GetHashCode();
                    
                    hashCode = hashCode * 59 + SkipSubtitlesIfAudioTrackMatches.GetHashCode();
                    
                    hashCode = hashCode * 59 + SkipSubtitlesIfEmbeddedSubtitlesPresent.GetHashCode();
                    if (SubtitleDownloadLanguages != null)
                    hashCode = hashCode * 59 + SubtitleDownloadLanguages.GetHashCode();
                    if (SubtitleFetcherOrder != null)
                    hashCode = hashCode * 59 + SubtitleFetcherOrder.GetHashCode();
                    if (TypeOptions != null)
                    hashCode = hashCode * 59 + TypeOptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LibraryOptions left, LibraryOptions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LibraryOptions left, LibraryOptions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
