/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LiveTvInfo : IEquatable<LiveTvInfo>
    {
        /// <summary>
        /// Gets or sets the enabled users.
        /// </summary>
        /// <value>Gets or sets the enabled users.</value>
        [DataMember(Name="EnabledUsers", EmitDefaultValue=true)]
        public List<string> EnabledUsers { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is enabled.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is enabled.</value>
        [DataMember(Name="IsEnabled", EmitDefaultValue=true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or sets the services.
        /// </summary>
        /// <value>Gets or sets the services.</value>
        [DataMember(Name="Services", EmitDefaultValue=true)]
        public List<LiveTvServiceInfo> Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LiveTvInfo {\n");
            sb.Append("  EnabledUsers: ").Append(EnabledUsers).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LiveTvInfo)obj);
        }

        /// <summary>
        /// Returns true if LiveTvInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of LiveTvInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiveTvInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EnabledUsers == other.EnabledUsers ||
                    EnabledUsers != null &&
                    other.EnabledUsers != null &&
                    EnabledUsers.SequenceEqual(other.EnabledUsers)
                ) && 
                (
                    IsEnabled == other.IsEnabled ||
                    
                    IsEnabled.Equals(other.IsEnabled)
                ) && 
                (
                    Services == other.Services ||
                    Services != null &&
                    other.Services != null &&
                    Services.SequenceEqual(other.Services)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EnabledUsers != null)
                    hashCode = hashCode * 59 + EnabledUsers.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsEnabled.GetHashCode();
                    if (Services != null)
                    hashCode = hashCode * 59 + Services.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LiveTvInfo left, LiveTvInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LiveTvInfo left, LiveTvInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
