/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class MetadataOptions.
    /// </summary>
    [DataContract]
    public partial class MetadataOptions : IEquatable<MetadataOptions>
    {
        /// <summary>
        /// Gets or Sets DisabledImageFetchers
        /// </summary>
        [DataMember(Name="DisabledImageFetchers", EmitDefaultValue=true)]
        public List<string> DisabledImageFetchers { get; set; }

        /// <summary>
        /// Gets or Sets DisabledMetadataFetchers
        /// </summary>
        [DataMember(Name="DisabledMetadataFetchers", EmitDefaultValue=true)]
        public List<string> DisabledMetadataFetchers { get; set; }

        /// <summary>
        /// Gets or Sets DisabledMetadataSavers
        /// </summary>
        [DataMember(Name="DisabledMetadataSavers", EmitDefaultValue=true)]
        public List<string> DisabledMetadataSavers { get; set; }

        /// <summary>
        /// Gets or Sets ImageFetcherOrder
        /// </summary>
        [DataMember(Name="ImageFetcherOrder", EmitDefaultValue=true)]
        public List<string> ImageFetcherOrder { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="ItemType", EmitDefaultValue=true)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets LocalMetadataReaderOrder
        /// </summary>
        [DataMember(Name="LocalMetadataReaderOrder", EmitDefaultValue=true)]
        public List<string> LocalMetadataReaderOrder { get; set; }

        /// <summary>
        /// Gets or Sets MetadataFetcherOrder
        /// </summary>
        [DataMember(Name="MetadataFetcherOrder", EmitDefaultValue=true)]
        public List<string> MetadataFetcherOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetadataOptions {\n");
            sb.Append("  DisabledImageFetchers: ").Append(DisabledImageFetchers).Append("\n");
            sb.Append("  DisabledMetadataFetchers: ").Append(DisabledMetadataFetchers).Append("\n");
            sb.Append("  DisabledMetadataSavers: ").Append(DisabledMetadataSavers).Append("\n");
            sb.Append("  ImageFetcherOrder: ").Append(ImageFetcherOrder).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  LocalMetadataReaderOrder: ").Append(LocalMetadataReaderOrder).Append("\n");
            sb.Append("  MetadataFetcherOrder: ").Append(MetadataFetcherOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MetadataOptions)obj);
        }

        /// <summary>
        /// Returns true if MetadataOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of MetadataOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetadataOptions other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DisabledImageFetchers == other.DisabledImageFetchers ||
                    DisabledImageFetchers != null &&
                    other.DisabledImageFetchers != null &&
                    DisabledImageFetchers.SequenceEqual(other.DisabledImageFetchers)
                ) && 
                (
                    DisabledMetadataFetchers == other.DisabledMetadataFetchers ||
                    DisabledMetadataFetchers != null &&
                    other.DisabledMetadataFetchers != null &&
                    DisabledMetadataFetchers.SequenceEqual(other.DisabledMetadataFetchers)
                ) && 
                (
                    DisabledMetadataSavers == other.DisabledMetadataSavers ||
                    DisabledMetadataSavers != null &&
                    other.DisabledMetadataSavers != null &&
                    DisabledMetadataSavers.SequenceEqual(other.DisabledMetadataSavers)
                ) && 
                (
                    ImageFetcherOrder == other.ImageFetcherOrder ||
                    ImageFetcherOrder != null &&
                    other.ImageFetcherOrder != null &&
                    ImageFetcherOrder.SequenceEqual(other.ImageFetcherOrder)
                ) && 
                (
                    ItemType == other.ItemType ||
                    ItemType != null &&
                    ItemType.Equals(other.ItemType)
                ) && 
                (
                    LocalMetadataReaderOrder == other.LocalMetadataReaderOrder ||
                    LocalMetadataReaderOrder != null &&
                    other.LocalMetadataReaderOrder != null &&
                    LocalMetadataReaderOrder.SequenceEqual(other.LocalMetadataReaderOrder)
                ) && 
                (
                    MetadataFetcherOrder == other.MetadataFetcherOrder ||
                    MetadataFetcherOrder != null &&
                    other.MetadataFetcherOrder != null &&
                    MetadataFetcherOrder.SequenceEqual(other.MetadataFetcherOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DisabledImageFetchers != null)
                    hashCode = hashCode * 59 + DisabledImageFetchers.GetHashCode();
                    if (DisabledMetadataFetchers != null)
                    hashCode = hashCode * 59 + DisabledMetadataFetchers.GetHashCode();
                    if (DisabledMetadataSavers != null)
                    hashCode = hashCode * 59 + DisabledMetadataSavers.GetHashCode();
                    if (ImageFetcherOrder != null)
                    hashCode = hashCode * 59 + ImageFetcherOrder.GetHashCode();
                    if (ItemType != null)
                    hashCode = hashCode * 59 + ItemType.GetHashCode();
                    if (LocalMetadataReaderOrder != null)
                    hashCode = hashCode * 59 + LocalMetadataReaderOrder.GetHashCode();
                    if (MetadataFetcherOrder != null)
                    hashCode = hashCode * 59 + MetadataFetcherOrder.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MetadataOptions left, MetadataOptions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MetadataOptions left, MetadataOptions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
