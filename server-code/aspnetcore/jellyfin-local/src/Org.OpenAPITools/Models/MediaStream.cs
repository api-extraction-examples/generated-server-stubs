/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class MediaStream.
    /// </summary>
    [DataContract]
    public partial class MediaStream : IEquatable<MediaStream>
    {
        /// <summary>
        /// Gets or sets the aspect ratio.
        /// </summary>
        /// <value>Gets or sets the aspect ratio.</value>
        [DataMember(Name="AspectRatio", EmitDefaultValue=true)]
        public string AspectRatio { get; set; }

        /// <summary>
        /// Gets or sets the average frame rate.
        /// </summary>
        /// <value>Gets or sets the average frame rate.</value>
        [DataMember(Name="AverageFrameRate", EmitDefaultValue=true)]
        public float? AverageFrameRate { get; set; }

        /// <summary>
        /// Gets or sets the bit depth.
        /// </summary>
        /// <value>Gets or sets the bit depth.</value>
        [DataMember(Name="BitDepth", EmitDefaultValue=true)]
        public int? BitDepth { get; set; }

        /// <summary>
        /// Gets or sets the bit rate.
        /// </summary>
        /// <value>Gets or sets the bit rate.</value>
        [DataMember(Name="BitRate", EmitDefaultValue=true)]
        public int? BitRate { get; set; }

        /// <summary>
        /// Gets or sets the channel layout.
        /// </summary>
        /// <value>Gets or sets the channel layout.</value>
        [DataMember(Name="ChannelLayout", EmitDefaultValue=true)]
        public string ChannelLayout { get; set; }

        /// <summary>
        /// Gets or sets the channels.
        /// </summary>
        /// <value>Gets or sets the channels.</value>
        [DataMember(Name="Channels", EmitDefaultValue=true)]
        public int? Channels { get; set; }

        /// <summary>
        /// Gets or sets the codec.
        /// </summary>
        /// <value>Gets or sets the codec.</value>
        [DataMember(Name="Codec", EmitDefaultValue=true)]
        public string Codec { get; set; }

        /// <summary>
        /// Gets or sets the codec tag.
        /// </summary>
        /// <value>Gets or sets the codec tag.</value>
        [DataMember(Name="CodecTag", EmitDefaultValue=true)]
        public string CodecTag { get; set; }

        /// <summary>
        /// Gets or sets the codec time base.
        /// </summary>
        /// <value>Gets or sets the codec time base.</value>
        [DataMember(Name="CodecTimeBase", EmitDefaultValue=true)]
        public string CodecTimeBase { get; set; }

        /// <summary>
        /// Gets or sets the color primaries.
        /// </summary>
        /// <value>Gets or sets the color primaries.</value>
        [DataMember(Name="ColorPrimaries", EmitDefaultValue=true)]
        public string ColorPrimaries { get; set; }

        /// <summary>
        /// Gets or sets the color range.
        /// </summary>
        /// <value>Gets or sets the color range.</value>
        [DataMember(Name="ColorRange", EmitDefaultValue=true)]
        public string ColorRange { get; set; }

        /// <summary>
        /// Gets or sets the color space.
        /// </summary>
        /// <value>Gets or sets the color space.</value>
        [DataMember(Name="ColorSpace", EmitDefaultValue=true)]
        public string ColorSpace { get; set; }

        /// <summary>
        /// Gets or sets the color transfer.
        /// </summary>
        /// <value>Gets or sets the color transfer.</value>
        [DataMember(Name="ColorTransfer", EmitDefaultValue=true)]
        public string ColorTransfer { get; set; }

        /// <summary>
        /// Gets or sets the comment.
        /// </summary>
        /// <value>Gets or sets the comment.</value>
        [DataMember(Name="Comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryMethod
        /// </summary>
        [DataMember(Name="DeliveryMethod", EmitDefaultValue=true)]
        public SubtitleDeliveryMethod DeliveryMethod { get; set; }

        /// <summary>
        /// Gets or sets the delivery URL.
        /// </summary>
        /// <value>Gets or sets the delivery URL.</value>
        [DataMember(Name="DeliveryUrl", EmitDefaultValue=true)]
        public string DeliveryUrl { get; set; }

        /// <summary>
        /// Gets or Sets DisplayTitle
        /// </summary>
        [DataMember(Name="DisplayTitle", EmitDefaultValue=true)]
        public string DisplayTitle { get; set; }

        /// <summary>
        /// Gets or sets the height.
        /// </summary>
        /// <value>Gets or sets the height.</value>
        [DataMember(Name="Height", EmitDefaultValue=true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or sets the index.
        /// </summary>
        /// <value>Gets or sets the index.</value>
        [DataMember(Name="Index", EmitDefaultValue=true)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or Sets IsAVC
        /// </summary>
        [DataMember(Name="IsAVC", EmitDefaultValue=true)]
        public bool? IsAVC { get; set; }

        /// <summary>
        /// Gets a value indicating whether this instance is anamorphic.
        /// </summary>
        /// <value>Gets a value indicating whether this instance is anamorphic.</value>
        [DataMember(Name="IsAnamorphic", EmitDefaultValue=true)]
        public bool? IsAnamorphic { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is default.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is default.</value>
        [DataMember(Name="IsDefault", EmitDefaultValue=true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is external.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is external.</value>
        [DataMember(Name="IsExternal", EmitDefaultValue=true)]
        public bool IsExternal { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is external URL.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is external URL.</value>
        [DataMember(Name="IsExternalUrl", EmitDefaultValue=true)]
        public bool? IsExternalUrl { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is forced.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is forced.</value>
        [DataMember(Name="IsForced", EmitDefaultValue=true)]
        public bool IsForced { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is interlaced.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is interlaced.</value>
        [DataMember(Name="IsInterlaced", EmitDefaultValue=true)]
        public bool IsInterlaced { get; set; }

        /// <summary>
        /// Gets or Sets IsTextSubtitleStream
        /// </summary>
        [DataMember(Name="IsTextSubtitleStream", EmitDefaultValue=true)]
        public bool IsTextSubtitleStream { get; set; }

        /// <summary>
        /// Gets or sets the language.
        /// </summary>
        /// <value>Gets or sets the language.</value>
        [DataMember(Name="Language", EmitDefaultValue=true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets the level.
        /// </summary>
        /// <value>Gets or sets the level.</value>
        [DataMember(Name="Level", EmitDefaultValue=true)]
        public double? Level { get; set; }

        /// <summary>
        /// Gets or Sets NalLengthSize
        /// </summary>
        [DataMember(Name="NalLengthSize", EmitDefaultValue=true)]
        public string NalLengthSize { get; set; }

        /// <summary>
        /// Gets or sets the length of the packet.
        /// </summary>
        /// <value>Gets or sets the length of the packet.</value>
        [DataMember(Name="PacketLength", EmitDefaultValue=true)]
        public int? PacketLength { get; set; }

        /// <summary>
        /// Gets or sets the filename.
        /// </summary>
        /// <value>Gets or sets the filename.</value>
        [DataMember(Name="Path", EmitDefaultValue=true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets the pixel format.
        /// </summary>
        /// <value>Gets or sets the pixel format.</value>
        [DataMember(Name="PixelFormat", EmitDefaultValue=true)]
        public string PixelFormat { get; set; }

        /// <summary>
        /// Gets or sets the profile.
        /// </summary>
        /// <value>Gets or sets the profile.</value>
        [DataMember(Name="Profile", EmitDefaultValue=true)]
        public string Profile { get; set; }

        /// <summary>
        /// Gets or sets the real frame rate.
        /// </summary>
        /// <value>Gets or sets the real frame rate.</value>
        [DataMember(Name="RealFrameRate", EmitDefaultValue=true)]
        public float? RealFrameRate { get; set; }

        /// <summary>
        /// Gets or sets the reference frames.
        /// </summary>
        /// <value>Gets or sets the reference frames.</value>
        [DataMember(Name="RefFrames", EmitDefaultValue=true)]
        public int? RefFrames { get; set; }

        /// <summary>
        /// Gets or sets the sample rate.
        /// </summary>
        /// <value>Gets or sets the sample rate.</value>
        [DataMember(Name="SampleRate", EmitDefaultValue=true)]
        public int? SampleRate { get; set; }

        /// <summary>
        /// Gets or sets the score.
        /// </summary>
        /// <value>Gets or sets the score.</value>
        [DataMember(Name="Score", EmitDefaultValue=true)]
        public int? Score { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [supports external stream].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [supports external stream].</value>
        [DataMember(Name="SupportsExternalStream", EmitDefaultValue=true)]
        public bool SupportsExternalStream { get; set; }

        /// <summary>
        /// Gets or sets the time base.
        /// </summary>
        /// <value>Gets or sets the time base.</value>
        [DataMember(Name="TimeBase", EmitDefaultValue=true)]
        public string TimeBase { get; set; }

        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        /// <value>Gets or sets the title.</value>
        [DataMember(Name="Title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public MediaStreamType Type { get; set; }

        /// <summary>
        /// Gets or sets the video range.
        /// </summary>
        /// <value>Gets or sets the video range.</value>
        [DataMember(Name="VideoRange", EmitDefaultValue=true)]
        public string VideoRange { get; set; }

        /// <summary>
        /// Gets or sets the width.
        /// </summary>
        /// <value>Gets or sets the width.</value>
        [DataMember(Name="Width", EmitDefaultValue=true)]
        public int? Width { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedDefault
        /// </summary>
        [DataMember(Name="localizedDefault", EmitDefaultValue=true)]
        public string LocalizedDefault { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedForced
        /// </summary>
        [DataMember(Name="localizedForced", EmitDefaultValue=true)]
        public string LocalizedForced { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedUndefined
        /// </summary>
        [DataMember(Name="localizedUndefined", EmitDefaultValue=true)]
        public string LocalizedUndefined { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaStream {\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  AverageFrameRate: ").Append(AverageFrameRate).Append("\n");
            sb.Append("  BitDepth: ").Append(BitDepth).Append("\n");
            sb.Append("  BitRate: ").Append(BitRate).Append("\n");
            sb.Append("  ChannelLayout: ").Append(ChannelLayout).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  Codec: ").Append(Codec).Append("\n");
            sb.Append("  CodecTag: ").Append(CodecTag).Append("\n");
            sb.Append("  CodecTimeBase: ").Append(CodecTimeBase).Append("\n");
            sb.Append("  ColorPrimaries: ").Append(ColorPrimaries).Append("\n");
            sb.Append("  ColorRange: ").Append(ColorRange).Append("\n");
            sb.Append("  ColorSpace: ").Append(ColorSpace).Append("\n");
            sb.Append("  ColorTransfer: ").Append(ColorTransfer).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  DeliveryMethod: ").Append(DeliveryMethod).Append("\n");
            sb.Append("  DeliveryUrl: ").Append(DeliveryUrl).Append("\n");
            sb.Append("  DisplayTitle: ").Append(DisplayTitle).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IsAVC: ").Append(IsAVC).Append("\n");
            sb.Append("  IsAnamorphic: ").Append(IsAnamorphic).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsExternal: ").Append(IsExternal).Append("\n");
            sb.Append("  IsExternalUrl: ").Append(IsExternalUrl).Append("\n");
            sb.Append("  IsForced: ").Append(IsForced).Append("\n");
            sb.Append("  IsInterlaced: ").Append(IsInterlaced).Append("\n");
            sb.Append("  IsTextSubtitleStream: ").Append(IsTextSubtitleStream).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  NalLengthSize: ").Append(NalLengthSize).Append("\n");
            sb.Append("  PacketLength: ").Append(PacketLength).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  PixelFormat: ").Append(PixelFormat).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  RealFrameRate: ").Append(RealFrameRate).Append("\n");
            sb.Append("  RefFrames: ").Append(RefFrames).Append("\n");
            sb.Append("  SampleRate: ").Append(SampleRate).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  SupportsExternalStream: ").Append(SupportsExternalStream).Append("\n");
            sb.Append("  TimeBase: ").Append(TimeBase).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VideoRange: ").Append(VideoRange).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  LocalizedDefault: ").Append(LocalizedDefault).Append("\n");
            sb.Append("  LocalizedForced: ").Append(LocalizedForced).Append("\n");
            sb.Append("  LocalizedUndefined: ").Append(LocalizedUndefined).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MediaStream)obj);
        }

        /// <summary>
        /// Returns true if MediaStream instances are equal
        /// </summary>
        /// <param name="other">Instance of MediaStream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaStream other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AspectRatio == other.AspectRatio ||
                    AspectRatio != null &&
                    AspectRatio.Equals(other.AspectRatio)
                ) && 
                (
                    AverageFrameRate == other.AverageFrameRate ||
                    AverageFrameRate != null &&
                    AverageFrameRate.Equals(other.AverageFrameRate)
                ) && 
                (
                    BitDepth == other.BitDepth ||
                    BitDepth != null &&
                    BitDepth.Equals(other.BitDepth)
                ) && 
                (
                    BitRate == other.BitRate ||
                    BitRate != null &&
                    BitRate.Equals(other.BitRate)
                ) && 
                (
                    ChannelLayout == other.ChannelLayout ||
                    ChannelLayout != null &&
                    ChannelLayout.Equals(other.ChannelLayout)
                ) && 
                (
                    Channels == other.Channels ||
                    Channels != null &&
                    Channels.Equals(other.Channels)
                ) && 
                (
                    Codec == other.Codec ||
                    Codec != null &&
                    Codec.Equals(other.Codec)
                ) && 
                (
                    CodecTag == other.CodecTag ||
                    CodecTag != null &&
                    CodecTag.Equals(other.CodecTag)
                ) && 
                (
                    CodecTimeBase == other.CodecTimeBase ||
                    CodecTimeBase != null &&
                    CodecTimeBase.Equals(other.CodecTimeBase)
                ) && 
                (
                    ColorPrimaries == other.ColorPrimaries ||
                    ColorPrimaries != null &&
                    ColorPrimaries.Equals(other.ColorPrimaries)
                ) && 
                (
                    ColorRange == other.ColorRange ||
                    ColorRange != null &&
                    ColorRange.Equals(other.ColorRange)
                ) && 
                (
                    ColorSpace == other.ColorSpace ||
                    ColorSpace != null &&
                    ColorSpace.Equals(other.ColorSpace)
                ) && 
                (
                    ColorTransfer == other.ColorTransfer ||
                    ColorTransfer != null &&
                    ColorTransfer.Equals(other.ColorTransfer)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    DeliveryMethod == other.DeliveryMethod ||
                    
                    DeliveryMethod.Equals(other.DeliveryMethod)
                ) && 
                (
                    DeliveryUrl == other.DeliveryUrl ||
                    DeliveryUrl != null &&
                    DeliveryUrl.Equals(other.DeliveryUrl)
                ) && 
                (
                    DisplayTitle == other.DisplayTitle ||
                    DisplayTitle != null &&
                    DisplayTitle.Equals(other.DisplayTitle)
                ) && 
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                ) && 
                (
                    Index == other.Index ||
                    
                    Index.Equals(other.Index)
                ) && 
                (
                    IsAVC == other.IsAVC ||
                    IsAVC != null &&
                    IsAVC.Equals(other.IsAVC)
                ) && 
                (
                    IsAnamorphic == other.IsAnamorphic ||
                    IsAnamorphic != null &&
                    IsAnamorphic.Equals(other.IsAnamorphic)
                ) && 
                (
                    IsDefault == other.IsDefault ||
                    
                    IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    IsExternal == other.IsExternal ||
                    
                    IsExternal.Equals(other.IsExternal)
                ) && 
                (
                    IsExternalUrl == other.IsExternalUrl ||
                    IsExternalUrl != null &&
                    IsExternalUrl.Equals(other.IsExternalUrl)
                ) && 
                (
                    IsForced == other.IsForced ||
                    
                    IsForced.Equals(other.IsForced)
                ) && 
                (
                    IsInterlaced == other.IsInterlaced ||
                    
                    IsInterlaced.Equals(other.IsInterlaced)
                ) && 
                (
                    IsTextSubtitleStream == other.IsTextSubtitleStream ||
                    
                    IsTextSubtitleStream.Equals(other.IsTextSubtitleStream)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    Level == other.Level ||
                    Level != null &&
                    Level.Equals(other.Level)
                ) && 
                (
                    NalLengthSize == other.NalLengthSize ||
                    NalLengthSize != null &&
                    NalLengthSize.Equals(other.NalLengthSize)
                ) && 
                (
                    PacketLength == other.PacketLength ||
                    PacketLength != null &&
                    PacketLength.Equals(other.PacketLength)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    PixelFormat == other.PixelFormat ||
                    PixelFormat != null &&
                    PixelFormat.Equals(other.PixelFormat)
                ) && 
                (
                    Profile == other.Profile ||
                    Profile != null &&
                    Profile.Equals(other.Profile)
                ) && 
                (
                    RealFrameRate == other.RealFrameRate ||
                    RealFrameRate != null &&
                    RealFrameRate.Equals(other.RealFrameRate)
                ) && 
                (
                    RefFrames == other.RefFrames ||
                    RefFrames != null &&
                    RefFrames.Equals(other.RefFrames)
                ) && 
                (
                    SampleRate == other.SampleRate ||
                    SampleRate != null &&
                    SampleRate.Equals(other.SampleRate)
                ) && 
                (
                    Score == other.Score ||
                    Score != null &&
                    Score.Equals(other.Score)
                ) && 
                (
                    SupportsExternalStream == other.SupportsExternalStream ||
                    
                    SupportsExternalStream.Equals(other.SupportsExternalStream)
                ) && 
                (
                    TimeBase == other.TimeBase ||
                    TimeBase != null &&
                    TimeBase.Equals(other.TimeBase)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    VideoRange == other.VideoRange ||
                    VideoRange != null &&
                    VideoRange.Equals(other.VideoRange)
                ) && 
                (
                    Width == other.Width ||
                    Width != null &&
                    Width.Equals(other.Width)
                ) && 
                (
                    LocalizedDefault == other.LocalizedDefault ||
                    LocalizedDefault != null &&
                    LocalizedDefault.Equals(other.LocalizedDefault)
                ) && 
                (
                    LocalizedForced == other.LocalizedForced ||
                    LocalizedForced != null &&
                    LocalizedForced.Equals(other.LocalizedForced)
                ) && 
                (
                    LocalizedUndefined == other.LocalizedUndefined ||
                    LocalizedUndefined != null &&
                    LocalizedUndefined.Equals(other.LocalizedUndefined)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AspectRatio != null)
                    hashCode = hashCode * 59 + AspectRatio.GetHashCode();
                    if (AverageFrameRate != null)
                    hashCode = hashCode * 59 + AverageFrameRate.GetHashCode();
                    if (BitDepth != null)
                    hashCode = hashCode * 59 + BitDepth.GetHashCode();
                    if (BitRate != null)
                    hashCode = hashCode * 59 + BitRate.GetHashCode();
                    if (ChannelLayout != null)
                    hashCode = hashCode * 59 + ChannelLayout.GetHashCode();
                    if (Channels != null)
                    hashCode = hashCode * 59 + Channels.GetHashCode();
                    if (Codec != null)
                    hashCode = hashCode * 59 + Codec.GetHashCode();
                    if (CodecTag != null)
                    hashCode = hashCode * 59 + CodecTag.GetHashCode();
                    if (CodecTimeBase != null)
                    hashCode = hashCode * 59 + CodecTimeBase.GetHashCode();
                    if (ColorPrimaries != null)
                    hashCode = hashCode * 59 + ColorPrimaries.GetHashCode();
                    if (ColorRange != null)
                    hashCode = hashCode * 59 + ColorRange.GetHashCode();
                    if (ColorSpace != null)
                    hashCode = hashCode * 59 + ColorSpace.GetHashCode();
                    if (ColorTransfer != null)
                    hashCode = hashCode * 59 + ColorTransfer.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    
                    hashCode = hashCode * 59 + DeliveryMethod.GetHashCode();
                    if (DeliveryUrl != null)
                    hashCode = hashCode * 59 + DeliveryUrl.GetHashCode();
                    if (DisplayTitle != null)
                    hashCode = hashCode * 59 + DisplayTitle.GetHashCode();
                    if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                    
                    hashCode = hashCode * 59 + Index.GetHashCode();
                    if (IsAVC != null)
                    hashCode = hashCode * 59 + IsAVC.GetHashCode();
                    if (IsAnamorphic != null)
                    hashCode = hashCode * 59 + IsAnamorphic.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDefault.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsExternal.GetHashCode();
                    if (IsExternalUrl != null)
                    hashCode = hashCode * 59 + IsExternalUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsForced.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInterlaced.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsTextSubtitleStream.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (Level != null)
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (NalLengthSize != null)
                    hashCode = hashCode * 59 + NalLengthSize.GetHashCode();
                    if (PacketLength != null)
                    hashCode = hashCode * 59 + PacketLength.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (PixelFormat != null)
                    hashCode = hashCode * 59 + PixelFormat.GetHashCode();
                    if (Profile != null)
                    hashCode = hashCode * 59 + Profile.GetHashCode();
                    if (RealFrameRate != null)
                    hashCode = hashCode * 59 + RealFrameRate.GetHashCode();
                    if (RefFrames != null)
                    hashCode = hashCode * 59 + RefFrames.GetHashCode();
                    if (SampleRate != null)
                    hashCode = hashCode * 59 + SampleRate.GetHashCode();
                    if (Score != null)
                    hashCode = hashCode * 59 + Score.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsExternalStream.GetHashCode();
                    if (TimeBase != null)
                    hashCode = hashCode * 59 + TimeBase.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (VideoRange != null)
                    hashCode = hashCode * 59 + VideoRange.GetHashCode();
                    if (Width != null)
                    hashCode = hashCode * 59 + Width.GetHashCode();
                    if (LocalizedDefault != null)
                    hashCode = hashCode * 59 + LocalizedDefault.GetHashCode();
                    if (LocalizedForced != null)
                    hashCode = hashCode * 59 + LocalizedForced.GetHashCode();
                    if (LocalizedUndefined != null)
                    hashCode = hashCode * 59 + LocalizedUndefined.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MediaStream left, MediaStream right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MediaStream left, MediaStream right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
