/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AuthenticationInfo : IEquatable<AuthenticationInfo>
    {
        /// <summary>
        /// Gets or sets the access token.
        /// </summary>
        /// <value>Gets or sets the access token.</value>
        [DataMember(Name="AccessToken", EmitDefaultValue=true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or sets the name of the application.
        /// </summary>
        /// <value>Gets or sets the name of the application.</value>
        [DataMember(Name="AppName", EmitDefaultValue=true)]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or sets the application version.
        /// </summary>
        /// <value>Gets or sets the application version.</value>
        [DataMember(Name="AppVersion", EmitDefaultValue=true)]
        public string AppVersion { get; set; }

        /// <summary>
        /// Gets or sets the date created.
        /// </summary>
        /// <value>Gets or sets the date created.</value>
        [DataMember(Name="DateCreated", EmitDefaultValue=false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateLastActivity
        /// </summary>
        [DataMember(Name="DateLastActivity", EmitDefaultValue=false)]
        public DateTime DateLastActivity { get; set; }

        /// <summary>
        /// Gets or sets the date revoked.
        /// </summary>
        /// <value>Gets or sets the date revoked.</value>
        [DataMember(Name="DateRevoked", EmitDefaultValue=true)]
        public DateTime? DateRevoked { get; set; }

        /// <summary>
        /// Gets or sets the device identifier.
        /// </summary>
        /// <value>Gets or sets the device identifier.</value>
        [DataMember(Name="DeviceId", EmitDefaultValue=true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or sets the name of the device.
        /// </summary>
        /// <value>Gets or sets the name of the device.</value>
        [DataMember(Name="DeviceName", EmitDefaultValue=true)]
        public string DeviceName { get; set; }

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        /// <value>Gets or sets the identifier.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is active.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is active.</value>
        [DataMember(Name="IsActive", EmitDefaultValue=true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or sets the user identifier.
        /// </summary>
        /// <value>Gets or sets the user identifier.</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="UserName", EmitDefaultValue=true)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationInfo {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateLastActivity: ").Append(DateLastActivity).Append("\n");
            sb.Append("  DateRevoked: ").Append(DateRevoked).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  DeviceName: ").Append(DeviceName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AuthenticationInfo)obj);
        }

        /// <summary>
        /// Returns true if AuthenticationInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of AuthenticationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccessToken == other.AccessToken ||
                    AccessToken != null &&
                    AccessToken.Equals(other.AccessToken)
                ) && 
                (
                    AppName == other.AppName ||
                    AppName != null &&
                    AppName.Equals(other.AppName)
                ) && 
                (
                    AppVersion == other.AppVersion ||
                    AppVersion != null &&
                    AppVersion.Equals(other.AppVersion)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    DateLastActivity == other.DateLastActivity ||
                    DateLastActivity != null &&
                    DateLastActivity.Equals(other.DateLastActivity)
                ) && 
                (
                    DateRevoked == other.DateRevoked ||
                    DateRevoked != null &&
                    DateRevoked.Equals(other.DateRevoked)
                ) && 
                (
                    DeviceId == other.DeviceId ||
                    DeviceId != null &&
                    DeviceId.Equals(other.DeviceId)
                ) && 
                (
                    DeviceName == other.DeviceName ||
                    DeviceName != null &&
                    DeviceName.Equals(other.DeviceName)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    IsActive == other.IsActive ||
                    
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccessToken != null)
                    hashCode = hashCode * 59 + AccessToken.GetHashCode();
                    if (AppName != null)
                    hashCode = hashCode * 59 + AppName.GetHashCode();
                    if (AppVersion != null)
                    hashCode = hashCode * 59 + AppVersion.GetHashCode();
                    if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    if (DateLastActivity != null)
                    hashCode = hashCode * 59 + DateLastActivity.GetHashCode();
                    if (DateRevoked != null)
                    hashCode = hashCode * 59 + DateRevoked.GetHashCode();
                    if (DeviceId != null)
                    hashCode = hashCode * 59 + DeviceId.GetHashCode();
                    if (DeviceName != null)
                    hashCode = hashCode * 59 + DeviceName.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AuthenticationInfo left, AuthenticationInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AuthenticationInfo left, AuthenticationInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
