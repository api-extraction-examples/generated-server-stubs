/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RemoteSubtitleInfo : IEquatable<RemoteSubtitleInfo>
    {
        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="Author", EmitDefaultValue=true)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="Comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets CommunityRating
        /// </summary>
        [DataMember(Name="CommunityRating", EmitDefaultValue=true)]
        public float? CommunityRating { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="DateCreated", EmitDefaultValue=true)]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DownloadCount
        /// </summary>
        [DataMember(Name="DownloadCount", EmitDefaultValue=true)]
        public int? DownloadCount { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="Format", EmitDefaultValue=true)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsHashMatch
        /// </summary>
        [DataMember(Name="IsHashMatch", EmitDefaultValue=true)]
        public bool? IsHashMatch { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [DataMember(Name="ProviderName", EmitDefaultValue=true)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets ThreeLetterISOLanguageName
        /// </summary>
        [DataMember(Name="ThreeLetterISOLanguageName", EmitDefaultValue=true)]
        public string ThreeLetterISOLanguageName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSubtitleInfo {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CommunityRating: ").Append(CommunityRating).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DownloadCount: ").Append(DownloadCount).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsHashMatch: ").Append(IsHashMatch).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  ThreeLetterISOLanguageName: ").Append(ThreeLetterISOLanguageName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteSubtitleInfo)obj);
        }

        /// <summary>
        /// Returns true if RemoteSubtitleInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteSubtitleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSubtitleInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Author == other.Author ||
                    Author != null &&
                    Author.Equals(other.Author)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    CommunityRating == other.CommunityRating ||
                    CommunityRating != null &&
                    CommunityRating.Equals(other.CommunityRating)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    DownloadCount == other.DownloadCount ||
                    DownloadCount != null &&
                    DownloadCount.Equals(other.DownloadCount)
                ) && 
                (
                    Format == other.Format ||
                    Format != null &&
                    Format.Equals(other.Format)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsHashMatch == other.IsHashMatch ||
                    IsHashMatch != null &&
                    IsHashMatch.Equals(other.IsHashMatch)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ProviderName == other.ProviderName ||
                    ProviderName != null &&
                    ProviderName.Equals(other.ProviderName)
                ) && 
                (
                    ThreeLetterISOLanguageName == other.ThreeLetterISOLanguageName ||
                    ThreeLetterISOLanguageName != null &&
                    ThreeLetterISOLanguageName.Equals(other.ThreeLetterISOLanguageName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Author != null)
                    hashCode = hashCode * 59 + Author.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (CommunityRating != null)
                    hashCode = hashCode * 59 + CommunityRating.GetHashCode();
                    if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    if (DownloadCount != null)
                    hashCode = hashCode * 59 + DownloadCount.GetHashCode();
                    if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IsHashMatch != null)
                    hashCode = hashCode * 59 + IsHashMatch.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ProviderName != null)
                    hashCode = hashCode * 59 + ProviderName.GetHashCode();
                    if (ThreeLetterISOLanguageName != null)
                    hashCode = hashCode * 59 + ThreeLetterISOLanguageName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteSubtitleInfo left, RemoteSubtitleInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteSubtitleInfo left, RemoteSubtitleInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
