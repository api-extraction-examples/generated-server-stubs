/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CodecProfile : IEquatable<CodecProfile>
    {
        /// <summary>
        /// Gets or Sets ApplyConditions
        /// </summary>
        [DataMember(Name="ApplyConditions", EmitDefaultValue=true)]
        public List<ProfileCondition> ApplyConditions { get; set; }

        /// <summary>
        /// Gets or Sets Codec
        /// </summary>
        [DataMember(Name="Codec", EmitDefaultValue=true)]
        public string Codec { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name="Conditions", EmitDefaultValue=true)]
        public List<ProfileCondition> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="Container", EmitDefaultValue=true)]
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public CodecType Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CodecProfile {\n");
            sb.Append("  ApplyConditions: ").Append(ApplyConditions).Append("\n");
            sb.Append("  Codec: ").Append(Codec).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CodecProfile)obj);
        }

        /// <summary>
        /// Returns true if CodecProfile instances are equal
        /// </summary>
        /// <param name="other">Instance of CodecProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodecProfile other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplyConditions == other.ApplyConditions ||
                    ApplyConditions != null &&
                    other.ApplyConditions != null &&
                    ApplyConditions.SequenceEqual(other.ApplyConditions)
                ) && 
                (
                    Codec == other.Codec ||
                    Codec != null &&
                    Codec.Equals(other.Codec)
                ) && 
                (
                    Conditions == other.Conditions ||
                    Conditions != null &&
                    other.Conditions != null &&
                    Conditions.SequenceEqual(other.Conditions)
                ) && 
                (
                    Container == other.Container ||
                    Container != null &&
                    Container.Equals(other.Container)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplyConditions != null)
                    hashCode = hashCode * 59 + ApplyConditions.GetHashCode();
                    if (Codec != null)
                    hashCode = hashCode * 59 + Codec.GetHashCode();
                    if (Conditions != null)
                    hashCode = hashCode * 59 + Conditions.GetHashCode();
                    if (Container != null)
                    hashCode = hashCode * 59 + Container.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CodecProfile left, CodecProfile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CodecProfile left, CodecProfile right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
