/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TranscodingInfo : IEquatable<TranscodingInfo>
    {
        /// <summary>
        /// Gets or Sets AudioChannels
        /// </summary>
        [DataMember(Name="AudioChannels", EmitDefaultValue=true)]
        public int? AudioChannels { get; set; }

        /// <summary>
        /// Gets or Sets AudioCodec
        /// </summary>
        [DataMember(Name="AudioCodec", EmitDefaultValue=true)]
        public string AudioCodec { get; set; }

        /// <summary>
        /// Gets or Sets Bitrate
        /// </summary>
        [DataMember(Name="Bitrate", EmitDefaultValue=true)]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Gets or Sets CompletionPercentage
        /// </summary>
        [DataMember(Name="CompletionPercentage", EmitDefaultValue=true)]
        public double? CompletionPercentage { get; set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="Container", EmitDefaultValue=true)]
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets Framerate
        /// </summary>
        [DataMember(Name="Framerate", EmitDefaultValue=true)]
        public float? Framerate { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="Height", EmitDefaultValue=true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets IsAudioDirect
        /// </summary>
        [DataMember(Name="IsAudioDirect", EmitDefaultValue=true)]
        public bool IsAudioDirect { get; set; }

        /// <summary>
        /// Gets or Sets IsVideoDirect
        /// </summary>
        [DataMember(Name="IsVideoDirect", EmitDefaultValue=true)]
        public bool IsVideoDirect { get; set; }

        /// <summary>
        /// Gets or Sets TranscodeReasons
        /// </summary>
        [DataMember(Name="TranscodeReasons", EmitDefaultValue=true)]
        public List<TranscodeReason> TranscodeReasons { get; set; }

        /// <summary>
        /// Gets or Sets VideoCodec
        /// </summary>
        [DataMember(Name="VideoCodec", EmitDefaultValue=true)]
        public string VideoCodec { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="Width", EmitDefaultValue=true)]
        public int? Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranscodingInfo {\n");
            sb.Append("  AudioChannels: ").Append(AudioChannels).Append("\n");
            sb.Append("  AudioCodec: ").Append(AudioCodec).Append("\n");
            sb.Append("  Bitrate: ").Append(Bitrate).Append("\n");
            sb.Append("  CompletionPercentage: ").Append(CompletionPercentage).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  Framerate: ").Append(Framerate).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  IsAudioDirect: ").Append(IsAudioDirect).Append("\n");
            sb.Append("  IsVideoDirect: ").Append(IsVideoDirect).Append("\n");
            sb.Append("  TranscodeReasons: ").Append(TranscodeReasons).Append("\n");
            sb.Append("  VideoCodec: ").Append(VideoCodec).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TranscodingInfo)obj);
        }

        /// <summary>
        /// Returns true if TranscodingInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of TranscodingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscodingInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AudioChannels == other.AudioChannels ||
                    AudioChannels != null &&
                    AudioChannels.Equals(other.AudioChannels)
                ) && 
                (
                    AudioCodec == other.AudioCodec ||
                    AudioCodec != null &&
                    AudioCodec.Equals(other.AudioCodec)
                ) && 
                (
                    Bitrate == other.Bitrate ||
                    Bitrate != null &&
                    Bitrate.Equals(other.Bitrate)
                ) && 
                (
                    CompletionPercentage == other.CompletionPercentage ||
                    CompletionPercentage != null &&
                    CompletionPercentage.Equals(other.CompletionPercentage)
                ) && 
                (
                    Container == other.Container ||
                    Container != null &&
                    Container.Equals(other.Container)
                ) && 
                (
                    Framerate == other.Framerate ||
                    Framerate != null &&
                    Framerate.Equals(other.Framerate)
                ) && 
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                ) && 
                (
                    IsAudioDirect == other.IsAudioDirect ||
                    
                    IsAudioDirect.Equals(other.IsAudioDirect)
                ) && 
                (
                    IsVideoDirect == other.IsVideoDirect ||
                    
                    IsVideoDirect.Equals(other.IsVideoDirect)
                ) && 
                (
                    TranscodeReasons == other.TranscodeReasons ||
                    TranscodeReasons != null &&
                    other.TranscodeReasons != null &&
                    TranscodeReasons.SequenceEqual(other.TranscodeReasons)
                ) && 
                (
                    VideoCodec == other.VideoCodec ||
                    VideoCodec != null &&
                    VideoCodec.Equals(other.VideoCodec)
                ) && 
                (
                    Width == other.Width ||
                    Width != null &&
                    Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AudioChannels != null)
                    hashCode = hashCode * 59 + AudioChannels.GetHashCode();
                    if (AudioCodec != null)
                    hashCode = hashCode * 59 + AudioCodec.GetHashCode();
                    if (Bitrate != null)
                    hashCode = hashCode * 59 + Bitrate.GetHashCode();
                    if (CompletionPercentage != null)
                    hashCode = hashCode * 59 + CompletionPercentage.GetHashCode();
                    if (Container != null)
                    hashCode = hashCode * 59 + Container.GetHashCode();
                    if (Framerate != null)
                    hashCode = hashCode * 59 + Framerate.GetHashCode();
                    if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAudioDirect.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsVideoDirect.GetHashCode();
                    if (TranscodeReasons != null)
                    hashCode = hashCode * 59 + TranscodeReasons.GetHashCode();
                    if (VideoCodec != null)
                    hashCode = hashCode * 59 + VideoCodec.GetHashCode();
                    if (Width != null)
                    hashCode = hashCode * 59 + Width.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TranscodingInfo left, TranscodingInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TranscodingInfo left, TranscodingInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
