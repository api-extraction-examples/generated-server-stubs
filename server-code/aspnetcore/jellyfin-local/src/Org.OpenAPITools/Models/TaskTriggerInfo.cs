/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class TaskTriggerInfo.
    /// </summary>
    [DataContract]
    public partial class TaskTriggerInfo : IEquatable<TaskTriggerInfo>
    {
        /// <summary>
        /// Gets or Sets DayOfWeek
        /// </summary>
        [DataMember(Name="DayOfWeek", EmitDefaultValue=true)]
        public DayOfWeek DayOfWeek { get; set; }

        /// <summary>
        /// Gets or sets the interval.
        /// </summary>
        /// <value>Gets or sets the interval.</value>
        [DataMember(Name="IntervalTicks", EmitDefaultValue=true)]
        public long? IntervalTicks { get; set; }

        /// <summary>
        /// Gets or sets the maximum runtime ticks.
        /// </summary>
        /// <value>Gets or sets the maximum runtime ticks.</value>
        [DataMember(Name="MaxRuntimeTicks", EmitDefaultValue=true)]
        public long? MaxRuntimeTicks { get; set; }

        /// <summary>
        /// Gets or sets the time of day.
        /// </summary>
        /// <value>Gets or sets the time of day.</value>
        [DataMember(Name="TimeOfDayTicks", EmitDefaultValue=true)]
        public long? TimeOfDayTicks { get; set; }

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>Gets or sets the type.</value>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskTriggerInfo {\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  IntervalTicks: ").Append(IntervalTicks).Append("\n");
            sb.Append("  MaxRuntimeTicks: ").Append(MaxRuntimeTicks).Append("\n");
            sb.Append("  TimeOfDayTicks: ").Append(TimeOfDayTicks).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaskTriggerInfo)obj);
        }

        /// <summary>
        /// Returns true if TaskTriggerInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskTriggerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskTriggerInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DayOfWeek == other.DayOfWeek ||
                    
                    DayOfWeek.Equals(other.DayOfWeek)
                ) && 
                (
                    IntervalTicks == other.IntervalTicks ||
                    IntervalTicks != null &&
                    IntervalTicks.Equals(other.IntervalTicks)
                ) && 
                (
                    MaxRuntimeTicks == other.MaxRuntimeTicks ||
                    MaxRuntimeTicks != null &&
                    MaxRuntimeTicks.Equals(other.MaxRuntimeTicks)
                ) && 
                (
                    TimeOfDayTicks == other.TimeOfDayTicks ||
                    TimeOfDayTicks != null &&
                    TimeOfDayTicks.Equals(other.TimeOfDayTicks)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + DayOfWeek.GetHashCode();
                    if (IntervalTicks != null)
                    hashCode = hashCode * 59 + IntervalTicks.GetHashCode();
                    if (MaxRuntimeTicks != null)
                    hashCode = hashCode * 59 + MaxRuntimeTicks.GetHashCode();
                    if (TimeOfDayTicks != null)
                    hashCode = hashCode * 59 + TimeOfDayTicks.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaskTriggerInfo left, TaskTriggerInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaskTriggerInfo left, TaskTriggerInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
